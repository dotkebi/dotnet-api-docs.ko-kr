<Type Name="Expression" FullName="System.Linq.Expressions.Expression">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4a15e566b1867612b683382b5ceeba7ab0032d72" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58737168" /></Metadata><TypeSignature Language="C#" Value="public abstract class Expression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Expression extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.Expression" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Expression" />
  <TypeSignature Language="C++ CLI" Value="public ref class Expression abstract" />
  <TypeSignature Language="F#" Value="type Expression = class" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="2ed3f-101">식 트리 노드를 나타내는 클래스가 파생되는 기본 클래스를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-101">Provides the base class from which the classes that represent expression tree nodes are derived.</span></span> <span data-ttu-id="2ed3f-102">또한 다양한 노드 형식을 만드는 <see langword="static" />(Visual Basic에서는 <see langword="Shared" />) 팩터리 메서드가 들어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-102">It also contains <see langword="static" /> (<see langword="Shared" /> in Visual Basic) factory methods to create the various node types.</span></span> <span data-ttu-id="2ed3f-103">이 클래스는 <see langword="abstract" /> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-103">This is an <see langword="abstract" /> class.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2ed3f-104">다음 코드 예제에는 블록 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-104">The following code example shows how to create a block expression.</span></span> <span data-ttu-id="2ed3f-105">Block 식 두 이루어져 <xref:System.Linq.Expressions.MethodCallExpression> 개체와 하나의 <xref:System.Linq.Expressions.ConstantExpression> 개체.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-105">The block expression consists of two <xref:System.Linq.Expressions.MethodCallExpression> objects and one <xref:System.Linq.Expressions.ConstantExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#13)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#13)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-106"><see cref="T:System.Linq.Expressions.Expression" />의 새 인스턴스를 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-106">Constructs a new instance of <see cref="T:System.Linq.Expressions.Expression" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Expression ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Expression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2ed3f-107"><see cref="T:System.Linq.Expressions.Expression" />의 새 인스턴스를 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-107">Constructs a new instance of <see cref="T:System.Linq.Expressions.Expression" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Expression (System.Linq.Expressions.ExpressionType nodeType, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype System.Linq.Expressions.ExpressionType nodeType, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Expression(System::Linq::Expressions::ExpressionType nodeType, Type ^ type);" />
      <MemberSignature Language="F#" Value="new System.Linq.Expressions.Expression : System.Linq.Expressions.ExpressionType * Type -&gt; System.Linq.Expressions.Expression" Usage="new System.Linq.Expressions.Expression (nodeType, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("use a different constructor that does not take ExpressionType. Then override NodeType and Type properties to provide the values that would be specified to this constructor.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="nodeType" Type="System.Linq.Expressions.ExpressionType" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="nodeType"><span data-ttu-id="2ed3f-108">노드 형식으로 설정할 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-108">The <see cref="T:System.Linq.Expressions.ExpressionType" /> to set as the node type.</span></span></param>
        <param name="type"><span data-ttu-id="2ed3f-109">이 <see cref="P:System.Linq.Expressions.Expression.Type" />의 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-109">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of this <see cref="T:System.Linq.Expressions.Expression" />.</span></span></param>
        <summary><span data-ttu-id="2ed3f-110"><see cref="T:System.Linq.Expressions.Expression" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-110">Initializes a new instance of the <see cref="T:System.Linq.Expressions.Expression" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-111">이 생성자는 파생된 클래스의 생성자에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-111">This constructor is called from constructors in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression Accept(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function Accept (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ Accept(System::Linq::Expressions::ExpressionVisitor ^ visitor);" />
      <MemberSignature Language="F#" Value="abstract member Accept : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression&#xA;override this.Accept : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression" Usage="expression.Accept visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="visitor"><span data-ttu-id="2ed3f-112">이 노드를 열어 볼 방문자입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-112">The visitor to visit this node with.</span></span></param>
        <summary><span data-ttu-id="2ed3f-113">이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-113">Dispatches to the specific visit method for this node type.</span></span> <span data-ttu-id="2ed3f-114">예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-114">For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-115">이 노드를 열어 본 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-115">The result of visiting this node.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-116">이 기본 구현 <xref:System.Linq.Expressions.ExpressionType.Extension> 노드의 호출 <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-116">This default implementation for <xref:System.Linq.Expressions.ExpressionType.Extension> nodes calls <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.</span></span> <span data-ttu-id="2ed3f-117">파생된 방문자 클래스에 대해 좀 더 구체적인 메서드를 호출 하려면이 메서드를 재정의 합니다 <xref:System.Linq.Expressions.ExpressionVisitor> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-117">Override this method to call into a more specific method on a derived visitor class of the <xref:System.Linq.Expressions.ExpressionVisitor> class.</span></span> <span data-ttu-id="2ed3f-118">하지만 호출 하 여 알 수 없는 방문자가 계속 지원 해야 <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-118">However, it should still support unknown visitors by calling <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-119">오버플로를 검사하지 않는 산술 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-119">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that does not have overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Add (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Add(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Add(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Add : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Add (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-120"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-120">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-121"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-121">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-122">오버플로를 검사하지 않는 산술 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-122">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-123"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-123">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-124">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-124">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-125"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-125">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-126">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-126">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-127">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-127">Otherwise, they are `false`.</span></span> <span data-ttu-id="2ed3f-128"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-128">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-129">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-129">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-130">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-130">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-131">다음 규칙은 선택한 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-131">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-132">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 더하기 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-132">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-133">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-133">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-134">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-134">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-135">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-135">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-136">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-136">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-137">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-137">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-138">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-138">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-139">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-139">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-140">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-140">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-141">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-141">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-142">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-142">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-143">노드의 유형 미리 정의 된 더하기 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-143">The type of the node is the result type of the predefined addition operator.</span></span>  
  
-   <span data-ttu-id="2ed3f-144">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-144">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-145">노드의 유형 미리 정의 된 더하기 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-145">The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-146">다음 코드 예제에는 두 개의 정수를 추가 하는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-146">The following code example shows how to create an expression that adds two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#1)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-147"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-147"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-148"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 더하기 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-148">The addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Add (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Add(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Add(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Add : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Add (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-149"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-149">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-150"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-150">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-151"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-151">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-152">오버플로를 검사하지 않는 산술 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-152">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that does not have overflow checking.</span></span> <span data-ttu-id="2ed3f-153">구현 메서드를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-153">The implementing method can be specified.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-154"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Add" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-154">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-155">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-155">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-156"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-156">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-157">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-157">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-158">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-158">Otherwise, they are `false`.</span></span> <span data-ttu-id="2ed3f-159"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-159">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-160">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-160">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-161">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-161">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-162">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-162">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-163">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 노드에 대 한 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-163">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="2ed3f-164">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 더하기 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-164">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-165">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-165">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-166">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-166">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-167">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-167">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-168">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-168">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-169">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-169">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-170">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-170">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-171">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-171">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-172">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-172">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-173">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-173">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-174">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-174">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-175">노드의 유형 미리 정의 된 더하기 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-175">The type of the node is the result type of the predefined addition operator.</span></span>  
  
-   <span data-ttu-id="2ed3f-176">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-176">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-177">노드의 유형 미리 정의 된 더하기 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-177">The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-178"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-178"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-179"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-179"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-180"><paramref name="method" />가 <see langword="null" />이고 더하기 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-180"><paramref name="method" /> is <see langword="null" /> and the addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-181">오버플로를 검사하지 않는 더하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-181">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member AddAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-182"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-182">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-183"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-183">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-184">오버플로를 검사하지 않는 더하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-184">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-185"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-185">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2ed3f-186">다음 코드 예제에는 정수 변수에 값을 추가 하 고 다음 작업의 결과 변수에 할당 하는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-186">The following code example shows how to create an expression that adds a value to an integer variable and then assigns the result of the operation to the variable.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#18)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member AddAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-187"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-187">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-188"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-188">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-189"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-189">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-190">오버플로를 검사하지 않는 더하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-190">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-191"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-191">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member AddAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-192"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-192">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-193"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-193">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-194"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-194">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="2ed3f-195"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-195">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-196">오버플로를 검사하지 않는 더하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-196">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-197"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-197">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddAssignChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-198">오버플로를 검사하는 더하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-198">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssignChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member AddAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddAssignChecked (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-199"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-199">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-200"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-200">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-201">오버플로를 검사하는 더하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-201">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-202"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-202">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssignChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member AddAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddAssignChecked (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-203"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-203">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-204"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-204">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-205"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-205">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-206">오버플로를 검사하는 더하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-206">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-207"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-207">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssignChecked (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member AddAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddAssignChecked (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-208"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-208">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-209"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-209">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-210"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-210">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="2ed3f-211"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-211">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-212">오버플로를 검사하는 더하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-212">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-213"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-213">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-214">오버플로를 검사하는 산술 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-214">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that has overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member AddChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddChecked (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-215"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-215">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-216"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-216">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-217">오버플로를 검사하는 산술 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-217">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-218"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-218">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-219">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-219">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-220"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-220">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-221">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-221">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-222">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-222">Otherwise, they are `false`.</span></span> <span data-ttu-id="2ed3f-223"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-223">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-224">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-224">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-225">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-225">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-226">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-226">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-227">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 더하기 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-227">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-228">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-228">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-229">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-229">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-230">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-230">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-231">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-231">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-232">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-232">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-233">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-233">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-234">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-234">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-235">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-235">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-236">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-236">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-237">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-237">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-238">노드의 유형 미리 정의 된 더하기 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-238">The type of the node is the result type of the predefined addition operator.</span></span>  
  
-   <span data-ttu-id="2ed3f-239">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-239">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-240">노드의 유형 미리 정의 된 더하기 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-240">The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-241"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-241"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-242"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 더하기 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-242">The addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member AddChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddChecked (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-243"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-243">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-244"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-244">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-245"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-245">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-246">오버플로를 검사하는 산술 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-246">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that has overflow checking.</span></span> <span data-ttu-id="2ed3f-247">구현 메서드를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-247">The implementing method can be specified.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-248"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-248">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-249">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-249">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-250"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-250">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-251">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-251">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-252">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-252">Otherwise, they are `false`.</span></span> <span data-ttu-id="2ed3f-253"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-253">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-254">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-254">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-255">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-255">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-256">작업에 대 한 구현 메서드는 다음 규칙에 따라 선택 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-256">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="2ed3f-257">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 노드에 대 한 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-257">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="2ed3f-258">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 더하기 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-258">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-259">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-259">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-260">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-260">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-261">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-261">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-262">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-262">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-263">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-263">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-264">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-264">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-265">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-265">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-266">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-266">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-267">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-267">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-268">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-268">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-269">노드의 유형 미리 정의 된 더하기 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-269">The type of the node is the result type of the predefined addition operator.</span></span>  
  
-   <span data-ttu-id="2ed3f-270">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-270">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-271">노드의 유형 미리 정의 된 더하기 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-271">The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-272"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-272"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-273"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-273"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-274"><paramref name="method" />가 <see langword="null" />이고 더하기 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-274"><paramref name="method" /> is <see langword="null" /> and the addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="And">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-275">비트 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 연산을 나타내는 <see langword="AND" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-275">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="AND" /> operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression And (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression And(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function And (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ And(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member And : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.And (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-276"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-276">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-277"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-277">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-278">비트 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 연산을 나타내는 <see langword="AND" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-278">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="AND" /> operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-279"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.And" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-279">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.And" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-280">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-280">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-281"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-281">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-282">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-282">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-283">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-283">Otherwise, they are `false`.</span></span> <span data-ttu-id="2ed3f-284"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-284">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-285">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-285">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-286">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-286">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-287">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-287">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-288">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 비트 오버 로드 하는 사용자 정의 유형을 나타냅니다 `AND` 연산자는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-288">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-289">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 형식 정수 또는 부울 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-289">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-290">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-290">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-291">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-291">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-292">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-292">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-293">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-293">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-294">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-294">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-295">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-295">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-296">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-296">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-297">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-297">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-298">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-298">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-299">노드 형식은의 결과 형식은 미리 정의 된 비트 `AND` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-299">The type of the node is the result type of the predefined bitwise `AND` operator.</span></span>  
  
-   <span data-ttu-id="2ed3f-300">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-300">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-301">노드 형식은의 결과 형식은 미리 정의 된 비트에 해당 하는 nullable 형식을 `AND` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-301">The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `AND` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-302">다음 코드 예제에는 두 부울 값의 논리적 AND 연산을 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-302">The following code example shows how to create an expression that represents a logical AND operation on two Boolean values.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#2)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-303"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-303"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-304"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 비트 <see langword="AND" /> 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-304">The bitwise <see langword="AND" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression And (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression And(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function And (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ And(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member And : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.And (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-305"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-305">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-306"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-306">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-307"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-307">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-308">비트 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 연산을 나타내는 <see langword="AND" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-308">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="AND" /> operation.</span></span> <span data-ttu-id="2ed3f-309">구현 메서드를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-309">The implementing method can be specified.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-310"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.And" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-310">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.And" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-311">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-311">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-312"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-312">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-313">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-313">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-314">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-314">Otherwise, they are `false`.</span></span> <span data-ttu-id="2ed3f-315"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-315">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-316">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-316">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-317">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-317">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-318">작업에 대 한 구현 메서드는 다음 규칙에 따라 선택 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-318">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="2ed3f-319">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 노드에 대 한 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-319">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="2ed3f-320">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 비트 오버 로드 하는 사용자 정의 유형을 나타냅니다 `AND` 연산자는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-320">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-321">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 형식 정수 또는 부울 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-321">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-322">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-322">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-323">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-323">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-324">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-324">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-325">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-325">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-326">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-326">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-327">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-327">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-328">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-328">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-329">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-329">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-330">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-330">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-331">노드 형식은의 결과 형식은 미리 정의 된 비트 `AND` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-331">The type of the node is the result type of the predefined bitwise `AND` operator.</span></span>  
  
-   <span data-ttu-id="2ed3f-332">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-332">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-333">노드 형식은의 결과 형식은 미리 정의 된 비트에 해당 하는 nullable 형식을 `AND` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-333">The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `AND` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-334"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-334"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-335"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-335"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-336"><paramref name="method" />가 <see langword="null" />이고 비트 <see langword="AND" /> 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-336"><paramref name="method" /> is <see langword="null" /> and the bitwise <see langword="AND" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AndAlso">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-337">첫 번째 피연산자가 <see cref="T:System.Linq.Expressions.BinaryExpression" />로 계산되는 경우에만 두 번째 피연산자를 계산하는 조건부 <see langword="AND" /> 연산을 나타내는 <see langword="true" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-337">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="AND" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="true" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AndAlso">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAlso (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAlso(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAlso (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAlso(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member AndAlso : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AndAlso (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-338"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-338">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-339"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-339">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-340">첫 번째 피연산자가 <see cref="T:System.Linq.Expressions.BinaryExpression" />로 계산되는 경우에만 두 번째 피연산자를 계산하는 조건부 <see langword="AND" /> 연산을 나타내는 <see langword="true" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-340">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="AND" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="true" />.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-341"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-341">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-342">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-342">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-343"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-343">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-344">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-344">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-345">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-345">Otherwise, they are `false`.</span></span> <span data-ttu-id="2ed3f-346"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-346">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-347">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-347">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-348">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-348">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-349">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-349">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-350">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 비트 오버 로드 하는 사용자 정의 유형을 나타냅니다 `AND` 연산자는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-350">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="2ed3f-351">조건부 `AND` C# 또는 Visual Basic의 연산자를 오버 로드할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-351">The conditional `AND` operator cannot be overloaded in C# or Visual Basic.</span></span> <span data-ttu-id="2ed3f-352">그러나 조건부 `AND` 연산자는 비트를 사용 하 여 계산 됩니다 `AND` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-352">However, the conditional `AND` operator is evaluated by using the bitwise `AND` operator.</span></span> <span data-ttu-id="2ed3f-353">따라서 사용자 정의의 오버 로드를 비트 `AND` 연산자에는이 노드 유형에 대 한 구현 메서드 일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-353">Thus, a user-defined overload of the bitwise `AND` operator can be the implementing method for this node type.</span></span>  
  
-   <span data-ttu-id="2ed3f-354">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 형식을 부울 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-354">Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-355">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-355">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-356">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-356">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-357">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-357">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-358">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-358">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-359">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-359">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-360">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상의 값이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-360">`left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-361">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-361">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-362">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-362">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-363">`left`. 형식 및 `right`합니다. 형식이 동일한 부울 형식이는 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-363">`left`.Type and `right`.Type are the same Boolean type.</span></span>  
  
-   <span data-ttu-id="2ed3f-364">경우 `left`합니다. 형식 및 `right`합니다. 형식이 nullable이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-364">If `left`.Type and `right`.Type are non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-365">노드 형식은 미리 정의 된 조건부의 결과 형식은 `AND` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-365">The type of the node is the result type of the predefined conditional `AND` operator.</span></span>  
  
-   <span data-ttu-id="2ed3f-366">경우 `left`합니다. 형식 및 `right`합니다. 형식이 nullable, 노드가 리프트 된입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-366">If `left`.Type and `right`.Type are nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-367">노드 형식은 미리 정의 된 조건부의 결과 형식에 해당 하는 nullable 형식을 `AND` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-367">The type of the node is the nullable type that corresponds to the result type of the predefined conditional `AND` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-368">다음 코드 예제에서는 식을 만들려면 수행 하는 논리적 방법과 작업 경우에만 해당 두 피연산자의 첫 번째 피연산자를 보여 줍니다. `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-368">The following code example shows how to create an expression that performs a logical AND operation on its two operands only if the first operand evaluates to `true`.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#19)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-369"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-369"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-370"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 비트 <see langword="AND" /> 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-370">The bitwise <see langword="AND" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span>  
  
<span data-ttu-id="2ed3f-371">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-371">-or-</span></span> 
 <span data-ttu-id="2ed3f-372"><paramref name="left" />.Type과 <paramref name="right" />.Type이 동일한 부울 형식이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-372"><paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AndAlso">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAlso (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAlso(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAlso (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAlso(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member AndAlso : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AndAlso (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-373"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-373">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-374"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-374">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-375"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-375">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-376">첫 번째 피연산자가 true로 확인되는 경우에만 두 번째 피연산자를 계산하는 조건부 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 연산을 나타내는 <see langword="AND" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-376">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="AND" /> operation that evaluates the second operand only if the first operand is resolved to true.</span></span> <span data-ttu-id="2ed3f-377">구현 메서드를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-377">The implementing method can be specified.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-378"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-378">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-379">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-379">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-380"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-380">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-381">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-381">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-382">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-382">Otherwise, they are `false`.</span></span> <span data-ttu-id="2ed3f-383"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-383">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-384">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-384">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-385">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-385">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-386">작업에 대 한 구현 메서드는 다음 규칙에 따라 선택 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-386">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="2ed3f-387">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 노드에 대 한 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-387">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="2ed3f-388">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 비트 오버 로드 하는 사용자 정의 유형을 나타냅니다 `AND` 연산자는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-388">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="2ed3f-389">조건부 `AND` C# 또는 Visual Basic의 연산자를 오버 로드할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-389">The conditional `AND` operator cannot be overloaded in C# or Visual Basic.</span></span> <span data-ttu-id="2ed3f-390">그러나 조건부 `AND` 연산자는 비트를 사용 하 여 계산 됩니다 `AND` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-390">However, the conditional `AND` operator is evaluated by using the bitwise `AND` operator.</span></span> <span data-ttu-id="2ed3f-391">따라서 사용자 정의의 오버 로드를 비트 `AND` 연산자에는이 노드 유형에 대 한 구현 메서드 일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-391">Thus, a user-defined overload of the bitwise `AND` operator can be the implementing method for this node type.</span></span>  
  
-   <span data-ttu-id="2ed3f-392">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 형식을 부울 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-392">Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-393">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-393">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-394">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-394">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-395">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-395">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-396">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-396">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-397">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-397">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-398">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상의 값이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-398">`left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-399">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-399">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-400">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-400">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-401">`left`. 형식 및 `right`합니다. 형식이 동일한 부울 형식이는 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-401">`left`.Type and `right`.Type are the same Boolean type.</span></span>  
  
-   <span data-ttu-id="2ed3f-402">경우 `left`합니다. 형식 및 `right`합니다. 형식이 nullable이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-402">If `left`.Type and `right`.Type are non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-403">노드 형식은 미리 정의 된 조건부의 결과 형식은 `AND` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-403">The type of the node is the result type of the predefined conditional `AND` operator.</span></span>  
  
-   <span data-ttu-id="2ed3f-404">경우 `left`합니다. 형식 및 `right`합니다. 형식이 nullable, 노드가 리프트 된입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-404">If `left`.Type and `right`.Type are nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-405">노드 형식은 미리 정의 된 조건부의 결과 형식에 해당 하는 nullable 형식을 `AND` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-405">The type of the node is the nullable type that corresponds to the result type of the predefined conditional `AND` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-406"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-406"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-407"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-407"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-408"><paramref name="method" />가 <see langword="null" />이고 비트 <see langword="AND" /> 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-408"><paramref name="method" /> is <see langword="null" /> and the bitwise <see langword="AND" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span>  
  
<span data-ttu-id="2ed3f-409">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-409">-or-</span></span> 
 <span data-ttu-id="2ed3f-410"><paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type과 <paramref name="right" />.Type이 동일한 부울 형식이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-410"><paramref name="method" /> is <see langword="null" /> and <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AndAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-411">비트 AND 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-411">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AndAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member AndAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AndAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-412"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-412">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-413"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-413">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-414">비트 AND 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-414">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-415"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-415">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AndAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member AndAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AndAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-416"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-416">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-417"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-417">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-418"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-418">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-419">비트 AND 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-419">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-420"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-420">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AndAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member AndAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AndAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-421"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-421">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-422"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-422">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-423"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-423">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="2ed3f-424"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-424">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-425">비트 AND 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-425">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-426"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-426">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ArrayAccess">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-427">배열에 액세스할 <see cref="T:System.Linq.Expressions.IndexExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-427">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> to access an array.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ArrayAccess">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression ArrayAccess (System.Linq.Expressions.Expression array, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression ArrayAccess(class System.Linq.Expressions.Expression array, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayAccess (array As Expression, indexes As IEnumerable(Of Expression)) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ ArrayAccess(System::Linq::Expressions::Expression ^ array, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ indexes);" />
      <MemberSignature Language="F#" Value="static member ArrayAccess : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.IndexExpression" Usage="System.Linq.Expressions.Expression.ArrayAccess (array, indexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="indexes" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="2ed3f-428">다차원 배열을 나타내는 식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-428">An expression that represents the multidimensional array.</span></span></param>
        <param name="indexes"><span data-ttu-id="2ed3f-429">배열을 인덱싱하는 데 사용되는 식이 포함된 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-429">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing expressions used to index the array.</span></span></param>
        <summary><span data-ttu-id="2ed3f-430">다차원 배열에 액세스할 <see cref="T:System.Linq.Expressions.IndexExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-430">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> to access a multidimensional array.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-431">만든 <see cref="T:System.Linq.Expressions.IndexExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-431">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-432">배열을 나타내는 식을 사용 하 여 얻을 수는 <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> 메서드를 통해 또는 <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> 또는 <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-432">The expression that represents the array can be obtained by using the <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> method, or through <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> or <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-433">다음 코드 예제에 사용 하 여 다차원 배열의 요소 값을 변경 하는 방법을 보여 줍니다는 `ArrayAccess` 메서드.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-433">The following code example shows how to change the value of an element in a multidimensional array by using the `ArrayAccess` method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#21)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayAccess">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression ArrayAccess (System.Linq.Expressions.Expression array, params System.Linq.Expressions.Expression[] indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression ArrayAccess(class System.Linq.Expressions.Expression array, class System.Linq.Expressions.Expression[] indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayAccess (array As Expression, ParamArray indexes As Expression()) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ ArrayAccess(System::Linq::Expressions::Expression ^ array, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ indexes);" />
      <MemberSignature Language="F#" Value="static member ArrayAccess : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.IndexExpression" Usage="System.Linq.Expressions.Expression.ArrayAccess (array, indexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="indexes" Type="System.Linq.Expressions.Expression[]" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="2ed3f-434">인덱싱할 배열을 나타내는 식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-434">An expression representing the array to index.</span></span></param>
        <param name="indexes"><span data-ttu-id="2ed3f-435">배열을 인덱싱하는 데 사용되는 식이 포함된 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-435">An array that contains expressions used to index the array.</span></span></param>
        <summary><span data-ttu-id="2ed3f-436">배열에 액세스할 <see cref="T:System.Linq.Expressions.IndexExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-436">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> to access an array.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-437">만든 <see cref="T:System.Linq.Expressions.IndexExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-437">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-438">배열을 나타내는 식을 사용 하 여 얻을 수는 <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> 메서드를 통해 또는 <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> 또는 <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-438">The expression that represents the array can be obtained by using the <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> method, or through <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> or <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>.</span></span>  
  
 <span data-ttu-id="2ed3f-439">다차원 배열에 대 한 사용을 <xref:System.Linq.Expressions.Expression.ArrayAccess%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-439">For multidimensional arrays, use the <xref:System.Linq.Expressions.Expression.ArrayAccess%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-440">다음 코드 예제를 사용 하 여 배열 요소 값을 변경 하는 방법을 보여 줍니다는 `ArrayAccess` 메서드.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-440">The following code example shows how to change a value of an array element by using the `ArrayAccess` method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#20)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ArrayIndex">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-441">배열 인덱스 연산자 적용을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-441">Creates an <see cref="T:System.Linq.Expressions.Expression" /> that represents applying an array index operator.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ArrayIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression ArrayIndex(class System.Linq.Expressions.Expression array, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayIndex (array As Expression, indexes As IEnumerable(Of Expression)) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ ArrayIndex(System::Linq::Expressions::Expression ^ array, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ indexes);" />
      <MemberSignature Language="F#" Value="static member ArrayIndex : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.ArrayIndex (array, indexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="2ed3f-442"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-442">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to.</span></span></param>
        <param name="indexes"><span data-ttu-id="2ed3f-443"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-443">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-444">차수가 1보다 큰 배열에 대한 배열 인덱스 연산자 적용을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-444">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents applying an array index operator to an array of rank more than one.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-445"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-445">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-446">각 요소의 `indexes` 있어야 <xref:System.Linq.Expressions.Expression.Type%2A> 같음 <xref:System.Int32>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-446">Each element of `indexes` must have <xref:System.Linq.Expressions.Expression.Type%2A> equal to <xref:System.Int32>.</span></span> <span data-ttu-id="2ed3f-447">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성을 `array` 차수가의 요소 수와 일치 하는 배열 형식을 나타내야 `indexes`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-447">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type whose rank matches the number of elements in `indexes`.</span></span>  
  
 <span data-ttu-id="2ed3f-448">경우 순위 `array`합니다. 이 메서드는 반환 형식이 1 이면는 <xref:System.Linq.Expressions.BinaryExpression>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-448">If the rank of `array`.Type is 1, this method returns a <xref:System.Linq.Expressions.BinaryExpression>.</span></span> <span data-ttu-id="2ed3f-449"><xref:System.Linq.Expressions.BinaryExpression.Left%2A> 속성이로 설정 되어 `array` 하며 <xref:System.Linq.Expressions.BinaryExpression.Right%2A> 의 단일 요소 속성 `indexes`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-449">The <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property is set to `array` and the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property is set to the single element of `indexes`.</span></span> <span data-ttu-id="2ed3f-450"><xref:System.Linq.Expressions.Expression.Type%2A> 의 속성을 <xref:System.Linq.Expressions.BinaryExpression> 의 요소 형식을 나타내는 `array`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-450">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the <xref:System.Linq.Expressions.BinaryExpression> represents the element type of `array`.Type.</span></span>  
  
 <span data-ttu-id="2ed3f-451">경우 순위 `array`합니다. 이 메서드는 반환 형식이 둘 이상의 면을 <xref:System.Linq.Expressions.MethodCallExpression>입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-451">If the rank of `array`.Type is more than one, this method returns a <xref:System.Linq.Expressions.MethodCallExpression>.</span></span> <span data-ttu-id="2ed3f-452"><xref:System.Linq.Expressions.MethodCallExpression.Method%2A> 속성을 <xref:System.Reflection.MethodInfo> 공용 인스턴스 메서드를 설명 하는 `Get` 나타내는 형식에는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성 `array`.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-452">The <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property is set to the <xref:System.Reflection.MethodInfo> that describes the public instance method `Get` on the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-453">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> 메서드를는 <xref:System.Linq.Expressions.MethodCallExpression> 2 차원 배열에 대 한 인덱싱을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-453">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create a <xref:System.Linq.Expressions.MethodCallExpression> that represents indexing into a two-dimensional array.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#3)]
 [!code-vb[System.Linq.Expressions.Expression#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-454"><paramref name="array" /> 또는 <paramref name="indexes" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-454"><paramref name="array" /> or <paramref name="indexes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-455"><paramref name="array" />.Type이 배열 형식을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-455"><paramref name="array" />.Type does not represent an array type.</span></span>  
  
<span data-ttu-id="2ed3f-456">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-456">-or-</span></span> 
<span data-ttu-id="2ed3f-457"><paramref name="array" />.Type의 차수가 <paramref name="indexes" />의 요소 수와 일치하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-457">The rank of <paramref name="array" />.Type does not match the number of elements in <paramref name="indexes" />.</span></span>  
  
<span data-ttu-id="2ed3f-458">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-458">-or-</span></span> 
<span data-ttu-id="2ed3f-459"><paramref name="indexes" />의 요소 중 하나 이상의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 <see cref="T:System.Int32" /> 형식을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-459">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="indexes" /> does not represent the <see cref="T:System.Int32" /> type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ArrayIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Linq.Expressions.Expression index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ArrayIndex(class System.Linq.Expressions.Expression array, class System.Linq.Expressions.Expression index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayIndex (array As Expression, index As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ArrayIndex(System::Linq::Expressions::Expression ^ array, System::Linq::Expressions::Expression ^ index);" />
      <MemberSignature Language="F#" Value="static member ArrayIndex : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ArrayIndex (array, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="index" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="2ed3f-460"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-460">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="index"><span data-ttu-id="2ed3f-461"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-461">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-462">차수가 1인 배열에 대한 배열 인덱스 연산자 적용을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-462">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents applying an array index operator to an array of rank one.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-463"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-463">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-464">`index` 형식의 인덱스를 나타내야 <xref:System.Int32>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-464">`index` must represent an index of type <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="2ed3f-465"><xref:System.Linq.Expressions.BinaryExpression.Method%2A> 결과 속성 <xref:System.Linq.Expressions.BinaryExpression> 됩니다 `null`, 모두 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 및 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 로 설정 됩니다 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-465">The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null`, and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`.</span></span> <span data-ttu-id="2ed3f-466">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성은 요소 형식의 같음 `array`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-466">The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the element type of `array`.Type.</span></span> <span data-ttu-id="2ed3f-467"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-467">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-468"><paramref name="array" /> 또는 <paramref name="index" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-468"><paramref name="array" /> or <paramref name="index" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-469"><paramref name="array" />.Type이 배열 형식을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-469"><paramref name="array" />.Type does not represent an array type.</span></span>  
  
<span data-ttu-id="2ed3f-470">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-470">-or-</span></span> 
 <span data-ttu-id="2ed3f-471"><paramref name="array" />.Type이 나타내는 배열 형식의 차수가 1이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-471"><paramref name="array" />.Type represents an array type whose rank is not 1.</span></span>  
  
<span data-ttu-id="2ed3f-472">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-472">-or-</span></span> 
 <span data-ttu-id="2ed3f-473"><paramref name="index" />.Type이 <see cref="T:System.Int32" /> 형식을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-473"><paramref name="index" />.Type does not represent the <see cref="T:System.Int32" /> type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ArrayIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression ArrayIndex (System.Linq.Expressions.Expression array, params System.Linq.Expressions.Expression[] indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression ArrayIndex(class System.Linq.Expressions.Expression array, class System.Linq.Expressions.Expression[] indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayIndex (array As Expression, ParamArray indexes As Expression()) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ ArrayIndex(System::Linq::Expressions::Expression ^ array, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ indexes);" />
      <MemberSignature Language="F#" Value="static member ArrayIndex : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.ArrayIndex (array, indexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="2ed3f-474">배열 인덱스 작업에 대한 <see cref="T:System.Linq.Expressions.Expression" /> 인스턴스 - 인덱스의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-474">An array of <see cref="T:System.Linq.Expressions.Expression" /> instances - indexes for the array index operation.</span></span></param>
        <param name="indexes"><span data-ttu-id="2ed3f-475"><see cref="T:System.Linq.Expressions.Expression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-475">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-476">다차원 배열에 대한 배열 인덱스 연산자를 적용하는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-476">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents applying an array index operator to a multidimensional array.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-477"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-477">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-478">각 요소의 `indexes` 있어야 <xref:System.Linq.Expressions.Expression.Type%2A> 같음 <xref:System.Int32>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-478">Each element of `indexes` must have <xref:System.Linq.Expressions.Expression.Type%2A> equal to <xref:System.Int32>.</span></span> <span data-ttu-id="2ed3f-479">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성을 `array` 차수가의 요소 수와 일치 하는 배열 형식을 나타내야 `indexes`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-479">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type whose rank matches the number of elements in `indexes`.</span></span>  
  
 <span data-ttu-id="2ed3f-480">경우 순위 `array`합니다. 이 메서드는 반환 형식이 1 이면는 <xref:System.Linq.Expressions.BinaryExpression>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-480">If the rank of `array`.Type is 1, this method returns a <xref:System.Linq.Expressions.BinaryExpression>.</span></span> <span data-ttu-id="2ed3f-481"><xref:System.Linq.Expressions.BinaryExpression.Left%2A> 속성이로 설정 되어 `array` 하며 <xref:System.Linq.Expressions.BinaryExpression.Right%2A> 의 단일 요소 속성 `indexes`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-481">The <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property is set to `array` and the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property is set to the single element of `indexes`.</span></span> <span data-ttu-id="2ed3f-482"><xref:System.Linq.Expressions.Expression.Type%2A> 의 속성을 <xref:System.Linq.Expressions.BinaryExpression> 의 요소 형식을 나타내는 `array`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-482">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the <xref:System.Linq.Expressions.BinaryExpression> represents the element type of `array`.Type.</span></span>  
  
 <span data-ttu-id="2ed3f-483">경우 순위 `array`합니다. 이 메서드는 반환 형식이 둘 이상의 면을 <xref:System.Linq.Expressions.MethodCallExpression>입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-483">If the rank of `array`.Type is more than one, this method returns a <xref:System.Linq.Expressions.MethodCallExpression>.</span></span> <span data-ttu-id="2ed3f-484"><xref:System.Linq.Expressions.MethodCallExpression.Method%2A> 속성을 <xref:System.Reflection.MethodInfo> 공용 인스턴스 메서드를 설명 하는 `Get` 나타내는 형식에는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성 `array`.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-484">The <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property is set to the <xref:System.Reflection.MethodInfo> that describes the public instance method `Get` on the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-485">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> 메서드를는 <xref:System.Linq.Expressions.MethodCallExpression> 2 차원 배열에 대 한 인덱싱을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-485">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create a <xref:System.Linq.Expressions.MethodCallExpression> that represents indexing into a two-dimensional array.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#3)]
 [!code-vb[System.Linq.Expressions.Expression#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-486"><paramref name="array" /> 또는 <paramref name="indexes" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-486"><paramref name="array" /> or <paramref name="indexes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-487"><paramref name="array" />.Type이 배열 형식을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-487"><paramref name="array" />.Type does not represent an array type.</span></span>  
  
<span data-ttu-id="2ed3f-488">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-488">-or-</span></span> 
<span data-ttu-id="2ed3f-489"><paramref name="array" />.Type의 차수가 <paramref name="indexes" />의 요소 수와 일치하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-489">The rank of <paramref name="array" />.Type does not match the number of elements in <paramref name="indexes" />.</span></span>  
  
<span data-ttu-id="2ed3f-490">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-490">-or-</span></span> 
<span data-ttu-id="2ed3f-491"><paramref name="indexes" />의 요소 중 하나 이상의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 <see cref="T:System.Int32" /> 형식을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-491">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="indexes" /> does not represent the <see cref="T:System.Int32" /> type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ArrayLength">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression ArrayLength (System.Linq.Expressions.Expression array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression ArrayLength(class System.Linq.Expressions.Expression array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayLength (array As Expression) As UnaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ ArrayLength(System::Linq::Expressions::Expression ^ array);" />
      <MemberSignature Language="F#" Value="static member ArrayLength : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.ArrayLength array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="2ed3f-492"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-492">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-493">1차원 배열 길이를 가져오는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-493">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an expression for obtaining the length of a one-dimensional array.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-494"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" /> 속성이 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />인 <paramref name="array" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-494">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to <paramref name="array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-495">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성의 `array` 배열 형식을 나타내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-495">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type.</span></span>  
  
 <span data-ttu-id="2ed3f-496">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.UnaryExpression> 값과 같음 <xref:System.Int32>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-496">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is equal to <xref:System.Int32>.</span></span> <span data-ttu-id="2ed3f-497"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> 속성은 `null`, 모두 <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> 로 설정 됩니다 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-497">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property is `null`, and both <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> are set to `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-498"><paramref name="array" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-498"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-499"><paramref name="array" />.Type이 배열 형식을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-499"><paramref name="array" />.Type does not represent an array type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Assign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Assign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Assign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Assign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Assign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Assign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Assign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-500"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-500">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-501"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-501">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-502">할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-502">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an assignment operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-503"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Assign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-503">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Assign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-504">`Assign` 값 형식에 대 한 값을 복사 하는 식 및 참조 형식에 대 한 참조를 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-504">The `Assign` expression copies a value for value types, and it copies a reference for reference types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-505">다음 코드 예제에는 할당 작업을 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-505">The following code example shows how to create an expression that represents an assignment operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#12)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Bind">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-506">멤버 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberAssignment" />를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-506">Creates a <see cref="T:System.Linq.Expressions.MemberAssignment" /> that represents the initialization of a member.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Bind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberAssignment Bind (System.Reflection.MemberInfo member, System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberAssignment Bind(class System.Reflection.MemberInfo member, class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberAssignment ^ Bind(System::Reflection::MemberInfo ^ member, System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Bind : System.Reflection.MemberInfo * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MemberAssignment" Usage="System.Linq.Expressions.Expression.Bind (member, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberAssignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="member"><span data-ttu-id="2ed3f-507"><see cref="T:System.Reflection.MemberInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-507">A <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span></span></param>
        <param name="expression"><span data-ttu-id="2ed3f-508"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-508">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-509">필드 또는 속성 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberAssignment" />를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-509">Creates a <see cref="T:System.Linq.Expressions.MemberAssignment" /> that represents the initialization of a field or property.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-510"><see cref="T:System.Linq.Expressions.MemberAssignment" />이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> 및 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-510">A <see cref="T:System.Linq.Expressions.MemberAssignment" /> that has <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> equal to <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-511"><xref:System.Linq.Expressions.Expression.Type%2A> 속성을 `expression` 나타내는 형식에 할당할 수 있어야 합니다 <xref:System.Reflection.FieldInfo.FieldType%2A> 또는 <xref:System.Reflection.PropertyInfo.PropertyType%2A> 속성 `member`.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-511">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `expression` must be assignable to the type represented by the <xref:System.Reflection.FieldInfo.FieldType%2A> or <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of `member`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-512"><paramref name="member" /> 또는 <paramref name="expression" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-512"><paramref name="member" /> or <paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-513"><paramref name="member" />가 필드나 속성을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-513"><paramref name="member" /> does not represent a field or property.</span></span>  
  
<span data-ttu-id="2ed3f-514">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-514">-or-</span></span> 
<span data-ttu-id="2ed3f-515"><paramref name="member" />가 나타내는 속성에 <see langword="set" /> 접근자가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-515">The property represented by <paramref name="member" /> does not have a <see langword="set" /> accessor.</span></span>  
  
<span data-ttu-id="2ed3f-516">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-516">-or-</span></span> 
 <span data-ttu-id="2ed3f-517"><paramref name="expression" />.Type을 <paramref name="member" />가 나타내는 필드 또는 속성의 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-517"><paramref name="expression" />.Type is not assignable to the type of the field or property that <paramref name="member" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Bind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberAssignment Bind (System.Reflection.MethodInfo propertyAccessor, System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberAssignment Bind(class System.Reflection.MethodInfo propertyAccessor, class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberAssignment ^ Bind(System::Reflection::MethodInfo ^ propertyAccessor, System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Bind : System.Reflection.MethodInfo * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MemberAssignment" Usage="System.Linq.Expressions.Expression.Bind (propertyAccessor, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberAssignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="propertyAccessor"><span data-ttu-id="2ed3f-518">속성 접근자 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-518">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span></span></param>
        <param name="expression"><span data-ttu-id="2ed3f-519"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-519">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-520">속성 접근자 메서드를 사용한 멤버 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberAssignment" />를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-520">Creates a <see cref="T:System.Linq.Expressions.MemberAssignment" /> that represents the initialization of a member by using a property accessor method.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-521"><see cref="T:System.Linq.Expressions.MemberAssignment" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />로 액세스되는 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />로 설정되고 <paramref name="propertyAccessor" /> 속성이 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />으로 설정된 <paramref name="expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-521">A <see cref="T:System.Linq.Expressions.MemberAssignment" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property set to <paramref name="expression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-522"><xref:System.Linq.Expressions.Expression.Type%2A> 속성을 `expression` 가 나타내는 형식에 할당할 수 있어야 합니다 <xref:System.Reflection.PropertyInfo.PropertyType%2A> 액세스 되는 속성의 속성 `propertyAccessor`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-522">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `expression` must be assignable to the type represented by the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of the property accessed in `propertyAccessor`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-523"><paramref name="propertyAccessor" /> 또는 <paramref name="expression" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-523"><paramref name="propertyAccessor" /> or <paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-524"><paramref name="propertyAccessor" />가 속성 접근자 메서드를 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-524"><paramref name="propertyAccessor" /> does not represent a property accessor method.</span></span>  
  
<span data-ttu-id="2ed3f-525">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-525">-or-</span></span> 
<span data-ttu-id="2ed3f-526"><paramref name="propertyAccessor" />에서 액세스되는 속성에 <see langword="set" /> 접근자가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-526">The property accessed by <paramref name="propertyAccessor" /> does not have a <see langword="set" /> accessor.</span></span>  
  
<span data-ttu-id="2ed3f-527">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-527">-or-</span></span> 
 <span data-ttu-id="2ed3f-528"><paramref name="expression" />.Type을 <paramref name="member" />가 나타내는 필드 또는 속성의 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-528"><paramref name="expression" />.Type is not assignable to the type of the field or property that <paramref name="member" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Block">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-529"><see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-529">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (expressions As IEnumerable(Of Expression)) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block expressions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="expressions"><span data-ttu-id="2ed3f-530">블록의 식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-530">The expressions in the block.</span></span></param>
        <summary><span data-ttu-id="2ed3f-531">지정된 식을 포함하고 변수가 없는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-531">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions and has no variables.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-532">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-532">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-533">Block 식 실행 되 면 블록의 마지막 식의 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-533">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (params System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (ParamArray expressions As Expression()) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block expressions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expressions"><span data-ttu-id="2ed3f-534">블록의 식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-534">The expressions in the block.</span></span></param>
        <summary><span data-ttu-id="2ed3f-535">지정된 식을 포함하고 변수가 없는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-535">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions and has no variables.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-536">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-536">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-537">Block 식 실행 되 면 블록의 마지막 식의 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-537">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-538">다음 코드 예제에는 블록 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-538">The following code example shows how to create a block expression.</span></span> <span data-ttu-id="2ed3f-539">Block 식 두 이루어져 <xref:System.Linq.Expressions.MethodCallExpression> 개체와 하나의 <xref:System.Linq.Expressions.ConstantExpression> 개체.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-539">The block expression consists of two <xref:System.Linq.Expressions.MethodCallExpression> objects and one <xref:System.Linq.Expressions.ConstantExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#13)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (variables As IEnumerable(Of ParameterExpression), expressions As IEnumerable(Of Expression)) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : seq&lt;System.Linq.Expressions.ParameterExpression&gt; * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (variables, expressions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="variables"><span data-ttu-id="2ed3f-540">블록의 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-540">The variables in the block.</span></span></param>
        <param name="expressions"><span data-ttu-id="2ed3f-541">블록의 식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-541">The expressions in the block.</span></span></param>
        <summary><span data-ttu-id="2ed3f-542">지정된 변수와 식이 포함된 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-542">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-543">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-543">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-544">Block 식 실행 되 면 블록의 마지막 식의 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-544">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-545">다음 코드 예제에서는 블록 식에 매개 변수를 전달 하 여 블록 내에서이 매개 변수를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-545">The following code example shows how to pass a parameter to a block expression and process this parameter within a block.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#14)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, params System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (variables As IEnumerable(Of ParameterExpression), ParamArray expressions As Expression()) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : seq&lt;System.Linq.Expressions.ParameterExpression&gt; * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (variables, expressions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="variables"><span data-ttu-id="2ed3f-546">블록의 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-546">The variables in the block.</span></span></param>
        <param name="expressions"><span data-ttu-id="2ed3f-547">블록의 식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-547">The expressions in the block.</span></span></param>
        <summary><span data-ttu-id="2ed3f-548">지정된 변수와 식이 포함된 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-548">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-549">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-549">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-550">Block 식 실행 되 면 블록의 마지막 식의 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-550">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (arg0 As Expression, arg1 As Expression) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Block : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="arg0"><span data-ttu-id="2ed3f-551">블록의 첫 번째 식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-551">The first expression in the block.</span></span></param>
        <param name="arg1"><span data-ttu-id="2ed3f-552">블록의 두 번째 식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-552">The second expression in the block.</span></span></param>
        <summary><span data-ttu-id="2ed3f-553">2개 식을 포함하고 변수가 없는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-553">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains two expressions and has no variables.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-554">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-554">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-555">Block 식 실행 되 면 블록의 마지막 식의 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-555">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : Type * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (type, expressions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="2ed3f-556">블록의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-556">The result type of the block.</span></span></param>
        <param name="expressions"><span data-ttu-id="2ed3f-557">블록의 식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-557">The expressions in the block.</span></span></param>
        <summary><span data-ttu-id="2ed3f-558">지정된 식을 포함하고 변수가 없으며 특정 결과 형식이 있는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-558">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions, has no variables and has specific result type.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-559">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-559">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, params System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(Type ^ type, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : Type * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (type, expressions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="2ed3f-560">블록의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-560">The result type of the block.</span></span></param>
        <param name="expressions"><span data-ttu-id="2ed3f-561">블록의 식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-561">The expressions in the block.</span></span></param>
        <summary><span data-ttu-id="2ed3f-562">지정된 식을 포함하고 변수가 없으며 특정 결과 형식이 있는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-562">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions, has no variables and has specific result type.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-563">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-563">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (arg0 As Expression, arg1 As Expression, arg2 As Expression) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Block : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="arg0"><span data-ttu-id="2ed3f-564">블록의 첫 번째 식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-564">The first expression in the block.</span></span></param>
        <param name="arg1"><span data-ttu-id="2ed3f-565">블록의 두 번째 식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-565">The second expression in the block.</span></span></param>
        <param name="arg2"><span data-ttu-id="2ed3f-566">블록의 세 번째 식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-566">The third expression in the block.</span></span></param>
        <summary><span data-ttu-id="2ed3f-567">3개 식을 포함하고 변수가 없는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-567">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains three expressions and has no variables.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-568">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-568">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-569">Block 식 실행 되 면 블록의 마지막 식의 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-569">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : Type * seq&lt;System.Linq.Expressions.ParameterExpression&gt; * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (type, variables, expressions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="2ed3f-570">블록의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-570">The result type of the block.</span></span></param>
        <param name="variables"><span data-ttu-id="2ed3f-571">블록의 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-571">The variables in the block.</span></span></param>
        <param name="expressions"><span data-ttu-id="2ed3f-572">블록의 식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-572">The expressions in the block.</span></span></param>
        <summary><span data-ttu-id="2ed3f-573">지정된 변수와 식이 포함된 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-573">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-574">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-574">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, params System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : Type * seq&lt;System.Linq.Expressions.ParameterExpression&gt; * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (type, variables, expressions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="2ed3f-575">블록의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-575">The result type of the block.</span></span></param>
        <param name="variables"><span data-ttu-id="2ed3f-576">블록의 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-576">The variables in the block.</span></span></param>
        <param name="expressions"><span data-ttu-id="2ed3f-577">블록의 식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-577">The expressions in the block.</span></span></param>
        <summary><span data-ttu-id="2ed3f-578">지정된 변수와 식이 포함된 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-578">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-579">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-579">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3);" />
      <MemberSignature Language="F#" Value="static member Block : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="arg0"><span data-ttu-id="2ed3f-580">블록의 첫 번째 식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-580">The first expression in the block.</span></span></param>
        <param name="arg1"><span data-ttu-id="2ed3f-581">블록의 두 번째 식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-581">The second expression in the block.</span></span></param>
        <param name="arg2"><span data-ttu-id="2ed3f-582">블록의 세 번째 식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-582">The third expression in the block.</span></span></param>
        <param name="arg3"><span data-ttu-id="2ed3f-583">블록의 네 번째 식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-583">The fourth expression in the block.</span></span></param>
        <summary><span data-ttu-id="2ed3f-584">4개 식을 포함하고 변수가 없는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-584">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains four expressions and has no variables.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-585">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-585">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-586">Block 식 실행 되 면 블록의 마지막 식의 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-586">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3, System.Linq.Expressions.Expression arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3, class System.Linq.Expressions.Expression arg4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression, arg4 As Expression) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3, System::Linq::Expressions::Expression ^ arg4);" />
      <MemberSignature Language="F#" Value="static member Block : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (arg0, arg1, arg2, arg3, arg4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg4" Type="System.Linq.Expressions.Expression" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="arg0"><span data-ttu-id="2ed3f-587">블록의 첫 번째 식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-587">The first expression in the block.</span></span></param>
        <param name="arg1"><span data-ttu-id="2ed3f-588">블록의 두 번째 식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-588">The second expression in the block.</span></span></param>
        <param name="arg2"><span data-ttu-id="2ed3f-589">블록의 세 번째 식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-589">The third expression in the block.</span></span></param>
        <param name="arg3"><span data-ttu-id="2ed3f-590">블록의 네 번째 식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-590">The fourth expression in the block.</span></span></param>
        <param name="arg4"><span data-ttu-id="2ed3f-591">블록의 다섯 번째 식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-591">The fifth expression in the block.</span></span></param>
        <summary><span data-ttu-id="2ed3f-592">5개 식을 포함하고 변수가 없는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-592">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains five expressions and has no variables.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-593">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-593">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-594">Block 식 실행 되 면 블록의 마지막 식의 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-594">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Break">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-595">break 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-595">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Break (target As LabelTarget) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Break(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberSignature Language="F#" Value="static member Break : System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Break target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="2ed3f-596"><see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-596">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-597">break 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-597">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-598"><see cref="T:System.Linq.Expressions.GotoExpression" />가 Break이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, 이동 시 대상 레이블에 null 값이 전달되는 <paramref name="target" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-598">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2ed3f-599">다음 예제에서는 포함 하는 식을 만드는 방법을 보여 줍니다.는 <xref:System.Linq.Expressions.LoopExpression> 사용 하는 개체는 <xref:System.Linq.Expressions.Expression.Break%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-599">The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.LoopExpression> object that uses the <xref:System.Linq.Expressions.Expression.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#44)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#44)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Break (target As LabelTarget, value As Expression) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Break(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value);" />
      <MemberSignature Language="F#" Value="static member Break : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Break (target, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="2ed3f-600"><see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-600">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="value"><span data-ttu-id="2ed3f-601">이동 시 연결된 레이블에 전달될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-601">The value that will be passed to the associated label upon jumping.</span></span></param>
        <summary><span data-ttu-id="2ed3f-602">break 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-602">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement.</span></span> <span data-ttu-id="2ed3f-603">이동 시 레이블에 전달되는 값을 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-603">The value passed to the label upon jumping can be specified.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-604"><see cref="T:System.Linq.Expressions.GotoExpression" />가 Break이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, 이동 시 대상 레이블에 <paramref name="target" />가 전달되는 <paramref name="value" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-604">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Break(System::Linq::Expressions::LabelTarget ^ target, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Break : System.Linq.Expressions.LabelTarget * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Break (target, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="2ed3f-605"><see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-605">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="type"><span data-ttu-id="2ed3f-606"><see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-606">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-607">지정된 형식을 사용하여 break 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-607">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement with the specified type.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-608"><see cref="T:System.Linq.Expressions.GotoExpression" />가 Break이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, <paramref name="target" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />으로 설정된 <paramref name="type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-608">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Break(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Break : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Break (target, value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="type" Type="System.Type" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="2ed3f-609"><see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-609">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="value"><span data-ttu-id="2ed3f-610">이동 시 연결된 레이블에 전달될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-610">The value that will be passed to the associated label upon jumping.</span></span></param>
        <param name="type"><span data-ttu-id="2ed3f-611"><see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-611">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-612">지정된 형식을 사용하여 break 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-612">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement with the specified type.</span></span> <span data-ttu-id="2ed3f-613">이동 시 레이블에 전달되는 값을 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-613">The value passed to the label upon jumping can be specified.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-614"><see cref="T:System.Linq.Expressions.GotoExpression" />가 Break이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, <paramref name="target" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />으로 설정되고, 이동 시 대상 레이블에 <paramref name="type" />가 전달되는 <paramref name="value" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-614">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Call">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-615"><see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-615">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Call : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (instance, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="2ed3f-616">인스턴스 메서드 호출에 대한 인스턴스를 지정하는 <see cref="T:System.Linq.Expressions.Expression" />이며 <see langword="null" /> (Visual Basic의 경우 <see langword="static" />) 메서드에 대해 <see langword="Shared" />를 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-616">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance method call (pass <see langword="null" /> for a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method).</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-617"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-617">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-618">인수를 받지 않는 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-618">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes no arguments.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-619"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-619">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-620">에 대 한 호출을 나타내는 `static` (`Shared` Visual basic에서) 메서드를 `null` 에 대 한는 `instance` 이 메서드를 호출할 때 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-620">To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method.</span></span>  
  
 <span data-ttu-id="2ed3f-621">경우 `method` 인스턴스 메서드를 나타냅니다는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성을 `instance` 가 나타내는 메서드의 선언 형식에 할당할 수 있어야 `method`.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-621">If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`.</span></span>  
  
 <span data-ttu-id="2ed3f-622">합니다 <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> 결과 속성 <xref:System.Linq.Expressions.MethodCallExpression> 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-622">The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty.</span></span> <span data-ttu-id="2ed3f-623">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성이 나타내는 메서드의 반환 형식에 같음 `method`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-623">The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the return type of the method represented by `method`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-624">다음 코드 예제에는 인수 없이 메서드를 호출 하는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-624">The following code example shows how to create an expression that calls a method without arguments.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#15)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-625"><paramref name="method" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-625"><paramref name="method" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2ed3f-626">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-626">-or-</span></span> 
 <span data-ttu-id="2ed3f-627"><paramref name="instance" />가 <see langword="null" />이고 <paramref name="method" />가 인스턴스 메서드를 나타내는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-627"><paramref name="instance" /> is <see langword="null" /> and <paramref name="method" /> represents an instance method.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-628"><paramref name="instance" />.Type을 <paramref name="method" />로 나타내는 메서드의 선언 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-628"><paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arguments As IEnumerable(Of Expression)) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="2ed3f-629">대상 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-629">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</span></span></param>
        <param name="arguments"><span data-ttu-id="2ed3f-630">호출 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />의 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-630">A collection of <see cref="T:System.Linq.Expressions.Expression" /> that represents the call arguments.</span></span></param>
        <summary><span data-ttu-id="2ed3f-631">static(Visual Basic에서는 Shared) 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-631">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static (Shared in Visual Basic) method.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-632"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-632">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="2ed3f-633"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-633">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span></span></param>
        <param name="arg0"><span data-ttu-id="2ed3f-634">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-634">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span></span></param>
        <summary><span data-ttu-id="2ed3f-635">1개 인수를 받는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />(Visual Basic에서는 <see langword="static" />) 메서드에 대한 호출을 나타내는 <see langword="Shared" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-635">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method that takes one argument.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-636"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-636">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2ed3f-637">다음 예제에서는 호출 하는 식을 만드는 방법을 보여 줍니다.는 `static` (`Shared` Visual Basic의) 인수 하나를 사용 하는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-637">The following example demonstrates how to create an expression that calls a `static` (`Shared` in Visual Basic) method that takes one argument.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#16)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-638"><paramref name="method" />가 null입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-638"><paramref name="method" /> is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, ParamArray arguments As Expression()) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="2ed3f-639"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see langword="static" />(Visual Basic에서는 <see langword="Shared" />) 메서드를 나타내는 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-639">A <see cref="T:System.Reflection.MethodInfo" /> that represents a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span></span></param>
        <param name="arguments"><span data-ttu-id="2ed3f-640"><see cref="T:System.Linq.Expressions.Expression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-640">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-641">인수가 있는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />(Visual Basic에서는 <see langword="static" />) 메서드에 대한 호출을 나타내는 <see langword="Shared" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-641">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method that has arguments.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-642"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-642">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-643">하는 경우 `arguments` 아닙니다 `null`를 나타내는 메서드의 매개 변수 수와 동일한 요소 수 있어야 `method`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-643">If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`.</span></span> <span data-ttu-id="2ed3f-644">각 요소에 `arguments` 아니어야 `null` 의 해당 매개 변수에 할당할 수 있어야 하 고 `method`, 가능한 한 후 *인용*합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-644">Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ed3f-645">경우에 해당 메서드 매개 변수 형식의 요소 인용 됩니다 <xref:System.Linq.Expressions.Expression>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-645">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="2ed3f-646">요소에 래핑됩니다 인용을 <xref:System.Linq.Expressions.ExpressionType.Quote> 노드.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-646">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="2ed3f-647">결과 노드를 <xref:System.Linq.Expressions.UnaryExpression> 해당 <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> 속성이 요소의 `arguments`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-647">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
 <span data-ttu-id="2ed3f-648"><xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> 결과의 속성 <xref:System.Linq.Expressions.MethodCallExpression> 비어 있으면 `arguments` 는 `null`.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-648">The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="2ed3f-649">동일한 요소를 포함 하는 고, 그렇지 `arguments`, 일부는 따옴표로 묶을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-649">Otherwise, it contains the same elements as `arguments`, some of which may be quoted.</span></span>  
  
 <span data-ttu-id="2ed3f-650">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.MethodCallExpression> 같은지를 나타내는 메서드의 반환 형식을 `method`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-650">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`.</span></span> <span data-ttu-id="2ed3f-651"><xref:System.Linq.Expressions.MethodCallExpression.Object%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-651">The <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> property is `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-652"><paramref name="method" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-652"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-653"><paramref name="arguments" />의 요소 수가 <paramref name="method" />로 나타내는 메서드의 매개 변수 수와 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-653">The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.</span></span>  
  
<span data-ttu-id="2ed3f-654">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-654">-or-</span></span> 
<span data-ttu-id="2ed3f-655"><paramref name="arguments" />의 요소 중 하나 이상을 <paramref name="method" />로 나타내는 메서드의 해당 매개 변수에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-655">One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo, arguments As IEnumerable(Of Expression)) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Call : System.Linq.Expressions.Expression * System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (instance, method, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="2ed3f-656"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />입니다. <see langword="null" />(Visual Basic에서는 <see langword="static" />) 메서드의 경우 <see langword="Shared" />을 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-656">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to (pass <see langword="null" /> for a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method).</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-657"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-657">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span></span></param>
        <param name="arguments"><span data-ttu-id="2ed3f-658"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-658">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-659">인수를 받는 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-659">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes arguments.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-660"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-660">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-661">에 대 한 호출을 나타내는 `static` (`Shared` Visual Basic에서) 메서드를 `null` 에 대 한 합니다 `instance` 이 메서드를 호출할 때 매개 변수 호출 또는 <xref:System.Linq.Expressions.Expression.Call%2A> 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-661">To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method, or call <xref:System.Linq.Expressions.Expression.Call%2A> instead.</span></span>  
  
 <span data-ttu-id="2ed3f-662">경우 `method` 인스턴스 메서드를 나타냅니다는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성을 `instance` 가 나타내는 메서드의 선언 형식에 할당할 수 있어야 `method`.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-662">If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`.</span></span>  
  
 <span data-ttu-id="2ed3f-663">하는 경우 `arguments` 아닙니다 `null`를 나타내는 메서드의 매개 변수 수와 동일한 요소 수 있어야 `method`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-663">If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`.</span></span> <span data-ttu-id="2ed3f-664">각 요소에 `arguments` 아니어야 `null` 의 해당 매개 변수에 할당할 수 있어야 하 고 `method`, 가능한 한 후 *인용*합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-664">Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ed3f-665">경우에 해당 메서드 매개 변수 형식의 요소 인용 됩니다 <xref:System.Linq.Expressions.Expression>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-665">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="2ed3f-666">요소에 래핑됩니다 인용을 <xref:System.Linq.Expressions.ExpressionType.Quote> 노드.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-666">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="2ed3f-667">결과 노드를 <xref:System.Linq.Expressions.UnaryExpression> 해당 <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> 속성이 요소의 `arguments`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-667">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
 <span data-ttu-id="2ed3f-668"><xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> 결과의 속성 <xref:System.Linq.Expressions.MethodCallExpression> 비어 있으면 `arguments` 는 `null`.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-668">The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="2ed3f-669">동일한 요소를 포함 하는 고, 그렇지 `arguments`, 일부는 따옴표로 묶을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-669">Otherwise, it contains the same elements as `arguments`, some of which may be quoted.</span></span>  
  
 <span data-ttu-id="2ed3f-670">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.MethodCallExpression> 같은지를 나타내는 메서드의 반환 형식을 `method`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-670">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-671"><paramref name="method" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-671"><paramref name="method" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2ed3f-672">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-672">-or-</span></span> 
 <span data-ttu-id="2ed3f-673"><paramref name="instance" />가 <see langword="null" />이고 <paramref name="method" />가 인스턴스 메서드를 나타내는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-673"><paramref name="instance" /> is <see langword="null" /> and <paramref name="method" /> represents an instance method.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-674"><paramref name="instance" />.Type을 <paramref name="method" />로 나타내는 메서드의 선언 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-674"><paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.</span></span>  
  
<span data-ttu-id="2ed3f-675">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-675">-or-</span></span> 
<span data-ttu-id="2ed3f-676"><paramref name="arguments" />의 요소 수가 <paramref name="method" />로 나타내는 메서드의 매개 변수 수와 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-676">The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.</span></span>  
  
<span data-ttu-id="2ed3f-677">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-677">-or-</span></span> 
<span data-ttu-id="2ed3f-678"><paramref name="arguments" />의 요소 중 하나 이상을 <paramref name="method" />로 나타내는 메서드의 해당 매개 변수에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-678">One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo, ParamArray arguments As Expression()) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Call : System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (instance, method, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="2ed3f-679">인스턴스 메서드 호출에 대한 인스턴스를 지정하는 <see cref="T:System.Linq.Expressions.Expression" />이며 <see langword="null" /> (Visual Basic의 경우 <see langword="static" />) 메서드에 대해 <see langword="Shared" />를 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-679">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance method call (pass <see langword="null" /> for a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method).</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-680"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-680">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span></span></param>
        <param name="arguments"><span data-ttu-id="2ed3f-681"><see cref="T:System.Linq.Expressions.Expression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-681">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-682">인수를 받는 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-682">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes arguments.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-683"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-683">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-684">에 대 한 호출을 나타내는 `static` (`Shared` Visual Basic에서) 메서드를 `null` 에 대 한 합니다 `instance` 이 메서드를 호출할 때 매개 변수 호출 또는 <xref:System.Linq.Expressions.Expression.Call%2A> 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-684">To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method, or call <xref:System.Linq.Expressions.Expression.Call%2A> instead.</span></span>  
  
 <span data-ttu-id="2ed3f-685">경우 `method` 인스턴스 메서드를 나타냅니다는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성을 `instance` 가 나타내는 메서드의 선언 형식에 할당할 수 있어야 `method`.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-685">If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`.</span></span>  
  
 <span data-ttu-id="2ed3f-686">하는 경우 `arguments` 아닙니다 `null`를 나타내는 메서드의 매개 변수 수와 동일한 요소 수 있어야 `method`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-686">If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`.</span></span> <span data-ttu-id="2ed3f-687">각 요소에 `arguments` 아니어야 `null` 의 해당 매개 변수에 할당할 수 있어야 하 고 `method`, 가능한 한 후 *인용*합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-687">Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ed3f-688">경우에 해당 메서드 매개 변수 형식의 요소 인용 됩니다 <xref:System.Linq.Expressions.Expression>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-688">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="2ed3f-689">요소에 래핑됩니다 인용을 <xref:System.Linq.Expressions.ExpressionType.Quote> 노드.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-689">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="2ed3f-690">결과 노드를 <xref:System.Linq.Expressions.UnaryExpression> 해당 <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> 속성이 요소의 `arguments`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-690">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
 <span data-ttu-id="2ed3f-691"><xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> 결과의 속성 <xref:System.Linq.Expressions.MethodCallExpression> 비어 있으면 `arguments` 는 `null`.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-691">The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="2ed3f-692">동일한 요소를 포함 하는 고, 그렇지 `arguments`, 일부는 따옴표로 묶을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-692">Otherwise, it contains the same elements as `arguments`, some of which may be quoted.</span></span>  
  
 <span data-ttu-id="2ed3f-693">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.MethodCallExpression> 같은지를 나타내는 메서드의 반환 형식을 `method`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-693">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-694"><paramref name="method" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-694"><paramref name="method" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2ed3f-695">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-695">-or-</span></span> 
 <span data-ttu-id="2ed3f-696"><paramref name="instance" />가 <see langword="null" />이고 <paramref name="method" />가 인스턴스 메서드를 나타내는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-696"><paramref name="instance" /> is <see langword="null" /> and <paramref name="method" /> represents an instance method.</span></span>  
  
<span data-ttu-id="2ed3f-697">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-697">-or-</span></span> 
 <span data-ttu-id="2ed3f-698"><paramref name="arguments" />가 <see langword="null" />이 아니고 하나 이상의 해당 요소가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-698"><paramref name="arguments" /> is not <see langword="null" /> and one or more of its elements is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-699"><paramref name="instance" />.Type을 <paramref name="method" />로 나타내는 메서드의 선언 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-699"><paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.</span></span>  
  
<span data-ttu-id="2ed3f-700">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-700">-or-</span></span> 
<span data-ttu-id="2ed3f-701"><paramref name="arguments" />의 요소 수가 <paramref name="method" />로 나타내는 메서드의 매개 변수 수와 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-701">The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.</span></span>  
  
<span data-ttu-id="2ed3f-702">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-702">-or-</span></span> 
<span data-ttu-id="2ed3f-703"><paramref name="arguments" />의 요소 중 하나 이상을 <paramref name="method" />로 나타내는 메서드의 해당 매개 변수에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-703">One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression, arg1 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="2ed3f-704"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-704">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span></span></param>
        <param name="arg0"><span data-ttu-id="2ed3f-705">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-705">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span></span></param>
        <param name="arg1"><span data-ttu-id="2ed3f-706">두 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-706">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span></span></param>
        <summary><span data-ttu-id="2ed3f-707">2개 인수를 받는 static 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-707">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes two arguments.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-708"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-708">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-709"><paramref name="method" />가 null입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-709"><paramref name="method" /> is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo, arg0 As Expression, arg1 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Call : System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (instance, method, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="2ed3f-710">인스턴스 호출에 대한 인스턴스를 지정하는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-710">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance call.</span></span> <span data-ttu-id="2ed3f-711">static(Visual Basic에서는 Shared) 메서드의 경우 null을 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-711">(pass null for a static (Shared in Visual Basic) method).</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-712">대상 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-712">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</span></span></param>
        <param name="arg0"><span data-ttu-id="2ed3f-713">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-713">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span></span></param>
        <param name="arg1"><span data-ttu-id="2ed3f-714">두 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-714">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span></span></param>
        <summary><span data-ttu-id="2ed3f-715">2개 인수를 받는 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-715">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes two arguments.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-716"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-716">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2ed3f-717">다음 코드 예제에는 두 개의 인수를 포함 하는 인스턴스 메서드를 호출 하는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-717">The following code example shows how to create an expression that calls an instance method that has two arguments.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#17)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, string methodName, Type[] typeArguments, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, string methodName, class System.Type[] typeArguments, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, methodName As String, typeArguments As Type(), ParamArray arguments As Expression()) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::String ^ methodName, cli::array &lt;Type ^&gt; ^ typeArguments, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Call : System.Linq.Expressions.Expression * string * Type[] * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (instance, methodName, typeArguments, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Type[]" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="2ed3f-718">특정 메서드에 대해 <see cref="T:System.Linq.Expressions.Expression" /> 속성 값을 검색할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-718">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> property value will be searched for a specific method.</span></span></param>
        <param name="methodName"><span data-ttu-id="2ed3f-719">메서드의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-719">The name of the method.</span></span></param>
        <param name="typeArguments"><span data-ttu-id="2ed3f-720">제네릭 메서드의 형식 매개 변수를 지정하는 <see cref="T:System.Type" /> 개체 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-720">An array of <see cref="T:System.Type" /> objects that specify the type parameters of the generic method.</span></span> <span data-ttu-id="2ed3f-721">methodName에서 제네릭이 아닌 메서드를 지정하는 경우 이 인수는 null입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-721">This argument should be null when methodName specifies a non-generic method.</span></span></param>
        <param name="arguments"><span data-ttu-id="2ed3f-722">메서드에 대한 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-722">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represents the arguments to the method.</span></span></param>
        <summary><span data-ttu-id="2ed3f-723">적합한 팩터리 메서드를 호출하여 메서드를 호출하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-723">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method by calling the appropriate factory method.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-724"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고, <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 속성이 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />이고, <paramref name="instance" />가 지정된 인스턴스 메서드를 나타내는 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />로 설정되고 <see cref="T:System.Reflection.MethodInfo" />가 지정된 인수로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-724">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to <paramref name="instance" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> set to the <see cref="T:System.Reflection.MethodInfo" /> that represents the specified instance method, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> set to the specified arguments.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-725">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.MethodCallExpression> 가리키는 메서드의 반환 형식 같은지 `methodName`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-725">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method denoted by `methodName`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-726"><paramref name="instance" /> 또는 <paramref name="methodName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-726"><paramref name="instance" /> or <paramref name="methodName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-727"><paramref name="methodName" />.Type 또는 해당 기본 형식에 이름이 <paramref name="typeArguments" />이고 형식 매개 변수가 <paramref name="arguments" />와 일치하고 매개 변수 형식이 <paramref name="instance" />와 일치하는 메서드가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-727">No method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="instance" />.Type or its base types.</span></span>  
  
<span data-ttu-id="2ed3f-728">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-728">-or-</span></span> 
<span data-ttu-id="2ed3f-729"><paramref name="methodName" />.Type 또는 해당 기본 형식에 이름이 <paramref name="typeArguments" />이고 형식 매개 변수가 <paramref name="arguments" />와 일치하고 매개 변수 형식이 <paramref name="instance" />와 일치하는 메서드가 둘 이상 있는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-729">More than one method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="instance" />.Type or its base types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="2ed3f-730"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-730">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span></span></param>
        <param name="arg0"><span data-ttu-id="2ed3f-731">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-731">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span></span></param>
        <param name="arg1"><span data-ttu-id="2ed3f-732">두 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-732">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span></span></param>
        <param name="arg2"><span data-ttu-id="2ed3f-733">세 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-733">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</span></span></param>
        <summary><span data-ttu-id="2ed3f-734">3개 인수를 받는 static 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-734">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes three arguments.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-735"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-735">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-736"><paramref name="method" />가 null입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-736"><paramref name="method" /> is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (Type type, string methodName, Type[] typeArguments, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Type type, string methodName, class System.Type[] typeArguments, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(Type ^ type, System::String ^ methodName, cli::array &lt;Type ^&gt; ^ typeArguments, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Call : Type * string * Type[] * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (type, methodName, typeArguments, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Type[]" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="2ed3f-737">지정된 <see langword="static" />(Visual Basic에서는 <see langword="Shared" />) 메서드를 포함하는 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-737">The type that contains the specified <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method.</span></span></param>
        <param name="methodName"><span data-ttu-id="2ed3f-738">메서드의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-738">The name of the method.</span></span></param>
        <param name="typeArguments"><span data-ttu-id="2ed3f-739">제네릭 메서드의 형식 매개 변수를 지정하는 <see cref="T:System.Type" /> 개체 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-739">An array of <see cref="T:System.Type" /> objects that specify the type parameters of the generic method.</span></span> <span data-ttu-id="2ed3f-740">methodName에서 제네릭이 아닌 메서드를 지정하는 경우 이 인수는 null입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-740">This argument should be null when methodName specifies a non-generic method.</span></span></param>
        <param name="arguments"><span data-ttu-id="2ed3f-741">메서드에 대한 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-741">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments to the method.</span></span></param>
        <summary><span data-ttu-id="2ed3f-742">적합한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.MethodCallExpression" />(Visual Basic에서는 <see langword="static" />) 메서드를 호출하는 동작을 나타내는 <see langword="Shared" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-742">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method by calling the appropriate factory method.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-743"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 속성이 지정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />(Visual Basic에서는 <see cref="T:System.Reflection.MethodInfo" />) 메서드를 나타내는 <see langword="static" />로 설정되고 <see langword="Shared" /> 속성이 지정된 인수로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-743">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property set to the <see cref="T:System.Reflection.MethodInfo" /> that represents the specified <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method, and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> property set to the specified arguments.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-744">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.MethodCallExpression> 가리키는 메서드의 반환 형식 같은지 `methodName`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-744">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method denoted by `methodName`.</span></span> <span data-ttu-id="2ed3f-745"><xref:System.Linq.Expressions.MethodCallExpression.Object%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-745">The <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> property is `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-746"><paramref name="type" /> 또는 <paramref name="methodName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-746"><paramref name="type" /> or <paramref name="methodName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-747"><paramref name="methodName" /> 또는 해당 기본 형식에 이름이 <paramref name="typeArguments" />이고 형식 매개 변수가 <paramref name="arguments" />와 일치하고 매개 변수 형식이 <paramref name="type" />와 일치하는 메서드가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-747">No method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="type" /> or its base types.</span></span>  
  
<span data-ttu-id="2ed3f-748">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-748">-or-</span></span> 
<span data-ttu-id="2ed3f-749"><paramref name="methodName" /> 또는 해당 기본 형식에 이름이 <paramref name="typeArguments" />이고 형식 매개 변수가 <paramref name="arguments" />와 일치하고 매개 변수 형식이 <paramref name="type" />와 일치하는 메서드가 둘 이상 있는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-749">More than one method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="type" /> or its base types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Call : System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (instance, method, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="2ed3f-750">인스턴스 호출에 대한 인스턴스를 지정하는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-750">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance call.</span></span> <span data-ttu-id="2ed3f-751">static(Visual Basic에서는 Shared) 메서드의 경우 null을 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-751">(pass null for a static (Shared in Visual Basic) method).</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-752">대상 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-752">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</span></span></param>
        <param name="arg0"><span data-ttu-id="2ed3f-753">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-753">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span></span></param>
        <param name="arg1"><span data-ttu-id="2ed3f-754">두 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-754">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span></span></param>
        <param name="arg2"><span data-ttu-id="2ed3f-755">세 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-755">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</span></span></param>
        <summary><span data-ttu-id="2ed3f-756">3개 인수를 받는 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-756">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes three arguments.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-757"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-757">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="2ed3f-758"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-758">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span></span></param>
        <param name="arg0"><span data-ttu-id="2ed3f-759">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-759">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span></span></param>
        <param name="arg1"><span data-ttu-id="2ed3f-760">두 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-760">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span></span></param>
        <param name="arg2"><span data-ttu-id="2ed3f-761">세 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-761">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</span></span></param>
        <param name="arg3"><span data-ttu-id="2ed3f-762">네 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-762">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fourth argument.</span></span></param>
        <summary><span data-ttu-id="2ed3f-763">4개 인수를 받는 static 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-763">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes four arguments.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-764"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-764">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-765"><paramref name="method" />가 null입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-765"><paramref name="method" /> is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3, System.Linq.Expressions.Expression arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3, class System.Linq.Expressions.Expression arg4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression, arg4 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3, System::Linq::Expressions::Expression ^ arg4);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arg0, arg1, arg2, arg3, arg4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg4" Type="System.Linq.Expressions.Expression" Index="5" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="2ed3f-766"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-766">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span></span></param>
        <param name="arg0"><span data-ttu-id="2ed3f-767">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-767">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span></span></param>
        <param name="arg1"><span data-ttu-id="2ed3f-768">두 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-768">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span></span></param>
        <param name="arg2"><span data-ttu-id="2ed3f-769">세 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-769">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</span></span></param>
        <param name="arg3"><span data-ttu-id="2ed3f-770">네 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-770">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fourth argument.</span></span></param>
        <param name="arg4"><span data-ttu-id="2ed3f-771">다섯 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-771">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fifth argument.</span></span></param>
        <summary><span data-ttu-id="2ed3f-772">5개 인수를 받는 static 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-772">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes five arguments.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-773"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-773">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-774"><paramref name="method" />가 null입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-774"><paramref name="method" /> is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanReduce">
      <MemberSignature Language="C#" Value="public virtual bool CanReduce { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReduce" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.Expression.CanReduce" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanReduce As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanReduce { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanReduce : bool" Usage="System.Linq.Expressions.Expression.CanReduce" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ed3f-775">노드를 더 단순한 노드로 줄일 수 있는지 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-775">Indicates that the node can be reduced to a simpler node.</span></span> <span data-ttu-id="2ed3f-776">true를 반환하면 Reduce()를 호출하여 축소된 형식을 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-776">If this returns true, Reduce() can be called to produce the reduced form.</span></span></summary>
        <value><span data-ttu-id="2ed3f-777"><see langword="true" /> 경우 노드를 줄일 수 있습니다. 그렇지 않으면 <see langword="false" />합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-777"><see langword="true" /> if the node can be reduced; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Catch">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-778">catch 문을 나타내는 <see cref="T:System.Linq.Expressions.CatchBlock" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-778">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Linq.Expressions.ParameterExpression variable, class System.Linq.Expressions.Expression body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Catch (variable As ParameterExpression, body As Expression) As CatchBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ Catch(System::Linq::Expressions::ParameterExpression ^ variable, System::Linq::Expressions::Expression ^ body);" />
      <MemberSignature Language="F#" Value="static member Catch : System.Linq.Expressions.ParameterExpression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.CatchBlock" Usage="System.Linq.Expressions.Expression.Catch (variable, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="System.Linq.Expressions.ParameterExpression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="variable"><span data-ttu-id="2ed3f-779">이 처리기가 catch한 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체에 대한 참조를 나타내는 <see cref="T:System.Exception" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-779">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</span></span></param>
        <param name="body"><span data-ttu-id="2ed3f-780">catch 문의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-780">The body of the catch statement.</span></span></param>
        <summary><span data-ttu-id="2ed3f-781">처리기 본문에 사용하기 위해 catch된 <see cref="T:System.Linq.Expressions.CatchBlock" /> 개체에 대한 참조가 포함된 catch 문을 나타내는 <see cref="T:System.Exception" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-781">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with a reference to the caught <see cref="T:System.Exception" /> object for use in the handler body.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-782">만든 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-782">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (Type type, System.Linq.Expressions.Expression body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Type type, class System.Linq.Expressions.Expression body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ Catch(Type ^ type, System::Linq::Expressions::Expression ^ body);" />
      <MemberSignature Language="F#" Value="static member Catch : Type * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.CatchBlock" Usage="System.Linq.Expressions.Expression.Catch (type, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="2ed3f-783">이 <see cref="P:System.Linq.Expressions.Expression.Type" />이 처리할 <see cref="T:System.Exception" />의 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-783">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</span></span></param>
        <param name="body"><span data-ttu-id="2ed3f-784">catch 문의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-784">The body of the catch statement.</span></span></param>
        <summary><span data-ttu-id="2ed3f-785">catch 문을 나타내는 <see cref="T:System.Linq.Expressions.CatchBlock" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-785">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-786">만든 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-786">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-787"><xref:System.Linq.Expressions.Expression.Type%2A> 의 <xref:System.Exception> 를 찾아낼 수에 대 한 참조 하지만 지정할 수 있습니다 합니다 <xref:System.Exception> 개체에서 사용 하기 위해 제공 됩니다는 <xref:System.Linq.Expressions.CatchBlock>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-787">The <xref:System.Linq.Expressions.Expression.Type%2A> of <xref:System.Exception> to be caught can be specified but no reference to the <xref:System.Exception> object will be available for use in the <xref:System.Linq.Expressions.CatchBlock>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Linq.Expressions.ParameterExpression variable, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Catch (variable As ParameterExpression, body As Expression, filter As Expression) As CatchBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ Catch(System::Linq::Expressions::ParameterExpression ^ variable, System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ filter);" />
      <MemberSignature Language="F#" Value="static member Catch : System.Linq.Expressions.ParameterExpression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.CatchBlock" Usage="System.Linq.Expressions.Expression.Catch (variable, body, filter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="System.Linq.Expressions.ParameterExpression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="filter" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="variable"><span data-ttu-id="2ed3f-788">이 처리기가 catch한 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체에 대한 참조를 나타내는 <see cref="T:System.Exception" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-788">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</span></span></param>
        <param name="body"><span data-ttu-id="2ed3f-789">catch 문의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-789">The body of the catch statement.</span></span></param>
        <param name="filter"><span data-ttu-id="2ed3f-790"><see cref="T:System.Exception" /> 필터의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-790">The body of the <see cref="T:System.Exception" /> filter.</span></span></param>
        <summary><span data-ttu-id="2ed3f-791"><see cref="T:System.Linq.Expressions.CatchBlock" /> 필터와 catch된 <see cref="T:System.Exception" /> 개체에 대한 참조가 포함된 catch 문을 나타내는 <see cref="T:System.Exception" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-791">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with an <see cref="T:System.Exception" /> filter and a reference to the caught <see cref="T:System.Exception" /> object.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-792">만든 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-792">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (Type type, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Type type, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ Catch(Type ^ type, System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ filter);" />
      <MemberSignature Language="F#" Value="static member Catch : Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.CatchBlock" Usage="System.Linq.Expressions.Expression.Catch (type, body, filter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="filter" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="2ed3f-793">이 <see cref="P:System.Linq.Expressions.Expression.Type" />이 처리할 <see cref="T:System.Exception" />의 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-793">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</span></span></param>
        <param name="body"><span data-ttu-id="2ed3f-794">catch 문의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-794">The body of the catch statement.</span></span></param>
        <param name="filter"><span data-ttu-id="2ed3f-795"><see cref="T:System.Exception" /> 필터의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-795">The body of the <see cref="T:System.Exception" /> filter.</span></span></param>
        <summary><span data-ttu-id="2ed3f-796"><see cref="T:System.Linq.Expressions.CatchBlock" /> 필터는 있지만 catch된 <see cref="T:System.Exception" /> 개체에 대한 참조는 없는 catch 문을 나타내는 <see cref="T:System.Exception" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-796">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with an <see cref="T:System.Exception" /> filter but no reference to the caught <see cref="T:System.Exception" /> object.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-797">만든 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-797">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearDebugInfo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DebugInfoExpression ClearDebugInfo (System.Linq.Expressions.SymbolDocumentInfo document);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DebugInfoExpression ClearDebugInfo(class System.Linq.Expressions.SymbolDocumentInfo document) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ClearDebugInfo (document As SymbolDocumentInfo) As DebugInfoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DebugInfoExpression ^ ClearDebugInfo(System::Linq::Expressions::SymbolDocumentInfo ^ document);" />
      <MemberSignature Language="F#" Value="static member ClearDebugInfo : System.Linq.Expressions.SymbolDocumentInfo -&gt; System.Linq.Expressions.DebugInfoExpression" Usage="System.Linq.Expressions.Expression.ClearDebugInfo document" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DebugInfoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="System.Linq.Expressions.SymbolDocumentInfo" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="document"><span data-ttu-id="2ed3f-798">소스 파일을 나타내는 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-798">The <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that represents the source file.</span></span></param>
        <summary><span data-ttu-id="2ed3f-799">시퀀스 위치를 지우기 위한 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-799">Creates a <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> for clearing a sequence point.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-800">시퀀스 위치를 지우기 위한 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-800">An instance of <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> for clearing a sequence point.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Coalesce">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-801">결합 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-801">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a coalescing operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Coalesce">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Coalesce (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Coalesce(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Coalesce (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Coalesce(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Coalesce : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Coalesce (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-802"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-802">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-803"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-803">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-804">결합 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-804">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a coalescing operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-805"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-805">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-806"><xref:System.Linq.Expressions.BinaryExpression.Method%2A> 결과의 속성 <xref:System.Linq.Expressions.BinaryExpression> 됩니다 `null` 모두 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 및 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 으로 설정 됩니다 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-806">The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null` and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`.</span></span> <span data-ttu-id="2ed3f-807"><xref:System.Linq.Expressions.Expression.Type%2A> 속성이 병합 작업의 결과 형식과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-807">The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the result type of the coalescing operation.</span></span> <span data-ttu-id="2ed3f-808"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-808">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
#### <a name="result-type"></a><span data-ttu-id="2ed3f-809">결과 유형</span><span class="sxs-lookup"><span data-stu-id="2ed3f-809">Result Type</span></span>  
 <span data-ttu-id="2ed3f-810">다음 규칙에는 결과 형식을 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-810">The following rules determine the result type:</span></span>  
  
-   <span data-ttu-id="2ed3f-811">경우 `left`합니다. 형식이 nullable 형식을 나타내는지 및 `right`합니다. 형식이 nullable이 아닌 해당 형식으로 암시적으로 변환할 수는 결과 형식은 nullable이 아닌 해당 `left`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-811">If `left`.Type represents a nullable type and `right`.Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of `left`.Type.</span></span>  
  
-   <span data-ttu-id="2ed3f-812">그렇지 않은 경우, `right`합니다. 형식으로 암시적으로 변환할 `left`합니다. 결과 형식은 형식이 `left`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-812">Otherwise, if `right`.Type is implicitly convertible to `left`.Type, the result type is `left`.Type.</span></span>  
  
-   <span data-ttu-id="2ed3f-813">그렇지 않은 경우, 해당 하는 nullable이 아닌 `left`합니다. 형식으로 암시적으로 변환할 `right`합니다. 결과 형식은 형식이 `right`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-813">Otherwise, if the non-nullable equivalent of `left`.Type is implicitly convertible to `right`.Type, the result type is `right`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-814"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-814"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-815"><paramref name="left" />의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 참조 형식 또는 nullable 값 형식을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-815">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> does not represent a reference type or a nullable value type.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-816"><paramref name="left" />.Type과 <paramref name="right" />.Type을 상호 변환할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-816"><paramref name="left" />.Type and <paramref name="right" />.Type are not convertible to each other.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/088b1f0d-c1af-4fe1-b4b8-196fd5ea9132"><span data-ttu-id="2ed3f-817">??</span><span class="sxs-lookup"><span data-stu-id="2ed3f-817">??</span></span> <span data-ttu-id="2ed3f-818">연산자(C# 참조)</span><span class="sxs-lookup"><span data-stu-id="2ed3f-818">Operator (C# Reference)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Coalesce">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Coalesce (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Coalesce(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Coalesce (left As Expression, right As Expression, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Coalesce(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member Coalesce : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Coalesce (left, right, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-819"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-819">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-820"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-820">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="2ed3f-821"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-821">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-822">지정된 변환 함수를 사용한 병합 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-822">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a coalescing operation, given a conversion function.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-823"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-823">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-824"><xref:System.Linq.Expressions.BinaryExpression.Method%2A> 결과의 속성 <xref:System.Linq.Expressions.BinaryExpression> 됩니다 `null` 모두 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 및 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 으로 설정 됩니다 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-824">The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null` and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`.</span></span>  
  
 <span data-ttu-id="2ed3f-825">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.BinaryExpression> 병합 작업의 결과 형식과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-825">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is equal to the result type of the coalescing operation.</span></span>  
  
 <span data-ttu-id="2ed3f-826">다음 규칙에는 결과 형식을 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-826">The following rules determine the result type:</span></span>  
  
-   <span data-ttu-id="2ed3f-827">경우 `left`합니다. 형식이 nullable 형식을 나타내는지 및 `right`합니다. 형식이 nullable이 아닌 해당 형식으로 암시적으로 변환할 수는 결과 형식은 nullable이 아닌 해당 `left`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-827">If `left`.Type represents a nullable type and `right`.Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of `left`.Type.</span></span>  
  
-   <span data-ttu-id="2ed3f-828">그렇지 않은 경우, `right`합니다. 형식으로 암시적으로 변환할 `left`합니다. 결과 형식은 형식이 `left`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-828">Otherwise, if `right`.Type is implicitly convertible to `left`.Type, the result type is `left`.Type.</span></span>  
  
-   <span data-ttu-id="2ed3f-829">그렇지 않은 경우, 해당 하는 nullable이 아닌 `left`합니다. 형식으로 암시적으로 변환할 `right`합니다. 결과 형식은 형식이 `right`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-829">Otherwise, if the non-nullable equivalent of `left`.Type is implicitly convertible to `right`.Type, the result type is `right`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-830"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-830"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-831"><paramref name="left" />.Type과 <paramref name="right" />.Type을 상호 변환할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-831"><paramref name="left" />.Type and <paramref name="right" />.Type are not convertible to each other.</span></span>  
  
<span data-ttu-id="2ed3f-832">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-832">-or-</span></span> 
 <span data-ttu-id="2ed3f-833"><paramref name="conversion" />이 <see langword="null" />이 아니고 <paramref name="conversion" />.Type이 정확히 하나의 인수를 받지 않는 대리자 형식인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-833"><paramref name="conversion" /> is not <see langword="null" /> and <paramref name="conversion" />.Type is a delegate type that does not take exactly one argument.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-834"><paramref name="left" />의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 참조 형식 또는 nullable 값 형식을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-834">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> does not represent a reference type or a nullable value type.</span></span>  
  
<span data-ttu-id="2ed3f-835">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-835">-or-</span></span> 
<span data-ttu-id="2ed3f-836"><paramref name="left" />의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 대리자 형식 <paramref name="conversion" />.Type의 매개 변수 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-836">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> represents a type that is not assignable to the parameter type of the delegate type <paramref name="conversion" />.Type.</span></span>  
  
<span data-ttu-id="2ed3f-837">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-837">-or-</span></span> 
<span data-ttu-id="2ed3f-838"><paramref name="right" />의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 대리자 형식 <paramref name="conversion" />.Type의 반환 형식과 다른 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-838">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="right" /> is not equal to the return type of the delegate type <paramref name="conversion" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Condition">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-839">조건문을 나타내는 <see cref="T:System.Linq.Expressions.ConditionalExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-839">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional statement.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Condition">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression Condition (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression Condition(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue, class System.Linq.Expressions.Expression ifFalse) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Condition (test As Expression, ifTrue As Expression, ifFalse As Expression) As ConditionalExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConditionalExpression ^ Condition(System::Linq::Expressions::Expression ^ test, System::Linq::Expressions::Expression ^ ifTrue, System::Linq::Expressions::Expression ^ ifFalse);" />
      <MemberSignature Language="F#" Value="static member Condition : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.ConditionalExpression" Usage="System.Linq.Expressions.Expression.Condition (test, ifTrue, ifFalse)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifFalse" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="test"><span data-ttu-id="2ed3f-840"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-840">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</span></span></param>
        <param name="ifTrue"><span data-ttu-id="2ed3f-841"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-841">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</span></span></param>
        <param name="ifFalse"><span data-ttu-id="2ed3f-842"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-842">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-843">조건문을 나타내는 <see cref="T:System.Linq.Expressions.ConditionalExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-843">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional statement.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-844"><see cref="T:System.Linq.Expressions.ConditionalExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 및 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-844">A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-845"><xref:System.Linq.Expressions.Expression.Type%2A> 결과의 속성 <xref:System.Linq.Expressions.ConditionalExpression> 값과 같음 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 의 속성 `ifTrue`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-845">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ConditionalExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `ifTrue`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-846">다음 코드 예제에는 조건문을 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-846">The following code example shows how to create an expression that represents a conditional statement.</span></span> <span data-ttu-id="2ed3f-847">첫 번째 인수를 평가 하는 경우 `true`, 두 번째 인수가 고 그렇지 않으면 실행 되 고, 세 번째 인수 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-847">If the first argument evaluates to `true`, the second argument is executed; otherwise, the third argument is executed.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#3)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-848"><paramref name="test" />, <paramref name="ifTrue" /> 또는 <paramref name="ifFalse" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-848"><paramref name="test" /> or <paramref name="ifTrue" /> or <paramref name="ifFalse" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-849"><paramref name="test" />.Type이 <see cref="T:System.Boolean" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-849"><paramref name="test" />.Type is not <see cref="T:System.Boolean" />.</span></span>  
  
<span data-ttu-id="2ed3f-850">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-850">-or-</span></span> 
 <span data-ttu-id="2ed3f-851"><paramref name="ifTrue" />.Type이 <paramref name="ifFalse" />.Type과 다른 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-851"><paramref name="ifTrue" />.Type is not equal to <paramref name="ifFalse" />.Type.</span></span></exception>
        <altmember cref="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <altmember cref="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      </Docs>
    </Member>
    <Member MemberName="Condition">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression Condition (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression Condition(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue, class System.Linq.Expressions.Expression ifFalse, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConditionalExpression ^ Condition(System::Linq::Expressions::Expression ^ test, System::Linq::Expressions::Expression ^ ifTrue, System::Linq::Expressions::Expression ^ ifFalse, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Condition : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.ConditionalExpression" Usage="System.Linq.Expressions.Expression.Condition (test, ifTrue, ifFalse, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ifFalse" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="type" Type="System.Type" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="test"><span data-ttu-id="2ed3f-852"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-852">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</span></span></param>
        <param name="ifTrue"><span data-ttu-id="2ed3f-853"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-853">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</span></span></param>
        <param name="ifFalse"><span data-ttu-id="2ed3f-854"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-854">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</span></span></param>
        <param name="type"><span data-ttu-id="2ed3f-855"><see cref="P:System.Linq.Expressions.Expression.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-855">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-856">조건문을 나타내는 <see cref="T:System.Linq.Expressions.ConditionalExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-856">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional statement.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-857"><see cref="T:System.Linq.Expressions.ConditionalExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 및 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-857">A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-858">이 메서드를 사용 하면 조건 식의 경우에서의 결과 형식은 명시적으로 통합는 유형의 `ifTrue` 및 `ifFalse` 식이 같지.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-858">This method allows explicitly unifying the result type of the conditional expression in cases where the types of `ifTrue` and `ifFalse` expressions are not equal.</span></span> <span data-ttu-id="2ed3f-859">두 유형의 `ifTrue` 및 `ifFalse` 암시적으로 참조 여야 결과 형식에 할당할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-859">Types of both `ifTrue` and `ifFalse` must be implicitly reference assignable to the result type.</span></span> <span data-ttu-id="2ed3f-860">합니다 `type` 일 수 <xref:System.Void>입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-860">The `type` is allowed to be <xref:System.Void>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Constant">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-861"><see cref="T:System.Linq.Expressions.ConstantExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-861">Creates a <see cref="T:System.Linq.Expressions.ConstantExpression" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Constant">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConstantExpression Constant (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConstantExpression Constant(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Constant(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Constant (value As Object) As ConstantExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConstantExpression ^ Constant(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member Constant : obj -&gt; System.Linq.Expressions.ConstantExpression" Usage="System.Linq.Expressions.Expression.Constant value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConstantExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2ed3f-862"><see cref="T:System.Object" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-862">An <see cref="T:System.Object" /> to set the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-863"><see cref="T:System.Linq.Expressions.ConstantExpression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-863">Creates a <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property set to the specified value.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-864"><see cref="T:System.Linq.Expressions.ConstantExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-864">A <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> and the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-865">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.ConstantExpression> 유형과 같은지 `value`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-865">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ConstantExpression> is equal to the type of `value`.</span></span> <span data-ttu-id="2ed3f-866">하는 경우 `value` 됩니다 `null`를 <xref:System.Linq.Expressions.Expression.Type%2A> 값과 같음 <xref:System.Object>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-866">If `value` is `null`, <xref:System.Linq.Expressions.Expression.Type%2A> is equal to <xref:System.Object>.</span></span>  
  
 <span data-ttu-id="2ed3f-867">나타내는 `null`를 사용할 수도 있습니다는 <xref:System.Linq.Expressions.Expression.Constant%28System.Object%2CSystem.Type%29> 메서드는 명시적으로 형식을 지정할 수 있습니다는.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-867">To represent `null`, you can also use the <xref:System.Linq.Expressions.Expression.Constant%28System.Object%2CSystem.Type%29> method, with which you can explicitly specify the type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-868">다음 코드 예제에는 상수 값을 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-868">The following code example shows how to create an expression that represents a constant value.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#4)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Constant">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConstantExpression Constant (object value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConstantExpression Constant(object value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConstantExpression ^ Constant(System::Object ^ value, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Constant : obj * Type -&gt; System.Linq.Expressions.ConstantExpression" Usage="System.Linq.Expressions.Expression.Constant (value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConstantExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2ed3f-869"><see cref="T:System.Object" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-869">An <see cref="T:System.Object" /> to set the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property equal to.</span></span></param>
        <param name="type"><span data-ttu-id="2ed3f-870"><see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-870">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-871"><see cref="T:System.Linq.Expressions.ConstantExpression" /> 및 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.Expression.Type" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-871">Creates a <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-872"><see cref="T:System.Linq.Expressions.ConstantExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> 및 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-872">A <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> and the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-873">이 메서드는 nullable 형식의 값을 나타내는 데 유용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-873">This method can be useful for representing values of nullable types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-874">다음 코드 예제에서는 nullable 형식의 상수를 나타내는 식을 만들고 해당 값을 설정 하는 방법을 보여 줍니다. `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-874">The following code example shows how to create an expression that represents a constant of the nullable type and set its value to `null`.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#22)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-875"><paramref name="type" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-875"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-876"><paramref name="value" />가 <see langword="null" />이 아니고 <paramref name="type" />의 동적 형식에서 <paramref name="value" />을 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-876"><paramref name="value" /> is not <see langword="null" /> and <paramref name="type" /> is not assignable from the dynamic type of <paramref name="value" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Continue">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-877">continue 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-877">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a continue statement.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Continue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Continue (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Continue(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Continue (target As LabelTarget) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Continue(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberSignature Language="F#" Value="static member Continue : System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Continue target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="2ed3f-878"><see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-878">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-879">continue 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-879">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a continue statement.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-880"><see cref="T:System.Linq.Expressions.GotoExpression" />가 Continue이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, 이동 시 대상 레이블에 null 값이 전달되는 <paramref name="target" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-880">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2ed3f-881">다음 예제에서는 사용 하는 루프 식을 만드는 방법을 보여 줍니다는 <xref:System.Linq.Expressions.Expression.Continue%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-881">The following example demonstrates how to create a loop expression that uses the <xref:System.Linq.Expressions.Expression.Continue%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#46](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#46)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#46](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#46)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Continue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Continue (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Continue(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Continue(System::Linq::Expressions::LabelTarget ^ target, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Continue : System.Linq.Expressions.LabelTarget * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Continue (target, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="2ed3f-882"><see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-882">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="type"><span data-ttu-id="2ed3f-883"><see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-883">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-884">지정된 형식을 사용하여 continue 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-884">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a continue statement with the specified type.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-885"><see cref="T:System.Linq.Expressions.GotoExpression" />가 Continue이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, <paramref name="target" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />으로 설정되고, 이동 시 대상 레이블에 null 값이 전달되는 <paramref name="type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-885">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Convert">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-886">형식 변환 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-886">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a type conversion operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Convert (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Convert(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Convert(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Convert : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Convert (expression, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-887"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-887">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <param name="type"><span data-ttu-id="2ed3f-888"><see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-888">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-889">형식 변환 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-889">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a type conversion operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-890"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-890">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-891">합니다 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> 결과 속성 <xref:System.Linq.Expressions.UnaryExpression> 구현 방법으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-891">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="2ed3f-892"><xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> 속성이 `false`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-892">The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`.</span></span> <span data-ttu-id="2ed3f-893">노드가 리프트 된 경우 <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> 는 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-893">If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`.</span></span> <span data-ttu-id="2ed3f-894">그렇지 않으면 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-894">Otherwise, it is `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-895">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-895">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-896">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-896">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-897">경우 `expression`합니다. 형식 또는 `type` 은 암시적 또는 명시적 변환 연산자를 정의 하는 사용자 정의 형식은 <xref:System.Reflection.MethodInfo> 는 나타내는 연산자가 구현 메서드가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-897">If either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-898">그렇지 않은 경우는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-898">Otherwise:</span></span>  
  
    -   <span data-ttu-id="2ed3f-899">모두 `expression`입니다. 형식 및 `type` 구현 방법이 숫자 또는 부울 형식 또는 null을 허용 하거나 허용 하지 않는 열거형 형식을 나타내는 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-899">If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.</span></span>  
  
    -   <span data-ttu-id="2ed3f-900">경우 `expression`합니다. 형식 또는 `type` unboxing 참조 형식 및는 명시적 boxing은 또는에서 참조 변환이 있는 `expression`합니다. 입력 `type`의 메서드 구현은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-900">If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.</span></span>  
  
#### <a name="lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-901">비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-901">Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-902">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-902">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-903">경우 `expression`합니다. 형식은 구현 메서드의 인수 형식에 할당할 수 있고 구현 메서드의 반환 형식은 할당할 `type`, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-903">If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="2ed3f-904">하나 또는 두 경우의 `expression`합니다. 형식 또는 `type` nullable 값 형식이 며 해당 nullable이 아닌 값 형식은 인수 형식과 구현 메서드의 반환 형식에 같음 각각 노드가 리프트 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-904">If one or both of `expression`.Type or `type` is a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.</span></span>  
  
 <span data-ttu-id="2ed3f-905">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-905">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-906">모두 `expression`입니다. 형식 및 `type` 는 nullable이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-906">If both `expression`.Type and `type` are non-nullable, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="2ed3f-907">그렇지 않은 경우 노드가 리프트 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-907">Otherwise the node is lifted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-908">다음 코드 예제에는 형식 변환 작업을 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-908">The following code example shows how to create an expression that represents a type conversion operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#23)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-909"><paramref name="expression" /> 또는 <paramref name="type" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-909"><paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-910"><paramref name="expression" />.Type과 <paramref name="type" /> 사이에 변환 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-910">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Convert (System.Linq.Expressions.Expression expression, Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Convert(class System.Linq.Expressions.Expression expression, class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Convert(System::Linq::Expressions::Expression ^ expression, Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Convert : System.Linq.Expressions.Expression * Type * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Convert (expression, type, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-911"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-911">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <param name="type"><span data-ttu-id="2ed3f-912"><see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-912">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-913"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-913">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-914">구현 메서드가 지정된 변환 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-914">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation for which the implementing method is specified.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-915"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />, <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 및 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-915">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" />, and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-916">합니다 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> 결과 속성 <xref:System.Linq.Expressions.UnaryExpression> 구현 방법으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-916">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="2ed3f-917"><xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> 속성이 `false`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-917">The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`.</span></span> <span data-ttu-id="2ed3f-918">노드가 리프트 된 경우 <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> 는 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-918">If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`.</span></span> <span data-ttu-id="2ed3f-919">그렇지 않으면 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-919">Otherwise, it is `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-920">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-920">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-921">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-921">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-922">메서드가 아닌 경우 `null`, 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-922">If method is not `null`, it is the implementing method.</span></span> <span data-ttu-id="2ed3f-923">Void가 아닌를 나타내야 `static` (`Shared` Visual basic에서) 인수 하나를 사용 하는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-923">It must represent a non-void, `static` (`Shared` in Visual Basic) method that takes one argument.</span></span>  
  
-   <span data-ttu-id="2ed3f-924">경우에 그렇지 `expression`합니다. 형식 또는 `type` 은 암시적 또는 명시적 변환 연산자를 정의 하는 사용자 정의 형식은 <xref:System.Reflection.MethodInfo> 는 나타내는 연산자가 구현 메서드가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-924">Otherwise, if either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-925">그렇지 않은 경우는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-925">Otherwise:</span></span>  
  
    -   <span data-ttu-id="2ed3f-926">모두 `expression`입니다. 형식 및 `type` 구현 방법이 숫자 또는 부울 형식 또는 null을 허용 하거나 허용 하지 않는 열거형 형식을 나타내는 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-926">If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.</span></span>  
  
    -   <span data-ttu-id="2ed3f-927">경우 `expression`합니다. 형식 또는 `type` unboxing 참조 형식 및는 명시적 boxing은 또는에서 참조 변환이 있는 `expression`합니다. 입력 `type`의 메서드 구현은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-927">If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.</span></span>  
  
#### <a name="lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-928">비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-928">Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-929">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-929">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-930">경우 `expression`합니다. 형식은 구현 메서드의 인수 형식에 할당할 수 있고 구현 메서드의 반환 형식은 할당할 `type`, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-930">If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="2ed3f-931">중 하나 또는 두 경우의 `expression`합니다. 형식 또는 `type` nullable 값 형식이 고 해당 nullable이 아닌 값 형식은 인수 형식과 구현 메서드의 반환 형식에 같음 각각 노드가 리프트 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-931">If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.</span></span>  
  
 <span data-ttu-id="2ed3f-932">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-932">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-933">모두 `expression`입니다. 형식 및 `type` 는 nullable이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-933">If both `expression`.Type and `type` are non-nullable, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="2ed3f-934">그렇지 않은 경우 노드가 리프트 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-934">Otherwise the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-935"><paramref name="expression" /> 또는 <paramref name="type" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-935"><paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-936"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니거나, 정확하게 하나의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-936"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-937"><paramref name="expression" />.Type과 <paramref name="type" /> 사이에 변환 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-937">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</span></span>  
  
<span data-ttu-id="2ed3f-938">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-938">-or-</span></span> 
 <span data-ttu-id="2ed3f-939"><paramref name="expression" />.Type을 <paramref name="method" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-939"><paramref name="expression" />.Type is not assignable to the argument type of the method represented by <paramref name="method" />.</span></span>  
  
<span data-ttu-id="2ed3f-940">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-940">-or-</span></span> 
<span data-ttu-id="2ed3f-941"><paramref name="method" />가 나타내는 메서드의 반환 형식을 <paramref name="type" />에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-941">The return type of the method represented by <paramref name="method" /> is not assignable to <paramref name="type" />.</span></span>  
  
<span data-ttu-id="2ed3f-942">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-942">-or-</span></span> 
 <span data-ttu-id="2ed3f-943"><paramref name="expression" />.Type 또는 <paramref name="type" />이 nullable 값 형식이고 nullable이 아닌 해당 값 형식이 <paramref name="method" />가 나타내는 메서드의 인수 형식 또는 반환 형식과 각각 일치하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-943"><paramref name="expression" />.Type or <paramref name="type" /> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <paramref name="method" />.</span></span></exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="2ed3f-944"><paramref name="method" /> 설명과 일치하는 메서드가 둘 이상 있는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-944">More than one method that matches the <paramref name="method" /> description was found.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-945">대상 형식에서 오버플로가 발생할 때 예외가 throw되는 변환 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-945">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation that throws an exception if the target type is overflowed.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression ConvertChecked (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression ConvertChecked(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ ConvertChecked(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member ConvertChecked : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.ConvertChecked (expression, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-946"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-946">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <param name="type"><span data-ttu-id="2ed3f-947"><see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-947">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-948">대상 형식에서 오버플로가 발생할 때 예외가 throw되는 변환 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-948">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation that throws an exception if the target type is overflowed.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-949"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-949">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-950">합니다 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> 결과 속성 <xref:System.Linq.Expressions.UnaryExpression> 구현 방법으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-950">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="2ed3f-951"><xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> 속성이 `false`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-951">The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`.</span></span> <span data-ttu-id="2ed3f-952">노드가 리프트 된 경우 <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> 는 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-952">If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`.</span></span> <span data-ttu-id="2ed3f-953">그렇지 않으면 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-953">Otherwise, it is `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-954">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-954">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-955">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-955">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-956">경우 `expression`합니다. 형식 또는 `type` 은 암시적 또는 명시적 변환 연산자를 정의 하는 사용자 정의 형식은 <xref:System.Reflection.MethodInfo> 는 나타내는 연산자가 구현 메서드가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-956">If either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-957">그렇지 않은 경우는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-957">Otherwise:</span></span>  
  
    -   <span data-ttu-id="2ed3f-958">모두 `expression`입니다. 형식 및 `type` 구현 방법이 숫자 또는 부울 형식 또는 null을 허용 하거나 허용 하지 않는 열거형 형식을 나타내는 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-958">If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.</span></span>  
  
    -   <span data-ttu-id="2ed3f-959">경우 `expression`합니다. 형식 또는 `type` unboxing 참조 형식 및는 명시적 boxing은 또는에서 참조 변환이 있는 `expression`합니다. 입력 `type`의 메서드 구현은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-959">If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.</span></span>  
  
#### <a name="lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-960">비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-960">Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-961">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-961">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-962">경우 `expression`합니다. 형식은 구현 메서드의 인수 형식에 할당할 수 있고 구현 메서드의 반환 형식은 할당할 `type`, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-962">If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="2ed3f-963">중 하나 또는 두 경우의 `expression`합니다. 형식 또는 `type` nullable 값 형식이 고 해당 nullable이 아닌 값 형식은 인수 형식과 구현 메서드의 반환 형식에 같음 각각 노드가 리프트 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-963">If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.</span></span>  
  
 <span data-ttu-id="2ed3f-964">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-964">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-965">모두 `expression`입니다. 형식 및 `type` 는 nullable이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-965">If both `expression`.Type and `type` are non-nullable, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="2ed3f-966">그렇지 않은 경우 노드가 리프트 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-966">Otherwise the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-967"><paramref name="expression" /> 또는 <paramref name="type" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-967"><paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-968"><paramref name="expression" />.Type과 <paramref name="type" /> 사이에 변환 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-968">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression ConvertChecked (System.Linq.Expressions.Expression expression, Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression ConvertChecked(class System.Linq.Expressions.Expression expression, class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ ConvertChecked(System::Linq::Expressions::Expression ^ expression, Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member ConvertChecked : System.Linq.Expressions.Expression * Type * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.ConvertChecked (expression, type, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-969"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-969">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <param name="type"><span data-ttu-id="2ed3f-970"><see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-970">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-971"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-971">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-972">구현 메서드가 지정된 대상 형식에서 오버플로가 발생할 때 예외가 throw되는 변환 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-972">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation that throws an exception if the target type is overflowed and for which the implementing method is specified.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-973"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />, <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 및 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-973">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" />, and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-974">합니다 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> 결과 속성 <xref:System.Linq.Expressions.UnaryExpression> 구현 방법으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-974">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="2ed3f-975"><xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> 속성이 `false`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-975">The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`.</span></span> <span data-ttu-id="2ed3f-976">노드가 리프트 된 경우 <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> 는 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-976">If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`.</span></span> <span data-ttu-id="2ed3f-977">그렇지 않으면 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-977">Otherwise, it is `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-978">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-978">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-979">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-979">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-980">메서드가 아닌 경우 `null`, 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-980">If method is not `null`, it is the implementing method.</span></span> <span data-ttu-id="2ed3f-981">Void가 아닌를 나타내야 `static` (`Shared` Visual basic에서) 인수 하나를 사용 하는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-981">It must represent a non-void, `static` (`Shared` in Visual Basic) method that takes one argument.</span></span>  
  
-   <span data-ttu-id="2ed3f-982">경우에 그렇지 `expression`합니다. 형식 또는 `type` 은 암시적 또는 명시적 변환 연산자를 정의 하는 사용자 정의 형식은 <xref:System.Reflection.MethodInfo> 는 나타내는 연산자가 구현 메서드가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-982">Otherwise, if either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-983">그렇지 않은 경우는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-983">Otherwise:</span></span>  
  
    -   <span data-ttu-id="2ed3f-984">모두 `expression`입니다. 형식 및 `type` 구현 방법이 숫자 또는 부울 형식 또는 null을 허용 하거나 허용 하지 않는 열거형 형식을 나타내는 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-984">If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.</span></span>  
  
    -   <span data-ttu-id="2ed3f-985">경우 `expression`합니다. 형식 또는 `type` unboxing 참조 형식 및는 명시적 boxing은 또는에서 참조 변환이 있는 `expression`합니다. 입력 `type`의 메서드 구현은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-985">If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.</span></span>  
  
#### <a name="lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-986">비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-986">Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-987">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-987">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-988">경우 `expression`합니다. 형식은 구현 메서드의 인수 형식에 할당할 수 있고 구현 메서드의 반환 형식은 할당할 `type`, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-988">If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="2ed3f-989">중 하나 또는 두 경우의 `expression`합니다. 형식 또는 `type` nullable 값 형식이 고 해당 nullable이 아닌 값 형식은 인수 형식과 구현 메서드의 반환 형식에 같음 각각 노드가 리프트 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-989">If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.</span></span>  
  
 <span data-ttu-id="2ed3f-990">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-990">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-991">모두 `expression`입니다. 형식 및 `type` 는 nullable이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-991">If both `expression`.Type and `type` are non-nullable, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="2ed3f-992">그렇지 않은 경우 노드가 리프트 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-992">Otherwise the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-993"><paramref name="expression" /> 또는 <paramref name="type" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-993"><paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-994"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니거나, 정확하게 하나의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-994"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-995"><paramref name="expression" />.Type과 <paramref name="type" /> 사이에 변환 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-995">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</span></span>  
  
<span data-ttu-id="2ed3f-996">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-996">-or-</span></span> 
 <span data-ttu-id="2ed3f-997"><paramref name="expression" />.Type을 <paramref name="method" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-997"><paramref name="expression" />.Type is not assignable to the argument type of the method represented by <paramref name="method" />.</span></span>  
  
<span data-ttu-id="2ed3f-998">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-998">-or-</span></span> 
<span data-ttu-id="2ed3f-999"><paramref name="method" />가 나타내는 메서드의 반환 형식을 <paramref name="type" />에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-999">The return type of the method represented by <paramref name="method" /> is not assignable to <paramref name="type" />.</span></span>  
  
<span data-ttu-id="2ed3f-1000">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1000">-or-</span></span> 
 <span data-ttu-id="2ed3f-1001"><paramref name="expression" />.Type 또는 <paramref name="type" />이 nullable 값 형식이고 nullable이 아닌 해당 값 형식이 <paramref name="method" />가 나타내는 메서드의 인수 형식 또는 반환 형식과 각각 일치하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1001"><paramref name="expression" />.Type or <paramref name="type" /> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <paramref name="method" />.</span></span></exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="2ed3f-1002"><paramref name="method" /> 설명과 일치하는 메서드가 둘 이상 있는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1002">More than one method that matches the <paramref name="method" /> description was found.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DebugInfo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DebugInfoExpression DebugInfo (System.Linq.Expressions.SymbolDocumentInfo document, int startLine, int startColumn, int endLine, int endColumn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DebugInfoExpression DebugInfo(class System.Linq.Expressions.SymbolDocumentInfo document, int32 startLine, int32 startColumn, int32 endLine, int32 endColumn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DebugInfo (document As SymbolDocumentInfo, startLine As Integer, startColumn As Integer, endLine As Integer, endColumn As Integer) As DebugInfoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DebugInfoExpression ^ DebugInfo(System::Linq::Expressions::SymbolDocumentInfo ^ document, int startLine, int startColumn, int endLine, int endColumn);" />
      <MemberSignature Language="F#" Value="static member DebugInfo : System.Linq.Expressions.SymbolDocumentInfo * int * int * int * int -&gt; System.Linq.Expressions.DebugInfoExpression" Usage="System.Linq.Expressions.Expression.DebugInfo (document, startLine, startColumn, endLine, endColumn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DebugInfoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="System.Linq.Expressions.SymbolDocumentInfo" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="startLine" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="startColumn" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="endLine" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="endColumn" Type="System.Int32" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="document"><span data-ttu-id="2ed3f-1003">소스 파일을 나타내는 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1003">The <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that represents the source file.</span></span></param>
        <param name="startLine"><span data-ttu-id="2ed3f-1004">이 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 시작 줄입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1004">The start line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span></span> <span data-ttu-id="2ed3f-1005">0보다 커야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1005">Must be greater than 0.</span></span></param>
        <param name="startColumn"><span data-ttu-id="2ed3f-1006">이 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 시작 열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1006">The start column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span></span> <span data-ttu-id="2ed3f-1007">0보다 커야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1007">Must be greater than 0.</span></span></param>
        <param name="endLine"><span data-ttu-id="2ed3f-1008">이 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 끝 줄입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1008">The end line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span></span> <span data-ttu-id="2ed3f-1009">시작 줄보다 크거나 같아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1009">Must be greater or equal than the start line.</span></span></param>
        <param name="endColumn"><span data-ttu-id="2ed3f-1010">이 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 끝 열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1010">The end column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span></span> <span data-ttu-id="2ed3f-1011">끝 줄이 시작 줄과 같을 경우 끝 열은 시작 열보다 크거나 같아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1011">If the end line is the same as the start line, it must be greater or equal than the start column.</span></span> <span data-ttu-id="2ed3f-1012">어떤 경우에도 0보다 커야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1012">In any case, must be greater than 0.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1013">지정된 범위를 사용하여 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1013">Creates a <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> with the specified span.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1014"><see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1014">An instance of <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Decrement">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-1015">1씩 감소하는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1015">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decrementing of the expression by 1.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Decrement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Decrement (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Decrement(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Decrement(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Decrement : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Decrement expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-1016">감소시킬 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1016">An <see cref="T:System.Linq.Expressions.Expression" /> to decrement.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1017">1씩 감소하는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1017">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decrementing of the expression by 1.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1018">감소되는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1018">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decremented expression.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1019">이 식은 작동 하며 전달 된 개체의 값을 변경 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1019">This expression is functional and does not change the value of the object passed to it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-1020">다음 코드 예제에는 지정된 된 값에서 1을 빼는 식에 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1020">The following code example shows how to create an expression that subtracts 1 from a given value.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#5)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Decrement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Decrement (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Decrement(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Decrement(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Decrement : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Decrement (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-1021">감소시킬 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1021">An <see cref="T:System.Linq.Expressions.Expression" /> to decrement.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-1022">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1022">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1023">1씩 감소하는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1023">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decrementing of the expression by 1.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1024">감소되는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1024">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decremented expression.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1025">이 식은 작동 하며 전달 된 개체의 값을 변경 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1025">This expression is functional and does not change the value of the object passed to it.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DefaultExpression Default (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DefaultExpression Default(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Default(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DefaultExpression ^ Default(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Default : Type -&gt; System.Linq.Expressions.DefaultExpression" Usage="System.Linq.Expressions.Expression.Default type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DefaultExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="2ed3f-1026"><see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1026">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1027"><see cref="T:System.Linq.Expressions.DefaultExpression" /> 속성이 지정된 형식으로 설정된 <see cref="P:System.Linq.Expressions.Expression.Type" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1027">Creates a <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to the specified type.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1028"><see cref="T:System.Linq.Expressions.DefaultExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> 속성이 지정된 형식으로 설정된 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1028">A <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to the specified type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2ed3f-1029">다음 코드 예제에는 지정된 된 형식에 대 한 기본 값을 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1029">The following code example shows how to create an expression that represents a default value for a given type.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#6)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Divide">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-1030">산술 나누기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1030">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic division operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Divide (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Divide(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Divide(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Divide : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Divide (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-1031"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1031">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-1032"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1032">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1033">산술 나누기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1033">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic division operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1034"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1034">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1035">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1035">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-1036"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1036">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-1037">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1037">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-1038">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1038">Otherwise, they are `false`.</span></span> <span data-ttu-id="2ed3f-1039"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1039">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-1040">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1040">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-1041">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1041">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-1042">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1042">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-1043">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 나누기 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1043">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the division operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1044">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1044">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-1045">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1045">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-1046">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1046">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-1047">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1047">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-1048">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1048">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1049">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1049">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-1050">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1050">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-1051">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1051">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-1052">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1052">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-1053">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1053">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-1054">노드의 유형 미리 정의 된 나누기 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1054">The type of the node is the result type of the predefined division operator.</span></span>  
  
-   <span data-ttu-id="2ed3f-1055">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1055">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-1056">노드의 유형 미리 정의 된 나누기 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1056">The type of the node is the nullable type that corresponds to the result type of the predefined division operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-1057">다음 코드 예제는 첫 번째 인수가 두 번째 인수로 분할 하는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1057">The following code example shows how to create an expression that divides its first argument by its second argument.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#7)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-1058"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1058"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-1059"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 나누기 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1059">The division operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Divide (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Divide(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Divide(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Divide : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Divide (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-1060"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1060">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-1061"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1061">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-1062"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1062">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1063">산술 나누기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1063">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic division operation.</span></span> <span data-ttu-id="2ed3f-1064">구현 메서드를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1064">The implementing method can be specified.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1065"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1065">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1066">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1066">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-1067"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1067">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-1068">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1068">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-1069">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1069">Otherwise, they are `false`.</span></span> <span data-ttu-id="2ed3f-1070"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1070">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-1071">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1071">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-1072">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1072">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-1073">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1073">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-1074">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 노드에 대 한 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1074">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="2ed3f-1075">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 나누기 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1075">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the division operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1076">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1076">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-1077">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1077">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-1078">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1078">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-1079">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1079">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-1080">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1080">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1081">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1081">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-1082">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1082">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-1083">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1083">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-1084">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1084">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-1085">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1085">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-1086">노드의 유형 미리 정의 된 나누기 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1086">The type of the node is the result type of the predefined division operator.</span></span>  
  
-   <span data-ttu-id="2ed3f-1087">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1087">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-1088">노드의 유형 미리 정의 된 나누기 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1088">The type of the node is the nullable type that corresponds to the result type of the predefined division operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-1089"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1089"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-1090"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1090"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-1091"><paramref name="method" />가 <see langword="null" />이고 나누기 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1091"><paramref name="method" /> is <see langword="null" /> and the division operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DivideAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-1092">오버플로를 검사하지 않는 나누기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1092">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DivideAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression DivideAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivideAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ DivideAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member DivideAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.DivideAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-1093"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1093">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-1094"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1094">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1095">오버플로를 검사하지 않는 나누기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1095">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1096"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1096">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DivideAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression DivideAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivideAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ DivideAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member DivideAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.DivideAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-1097"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1097">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-1098"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1098">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-1099"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1099">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1100">오버플로를 검사하지 않는 나누기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1100">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1101"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1101">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DivideAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression DivideAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivideAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ DivideAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member DivideAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.DivideAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-1102"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1102">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-1103"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1103">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-1104"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1104">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="2ed3f-1105"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1105">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1106">오버플로를 검사하지 않는 나누기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1106">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1107"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1107">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dynamic">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-1108">동적 연산을 나타내는 <see cref="T:System.Linq.Expressions.DynamicExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1108">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arguments As IEnumerable(Of Expression)) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Dynamic : System.Runtime.CompilerServices.CallSiteBinder * Type * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.Dynamic (binder, returnType, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="returnType" Type="System.Type" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="2ed3f-1109">동적 작업의 런타임 바인더입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1109">The runtime binder for the dynamic operation.</span></span></param>
        <param name="returnType"><span data-ttu-id="2ed3f-1110">동적 식의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1110">The result type of the dynamic expression.</span></span></param>
        <param name="arguments"><span data-ttu-id="2ed3f-1111">동적 작업의 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1111">The arguments to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1112">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1112">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1113"><see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1113">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1114"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> 결과의 속성 인수의 형식에서 유추 됩니다 하 고 지정 된 형식을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1114">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arg0 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Linq::Expressions::Expression ^ arg0);" />
      <MemberSignature Language="F#" Value="static member Dynamic : System.Runtime.CompilerServices.CallSiteBinder * Type * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.Dynamic (binder, returnType, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="returnType" Type="System.Type" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="2ed3f-1115">동적 작업의 런타임 바인더입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1115">The runtime binder for the dynamic operation.</span></span></param>
        <param name="returnType"><span data-ttu-id="2ed3f-1116">동적 식의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1116">The result type of the dynamic expression.</span></span></param>
        <param name="arg0"><span data-ttu-id="2ed3f-1117">동적 작업의 첫 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1117">The first argument to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1118">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1118">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1119"><see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1119">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1120"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> 결과의 속성 인수의 형식에서 유추 됩니다 하 고 지정 된 형식을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1120">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, ParamArray arguments As Expression()) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Dynamic : System.Runtime.CompilerServices.CallSiteBinder * Type * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.Dynamic (binder, returnType, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="returnType" Type="System.Type" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="2ed3f-1121">동적 작업의 런타임 바인더입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1121">The runtime binder for the dynamic operation.</span></span></param>
        <param name="returnType"><span data-ttu-id="2ed3f-1122">동적 식의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1122">The result type of the dynamic expression.</span></span></param>
        <param name="arguments"><span data-ttu-id="2ed3f-1123">동적 작업의 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1123">The arguments to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1124">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1124">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1125"><see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1125">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1126"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> 결과의 속성 인수의 형식에서 유추 됩니다 하 고 지정 된 형식을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1126">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arg0 As Expression, arg1 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Dynamic : System.Runtime.CompilerServices.CallSiteBinder * Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.Dynamic (binder, returnType, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="returnType" Type="System.Type" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="2ed3f-1127">동적 작업의 런타임 바인더입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1127">The runtime binder for the dynamic operation.</span></span></param>
        <param name="returnType"><span data-ttu-id="2ed3f-1128">동적 식의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1128">The result type of the dynamic expression.</span></span></param>
        <param name="arg0"><span data-ttu-id="2ed3f-1129">동적 작업의 첫 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1129">The first argument to the dynamic operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="2ed3f-1130">동적 작업의 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1130">The second argument to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1131">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1131">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1132"><see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1132">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1133"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> 결과의 속성 인수의 형식에서 유추 됩니다 하 고 지정 된 형식을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1133">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arg0 As Expression, arg1 As Expression, arg2 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Dynamic : System.Runtime.CompilerServices.CallSiteBinder * Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.Dynamic (binder, returnType, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="returnType" Type="System.Type" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="2ed3f-1134">동적 작업의 런타임 바인더입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1134">The runtime binder for the dynamic operation.</span></span></param>
        <param name="returnType"><span data-ttu-id="2ed3f-1135">동적 식의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1135">The result type of the dynamic expression.</span></span></param>
        <param name="arg0"><span data-ttu-id="2ed3f-1136">동적 작업의 첫 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1136">The first argument to the dynamic operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="2ed3f-1137">동적 작업의 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1137">The second argument to the dynamic operation.</span></span></param>
        <param name="arg2"><span data-ttu-id="2ed3f-1138">동적 작업의 세 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1138">The third argument to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1139">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1139">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1140"><see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1140">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1141"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> 결과의 속성 인수의 형식에서 유추 됩니다 하 고 지정 된 형식을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1141">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3);" />
      <MemberSignature Language="F#" Value="static member Dynamic : System.Runtime.CompilerServices.CallSiteBinder * Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.Dynamic (binder, returnType, arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="returnType" Type="System.Type" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="2ed3f-1142">동적 작업의 런타임 바인더입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1142">The runtime binder for the dynamic operation.</span></span></param>
        <param name="returnType"><span data-ttu-id="2ed3f-1143">동적 식의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1143">The result type of the dynamic expression.</span></span></param>
        <param name="arg0"><span data-ttu-id="2ed3f-1144">동적 작업의 첫 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1144">The first argument to the dynamic operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="2ed3f-1145">동적 작업의 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1145">The second argument to the dynamic operation.</span></span></param>
        <param name="arg2"><span data-ttu-id="2ed3f-1146">동적 작업의 세 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1146">The third argument to the dynamic operation.</span></span></param>
        <param name="arg3"><span data-ttu-id="2ed3f-1147">동적 작업의 네 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1147">The fourth argument to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1148">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1148">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1149"><see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1149">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1150"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> 결과의 속성 인수의 형식에서 유추 됩니다 하 고 지정 된 형식을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1150">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ElementInit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-1151"><see cref="T:System.Linq.Expressions.ElementInit" />를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1151">Creates an <see cref="T:System.Linq.Expressions.ElementInit" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ElementInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ElementInit ElementInit (System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ElementInit ElementInit(class System.Reflection.MethodInfo addMethod, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElementInit (addMethod As MethodInfo, arguments As IEnumerable(Of Expression)) As ElementInit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ElementInit ^ ElementInit(System::Reflection::MethodInfo ^ addMethod, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member ElementInit : System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.ElementInit" Usage="System.Linq.Expressions.Expression.ElementInit (addMethod, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ElementInit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="addMethod"><span data-ttu-id="2ed3f-1152"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1152">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> property equal to.</span></span></param>
        <param name="arguments"><span data-ttu-id="2ed3f-1153"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1153">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to set the <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1154">지정된 <see cref="T:System.Linq.Expressions.ElementInit" />을 두 번째 인수로 사용하여 <see cref="T:System.Collections.Generic.IEnumerable`1" />를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1154">Creates an <see cref="T:System.Linq.Expressions.ElementInit" />, given an <see cref="T:System.Collections.Generic.IEnumerable`1" /> as the second argument.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1155"><see cref="T:System.Linq.Expressions.ElementInit" /> 및 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1155">An <see cref="T:System.Linq.Expressions.ElementInit" /> that has the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> and <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1156">`addMethod` 매개 변수는 "Add" (대/소문자 구분) 라는 인스턴스 메서드를 나타내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1156">The `addMethod` parameter must represent an instance method named "Add" (case insensitive).</span></span> <span data-ttu-id="2ed3f-1157">Add 메서드의 요소 수로 매개 변수 수가 같은 있어야 `arguments`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1157">The add method must have the same number of parameters as the number of elements in `arguments`.</span></span> <span data-ttu-id="2ed3f-1158">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성의 각 요소에 `arguments` add 메서드의 해당 매개 변수의 형식에 할당할 수 있어야 후 가능한 *인용*합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1158">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element in `arguments` must be assignable to the type of the corresponding parameter of the add method, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ed3f-1159">경우에 해당 메서드 매개 변수 형식의 요소 인용 됩니다 <xref:System.Linq.Expressions.Expression>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1159">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="2ed3f-1160">요소에 래핑됩니다 인용을 <xref:System.Linq.Expressions.ExpressionType.Quote> 노드.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1160">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="2ed3f-1161">결과 노드를 <xref:System.Linq.Expressions.UnaryExpression> 해당 <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> 속성이 요소의 `arguments`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1161">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-1162">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29> 메서드를를 <xref:System.Linq.Expressions.ElementInit> 호출을 나타내는 <xref:System.Collections.Generic.Dictionary%602.Add%2A> 사전 컬렉션의 요소를 초기화 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1162">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.ElementInit> that represents calling the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method to initialize an element of a dictionary collection.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#4)]
 [!code-vb[System.Linq.Expressions.Expression#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-1163"><paramref name="addMethod" /> 또는 <paramref name="arguments" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1163"><paramref name="addMethod" /> or <paramref name="arguments" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-1164"><paramref name="addMethod" />를 나타내는 메서드 이름이 "Add"(대/소문자 구분 안 함)가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1164">The method that <paramref name="addMethod" /> represents is not named "Add" (case insensitive).</span></span>  
  
<span data-ttu-id="2ed3f-1165">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1165">-or-</span></span> 
<span data-ttu-id="2ed3f-1166"><paramref name="addMethod" />를 나타내는 메서드가 인스턴스 메서드가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1166">The method that <paramref name="addMethod" /> represents is not an instance method.</span></span>  
  
<span data-ttu-id="2ed3f-1167">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1167">-or-</span></span> 
 <span data-ttu-id="2ed3f-1168"><paramref name="arguments" />의 요소 수가 <paramref name="addMethod" />로 나타내는 메서드의 매개 변수 수와 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1168"><paramref name="arguments" /> does not contain the same number of elements as the number of parameters for the method that <paramref name="addMethod" /> represents.</span></span>  
  
<span data-ttu-id="2ed3f-1169">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1169">-or-</span></span> 
<span data-ttu-id="2ed3f-1170"><paramref name="arguments" />의 하나 이상의 요소에 대한 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="addMethod" />가 나타내는 메서드의 해당 매개 변수 형식에 적용할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1170">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the method that <paramref name="addMethod" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ElementInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ElementInit ElementInit (System.Reflection.MethodInfo addMethod, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ElementInit ElementInit(class System.Reflection.MethodInfo addMethod, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElementInit (addMethod As MethodInfo, ParamArray arguments As Expression()) As ElementInit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ElementInit ^ ElementInit(System::Reflection::MethodInfo ^ addMethod, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member ElementInit : System.Reflection.MethodInfo * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.ElementInit" Usage="System.Linq.Expressions.Expression.ElementInit (addMethod, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ElementInit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="addMethod"><span data-ttu-id="2ed3f-1171"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1171">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> property equal to.</span></span></param>
        <param name="arguments"><span data-ttu-id="2ed3f-1172"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1172">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to set the <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1173">지정된 값 배열을 두 번째 인수로 사용하여 <see cref="T:System.Linq.Expressions.ElementInit" />를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1173">Creates an <see cref="T:System.Linq.Expressions.ElementInit" />, given an array of values as the second argument.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1174"><see cref="T:System.Linq.Expressions.ElementInit" /> 및 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1174">An <see cref="T:System.Linq.Expressions.ElementInit" /> that has the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> and <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1175">`addMethod` 매개 변수는 "Add" (대/소문자 구분) 라는 인스턴스 메서드를 나타내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1175">The `addMethod` parameter must represent an instance method named "Add" (case insensitive).</span></span> <span data-ttu-id="2ed3f-1176">Add 메서드의 요소 수로 매개 변수 수가 같은 있어야 `arguments`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1176">The add method must have the same number of parameters as the number of elements in `arguments`.</span></span> <span data-ttu-id="2ed3f-1177">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성의 각 요소에 `arguments` add 메서드의 해당 매개 변수의 형식에 할당할 수 있어야 후 가능한 *인용*합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1177">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element in `arguments` must be assignable to the type of the corresponding parameter of the add method, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ed3f-1178">경우에 해당 메서드 매개 변수 형식의 요소 인용 됩니다 <xref:System.Linq.Expressions.Expression>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1178">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="2ed3f-1179">요소에 래핑됩니다 인용을 <xref:System.Linq.Expressions.ExpressionType.Quote> 노드.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1179">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="2ed3f-1180">결과 노드를 <xref:System.Linq.Expressions.UnaryExpression> 해당 <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> 속성이 요소의 `arguments`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1180">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-1181">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29> 메서드를를 <xref:System.Linq.Expressions.ElementInit> 호출을 나타내는 <xref:System.Collections.Generic.Dictionary%602.Add%2A> 사전 컬렉션의 요소를 초기화 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1181">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.ElementInit> that represents calling the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method to initialize an element of a dictionary collection.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#4)]
 [!code-vb[System.Linq.Expressions.Expression#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-1182"><paramref name="addMethod" /> 또는 <paramref name="arguments" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1182"><paramref name="addMethod" /> or <paramref name="arguments" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-1183">addMethod가 나타내는 메서드의 이름이 "Add"(대/소문자 구분 안 함)가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1183">The method that addMethod represents is not named "Add" (case insensitive).</span></span>  
  
<span data-ttu-id="2ed3f-1184">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1184">-or-</span></span> 
<span data-ttu-id="2ed3f-1185">addMethod가 나타내는 메서드가 인스턴스 메서드가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1185">The method that addMethod represents is not an instance method.</span></span>  
  
<span data-ttu-id="2ed3f-1186">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1186">-or-</span></span> 
<span data-ttu-id="2ed3f-1187">인수에 들어 있는 요소 수가 addMethod가 나타내는 메서드의 매개 변수 개수와 다른 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1187">arguments does not contain the same number of elements as the number of parameters for the method that addMethod represents.</span></span>  
  
<span data-ttu-id="2ed3f-1188">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1188">-or-</span></span> 
<span data-ttu-id="2ed3f-1189"><paramref name="arguments" />의 하나 이상의 요소에 대한 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="addMethod" />가 나타내는 메서드의 해당 매개 변수 형식에 적용할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1189">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the method that <paramref name="addMethod" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DefaultExpression Empty ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DefaultExpression Empty() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Empty () As DefaultExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DefaultExpression ^ Empty();" />
      <MemberSignature Language="F#" Value="static member Empty : unit -&gt; System.Linq.Expressions.DefaultExpression" Usage="System.Linq.Expressions.Expression.Empty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DefaultExpression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2ed3f-1190"><see cref="T:System.Void" /> 형식을 가진 빈 식을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1190">Creates an empty expression that has <see cref="T:System.Void" /> type.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1191"><see cref="T:System.Linq.Expressions.DefaultExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />로 설정된 <see cref="T:System.Void" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1191">A <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <see cref="T:System.Void" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1192">여기서는 식이 필요 하지만 조치가 필요한 빈 식을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1192">An empty expression can be used where an expression is expected but no action is desired.</span></span> <span data-ttu-id="2ed3f-1193">예를 들어, 빈 식 블록 식의 마지막 식으로 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1193">For example, you can use an empty expression as the last expression in a block expression.</span></span> <span data-ttu-id="2ed3f-1194">이 경우 블록 식의 반환 값은 void입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1194">In this case, the block expression's return value is void.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-1195">다음 코드 예제에서는 빈 식을 만들고 블록 식에 추가 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1195">The following code example shows how to create an empty expression and add it to a block expression.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#31)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equal">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-1196">같음 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1196">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an equality comparison.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equal">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Equal (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Equal(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equal (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Equal(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Equal : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Equal (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-1197"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1197">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-1198"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1198">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1199">같음 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1199">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an equality comparison.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1200"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1200">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1201">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1201">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-1202"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1202">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-1203">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 속성은 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1203">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="2ed3f-1204">그렇지 않으면 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1204">Otherwise, it is `false`.</span></span> <span data-ttu-id="2ed3f-1205"><xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 항상 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1205">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="2ed3f-1206">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1206">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-1207">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1207">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-1208">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1208">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-1209">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 같음 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1209">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the equality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1210">구현 메서드는이 고, 그렇지 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1210">Otherwise, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-1211">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1211">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-1212">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1212">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-1213">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1213">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-1214">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1214">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1215">다음 두 조건을 충족 하는 경우 노드가 리프트 된 및 노드의 유형입니다 <xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1215">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="2ed3f-1216">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1216">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-1217">구현 메서드의 반환 형식은 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1217">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="2ed3f-1218">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1218">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-1219">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1219">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-1220">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1220">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="2ed3f-1221">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1221">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-1222">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1222">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-1223">다음 코드 예제에는 두 인수의 값이 같은지 여부를 확인 하는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1223">The following code example shows how to create an expression that checks whether the values of its two arguments are equal.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#8)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-1224"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1224"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-1225"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 같음 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1225">The equality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Equal">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Equal (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Equal(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equal (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Equal(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Equal : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Equal (left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-1226"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1226">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-1227"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1227">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="liftToNull"><span data-ttu-id="2ed3f-1228"><see langword="true" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="true" />이고, <see langword="false" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1228"><see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-1229"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1229">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1230">같음 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1230">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an equality comparison.</span></span> <span data-ttu-id="2ed3f-1231">구현 메서드를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1231">The implementing method can be specified.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1232"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1232">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1233">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1233">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-1234"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1234">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-1235">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 속성은 `true` 하며 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성이 `liftToNull`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1235">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="2ed3f-1236">그렇지 않은 경우 둘 다 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1236">Otherwise, they are both `false`.</span></span> <span data-ttu-id="2ed3f-1237">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1237">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-1238">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1238">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-1239">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1239">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-1240">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1240">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1241">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 같음 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1241">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the equality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1242">구현 메서드는이 고, 그렇지 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1242">Otherwise, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-1243">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1243">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-1244">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1244">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-1245">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1245">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-1246">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1246">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1247">다음 두 조건이 충족 되 면 노드가 리프트 된; 또한 노드 형식은 nullable <xref:System.Boolean> 하는 경우 `liftToNull` 됩니다 `true` 또는 <xref:System.Boolean> 경우 `liftToNull` 는 `false`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1247">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="2ed3f-1248">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1248">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-1249">구현 메서드의 반환 형식은 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1249">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="2ed3f-1250">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1250">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-1251">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1251">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-1252">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1252">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="2ed3f-1253">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1253">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-1254">노드의 형식이 nullable <xref:System.Boolean> 경우 `liftToNull` 됩니다 `true` 또는 <xref:System.Boolean> 경우 `liftToNull` 는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1254">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-1255"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1255"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-1256"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1256"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-1257"><paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 같음 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1257"><paramref name="method" /> is <see langword="null" /> and the equality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExclusiveOr">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-1258">비트 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 연산을 나타내는 <see langword="XOR" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1258">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="XOR" /> operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExclusiveOr">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOr (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOr(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOr (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOr(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member ExclusiveOr : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ExclusiveOr (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-1259"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1259">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-1260"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1260">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1261">사용자 정의 형식에 대해 <c>op_ExclusiveOr</c>을 사용하여 비트 <see langword="XOR" /> 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1261">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="XOR" /> operation, using <c>op_ExclusiveOr</c> for user-defined types.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1262"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1262">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1263">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1263">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-1264"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1264">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-1265">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1265">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-1266">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1266">Otherwise, they are `false`.</span></span> <span data-ttu-id="2ed3f-1267"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1267">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-1268">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1268">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-1269">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1269">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-1270">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1270">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-1271">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 오버 로드 하는 사용자 정의 유형을 나타냅니다는 `XOR` 연산자는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1271">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the `XOR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1272">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 형식 정수 또는 부울 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1272">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-1273">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1273">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-1274">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1274">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-1275">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1275">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-1276">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1276">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1277">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1277">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-1278">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1278">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-1279">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1279">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-1280">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1280">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-1281">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1281">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-1282">노드 형식은 미리 정의 된 결과 형식 `XOR` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1282">The type of the node is the result type of the predefined `XOR` operator.</span></span>  
  
-   <span data-ttu-id="2ed3f-1283">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1283">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-1284">노드 형식은 미리 정의 된 결과 형식에 해당 하는 nullable 형식을 `XOR` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1284">The type of the node is the nullable type that corresponds to the result type of the predefined `XOR` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-1285">다음 코드 예제에는 논리적 XOR 연산을 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1285">The following code example shows how to create an expression that represents the logical XOR operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#9)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-1286"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1286"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-1287"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 <see langword="XOR" /> 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1287">The <see langword="XOR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOr">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOr (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOr(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOr (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOr(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member ExclusiveOr : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ExclusiveOr (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-1288"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1288">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-1289"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1289">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-1290"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1290">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1291">사용자 정의 형식에 대해 <c>op_ExclusiveOr</c>을 사용하여 비트 <see langword="XOR" /> 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1291">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="XOR" /> operation, using <c>op_ExclusiveOr</c> for user-defined types.</span></span> <span data-ttu-id="2ed3f-1292">구현 메서드를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1292">The implementing method can be specified.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1293"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1293">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1294">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1294">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-1295"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1295">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-1296">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1296">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-1297">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1297">Otherwise, they are `false`.</span></span> <span data-ttu-id="2ed3f-1298"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1298">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-1299">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1299">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-1300">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1300">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-1301">다음 규칙 작업에 대 한 메서드를 구현 하는 선택한을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1301">The following rules determine the chosen implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-1302">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1302">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1303">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 오버 로드 하는 사용자 정의 유형을 나타냅니다는 `XOR` 연산자를 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1303">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the `XOR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1304">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 형식 정수 또는 부울 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1304">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-1305">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1305">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-1306">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1306">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-1307">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1307">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-1308">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1308">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1309">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1309">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-1310">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1310">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-1311">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1311">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-1312">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1312">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-1313">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1313">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-1314">노드 형식은 미리 정의 된 결과 형식 `XOR` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1314">The type of the node is the result type of the predefined `XOR` operator.</span></span>  
  
-   <span data-ttu-id="2ed3f-1315">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1315">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-1316">노드 형식은 미리 정의 된 결과 형식에 해당 하는 nullable 형식을 `XOR` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1316">The type of the node is the nullable type that corresponds to the result type of the predefined `XOR` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-1317"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1317"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-1318"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1318"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-1319"><paramref name="method" />가 <see langword="null" />이고 <see langword="XOR" /> 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1319"><paramref name="method" /> is <see langword="null" /> and the <see langword="XOR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExclusiveOrAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-1320">비트 XOR 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1320">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExclusiveOrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOrAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member ExclusiveOrAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ExclusiveOrAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-1321"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1321">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-1322"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1322">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1323">사용자 정의 형식에 대해 <c>op_ExclusiveOr</c>을 사용하여 비트 XOR 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1323">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using <c>op_ExclusiveOr</c> for user-defined types.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1324"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1324">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOrAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member ExclusiveOrAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ExclusiveOrAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-1325"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1325">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-1326"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1326">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-1327"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1327">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1328">사용자 정의 형식에 대해 <c>op_ExclusiveOr</c>을 사용하여 비트 XOR 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1328">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using <c>op_ExclusiveOr</c> for user-defined types.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1329"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1329">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOrAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member ExclusiveOrAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ExclusiveOrAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-1330"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1330">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-1331"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1331">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-1332"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1332">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="2ed3f-1333"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1333">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1334">사용자 정의 형식에 대해 <c>op_ExclusiveOr</c>을 사용하여 비트 XOR 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1334">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using <c>op_ExclusiveOr</c> for user-defined types.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1335"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1335">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Field">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-1336">필드 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1336">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, System.Reflection.FieldInfo field);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Field(class System.Linq.Expressions.Expression expression, class System.Reflection.FieldInfo field) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Field(System::Linq::Expressions::Expression ^ expression, System::Reflection::FieldInfo ^ field);" />
      <MemberSignature Language="F#" Value="static member Field : System.Linq.Expressions.Expression * System.Reflection.FieldInfo -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Field (expression, field)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="field" Type="System.Reflection.FieldInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-1337"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1337">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to.</span></span> <span data-ttu-id="2ed3f-1338"><see langword="static" />(Visual Basic에서는 <see langword="Shared" />)의 경우 <paramref name="expression" />이 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1338">For <see langword="static" /> (<see langword="Shared" /> in Visual Basic), <paramref name="expression" /> must be <see langword="null" />.</span></span></param>
        <param name="field"><span data-ttu-id="2ed3f-1339"><see cref="T:System.Reflection.FieldInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1339">The <see cref="T:System.Reflection.FieldInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1340">필드 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1340">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1341"><see cref="T:System.Linq.Expressions.MemberExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> 및 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1341">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> and <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1342"><xref:System.Linq.Expressions.Expression.Type%2A> 결과의 속성 <xref:System.Linq.Expressions.MemberExpression> 값과 같음 합니다 <xref:System.Reflection.FieldInfo.FieldType%2A> 의 속성 `field`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1342">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.FieldInfo.FieldType%2A> property of `field`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-1343"><paramref name="field" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1343"><paramref name="field" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2ed3f-1344">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1344">-or-</span></span> 
<span data-ttu-id="2ed3f-1345"><paramref name="field" />가 나타내는 필드가 <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니고 <paramref name="expression" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1345">The field represented by <paramref name="field" /> is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic) and <paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-1346"><paramref name="expression" />.Type을 <paramref name="field" />가 나타내는 필드의 선언 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1346"><paramref name="expression" />.Type is not assignable to the declaring type of the field represented by <paramref name="field" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, string fieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Field(class System.Linq.Expressions.Expression expression, string fieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Field(System::Linq::Expressions::Expression ^ expression, System::String ^ fieldName);" />
      <MemberSignature Language="F#" Value="static member Field : System.Linq.Expressions.Expression * string -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Field (expression, fieldName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="fieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-1347"><see cref="T:System.Linq.Expressions.Expression" />에 이름이 <see cref="P:System.Linq.Expressions.Expression.Type" />인 필드가 포함된 <paramref name="fieldName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1347">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a field named <paramref name="fieldName" />.</span></span> <span data-ttu-id="2ed3f-1348">이 값은 정적 필드의 경우 null일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1348">This can be null for static fields.</span></span></param>
        <param name="fieldName"><span data-ttu-id="2ed3f-1349">액세스할 필드의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1349">The name of a field to be accessed.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1350">필드 이름을 통한 필드 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1350">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field given the name of the field.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1351"><see cref="T:System.Linq.Expressions.MemberExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> 속성이 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />으로 설정되고 <paramref name="expression" /> 속성이 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />이 가리키는 필드를 나타내는 <see cref="T:System.Reflection.FieldInfo" />로 설정된 <paramref name="fieldName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1351">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.FieldInfo" /> that represents the field denoted by <paramref name="fieldName" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1352"><xref:System.Linq.Expressions.Expression.Type%2A> 결과의 속성 <xref:System.Linq.Expressions.MemberExpression> 값과 같음는 <xref:System.Reflection.FieldInfo.FieldType%2A> 의 속성을 <xref:System.Reflection.FieldInfo> 가리키는 필드를 나타내는 `fieldName`.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1352">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.FieldInfo.FieldType%2A> property of the <xref:System.Reflection.FieldInfo> that represents the field denoted by `fieldName`.</span></span>  
  
 <span data-ttu-id="2ed3f-1353">이 메서드는 검색 `expression`합니다. 형식 및 이름이 있는 필드에 대 한 기본 형식 `fieldName`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1353">This method searches `expression`.Type and its base types for a field that has the name `fieldName`.</span></span> <span data-ttu-id="2ed3f-1354">Public 필드는 public이 아닌 필드를 통해 우선을 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1354">Public fields are given preference over non-public fields.</span></span> <span data-ttu-id="2ed3f-1355">이 메서드를 전달 하는 경우 일치 하는 필드를 찾으면 `expression` 하며 <xref:System.Reflection.FieldInfo> 에 해당 필드를 나타내는 <xref:System.Linq.Expressions.Expression.Field%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1355">If a matching field is found, this method passes `expression` and the <xref:System.Reflection.FieldInfo> that represents that field to <xref:System.Linq.Expressions.Expression.Field%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-1356">다음 코드 예제에는 필드 액세스를 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1356">The following code example shows how to create an expression that represents accessing a field.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#37](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#37)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#37](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#37)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-1357"><paramref name="expression" /> 또는 <paramref name="fieldName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1357"><paramref name="expression" /> or <paramref name="fieldName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-1358"><paramref name="fieldName" />.Type 또는 해당 기본 형식에 이름이 <paramref name="expression" />인 필드가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1358">No field named <paramref name="fieldName" /> is defined in <paramref name="expression" />.Type or its base types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, Type type, string fieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Field(class System.Linq.Expressions.Expression expression, class System.Type type, string fieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Field(System::Linq::Expressions::Expression ^ expression, Type ^ type, System::String ^ fieldName);" />
      <MemberSignature Language="F#" Value="static member Field : System.Linq.Expressions.Expression * Type * string -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Field (expression, type, fieldName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="fieldName" Type="System.String" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-1359">필드의 포함 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1359">The containing object of the field.</span></span> <span data-ttu-id="2ed3f-1360">이 값은 정적 필드의 경우 null일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1360">This can be null for static fields.</span></span></param>
        <param name="type"><span data-ttu-id="2ed3f-1361">필드를 포함하는 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1361">The <see cref="P:System.Linq.Expressions.Expression.Type" /> that contains the field.</span></span></param>
        <param name="fieldName"><span data-ttu-id="2ed3f-1362">액세스할 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1362">The field to be accessed.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1363">필드 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1363">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1364">만든 <see cref="T:System.Linq.Expressions.MemberExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1364">The created <see cref="T:System.Linq.Expressions.MemberExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActionType">
      <MemberSignature Language="C#" Value="public static Type GetActionType (params Type[] typeArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetActionType(class System.Type[] typeArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetActionType (ParamArray typeArgs As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetActionType(... cli::array &lt;Type ^&gt; ^ typeArgs);" />
      <MemberSignature Language="F#" Value="static member GetActionType : Type[] -&gt; Type" Usage="System.Linq.Expressions.Expression.GetActionType typeArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArgs"><span data-ttu-id="2ed3f-1365"><see cref="T:System.Type" /> 대리자 형식의 형식 인수를 지정하는 1개에서 16개의 <see langword="System.Action" /> 개체가 들어있는 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1365">An array of up to sixteen <see cref="T:System.Type" /> objects that specify the type arguments for the <see langword="System.Action" /> delegate type.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1366">특정 형식 인수가 있는 제네릭 <c>System.Action</c> 대리자 형식을 나타내는 <see cref="T:System.Type" /> 개체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1366">Creates a <see cref="T:System.Type" /> object that represents a generic <c>System.Action</c> delegate type that has specific type arguments.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1367">지정된 형식 인수가 있는 <c>System.Action</c> 대리자의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1367">The type of a <c>System.Action</c> delegate that has the specified type arguments.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1368">예를 들어 경우 요소의 `typeArgs` 형식을 나타내는 `T1…Tn`, 결과 <xref:System.Type> 개체가 생성 된 대리자 형식을 나타내는 `System.Action<T1,…,Tn>` C# 또는 `System.Action(Of T1,…,Tn)` Visual Basic의 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1368">As an example, if the elements of `typeArgs` represent the types `T1…Tn`, the resulting <xref:System.Type> object represents the constructed delegate type `System.Action<T1,…,Tn>` in C# or `System.Action(Of T1,…,Tn)` in Visual Basic.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-1369"><paramref name="typeArgs" />에 17개 이상의 요소가 포함된 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1369"><paramref name="typeArgs" /> contains more than sixteen elements.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-1370"><paramref name="typeArgs" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1370"><paramref name="typeArgs" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetDelegateType">
      <MemberSignature Language="C#" Value="public static Type GetDelegateType (params Type[] typeArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetDelegateType(class System.Type[] typeArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDelegateType (ParamArray typeArgs As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetDelegateType(... cli::array &lt;Type ^&gt; ^ typeArgs);" />
      <MemberSignature Language="F#" Value="static member GetDelegateType : Type[] -&gt; Type" Usage="System.Linq.Expressions.Expression.GetDelegateType typeArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArgs"><span data-ttu-id="2ed3f-1371">대리자의 형식 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1371">The type arguments of the delegate.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1372">특정 형식 인수가 있는 제네릭 <c>System.Func</c> 또는 <c>System.Action</c> 대리자 형식을 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" /> 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1372">Gets a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic <c>System.Func</c> or <c>System.Action</c> delegate type that has specific type arguments.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1373">대리자 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1373">The delegate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1374">마지막 형식 인수는 대리자의 반환 형식을 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1374">The last type argument determines the return type of the delegate.</span></span> <span data-ttu-id="2ed3f-1375">작업이 없거나 Func 충분히 큰 경우 사용자 지정 대리자 형식이 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1375">If no Func or Action is large enough, it will generate a custom delegate type.</span></span>  
  
 <span data-ttu-id="2ed3f-1376">Func와 마찬가지로 마지막 인수가 반환 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1376">As with Func, the last argument is the return type.</span></span> <span data-ttu-id="2ed3f-1377">작업을 생성 하려면 System.Void를 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1377">It can be set to System.Void to produce an Action.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFuncType">
      <MemberSignature Language="C#" Value="public static Type GetFuncType (params Type[] typeArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetFuncType(class System.Type[] typeArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFuncType (ParamArray typeArgs As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetFuncType(... cli::array &lt;Type ^&gt; ^ typeArgs);" />
      <MemberSignature Language="F#" Value="static member GetFuncType : Type[] -&gt; Type" Usage="System.Linq.Expressions.Expression.GetFuncType typeArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArgs"><span data-ttu-id="2ed3f-1378"><see cref="T:System.Type" /> 대리자 형식의 형식 인수를 지정하는 1개에서 17개의 <see langword="System.Func" /> 개체가 포함된 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1378">An array of one to seventeen <see cref="T:System.Type" /> objects that specify the type arguments for the <see langword="System.Func" /> delegate type.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1379">특정 형식 인수가 있는 제네릭 <c>System.Func</c> 대리자 형식을 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" /> 개체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1379">Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic <c>System.Func</c> delegate type that has specific type arguments.</span></span> <span data-ttu-id="2ed3f-1380">마지막 형식 인수는 생성된 대리자의 반환 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1380">The last type argument specifies the return type of the created delegate.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1381">지정된 형식 인수가 있는 <c>System.Func</c> 대리자의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1381">The type of a <c>System.Func</c> delegate that has the specified type arguments.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1382">`typeArgs` 하나 이상 및 최대 17 요소를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1382">`typeArgs` must contain at least one and at most seventeen elements.</span></span>  
  
 <span data-ttu-id="2ed3f-1383">예를 들어 경우 요소의 `typeArgs` 형식을 나타내는 `T1…Tn`, 결과 <xref:System.Type> 개체가 생성 된 대리자 형식을 나타내는 `System.Func<T1,…,Tn>` C# 또는 `System.Func(Of T1,…,Tn)` Visual Basic의 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1383">As an example, if the elements of `typeArgs` represent the types `T1…Tn`, the resulting <xref:System.Type> object represents the constructed delegate type `System.Func<T1,…,Tn>` in C# or `System.Func(Of T1,…,Tn)` in Visual Basic.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-1384"><paramref name="typeArgs" />에 1개 미만 또는 17개보다 많은 요소가 들어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1384"><paramref name="typeArgs" /> contains fewer than one or more than seventeen elements.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-1385"><paramref name="typeArgs" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1385"><paramref name="typeArgs" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Goto">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-1386">"go to" 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1386">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Goto (target As LabelTarget) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Goto(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberSignature Language="F#" Value="static member Goto : System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Goto target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="2ed3f-1387"><see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1387">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1388">"go to" 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1388">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1389"><see cref="T:System.Linq.Expressions.GotoExpression" />가 Goto이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 지정된 값으로 설정되며, 이동 시 대상 레이블에 null 값이 전달되는 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1389">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to the specified value, and a null value to be passed to the target label upon jumping.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2ed3f-1390">다음 예제에서는 포함 된 식을 만드는 방법을 보여 줍니다는 <xref:System.Linq.Expressions.GotoExpression> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1390">The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.GotoExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#45](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#45)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#45](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#45)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Goto (target As LabelTarget, value As Expression) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Goto(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value);" />
      <MemberSignature Language="F#" Value="static member Goto : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Goto (target, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="2ed3f-1391"><see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1391">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="value"><span data-ttu-id="2ed3f-1392">이동 시 연결된 레이블에 전달될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1392">The value that will be passed to the associated label upon jumping.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1393">"go to" 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1393">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement.</span></span> <span data-ttu-id="2ed3f-1394">이동 시 레이블에 전달되는 값을 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1394">The value passed to the label upon jumping can be specified.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1395"><see cref="T:System.Linq.Expressions.GotoExpression" />가 Goto이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, 이동 시 대상 레이블에 <paramref name="target" />가 전달되는 <paramref name="value" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1395">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Goto(System::Linq::Expressions::LabelTarget ^ target, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Goto : System.Linq.Expressions.LabelTarget * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Goto (target, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="2ed3f-1396"><see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1396">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="type"><span data-ttu-id="2ed3f-1397"><see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1397">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1398">지정된 형식을 사용하여 "go to" 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1398">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement with the specified type.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1399"><see cref="T:System.Linq.Expressions.GotoExpression" />가 Goto이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 지정된 값으로 설정되며, <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />으로 설정되고, 이동 시 대상 레이블에 null 값이 전달되는 <paramref name="type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1399">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to the specified value, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Goto(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Goto : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Goto (target, value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="type" Type="System.Type" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="2ed3f-1400"><see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1400">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="value"><span data-ttu-id="2ed3f-1401">이동 시 연결된 레이블에 전달될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1401">The value that will be passed to the associated label upon jumping.</span></span></param>
        <param name="type"><span data-ttu-id="2ed3f-1402"><see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1402">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1403">지정된 형식을 사용하여 "go to" 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1403">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement with the specified type.</span></span> <span data-ttu-id="2ed3f-1404">이동 시 레이블에 전달되는 값을 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1404">The value passed to the label upon jumping can be specified.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1405"><see cref="T:System.Linq.Expressions.GotoExpression" />가 Goto이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, <paramref name="target" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />으로 설정되고, 이동 시 대상 레이블에 <paramref name="type" />가 전달되는 <paramref name="value" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1405">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GreaterThan">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-1406">"보다 큼" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1406">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than" numeric comparison.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThan (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ GreaterThan(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member GreaterThan : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.GreaterThan (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-1407"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1407">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-1408"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1408">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1409">"보다 큼" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1409">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than" numeric comparison.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1410"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1410">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1411">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1411">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-1412"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1412">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-1413">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 속성은 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1413">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="2ed3f-1414">그렇지 않으면 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1414">Otherwise, it is `false`.</span></span> <span data-ttu-id="2ed3f-1415"><xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 항상 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1415">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="2ed3f-1416"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1416">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-1417">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1417">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-1418">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1418">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-1419">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1419">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-1420">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` "보다 큼" 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1420">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "greater than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1421">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1421">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-1422">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1422">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-1423">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1423">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-1424">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1424">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-1425">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1425">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1426">다음 두 조건을 충족 하는 경우 노드가 리프트 된 및 노드의 유형입니다 <xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1426">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="2ed3f-1427">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1427">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-1428">구현 메서드의 반환 형식은 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1428">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="2ed3f-1429">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1429">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-1430">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1430">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-1431">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1431">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="2ed3f-1432">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1432">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-1433">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1433">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-1434">다음 코드 예제에는 두 개의 정수를 비교 하는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1434">The following code example shows how to create an expression that compares two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#10)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-1435"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1435"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-1436"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 "보다 큼" 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1436">The "greater than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThan (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ GreaterThan(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member GreaterThan : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.GreaterThan (left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-1437"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1437">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-1438"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1438">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="liftToNull"><span data-ttu-id="2ed3f-1439"><see langword="true" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="true" />이고, <see langword="false" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1439"><see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-1440"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1440">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1441">"보다 큼" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1441">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than" numeric comparison.</span></span> <span data-ttu-id="2ed3f-1442">구현 메서드를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1442">The implementing method can be specified.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1443"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1443">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1444">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1444">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-1445"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1445">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-1446">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 속성은 `true` 하며 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성이 `liftToNull`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1446">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="2ed3f-1447">그렇지 않은 경우 둘 다 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1447">Otherwise, they are both `false`.</span></span> <span data-ttu-id="2ed3f-1448"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1448">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-1449">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1449">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-1450">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1450">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-1451">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1451">The following rules determine the implementing method for the operation :</span></span>  
  
-   <span data-ttu-id="2ed3f-1452">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1452">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1453">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` "보다 큼" 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1453">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "greater than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1454">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1454">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-1455">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1455">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-1456">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1456">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-1457">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1457">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-1458">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1458">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1459">다음 두 조건이 충족 되 면 노드가 리프트 된; 또한 노드 형식은 nullable <xref:System.Boolean> 하는 경우 `liftToNull` 됩니다 `true` 또는 <xref:System.Boolean> 경우 `liftToNull` 는 `false`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1459">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="2ed3f-1460">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1460">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-1461">구현 메서드의 반환 형식은 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1461">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="2ed3f-1462">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1462">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-1463">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1463">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-1464">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1464">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="2ed3f-1465">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1465">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-1466">노드의 형식이 nullable <xref:System.Boolean> 경우 `liftToNull` 됩니다 `true` 또는 <xref:System.Boolean> 경우 `liftToNull` 는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1466">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-1467"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1467"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-1468"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1468"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-1469"><paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 "보다 큼" 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1469"><paramref name="method" /> is <see langword="null" /> and the "greater than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GreaterThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-1470">"보다 크거나 같음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1470">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than or equal" numeric comparison.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ GreaterThanOrEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member GreaterThanOrEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.GreaterThanOrEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-1471"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1471">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-1472"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1472">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1473">"보다 크거나 같음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1473">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than or equal" numeric comparison.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1474"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1474">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1475">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1475">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-1476"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1476">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-1477">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 속성은 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1477">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="2ed3f-1478">그렇지 않으면 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1478">Otherwise, it is `false`.</span></span> <span data-ttu-id="2ed3f-1479"><xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 항상 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1479">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="2ed3f-1480"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1480">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-1481">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1481">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-1482">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1482">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-1483">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1483">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-1484">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` "크거나 같음" 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1484">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "greater than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1485">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1485">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-1486">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1486">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-1487">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1487">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-1488">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1488">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-1489">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1489">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1490">다음 두 조건을 충족 하는 경우 노드가 리프트 된 및 노드의 유형입니다 <xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1490">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="2ed3f-1491">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1491">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-1492">구현 메서드의 반환 형식은 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1492">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="2ed3f-1493">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1493">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-1494">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1494">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-1495">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1495">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="2ed3f-1496">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1496">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-1497">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1497">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-1498">다음 코드 예제에는 두 개의 정수를 비교 하는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1498">The following code example shows how to create an expression that compares two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#11)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-1499"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1499"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-1500"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 "보다 크거나 같음" 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1500">The "greater than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqual (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ GreaterThanOrEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member GreaterThanOrEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.GreaterThanOrEqual (left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-1501"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1501">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-1502"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1502">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="liftToNull"><span data-ttu-id="2ed3f-1503"><see langword="true" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="true" />이고, <see langword="false" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1503"><see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-1504"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1504">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1505">"보다 크거나 같음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1505">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than or equal" numeric comparison.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1506"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1506">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1507">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1507">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-1508"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1508">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-1509">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 속성은 `true` 하며 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성이 `liftToNull`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1509">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="2ed3f-1510">그렇지 않은 경우 둘 다 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1510">Otherwise, they are both `false`.</span></span> <span data-ttu-id="2ed3f-1511"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1511">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-1512">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1512">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-1513">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1513">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-1514">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1514">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-1515">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1515">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1516">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` "크거나 같음" 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1516">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "greater than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1517">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1517">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-1518">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1518">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-1519">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1519">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-1520">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1520">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-1521">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1521">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1522">다음 두 조건이 충족 되 면 노드가 리프트 된; 또한 노드 형식은 nullable <xref:System.Boolean> 하는 경우 `liftToNull` 됩니다 `true` 또는 <xref:System.Boolean> 경우 `liftToNull` 는 `false`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1522">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="2ed3f-1523">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1523">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-1524">구현 메서드의 반환 형식은 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1524">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="2ed3f-1525">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1525">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-1526">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1526">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-1527">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1527">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="2ed3f-1528">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1528">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-1529">노드의 형식이 nullable <xref:System.Boolean> 경우 `liftToNull` 됩니다 `true` 또는 <xref:System.Boolean> 경우 `liftToNull` 는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1529">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-1530"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1530"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-1531"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1531"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-1532"><paramref name="method" />가 <see langword="null" />이고 “크거나 같음" 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1532"><paramref name="method" /> is <see langword="null" /> and the "greater than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IfThen">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression IfThen (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression IfThen(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IfThen (test As Expression, ifTrue As Expression) As ConditionalExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConditionalExpression ^ IfThen(System::Linq::Expressions::Expression ^ test, System::Linq::Expressions::Expression ^ ifTrue);" />
      <MemberSignature Language="F#" Value="static member IfThen : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.ConditionalExpression" Usage="System.Linq.Expressions.Expression.IfThen (test, ifTrue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="test"><span data-ttu-id="2ed3f-1533"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1533">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</span></span></param>
        <param name="ifTrue"><span data-ttu-id="2ed3f-1534"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1534">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1535"><see cref="T:System.Linq.Expressions.ConditionalExpression" /> 문을 사용하여 조건부 블록을 나타내는 <see langword="if" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1535">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional block with an <see langword="if" /> statement.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1536"><see cref="T:System.Linq.Expressions.ConditionalExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> 및 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1536">A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, properties set to the specified values.</span></span> <span data-ttu-id="2ed3f-1537"><see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 속성은 기본 식으로 설정되고 이 메서드에서 반환되는 결과 <see cref="T:System.Linq.Expressions.ConditionalExpression" />의 형식은 <see cref="T:System.Void" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1537">The <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property is set to default expression and the type of the resulting <see cref="T:System.Linq.Expressions.ConditionalExpression" /> returned by this method is <see cref="T:System.Void" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2ed3f-1538">다음 코드 예제에는 조건부 블록을 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1538">The following code example shows how to create an expression that represents a conditional block.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#32)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IfThenElse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression IfThenElse (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression IfThenElse(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue, class System.Linq.Expressions.Expression ifFalse) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IfThenElse (test As Expression, ifTrue As Expression, ifFalse As Expression) As ConditionalExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConditionalExpression ^ IfThenElse(System::Linq::Expressions::Expression ^ test, System::Linq::Expressions::Expression ^ ifTrue, System::Linq::Expressions::Expression ^ ifFalse);" />
      <MemberSignature Language="F#" Value="static member IfThenElse : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.ConditionalExpression" Usage="System.Linq.Expressions.Expression.IfThenElse (test, ifTrue, ifFalse)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ifFalse" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="test"><span data-ttu-id="2ed3f-1539"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1539">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</span></span></param>
        <param name="ifTrue"><span data-ttu-id="2ed3f-1540"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1540">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</span></span></param>
        <param name="ifFalse"><span data-ttu-id="2ed3f-1541"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1541">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1542"><see cref="T:System.Linq.Expressions.ConditionalExpression" /> 및 <see langword="if" /> 문을 사용하여 조건부 블록을 나타내는 <see langword="else" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1542">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional block with <see langword="if" /> and <see langword="else" /> statements.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1543"><see cref="T:System.Linq.Expressions.ConditionalExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 및 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1543">A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values.</span></span> <span data-ttu-id="2ed3f-1544">이 메서드에서 반환되는 결과 <see cref="T:System.Linq.Expressions.ConditionalExpression" />의 형식은 <see cref="T:System.Void" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1544">The type of the resulting <see cref="T:System.Linq.Expressions.ConditionalExpression" /> returned by this method is <see cref="T:System.Void" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2ed3f-1545">다음 코드 예제에는 조건부 블록을 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1545">The following code example shows how to create an expression that represents a conditional block.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#33)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Increment">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-1546">값이 1씩 증가하는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1546">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incrementing of the expression value by 1.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Increment">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Increment (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Increment(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Increment(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Increment : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Increment expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-1547">증가시킬 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1547">An <see cref="T:System.Linq.Expressions.Expression" /> to increment.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1548">값이 1씩 증가하는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1548">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incrementing of the expression value by 1.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1549">증가되는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1549">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incremented expression.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1550">이 식은 작동 하며으로 전달 되는 개체의 값을 변경 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1550">This expression is functional and does not change the value of the object that is passed to it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-1551">다음 코드 예제에는 증가 작업을 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1551">The following code example shows how to create an expression that represents an increment operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#24)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Increment">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Increment (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Increment(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Increment(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Increment : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Increment (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-1552">증가시킬 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1552">An <see cref="T:System.Linq.Expressions.Expression" /> to increment.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-1553">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1553">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1554">1씩 증가하는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1554">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incrementing of the expression by 1.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1555">증가되는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1555">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incremented expression.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1556">이 식은 작동 하며으로 전달 되는 개체의 값을 변경 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1556">This expression is functional and does not change the value of the object that is passed to it.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-1557"><see cref="T:System.Linq.Expressions.InvocationExpression" />를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1557">Creates an <see cref="T:System.Linq.Expressions.InvocationExpression" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.InvocationExpression Invoke (System.Linq.Expressions.Expression expression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.InvocationExpression Invoke(class System.Linq.Expressions.Expression expression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::InvocationExpression ^ Invoke(System::Linq::Expressions::Expression ^ expression, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.InvocationExpression" Usage="System.Linq.Expressions.Expression.Invoke (expression, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.InvocationExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-1558">적용되는 대리자 또는 람다 식을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1558">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the delegate or lambda expression to be applied to.</span></span></param>
        <param name="arguments"><span data-ttu-id="2ed3f-1559">대리자 또는 람다 식이 적용되는 인수를 나타내는 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 개체가 포함된 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1559">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments that the delegate or lambda expression is applied to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1560">인수 식 목록에 대리자 또는 람다 식을 적용하는 <see cref="T:System.Linq.Expressions.InvocationExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1560">Creates an <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies a delegate or lambda expression to a list of argument expressions.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1561">지정된 대리자 또는 람다 식을 제공된 인수에 적용하는 <see cref="T:System.Linq.Expressions.InvocationExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1561">An <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies the specified delegate or lambda expression to the provided arguments.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1562">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.InvocationExpression> 나타내는 대리자의 반환 형식을 나타내는 `expression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1562">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> represents the return type of the delegate that is represented by `expression`.Type.</span></span>  
  
 <span data-ttu-id="2ed3f-1563"><xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> 결과의 속성 <xref:System.Linq.Expressions.InvocationExpression> 비어 있으면 `arguments` 는 `null`.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1563">The <xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="2ed3f-1564">동일한 요소를 포함 하는 고, 그렇지 `arguments` 그 중 일부를 제외 하 고 <xref:System.Linq.Expressions.Expression> 개체가 될 수 있습니다 *따옴표 붙은*합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1564">Otherwise, it contains the same elements as `arguments` except that some of these <xref:System.Linq.Expressions.Expression> objects may be *quoted*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ed3f-1565">대리자의 해당 매개 변수를 나타내는 경우에 요소 인용 됩니다 `expression` 유형의 <xref:System.Linq.Expressions.Expression>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1565">An element will be quoted only if the corresponding parameter of the delegate represented by `expression` is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="2ed3f-1566">요소에 래핑됩니다 인용을 <xref:System.Linq.Expressions.ExpressionType.Quote> 노드.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1566">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="2ed3f-1567">결과 노드를 <xref:System.Linq.Expressions.UnaryExpression> 해당 <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> 속성이 요소의 `arguments`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1567">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-1568">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> 메서드를는 <xref:System.Linq.Expressions.InvocationExpression> 지정 된 인수를 사용 하 여 람다 식의 호출을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1568">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.InvocationExpression> that represents the invocation of a lambda expression with specified arguments.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#6)]
 [!code-vb[System.Linq.Expressions.Expression#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-1569"><paramref name="expression" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1569"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-1570"><paramref name="expression" />.Type이 대리자 형식이나 <see cref="T:System.Linq.Expressions.Expression`1" />을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1570"><paramref name="expression" />.Type does not represent a delegate type or an <see cref="T:System.Linq.Expressions.Expression`1" />.</span></span>  
  
<span data-ttu-id="2ed3f-1571">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1571">-or-</span></span> 
<span data-ttu-id="2ed3f-1572"><paramref name="arguments" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="expression" />이 나타내는 대리자의 해당 매개 변수 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1572">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the delegate represented by <paramref name="expression" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-1573"><paramref name="arguments" />에 들어 있는 요소 수가 <paramref name="expression" />이 나타내는 대리자의 매개 변수 목록과 다른 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1573"><paramref name="arguments" /> does not contain the same number of elements as the list of parameters for the delegate represented by <paramref name="expression" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.InvocationExpression Invoke (System.Linq.Expressions.Expression expression, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.InvocationExpression Invoke(class System.Linq.Expressions.Expression expression, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::InvocationExpression ^ Invoke(System::Linq::Expressions::Expression ^ expression, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.InvocationExpression" Usage="System.Linq.Expressions.Expression.Invoke (expression, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.InvocationExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-1574">적용되는 대리자 또는 람다 식을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1574">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the delegate or lambda expression to be applied.</span></span></param>
        <param name="arguments"><span data-ttu-id="2ed3f-1575">대리자 또는 람다 식이 적용되는 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1575">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments that the delegate or lambda expression is applied to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1576">인수 식 목록에 대리자 또는 람다 식을 적용하는 <see cref="T:System.Linq.Expressions.InvocationExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1576">Creates an <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies a delegate or lambda expression to a list of argument expressions.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1577">지정된 대리자 또는 람다 식을 제공된 인수에 적용하는 <see cref="T:System.Linq.Expressions.InvocationExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1577">An <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies the specified delegate or lambda expression to the provided arguments.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1578">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.InvocationExpression> 나타내는 대리자의 반환 형식을 나타내는 `expression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1578">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> represents the return type of the delegate that is represented by `expression`.Type.</span></span>  
  
 <span data-ttu-id="2ed3f-1579"><xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> 결과의 속성 <xref:System.Linq.Expressions.InvocationExpression> 비어 있으면 `arguments` 는 `null`.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1579">The <xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="2ed3f-1580">동일한 요소를 포함 하는 고, 그렇지 `arguments` 그 중 일부를 제외 하 고 <xref:System.Linq.Expressions.Expression> 개체가 될 수 있습니다 *따옴표 붙은*합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1580">Otherwise, it contains the same elements as `arguments` except that some of these <xref:System.Linq.Expressions.Expression> objects may be *quoted*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ed3f-1581">대리자의 해당 매개 변수를 나타내는 경우에 요소 인용 됩니다 `expression` 유형의 <xref:System.Linq.Expressions.Expression>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1581">An element will be quoted only if the corresponding parameter of the delegate represented by `expression` is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="2ed3f-1582">요소에 래핑됩니다 인용을 <xref:System.Linq.Expressions.ExpressionType.Quote> 노드.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1582">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="2ed3f-1583">결과 노드를 <xref:System.Linq.Expressions.UnaryExpression> 해당 <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> 속성이 요소의 `arguments`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1583">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-1584">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> 메서드를는 <xref:System.Linq.Expressions.InvocationExpression> 지정 된 인수를 사용 하 여 람다 식의 호출을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1584">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.InvocationExpression> that represents the invocation of a lambda expression with specified arguments.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#6)]
 [!code-vb[System.Linq.Expressions.Expression#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-1585"><paramref name="expression" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1585"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-1586"><paramref name="expression" />.Type이 대리자 형식이나 <see cref="T:System.Linq.Expressions.Expression`1" />을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1586"><paramref name="expression" />.Type does not represent a delegate type or an <see cref="T:System.Linq.Expressions.Expression`1" />.</span></span>  
  
<span data-ttu-id="2ed3f-1587">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1587">-or-</span></span> 
<span data-ttu-id="2ed3f-1588"><paramref name="arguments" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="expression" />이 나타내는 대리자의 해당 매개 변수 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1588">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the delegate represented by <paramref name="expression" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-1589"><paramref name="arguments" />에 들어 있는 요소 수가 <paramref name="expression" />이 나타내는 대리자의 매개 변수 목록과 다른 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1589"><paramref name="arguments" /> does not contain the same number of elements as the list of parameters for the delegate represented by <paramref name="expression" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsFalse">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-1590">식이 false로 계산되는지 여부를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1590">Returns whether the expression evaluates to false.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsFalse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsFalse (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsFalse(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ IsFalse(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member IsFalse : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.IsFalse expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-1591">계산할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1591">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1592">식이 false로 계산되는지 여부를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1592">Returns whether the expression evaluates to false.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1593"><see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1593">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFalse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsFalse (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsFalse(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ IsFalse(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member IsFalse : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.IsFalse (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-1594">계산할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1594">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-1595">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1595">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1596">식이 false로 계산되는지 여부를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1596">Returns whether the expression evaluates to false.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1597"><see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1597">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsTrue">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-1598">식이 true로 계산되는지 여부를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1598">Returns whether the expression evaluates to true.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsTrue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsTrue (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsTrue(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ IsTrue(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member IsTrue : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.IsTrue expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-1599">계산할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1599">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1600">식이 true로 계산되는지 여부를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1600">Returns whether the expression evaluates to true.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1601"><see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1601">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTrue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsTrue (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsTrue(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ IsTrue(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member IsTrue : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.IsTrue (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-1602">계산할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1602">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-1603">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1603">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1604">식이 true로 계산되는지 여부를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1604">Returns whether the expression evaluates to true.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1605"><see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1605">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Label">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-1606">레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelTarget" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1606">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Label () As LabelTarget" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelTarget ^ Label();" />
      <MemberSignature Language="F#" Value="static member Label : unit -&gt; System.Linq.Expressions.LabelTarget" Usage="System.Linq.Expressions.Expression.Label " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2ed3f-1607">이름이 없는 void 형식의 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelTarget" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1607">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with void type and no name.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1608">새 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1608">The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2ed3f-1609">다음 예제에서는 포함 된 식을 만드는 방법을 보여 줍니다는 <xref:System.Linq.Expressions.LabelTarget> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1609">The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.LabelTarget> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#43)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#43)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelExpression Label (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelExpression Label(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Label (target As LabelTarget) As LabelExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelExpression ^ Label(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberSignature Language="F#" Value="static member Label : System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.LabelExpression" Usage="System.Linq.Expressions.Expression.Label target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="2ed3f-1610">이 <see cref="T:System.Linq.Expressions.LabelTarget" />과 연결될 <see cref="T:System.Linq.Expressions.LabelExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1610">The <see cref="T:System.Linq.Expressions.LabelTarget" /> which this <see cref="T:System.Linq.Expressions.LabelExpression" /> will be associated with.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1611">기본값이 없는 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1611">Creates a <see cref="T:System.Linq.Expressions.LabelExpression" /> representing a label without a default value.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1612">기본값이 없는 <see cref="T:System.Linq.Expressions.LabelExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1612">A <see cref="T:System.Linq.Expressions.LabelExpression" /> without a default value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Label (name As String) As LabelTarget" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelTarget ^ Label(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member Label : string -&gt; System.Linq.Expressions.LabelTarget" Usage="System.Linq.Expressions.Expression.Label name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="2ed3f-1613">레이블의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1613">The name of the label.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1614">void 형식과 지정된 이름을 사용하여 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelTarget" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1614">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with void type and the given name.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1615">새 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1615">The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelTarget ^ Label(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Label : Type -&gt; System.Linq.Expressions.LabelTarget" Usage="System.Linq.Expressions.Expression.Label type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="2ed3f-1616">레이블로 이동할 때 전달되는 값의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1616">The type of value that is passed when jumping to the label.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1617">지정된 유형을 사용하여 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelTarget" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1617">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with the given type.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1618">새 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1618">The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2ed3f-1619">다음 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Linq.Expressions.LabelTarget> 루프 식에는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1619">The following example demonstrates how to use a <xref:System.Linq.Expressions.LabelTarget> object in a loop expression.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#44)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#44)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelExpression Label (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelExpression Label(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Label (target As LabelTarget, defaultValue As Expression) As LabelExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelExpression ^ Label(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ defaultValue);" />
      <MemberSignature Language="F#" Value="static member Label : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.LabelExpression" Usage="System.Linq.Expressions.Expression.Label (target, defaultValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="defaultValue" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="2ed3f-1620">이 <see cref="T:System.Linq.Expressions.LabelTarget" />과 연결될 <see cref="T:System.Linq.Expressions.LabelExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1620">The <see cref="T:System.Linq.Expressions.LabelTarget" /> which this <see cref="T:System.Linq.Expressions.LabelExpression" /> will be associated with.</span></span></param>
        <param name="defaultValue"><span data-ttu-id="2ed3f-1621">일반 제어 흐름을 통해 레이블에 접근하는 경우 이 <see cref="T:System.Linq.Expressions.LabelExpression" />의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1621">The value of this <see cref="T:System.Linq.Expressions.LabelExpression" /> when the label is reached through regular control flow.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1622">지정된 기본값을 사용하여 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1622">Creates a <see cref="T:System.Linq.Expressions.LabelExpression" /> representing a label with the given default value.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1623">지정된 기본값이 있는 <see cref="T:System.Linq.Expressions.LabelExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1623">A <see cref="T:System.Linq.Expressions.LabelExpression" /> with the given default value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label (Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label(class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelTarget ^ Label(Type ^ type, System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member Label : Type * string -&gt; System.Linq.Expressions.LabelTarget" Usage="System.Linq.Expressions.Expression.Label (type, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="2ed3f-1624">레이블로 이동할 때 전달되는 값의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1624">The type of value that is passed when jumping to the label.</span></span></param>
        <param name="name"><span data-ttu-id="2ed3f-1625">레이블의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1625">The name of the label.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1626">지정된 형식과 이름을 사용하여 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelTarget" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1626">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with the given type and name.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1627">새 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1627">The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Lambda">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-1628">람다 식을 나타내는 식 트리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1628">Creates an expression tree that represents a lambda expression.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="2ed3f-1629"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1629">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="parameters"><span data-ttu-id="2ed3f-1630"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1630">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1631">먼저 식 본문에서 대리자 형식을 생성하고 매개 변수 식의 열거 가능한 컬렉션을 생성하여 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1631">Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type from the expression body, and an enumerable collection of parameter expressions.</span></span> <span data-ttu-id="2ed3f-1632">컴파일 시간에 대리자 형식을 알 수 없을 때 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1632">It can be used when the delegate type is not known at compile time.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1633"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1633">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, ParamArray parameters As ParameterExpression()) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="2ed3f-1634"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1634">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="parameters"><span data-ttu-id="2ed3f-1635"><see cref="T:System.Linq.Expressions.ParameterExpression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1635">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1636">먼저 식 본문에서 대리자 형식을 생성하고 매개 변수 식의 배열을 생성하여 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1636">Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type from the expression body, and an array of parameter expressions.</span></span> <span data-ttu-id="2ed3f-1637">컴파일 시간에 대리자 형식을 알 수 없을 때 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1637">It can be used when the delegate type is not known at compile time.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1638"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1638">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1639">`parameters` 매개 변수 16 개 이상의 요소가 없어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1639">The `parameters` parameter must not have more than sixteen elements.</span></span>  
  
 <span data-ttu-id="2ed3f-1640">요소의 `parameters` 같아야 참조 매개 변수 식에 `body`입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1640">The elements of `parameters` must be reference equal to the parameter expressions in `body`.</span></span>  
  
 <span data-ttu-id="2ed3f-1641">이 메서드 중 하나를 사용 하 여 적절 한 대리자 형식을 생성 합니다 `System.Func` 제네릭 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1641">This method constructs an appropriate delegate type from one of the `System.Func` generic delegates.</span></span> <span data-ttu-id="2ed3f-1642">그런 다음 중 하나에 대리자 형식에 전달 합니다 <xref:System.Linq.Expressions.ExpressionType.Lambda> 를 만드는 팩터리 메서드가 <xref:System.Linq.Expressions.LambdaExpression>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1642">It then passes the delegate type to one of the <xref:System.Linq.Expressions.ExpressionType.Lambda> factory methods to create a <xref:System.Linq.Expressions.LambdaExpression>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-1643"><paramref name="body" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1643"><paramref name="body" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2ed3f-1644">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1644">-or-</span></span> 
<span data-ttu-id="2ed3f-1645"><paramref name="parameters" />의 하나 이상의 요소가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1645">One or more elements of <paramref name="parameters" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-1646"><paramref name="parameters" />에 17개 이상의 요소가 포함된 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1646"><paramref name="parameters" /> contains more than sixteen elements.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * bool * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (body, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="tailCall" Type="System.Boolean" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="2ed3f-1647"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1647">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="tailCall"><span data-ttu-id="2ed3f-1648">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1648">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span></span></param>
        <param name="parameters"><span data-ttu-id="2ed3f-1649"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1649">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1650">먼저 식 본문에서 대리자 형식을 생성하고 마무리 호출 최적화 적용 여부를 나타내는 매개 변수와 매개 변수 식의 열거 가능한 컬렉션을 생성하여 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1650">Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type from the expression body, a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions.</span></span> <span data-ttu-id="2ed3f-1651">컴파일 시간에 대리자 형식을 알 수 없을 때 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1651">It can be used when the delegate type is not known at compile time.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1652"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1652">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, bool tailCall, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, bool tailCall, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, bool tailCall, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * bool * System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (body, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="tailCall" Type="System.Boolean" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="2ed3f-1653"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1653">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="tailCall"><span data-ttu-id="2ed3f-1654">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1654">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span></span></param>
        <param name="parameters"><span data-ttu-id="2ed3f-1655"><see cref="T:System.Linq.Expressions.ParameterExpression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 개체가 포함된 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1655">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1656">먼저 식 본문에서 대리자 형식을 생성하고 마무리 호출 최적화 적용 여부를 나타내는 매개 변수와 매개 변수 식의 배열을 생성하여 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1656">Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type from the expression body, a parameter that indicates whether tail call optimization will be applied, and an array of parameter expressions.</span></span> <span data-ttu-id="2ed3f-1657">컴파일 시간에 대리자 형식을 알 수 없을 때 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1657">It can be used when the delegate type is not known at compile time.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1658"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1658">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, string name, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, name As String, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, System::String ^ name, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * string * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (body, name, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="2ed3f-1659"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1659">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="name"><span data-ttu-id="2ed3f-1660">람다의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1660">The name for the lambda.</span></span> <span data-ttu-id="2ed3f-1661">디버그 정보를 내보내는 데 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1661">Used for emitting debug information.</span></span></param>
        <param name="parameters"><span data-ttu-id="2ed3f-1662"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1662">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1663">먼저 식 본문에서 대리자 형식을 생성하고 람다 이름과 매개 변수 식의 열거 가능한 컬렉션을 생성하여 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1663">Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type from the expression body, the name for the lambda, and an enumerable collection of parameter expressions.</span></span> <span data-ttu-id="2ed3f-1664">컴파일 시간에 대리자 형식을 알 수 없을 때 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1664">It can be used when the delegate type is not known at compile time.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1665"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1665">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : Type * System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (delegateType, body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="2ed3f-1666">람다에 대한 대리자 시그니처를 나타내는 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1666">A <see cref="T:System.Type" /> that represents a delegate signature for the lambda.</span></span></param>
        <param name="body"><span data-ttu-id="2ed3f-1667"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1667">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="parameters"><span data-ttu-id="2ed3f-1668"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1668">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1669">매개 변수식의 열거 가능한 컬렉션을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1669">Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> where the delegate type is known at compile time, with an enumerable collection of parameter expressions.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1670"><see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />이고 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 속성이 지정된 값으로 설정된 람다 식을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1670">An object that represents a lambda expression which has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1671">이 함수에서 반환 되는 개체가 형식의 <xref:System.Linq.Expressions.Expression%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1671">The object that is returned from this function is of type <xref:System.Linq.Expressions.Expression%601>.</span></span> <span data-ttu-id="2ed3f-1672"><xref:System.Linq.Expressions.LambdaExpression> 형식 람다 식의 구체적인 종류는 컴파일 시간에 알 수 없으므로 반환 되는 개체를 나타내는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1672">The <xref:System.Linq.Expressions.LambdaExpression> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.</span></span>  
  
 <span data-ttu-id="2ed3f-1673">가 나타내는 대리자 형식에 대 한 매개 변수 개수`delegateType` 의 길이가 같아야 `parameters`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1673">The number of parameters for the delegate type represented by`delegateType` must equal the length of `parameters`.</span></span>  
  
 <span data-ttu-id="2ed3f-1674">요소의 `parameters` 같아야 참조 매개 변수 식에 `body`입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1674">The elements of `parameters` must be reference equal to the parameter expressions in `body`.</span></span>  
  
 <span data-ttu-id="2ed3f-1675">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 개체의 속성이 `delegateType`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1675">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object is equal to `delegateType`.</span></span> <span data-ttu-id="2ed3f-1676">하는 경우 `parameters` 됩니다 `null`, <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> 결과 개체의 속성은 빈 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1676">If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-1677">다음 예제에서는 전달된 된 인수에 1을 추가 하는 람다 식을 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1677">The following example demonstrates how to create an expression that represents a lambda expression that adds 1 to the passed argument.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#42](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#42)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-1678"><paramref name="delegateType" /> 또는 <paramref name="body" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1678"><paramref name="delegateType" /> or <paramref name="body" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2ed3f-1679">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1679">-or-</span></span> 
<span data-ttu-id="2ed3f-1680"><paramref name="parameters" />에서 하나 이상의 요소가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1680">One or more elements in <paramref name="parameters" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-1681"><paramref name="delegateType" />이 대리자 형식을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1681"><paramref name="delegateType" /> does not represent a delegate type.</span></span>  
  
<span data-ttu-id="2ed3f-1682">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1682">-or-</span></span> 
 <span data-ttu-id="2ed3f-1683"><paramref name="body" />.Type이 나타내는 형식을 <paramref name="delegateType" />이 나타내는 대리자 형식의 반환 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1683"><paramref name="body" />.Type represents a type that is not assignable to the return type of the delegate type represented by <paramref name="delegateType" />.</span></span>  
  
<span data-ttu-id="2ed3f-1684">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1684">-or-</span></span> 
 <span data-ttu-id="2ed3f-1685"><paramref name="parameters" />에 들어 있는 요소 수가 <paramref name="delegateType" />이 나타내는 대리자 형식의 매개 변수 목록과 다른 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1685"><paramref name="parameters" /> does not contain the same number of elements as the list of parameters for the delegate type represented by <paramref name="delegateType" />.</span></span>  
  
<span data-ttu-id="2ed3f-1686">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1686">-or-</span></span> 
<span data-ttu-id="2ed3f-1687"><paramref name="parameters" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="delegateType" />이 나타내는 대리자 형식의 해당 매개 변수 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1687">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of the delegate type represented by <paramref name="delegateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, ParamArray parameters As ParameterExpression()) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : Type * System.Linq.Expressions.Expression * System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (delegateType, body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="2ed3f-1688">람다에 대한 대리자 시그니처를 나타내는 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1688">A <see cref="T:System.Type" /> that represents a delegate signature for the lambda.</span></span></param>
        <param name="body"><span data-ttu-id="2ed3f-1689"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1689">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="parameters"><span data-ttu-id="2ed3f-1690"><see cref="T:System.Linq.Expressions.ParameterExpression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1690">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1691">매개 변수 식의 배열을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1691">Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> where the delegate type is known at compile time, with an array of parameter expressions.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1692"><see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />이고 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 속성이 지정된 값으로 설정된 람다 식을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1692">An object that represents a lambda expression which has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1693">이 함수에서 반환 되는 개체가 형식의 <xref:System.Linq.Expressions.Expression%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1693">The object that is returned from this function is of type <xref:System.Linq.Expressions.Expression%601>.</span></span> <span data-ttu-id="2ed3f-1694"><xref:System.Linq.Expressions.LambdaExpression> 형식 람다 식의 구체적인 종류는 컴파일 시간에 알 수 없으므로 반환 되는 개체를 나타내는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1694">The <xref:System.Linq.Expressions.LambdaExpression> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.</span></span>  
  
 <span data-ttu-id="2ed3f-1695">가 나타내는 대리자 형식에 대 한 매개 변수 개수 `delegateType` 의 길이가 같아야 `parameters`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1695">The number of parameters for the delegate type represented by `delegateType` must equal the length of `parameters`.</span></span>  
  
 <span data-ttu-id="2ed3f-1696">요소의 `parameters` 같아야 참조 매개 변수 식에 `body`입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1696">The elements of `parameters` must be reference equal to the parameter expressions in `body`.</span></span>  
  
 <span data-ttu-id="2ed3f-1697">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 개체의 속성이 `delegateType`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1697">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object is equal to `delegateType`.</span></span> <span data-ttu-id="2ed3f-1698">하는 경우 `parameters` 됩니다 `null`, <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> 결과 개체의 속성은 빈 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1698">If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-1699"><paramref name="delegateType" /> 또는 <paramref name="body" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1699"><paramref name="delegateType" /> or <paramref name="body" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2ed3f-1700">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1700">-or-</span></span> 
<span data-ttu-id="2ed3f-1701"><paramref name="parameters" />에서 하나 이상의 요소가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1701">One or more elements in <paramref name="parameters" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-1702"><paramref name="delegateType" />이 대리자 형식을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1702"><paramref name="delegateType" /> does not represent a delegate type.</span></span>  
  
<span data-ttu-id="2ed3f-1703">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1703">-or-</span></span> 
 <span data-ttu-id="2ed3f-1704"><paramref name="body" />.Type이 나타내는 형식을 <paramref name="delegateType" />이 나타내는 대리자 형식의 반환 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1704"><paramref name="body" />.Type represents a type that is not assignable to the return type of the delegate type represented by <paramref name="delegateType" />.</span></span>  
  
<span data-ttu-id="2ed3f-1705">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1705">-or-</span></span> 
 <span data-ttu-id="2ed3f-1706"><paramref name="parameters" />에 들어 있는 요소 수가 <paramref name="delegateType" />이 나타내는 대리자 형식의 매개 변수 목록과 다른 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1706"><paramref name="parameters" /> does not contain the same number of elements as the list of parameters for the delegate type represented by <paramref name="delegateType" />.</span></span>  
  
<span data-ttu-id="2ed3f-1707">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1707">-or-</span></span> 
<span data-ttu-id="2ed3f-1708"><paramref name="parameters" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="delegateType" />이 나타내는 대리자 형식의 해당 매개 변수 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1708">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of the delegate type represented by <paramref name="delegateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, string name, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, name As String, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, System::String ^ name, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * string * bool * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (body, name, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="tailCall" Type="System.Boolean" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="2ed3f-1709"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1709">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="name"><span data-ttu-id="2ed3f-1710">람다의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1710">The name for the lambda.</span></span> <span data-ttu-id="2ed3f-1711">디버그 정보를 내보내는 데 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1711">Used for emitting debug information.</span></span></param>
        <param name="tailCall"><span data-ttu-id="2ed3f-1712">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1712">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span></span></param>
        <param name="parameters"><span data-ttu-id="2ed3f-1713"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1713">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1714">먼저 식 본문에서 대리자 형식을 생성하고 람다 이름, 마무리 호출 최적화 적용 여부를 나타내는 매개 변수 및 매개 변수 식의 열거 가능한 컬렉션을 생성하여 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1714">Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type from the expression body, the name for the lambda, a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions.</span></span> <span data-ttu-id="2ed3f-1715">컴파일 시간에 대리자 형식을 알 수 없을 때 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1715">It can be used when the delegate type is not known at compile time.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1716"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1716">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : Type * System.Linq.Expressions.Expression * bool * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (delegateType, body, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="tailCall" Type="System.Boolean" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="2ed3f-1717">람다에 대한 대리자 시그니처를 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1717">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</span></span></param>
        <param name="body"><span data-ttu-id="2ed3f-1718"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1718">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="tailCall"><span data-ttu-id="2ed3f-1719">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1719">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span></span></param>
        <param name="parameters"><span data-ttu-id="2ed3f-1720"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1720">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1721">마무리 호출 최적화 적용 여부를 나타내는 매개 변수와 매개 변수 식의 열거 가능한 컬렉션을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1721">Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> where the delegate type is known at compile time, with a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1722"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1722">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, bool tailCall, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, bool tailCall, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, bool tailCall, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : Type * System.Linq.Expressions.Expression * bool * System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (delegateType, body, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="tailCall" Type="System.Boolean" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="2ed3f-1723">람다에 대한 대리자 시그니처를 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1723">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</span></span></param>
        <param name="body"><span data-ttu-id="2ed3f-1724"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1724">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="tailCall"><span data-ttu-id="2ed3f-1725">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1725">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span></span></param>
        <param name="parameters"><span data-ttu-id="2ed3f-1726"><see cref="T:System.Linq.Expressions.ParameterExpression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 개체가 포함된 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1726">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1727">마무리 호출 최적화 적용 여부를 나타내는 매개 변수 및 매개 변수 식의 배열을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1727">Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> where the delegate type is known at compile time, with a parameter that indicates whether tail call optimization will be applied, and an array of parameter expressions.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1728"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1728">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, string name, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, name As String, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, System::String ^ name, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : Type * System.Linq.Expressions.Expression * string * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (delegateType, body, name, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="name" Type="System.String" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="2ed3f-1729">람다에 대한 대리자 시그니처를 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1729">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</span></span></param>
        <param name="body"><span data-ttu-id="2ed3f-1730"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1730">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="name"><span data-ttu-id="2ed3f-1731">람다의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1731">The name for the lambda.</span></span> <span data-ttu-id="2ed3f-1732">디버그 정보를 내보내는 데 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1732">Used for emitting debug information.</span></span></param>
        <param name="parameters"><span data-ttu-id="2ed3f-1733"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1733">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1734">람다 이름과 매개 변수식의 열거 가능한 컬렉션을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1734">Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> where the delegate type is known at compile time, with the name for the lambda, and an enumerable collection of parameter expressions.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1735"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1735">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, string name, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, name As String, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, System::String ^ name, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : Type * System.Linq.Expressions.Expression * string * bool * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (delegateType, body, name, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="name" Type="System.String" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="tailCall" Type="System.Boolean" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="2ed3f-1736">람다에 대한 대리자 시그니처를 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1736">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</span></span></param>
        <param name="body"><span data-ttu-id="2ed3f-1737"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1737">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="name"><span data-ttu-id="2ed3f-1738">람다의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1738">The name for the lambda.</span></span> <span data-ttu-id="2ed3f-1739">디버그 정보를 내보내는 데 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1739">Used for emitting debug information.</span></span></param>
        <param name="tailCall"><span data-ttu-id="2ed3f-1740">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1740">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span></span></param>
        <param name="parameters"><span data-ttu-id="2ed3f-1741"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1741">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1742">람다 이름, 마무리 호출 최적화 적용 여부를 나타내는 매개 변수 및 매개 변수 식의 열거 가능한 컬렉션을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1742">Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> where the delegate type is known at compile time, with the name for the lambda, a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1743"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1743">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="System.Linq.Expressions.Expression.Lambda (body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate"><span data-ttu-id="2ed3f-1744">대리자 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1744">A delegate type.</span></span></typeparam>
        <param name="body"><span data-ttu-id="2ed3f-1745"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1745">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="parameters"><span data-ttu-id="2ed3f-1746"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1746">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1747">매개 변수식의 열거 가능한 컬렉션을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.Expression`1" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1747">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time, with an enumerable collection of parameter expressions.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1748"><see cref="T:System.Linq.Expressions.Expression`1" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1748">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1749">대리자 형식에 대 한 매개 변수 개수 `TDelegate` 의 요소 수와 같아야 `parameters`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1749">The number of parameters for the delegate type `TDelegate` must equal the number of elements in `parameters`.</span></span>  
  
 <span data-ttu-id="2ed3f-1750">요소의 `parameters` 같아야 참조 매개 변수 식에 `body`입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1750">The elements of `parameters` must be reference equal to the parameter expressions in `body`.</span></span>  
  
 <span data-ttu-id="2ed3f-1751">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 개체의 속성 형식을 나타내는 `TDelegate`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1751">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object represents the type `TDelegate`.</span></span> <span data-ttu-id="2ed3f-1752">하는 경우 `parameters` 됩니다 `null`, <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> 결과 개체의 속성은 빈 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1752">If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-1753"><paramref name="body" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1753"><paramref name="body" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2ed3f-1754">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1754">-or-</span></span> 
<span data-ttu-id="2ed3f-1755"><paramref name="parameters" />에서 하나 이상의 요소가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1755">One or more elements in <paramref name="parameters" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-1756"><paramref name="TDelegate" />가 대리자 형식이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1756"><paramref name="TDelegate" /> is not a delegate type.</span></span>  
  
<span data-ttu-id="2ed3f-1757">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1757">-or-</span></span> 
 <span data-ttu-id="2ed3f-1758"><paramref name="body" />.Type이 나타내는 형식을 <paramref name="TDelegate" />의 반환 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1758"><paramref name="body" />.Type represents a type that is not assignable to the return type of <paramref name="TDelegate" />.</span></span>  
  
<span data-ttu-id="2ed3f-1759">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1759">-or-</span></span> 
 <span data-ttu-id="2ed3f-1760"><paramref name="parameters" />에 들어 있는 요소 수가 <paramref name="TDelegate" />의 매개 변수 목록과 다른 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1760"><paramref name="parameters" /> does not contain the same number of elements as the list of parameters for <paramref name="TDelegate" />.</span></span>  
  
<span data-ttu-id="2ed3f-1761">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1761">-or-</span></span> 
<span data-ttu-id="2ed3f-1762"><paramref name="parameters" />의 해당 매개 변수 형식에서 <paramref name="TDelegate" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1762">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of <paramref name="TDelegate" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, ParamArray parameters As ParameterExpression()) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="System.Linq.Expressions.Expression.Lambda (body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TDelegate"><span data-ttu-id="2ed3f-1763">대리자 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1763">A delegate type.</span></span></typeparam>
        <param name="body"><span data-ttu-id="2ed3f-1764"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1764">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="parameters"><span data-ttu-id="2ed3f-1765"><see cref="T:System.Linq.Expressions.ParameterExpression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1765">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1766">매개 변수 식의 배열을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.Expression`1" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1766">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time, with an array of parameter expressions.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1767"><see cref="T:System.Linq.Expressions.Expression`1" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1767">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1768">대리자 형식에 대 한 매개 변수 개수 `TDelegate` 의 요소 수와 같아야 `parameters`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1768">The number of parameters for the delegate type `TDelegate` must equal the number of elements in `parameters`.</span></span>  
  
 <span data-ttu-id="2ed3f-1769">요소의 `parameters` 같아야 참조 매개 변수 식에`body`입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1769">The elements of `parameters` must be reference equal to the parameter expressions in`body`.</span></span>  
  
 <span data-ttu-id="2ed3f-1770">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 개체의 속성 형식을 나타내는 `TDelegate`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1770">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object represents the type `TDelegate`.</span></span> <span data-ttu-id="2ed3f-1771">하는 경우 `parameters` 됩니다 `null`, <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> 결과 개체의 속성은 빈 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1771">If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-1772"><paramref name="body" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1772"><paramref name="body" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2ed3f-1773">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1773">-or-</span></span> 
<span data-ttu-id="2ed3f-1774"><paramref name="parameters" />에서 하나 이상의 요소가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1774">One or more elements in <paramref name="parameters" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-1775"><paramref name="TDelegate" />가 대리자 형식이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1775"><paramref name="TDelegate" /> is not a delegate type.</span></span>  
  
<span data-ttu-id="2ed3f-1776">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1776">-or-</span></span> 
 <span data-ttu-id="2ed3f-1777"><paramref name="body" />.Type이 나타내는 형식을 <paramref name="TDelegate" />의 반환 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1777"><paramref name="body" />.Type represents a type that is not assignable to the return type of <paramref name="TDelegate" />.</span></span>  
  
<span data-ttu-id="2ed3f-1778">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1778">-or-</span></span> 
 <span data-ttu-id="2ed3f-1779"><paramref name="parameters" />에 들어 있는 요소 수가 <paramref name="TDelegate" />의 매개 변수 목록과 다른 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1779"><paramref name="parameters" /> does not contain the same number of elements as the list of parameters for <paramref name="TDelegate" />.</span></span>  
  
<span data-ttu-id="2ed3f-1780">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1780">-or-</span></span> 
<span data-ttu-id="2ed3f-1781"><paramref name="parameters" />의 해당 매개 변수 형식에서 <paramref name="TDelegate" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1781">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of <paramref name="TDelegate" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * bool * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="System.Linq.Expressions.Expression.Lambda (body, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="tailCall" Type="System.Boolean" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate"><span data-ttu-id="2ed3f-1782">대리자 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1782">The delegate type.</span></span></typeparam>
        <param name="body"><span data-ttu-id="2ed3f-1783"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1783">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="tailCall"><span data-ttu-id="2ed3f-1784">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1784">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span></span></param>
        <param name="parameters"><span data-ttu-id="2ed3f-1785"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1785">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1786">마무리 호출 최적화 적용 여부를 나타내는 매개 변수와 매개 변수 식의 열거 가능한 컬렉션을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.Expression`1" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1786">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time, with a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1787"><see cref="T:System.Linq.Expressions.Expression`1" /> 속성이 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1787">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, bool tailCall, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, bool tailCall, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, bool tailCall, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * bool * System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="System.Linq.Expressions.Expression.Lambda (body, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="tailCall" Type="System.Boolean" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TDelegate"><span data-ttu-id="2ed3f-1788">대리자 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1788">The delegate type.</span></span></typeparam>
        <param name="body"><span data-ttu-id="2ed3f-1789"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1789">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="tailCall"><span data-ttu-id="2ed3f-1790">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1790">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span></span></param>
        <param name="parameters"><span data-ttu-id="2ed3f-1791"><see cref="T:System.Linq.Expressions.ParameterExpression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 개체가 포함된 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1791">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1792">마무리 호출 최적화 적용 여부를 나타내는 매개 변수 및 매개 변수 식의 배열을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.Expression`1" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1792">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time, with a parameter that indicates whether tail call optimization will be applied, and an array of parameter expressions.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1793"><see cref="T:System.Linq.Expressions.Expression`1" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1793">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, string name, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, name As String, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, System::String ^ name, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * string * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="System.Linq.Expressions.Expression.Lambda (body, name, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate"><span data-ttu-id="2ed3f-1794">대리자 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1794">The delegate type.</span></span></typeparam>
        <param name="body"><span data-ttu-id="2ed3f-1795"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1795">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="name"><span data-ttu-id="2ed3f-1796">람다의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1796">The name of the lambda.</span></span> <span data-ttu-id="2ed3f-1797">디버깅 정보를 생성하는 데 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1797">Used for generating debugging information.</span></span></param>
        <param name="parameters"><span data-ttu-id="2ed3f-1798"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1798">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1799">람다 이름과 매개 변수식의 열거 가능한 컬렉션을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.Expression`1" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1799">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time, with the name for the lambda, and an enumerable collection of parameter expressions.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1800"><see cref="T:System.Linq.Expressions.Expression`1" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1800">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, string name, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, name As String, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, System::String ^ name, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * string * bool * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="System.Linq.Expressions.Expression.Lambda (body, name, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="tailCall" Type="System.Boolean" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate"><span data-ttu-id="2ed3f-1801">대리자 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1801">The delegate type.</span></span></typeparam>
        <param name="body"><span data-ttu-id="2ed3f-1802"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1802">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="name"><span data-ttu-id="2ed3f-1803">람다의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1803">The name of the lambda.</span></span> <span data-ttu-id="2ed3f-1804">디버깅 정보를 생성하는 데 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1804">Used for generating debugging info.</span></span></param>
        <param name="tailCall"><span data-ttu-id="2ed3f-1805">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1805">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span></span></param>
        <param name="parameters"><span data-ttu-id="2ed3f-1806"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1806">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1807">람다 이름, 마무리 호출 최적화 적용 여부를 나타내는 매개 변수 및 매개 변수 식의 열거 가능한 컬렉션을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.Expression`1" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1807">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time, with the name for the lambda, a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1808"><see cref="T:System.Linq.Expressions.Expression`1" /> 속성이 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1808">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="LeftShift">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-1809">비트 왼쪽 시프트 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1809">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LeftShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShift (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShift(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member LeftShift : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LeftShift (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-1810"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1810">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-1811"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1811">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1812">비트 왼쪽 시프트 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1812">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1813"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1813">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1814">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1814">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-1815"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1815">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-1816">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1816">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-1817">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1817">Otherwise, they are `false`.</span></span> <span data-ttu-id="2ed3f-1818"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1818">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-1819">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1819">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-1820">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1820">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-1821">다음 규칙은 선택한 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1821">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-1822">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 왼쪽 시프트 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1822">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the left-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1823">그렇지 않은 경우, `left`합니다. 형식은 정수 계열 형식 (중 하나 <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>를 <xref:System.UInt32>, <xref:System.Int64>를 <xref:System.UInt64>, 또는 해당 nullable 형식) 및 `right`합니다. 형식은 <xref:System.Int32>의 메서드 구현은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1823">Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-1824">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1824">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-1825">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1825">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-1826">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1826">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-1827">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1827">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1828">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1828">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-1829">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1829">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-1830">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1830">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-1831">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1831">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-1832">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1832">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-1833">노드의 유형 미리 정의 된 왼쪽 시프트 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1833">The type of the node is the result type of the predefined left-shift operator.</span></span>  
  
-   <span data-ttu-id="2ed3f-1834">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1834">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-1835">노드의 유형 미리 정의 된 왼쪽 시프트 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1835">The type of the node is the nullable type that corresponds to the result type of the predefined left-shift operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-1836"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1836"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-1837"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 왼쪽 시프트 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1837">The left-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LeftShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShift (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShift(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member LeftShift : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LeftShift (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-1838"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1838">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-1839"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1839">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-1840"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1840">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1841">비트 왼쪽 시프트 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1841">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1842"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1842">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1843">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1843">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-1844"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1844">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-1845">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1845">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-1846">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1846">Otherwise, they are `false`.</span></span> <span data-ttu-id="2ed3f-1847"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1847">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-1848">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1848">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-1849">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1849">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-1850">다음 규칙은 선택한 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1850">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-1851">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 노드에 대 한 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1851">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="2ed3f-1852">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 왼쪽 시프트 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1852">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the left-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1853">그렇지 않은 경우, `left`합니다. 형식은 정수 계열 형식 (중 하나 <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>를 <xref:System.UInt32>, <xref:System.Int64>를 <xref:System.UInt64>, 또는 해당 nullable 형식) 및 `right`합니다. 형식은 <xref:System.Int32>의 메서드 구현은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1853">Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-1854">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1854">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-1855">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1855">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-1856">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1856">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-1857">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1857">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1858">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1858">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-1859">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1859">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-1860">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1860">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-1861">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1861">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-1862">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1862">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-1863">노드의 유형 미리 정의 된 왼쪽 시프트 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1863">The type of the node is the result type of the predefined left-shift operator.</span></span>  
  
-   <span data-ttu-id="2ed3f-1864">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1864">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-1865">노드의 유형 미리 정의 된 왼쪽 시프트 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1865">The type of the node is the nullable type that corresponds to the result type of the predefined left-shift operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-1866"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1866"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-1867"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1867"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-1868"><paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 왼쪽 시프트 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1868"><paramref name="method" /> is <see langword="null" /> and the left-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="LeftShiftAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-1869">비트 왼쪽 시프트 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1869">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LeftShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShiftAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member LeftShiftAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LeftShiftAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-1870"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1870">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-1871"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1871">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1872">비트 왼쪽 시프트 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1872">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1873"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1873">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShiftAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member LeftShiftAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LeftShiftAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-1874"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1874">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-1875"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1875">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-1876"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1876">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1877">비트 왼쪽 시프트 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1877">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1878"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1878">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShiftAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member LeftShiftAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LeftShiftAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-1879"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1879">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-1880"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1880">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-1881"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1881">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="2ed3f-1882"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1882">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1883">비트 왼쪽 시프트 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1883">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1884"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1884">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="LessThan">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-1885">"보다 작음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1885">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than" numeric comparison.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThan (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LessThan(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member LessThan : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LessThan (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-1886"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1886">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-1887"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1887">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1888">"보다 작음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1888">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than" numeric comparison.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1889"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1889">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1890">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1890">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-1891"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1891">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-1892">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 속성은 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1892">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="2ed3f-1893">그렇지 않으면 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1893">Otherwise, it is `false`.</span></span> <span data-ttu-id="2ed3f-1894"><xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 항상 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1894">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="2ed3f-1895"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1895">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-1896">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1896">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-1897">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1897">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-1898">작업에 대 한 구현 메서드는 다음 규칙에 따라 선택 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1898">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="2ed3f-1899">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` "보다 작음" 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1899">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "less than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1900">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1900">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-1901">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1901">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-1902">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1902">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-1903">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1903">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-1904">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1904">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1905">다음 두 조건을 충족 하는 경우 노드가 리프트 된 및 노드의 유형입니다 <xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1905">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="2ed3f-1906">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1906">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-1907">구현 메서드의 반환 형식은 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1907">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="2ed3f-1908">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1908">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-1909">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1909">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-1910">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1910">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="2ed3f-1911">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1911">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-1912">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1912">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-1913">다음 코드 예제에는 두 개의 정수를 비교 하는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1913">The following code example shows how to create an expression that compares two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#25)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-1914"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1914"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-1915"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 "보다 작음" 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1915">The "less than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThan (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LessThan(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member LessThan : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LessThan (left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-1916"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1916">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-1917"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1917">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="liftToNull"><span data-ttu-id="2ed3f-1918"><see langword="true" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="true" />이고, <see langword="false" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1918"><see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-1919"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1919">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1920">"보다 작음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1920">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than" numeric comparison.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1921"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1921">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1922">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1922">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-1923"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1923">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-1924">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 속성은 `true` 하며 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성이 `liftToNull`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1924">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="2ed3f-1925">그렇지 않은 경우 둘 다 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1925">Otherwise, they are both `false`.</span></span> <span data-ttu-id="2ed3f-1926"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1926">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-1927">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1927">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-1928">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1928">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-1929">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1929">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-1930">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1930">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1931">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` "보다 작음" 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1931">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "less than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1932">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1932">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-1933">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1933">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-1934">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1934">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-1935">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1935">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-1936">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1936">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1937">다음 두 조건이 충족 되 면 노드가 리프트 된; 또한 노드 형식은 nullable <xref:System.Boolean> 하는 경우 `liftToNull` 됩니다 `true` 또는 <xref:System.Boolean> 경우 `liftToNull` 는 `false`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1937">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="2ed3f-1938">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1938">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-1939">구현 메서드의 반환 형식은 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1939">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="2ed3f-1940">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1940">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-1941">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1941">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-1942">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1942">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="2ed3f-1943">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1943">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-1944">노드의 형식이 nullable <xref:System.Boolean> 경우 `liftToNull` 됩니다 `true` 또는 <xref:System.Boolean> 경우 `liftToNull` 는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1944">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-1945"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1945"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-1946"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1946"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-1947"><paramref name="method" />가 <see langword="null" />이고 "보다 작음" 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1947"><paramref name="method" /> is <see langword="null" /> and the "less than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="LessThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-1948">"보다 작거나 같음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1948">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a " less than or equal" numeric comparison.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LessThanOrEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member LessThanOrEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LessThanOrEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-1949"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1949">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-1950"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1950">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1951">"보다 작거나 같음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1951">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a " less than or equal" numeric comparison.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1952"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1952">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1953">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1953">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-1954"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1954">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-1955">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 속성은 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1955">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="2ed3f-1956">그렇지 않으면 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1956">Otherwise, it is `false`.</span></span> <span data-ttu-id="2ed3f-1957"><xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 항상 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1957">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="2ed3f-1958"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1958">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-1959">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1959">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-1960">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1960">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-1961">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1961">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-1962">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` "보다 작거나 같음" 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1962">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "less than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1963">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1963">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-1964">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1964">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-1965">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1965">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-1966">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1966">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-1967">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1967">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1968">다음 두 조건을 충족 하는 경우 노드가 리프트 된 및 노드의 유형입니다 <xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1968">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="2ed3f-1969">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1969">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-1970">구현 메서드의 반환 형식은 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1970">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="2ed3f-1971">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1971">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-1972">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1972">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-1973">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1973">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="2ed3f-1974">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1974">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-1975">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1975">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-1976">다음 코드 예제에는 두 개의 정수를 비교 하는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1976">The following code example shows how to create an expression that compares two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#26)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-1977"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1977"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-1978"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 "보다 작거나 같음" 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1978">The "less than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqual (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LessThanOrEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member LessThanOrEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LessThanOrEqual (left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-1979"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1979">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-1980"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1980">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="liftToNull"><span data-ttu-id="2ed3f-1981"><see langword="true" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="true" />이고, <see langword="false" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1981"><see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-1982"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1982">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-1983">"보다 작거나 같음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1983">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than or equal" numeric comparison.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-1984"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1984">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-1985">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1985">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-1986"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1986">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-1987">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 속성은 `true` 하며 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성이 `liftToNull`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1987">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="2ed3f-1988">그렇지 않은 경우 둘 다 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1988">Otherwise, they are both `false`.</span></span> <span data-ttu-id="2ed3f-1989"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1989">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-1990">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1990">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-1991">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1991">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-1992">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1992">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-1993">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1993">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1994">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` "보다 작거나 같음" 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1994">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "less than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-1995">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1995">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-1996">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1996">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-1997">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1997">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-1998">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1998">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-1999">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-1999">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-2000">다음 두 조건이 충족 되 면 노드가 리프트 된; 또한 노드 형식은 nullable <xref:System.Boolean> 하는 경우 `liftToNull` 됩니다 `true` 또는 <xref:System.Boolean> 경우 `liftToNull` 는 `false`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2000">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="2ed3f-2001">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2001">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-2002">구현 메서드의 반환 형식은 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2002">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="2ed3f-2003">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2003">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-2004">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2004">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-2005">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2005">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="2ed3f-2006">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2006">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-2007">노드의 형식이 nullable <xref:System.Boolean> 경우 `liftToNull` 됩니다 `true` 또는 <xref:System.Boolean> 경우 `liftToNull` 는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2007">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2008"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2008"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2009"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2009"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-2010"><paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 "보다 작거나 같음" 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2010"><paramref name="method" /> is <see langword="null" /> and the "less than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ListBind">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-2011"><see cref="T:System.Linq.Expressions.MemberListBinding" /> 개체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2011">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MemberInfo member, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ElementInit&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ListBind (member As MemberInfo, initializers As IEnumerable(Of ElementInit)) As MemberListBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberListBinding ^ ListBind(System::Reflection::MemberInfo ^ member, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListBind : System.Reflection.MemberInfo * seq&lt;System.Linq.Expressions.ElementInit&gt; -&gt; System.Linq.Expressions.MemberListBinding" Usage="System.Linq.Expressions.Expression.ListBind (member, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt;" />
      </Parameters>
      <Docs>
        <param name="member"><span data-ttu-id="2ed3f-2012"><see cref="T:System.Reflection.MemberInfo" /> 속성에 설정할 필드 또는 속성을 나타내는 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2012">A <see cref="T:System.Reflection.MemberInfo" /> that represents a field or property to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span></span></param>
        <param name="initializers"><span data-ttu-id="2ed3f-2013"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ElementInit" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2013">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2014">멤버가 필드 또는 속성인 <see cref="T:System.Linq.Expressions.MemberListBinding" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2014">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> where the member is a field or property.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2015"><see cref="T:System.Linq.Expressions.MemberListBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> 및 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2015">A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2016"><paramref name="member" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2016"><paramref name="member" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2ed3f-2017">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2017">-or-</span></span> 
<span data-ttu-id="2ed3f-2018"><paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2018">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2019"><paramref name="member" />가 필드나 속성을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2019"><paramref name="member" /> does not represent a field or property.</span></span>  
  
<span data-ttu-id="2ed3f-2020">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2020">-or-</span></span> 
<span data-ttu-id="2ed3f-2021"><paramref name="member" />가 나타내는 필드 또는 속성의 <see cref="P:System.Reflection.FieldInfo.FieldType" /> 또는 <see cref="P:System.Reflection.PropertyInfo.PropertyType" />이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2021">The <see cref="P:System.Reflection.FieldInfo.FieldType" /> or <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the field or property that <paramref name="member" /> represents does not implement <see cref="T:System.Collections.IEnumerable" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MemberInfo member, params System.Linq.Expressions.ElementInit[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MemberInfo member, class System.Linq.Expressions.ElementInit[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ListBind (member As MemberInfo, ParamArray initializers As ElementInit()) As MemberListBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberListBinding ^ ListBind(System::Reflection::MemberInfo ^ member, ... cli::array &lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListBind : System.Reflection.MemberInfo * System.Linq.Expressions.ElementInit[] -&gt; System.Linq.Expressions.MemberListBinding" Usage="System.Linq.Expressions.Expression.ListBind (member, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.ElementInit[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="member"><span data-ttu-id="2ed3f-2022"><see cref="T:System.Reflection.MemberInfo" /> 속성에 설정할 필드 또는 속성을 나타내는 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2022">A <see cref="T:System.Reflection.MemberInfo" /> that represents a field or property to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span></span></param>
        <param name="initializers"><span data-ttu-id="2ed3f-2023"><see cref="T:System.Linq.Expressions.ElementInit" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2023">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2024">멤버가 필드 또는 속성인 <see cref="T:System.Linq.Expressions.MemberListBinding" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2024">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> where the member is a field or property.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2025"><see cref="T:System.Linq.Expressions.MemberListBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> 및 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2025">A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2026"><paramref name="member" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2026"><paramref name="member" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2ed3f-2027">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2027">-or-</span></span> 
<span data-ttu-id="2ed3f-2028"><paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2028">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2029"><paramref name="member" />가 필드나 속성을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2029"><paramref name="member" /> does not represent a field or property.</span></span>  
  
<span data-ttu-id="2ed3f-2030">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2030">-or-</span></span> 
<span data-ttu-id="2ed3f-2031"><paramref name="member" />가 나타내는 필드 또는 속성의 <see cref="P:System.Reflection.FieldInfo.FieldType" /> 또는 <see cref="P:System.Reflection.PropertyInfo.PropertyType" />이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2031">The <see cref="P:System.Reflection.FieldInfo.FieldType" /> or <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the field or property that <paramref name="member" /> represents does not implement <see cref="T:System.Collections.IEnumerable" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MethodInfo propertyAccessor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MethodInfo propertyAccessor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ElementInit&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ListBind (propertyAccessor As MethodInfo, initializers As IEnumerable(Of ElementInit)) As MemberListBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberListBinding ^ ListBind(System::Reflection::MethodInfo ^ propertyAccessor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListBind : System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.ElementInit&gt; -&gt; System.Linq.Expressions.MemberListBinding" Usage="System.Linq.Expressions.Expression.ListBind (propertyAccessor, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyAccessor"><span data-ttu-id="2ed3f-2032">속성 접근자 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2032">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span></span></param>
        <param name="initializers"><span data-ttu-id="2ed3f-2033"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ElementInit" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2033">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2034">지정된 속성 접근자 메서드에 따라 <see cref="T:System.Linq.Expressions.MemberListBinding" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2034">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> based on a specified property accessor method.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2035"><see cref="T:System.Linq.Expressions.MemberListBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />로 액세스되는 속성을 나타내는 <see cref="T:System.Reflection.MemberInfo" />로 설정되고 <paramref name="propertyAccessor" />가 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />의 요소로 채워진 <paramref name="initializers" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2035">A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.MemberInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> populated with the elements of <paramref name="initializers" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2036"><paramref name="propertyAccessor" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2036"><paramref name="propertyAccessor" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2ed3f-2037">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2037">-or-</span></span> 
<span data-ttu-id="2ed3f-2038"><paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2038">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2039"><paramref name="propertyAccessor" />가 속성 접근자 메서드를 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2039"><paramref name="propertyAccessor" /> does not represent a property accessor method.</span></span>  
  
<span data-ttu-id="2ed3f-2040">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2040">-or-</span></span> 
<span data-ttu-id="2ed3f-2041"><paramref name="propertyAccessor" />가 나타내는 메서드가 액세스하는 속성의 <see cref="P:System.Reflection.PropertyInfo.PropertyType" />에서 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2041">The <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the property that the method represented by <paramref name="propertyAccessor" /> accesses does not implement <see cref="T:System.Collections.IEnumerable" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MethodInfo propertyAccessor, params System.Linq.Expressions.ElementInit[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MethodInfo propertyAccessor, class System.Linq.Expressions.ElementInit[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ListBind (propertyAccessor As MethodInfo, ParamArray initializers As ElementInit()) As MemberListBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberListBinding ^ ListBind(System::Reflection::MethodInfo ^ propertyAccessor, ... cli::array &lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListBind : System.Reflection.MethodInfo * System.Linq.Expressions.ElementInit[] -&gt; System.Linq.Expressions.MemberListBinding" Usage="System.Linq.Expressions.Expression.ListBind (propertyAccessor, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.ElementInit[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyAccessor"><span data-ttu-id="2ed3f-2042">속성 접근자 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2042">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span></span></param>
        <param name="initializers"><span data-ttu-id="2ed3f-2043"><see cref="T:System.Linq.Expressions.ElementInit" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2043">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2044">지정된 속성 접근자 메서드에 따라 <see cref="T:System.Linq.Expressions.MemberListBinding" /> 개체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2044">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> object based on a specified property accessor method.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2045"><see cref="T:System.Linq.Expressions.MemberListBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />로 액세스되는 속성을 나타내는 <see cref="T:System.Reflection.MemberInfo" />로 설정되고 <paramref name="propertyAccessor" />가 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />의 요소로 채워진 <paramref name="initializers" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2045">A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.MemberInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> populated with the elements of <paramref name="initializers" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2046"><paramref name="propertyAccessor" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2046"><paramref name="propertyAccessor" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2ed3f-2047">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2047">-or-</span></span> 
<span data-ttu-id="2ed3f-2048"><paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2048">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2049"><paramref name="propertyAccessor" />가 속성 접근자 메서드를 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2049"><paramref name="propertyAccessor" /> does not represent a property accessor method.</span></span>  
  
<span data-ttu-id="2ed3f-2050">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2050">-or-</span></span> 
<span data-ttu-id="2ed3f-2051"><paramref name="propertyAccessor" />가 나타내는 메서드가 액세스하는 속성의 <see cref="P:System.Reflection.PropertyInfo.PropertyType" />에서 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2051">The <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the property that the method represented by <paramref name="propertyAccessor" /> accesses does not implement <see cref="T:System.Collections.IEnumerable" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ListInit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-2052"><see cref="T:System.Linq.Expressions.ListInitExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2052">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ElementInit&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListInit : System.Linq.Expressions.NewExpression * seq&lt;System.Linq.Expressions.ElementInit&gt; -&gt; System.Linq.Expressions.ListInitExpression" Usage="System.Linq.Expressions.Expression.ListInit (newExpression, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression"><span data-ttu-id="2ed3f-2053"><see cref="T:System.Linq.Expressions.NewExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2053">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span></span></param>
        <param name="initializers"><span data-ttu-id="2ed3f-2054"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ElementInit" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2054">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2055">지정된 <see cref="T:System.Linq.Expressions.ListInitExpression" /> 개체를 사용하여 컬렉션을 초기화하는 <see cref="T:System.Linq.Expressions.ElementInit" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2055">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses specified <see cref="T:System.Linq.Expressions.ElementInit" /> objects to initialize a collection.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2056"><see cref="T:System.Linq.Expressions.ListInitExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> 및 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2056">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2057">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성을 `newExpression` 구현 하는 형식을 나타내야 <xref:System.Collections.IEnumerable>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2057">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="2ed3f-2058">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.ListInitExpression> 값과 같음 `newExpression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2058">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-2059">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29> 메서드를는 <xref:System.Linq.Expressions.ListInitExpression> 두 키-값 쌍이 포함 된 새 사전 인스턴스 초기화를 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2059">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29> method to create a <xref:System.Linq.Expressions.ListInitExpression> that represents the initialization of a new dictionary instance with two key-value pairs.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#7)]
 [!code-vb[System.Linq.Expressions.Expression#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2060"><paramref name="newExpression" /> 또는 <paramref name="initializers" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2060"><paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2ed3f-2061">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2061">-or-</span></span> 
<span data-ttu-id="2ed3f-2062"><paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2062">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2063"><paramref name="newExpression" />.Type이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2063"><paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListInit : System.Linq.Expressions.NewExpression * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.ListInitExpression" Usage="System.Linq.Expressions.Expression.ListInit (newExpression, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression"><span data-ttu-id="2ed3f-2064"><see cref="T:System.Linq.Expressions.NewExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2064">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span></span></param>
        <param name="initializers"><span data-ttu-id="2ed3f-2065"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2065">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2066">이름이 "Add"인 메서드를 사용하여 컬렉션에 요소를 추가하는 <see cref="T:System.Linq.Expressions.ListInitExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2066">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a method named "Add" to add elements to a collection.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2067"><see cref="T:System.Linq.Expressions.ListInitExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2067">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2068">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성을 `newExpression` 구현 하는 형식을 나타내야 <xref:System.Collections.IEnumerable>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2068">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="2ed3f-2069">이 오버 로드를 사용 하려면 <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.Expression%7D%29>, `newExpression`합니다. 형식 또는 해당 기본 형식에 정확히 하나의 인수를 받는 "Add" (대/소문자 구분) 라는 단일 메서드를 선언 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2069">In order to use this overload of <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.Expression%7D%29>, `newExpression`.Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument.</span></span> <span data-ttu-id="2ed3f-2070">인수의 형식을 나타내는 형식에서 할당할 수 있어야 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성의 첫 번째 요소의 `initializers`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2070">The type of the argument must be assignable from the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of the first element of `initializers`.</span></span>  
  
 <span data-ttu-id="2ed3f-2071">합니다 <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 반환 된 속성 <xref:System.Linq.Expressions.ListInitExpression> 형식의 요소가 포함 되어 <xref:System.Linq.Expressions.ElementInit> 의 각 요소에 대해 `initializers`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2071">The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`.</span></span> <span data-ttu-id="2ed3f-2072">합니다 <xref:System.Linq.Expressions.ElementInit.Arguments%2A> 속성의 각 요소 <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 의 해당 요소를 포함 하는 singleton 컬렉션은 `initializers`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2072">The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`.</span></span> <span data-ttu-id="2ed3f-2073">합니다 <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> 속성의 각 요소 <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 에서 검색 된 추가 메서드를 나타내는 `newExpression`합니다. 형식 또는 해당 기본 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2073">The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> represents the add method that was discovered on `newExpression`.Type or its base type.</span></span>  
  
 <span data-ttu-id="2ed3f-2074">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.ListInitExpression> 값과 같음 `newExpression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2074">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2075"><paramref name="newExpression" /> 또는 <paramref name="initializers" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2075"><paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2ed3f-2076">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2076">-or-</span></span> 
<span data-ttu-id="2ed3f-2077"><paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2077">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2078"><paramref name="newExpression" />.Type이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2078"><paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-2079"><paramref name="newExpression" />.Type 또는 해당 기본 형식에 선언된 "Add"(대/소문자 구분 안 함)라는 인스턴스 메서드가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2079">There is no instance method named "Add" (case insensitive) declared in <paramref name="newExpression" />.Type or its base type.</span></span>  
  
<span data-ttu-id="2ed3f-2080">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2080">-or-</span></span> 
<span data-ttu-id="2ed3f-2081"><paramref name="newExpression" />.Type 또는 해당 기본 형식의 add 메서드가 정확히 하나의 인수만 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2081">The add method on <paramref name="newExpression" />.Type or its base type does not take exactly one argument.</span></span>  
  
<span data-ttu-id="2ed3f-2082">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2082">-or-</span></span> 
<span data-ttu-id="2ed3f-2083"><paramref name="initializers" />의 첫 번째 요소에 대한 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성으로 표시되는 형식을 <paramref name="newExpression" />.Type 또는 해당 기본 형식의 add 메서드에 대한 인수 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2083">The type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of the first element of <paramref name="initializers" /> is not assignable to the argument type of the add method on <paramref name="newExpression" />.Type or its base type.</span></span>  
  
<span data-ttu-id="2ed3f-2084">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2084">-or-</span></span> 
<span data-ttu-id="2ed3f-2085">"Add"(대/소문자 구분 안 함)라는 둘 이상의 인수 호환 메서드가 <paramref name="newExpression" />.Type 및/또는 해당 기본 형식에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2085">More than one argument-compatible method named "Add" (case-insensitive) exists on <paramref name="newExpression" />.Type and/or its base type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, params System.Linq.Expressions.ElementInit[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Linq.Expressions.ElementInit[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, ... cli::array &lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListInit : System.Linq.Expressions.NewExpression * System.Linq.Expressions.ElementInit[] -&gt; System.Linq.Expressions.ListInitExpression" Usage="System.Linq.Expressions.Expression.ListInit (newExpression, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.ElementInit[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression"><span data-ttu-id="2ed3f-2086"><see cref="T:System.Linq.Expressions.NewExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2086">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span></span></param>
        <param name="initializers"><span data-ttu-id="2ed3f-2087"><see cref="T:System.Linq.Expressions.ElementInit" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2087">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2088">지정된 <see cref="T:System.Linq.Expressions.ListInitExpression" /> 개체를 사용하여 컬렉션을 초기화하는 <see cref="T:System.Linq.Expressions.ElementInit" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2088">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses specified <see cref="T:System.Linq.Expressions.ElementInit" /> objects to initialize a collection.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2089"><see cref="T:System.Linq.Expressions.ListInitExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> 및 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2089">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2090">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성을 `newExpression` 구현 하는 형식을 나타내야 <xref:System.Collections.IEnumerable>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2090">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="2ed3f-2091">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.ListInitExpression> 값과 같음 `newExpression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2091">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-2092">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29> 메서드를는 <xref:System.Linq.Expressions.ListInitExpression> 두 키-값 쌍이 포함 된 새 사전 인스턴스 초기화를 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2092">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29> method to create a <xref:System.Linq.Expressions.ListInitExpression> that represents the initialization of a new dictionary instance with two key-value pairs.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#7)]
 [!code-vb[System.Linq.Expressions.Expression#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2093"><paramref name="newExpression" /> 또는 <paramref name="initializers" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2093"><paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2ed3f-2094">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2094">-or-</span></span> 
<span data-ttu-id="2ed3f-2095"><paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2095">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2096"><paramref name="newExpression" />.Type이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2096"><paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, params System.Linq.Expressions.Expression[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Linq.Expressions.Expression[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListInit : System.Linq.Expressions.NewExpression * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.ListInitExpression" Usage="System.Linq.Expressions.Expression.ListInit (newExpression, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression"><span data-ttu-id="2ed3f-2097"><see cref="T:System.Linq.Expressions.NewExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2097">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span></span></param>
        <param name="initializers"><span data-ttu-id="2ed3f-2098"><see cref="T:System.Linq.Expressions.Expression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2098">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2099">이름이 "Add"인 메서드를 사용하여 컬렉션에 요소를 추가하는 <see cref="T:System.Linq.Expressions.ListInitExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2099">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a method named "Add" to add elements to a collection.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2100"><see cref="T:System.Linq.Expressions.ListInitExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2100">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2101">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성을 `newExpression` 구현 하는 형식을 나타내야 <xref:System.Collections.IEnumerable>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2101">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="2ed3f-2102">이 오버 로드를 사용 하려면 <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.Expression%5B%5D%29>, `newExpression`합니다. 형식 또는 해당 기본 형식에 정확히 하나의 인수를 받는 "Add" (대/소문자 구분) 라는 단일 메서드를 선언 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2102">In order to use this overload of <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.Expression%5B%5D%29>, `newExpression`.Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument.</span></span> <span data-ttu-id="2ed3f-2103">인수의 형식을 나타내는 형식에서 할당할 수 있어야 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성의 첫 번째 요소의 `initializers`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2103">The type of the argument must be assignable from the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of the first element of `initializers`.</span></span>  
  
 <span data-ttu-id="2ed3f-2104">합니다 <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 반환 된 속성 <xref:System.Linq.Expressions.ListInitExpression> 형식의 요소가 포함 되어 <xref:System.Linq.Expressions.ElementInit> 의 각 요소에 대해 `initializers`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2104">The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`.</span></span> <span data-ttu-id="2ed3f-2105">합니다 <xref:System.Linq.Expressions.ElementInit.Arguments%2A> 속성의 각 요소 <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 의 해당 요소를 포함 하는 singleton 컬렉션은 `initializers`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2105">The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`.</span></span> <span data-ttu-id="2ed3f-2106">합니다 <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> 속성의 각 요소 <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 에서 검색 된 추가 메서드를 나타내는 `newExpression`합니다. 형식 또는 해당 기본 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2106">The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> represents the add method that was discovered on `newExpression`.Type or its base type.</span></span>  
  
 <span data-ttu-id="2ed3f-2107">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.ListInitExpression> 값과 같음 `newExpression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2107">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2108"><paramref name="newExpression" /> 또는 <paramref name="initializers" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2108"><paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2ed3f-2109">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2109">-or-</span></span> 
<span data-ttu-id="2ed3f-2110"><paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2110">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2111"><paramref name="newExpression" />.Type이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2111"><paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-2112"><paramref name="newExpression" />.Type 또는 해당 기본 형식에 선언된 "Add"(대/소문자 구분 안 함)라는 인스턴스 메서드가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2112">There is no instance method named "Add" (case insensitive) declared in <paramref name="newExpression" />.Type or its base type.</span></span>  
  
<span data-ttu-id="2ed3f-2113">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2113">-or-</span></span> 
<span data-ttu-id="2ed3f-2114"><paramref name="newExpression" />.Type 또는 해당 기본 형식의 add 메서드가 정확히 하나의 인수만 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2114">The add method on <paramref name="newExpression" />.Type or its base type does not take exactly one argument.</span></span>  
  
<span data-ttu-id="2ed3f-2115">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2115">-or-</span></span> 
<span data-ttu-id="2ed3f-2116"><paramref name="initializers" />의 첫 번째 요소에 대한 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성으로 표시되는 형식을 <paramref name="newExpression" />.Type 또는 해당 기본 형식의 add 메서드에 대한 인수 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2116">The type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of the first element of <paramref name="initializers" /> is not assignable to the argument type of the add method on <paramref name="newExpression" />.Type or its base type.</span></span>  
  
<span data-ttu-id="2ed3f-2117">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2117">-or-</span></span> 
<span data-ttu-id="2ed3f-2118">"Add"(대/소문자 구분 안 함)라는 둘 이상의 인수 호환 메서드가 <paramref name="newExpression" />.Type 및/또는 해당 기본 형식에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2118">More than one argument-compatible method named "Add" (case-insensitive) exists on <paramref name="newExpression" />.Type and/or its base type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Reflection.MethodInfo addMethod, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Reflection::MethodInfo ^ addMethod, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListInit : System.Linq.Expressions.NewExpression * System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.ListInitExpression" Usage="System.Linq.Expressions.Expression.ListInit (newExpression, addMethod, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression"><span data-ttu-id="2ed3f-2119"><see cref="T:System.Linq.Expressions.NewExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2119">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span></span></param>
        <param name="addMethod"><span data-ttu-id="2ed3f-2120">컬렉션에 요소를 추가하는 "Add"(대/소문자 구분 안 함)라는 인스턴스 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2120">A <see cref="T:System.Reflection.MethodInfo" /> that represents an instance method named "Add" (case insensitive), that adds an element to a collection.</span></span></param>
        <param name="initializers"><span data-ttu-id="2ed3f-2121"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2121">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2122">지정된 메서드를 사용하여 컬렉션에 요소를 추가하는 <see cref="T:System.Linq.Expressions.ListInitExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2122">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a specified method to add elements to a collection.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2123"><see cref="T:System.Linq.Expressions.ListInitExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2123">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2124">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성을 `newExpression` 구현 하는 형식을 나타내야 <xref:System.Collections.IEnumerable>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2124">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="2ed3f-2125">하는 경우 `addMethod` 됩니다 `null`, `newExpression`합니다. 형식 또는 해당 기본 형식에 정확히 하나의 인수를 받는 "Add" (대/소문자 구분) 라는 단일 메서드를 선언 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2125">If `addMethod` is `null`, `newExpression`.Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument.</span></span> <span data-ttu-id="2ed3f-2126">하는 경우 `addMethod` 아닙니다 `null`, 정확히 하나의 매개 변수가 있는 "Add" (대/소문자 구분) 라는 인스턴스 메서드를 나타내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2126">If `addMethod` is not `null`, it must represent an instance method named "Add" (case insensitive) that has exactly one parameter.</span></span> <span data-ttu-id="2ed3f-2127">가 나타내는 형식 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성의 각 요소 `initializers` add 메서드의 인수 형식에 할당할 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2127">The type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must be assignable to the argument type of the add method.</span></span>  
  
 <span data-ttu-id="2ed3f-2128">합니다 <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 반환 된 속성 <xref:System.Linq.Expressions.ListInitExpression> 형식의 요소가 포함 되어 <xref:System.Linq.Expressions.ElementInit> 의 각 요소에 대해 `initializers`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2128">The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`.</span></span> <span data-ttu-id="2ed3f-2129">합니다 <xref:System.Linq.Expressions.ElementInit.Arguments%2A> 속성의 각 요소 <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 의 해당 요소를 포함 하는 singleton 컬렉션은 `initializers`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2129">The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`.</span></span> <span data-ttu-id="2ed3f-2130">합니다 <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> 속성의 각 요소 <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 값과 같음 `addMethod`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2130">The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is equal to `addMethod`.</span></span>  
  
 <span data-ttu-id="2ed3f-2131">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.ListInitExpression> 값과 같음 `newExpression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2131">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2132"><paramref name="newExpression" /> 또는 <paramref name="initializers" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2132"><paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2ed3f-2133">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2133">-or-</span></span> 
<span data-ttu-id="2ed3f-2134"><paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2134">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2135"><paramref name="newExpression" />.Type이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2135"><paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span></span>  
  
<span data-ttu-id="2ed3f-2136">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2136">-or-</span></span> 
 <span data-ttu-id="2ed3f-2137"><paramref name="addMethod" />가 <see langword="null" />이 아니고 정확히 하나의 인수를 받는 "Add"(대/소문자 구분 안 함)라는 인스턴스 메서드를 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2137"><paramref name="addMethod" /> is not <see langword="null" /> and it does not represent an instance method named "Add" (case insensitive) that takes exactly one argument.</span></span>  
  
<span data-ttu-id="2ed3f-2138">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2138">-or-</span></span> 
 <span data-ttu-id="2ed3f-2139"><paramref name="addMethod" />가 <see langword="null" />이 아니고 <paramref name="initializers" />에 있는 요소 중 하나 이상의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 <paramref name="addMethod" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2139"><paramref name="addMethod" /> is not <see langword="null" /> and the type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="initializers" /> is not assignable to the argument type of the method that <paramref name="addMethod" /> represents.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-2140"><paramref name="addMethod" />가 <see langword="null" />이고 <paramref name="newExpression" />.Type 또는 해당 기본 형식에 하나의 형식 호환 인수를 받는 "Add"라는 인스턴스 메서드가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2140"><paramref name="addMethod" /> is <see langword="null" /> and no instance method named "Add" that takes one type-compatible argument exists on <paramref name="newExpression" />.Type or its base type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Reflection.MethodInfo addMethod, params System.Linq.Expressions.Expression[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Reflection.MethodInfo addMethod, class System.Linq.Expressions.Expression[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Reflection::MethodInfo ^ addMethod, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListInit : System.Linq.Expressions.NewExpression * System.Reflection.MethodInfo * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.ListInitExpression" Usage="System.Linq.Expressions.Expression.ListInit (newExpression, addMethod, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression"><span data-ttu-id="2ed3f-2141"><see cref="T:System.Linq.Expressions.NewExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2141">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span></span></param>
        <param name="addMethod"><span data-ttu-id="2ed3f-2142">하나의 인수를 받으며 컬렉션에 요소를 추가하는 인스턴스 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2142">A <see cref="T:System.Reflection.MethodInfo" /> that represents an instance method that takes one argument, that adds an element to a collection.</span></span></param>
        <param name="initializers"><span data-ttu-id="2ed3f-2143"><see cref="T:System.Linq.Expressions.Expression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2143">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2144">지정된 메서드를 사용하여 컬렉션에 요소를 추가하는 <see cref="T:System.Linq.Expressions.ListInitExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2144">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a specified method to add elements to a collection.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2145"><see cref="T:System.Linq.Expressions.ListInitExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2145">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2146">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성을 `newExpression` 구현 하는 형식을 나타내야 <xref:System.Collections.IEnumerable>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2146">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="2ed3f-2147">하는 경우 `addMethod` 됩니다 `null`, `newExpression`합니다. 형식 또는 해당 기본 형식에 정확히 하나의 인수를 받는 "Add" (대/소문자 구분) 라는 단일 메서드를 선언 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2147">If `addMethod` is `null`, `newExpression`.Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument.</span></span> <span data-ttu-id="2ed3f-2148">하는 경우 `addMethod` 아닙니다 `null`, 정확히 하나의 매개 변수가 있는 "Add" (대/소문자 구분) 라는 인스턴스 메서드를 나타내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2148">If `addMethod` is not `null`, it must represent an instance method named "Add" (case insensitive) that has exactly one parameter.</span></span> <span data-ttu-id="2ed3f-2149">가 나타내는 형식 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성의 각 요소 `initializers` add 메서드의 인수 형식에 할당할 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2149">The type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must be assignable to the argument type of the add method.</span></span>  
  
 <span data-ttu-id="2ed3f-2150">합니다 <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 반환 된 속성 <xref:System.Linq.Expressions.ListInitExpression> 형식의 요소가 포함 되어 <xref:System.Linq.Expressions.ElementInit> 의 각 요소에 대해 `initializers`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2150">The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`.</span></span> <span data-ttu-id="2ed3f-2151">합니다 <xref:System.Linq.Expressions.ElementInit.Arguments%2A> 속성의 각 요소 <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 의 해당 요소를 포함 하는 singleton 컬렉션은 `initializers`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2151">The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`.</span></span> <span data-ttu-id="2ed3f-2152">합니다 <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> 속성의 각 요소 <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 값과 같음 `addMethod`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2152">The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is equal to `addMethod`.</span></span>  
  
 <span data-ttu-id="2ed3f-2153">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.ListInitExpression> 값과 같음 `newExpression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2153">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2154"><paramref name="newExpression" /> 또는 <paramref name="initializers" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2154"><paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2ed3f-2155">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2155">-or-</span></span> 
<span data-ttu-id="2ed3f-2156"><paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2156">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2157"><paramref name="newExpression" />.Type이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2157"><paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span></span>  
  
<span data-ttu-id="2ed3f-2158">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2158">-or-</span></span> 
 <span data-ttu-id="2ed3f-2159"><paramref name="addMethod" />가 <see langword="null" />이 아니고 정확히 하나의 인수를 받는 "Add"(대/소문자 구분 안 함)라는 인스턴스 메서드를 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2159"><paramref name="addMethod" /> is not <see langword="null" /> and it does not represent an instance method named "Add" (case insensitive) that takes exactly one argument.</span></span>  
  
<span data-ttu-id="2ed3f-2160">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2160">-or-</span></span> 
 <span data-ttu-id="2ed3f-2161"><paramref name="addMethod" />가 <see langword="null" />이 아니고 <paramref name="initializers" />에 있는 요소 중 하나 이상의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 <paramref name="addMethod" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2161"><paramref name="addMethod" /> is not <see langword="null" /> and the type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="initializers" /> is not assignable to the argument type of the method that <paramref name="addMethod" /> represents.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-2162"><paramref name="addMethod" />가 <see langword="null" />이고 <paramref name="newExpression" />.Type 또는 해당 기본 형식에 하나의 형식 호환 인수를 받는 "Add"라는 인스턴스 메서드가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2162"><paramref name="addMethod" /> is <see langword="null" /> and no instance method named "Add" that takes one type-compatible argument exists on <paramref name="newExpression" />.Type or its base type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Loop">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-2163"><see cref="T:System.Linq.Expressions.LoopExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2163">Creates a <see cref="T:System.Linq.Expressions.LoopExpression" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Loop">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LoopExpression Loop(class System.Linq.Expressions.Expression body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Loop (body As Expression) As LoopExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LoopExpression ^ Loop(System::Linq::Expressions::Expression ^ body);" />
      <MemberSignature Language="F#" Value="static member Loop : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.LoopExpression" Usage="System.Linq.Expressions.Expression.Loop body" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LoopExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="2ed3f-2164">루프의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2164">The body of the loop.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2165">지정된 본문을 사용하여 <see cref="T:System.Linq.Expressions.LoopExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2165">Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2166">만든 <see cref="T:System.Linq.Expressions.LoopExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2166">The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Loop">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget break);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LoopExpression Loop(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.LabelTarget break) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Loop (body As Expression, break As LabelTarget) As LoopExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LoopExpression ^ Loop(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::LabelTarget ^ break);" />
      <MemberSignature Language="F#" Value="static member Loop : System.Linq.Expressions.Expression * System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.LoopExpression" Usage="System.Linq.Expressions.Expression.Loop (body, break)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LoopExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="break" Type="System.Linq.Expressions.LabelTarget" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="2ed3f-2167">루프의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2167">The body of the loop.</span></span></param>
        <param name="break"><span data-ttu-id="2ed3f-2168">루프 본문에서 사용하는 break 대상입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2168">The break target used by the loop body.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2169">지정된 본문과 break 대상을 사용하여 <see cref="T:System.Linq.Expressions.LoopExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2169">Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body and break target.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2170">만든 <see cref="T:System.Linq.Expressions.LoopExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2170">The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2ed3f-2171">다음 예제에서는 포함 된 블록 식을 만드는 방법을 보여 줍니다는 <xref:System.Linq.Expressions.LoopExpression> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2171">The following example demonstrates how to create a block expression that contains a <xref:System.Linq.Expressions.LoopExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#44)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#44)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Loop">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget break, System.Linq.Expressions.LabelTarget continue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LoopExpression Loop(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.LabelTarget break, class System.Linq.Expressions.LabelTarget continue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Loop (body As Expression, break As LabelTarget, continue As LabelTarget) As LoopExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LoopExpression ^ Loop(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::LabelTarget ^ break, System::Linq::Expressions::LabelTarget ^ continue);" />
      <MemberSignature Language="F#" Value="static member Loop : System.Linq.Expressions.Expression * System.Linq.Expressions.LabelTarget * System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.LoopExpression" Usage="System.Linq.Expressions.Expression.Loop (body, break, continue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LoopExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="break" Type="System.Linq.Expressions.LabelTarget" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="continue" Type="System.Linq.Expressions.LabelTarget" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="2ed3f-2172">루프의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2172">The body of the loop.</span></span></param>
        <param name="break"><span data-ttu-id="2ed3f-2173">루프 본문에서 사용하는 break 대상입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2173">The break target used by the loop body.</span></span></param>
        <param name="continue"><span data-ttu-id="2ed3f-2174">루프 본문에서 사용하는 continue 대상입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2174">The continue target used by the loop body.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2175">지정된 본문을 사용하여 <see cref="T:System.Linq.Expressions.LoopExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2175">Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2176">만든 <see cref="T:System.Linq.Expressions.LoopExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2176">The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeBinary">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-2177">적절한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2177">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> by calling the appropriate factory method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeBinary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MakeBinary(valuetype System.Linq.Expressions.ExpressionType binaryType, class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeBinary (binaryType As ExpressionType, left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MakeBinary(System::Linq::Expressions::ExpressionType binaryType, System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member MakeBinary : System.Linq.Expressions.ExpressionType * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MakeBinary (binaryType, left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binaryType"><span data-ttu-id="2ed3f-2178">이진 연산의 형식을 지정하는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2178">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</span></span></param>
        <param name="left"><span data-ttu-id="2ed3f-2179">왼쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2179">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-2180">오른쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2180">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2181">지정된 왼쪽 및 오른쪽 피연산자를 사용하고 적합한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2181">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left and right operands, by calling an appropriate factory method.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2182">적절한 팩터리 메서드를 호출한 결과인 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2182">The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2183">합니다 `binaryType` 매개 변수를 결정 하는 <xref:System.Linq.Expressions.BinaryExpression> 팩터리 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2183">The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method calls.</span></span> <span data-ttu-id="2ed3f-2184">예를 들어 경우 `binaryType` 됩니다 <xref:System.Linq.Expressions.ExpressionType.Subtract>,이 메서드를 호출 <xref:System.Linq.Expressions.Expression.Subtract%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2184">For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-2185">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.MakeBinary%28System.Linq.Expressions.ExpressionType%2CSystem.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%29> 메서드를를 <xref:System.Linq.Expressions.BinaryExpression> 다른 빼기 1 개의 숫자를 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2185">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.MakeBinary%28System.Linq.Expressions.ExpressionType%2CSystem.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%29> method to create a <xref:System.Linq.Expressions.BinaryExpression> that represents the subtraction of one number from another.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#8)]
 [!code-vb[System.Linq.Expressions.Expression#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2186"><paramref name="binaryType" />이 이항 식 노드에 해당하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2186"><paramref name="binaryType" /> does not correspond to a binary expression node.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2187"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2187"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MakeBinary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MakeBinary(valuetype System.Linq.Expressions.ExpressionType binaryType, class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeBinary (binaryType As ExpressionType, left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MakeBinary(System::Linq::Expressions::ExpressionType binaryType, System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member MakeBinary : System.Linq.Expressions.ExpressionType * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MakeBinary (binaryType, left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="binaryType"><span data-ttu-id="2ed3f-2188">이진 연산의 형식을 지정하는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2188">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</span></span></param>
        <param name="left"><span data-ttu-id="2ed3f-2189">왼쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2189">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-2190">오른쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2190">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</span></span></param>
        <param name="liftToNull"><span data-ttu-id="2ed3f-2191"><see langword="true" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="true" />이고, <see langword="false" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2191"><see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-2192">구현 메서드를 지정하는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2192">A <see cref="T:System.Reflection.MethodInfo" /> that specifies the implementing method.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2193">지정된 왼쪽 피연산자, 오른쪽 피연산자 및 구현 메서드를 사용하고 적합한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2193">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left operand, right operand and implementing method, by calling the appropriate factory method.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2194">적절한 팩터리 메서드를 호출한 결과인 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2194">The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2195">합니다 `binaryType` 매개 변수를 결정 하는 <xref:System.Linq.Expressions.BinaryExpression> 팩터리 메서드입니다.이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2195">The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method will call.</span></span> <span data-ttu-id="2ed3f-2196">예를 들어 경우 `binaryType` 됩니다 <xref:System.Linq.Expressions.ExpressionType.Subtract>,이 메서드를 호출 <xref:System.Linq.Expressions.Expression.Subtract%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2196">For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>.</span></span> <span data-ttu-id="2ed3f-2197">합니다 `liftToNull` 고 `method` 적합 한 팩터리 메서드는 해당 매개 변수가 없는 경우 매개 변수가 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2197">The `liftToNull` and `method` parameters are ignored if the appropriate factory method does not have a corresponding parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2198"><paramref name="binaryType" />이 이항 식 노드에 해당하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2198"><paramref name="binaryType" /> does not correspond to a binary expression node.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2199"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2199"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MakeBinary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MakeBinary(valuetype System.Linq.Expressions.ExpressionType binaryType, class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeBinary (binaryType As ExpressionType, left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MakeBinary(System::Linq::Expressions::ExpressionType binaryType, System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member MakeBinary : System.Linq.Expressions.ExpressionType * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MakeBinary (binaryType, left, right, liftToNull, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="binaryType"><span data-ttu-id="2ed3f-2200">이진 연산의 형식을 지정하는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2200">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</span></span></param>
        <param name="left"><span data-ttu-id="2ed3f-2201">왼쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2201">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-2202">오른쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2202">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</span></span></param>
        <param name="liftToNull"><span data-ttu-id="2ed3f-2203"><see langword="true" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="true" />이고, <see langword="false" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2203"><see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-2204">구현 메서드를 지정하는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2204">A <see cref="T:System.Reflection.MethodInfo" /> that specifies the implementing method.</span></span></param>
        <param name="conversion"><span data-ttu-id="2ed3f-2205">형식 변환 함수를 나타내는 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2205">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that represents a type conversion function.</span></span> <span data-ttu-id="2ed3f-2206">이 매개 변수는 <paramref name="binaryType" />이 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> 또는 복합 할당으로 설정되어 있는 경우에만 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2206">This parameter is used only if <paramref name="binaryType" /> is <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> or compound assignment.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2207">지정된 왼쪽 피연산자, 오른쪽 피연산자, 구현 메서드 및 형식 변환 함수를 사용하고 적합한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2207">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left operand, right operand, implementing method and type conversion function, by calling the appropriate factory method.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2208">적절한 팩터리 메서드를 호출한 결과인 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2208">The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2209">합니다 `binaryType` 매개 변수를 결정 하는 <xref:System.Linq.Expressions.BinaryExpression> 팩터리 메서드입니다.이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2209">The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method will call.</span></span> <span data-ttu-id="2ed3f-2210">예를 들어 경우 `binaryType` 됩니다 <xref:System.Linq.Expressions.ExpressionType.Subtract>,이 메서드를 호출 <xref:System.Linq.Expressions.Expression.Subtract%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2210">For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>.</span></span> <span data-ttu-id="2ed3f-2211">`liftToNull`하십시오 `method` 및 `conversion` 적합 한 팩터리 메서드는 해당 매개 변수가 없는 경우 매개 변수가 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2211">The `liftToNull`, `method` and `conversion` parameters are ignored if the appropriate factory method does not have a corresponding parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2212"><paramref name="binaryType" />이 이항 식 노드에 해당하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2212"><paramref name="binaryType" /> does not correspond to a binary expression node.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2213"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2213"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MakeCatchBlock">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock MakeCatchBlock (Type type, System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock MakeCatchBlock(class System.Type type, class System.Linq.Expressions.ParameterExpression variable, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ MakeCatchBlock(Type ^ type, System::Linq::Expressions::ParameterExpression ^ variable, System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ filter);" />
      <MemberSignature Language="F#" Value="static member MakeCatchBlock : Type * System.Linq.Expressions.ParameterExpression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.CatchBlock" Usage="System.Linq.Expressions.Expression.MakeCatchBlock (type, variable, body, filter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="variable" Type="System.Linq.Expressions.ParameterExpression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="filter" Type="System.Linq.Expressions.Expression" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="2ed3f-2214">이 <see cref="P:System.Linq.Expressions.Expression.Type" />이 처리할 <see cref="T:System.Exception" />의 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2214">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</span></span></param>
        <param name="variable"><span data-ttu-id="2ed3f-2215">이 처리기가 catch한 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체에 대한 참조를 나타내는 <see cref="T:System.Exception" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2215">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</span></span></param>
        <param name="body"><span data-ttu-id="2ed3f-2216">catch 문의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2216">The body of the catch statement.</span></span></param>
        <param name="filter"><span data-ttu-id="2ed3f-2217"><see cref="T:System.Exception" /> 필터의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2217">The body of the <see cref="T:System.Exception" /> filter.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2218">지정된 요소를 사용하여 catch 문을 나타내는 <see cref="T:System.Linq.Expressions.CatchBlock" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2218">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with the specified elements.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2219">만든 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2219">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2220">`type` null이 아니어야 하며 유형에 `variable` (제공 된 경우).</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2220">`type` must be non-null and match the type of `variable` (if it is supplied).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeDynamic">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-2221">동적 연산을 나타내는 <see cref="T:System.Linq.Expressions.DynamicExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2221">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arguments As IEnumerable(Of Expression)) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member MakeDynamic : Type * System.Runtime.CompilerServices.CallSiteBinder * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.MakeDynamic (delegateType, binder, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="2ed3f-2222"><see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2222">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span></span></param>
        <param name="binder"><span data-ttu-id="2ed3f-2223">동적 작업의 런타임 바인더입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2223">The runtime binder for the dynamic operation.</span></span></param>
        <param name="arguments"><span data-ttu-id="2ed3f-2224">동적 작업의 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2224">The arguments to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2225">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2225">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2226"><see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2226">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arg0 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Linq::Expressions::Expression ^ arg0);" />
      <MemberSignature Language="F#" Value="static member MakeDynamic : Type * System.Runtime.CompilerServices.CallSiteBinder * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.MakeDynamic (delegateType, binder, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="2ed3f-2227"><see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2227">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span></span></param>
        <param name="binder"><span data-ttu-id="2ed3f-2228">동적 작업의 런타임 바인더입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2228">The runtime binder for the dynamic operation.</span></span></param>
        <param name="arg0"><span data-ttu-id="2ed3f-2229">동적 작업의 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2229">The argument to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2230">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 및 1개 인수에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2230">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and one argument.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2231"><see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2231">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, ParamArray arguments As Expression()) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member MakeDynamic : Type * System.Runtime.CompilerServices.CallSiteBinder * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.MakeDynamic (delegateType, binder, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="2ed3f-2232"><see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2232">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span></span></param>
        <param name="binder"><span data-ttu-id="2ed3f-2233">동적 작업의 런타임 바인더입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2233">The runtime binder for the dynamic operation.</span></span></param>
        <param name="arguments"><span data-ttu-id="2ed3f-2234">동적 작업의 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2234">The arguments to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2235">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2235">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2236"><see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2236">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arg0 As Expression, arg1 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberSignature Language="F#" Value="static member MakeDynamic : Type * System.Runtime.CompilerServices.CallSiteBinder * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.MakeDynamic (delegateType, binder, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="2ed3f-2237"><see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2237">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span></span></param>
        <param name="binder"><span data-ttu-id="2ed3f-2238">동적 작업의 런타임 바인더입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2238">The runtime binder for the dynamic operation.</span></span></param>
        <param name="arg0"><span data-ttu-id="2ed3f-2239">동적 작업의 첫 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2239">The first argument to the dynamic operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="2ed3f-2240">동적 작업의 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2240">The second argument to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2241">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 및 2개 인수에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2241">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and two arguments.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2242"><see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2242">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arg0 As Expression, arg1 As Expression, arg2 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberSignature Language="F#" Value="static member MakeDynamic : Type * System.Runtime.CompilerServices.CallSiteBinder * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.MakeDynamic (delegateType, binder, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="2ed3f-2243"><see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2243">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span></span></param>
        <param name="binder"><span data-ttu-id="2ed3f-2244">동적 작업의 런타임 바인더입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2244">The runtime binder for the dynamic operation.</span></span></param>
        <param name="arg0"><span data-ttu-id="2ed3f-2245">동적 작업의 첫 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2245">The first argument to the dynamic operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="2ed3f-2246">동적 작업의 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2246">The second argument to the dynamic operation.</span></span></param>
        <param name="arg2"><span data-ttu-id="2ed3f-2247">동적 작업의 세 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2247">The third argument to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2248">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 및 3개 인수에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2248">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and three arguments.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2249"><see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2249">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3);" />
      <MemberSignature Language="F#" Value="static member MakeDynamic : Type * System.Runtime.CompilerServices.CallSiteBinder * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.MakeDynamic (delegateType, binder, arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="2ed3f-2250"><see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2250">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span></span></param>
        <param name="binder"><span data-ttu-id="2ed3f-2251">동적 작업의 런타임 바인더입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2251">The runtime binder for the dynamic operation.</span></span></param>
        <param name="arg0"><span data-ttu-id="2ed3f-2252">동적 작업의 첫 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2252">The first argument to the dynamic operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="2ed3f-2253">동적 작업의 두 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2253">The second argument to the dynamic operation.</span></span></param>
        <param name="arg2"><span data-ttu-id="2ed3f-2254">동적 작업의 세 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2254">The third argument to the dynamic operation.</span></span></param>
        <param name="arg3"><span data-ttu-id="2ed3f-2255">동적 작업의 네 번째 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2255">The fourth argument to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2256">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 및 4개 인수에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2256">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and four arguments.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2257"><see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2257">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeGoto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression MakeGoto (System.Linq.Expressions.GotoExpressionKind kind, System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression MakeGoto(valuetype System.Linq.Expressions.GotoExpressionKind kind, class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ MakeGoto(System::Linq::Expressions::GotoExpressionKind kind, System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member MakeGoto : System.Linq.Expressions.GotoExpressionKind * System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.MakeGoto (kind, target, value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="System.Linq.Expressions.GotoExpressionKind" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="type" Type="System.Type" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="kind"><span data-ttu-id="2ed3f-2258"><see cref="T:System.Linq.Expressions.GotoExpressionKind" />의 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2258">The <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> of the <see cref="T:System.Linq.Expressions.GotoExpression" />.</span></span></param>
        <param name="target"><span data-ttu-id="2ed3f-2259"><see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2259">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="value"><span data-ttu-id="2ed3f-2260">이동 시 연결된 레이블에 전달될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2260">The value that will be passed to the associated label upon jumping.</span></span></param>
        <param name="type"><span data-ttu-id="2ed3f-2261"><see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2261">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2262">지정된 <see cref="T:System.Linq.Expressions.GotoExpression" />의 이동을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpressionKind" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2262">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a jump of the specified <see cref="T:System.Linq.Expressions.GotoExpressionKind" />.</span></span> <span data-ttu-id="2ed3f-2263">이동 시 레이블에 전달되는 값도 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2263">The value passed to the label upon jumping can also be specified.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2264"><see cref="T:System.Linq.Expressions.GotoExpression" />가 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />이고, <paramref name="kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, <paramref name="target" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />으로 설정되고, 이동 시 대상 레이블에 <paramref name="type" />가 전달되는 <paramref name="value" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2264">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to <paramref name="kind" />, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression MakeIndex (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression MakeIndex(class System.Linq.Expressions.Expression instance, class System.Reflection.PropertyInfo indexer, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeIndex (instance As Expression, indexer As PropertyInfo, arguments As IEnumerable(Of Expression)) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ MakeIndex(System::Linq::Expressions::Expression ^ instance, System::Reflection::PropertyInfo ^ indexer, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member MakeIndex : System.Linq.Expressions.Expression * System.Reflection.PropertyInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.IndexExpression" Usage="System.Linq.Expressions.Expression.MakeIndex (instance, indexer, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="indexer" Type="System.Reflection.PropertyInfo" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="2ed3f-2265">속성이 속해 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2265">The object to which the property belongs.</span></span> <span data-ttu-id="2ed3f-2266">속성이 <see langword="static" />(Visual Basic에서는 <see langword="shared" />)인 경우 null입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2266">It should be null if the property is <see langword="static" /> (<see langword="shared" /> in Visual Basic).</span></span></param>
        <param name="indexer"><span data-ttu-id="2ed3f-2267">인덱싱할 속성을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2267">An <see cref="T:System.Linq.Expressions.Expression" /> representing the property to index.</span></span></param>
        <param name="arguments"><span data-ttu-id="2ed3f-2268">속성을 인덱싱하는 데 사용할 인수가 포함된 <c>IEnumerable&lt;Expression&gt;</c>(Visual Basic에서는 <c>IEnumerable (Of Expression)</c>)입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2268">An <c>IEnumerable&lt;Expression&gt;</c> (<c>IEnumerable (Of Expression)</c> in Visual Basic) that contains the arguments that will be used to index the property.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2269">개체의 인덱싱된 속성에 액세스하는 <see cref="T:System.Linq.Expressions.IndexExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2269">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> that represents accessing an indexed property in an object.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2270">만든 <see cref="T:System.Linq.Expressions.IndexExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2270">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeMemberAccess">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression MakeMemberAccess (System.Linq.Expressions.Expression expression, System.Reflection.MemberInfo member);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression MakeMemberAccess(class System.Linq.Expressions.Expression expression, class System.Reflection.MemberInfo member) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ MakeMemberAccess(System::Linq::Expressions::Expression ^ expression, System::Reflection::MemberInfo ^ member);" />
      <MemberSignature Language="F#" Value="static member MakeMemberAccess : System.Linq.Expressions.Expression * System.Reflection.MemberInfo -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.MakeMemberAccess (expression, member)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-2271">멤버가 속하는 개체를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2271">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the object that the member belongs to.</span></span> <span data-ttu-id="2ed3f-2272">이 값은 정적 멤버의 경우 null일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2272">This can be null for static members.</span></span></param>
        <param name="member"><span data-ttu-id="2ed3f-2273">액세스할 필드 또는 속성을 설명하는 <see cref="T:System.Reflection.MemberInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2273">The <see cref="T:System.Reflection.MemberInfo" /> that describes the field or property to be accessed.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2274">필드 또는 속성 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2274">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing either a field or a property.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2275">적절한 팩터리 메서드를 호출한 결과인 <see cref="T:System.Linq.Expressions.MemberExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2275">The <see cref="T:System.Linq.Expressions.MemberExpression" /> that results from calling the appropriate factory method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2276">이 메서드는 만드는 데 사용할 수는 <xref:System.Linq.Expressions.MemberExpression> 필드 또는 속성의 형식에 따라 액세스를 나타내는 `member`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2276">This method can be used to create a <xref:System.Linq.Expressions.MemberExpression> that represents accessing either a field or a property, depending on the type of `member`.</span></span> <span data-ttu-id="2ed3f-2277">경우 `member` 유형의 <xref:System.Reflection.FieldInfo>,이 메서드를 호출 <xref:System.Linq.Expressions.Expression.Field%2A> 만들려는 <xref:System.Linq.Expressions.MemberExpression>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2277">If `member` is of type <xref:System.Reflection.FieldInfo>, this method calls <xref:System.Linq.Expressions.Expression.Field%2A> to create the <xref:System.Linq.Expressions.MemberExpression>.</span></span> <span data-ttu-id="2ed3f-2278">경우 `member` 유형의 <xref:System.Reflection.PropertyInfo>,이 메서드를 호출 <xref:System.Linq.Expressions.Expression.Property%2A> 만들려는 <xref:System.Linq.Expressions.MemberExpression>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2278">If `member` is of type <xref:System.Reflection.PropertyInfo>, this method calls <xref:System.Linq.Expressions.Expression.Property%2A> to create the <xref:System.Linq.Expressions.MemberExpression>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2279"><paramref name="member" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2279"><paramref name="member" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2280"><paramref name="member" />가 필드나 속성을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2280"><paramref name="member" /> does not represent a field or property.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MakeTry">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression MakeTry (Type type, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally, System.Linq.Expressions.Expression fault, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.CatchBlock&gt; handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression MakeTry(class System.Type type, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression finally, class System.Linq.Expressions.Expression fault, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.CatchBlock&gt; handlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ MakeTry(Type ^ type, System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ finally, System::Linq::Expressions::Expression ^ fault, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::CatchBlock ^&gt; ^ handlers);" />
      <MemberSignature Language="F#" Value="static member MakeTry : Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.CatchBlock&gt; -&gt; System.Linq.Expressions.TryExpression" Usage="System.Linq.Expressions.Expression.MakeTry (type, body, finally, fault, handlers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="finally" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="fault" Type="System.Linq.Expressions.Expression" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="handlers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.CatchBlock&gt;" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="2ed3f-2281">try 식의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2281">The result type of the try expression.</span></span> <span data-ttu-id="2ed3f-2282">null일 경우 본문 및 모든 처리기에 같은 형식이 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2282">If null, body and all handlers must have identical type.</span></span></param>
        <param name="body"><span data-ttu-id="2ed3f-2283">try 블록의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2283">The body of the try block.</span></span></param>
        <param name="finally"><span data-ttu-id="2ed3f-2284">finally 블록의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2284">The body of the finally block.</span></span> <span data-ttu-id="2ed3f-2285">try 블록에 연결된 finally 블록이 없을 경우 null을 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2285">Pass null if the try block has no finally block associated with it.</span></span></param>
        <param name="fault"><span data-ttu-id="2ed3f-2286">fault 블록의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2286">The body of the fault block.</span></span> <span data-ttu-id="2ed3f-2287">try 블록에 연결된 fault 블록이 없을 경우 null을 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2287">Pass null if the try block has no fault block associated with it.</span></span></param>
        <param name="handlers"><span data-ttu-id="2ed3f-2288">try 블록과 연결되는 catch 문을 나타내는 <see cref="T:System.Linq.Expressions.CatchBlock" />의 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2288">A collection of <see cref="T:System.Linq.Expressions.CatchBlock" />s representing the catch statements to be associated with the try block.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2289">지정된 요소를 사용하여 try 블록을 나타내는 <see cref="T:System.Linq.Expressions.TryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2289">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with the specified elements.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2290">만든 <see cref="T:System.Linq.Expressions.TryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2290">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeUnary">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-2291">적절한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2291">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> by calling the appropriate factory method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeUnary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression MakeUnary (System.Linq.Expressions.ExpressionType unaryType, System.Linq.Expressions.Expression operand, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression MakeUnary(valuetype System.Linq.Expressions.ExpressionType unaryType, class System.Linq.Expressions.Expression operand, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ MakeUnary(System::Linq::Expressions::ExpressionType unaryType, System::Linq::Expressions::Expression ^ operand, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member MakeUnary : System.Linq.Expressions.ExpressionType * System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.MakeUnary (unaryType, operand, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="operand" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="unaryType"><span data-ttu-id="2ed3f-2292">단항 연산의 형식을 지정하는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2292">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of unary operation.</span></span></param>
        <param name="operand"><span data-ttu-id="2ed3f-2293">피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2293">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the operand.</span></span></param>
        <param name="type"><span data-ttu-id="2ed3f-2294">변환할 형식을 지정하는 <see cref="T:System.Type" />입니다. 해당 사항이 없는 경우 <see langword="null" />을 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2294">The <see cref="T:System.Type" /> that specifies the type to be converted to (pass <see langword="null" /> if not applicable).</span></span></param>
        <summary><span data-ttu-id="2ed3f-2295">지정된 피연산자를 사용하고 적합한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2295">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" />, given an operand, by calling the appropriate factory method.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2296">적절한 팩터리 메서드를 호출한 결과인 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2296">The <see cref="T:System.Linq.Expressions.UnaryExpression" /> that results from calling the appropriate factory method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2297">합니다 `unaryType` 매개 변수를 결정 하는 <xref:System.Linq.Expressions.UnaryExpression> 팩터리 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2297">The `unaryType` parameter determines which <xref:System.Linq.Expressions.UnaryExpression> factory method this method calls.</span></span> <span data-ttu-id="2ed3f-2298">예를 들어 경우 `unaryType` 값과 같음 <xref:System.Linq.Expressions.ExpressionType.Convert>,이 메서드를 호출 <xref:System.Linq.Expressions.Expression.Convert%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2298">For example, if `unaryType` is equal to <xref:System.Linq.Expressions.ExpressionType.Convert>, this method invokes <xref:System.Linq.Expressions.Expression.Convert%2A>.</span></span> <span data-ttu-id="2ed3f-2299">`type`이라고 하는 팩터리 메서드에 적용 되지 않는 경우 매개 변수가 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2299">The `type`parameter is ignored if it does not apply to the factory method that is called.</span></span>  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2300"><paramref name="operand" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2300"><paramref name="operand" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2301"><paramref name="unaryType" />이 단항 식 노드에 해당하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2301"><paramref name="unaryType" /> does not correspond to a unary expression node.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MakeUnary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression MakeUnary (System.Linq.Expressions.ExpressionType unaryType, System.Linq.Expressions.Expression operand, Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression MakeUnary(valuetype System.Linq.Expressions.ExpressionType unaryType, class System.Linq.Expressions.Expression operand, class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ MakeUnary(System::Linq::Expressions::ExpressionType unaryType, System::Linq::Expressions::Expression ^ operand, Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member MakeUnary : System.Linq.Expressions.ExpressionType * System.Linq.Expressions.Expression * Type * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.MakeUnary (unaryType, operand, type, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="operand" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="unaryType"><span data-ttu-id="2ed3f-2302">단항 연산의 형식을 지정하는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2302">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of unary operation.</span></span></param>
        <param name="operand"><span data-ttu-id="2ed3f-2303">피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2303">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the operand.</span></span></param>
        <param name="type"><span data-ttu-id="2ed3f-2304">변환할 형식을 지정하는 <see cref="T:System.Type" />입니다. 해당 사항이 없는 경우 <see langword="null" />을 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2304">The <see cref="T:System.Type" /> that specifies the type to be converted to (pass <see langword="null" /> if not applicable).</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-2305">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2305">The <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2306">지정된 피연산자 및 구현 메서드를 사용하고 적합한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2306">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" />, given an operand and implementing method, by calling the appropriate factory method.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2307">적절한 팩터리 메서드를 호출한 결과인 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2307">The <see cref="T:System.Linq.Expressions.UnaryExpression" /> that results from calling the appropriate factory method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2308">합니다 `unaryType` 매개 변수를 결정 하는 <xref:System.Linq.Expressions.UnaryExpression> 팩터리 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2308">The `unaryType` parameter determines which <xref:System.Linq.Expressions.UnaryExpression> factory method this method calls.</span></span> <span data-ttu-id="2ed3f-2309">예를 들어 경우 `unaryType` 값과 같음 <xref:System.Linq.Expressions.ExpressionType.Convert>,이 메서드를 호출 <xref:System.Linq.Expressions.Expression.Convert%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2309">For example, if `unaryType` is equal to <xref:System.Linq.Expressions.ExpressionType.Convert>, this method invokes <xref:System.Linq.Expressions.Expression.Convert%2A>.</span></span> <span data-ttu-id="2ed3f-2310">합니다 `type` 고 `method` 이라고 하는 팩터리 메서드에 적용 되지 않은 경우 매개 변수가 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2310">The `type` and `method` parameters are ignored if they do not apply to the factory method that is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2311"><paramref name="operand" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2311"><paramref name="operand" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2312"><paramref name="unaryType" />이 단항 식 노드에 해당하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2312"><paramref name="unaryType" /> does not correspond to a unary expression node.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="MemberBind">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-2313">멤버의 재귀적 멤버 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2313">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a member.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt; bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MemberInfo member, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.MemberBinding&gt; bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberBind (member As MemberInfo, bindings As IEnumerable(Of MemberBinding)) As MemberMemberBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberMemberBinding ^ MemberBind(System::Reflection::MemberInfo ^ member, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberSignature Language="F#" Value="static member MemberBind : System.Reflection.MemberInfo * seq&lt;System.Linq.Expressions.MemberBinding&gt; -&gt; System.Linq.Expressions.MemberMemberBinding" Usage="System.Linq.Expressions.Expression.MemberBind (member, bindings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="bindings" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt;" />
      </Parameters>
      <Docs>
        <param name="member"><span data-ttu-id="2ed3f-2314"><see cref="T:System.Reflection.MemberInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2314">The <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span></span></param>
        <param name="bindings"><span data-ttu-id="2ed3f-2315"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.MemberBinding" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2315">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2316">필드 또는 속성의 재귀적 멤버 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2316">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a field or property.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2317"><see cref="T:System.Linq.Expressions.MemberMemberBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> 및 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2317">A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2318">`member` 매개 변수를 필드 또는 속성을 나타내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2318">The `member` parameter must represent a field or property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2319"><paramref name="member" /> 또는 <paramref name="bindings" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2319"><paramref name="member" /> or <paramref name="bindings" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2320"><paramref name="member" />가 필드나 속성을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2320"><paramref name="member" /> does not represent a field or property.</span></span>  
  
<span data-ttu-id="2ed3f-2321">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2321">-or-</span></span> 
<span data-ttu-id="2ed3f-2322"><paramref name="bindings" />에 있는 요소의 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="member" />가 나타내는 필드 또는 속성의 형식에 속하는 멤버를 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2322">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the field or property that <paramref name="member" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MemberInfo member, params System.Linq.Expressions.MemberBinding[] bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MemberInfo member, class System.Linq.Expressions.MemberBinding[] bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberBind (member As MemberInfo, ParamArray bindings As MemberBinding()) As MemberMemberBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberMemberBinding ^ MemberBind(System::Reflection::MemberInfo ^ member, ... cli::array &lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberSignature Language="F#" Value="static member MemberBind : System.Reflection.MemberInfo * System.Linq.Expressions.MemberBinding[] -&gt; System.Linq.Expressions.MemberMemberBinding" Usage="System.Linq.Expressions.Expression.MemberBind (member, bindings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="bindings" Type="System.Linq.Expressions.MemberBinding[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="member"><span data-ttu-id="2ed3f-2323"><see cref="T:System.Reflection.MemberInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2323">The <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span></span></param>
        <param name="bindings"><span data-ttu-id="2ed3f-2324"><see cref="T:System.Linq.Expressions.MemberBinding" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2324">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2325">필드 또는 속성의 재귀적 멤버 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2325">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a field or property.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2326"><see cref="T:System.Linq.Expressions.MemberMemberBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> 및 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2326">A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2327">`member` 매개 변수를 필드 또는 속성을 나타내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2327">The `member` parameter must represent a field or property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2328"><paramref name="member" /> 또는 <paramref name="bindings" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2328"><paramref name="member" /> or <paramref name="bindings" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2329"><paramref name="member" />가 필드나 속성을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2329"><paramref name="member" /> does not represent a field or property.</span></span>  
  
<span data-ttu-id="2ed3f-2330">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2330">-or-</span></span> 
<span data-ttu-id="2ed3f-2331"><paramref name="bindings" />에 있는 요소의 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="member" />가 나타내는 필드 또는 속성의 형식에 속하는 멤버를 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2331">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the field or property that <paramref name="member" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MethodInfo propertyAccessor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt; bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MethodInfo propertyAccessor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.MemberBinding&gt; bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberBind (propertyAccessor As MethodInfo, bindings As IEnumerable(Of MemberBinding)) As MemberMemberBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberMemberBinding ^ MemberBind(System::Reflection::MethodInfo ^ propertyAccessor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberSignature Language="F#" Value="static member MemberBind : System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.MemberBinding&gt; -&gt; System.Linq.Expressions.MemberMemberBinding" Usage="System.Linq.Expressions.Expression.MemberBind (propertyAccessor, bindings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="bindings" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyAccessor"><span data-ttu-id="2ed3f-2332">속성 접근자 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2332">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span></span></param>
        <param name="bindings"><span data-ttu-id="2ed3f-2333"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.MemberBinding" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2333">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2334">속성 접근자 메서드를 사용한 멤버의 재귀적 멤버 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2334">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2335"><see cref="T:System.Linq.Expressions.MemberMemberBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />로 액세스되는 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />로 설정되고 <paramref name="propertyAccessor" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2335">A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2336"><paramref name="propertyAccessor" /> 또는 <paramref name="bindings" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2336"><paramref name="propertyAccessor" /> or <paramref name="bindings" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2337"><paramref name="propertyAccessor" />가 속성 접근자 메서드를 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2337"><paramref name="propertyAccessor" /> does not represent a property accessor method.</span></span>  
  
<span data-ttu-id="2ed3f-2338">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2338">-or-</span></span> 
<span data-ttu-id="2ed3f-2339"><paramref name="bindings" />에 있는 요소의 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="propertyAccessor" />가 나타내는 메서드로 액세스되는 속성의 형식에 속하는 멤버를 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2339">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the property accessed by the method that <paramref name="propertyAccessor" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MethodInfo propertyAccessor, params System.Linq.Expressions.MemberBinding[] bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MethodInfo propertyAccessor, class System.Linq.Expressions.MemberBinding[] bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberBind (propertyAccessor As MethodInfo, ParamArray bindings As MemberBinding()) As MemberMemberBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberMemberBinding ^ MemberBind(System::Reflection::MethodInfo ^ propertyAccessor, ... cli::array &lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberSignature Language="F#" Value="static member MemberBind : System.Reflection.MethodInfo * System.Linq.Expressions.MemberBinding[] -&gt; System.Linq.Expressions.MemberMemberBinding" Usage="System.Linq.Expressions.Expression.MemberBind (propertyAccessor, bindings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="bindings" Type="System.Linq.Expressions.MemberBinding[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyAccessor"><span data-ttu-id="2ed3f-2340">속성 접근자 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2340">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span></span></param>
        <param name="bindings"><span data-ttu-id="2ed3f-2341"><see cref="T:System.Linq.Expressions.MemberBinding" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2341">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2342">속성 접근자 메서드를 사용한 멤버의 재귀적 멤버 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2342">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2343"><see cref="T:System.Linq.Expressions.MemberMemberBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />로 액세스되는 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />로 설정되고 <paramref name="propertyAccessor" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2343">A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2344"><paramref name="propertyAccessor" /> 또는 <paramref name="bindings" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2344"><paramref name="propertyAccessor" /> or <paramref name="bindings" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2345"><paramref name="propertyAccessor" />가 속성 접근자 메서드를 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2345"><paramref name="propertyAccessor" /> does not represent a property accessor method.</span></span>  
  
<span data-ttu-id="2ed3f-2346">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2346">-or-</span></span> 
<span data-ttu-id="2ed3f-2347"><paramref name="bindings" />에 있는 요소의 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="propertyAccessor" />가 나타내는 메서드로 액세스되는 속성의 형식에 속하는 멤버를 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2347">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the property accessed by the method that <paramref name="propertyAccessor" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="MemberInit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-2348">새 개체를 만들고 개체의 속성을 초기화하는 식을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2348">Represents an expression that creates a new object and initializes a property of the object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MemberInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberInitExpression MemberInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt; bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberInitExpression MemberInit(class System.Linq.Expressions.NewExpression newExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.MemberBinding&gt; bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberInitExpression ^ MemberInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberSignature Language="F#" Value="static member MemberInit : System.Linq.Expressions.NewExpression * seq&lt;System.Linq.Expressions.MemberBinding&gt; -&gt; System.Linq.Expressions.MemberInitExpression" Usage="System.Linq.Expressions.Expression.MemberInit (newExpression, bindings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="bindings" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression"><span data-ttu-id="2ed3f-2349"><see cref="T:System.Linq.Expressions.NewExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2349">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> property equal to.</span></span></param>
        <param name="bindings"><span data-ttu-id="2ed3f-2350"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.MemberBinding" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2350">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2351">새 개체를 만들고 개체의 속성을 초기화하는 식을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2351">Represents an expression that creates a new object and initializes a property of the object.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2352"><see cref="T:System.Linq.Expressions.MemberInitExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> 및 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2352">A <see cref="T:System.Linq.Expressions.MemberInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> and the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2353"><xref:System.Linq.Expressions.Expression.Type%2A> 결과의 속성 <xref:System.Linq.Expressions.MemberInitExpression> 값과 같음 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 의 속성 `newExpression`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2353">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberInitExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-2354">다음 예제에서는 새 개체를 만들고 개체의 속성을 초기화 하는 식을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2354">The following example demonstrates an expression that creates a new object and initializes a property of the object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#40](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#40)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#40](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#40)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2355"><paramref name="newExpression" /> 또는 <paramref name="bindings" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2355"><paramref name="newExpression" /> or <paramref name="bindings" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2356"><paramref name="bindings" />에 있는 요소의 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="newExpression" />.Type이 나타내는 형식의 멤버를 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2356">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type that <paramref name="newExpression" />.Type represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MemberInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberInitExpression MemberInit (System.Linq.Expressions.NewExpression newExpression, params System.Linq.Expressions.MemberBinding[] bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberInitExpression MemberInit(class System.Linq.Expressions.NewExpression newExpression, class System.Linq.Expressions.MemberBinding[] bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberInitExpression ^ MemberInit(System::Linq::Expressions::NewExpression ^ newExpression, ... cli::array &lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberSignature Language="F#" Value="static member MemberInit : System.Linq.Expressions.NewExpression * System.Linq.Expressions.MemberBinding[] -&gt; System.Linq.Expressions.MemberInitExpression" Usage="System.Linq.Expressions.Expression.MemberInit (newExpression, bindings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="bindings" Type="System.Linq.Expressions.MemberBinding[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression"><span data-ttu-id="2ed3f-2357"><see cref="T:System.Linq.Expressions.NewExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2357">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> property equal to.</span></span></param>
        <param name="bindings"><span data-ttu-id="2ed3f-2358"><see cref="T:System.Linq.Expressions.MemberBinding" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2358">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2359"><see cref="T:System.Linq.Expressions.MemberInitExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2359">Creates a <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2360"><see cref="T:System.Linq.Expressions.MemberInitExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> 및 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2360">A <see cref="T:System.Linq.Expressions.MemberInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> and the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2361"><xref:System.Linq.Expressions.Expression.Type%2A> 결과의 속성 <xref:System.Linq.Expressions.MemberInitExpression> 값과 같음 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 의 속성 `newExpression`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2361">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberInitExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-2362">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.MemberInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.MemberBinding%5B%5D%29> 메서드를는 <xref:System.Linq.Expressions.MemberInitExpression> 새 개체의 두 가지 멤버의 초기화를 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2362">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.MemberInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.MemberBinding%5B%5D%29> method to create a <xref:System.Linq.Expressions.MemberInitExpression> that represents the initialization of two members of a new object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#9)]
 [!code-vb[System.Linq.Expressions.Expression#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2363"><paramref name="newExpression" /> 또는 <paramref name="bindings" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2363"><paramref name="newExpression" /> or <paramref name="bindings" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2364"><paramref name="bindings" />에 있는 요소의 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="newExpression" />.Type이 나타내는 형식의 멤버를 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2364">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type that <paramref name="newExpression" />.Type represents.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Modulo">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-2365">산술 나머지 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2365">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic remainder operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Modulo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Modulo (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Modulo(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Modulo (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Modulo(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Modulo : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Modulo (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-2366"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2366">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-2367"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2367">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2368">산술 나머지 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2368">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic remainder operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2369"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2369">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2370">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2370">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-2371"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2371">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-2372">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2372">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-2373">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2373">Otherwise, they are `false`.</span></span> <span data-ttu-id="2ed3f-2374"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2374">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-2375">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2375">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-2376">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2376">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-2377">다음 규칙은 선택한 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2377">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-2378">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 모듈러스 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2378">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the modulus operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-2379">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2379">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-2380">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2380">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-2381">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2381">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-2382">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2382">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-2383">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2383">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-2384">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2384">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-2385">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2385">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-2386">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2386">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-2387">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2387">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-2388">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2388">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-2389">노드의 유형 미리 정의 된 나머지 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2389">The type of the node is the result type of the predefined modulus operator.</span></span>  
  
-   <span data-ttu-id="2ed3f-2390">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2390">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-2391">노드의 유형 미리 정의 된 나머지 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2391">The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2392"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2392"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-2393"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 나머지 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2393">The modulus operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Modulo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Modulo (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Modulo(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Modulo (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Modulo(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Modulo : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Modulo (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-2394"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2394">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-2395"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2395">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-2396"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2396">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2397">산술 나머지 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2397">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic remainder operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2398"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2398">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2399">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2399">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-2400"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2400">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-2401">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2401">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-2402">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2402">Otherwise, they are `false`.</span></span> <span data-ttu-id="2ed3f-2403"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2403">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-2404">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2404">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-2405">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2405">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-2406">작업에 대 한 구현 메서드는 다음 규칙에 따라 선택 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2406">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="2ed3f-2407">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 노드에 대 한 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2407">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="2ed3f-2408">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 모듈러스 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2408">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the modulus operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-2409">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2409">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-2410">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2410">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-2411">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2411">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-2412">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2412">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-2413">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2413">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-2414">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2414">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-2415">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2415">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-2416">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2416">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-2417">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2417">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-2418">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2418">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-2419">노드의 유형 미리 정의 된 나머지 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2419">The type of the node is the result type of the predefined modulus operator.</span></span>  
  
-   <span data-ttu-id="2ed3f-2420">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2420">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-2421">노드의 유형 미리 정의 된 나머지 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2421">The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2422"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2422"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2423"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2423"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-2424"><paramref name="method" />가 <see langword="null" />이고 나머지 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2424"><paramref name="method" /> is <see langword="null" /> and the modulus operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ModuloAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-2425">나머지 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2425">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ModuloAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ModuloAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModuloAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ModuloAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member ModuloAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ModuloAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-2426"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2426">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-2427"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2427">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2428">나머지 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2428">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2429"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2429">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuloAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ModuloAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModuloAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ModuloAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member ModuloAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ModuloAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-2430"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2430">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-2431"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2431">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-2432"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2432">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2433">나머지 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2433">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2434"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2434">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuloAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ModuloAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModuloAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ModuloAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member ModuloAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ModuloAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-2435"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2435">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-2436"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2436">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-2437"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2437">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="2ed3f-2438"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2438">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2439">나머지 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2439">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2440"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2440">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Multiply">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-2441">오버플로를 검사하지 않는 산술 곱하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2441">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that does not have overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Multiply (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Multiply(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Multiply(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Multiply (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-2442"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2442">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-2443"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2443">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2444">오버플로를 검사하지 않는 산술 곱하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2444">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2445"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2445">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2446">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2446">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-2447"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2447">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-2448">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2448">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-2449">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2449">Otherwise, they are `false`.</span></span> <span data-ttu-id="2ed3f-2450"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2450">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-2451">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2451">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-2452">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2452">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-2453">다음 규칙은 선택한 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2453">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-2454">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 곱하기 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2454">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-2455">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2455">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-2456">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2456">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-2457">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2457">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-2458">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2458">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-2459">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2459">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-2460">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2460">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-2461">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2461">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-2462">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2462">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-2463">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2463">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-2464">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2464">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-2465">노드의 유형 미리 정의 된 곱하기 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2465">The type of the node is the result type of the predefined multiplication operator.</span></span>  
  
-   <span data-ttu-id="2ed3f-2466">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2466">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-2467">노드의 유형 미리 정의 된 곱하기 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2467">The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-2468">다음 코드 예제에는 두 값을 곱합니다 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2468">The following code example shows how to create an expression that multiplies two values.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#27)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2469"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2469"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-2470"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 곱하기 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2470">The multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Multiply (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Multiply(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Multiply(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Multiply (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-2471"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2471">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-2472"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2472">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-2473"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2473">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2474">오버플로를 검사하지 않는 산술 곱하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2474">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2475"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2475">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2476">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2476">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-2477"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2477">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-2478">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2478">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-2479">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2479">Otherwise, they are `false`.</span></span> <span data-ttu-id="2ed3f-2480"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2480">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-2481">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2481">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-2482">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2482">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-2483">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2483">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-2484">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 노드에 대 한 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2484">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="2ed3f-2485">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 곱하기 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2485">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-2486">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2486">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-2487">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2487">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-2488">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2488">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-2489">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2489">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-2490">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2490">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-2491">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2491">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-2492">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2492">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-2493">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2493">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-2494">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2494">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-2495">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2495">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-2496">노드의 유형 미리 정의 된 곱하기 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2496">The type of the node is the result type of the predefined multiplication operator.</span></span>  
  
-   <span data-ttu-id="2ed3f-2497">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2497">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-2498">노드의 유형 미리 정의 된 곱하기 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2498">The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2499"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2499"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2500"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2500"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-2501"><paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 곱하기 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2501"><paramref name="method" /> is <see langword="null" /> and the multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-2502">오버플로를 검사하지 않는 곱하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2502">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member MultiplyAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-2503"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2503">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-2504"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2504">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2505">오버플로를 검사하지 않는 곱하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2505">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2506"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2506">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member MultiplyAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-2507"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2507">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-2508"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2508">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-2509"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2509">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2510">오버플로를 검사하지 않는 곱하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2510">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2511"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2511">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member MultiplyAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-2512"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2512">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-2513"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2513">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-2514"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2514">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="2ed3f-2515"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2515">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2516">오버플로를 검사하지 않는 곱하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2516">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2517"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2517">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyAssignChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-2518">오버플로를 검사하는 곱하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2518">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssignChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member MultiplyAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyAssignChecked (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-2519"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2519">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-2520"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2520">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2521">오버플로를 검사하는 곱하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2521">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2522"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2522">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssignChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member MultiplyAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyAssignChecked (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-2523"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2523">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-2524"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2524">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-2525"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2525">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2526">오버플로를 검사하는 곱하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2526">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2527"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2527">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssignChecked (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member MultiplyAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyAssignChecked (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-2528"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2528">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-2529"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2529">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-2530"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2530">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="2ed3f-2531"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2531">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2532">오버플로를 검사하는 곱하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2532">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2533"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2533">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-2534">오버플로를 검사하는 산술 곱하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2534">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that has overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member MultiplyChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyChecked (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-2535"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2535">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-2536"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2536">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2537">오버플로를 검사하는 산술 곱하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2537">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2538"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2538">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2539">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2539">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-2540"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2540">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-2541">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2541">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-2542">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2542">Otherwise, they are `false`.</span></span> <span data-ttu-id="2ed3f-2543"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2543">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-2544">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2544">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-2545">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2545">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-2546">다음 규칙은 선택한 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2546">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-2547">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 곱하기 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2547">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-2548">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2548">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-2549">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2549">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-2550">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2550">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-2551">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2551">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-2552">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2552">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-2553">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2553">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-2554">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2554">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-2555">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2555">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-2556">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2556">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-2557">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2557">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-2558">노드의 유형 미리 정의 된 곱하기 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2558">The type of the node is the result type of the predefined multiplication operator.</span></span>  
  
-   <span data-ttu-id="2ed3f-2559">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2559">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-2560">노드의 유형 미리 정의 된 곱하기 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2560">The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2561"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2561"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-2562"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 곱하기 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2562">The multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MultiplyChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member MultiplyChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyChecked (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-2563"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2563">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-2564"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2564">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-2565"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2565">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2566">오버플로를 검사하는 산술 곱하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2566">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2567"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2567">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2568">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2568">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-2569"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2569">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-2570">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2570">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-2571">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2571">Otherwise, they are `false`.</span></span> <span data-ttu-id="2ed3f-2572"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2572">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-2573">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2573">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-2574">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2574">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-2575">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2575">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-2576">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 노드에 대 한 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2576">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="2ed3f-2577">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 곱하기 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2577">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-2578">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2578">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-2579">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2579">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-2580">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2580">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-2581">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2581">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-2582">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2582">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-2583">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2583">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-2584">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2584">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-2585">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2585">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-2586">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2586">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-2587">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2587">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-2588">노드의 유형 미리 정의 된 곱하기 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2588">The type of the node is the result type of the predefined multiplication operator.</span></span>  
  
-   <span data-ttu-id="2ed3f-2589">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2589">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-2590">노드의 유형 미리 정의 된 곱하기 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2590">The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2591"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2591"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2592"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2592"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-2593"><paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 곱하기 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2593"><paramref name="method" /> is <see langword="null" /> and the multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Negate">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-2594">산술 부정 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2594">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Negate (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Negate(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Negate(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Negate : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Negate expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-2595"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2595">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2596">산술 부정 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2596">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2597"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2597">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2598">합니다 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> 결과 속성 <xref:System.Linq.Expressions.UnaryExpression> 구현 방법으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2598">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="2ed3f-2599"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2599">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-2600">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2600">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-2601">이 고, 그렇지 않으면입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2601">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-2602">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2602">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-2603">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2603">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-2604">경우 `expression`합니다. 형식이 단항 빼기 연산자를 정의 하는 사용자 정의 형식이 <xref:System.Reflection.MethodInfo> 는 나타내는 연산자가 구현 메서드가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2604">If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-2605">그렇지 않은 경우, `expression`합니다. 형식은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2605">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-2606">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2606">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-2607">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2607">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-2608">경우 `expression`합니다. 형식은 구현 메서드의 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2608">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-2609">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2609">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-2610">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2610">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-2611">`expression`. 형식이 nullable 값 형식인와 구현 메서드의 인수 형식에 해당 하는 nullable이 아닌 값 형식 같습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2611">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-2612">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2612">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-2613">구현 메서드가 `null`, 노드 유형이 `expression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2613">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="2ed3f-2614">경우 `expression`합니다. 형식이 nullable이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2614">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-2615">그렇지 않은 경우 노드가 리프트 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2615">Otherwise, the node is lifted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-2616">다음 예제에는 산술 부정 연산을 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2616">The following example demonstrates how to create an expression that represents an arithmetic negation operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#50](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#50)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#50](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2617"><paramref name="expression" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2617"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-2618"><paramref name="expression" />.Type에 단항 빼기 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2618">The unary minus operator is not defined for <paramref name="expression" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Negate (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Negate(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Negate(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Negate : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Negate (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-2619"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2619">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-2620"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2620">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2621">산술 부정 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2621">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2622"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2622">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2623">합니다 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> 결과 속성 <xref:System.Linq.Expressions.UnaryExpression> 구현 방법으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2623">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="2ed3f-2624"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2624">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-2625">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2625">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-2626">이 고, 그렇지 않으면입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2626">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-2627">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2627">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-2628">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2628">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-2629">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드 인수 하나를 사용 하는 것이 노드에 대 한 구현 메서드.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2629">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="2ed3f-2630">경우 `expression`합니다. 형식이 단항 빼기 연산자를 정의 하는 사용자 정의 형식이 <xref:System.Reflection.MethodInfo> 는 나타내는 연산자가 구현 메서드가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2630">If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-2631">그렇지 않은 경우, `expression`합니다. 형식은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2631">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-2632">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2632">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-2633">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2633">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-2634">경우 `expression`합니다. 형식은 구현 메서드의 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2634">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-2635">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2635">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-2636">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2636">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-2637">`expression`. 형식이 nullable 값 형식인와 구현 메서드의 인수 형식에 해당 하는 nullable이 아닌 값 형식 같습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2637">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-2638">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2638">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-2639">구현 메서드가 `null`, 노드 유형이 `expression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2639">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="2ed3f-2640">경우 `expression`합니다. 형식이 nullable이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2640">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-2641">그렇지 않은 경우 노드가 리프트 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2641">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2642"><paramref name="expression" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2642"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2643"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니거나, 정확하게 하나의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2643"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-2644"><paramref name="method" />가 <see langword="null" />이고 <paramref name="expression" />.Type에 단항 빼기 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2644"><paramref name="method" /> is <see langword="null" /> and the unary minus operator is not defined for <paramref name="expression" />.Type.</span></span>  
  
<span data-ttu-id="2ed3f-2645">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2645">-or-</span></span> 
 <span data-ttu-id="2ed3f-2646"><paramref name="expression" />.Type 또는 이 형식이 nullable 값 형식인 경우 nullable이 아닌 해당 형식을 <paramref name="method" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2646"><paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="NegateChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-2647">오버플로를 검사하는 산술 부정 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2647">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation that has overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NegateChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression NegateChecked (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression NegateChecked(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ NegateChecked(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member NegateChecked : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.NegateChecked expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-2648"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2648">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2649">오버플로를 검사하는 산술 부정 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2649">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2650"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2650">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2651">합니다 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> 결과 속성 <xref:System.Linq.Expressions.UnaryExpression> 구현 방법으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2651">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="2ed3f-2652"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2652">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-2653">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2653">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-2654">이 고, 그렇지 않으면입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2654">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-2655">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2655">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-2656">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2656">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-2657">경우 `expression`합니다. 형식이 단항 빼기 연산자를 정의 하는 사용자 정의 형식이 <xref:System.Reflection.MethodInfo> 는 나타내는 연산자가 구현 메서드가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2657">If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-2658">그렇지 않은 경우, `expression`합니다. 형식은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2658">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-2659">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2659">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-2660">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2660">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-2661">경우 `expression`합니다. 형식은 구현 메서드의 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2661">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-2662">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2662">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-2663">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2663">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-2664">`expression`. 형식이 nullable 값 형식인와 구현 메서드의 인수 형식에 해당 하는 nullable이 아닌 값 형식 같습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2664">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-2665">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2665">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-2666">구현 메서드가 `null`, 노드 유형이 `expression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2666">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="2ed3f-2667">경우 `expression`합니다. 형식이 nullable이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2667">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-2668">그렇지 않은 경우 노드가 리프트 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2668">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2669"><paramref name="expression" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2669"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-2670"><paramref name="expression" />.Type에 단항 빼기 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2670">The unary minus operator is not defined for <paramref name="expression" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="NegateChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression NegateChecked (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression NegateChecked(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ NegateChecked(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member NegateChecked : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.NegateChecked (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-2671"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2671">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-2672"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2672">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2673">오버플로를 검사하는 산술 부정 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2673">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation that has overflow checking.</span></span> <span data-ttu-id="2ed3f-2674">구현 메서드를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2674">The implementing method can be specified.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2675"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2675">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2676">합니다 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> 결과 속성 <xref:System.Linq.Expressions.UnaryExpression> 구현 방법으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2676">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="2ed3f-2677"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2677">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-2678">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2678">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-2679">이 고, 그렇지 않으면입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2679">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-2680">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2680">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-2681">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2681">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-2682">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드 인수 하나를 사용 하는 것이 노드에 대 한 구현 메서드.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2682">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="2ed3f-2683">경우 `expression`합니다. 형식이 단항 빼기 연산자를 정의 하는 사용자 정의 형식이 <xref:System.Reflection.MethodInfo> 는 나타내는 연산자가 구현 메서드가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2683">If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-2684">그렇지 않은 경우, `expression`합니다. 형식은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2684">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-2685">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2685">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-2686">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2686">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-2687">경우 `expression`합니다. 형식은 구현 메서드의 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2687">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-2688">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2688">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-2689">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2689">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-2690">`expression`. 형식이 nullable 값 형식인와 구현 메서드의 인수 형식에 해당 하는 nullable이 아닌 값 형식 같습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2690">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-2691">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2691">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-2692">구현 메서드가 `null`, 노드 유형이 `expression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2692">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="2ed3f-2693">경우 `expression`합니다. 형식이 nullable이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2693">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-2694">그렇지 않은 경우 노드가 리프트 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2694">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2695"><paramref name="expression" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2695"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2696"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니거나, 정확하게 하나의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2696"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-2697"><paramref name="method" />가 <see langword="null" />이고 <paramref name="expression" />.Type에 단항 빼기 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2697"><paramref name="method" /> is <see langword="null" /> and the unary minus operator is not defined for <paramref name="expression" />.Type.</span></span>  
  
<span data-ttu-id="2ed3f-2698">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2698">-or-</span></span> 
 <span data-ttu-id="2ed3f-2699"><paramref name="expression" />.Type 또는 이 형식이 nullable 값 형식인 경우 nullable이 아닌 해당 형식을 <paramref name="method" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2699"><paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="New">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-2700"><see cref="T:System.Linq.Expressions.NewExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2700">Creates a <see cref="T:System.Linq.Expressions.NewExpression" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor);" />
      <MemberSignature Language="F#" Value="static member New : System.Reflection.ConstructorInfo -&gt; System.Linq.Expressions.NewExpression" Usage="System.Linq.Expressions.Expression.New constructor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
      </Parameters>
      <Docs>
        <param name="constructor"><span data-ttu-id="2ed3f-2701"><see cref="T:System.Reflection.ConstructorInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2701">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2702">인수를 받지 않는 지정된 생성자를 호출하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2702">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor that takes no arguments.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2703"><see cref="T:System.Linq.Expressions.NewExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.New" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2703">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2704"><xref:System.Linq.Expressions.NewExpression.Arguments%2A> 하 고 <xref:System.Linq.Expressions.NewExpression.Members%2A> 결과 속성 <xref:System.Linq.Expressions.NewExpression> 은 빈 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2704">The <xref:System.Linq.Expressions.NewExpression.Arguments%2A> and <xref:System.Linq.Expressions.NewExpression.Members%2A> properties of the resulting <xref:System.Linq.Expressions.NewExpression> are empty collections.</span></span> <span data-ttu-id="2ed3f-2705">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성을 나타내는 생성자의 선언 형식과 나타냅니다 `constructor`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2705">The <xref:System.Linq.Expressions.Expression.Type%2A> property represents the declaring type of the constructor represented by `constructor`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2706"><paramref name="constructor" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2706"><paramref name="constructor" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2707"><paramref name="constructor" />가 나타내는 생성자에 매개 변수가 하나 이상 있는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2707">The constructor that <paramref name="constructor" /> represents has at least one parameter.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member New : Type -&gt; System.Linq.Expressions.NewExpression" Usage="System.Linq.Expressions.Expression.New type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="2ed3f-2708">인수를 받지 않는 생성자가 있는 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2708">A <see cref="T:System.Type" /> that has a constructor that takes no arguments.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2709">지정된 형식의 매개 변수가 없는 생성자를 호출하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2709">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the parameterless constructor of the specified type.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2710"><see cref="T:System.Linq.Expressions.NewExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.New" /> 속성이 지정된 형식에 대한 매개 변수 없이 생성자를 나타내는 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />로 설정된 <see cref="T:System.Reflection.ConstructorInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2710">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property set to the <see cref="T:System.Reflection.ConstructorInfo" /> that represents the constructor without parameters for the specified type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2711">`type` 매개 변수는 매개 변수가 없는 생성자가 있는 형식을 나타내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2711">The `type` parameter must represent a type that has a constructor without parameters.</span></span>  
  
 <span data-ttu-id="2ed3f-2712"><xref:System.Linq.Expressions.NewExpression.Arguments%2A> 하 고 <xref:System.Linq.Expressions.NewExpression.Members%2A> 결과 속성 <xref:System.Linq.Expressions.NewExpression> 은 빈 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2712">The <xref:System.Linq.Expressions.NewExpression.Arguments%2A> and <xref:System.Linq.Expressions.NewExpression.Members%2A> properties of the resulting <xref:System.Linq.Expressions.NewExpression> are empty collections.</span></span> <span data-ttu-id="2ed3f-2713">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성이 `type`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2713">The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to `type`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-2714">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.New%28System.Type%29> 메서드를를 <xref:System.Linq.Expressions.NewExpression> 매개 변수가 없는 생성자를 호출 하 여 사전 개체의 새 인스턴스를 생성 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2714">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.New%28System.Type%29> method to create a <xref:System.Linq.Expressions.NewExpression> that represents constructing a new instance of a dictionary object by calling the constructor without parameters.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#10)]
 [!code-vb[System.Linq.Expressions.Expression#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2715"><paramref name="type" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2715"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2716"><paramref name="type" />이 나타내는 형식에 매개 변수가 없는 생성자가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2716">The type that <paramref name="type" /> represents does not have a constructor without parameters.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo, arguments As IEnumerable(Of Expression)) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member New : System.Reflection.ConstructorInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.NewExpression" Usage="System.Linq.Expressions.Expression.New (constructor, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="constructor"><span data-ttu-id="2ed3f-2717"><see cref="T:System.Reflection.ConstructorInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2717">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span></span></param>
        <param name="arguments"><span data-ttu-id="2ed3f-2718"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2718">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2719">지정된 인수를 사용하여 지정된 생성자를 호출하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2719">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2720"><see cref="T:System.Linq.Expressions.NewExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.New" /> 및 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2720">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> and <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2721">합니다 `arguments` 가 나타내는 생성자의 매개 변수 수가 같은 요소의 개수가 포함 되어야 합니다 `constructor`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2721">The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`.</span></span> <span data-ttu-id="2ed3f-2722">경우 `arguments` 됩니다 `null`, 비어 간주 됩니다 및 <xref:System.Linq.Expressions.NewExpression.Arguments%2A> 결과의 속성 <xref:System.Linq.Expressions.NewExpression> 빈 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2722">If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span>  
  
 <span data-ttu-id="2ed3f-2723">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.NewExpression> 가 나타내는 생성자의 선언 형식을 나타내는 `constructor`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2723">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor represented by `constructor`.</span></span> <span data-ttu-id="2ed3f-2724"><xref:System.Linq.Expressions.NewExpression.Members%2A> 속성은 빈 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2724">The <xref:System.Linq.Expressions.NewExpression.Members%2A> property is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2725"><paramref name="constructor" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2725"><paramref name="constructor" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2ed3f-2726">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2726">-or-</span></span> 
<span data-ttu-id="2ed3f-2727"><paramref name="arguments" />의 요소가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2727">An element of <paramref name="arguments" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2728"><paramref name="arguments" /> 매개 변수에 들어 있는 요소 수가 <paramref name="constructor" />가 나타내는 생성자의 매개 변수 수와 다른 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2728">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.</span></span>  
  
<span data-ttu-id="2ed3f-2729">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2729">-or-</span></span> 
<span data-ttu-id="2ed3f-2730"><paramref name="arguments" />의 요소에 대한 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="constructor" />가 나타내는 생성자의 해당 매개 변수 형식에 적용할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2730">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo, ParamArray arguments As Expression()) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member New : System.Reflection.ConstructorInfo * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.NewExpression" Usage="System.Linq.Expressions.Expression.New (constructor, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="constructor"><span data-ttu-id="2ed3f-2731"><see cref="T:System.Reflection.ConstructorInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2731">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span></span></param>
        <param name="arguments"><span data-ttu-id="2ed3f-2732"><see cref="T:System.Linq.Expressions.Expression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2732">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2733">지정된 인수를 사용하여 지정된 생성자를 호출하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2733">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2734"><see cref="T:System.Linq.Expressions.NewExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.New" /> 및 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2734">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> and <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2735">합니다 `arguments` 가 나타내는 생성자의 매개 변수 수가 같은 요소의 개수가 포함 되어야 합니다 `constructor`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2735">The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`.</span></span> <span data-ttu-id="2ed3f-2736">경우 `arguments` 됩니다 `null`, 비어 간주 됩니다 및 <xref:System.Linq.Expressions.NewExpression.Arguments%2A> 결과의 속성 <xref:System.Linq.Expressions.NewExpression> 빈 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2736">If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span>  
  
 <span data-ttu-id="2ed3f-2737">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.NewExpression> 가 나타내는 생성자의 선언 형식을 나타내는 `constructor`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2737">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor represented by `constructor`.</span></span> <span data-ttu-id="2ed3f-2738"><xref:System.Linq.Expressions.NewExpression.Members%2A> 속성은 빈 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2738">The <xref:System.Linq.Expressions.NewExpression.Members%2A> property is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2739"><paramref name="constructor" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2739"><paramref name="constructor" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2ed3f-2740">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2740">-or-</span></span> 
<span data-ttu-id="2ed3f-2741"><paramref name="arguments" />의 요소가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2741">An element of <paramref name="arguments" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2742"><paramref name="arguments" />의 길이가 <paramref name="constructor" />가 나타내는 생성자의 매개 변수 수와 일치하는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2742">The length of <paramref name="arguments" /> does match the number of parameters for the constructor that <paramref name="constructor" /> represents.</span></span>  
  
<span data-ttu-id="2ed3f-2743">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2743">-or-</span></span> 
<span data-ttu-id="2ed3f-2744"><paramref name="arguments" />의 요소에 대한 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="constructor" />가 나타내는 생성자의 해당 매개 변수 형식에 적용할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2744">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments, System.Collections.Generic.IEnumerable&lt;System.Reflection.MemberInfo&gt; members);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments, class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.MemberInfo&gt; members) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo, arguments As IEnumerable(Of Expression), members As IEnumerable(Of MemberInfo)) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments, System::Collections::Generic::IEnumerable&lt;System::Reflection::MemberInfo ^&gt; ^ members);" />
      <MemberSignature Language="F#" Value="static member New : System.Reflection.ConstructorInfo * seq&lt;System.Linq.Expressions.Expression&gt; * seq&lt;System.Reflection.MemberInfo&gt; -&gt; System.Linq.Expressions.NewExpression" Usage="System.Linq.Expressions.Expression.New (constructor, arguments, members)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
        <Parameter Name="members" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.MemberInfo&gt;" />
      </Parameters>
      <Docs>
        <param name="constructor"><span data-ttu-id="2ed3f-2745"><see cref="T:System.Reflection.ConstructorInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2745">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span></span></param>
        <param name="arguments"><span data-ttu-id="2ed3f-2746"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2746">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</span></span></param>
        <param name="members"><span data-ttu-id="2ed3f-2747"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Reflection.MemberInfo" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.NewExpression.Members" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2747">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Reflection.MemberInfo" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Members" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2748">지정된 인수를 사용하여 지정된 생성자를 호출하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2748">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</span></span> <span data-ttu-id="2ed3f-2749">생성자에서 초기화되는 필드에 액세스하는 멤버가 지정됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2749">The members that access the constructor initialized fields are specified.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2750"><see cref="T:System.Linq.Expressions.NewExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.New" />, <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 및 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewExpression.Members" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2750">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> and <see cref="P:System.Linq.Expressions.NewExpression.Members" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2751">합니다 `arguments` 가 나타내는 생성자의 매개 변수 수가 같은 요소의 개수가 포함 되어야 합니다 `constructor`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2751">The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`.</span></span> <span data-ttu-id="2ed3f-2752">경우 `arguments` 됩니다 `null`, 비어 간주 됩니다 및 <xref:System.Linq.Expressions.NewExpression.Arguments%2A> 결과의 속성 <xref:System.Linq.Expressions.NewExpression> 빈 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2752">If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span>  
  
 <span data-ttu-id="2ed3f-2753">경우 `members` 됩니다 `null`의 <xref:System.Linq.Expressions.NewExpression.Members%2A> 결과의 속성 <xref:System.Linq.Expressions.NewExpression> 빈 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2753">If `members` is `null`, the <xref:System.Linq.Expressions.NewExpression.Members%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span> <span data-ttu-id="2ed3f-2754">경우 `members` 아닙니다 `null`, 요소 수가 있어야 `arguments` 요소당 아니어야 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2754">If `members` is not `null`, it must have the same number of elements as `arguments` and each element must not be `null`.</span></span> <span data-ttu-id="2ed3f-2755">각 요소 `members` 이어야 합니다는 <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> 하거나 <xref:System.Reflection.MethodInfo> 가 나타내는 생성자의 선언 형식에 인스턴스 멤버를 나타내는 `constructor`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2755">Each element of `members` must be a <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> or <xref:System.Reflection.MethodInfo> that represents an instance member on the declaring type of the constructor represented by `constructor`.</span></span> <span data-ttu-id="2ed3f-2756">속성이 가져야 속성을 나타내는 경우는 `get` 접근자입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2756">If it represents a property, the property must have a `get` accessor.</span></span> <span data-ttu-id="2ed3f-2757">해당 요소 `arguments` 의 각 요소에 대해 `members` 있어야를 <xref:System.Linq.Expressions.Expression.Type%2A> 멤버의 형식에 할당할 수 있는 형식을 나타내는 속성은는 `members` 요소를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2757">The corresponding element of `arguments` for each element of `members` must have a <xref:System.Linq.Expressions.Expression.Type%2A> property that represents a type that is assignable to the type of the member that the `members` element represents.</span></span>  
  
 <span data-ttu-id="2ed3f-2758">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.NewExpression> 생성자 선언 형식을 나타내는 `constructor` 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2758">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor that `constructor` represents.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2759"><paramref name="constructor" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2759"><paramref name="constructor" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2ed3f-2760">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2760">-or-</span></span> 
<span data-ttu-id="2ed3f-2761"><paramref name="arguments" />의 요소가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2761">An element of <paramref name="arguments" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2ed3f-2762">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2762">-or-</span></span> 
<span data-ttu-id="2ed3f-2763"><paramref name="members" />의 요소가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2763">An element of <paramref name="members" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2764"><paramref name="arguments" /> 매개 변수에 들어 있는 요소 수가 <paramref name="constructor" />가 나타내는 생성자의 매개 변수 수와 다른 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2764">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.</span></span>  
  
<span data-ttu-id="2ed3f-2765">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2765">-or-</span></span> 
<span data-ttu-id="2ed3f-2766"><paramref name="arguments" />의 요소에 대한 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="constructor" />가 나타내는 생성자의 해당 매개 변수 형식에 적용할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2766">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</span></span>  
  
<span data-ttu-id="2ed3f-2767">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2767">-or-</span></span> 
<span data-ttu-id="2ed3f-2768"><paramref name="members" /> 매개 변수의 요소 수가 <paramref name="arguments" />와 다른 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2768">The <paramref name="members" /> parameter does not have the same number of elements as <paramref name="arguments" />.</span></span>  
  
<span data-ttu-id="2ed3f-2769">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2769">-or-</span></span> 
<span data-ttu-id="2ed3f-2770"><paramref name="arguments" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 <paramref name="members" />의 해당 속성이 나타내는 멤버 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2770">An element of <paramref name="arguments" /> has a <see cref="P:System.Linq.Expressions.Expression.Type" /> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <paramref name="members" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments, params System.Reflection.MemberInfo[] members);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments, class System.Reflection.MemberInfo[] members) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo, arguments As IEnumerable(Of Expression), ParamArray members As MemberInfo()) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments, ... cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ members);" />
      <MemberSignature Language="F#" Value="static member New : System.Reflection.ConstructorInfo * seq&lt;System.Linq.Expressions.Expression&gt; * System.Reflection.MemberInfo[] -&gt; System.Linq.Expressions.NewExpression" Usage="System.Linq.Expressions.Expression.New (constructor, arguments, members)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
        <Parameter Name="members" Type="System.Reflection.MemberInfo[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="constructor"><span data-ttu-id="2ed3f-2771"><see cref="T:System.Reflection.ConstructorInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2771">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span></span></param>
        <param name="arguments"><span data-ttu-id="2ed3f-2772"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2772">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</span></span></param>
        <param name="members"><span data-ttu-id="2ed3f-2773"><see cref="T:System.Reflection.MemberInfo" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2773">An array of <see cref="T:System.Reflection.MemberInfo" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Members" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2774">지정된 인수를 사용하여 지정된 생성자를 호출하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2774">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</span></span> <span data-ttu-id="2ed3f-2775">생성자에서 초기화되는 필드에 액세스하는 멤버가 배열로 지정됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2775">The members that access the constructor initialized fields are specified as an array.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2776"><see cref="T:System.Linq.Expressions.NewExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.New" />, <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 및 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewExpression.Members" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2776">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> and <see cref="P:System.Linq.Expressions.NewExpression.Members" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2777">합니다 `arguments` 가 나타내는 생성자의 매개 변수 수가 같은 요소의 개수가 포함 되어야 합니다 `constructor`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2777">The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`.</span></span> <span data-ttu-id="2ed3f-2778">경우 `arguments` 됩니다 `null`, 비어 간주 됩니다 및 <xref:System.Linq.Expressions.NewExpression.Arguments%2A> 결과의 속성 <xref:System.Linq.Expressions.NewExpression> 빈 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2778">If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span>  
  
 <span data-ttu-id="2ed3f-2779">경우 `members` 됩니다 `null`의 <xref:System.Linq.Expressions.NewExpression.Members%2A> 결과의 속성 <xref:System.Linq.Expressions.NewExpression> 빈 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2779">If `members` is `null`, the <xref:System.Linq.Expressions.NewExpression.Members%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span> <span data-ttu-id="2ed3f-2780">경우 `members` 아닙니다 `null`, 요소 수가 있어야 `arguments` 요소당 아니어야 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2780">If `members` is not `null`, it must have the same number of elements as `arguments` and each element must not be `null`.</span></span> <span data-ttu-id="2ed3f-2781">각 요소 `members` 이어야 합니다는 <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> 하거나 <xref:System.Reflection.MethodInfo> 가 나타내는 생성자의 선언 형식에 인스턴스 멤버를 나타내는 `constructor`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2781">Each element of `members` must be a <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> or <xref:System.Reflection.MethodInfo> that represents an instance member on the declaring type of the constructor represented by `constructor`.</span></span> <span data-ttu-id="2ed3f-2782">속성을 나타내는 경우 속성은 연결 된 필드의 값을 검색할 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2782">If it represents a property, the property must be able to retrieve the value of the associated field.</span></span> <span data-ttu-id="2ed3f-2783">해당 요소 `arguments` 의 각 요소에 대해 `members` 있어야를 <xref:System.Linq.Expressions.Expression.Type%2A> 멤버의 형식에 할당할 수 있는 형식을 나타내는 속성은는 `members` 요소를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2783">The corresponding element of `arguments` for each element of `members` must have a <xref:System.Linq.Expressions.Expression.Type%2A> property that represents a type that is assignable to the type of the member that the `members` element represents.</span></span>  
  
 <span data-ttu-id="2ed3f-2784">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.NewExpression> 생성자 선언 형식을 나타내는 `constructor` 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2784">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor that `constructor` represents.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2785"><paramref name="constructor" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2785"><paramref name="constructor" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2ed3f-2786">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2786">-or-</span></span> 
<span data-ttu-id="2ed3f-2787"><paramref name="arguments" />의 요소가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2787">An element of <paramref name="arguments" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2ed3f-2788">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2788">-or-</span></span> 
<span data-ttu-id="2ed3f-2789"><paramref name="members" />의 요소가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2789">An element of <paramref name="members" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2790"><paramref name="arguments" /> 매개 변수에 들어 있는 요소 수가 <paramref name="constructor" />가 나타내는 생성자의 매개 변수 수와 다른 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2790">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.</span></span>  
  
<span data-ttu-id="2ed3f-2791">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2791">-or-</span></span> 
<span data-ttu-id="2ed3f-2792"><paramref name="arguments" />의 요소에 대한 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="constructor" />가 나타내는 생성자의 해당 매개 변수 형식에 적용할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2792">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</span></span>  
  
<span data-ttu-id="2ed3f-2793">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2793">-or-</span></span> 
<span data-ttu-id="2ed3f-2794"><paramref name="members" /> 매개 변수의 요소 수가 <paramref name="arguments" />와 다른 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2794">The <paramref name="members" /> parameter does not have the same number of elements as <paramref name="arguments" />.</span></span>  
  
<span data-ttu-id="2ed3f-2795">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2795">-or-</span></span> 
<span data-ttu-id="2ed3f-2796"><paramref name="arguments" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 <paramref name="members" />의 해당 속성이 나타내는 멤버 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2796">An element of <paramref name="arguments" /> has a <see cref="P:System.Linq.Expressions.Expression.Type" /> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <paramref name="members" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="NewArrayBounds">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-2797">지정된 차수의 배열을 만드는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewArrayExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2797">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating an array that has a specified rank.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NewArrayBounds">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayBounds (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; bounds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayBounds(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; bounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewArrayExpression ^ NewArrayBounds(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ bounds);" />
      <MemberSignature Language="F#" Value="static member NewArrayBounds : Type * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.NewArrayExpression" Usage="System.Linq.Expressions.Expression.NewArrayBounds (type, bounds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="bounds" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="2ed3f-2798">배열의 요소 형식을 나타내는 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2798">A <see cref="T:System.Type" /> that represents the element type of the array.</span></span></param>
        <param name="bounds"><span data-ttu-id="2ed3f-2799"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2799">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2800">지정된 차수의 배열을 만드는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewArrayExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2800">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating an array that has a specified rank.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2801"><see cref="T:System.Linq.Expressions.NewArrayExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2801">A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2802">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.NewArrayExpression> 차수가의 길이 같으면 배열 형식을 나타냅니다 `bounds` 가지 며 요소 형식이 고 `type`입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2802">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is equal to the length of `bounds` and whose element type is `type`.</span></span>  
  
 <span data-ttu-id="2ed3f-2803">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성의 각 요소 `bounds` 정수 계열 형식을 나타내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2803">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `bounds` must represent an integral type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-2804">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> 하는 문자열 배열을 작성을 나타내는 식 트리를 만드는 메서드가 순위가 2입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2804">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> method to create an expression tree that represents creating a string array that has a rank of 2.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#2)]
 [!code-vb[System.Linq.Expressions.Expression#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2805"><paramref name="type" /> 또는 <paramref name="bounds" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2805"><paramref name="type" /> or <paramref name="bounds" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2ed3f-2806">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2806">-or-</span></span> 
<span data-ttu-id="2ed3f-2807"><paramref name="bounds" />의 요소가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2807">An element of <paramref name="bounds" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2808"><paramref name="bounds" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 정수 계열 형식을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2808">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="bounds" /> does not represent an integral type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="NewArrayBounds">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayBounds (Type type, params System.Linq.Expressions.Expression[] bounds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayBounds(class System.Type type, class System.Linq.Expressions.Expression[] bounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewArrayExpression ^ NewArrayBounds(Type ^ type, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ bounds);" />
      <MemberSignature Language="F#" Value="static member NewArrayBounds : Type * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.NewArrayExpression" Usage="System.Linq.Expressions.Expression.NewArrayBounds (type, bounds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="bounds" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="2ed3f-2809">배열의 요소 형식을 나타내는 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2809">A <see cref="T:System.Type" /> that represents the element type of the array.</span></span></param>
        <param name="bounds"><span data-ttu-id="2ed3f-2810"><see cref="T:System.Linq.Expressions.Expression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2810">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2811">지정된 차수의 배열을 만드는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewArrayExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2811">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating an array that has a specified rank.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2812"><see cref="T:System.Linq.Expressions.NewArrayExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2812">A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2813">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.NewArrayExpression> 차수가의 길이 같으면 배열 형식을 나타냅니다 `bounds` 가지 며 요소 형식이 고 `type`입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2813">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is equal to the length of `bounds` and whose element type is `type`.</span></span>  
  
 <span data-ttu-id="2ed3f-2814">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성의 각 요소 `bounds` 정수 계열 형식을 나타내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2814">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `bounds` must represent an integral type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-2815">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> 하는 문자열 배열을 작성을 나타내는 식 트리를 만드는 메서드가 순위가 2입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2815">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> method to create an expression tree that represents creating a string array that has a rank of 2.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#2)]
 [!code-vb[System.Linq.Expressions.Expression#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2816"><paramref name="type" /> 또는 <paramref name="bounds" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2816"><paramref name="type" /> or <paramref name="bounds" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2ed3f-2817">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2817">-or-</span></span> 
<span data-ttu-id="2ed3f-2818"><paramref name="bounds" />의 요소가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2818">An element of <paramref name="bounds" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2819"><paramref name="bounds" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 정수 계열 형식을 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2819">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="bounds" /> does not represent an integral type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="NewArrayInit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-2820">1차원 배열을 만들고 요소 목록으로 초기화하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewArrayExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2820">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating a one-dimensional array and initializing it from a list of elements.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NewArrayInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayInit (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayInit(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewArrayExpression ^ NewArrayInit(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member NewArrayInit : Type * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.NewArrayExpression" Usage="System.Linq.Expressions.Expression.NewArrayInit (type, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="2ed3f-2821">배열의 요소 형식을 나타내는 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2821">A <see cref="T:System.Type" /> that represents the element type of the array.</span></span></param>
        <param name="initializers"><span data-ttu-id="2ed3f-2822"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2822">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2823">1차원 배열을 만들고 요소 목록으로 초기화하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewArrayExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2823">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating a one-dimensional array and initializing it from a list of elements.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2824"><see cref="T:System.Linq.Expressions.NewArrayExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2824">A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2825"><xref:System.Linq.Expressions.Expression.Type%2A> 속성의 각 요소 `initializers` 가 나타내는 형식에 할당할 수 있는 형식을 나타내야 `type`도 되 면 *따옴표 붙은*합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2825">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must represent a type that is assignable to the type represented by `type`, possibly after it is *quoted*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ed3f-2826">경우에 요소 인용 됩니다 `type` 는 <xref:System.Linq.Expressions.Expression>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2826">An element will be quoted only if `type` is <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="2ed3f-2827">요소에 래핑됩니다 인용을 <xref:System.Linq.Expressions.ExpressionType.Quote> 노드.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2827">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="2ed3f-2828">결과 노드를 <xref:System.Linq.Expressions.UnaryExpression> 해당 <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> 속성이 요소의 `initializers`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2828">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `initializers`.</span></span>  
  
 <span data-ttu-id="2ed3f-2829">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.NewArrayExpression> 나타내는 형식의 배열 차수가 1이 고 요소 형식이 `type`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2829">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is 1 and whose element type is `type`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-2830">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> 메서드는 1 차원 문자열 배열을 작성을 나타내는 식 트리를 만드는 문자열 식의 목록으로 초기화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2830">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> method to create an expression tree that represents creating a one-dimensional string array that is initialized with a list of string expressions.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#1)]
 [!code-vb[System.Linq.Expressions.Expression#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2831"><paramref name="type" /> 또는 <paramref name="initializers" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2831"><paramref name="type" /> or <paramref name="initializers" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2ed3f-2832">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2832">-or-</span></span> 
<span data-ttu-id="2ed3f-2833"><paramref name="initializers" />의 요소가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2833">An element of <paramref name="initializers" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-2834"><paramref name="initializers" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 <paramref name="type" />이 나타내는 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2834">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="initializers" /> represents a type that is not assignable to the type that <paramref name="type" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="NewArrayInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayInit (Type type, params System.Linq.Expressions.Expression[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayInit(class System.Type type, class System.Linq.Expressions.Expression[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewArrayExpression ^ NewArrayInit(Type ^ type, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member NewArrayInit : Type * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.NewArrayExpression" Usage="System.Linq.Expressions.Expression.NewArrayInit (type, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="2ed3f-2835">배열의 요소 형식을 나타내는 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2835">A <see cref="T:System.Type" /> that represents the element type of the array.</span></span></param>
        <param name="initializers"><span data-ttu-id="2ed3f-2836"><see cref="T:System.Linq.Expressions.Expression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2836">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2837">1차원 배열을 만들고 요소 목록으로 초기화하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewArrayExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2837">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating a one-dimensional array and initializing it from a list of elements.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2838"><see cref="T:System.Linq.Expressions.NewArrayExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2838">A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2839"><xref:System.Linq.Expressions.Expression.Type%2A> 속성의 각 요소 `initializers` 가 나타내는 형식에 할당할 수 있는 형식을 나타내야 `type`도 되 면 *따옴표 붙은*합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2839">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must represent a type that is assignable to the type represented by `type`, possibly after it is *quoted*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ed3f-2840">경우에 요소 인용 됩니다 `type` 는 <xref:System.Linq.Expressions.Expression>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2840">An element will be quoted only if `type` is <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="2ed3f-2841">요소에 래핑됩니다 인용을 <xref:System.Linq.Expressions.ExpressionType.Quote> 노드.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2841">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="2ed3f-2842">결과 노드를 <xref:System.Linq.Expressions.UnaryExpression> 해당 <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> 속성이 요소의 `initializers`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2842">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `initializers`.</span></span>  
  
 <span data-ttu-id="2ed3f-2843">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.NewArrayExpression> 나타내는 형식의 배열 차수가 1이 고 요소 형식이 `type`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2843">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is 1 and whose element type is `type`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-2844">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> 메서드는 1 차원 문자열 배열을 작성을 나타내는 식 트리를 만드는 문자열 식의 목록으로 초기화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2844">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> method to create an expression tree that represents creating a one-dimensional string array that is initialized with a list of string expressions.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#1)]
 [!code-vb[System.Linq.Expressions.Expression#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2845"><paramref name="type" /> 또는 <paramref name="initializers" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2845"><paramref name="type" /> or <paramref name="initializers" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2ed3f-2846">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2846">-or-</span></span> 
<span data-ttu-id="2ed3f-2847"><paramref name="initializers" />의 요소가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2847">An element of <paramref name="initializers" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-2848"><paramref name="initializers" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 <paramref name="type" /> 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2848">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="initializers" /> represents a type that is not assignable to the type <paramref name="type" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.ExpressionType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Linq.Expressions.ExpressionType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.Expression.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NodeType As ExpressionType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Linq::Expressions::ExpressionType NodeType { System::Linq::Expressions::ExpressionType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Linq.Expressions.ExpressionType" Usage="System.Linq.Expressions.Expression.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ed3f-2849">이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 형식을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2849">Gets the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</span></span></summary>
        <value><span data-ttu-id="2ed3f-2850"><see cref="T:System.Linq.Expressions.ExpressionType" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2850">One of the <see cref="T:System.Linq.Expressions.ExpressionType" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2851"><xref:System.Linq.Expressions.Expression.NodeType%2A> 속성의 보다 특수 한 설명이 <xref:System.Linq.Expressions.Expression> 보다 해당 파생된 유형 뿐입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2851">The <xref:System.Linq.Expressions.Expression.NodeType%2A> property provides a more specialized description of an <xref:System.Linq.Expressions.Expression> than just its derived type.</span></span> <span data-ttu-id="2ed3f-2852">예를 들어, 한 <xref:System.Linq.Expressions.BinaryExpression> 나누기 연산 또는 "보다 큼" 작업을 같은 이진 식의 다양 한 종류를 나타내는 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2852">For example, a <xref:System.Linq.Expressions.BinaryExpression> can be used to represent many different kinds of binary expressions, such as a division operation or a "greater than" operation.</span></span> <span data-ttu-id="2ed3f-2853">합니다 <xref:System.Linq.Expressions.Expression.NodeType%2A> 속성으로 이러한 이진 식 설명 <xref:System.Linq.Expressions.ExpressionType.Divide> 고 <xref:System.Linq.Expressions.ExpressionType.GreaterThan>각각.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2853">The <xref:System.Linq.Expressions.Expression.NodeType%2A> property would describe these binary expressions as <xref:System.Linq.Expressions.ExpressionType.Divide> and <xref:System.Linq.Expressions.ExpressionType.GreaterThan>, respectively.</span></span>  
  
 <span data-ttu-id="2ed3f-2854">식의 정적 CLR 형식을 하는 <xref:System.Linq.Expressions.Expression> 개체가 표시 됩니다는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2854">The static CLR type of the expression that the <xref:System.Linq.Expressions.Expression> object represents is represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Not">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-2855">비트 보수 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2855">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a bitwise complement operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Not (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Not(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Not(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Not : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Not expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-2856"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2856">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2857">비트 보수 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2857">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a bitwise complement operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2858"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2858">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2859">합니다 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> 결과 속성 <xref:System.Linq.Expressions.UnaryExpression> 구현 방법으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2859">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="2ed3f-2860"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2860">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-2861">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2861">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-2862">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2862">Otherwise, they are `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-2863">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2863">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-2864">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2864">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-2865">경우 `expression`합니다. 형식이 단항 not 연산자를 정의 하는 사용자 정의 형식이 <xref:System.Reflection.MethodInfo> 는 나타내는 연산자가 구현 메서드.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2865">If `expression`.Type is a user-defined type that defines the unary not operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-2866">그렇지 않은 경우, `expression`합니다. 형식은 숫자 또는 부울 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2866">Otherwise, if `expression`.Type is a numeric or Boolean type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-2867">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2867">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-2868">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2868">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-2869">경우 `expression`합니다. 형식은 구현 메서드의 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2869">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-2870">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2870">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-2871">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2871">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-2872">`expression`. 형식이 nullable 값 형식인와 구현 메서드의 인수 형식에 해당 하는 nullable이 아닌 형식 같습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2872">`expression`.Type is a nullable value type and the corresponding non-nullable type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-2873">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2873">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-2874">구현 메서드가 `null`, 노드 유형이 `expression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2874">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="2ed3f-2875">경우 `expression`합니다. 형식이 nullable이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2875">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-2876">그렇지 않은 경우 노드가 리프트 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2876">Otherwise, the node is lifted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-2877">다음 예제에서는 논리를 나타내는 식을 만들려면 작업 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2877">The following example demonstrates how to create an expression that represents a logical NOT operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#51](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#51)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#51](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#51)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2878"><paramref name="expression" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2878"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-2879"><paramref name="expression" />.Type에 단항 Not 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2879">The unary not operator is not defined for <paramref name="expression" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Not (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Not(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Not(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Not : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Not (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-2880"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2880">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-2881"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2881">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2882">비트 보수 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2882">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a bitwise complement operation.</span></span> <span data-ttu-id="2ed3f-2883">구현 메서드를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2883">The implementing method can be specified.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2884"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2884">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2885">합니다 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> 결과 속성 <xref:System.Linq.Expressions.UnaryExpression> 구현 방법으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2885">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="2ed3f-2886"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2886">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-2887">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2887">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-2888">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2888">Otherwise, they are `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-2889">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2889">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-2890">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2890">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-2891">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드 인수 하나를 사용 하는 것이 노드에 대 한 구현 메서드.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2891">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="2ed3f-2892">경우 `expression`합니다. 형식이 단항 not 연산자를 정의 하는 사용자 정의 형식이 <xref:System.Reflection.MethodInfo> 는 나타내는 연산자가 구현 메서드.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2892">If `expression`.Type is a user-defined type that defines the unary not operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-2893">그렇지 않은 경우, `expression`합니다. 형식은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2893">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-2894">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2894">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-2895">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2895">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-2896">경우 `expression`합니다. 형식은 구현 메서드의 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2896">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-2897">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2897">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-2898">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2898">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-2899">`expression`. 형식이 nullable 값 형식인와 구현 메서드의 인수 형식에 해당 하는 nullable이 아닌 값 형식 같습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2899">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-2900">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2900">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-2901">구현 메서드가 `null`, 노드 유형이 `expression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2901">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="2ed3f-2902">경우 `expression`합니다. 형식이 nullable이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2902">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-2903">그렇지 않은 경우 노드가 리프트 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2903">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2904"><paramref name="expression" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2904"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2905"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니거나, 정확하게 하나의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2905"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-2906"><paramref name="method" />가 <see langword="null" />이고 <paramref name="expression" />.Type에 단항 Not 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2906"><paramref name="method" /> is <see langword="null" /> and the unary not operator is not defined for <paramref name="expression" />.Type.</span></span>  
  
<span data-ttu-id="2ed3f-2907">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2907">-or-</span></span> 
 <span data-ttu-id="2ed3f-2908"><paramref name="expression" />.Type 또는 이 형식이 nullable 값 형식인 경우 nullable이 아닌 해당 형식을 <paramref name="method" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2908"><paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="NotEqual">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-2909">다름 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2909">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an inequality comparison.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NotEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression NotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression NotEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NotEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ NotEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member NotEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.NotEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-2910"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2910">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-2911"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2911">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2912">다름 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2912">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an inequality comparison.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2913"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2913">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2914">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2914">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-2915"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2915">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-2916">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 속성은 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2916">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="2ed3f-2917">그렇지 않으면 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2917">Otherwise, it is `false`.</span></span> <span data-ttu-id="2ed3f-2918"><xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 항상 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2918">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="2ed3f-2919"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2919">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-2920">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2920">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-2921">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2921">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-2922">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2922">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-2923">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 같지 않음 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2923">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the inequality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-2924">구현 메서드는이 고, 그렇지 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2924">Otherwise, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-2925">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2925">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-2926">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2926">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-2927">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2927">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-2928">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2928">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-2929">다음 두 조건을 충족 하는 경우 노드가 리프트 된 및 노드의 유형입니다 <xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2929">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="2ed3f-2930">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2930">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-2931">구현 메서드의 반환 형식은 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2931">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="2ed3f-2932">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2932">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-2933">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2933">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-2934">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2934">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="2ed3f-2935">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2935">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-2936">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2936">The type of the node is <xref:System.Boolean>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2937"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2937"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-2938"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 다름 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2938">The inequality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="NotEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression NotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression NotEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NotEqual (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ NotEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member NotEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.NotEqual (left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-2939"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2939">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-2940"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2940">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="liftToNull"><span data-ttu-id="2ed3f-2941"><see langword="true" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="true" />이고, <see langword="false" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2941"><see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-2942"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2942">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2943">다름 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2943">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an inequality comparison.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2944"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2944">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2945">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2945">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-2946"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2946">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-2947">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 속성은 `true` 하며 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성이 `liftToNull`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2947">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="2ed3f-2948">그렇지 않은 경우 둘 다 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2948">Otherwise, they are both `false`.</span></span> <span data-ttu-id="2ed3f-2949"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2949">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-2950">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2950">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-2951">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2951">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-2952">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2952">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-2953">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2953">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-2954">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 같지 않음 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2954">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the inequality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-2955">구현 메서드는이 고, 그렇지 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2955">Otherwise, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-2956">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2956">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-2957">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2957">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-2958">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2958">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-2959">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2959">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-2960">다음 두 조건이 충족 되 면 노드가 리프트 된; 또한 노드 형식은 nullable <xref:System.Boolean> 하는 경우 `liftToNull` 됩니다 `true` 또는 <xref:System.Boolean> 경우 `liftToNull` 는 `false`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2960">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="2ed3f-2961">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2961">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-2962">구현 메서드의 반환 형식은 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2962">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="2ed3f-2963">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2963">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-2964">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2964">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-2965">노드의 형식이 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2965">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="2ed3f-2966">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2966">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-2967">노드의 형식이 nullable <xref:System.Boolean> 경우 `liftToNull` 됩니다 `true` 또는 <xref:System.Boolean> 경우 `liftToNull` 는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2967">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-2968"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2968"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-2969"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2969"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-2970"><paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 다름 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2970"><paramref name="method" /> is <see langword="null" /> and the inequality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OnesComplement">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-2971">1의 보수를 나타내는 식을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2971">Returns the expression representing the ones complement.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OnesComplement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression OnesComplement (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression OnesComplement(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ OnesComplement(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member OnesComplement : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.OnesComplement expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-2972"><see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2972">An <see cref="T:System.Linq.Expressions.Expression" />.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2973">1의 보수를 나타내는 식을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2973">Returns the expression representing the ones complement.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2974"><see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2974">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnesComplement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression OnesComplement (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression OnesComplement(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ OnesComplement(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member OnesComplement : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.OnesComplement (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-2975"><see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2975">An <see cref="T:System.Linq.Expressions.Expression" />.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-2976">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2976">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2977">1의 보수를 나타내는 식을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2977">Returns the expression representing the ones complement.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2978"><see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2978">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Or">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-2979">비트 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 연산을 나타내는 <see langword="OR" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2979">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="OR" /> operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Or (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Or(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Or (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Or(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Or : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Or (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-2980"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2980">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-2981"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2981">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-2982">비트 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 연산을 나타내는 <see langword="OR" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2982">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="OR" /> operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-2983"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2983">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-2984">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2984">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-2985"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2985">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-2986">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2986">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-2987">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2987">Otherwise, they are `false`.</span></span> <span data-ttu-id="2ed3f-2988"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2988">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-2989">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2989">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-2990">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2990">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-2991">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2991">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-2992">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 비트 오버 로드 하는 사용자 정의 유형을 나타냅니다 `OR` 연산자는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2992">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-2993">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 형식 정수 또는 부울 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2993">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-2994">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2994">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-2995">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2995">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-2996">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2996">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-2997">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2997">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-2998">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2998">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-2999">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-2999">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-3000">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3000">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-3001">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3001">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-3002">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3002">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-3003">노드 형식은의 결과 형식은 미리 정의 된 비트 `OR` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3003">The type of the node is the result type of the predefined bitwise `OR` operator.</span></span>  
  
-   <span data-ttu-id="2ed3f-3004">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3004">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-3005">노드 형식은의 결과 형식은 미리 정의 된 비트에 해당 하는 nullable 형식을 `OR` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3005">The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `OR` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-3006">다음 코드 예제에는 논리적 OR 연산을 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3006">The following code example shows how to create an expression that represents a logical OR operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#28)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-3007"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3007"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-3008"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 비트 <see langword="OR" /> 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3008">The bitwise <see langword="OR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Or (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Or(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Or (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Or(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Or : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Or (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-3009"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3009">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-3010"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3010">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-3011"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3011">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3012">비트 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 연산을 나타내는 <see langword="OR" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3012">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="OR" /> operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3013"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Or" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3013">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-3014">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3014">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-3015"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3015">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-3016">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3016">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-3017">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3017">Otherwise, they are `false`.</span></span> <span data-ttu-id="2ed3f-3018"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3018">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-3019">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3019">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-3020">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3020">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-3021">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3021">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-3022">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3022">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-3023">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 비트 오버 로드 하는 사용자 정의 유형을 나타냅니다 `OR` 연산자는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3023">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-3024">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 형식 정수 또는 부울 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3024">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-3025">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3025">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-3026">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3026">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-3027">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3027">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-3028">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3028">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-3029">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3029">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-3030">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3030">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-3031">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3031">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-3032">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3032">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-3033">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3033">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-3034">노드 형식은의 결과 형식은 미리 정의 된 비트 `OR` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3034">The type of the node is the result type of the predefined bitwise `OR` operator.</span></span>  
  
-   <span data-ttu-id="2ed3f-3035">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3035">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-3036">노드 형식은의 결과 형식은 미리 정의 된 비트에 해당 하는 nullable 형식을 `OR` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3036">The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `OR` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-3037"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3037"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-3038"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3038"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-3039"><paramref name="method" />가 <see langword="null" />이고 비트 <see langword="OR" /> 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3039"><paramref name="method" /> is <see langword="null" /> and the bitwise <see langword="OR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OrAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-3040">비트 OR 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3040">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member OrAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.OrAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-3041"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3041">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-3042"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3042">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3043">비트 OR 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3043">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3044"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3044">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member OrAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.OrAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-3045"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3045">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-3046"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3046">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-3047"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3047">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3048">비트 OR 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3048">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3049"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3049">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member OrAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.OrAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-3050"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3050">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-3051"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3051">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-3052"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3052">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="2ed3f-3053"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3053">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3054">비트 OR 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3054">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3055"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3055">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="OrElse">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-3056">첫 번째 연산자가 <see cref="T:System.Linq.Expressions.BinaryExpression" />로 계산되는 경우에만 두 번째 피연산자를 계산하는 조건부 <see langword="OR" /> 연산을 나타내는 <see langword="false" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3056">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="OR" /> operation that evaluates the second operand only if the first operator evaluates to <see langword="false" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OrElse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrElse (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrElse(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrElse (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrElse(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member OrElse : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.OrElse (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-3057"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3057">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-3058"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3058">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3059">첫 번째 피연산자가 <see cref="T:System.Linq.Expressions.BinaryExpression" />로 계산되는 경우에만 두 번째 피연산자를 계산하는 조건부 <see langword="OR" /> 연산을 나타내는 <see langword="false" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3059">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="OR" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="false" />.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3060"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3060">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-3061">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3061">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-3062"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3062">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-3063">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3063">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-3064">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3064">Otherwise, they are `false`.</span></span> <span data-ttu-id="2ed3f-3065"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3065">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-3066">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3066">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-3067">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3067">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-3068">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3068">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-3069">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 비트 오버 로드 하는 사용자 정의 유형을 나타냅니다 `OR` 연산자는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3069">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="2ed3f-3070">조건부 `OR` C# 또는 Visual Basic의 연산자를 오버 로드할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3070">The conditional `OR` operator cannot be overloaded in C# or Visual Basic.</span></span> <span data-ttu-id="2ed3f-3071">그러나 조건부 `OR` 연산자는 비트를 사용 하 여 계산 됩니다 `OR` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3071">However, the conditional `OR` operator is evaluated by using the bitwise `OR` operator.</span></span> <span data-ttu-id="2ed3f-3072">따라서 사용자 정의의 오버 로드를 비트 `OR` 연산자에는이 노드 유형에 대 한 구현 메서드 일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3072">Thus, a user-defined overload of the bitwise `OR` operator can be the implementing method for this node type.</span></span>  
  
-   <span data-ttu-id="2ed3f-3073">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 형식을 부울 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3073">Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-3074">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3074">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-3075">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3075">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-3076">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3076">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-3077">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3077">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-3078">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3078">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-3079">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상의 값이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3079">`left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-3080">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3080">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-3081">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3081">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-3082">`left`. 형식 및 `right`합니다. 형식이 동일한 부울 형식이는 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3082">`left`.Type and `right`.Type are the same Boolean type.</span></span>  
  
-   <span data-ttu-id="2ed3f-3083">경우 `left`합니다. 형식 및 `right`합니다. 형식이 nullable이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3083">If `left`.Type and `right`.Type are non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-3084">노드 형식은 미리 정의 된 조건부의 결과 형식은 `OR` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3084">The type of the node is the result type of the predefined conditional `OR` operator.</span></span>  
  
-   <span data-ttu-id="2ed3f-3085">경우 `left`합니다. 형식 및 `right`합니다. 형식이 nullable, 노드가 리프트 된입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3085">If `left`.Type and `right`.Type are nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-3086">노드 형식은 미리 정의 된 조건부의 결과 형식에 해당 하는 nullable 형식을 `OR` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3086">The type of the node is the nullable type that corresponds to the result type of the predefined conditional `OR` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-3087">다음 코드 예제에는 논리를 나타내는 식을 만드는 방법을 보여 줍니다 `OR` 첫 번째 피연산자가 하는 경우에 두 번째 피연산자를 계산 하는 작업 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3087">The following code example shows how to create an expression that represents a logical `OR` operation that evaluates the second operand only if the first operand evaluates to `false`.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#29)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-3088"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3088"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-3089"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 비트 <see langword="OR" /> 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3089">The bitwise <see langword="OR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span>  
  
<span data-ttu-id="2ed3f-3090">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3090">-or-</span></span> 
 <span data-ttu-id="2ed3f-3091"><paramref name="left" />.Type과 <paramref name="right" />.Type이 동일한 부울 형식이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3091"><paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="OrElse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrElse (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrElse(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrElse (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrElse(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member OrElse : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.OrElse (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-3092"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3092">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-3093"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3093">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-3094"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3094">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3095">첫 번째 피연산자가 <see cref="T:System.Linq.Expressions.BinaryExpression" />로 계산되는 경우에만 두 번째 피연산자를 계산하는 조건부 <see langword="OR" /> 연산을 나타내는 <see langword="false" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3095">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="OR" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="false" />.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3096"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3096">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-3097">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3097">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-3098"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3098">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-3099">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3099">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-3100">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3100">Otherwise, they are `false`.</span></span> <span data-ttu-id="2ed3f-3101"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3101">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-3102">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3102">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-3103">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3103">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-3104">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3104">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-3105">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 노드에 대 한 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3105">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="2ed3f-3106">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 비트 오버 로드 하는 사용자 정의 유형을 나타냅니다 `OR` 연산자는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3106">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="2ed3f-3107">조건부 `OR` C# 또는 Visual Basic의 연산자를 오버 로드할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3107">The conditional `OR` operator cannot be overloaded in C# or Visual Basic.</span></span> <span data-ttu-id="2ed3f-3108">그러나 조건부 `OR` 연산자는 비트를 사용 하 여 계산 됩니다 `OR` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3108">However, the conditional `OR` operator is evaluated by using the bitwise `OR` operator.</span></span> <span data-ttu-id="2ed3f-3109">따라서 사용자 정의의 오버 로드를 비트 `OR` 연산자에는이 노드 유형에 대 한 구현 메서드 일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3109">Thus, a user-defined overload of the bitwise `OR` operator can be the implementing method for this node type.</span></span>  
  
-   <span data-ttu-id="2ed3f-3110">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 형식을 부울 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3110">Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-3111">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3111">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-3112">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3112">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-3113">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3113">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-3114">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3114">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-3115">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3115">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-3116">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상의 값이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3116">`left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-3117">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3117">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-3118">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3118">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-3119">`left`. 형식 및 `right`합니다. 형식이 동일한 부울 형식이는 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3119">`left`.Type and `right`.Type are the same Boolean type.</span></span>  
  
-   <span data-ttu-id="2ed3f-3120">경우 `left`합니다. 형식 및 `right`합니다. 형식이 nullable이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3120">If `left`.Type and `right`.Type are non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-3121">노드 형식은 미리 정의 된 조건부의 결과 형식은 `OR` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3121">The type of the node is the result type of the predefined conditional `OR` operator.</span></span>  
  
-   <span data-ttu-id="2ed3f-3122">경우 `left`합니다. 형식 및 `right`합니다. 형식이 nullable, 노드가 리프트 된입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3122">If `left`.Type and `right`.Type are nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-3123">노드 형식은 미리 정의 된 조건부의 결과 형식에 해당 하는 nullable 형식을 `OR` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3123">The type of the node is the nullable type that corresponds to the result type of the predefined conditional `OR` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-3124"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3124"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-3125"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3125"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-3126"><paramref name="method" />가 <see langword="null" />이고 비트 <see langword="OR" /> 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3126"><paramref name="method" /> is <see langword="null" /> and the bitwise <see langword="OR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span>  
  
<span data-ttu-id="2ed3f-3127">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3127">-or-</span></span> 
 <span data-ttu-id="2ed3f-3128"><paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type과 <paramref name="right" />.Type이 동일한 부울 형식이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3128"><paramref name="method" /> is <see langword="null" /> and <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parameter">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-3129">식 트리에서 매개 변수나 변수를 식별하는 데 사용할 수 있는 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3129">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Parameter (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Parameter(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Parameter(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ParameterExpression ^ Parameter(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Parameter : Type -&gt; System.Linq.Expressions.ParameterExpression" Usage="System.Linq.Expressions.Expression.Parameter type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="2ed3f-3130">매개 변수 또는 변수의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3130">The type of the parameter or variable.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3131">식 트리에서 매개 변수나 변수를 식별하는 데 사용할 수 있는 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3131">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3132">지정된 이름과 형식의 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3132">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2ed3f-3133">다음 예제에서는 만드는 방법을 보여 줍니다.는 <xref:System.Linq.Expressions.MethodCallExpression> 값을 인쇄 하는 개체를 <xref:System.Linq.Expressions.ParameterExpression> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3133">The following example demonstrates how to create a <xref:System.Linq.Expressions.MethodCallExpression> object that prints the value of a <xref:System.Linq.Expressions.ParameterExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#49](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#49)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#49](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#49)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Parameter (Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Parameter(class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ParameterExpression ^ Parameter(Type ^ type, System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member Parameter : Type * string -&gt; System.Linq.Expressions.ParameterExpression" Usage="System.Linq.Expressions.Expression.Parameter (type, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="2ed3f-3134">매개 변수 또는 변수의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3134">The type of the parameter or variable.</span></span></param>
        <param name="name"><span data-ttu-id="2ed3f-3135">디버깅 또는 인쇄용으로만 사용되는 매개 변수 또는 변수의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3135">The name of the parameter or variable, used for debugging or printing purpose only.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3136">식 트리에서 매개 변수나 변수를 식별하는 데 사용할 수 있는 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3136">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3137"><see cref="T:System.Linq.Expressions.ParameterExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" /> 및 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ParameterExpression.Name" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3137">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> and <see cref="P:System.Linq.Expressions.ParameterExpression.Name" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-3138"><paramref name="type" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3138"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="PostDecrementAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-3139">원래 식에서 뒤이어 1씩 감소하는 식의 할당을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3139">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PostDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostDecrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostDecrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PostDecrementAssign(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member PostDecrementAssign : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PostDecrementAssign expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-3140">작업을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3140">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3141">원래 식에서 뒤이어 1씩 감소하는 식의 할당을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3141">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3142">결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3142">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostDecrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostDecrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PostDecrementAssign(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member PostDecrementAssign : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PostDecrementAssign (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-3143">작업을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3143">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-3144">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3144">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3145">원래 식에서 뒤이어 1씩 감소하는 식의 할당을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3145">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3146">결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3146">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PostIncrementAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-3147">원래 식에서 뒤이어 1씩 증가하는 식의 할당을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3147">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PostIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostIncrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostIncrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PostIncrementAssign(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member PostIncrementAssign : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PostIncrementAssign expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-3148">작업을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3148">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3149">원래 식에서 뒤이어 1씩 증가하는 식의 할당을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3149">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3150">결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3150">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostIncrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostIncrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PostIncrementAssign(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member PostIncrementAssign : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PostIncrementAssign (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-3151">작업을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3151">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-3152">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3152">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3153">원래 식에서 뒤이어 1씩 증가하는 식의 할당을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3153">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3154">결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3154">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Power">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-3155">숫자의 제곱을 구하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3155">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising a number to a power.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Power (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Power(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Power (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Power(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Power : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Power (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-3156"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3156">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-3157"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3157">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3158">숫자의 제곱을 구하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3158">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising a number to a power.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3159"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3159">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-3160">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3160">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-3161"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3161">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-3162">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3162">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-3163">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3163">Otherwise, they are `false`.</span></span> <span data-ttu-id="2ed3f-3164"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3164">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-3165">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3165">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-3166">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3166">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-3167">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3167">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-3168">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 지 수 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3168">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the exponentiation operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-3169">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 형식 둘 다 <xref:System.Double>의 메서드 구현은 <xref:System.Math.Pow%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3169">Otherwise, if `left`.Type and `right`.Type are both <xref:System.Double>, the implementing method is <xref:System.Math.Pow%2A>.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-3170">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3170">Node Type and Lifted versus Non-Lifted</span></span>  
  
-   <span data-ttu-id="2ed3f-3171">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3171">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-3172">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3172">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-3173">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3173">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-3174">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3174">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-3175">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3175">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-3176"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3176"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-3177"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 지수 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3177">The exponentiation operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span>  
  
<span data-ttu-id="2ed3f-3178">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3178">-or-</span></span> 
 <span data-ttu-id="2ed3f-3179"><paramref name="left" />.Type 및/또는 <paramref name="right" />.Type이 <see cref="T:System.Double" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3179"><paramref name="left" />.Type and/or <paramref name="right" />.Type are not <see cref="T:System.Double" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Power (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Power(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Power (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Power(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Power : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Power (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-3180"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3180">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-3181"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3181">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-3182"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3182">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3183">숫자의 제곱을 구하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3183">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising a number to a power.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3184"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Power" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3184">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-3185">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3185">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-3186"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3186">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-3187">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3187">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-3188">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3188">Otherwise, they are `false`.</span></span> <span data-ttu-id="2ed3f-3189"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3189">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-3190">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3190">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-3191">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3191">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-3192">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3192">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-3193">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3193">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-3194">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 지 수 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3194">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the exponentiation operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-3195">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 형식 둘 다 <xref:System.Double>의 메서드 구현은 <xref:System.Math.Pow%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3195">Otherwise, if `left`.Type and `right`.Type are both <xref:System.Double>, the implementing method is <xref:System.Math.Pow%2A>.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-3196">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3196">Node Type and Lifted versus Non-Lifted</span></span>  
  
-   <span data-ttu-id="2ed3f-3197">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3197">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-3198">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3198">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-3199">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3199">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-3200">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3200">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-3201">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3201">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-3202"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3202"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-3203"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3203"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-3204"><paramref name="method" />가 <see langword="null" />이고 지수 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3204"><paramref name="method" /> is <see langword="null" /> and the exponentiation operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span>  
  
<span data-ttu-id="2ed3f-3205">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3205">-or-</span></span> 
 <span data-ttu-id="2ed3f-3206"><paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및/또는 <paramref name="right" />.Type이 <see cref="T:System.Double" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3206"><paramref name="method" /> is <see langword="null" /> and <paramref name="left" />.Type and/or <paramref name="right" />.Type are not <see cref="T:System.Double" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="PowerAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-3207">식을 거듭제곱하고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3207">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PowerAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression PowerAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowerAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ PowerAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member PowerAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.PowerAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-3208"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3208">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-3209"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3209">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3210">식을 거듭제곱하고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3210">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3211"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3211">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PowerAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression PowerAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowerAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ PowerAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member PowerAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.PowerAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-3212"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3212">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-3213"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3213">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-3214"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3214">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3215">식을 거듭제곱하고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3215">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3216"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3216">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PowerAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression PowerAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowerAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ PowerAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member PowerAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.PowerAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-3217"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3217">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-3218"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3218">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-3219"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3219">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="2ed3f-3220"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3220">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3221">식을 거듭제곱하고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3221">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3222"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3222">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PreDecrementAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-3223">식을 1씩 감소시키고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3223">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that decrements the expression by 1 and assigns the result back to the expression.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PreDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreDecrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreDecrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PreDecrementAssign(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member PreDecrementAssign : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PreDecrementAssign expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-3224">작업을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3224">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3225">식을 1씩 감소시키고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3225">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that decrements the expression by 1 and assigns the result back to the expression.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3226">결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3226">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreDecrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreDecrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PreDecrementAssign(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member PreDecrementAssign : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PreDecrementAssign (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-3227">작업을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3227">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-3228">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3228">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3229">식을 1씩 감소시키고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3229">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that decrements the expression by 1 and assigns the result back to the expression.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3230">결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3230">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PreIncrementAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-3231">식을 1씩 증가시키고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3231">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that increments the expression by 1 and assigns the result back to the expression.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PreIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreIncrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreIncrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PreIncrementAssign(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member PreIncrementAssign : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PreIncrementAssign expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-3232">작업을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3232">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3233">식을 1씩 증가시키고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3233">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that increments the expression by 1 and assigns the result back to the expression.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3234">결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3234">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreIncrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreIncrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PreIncrementAssign(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member PreIncrementAssign : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PreIncrementAssign (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-3235">작업을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3235">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-3236">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3236">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3237">식을 1씩 증가시키고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3237">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that increments the expression by 1 and assigns the result back to the expression.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3238">결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3238">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Property">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-3239">속성에 대한 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3239">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo propertyAccessor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo propertyAccessor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Property(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ propertyAccessor);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Property (expression, propertyAccessor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-3240"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3240">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to.</span></span> <span data-ttu-id="2ed3f-3241">이 값은 정적 속성의 경우 null일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3241">This can be null for static properties.</span></span></param>
        <param name="propertyAccessor"><span data-ttu-id="2ed3f-3242">속성 접근자 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3242">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3243">속성 접근자 메서드를 통한 속성 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3243">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property by using a property accessor method.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3244"><see cref="T:System.Linq.Expressions.MemberExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> 속성이 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />으로 설정되고 <paramref name="expression" /> 속성이 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />로 액세스되는 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />로 설정된 <paramref name="propertyAccessor" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3244">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-3245"><xref:System.Linq.Expressions.Expression.Type%2A> 결과의 속성 <xref:System.Linq.Expressions.MemberExpression> 값과 같음 합니다 <xref:System.Reflection.PropertyInfo.PropertyType%2A> 의 속성 <xref:System.Linq.Expressions.MemberExpression.Member%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3245">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of <xref:System.Linq.Expressions.MemberExpression.Member%2A>.</span></span>  
  
 <span data-ttu-id="2ed3f-3246">표시 되는 메서드 `propertyAccessor` 는 `static` (`Shared` Visual basic에서), `expression` 수 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3246">If the method represented by `propertyAccessor` is `static` (`Shared` in Visual Basic), `expression` can be `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-3247"><paramref name="propertyAccessor" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3247"><paramref name="propertyAccessor" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2ed3f-3248">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3248">-or-</span></span> 
<span data-ttu-id="2ed3f-3249"><paramref name="propertyAccessor" />가 나타내는 메서드가 <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니고 <paramref name="expression" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3249">The method that <paramref name="propertyAccessor" /> represents is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic) and <paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-3250"><paramref name="expression" />.Type을 <paramref name="propertyAccessor" />로 나타내는 메서드의 선언 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3250"><paramref name="expression" />.Type is not assignable to the declaring type of the method represented by <paramref name="propertyAccessor" />.</span></span>  
  
<span data-ttu-id="2ed3f-3251">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3251">-or-</span></span> 
<span data-ttu-id="2ed3f-3252"><paramref name="propertyAccessor" />가 나타내는 메서드가 속성 접근자 메서드가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3252">The method that <paramref name="propertyAccessor" /> represents is not a property accessor method.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, System.Reflection.PropertyInfo property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, class System.Reflection.PropertyInfo property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Property(System::Linq::Expressions::Expression ^ expression, System::Reflection::PropertyInfo ^ property);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * System.Reflection.PropertyInfo -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Property (expression, property)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="property" Type="System.Reflection.PropertyInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-3253"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3253">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to.</span></span> <span data-ttu-id="2ed3f-3254">이 값은 정적 속성의 경우 null일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3254">This can be null for static properties.</span></span></param>
        <param name="property"><span data-ttu-id="2ed3f-3255"><see cref="T:System.Reflection.PropertyInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3255">The <see cref="T:System.Reflection.PropertyInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3256">속성에 대한 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3256">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3257"><see cref="T:System.Linq.Expressions.MemberExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> 및 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3257">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> and <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-3258"><xref:System.Linq.Expressions.Expression.Type%2A> 결과의 속성 <xref:System.Linq.Expressions.MemberExpression> 값과 같음 합니다 <xref:System.Reflection.PropertyInfo.PropertyType%2A> 의 속성 <xref:System.Linq.Expressions.MemberExpression.Member%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3258">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of <xref:System.Linq.Expressions.MemberExpression.Member%2A>.</span></span>  
  
 <span data-ttu-id="2ed3f-3259">표시 되는 속성 `property` 은 `static` (`Shared` Visual basic에서), `expression` 수 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3259">If the property represented by `property` is `static` (`Shared` in Visual Basic), `expression` can be `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-3260"><paramref name="property" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3260"><paramref name="property" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2ed3f-3261">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3261">-or-</span></span> 
<span data-ttu-id="2ed3f-3262"><paramref name="property" />가 나타내는 속성이 <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니고 <paramref name="expression" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3262">The property that <paramref name="property" /> represents is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic) and <paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-3263"><paramref name="expression" />.Type을 <paramref name="property" />가 나타내는 속성의 선언 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3263"><paramref name="expression" />.Type is not assignable to the declaring type of the property that <paramref name="property" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Property(System::Linq::Expressions::Expression ^ expression, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * string -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Property (expression, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-3264"><see cref="T:System.Linq.Expressions.Expression" />에 이름이 <see cref="P:System.Linq.Expressions.Expression.Type" />인 속성이 포함된 <paramref name="propertyName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3264">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a property named <paramref name="propertyName" />.</span></span> <span data-ttu-id="2ed3f-3265">정적 속성의 경우 이 값은 <see langword="null" />일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3265">This can be <see langword="null" /> for static properties.</span></span></param>
        <param name="propertyName"><span data-ttu-id="2ed3f-3266">액세스할 속성의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3266">The name of a property to be accessed.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3267">속성에 대한 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3267">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3268"><see cref="T:System.Linq.Expressions.MemberExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> 속성이 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />으로 설정되고 <paramref name="expression" /> 속성이 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />이 가리키는 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />로 설정된 <paramref name="propertyName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3268">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property denoted by <paramref name="propertyName" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-3269"><xref:System.Linq.Expressions.Expression.Type%2A> 결과의 속성 <xref:System.Linq.Expressions.MemberExpression> 값과 같음는 <xref:System.Reflection.PropertyInfo.PropertyType%2A> 의 속성을 <xref:System.Reflection.PropertyInfo> 가리키는 속성을 나타내는 `propertyName`.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3269">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of the <xref:System.Reflection.PropertyInfo> that represents the property denoted by `propertyName`.</span></span>  
  
 <span data-ttu-id="2ed3f-3270">이 메서드는 검색 `expression`합니다. 형식 및 이름을 가진 속성에 대 한 기본 형식 `propertyName`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3270">This method searches `expression`.Type and its base types for a property that has the name `propertyName`.</span></span> <span data-ttu-id="2ed3f-3271">공용 속성에는 public이 아닌 속성 보다 우선을 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3271">Public properties are given preference over non-public properties.</span></span> <span data-ttu-id="2ed3f-3272">이 메서드를 전달 하는 일치 하는 속성이 없으면 `expression` 하며 <xref:System.Reflection.PropertyInfo> 해당 속성을 나타내는 <xref:System.Linq.Expressions.Expression.Property%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3272">If a matching property is found, this method passes `expression` and the <xref:System.Reflection.PropertyInfo> that represents that property to <xref:System.Linq.Expressions.Expression.Property%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-3273">다음 예제에서는 속성에 액세스 하는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3273">The following example shows how to create an expression that represents accessing a property.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#38](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#38)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#38](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-3274"><paramref name="expression" /> 또는 <paramref name="propertyName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3274"><paramref name="expression" /> or <paramref name="propertyName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-3275"><paramref name="propertyName" />.Type 또는 해당 기본 형식에 이름이 <paramref name="expression" />인 속성이 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3275">No property named <paramref name="propertyName" /> is defined in <paramref name="expression" />.Type or its base types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression Property(class System.Linq.Expressions.Expression instance, class System.Reflection.PropertyInfo indexer, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Property (instance As Expression, indexer As PropertyInfo, arguments As IEnumerable(Of Expression)) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ Property(System::Linq::Expressions::Expression ^ instance, System::Reflection::PropertyInfo ^ indexer, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * System.Reflection.PropertyInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.IndexExpression" Usage="System.Linq.Expressions.Expression.Property (instance, indexer, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="indexer" Type="System.Reflection.PropertyInfo" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="2ed3f-3276">속성이 속해 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3276">The object to which the property belongs.</span></span> <span data-ttu-id="2ed3f-3277">이 속성이 정적/공유 속성이면 null이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3277">If the property is static/shared, it must be null.</span></span></param>
        <param name="indexer"><span data-ttu-id="2ed3f-3278">인덱싱할 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3278">The <see cref="T:System.Reflection.PropertyInfo" /> that represents the property to index.</span></span></param>
        <param name="arguments"><span data-ttu-id="2ed3f-3279">속성을 인덱싱하는 데 사용되는 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 개체의 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3279">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3280">인덱싱된 속성에 대한 액세스를 나타내는 <see cref="T:System.Linq.Expressions.IndexExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3280">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3281">만든 <see cref="T:System.Linq.Expressions.IndexExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3281">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression Property(class System.Linq.Expressions.Expression instance, class System.Reflection.PropertyInfo indexer, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Property (instance As Expression, indexer As PropertyInfo, ParamArray arguments As Expression()) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ Property(System::Linq::Expressions::Expression ^ instance, System::Reflection::PropertyInfo ^ indexer, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * System.Reflection.PropertyInfo * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.IndexExpression" Usage="System.Linq.Expressions.Expression.Property (instance, indexer, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="indexer" Type="System.Reflection.PropertyInfo" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="2ed3f-3282">속성이 속해 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3282">The object to which the property belongs.</span></span> <span data-ttu-id="2ed3f-3283">이 속성이 정적/공유 속성이면 null이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3283">If the property is static/shared, it must be null.</span></span></param>
        <param name="indexer"><span data-ttu-id="2ed3f-3284">인덱싱할 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3284">The <see cref="T:System.Reflection.PropertyInfo" /> that represents the property to index.</span></span></param>
        <param name="arguments"><span data-ttu-id="2ed3f-3285">속성을 인덱싱하는 데 사용되는 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3285">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3286">인덱싱된 속성에 대한 액세스를 나타내는 <see cref="T:System.Linq.Expressions.IndexExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3286">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3287">만든 <see cref="T:System.Linq.Expressions.IndexExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3287">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, string propertyName, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression Property(class System.Linq.Expressions.Expression instance, string propertyName, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Property (instance As Expression, propertyName As String, ParamArray arguments As Expression()) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ Property(System::Linq::Expressions::Expression ^ instance, System::String ^ propertyName, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * string * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.IndexExpression" Usage="System.Linq.Expressions.Expression.Property (instance, propertyName, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="propertyName" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="2ed3f-3288">속성이 속해 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3288">The object to which the property belongs.</span></span> <span data-ttu-id="2ed3f-3289">이 속성이 정적/공유 속성이면 null이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3289">If the property is static/shared, it must be null.</span></span></param>
        <param name="propertyName"><span data-ttu-id="2ed3f-3290">인덱서의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3290">The name of the indexer.</span></span></param>
        <param name="arguments"><span data-ttu-id="2ed3f-3291">속성을 인덱싱하는 데 사용되는 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3291">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3292">인덱싱된 속성에 대한 액세스를 나타내는 <see cref="T:System.Linq.Expressions.IndexExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3292">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3293">만든 <see cref="T:System.Linq.Expressions.IndexExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3293">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, Type type, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, class System.Type type, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Property(System::Linq::Expressions::Expression ^ expression, Type ^ type, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * Type * string -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Property (expression, type, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="propertyName" Type="System.String" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-3294">속성의 포함 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3294">The containing object of the property.</span></span> <span data-ttu-id="2ed3f-3295">이 값은 정적 속성의 경우 null일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3295">This can be null for static properties.</span></span></param>
        <param name="type"><span data-ttu-id="2ed3f-3296">속성이 포함된 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3296">The <see cref="P:System.Linq.Expressions.Expression.Type" /> that contains the property.</span></span></param>
        <param name="propertyName"><span data-ttu-id="2ed3f-3297">액세스할 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3297">The property to be accessed.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3298">속성에 액세스하는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3298">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> accessing a property.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3299">만든 <see cref="T:System.Linq.Expressions.MemberExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3299">The created <see cref="T:System.Linq.Expressions.MemberExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyOrField">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression PropertyOrField (System.Linq.Expressions.Expression expression, string propertyOrFieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression PropertyOrField(class System.Linq.Expressions.Expression expression, string propertyOrFieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ PropertyOrField(System::Linq::Expressions::Expression ^ expression, System::String ^ propertyOrFieldName);" />
      <MemberSignature Language="F#" Value="static member PropertyOrField : System.Linq.Expressions.Expression * string -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.PropertyOrField (expression, propertyOrFieldName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyOrFieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-3300"><see cref="T:System.Linq.Expressions.Expression" />에 이름이 <see cref="P:System.Linq.Expressions.Expression.Type" />인 속성 또는 필드가 포함된 <paramref name="propertyOrFieldName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3300">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a property or field named <paramref name="propertyOrFieldName" />.</span></span> <span data-ttu-id="2ed3f-3301">이 값은 정적 멤버의 경우 null일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3301">This can be null for static members.</span></span></param>
        <param name="propertyOrFieldName"><span data-ttu-id="2ed3f-3302">액세스할 속성 또는 필드의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3302">The name of a property or field to be accessed.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3303">속성 또는 필드에 대한 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3303">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property or field.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3304"><see cref="T:System.Linq.Expressions.MemberExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> 속성이 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />으로 설정되고 <paramref name="expression" /> 속성이 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />이 가리키는 속성 또는 필드를 나타내는 <see cref="T:System.Reflection.PropertyInfo" /> 또는 <see cref="T:System.Reflection.FieldInfo" />로 설정된 <paramref name="propertyOrFieldName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3304">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> or <see cref="T:System.Reflection.FieldInfo" /> that represents the property or field denoted by <paramref name="propertyOrFieldName" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-3305"><xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.MemberExpression> 값과 같음를 <xref:System.Reflection.PropertyInfo.PropertyType%2A> 또는 <xref:System.Reflection.FieldInfo.FieldType%2A> 의 속성을 <xref:System.Reflection.PropertyInfo> 또는 <xref:System.Reflection.FieldInfo>각각 가리키는 필드나 속성을 나타내는 `propertyOrFieldName`.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3305">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> or <xref:System.Reflection.FieldInfo.FieldType%2A> properties of the <xref:System.Reflection.PropertyInfo> or <xref:System.Reflection.FieldInfo>, respectively, that represents the property or field denoted by `propertyOrFieldName`.</span></span>  
  
 <span data-ttu-id="2ed3f-3306">이 메서드는 검색 `expression`합니다. 형식 및 해당 기본 형식 속성 또는 필드 이름을 가진 `propertyOrFieldName`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3306">This method searches `expression`.Type and its base types for a property or field that has the name `propertyOrFieldName`.</span></span> <span data-ttu-id="2ed3f-3307">Public 속성 및 필드는 public이 아닌 속성 및 필드 보다 우선을 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3307">Public properties and fields are given preference over non-public properties and fields.</span></span> <span data-ttu-id="2ed3f-3308">또한 속성 필드를 통해 우선을 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3308">Also, properties are given preference over fields.</span></span> <span data-ttu-id="2ed3f-3309">이 메서드를 전달 하는 일치 하는 속성 또는 필드가 없으면 `expression` 하며 <xref:System.Reflection.PropertyInfo> 또는 <xref:System.Reflection.FieldInfo> 해당 속성이 나 필드를 나타내는 <xref:System.Linq.Expressions.Expression.Property%2A> 또는 <xref:System.Linq.Expressions.Expression.Field%2A>각각.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3309">If a matching property or field is found, this method passes `expression` and the <xref:System.Reflection.PropertyInfo> or <xref:System.Reflection.FieldInfo> that represents that property or field to <xref:System.Linq.Expressions.Expression.Property%2A> or <xref:System.Linq.Expressions.Expression.Field%2A>, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-3310">다음 예제에서는 속성 또는 필드에 액세스 하는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3310">The following example shows how to create an expression that represents accessing a property or field.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#39](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#39)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#39](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#39)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-3311"><paramref name="expression" /> 또는 <paramref name="propertyOrFieldName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3311"><paramref name="expression" /> or <paramref name="propertyOrFieldName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-3312"><paramref name="propertyOrFieldName" />.Type 또는 해당 기본 형식에 이름이 <paramref name="expression" />인 속성 또는 필드가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3312">No property or field named <paramref name="propertyOrFieldName" /> is defined in <paramref name="expression" />.Type or its base types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Quote">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Quote (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Quote(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Quote(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Quote : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Quote expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-3313"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3313">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3314"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 형식의 상수 값이 있는 식을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3314">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an expression that has a constant value of type <see cref="T:System.Linq.Expressions.Expression" />.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3315"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3315">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-3316">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.UnaryExpression> 생성 된 형식을 나타내는 <xref:System.Linq.Expressions.Expression%601>형식 인수가 나타내는 형식, `expression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3316">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> represents the constructed type <xref:System.Linq.Expressions.Expression%601>, where the type argument is the type represented by `expression`.Type.</span></span> <span data-ttu-id="2ed3f-3317"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3317">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property is `null`.</span></span> <span data-ttu-id="2ed3f-3318">둘 다 <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> 는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3318">Both <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> are `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-3319"><paramref name="expression" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3319"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reduce">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression Reduce ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression Reduce() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Reduce" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Reduce () As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Linq::Expressions::Expression ^ Reduce();" />
      <MemberSignature Language="F#" Value="abstract member Reduce : unit -&gt; System.Linq.Expressions.Expression&#xA;override this.Reduce : unit -&gt; System.Linq.Expressions.Expression" Usage="expression.Reduce " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2ed3f-3320">이 노드를 더 단순한 식으로 줄입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3320">Reduces this node to a simpler expression.</span></span> <span data-ttu-id="2ed3f-3321">CanReduce가 true를 반환하면 유효한 식을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3321">If CanReduce returns true, this should return a valid expression.</span></span> <span data-ttu-id="2ed3f-3322">이 메서드는 자체를 줄여야 하는 다른 노드를 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3322">This method can return another node which itself must be reduced.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3323">축소된 식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3323">The reduced expression.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReduceAndCheck">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression ReduceAndCheck ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression ReduceAndCheck() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
      <MemberSignature Language="VB.NET" Value="Public Function ReduceAndCheck () As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ ReduceAndCheck();" />
      <MemberSignature Language="F#" Value="member this.ReduceAndCheck : unit -&gt; System.Linq.Expressions.Expression" Usage="expression.ReduceAndCheck " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2ed3f-3324">이 노드를 더 단순한 식으로 줄입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3324">Reduces this node to a simpler expression.</span></span> <span data-ttu-id="2ed3f-3325">CanReduce가 true를 반환하면 유효한 식을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3325">If CanReduce returns true, this should return a valid expression.</span></span> <span data-ttu-id="2ed3f-3326">이 메서드는 자체를 줄여야 하는 다른 노드를 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3326">This method can return another node which itself must be reduced.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3327">축소된 식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3327">The reduced expression.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-3328">Reduce 달리이 메서드는 축소 된 노드는 특정 고정 충족 함을 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3328">Unlike Reduce, this method checks that the reduced node satisfies certain invariants.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReduceExtensions">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression ReduceExtensions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression ReduceExtensions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ReduceExtensions" />
      <MemberSignature Language="VB.NET" Value="Public Function ReduceExtensions () As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ ReduceExtensions();" />
      <MemberSignature Language="F#" Value="member this.ReduceExtensions : unit -&gt; System.Linq.Expressions.Expression" Usage="expression.ReduceExtensions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2ed3f-3329">알려진 노드 형식(확장 노드가 아님)으로 식을 줄이거나 이미 알려진 형식인 경우 식을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3329">Reduces the expression to a known node type (that is not an Extension node) or just returns the expression if it is already a known type.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3330">축소된 식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3330">The reduced expression.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ReferenceEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ReferenceEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReferenceEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ReferenceEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member ReferenceEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ReferenceEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-3331"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3331">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-3332"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3332">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3333">참조 같음 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3333">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a reference equality comparison.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3334"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3334">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceNotEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ReferenceNotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ReferenceNotEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReferenceNotEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ReferenceNotEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member ReferenceNotEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ReferenceNotEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-3335"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3335">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-3336"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3336">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3337">참조 다름 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3337">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a reference inequality comparison.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3338"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3338">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Rethrow">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-3339">예외를 다시 throw하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3339">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Rethrow">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Rethrow ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Rethrow() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Rethrow" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Rethrow () As UnaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Rethrow();" />
      <MemberSignature Language="F#" Value="static member Rethrow : unit -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Rethrow " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2ed3f-3340">예외를 다시 throw하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3340">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3341">예외를 다시 throw하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3341">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rethrow">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Rethrow (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Rethrow(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Rethrow(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Rethrow(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Rethrow : Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Rethrow type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="2ed3f-3342">식의 새 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3342">The new <see cref="T:System.Type" /> of the expression.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3343">지정된 형식을 사용하여 예외를 다시 throw하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3343">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception with a given type.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3344">예외를 다시 throw하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3344">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Return">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-3345">return 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3345">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Return (target As LabelTarget) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Return(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberSignature Language="F#" Value="static member Return : System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Return target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="2ed3f-3346"><see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3346">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3347">return 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3347">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3348"><see cref="T:System.Linq.Expressions.GotoExpression" />가 Return이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, 이동 시 대상 레이블에 null 값이 전달되는 <paramref name="target" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3348">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Return, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Return (target As LabelTarget, value As Expression) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Return(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value);" />
      <MemberSignature Language="F#" Value="static member Return : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Return (target, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="2ed3f-3349"><see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3349">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="value"><span data-ttu-id="2ed3f-3350">이동 시 연결된 레이블에 전달될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3350">The value that will be passed to the associated label upon jumping.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3351">return 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3351">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement.</span></span> <span data-ttu-id="2ed3f-3352">이동 시 레이블에 전달되는 값을 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3352">The value passed to the label upon jumping can be specified.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3353"><see cref="T:System.Linq.Expressions.GotoExpression" />가 Continue이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, 이동 시 대상 레이블에 <paramref name="target" />가 전달되는 <paramref name="value" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3353">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2ed3f-3354">다음 예제에서는 포함 하는 식을 생성 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.Return%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3354">The following example demonstrates how to create an expression that contains the <xref:System.Linq.Expressions.Expression.Return%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#43)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#43)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Return(System::Linq::Expressions::LabelTarget ^ target, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Return : System.Linq.Expressions.LabelTarget * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Return (target, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="2ed3f-3355"><see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3355">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="type"><span data-ttu-id="2ed3f-3356"><see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3356">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3357">지정된 형식을 사용하여 return 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3357">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement with the specified type.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3358"><see cref="T:System.Linq.Expressions.GotoExpression" />가 Return이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, <paramref name="target" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />으로 설정되고, 이동 시 대상 레이블에 null 값이 전달되는 <paramref name="type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3358">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Return, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Return(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Return : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Return (target, value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="type" Type="System.Type" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="2ed3f-3359"><see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3359">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="value"><span data-ttu-id="2ed3f-3360">이동 시 연결된 레이블에 전달될 값입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3360">The value that will be passed to the associated label upon jumping.</span></span></param>
        <param name="type"><span data-ttu-id="2ed3f-3361"><see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3361">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3362">지정된 형식을 사용하여 return 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3362">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement with the specified type.</span></span> <span data-ttu-id="2ed3f-3363">이동 시 레이블에 전달되는 값을 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3363">The value passed to the label upon jumping can be specified.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3364"><see cref="T:System.Linq.Expressions.GotoExpression" />가 Continue이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, <paramref name="target" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />으로 설정되고, 이동 시 대상 레이블에 <paramref name="type" />가 전달되는 <paramref name="value" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3364">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RightShift">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-3365">비트 오른쪽 시프트 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3365">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RightShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShift (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShift(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member RightShift : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.RightShift (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-3366"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3366">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-3367"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3367">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3368">비트 오른쪽 시프트 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3368">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3369"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3369">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-3370">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3370">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-3371"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3371">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-3372">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3372">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-3373">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3373">Otherwise, they are `false`.</span></span> <span data-ttu-id="2ed3f-3374"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3374">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-3375">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3375">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-3376">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3376">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-3377">다음 규칙은 선택한 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3377">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-3378">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 오른쪽 시프트 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3378">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the right-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-3379">그렇지 않은 경우, `left`합니다. 형식은 정수 계열 형식 (중 하나 <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>를 <xref:System.UInt32>, <xref:System.Int64>를 <xref:System.UInt64>, 또는 해당 nullable 형식) 및 `right`합니다. 형식은 <xref:System.Int32>의 메서드 구현은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3379">Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-3380">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3380">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-3381">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3381">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-3382">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3382">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-3383">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3383">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-3384">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3384">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-3385">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3385">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-3386">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3386">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-3387">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3387">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-3388">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3388">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-3389">노드의 유형 미리 정의 된 오른쪽 시프트 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3389">The type of the node is the result type of the predefined right-shift operator.</span></span>  
  
-   <span data-ttu-id="2ed3f-3390">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3390">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-3391">노드의 유형 미리 정의 된 오른쪽 시프트 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3391">The type of the node is the nullable type that corresponds to the result type of the predefined right-shift operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-3392"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3392"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-3393"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 오른쪽 시프트 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3393">The right-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RightShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShift (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShift(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member RightShift : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.RightShift (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-3394"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3394">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-3395"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3395">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-3396"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3396">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3397">비트 오른쪽 시프트 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3397">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3398"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3398">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-3399">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3399">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-3400"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3400">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-3401">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3401">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-3402">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3402">Otherwise, they are `false`.</span></span> <span data-ttu-id="2ed3f-3403"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3403">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-3404">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3404">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-3405">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3405">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-3406">다음 규칙은 선택한 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3406">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-3407">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 노드에 대 한 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3407">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="2ed3f-3408">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 오른쪽 시프트 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3408">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the right-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-3409">그렇지 않은 경우, `left`합니다. 형식은 정수 계열 형식 (중 하나 <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>를 <xref:System.UInt32>, <xref:System.Int64>를 <xref:System.UInt64>, 또는 해당 nullable 형식) 및 `right`합니다. 형식은 <xref:System.Int32>의 메서드 구현은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3409">Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-3410">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3410">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-3411">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3411">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-3412">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3412">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-3413">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3413">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-3414">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3414">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-3415">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3415">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-3416">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3416">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-3417">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3417">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-3418">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3418">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-3419">노드의 유형 미리 정의 된 오른쪽 시프트 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3419">The type of the node is the result type of the predefined right-shift operator.</span></span>  
  
-   <span data-ttu-id="2ed3f-3420">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3420">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-3421">노드의 유형 미리 정의 된 오른쪽 시프트 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3421">The type of the node is the nullable type that corresponds to the result type of the predefined right-shift operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-3422"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3422"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-3423"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3423"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-3424"><paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 오른쪽 시프트 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3424"><paramref name="method" /> is <see langword="null" /> and the right-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="RightShiftAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-3425">비트 오른쪽 시프트 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3425">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RightShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShiftAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member RightShiftAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.RightShiftAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-3426"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3426">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-3427"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3427">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3428">비트 오른쪽 시프트 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3428">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3429"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3429">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShiftAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member RightShiftAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.RightShiftAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-3430"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3430">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-3431"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3431">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-3432"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3432">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3433">비트 오른쪽 시프트 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3433">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3434"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3434">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShiftAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member RightShiftAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.RightShiftAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-3435"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3435">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-3436"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3436">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-3437"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3437">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="2ed3f-3438"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3438">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3439">비트 오른쪽 시프트 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3439">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3440"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3440">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RuntimeVariables">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-3441"><see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />의 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3441">Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RuntimeVariables">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RuntimeVariables (variables As IEnumerable(Of ParameterExpression)) As RuntimeVariablesExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::RuntimeVariablesExpression ^ RuntimeVariables(System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables);" />
      <MemberSignature Language="F#" Value="static member RuntimeVariables : seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.RuntimeVariablesExpression" Usage="System.Linq.Expressions.Expression.RuntimeVariables variables" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.RuntimeVariablesExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="variables"><span data-ttu-id="2ed3f-3442"><see cref="T:System.Linq.Expressions.ParameterExpression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 개체의 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3442">A collection of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3443"><see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />의 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3443">Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3444"><see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3444">An instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> and the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> property set to the specified value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RuntimeVariables">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables (params System.Linq.Expressions.ParameterExpression[] variables);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables(class System.Linq.Expressions.ParameterExpression[] variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RuntimeVariables (ParamArray variables As ParameterExpression()) As RuntimeVariablesExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::RuntimeVariablesExpression ^ RuntimeVariables(... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables);" />
      <MemberSignature Language="F#" Value="static member RuntimeVariables : System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.RuntimeVariablesExpression" Usage="System.Linq.Expressions.Expression.RuntimeVariables variables" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.RuntimeVariablesExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Linq.Expressions.ParameterExpression[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="variables"><span data-ttu-id="2ed3f-3445"><see cref="T:System.Linq.Expressions.ParameterExpression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3445">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> collection.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3446"><see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />의 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3446">Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3447"><see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3447">An instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> and the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> property set to the specified value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-3448">오버플로를 검사하지 않는 산술 빼기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3448">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that does not have overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Subtract (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Subtract(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Subtract(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Subtract : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Subtract (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-3449"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3449">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-3450"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3450">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3451">오버플로를 검사하지 않는 산술 빼기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3451">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3452"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3452">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-3453">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3453">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-3454"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3454">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-3455">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3455">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-3456">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3456">Otherwise, they are `false`.</span></span> <span data-ttu-id="2ed3f-3457"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3457">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-3458">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3458">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-3459">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3459">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-3460">다음 규칙은 선택한 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3460">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-3461">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 빼기 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3461">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-3462">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3462">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-3463">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3463">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-3464">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3464">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-3465">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3465">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-3466">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3466">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-3467">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3467">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-3468">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3468">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-3469">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3469">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-3470">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3470">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-3471">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3471">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-3472">노드의 유형 미리 정의 된 빼기 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3472">The type of the node is the result type of the predefined subtraction operator.</span></span>  
  
-   <span data-ttu-id="2ed3f-3473">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3473">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-3474">노드의 유형 미리 정의 된 빼기 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3474">The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-3475">다음 코드 예제에는 첫 번째 인수에서 인수를 빼는 하는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3475">The following code example shows how to create an expression that subtracts the argument from the first argument.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#30)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-3476"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3476"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-3477"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 빼기 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3477">The subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Subtract (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Subtract(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Subtract(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Subtract : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Subtract (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-3478"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3478">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-3479"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3479">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-3480"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3480">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3481">오버플로를 검사하지 않는 산술 빼기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3481">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3482"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3482">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-3483">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3483">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-3484"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3484">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-3485">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3485">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-3486">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3486">Otherwise, they are `false`.</span></span> <span data-ttu-id="2ed3f-3487"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3487">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-3488">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3488">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-3489">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3489">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-3490">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3490">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-3491">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 노드에 대 한 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3491">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="2ed3f-3492">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 빼기 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3492">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-3493">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3493">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-3494">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3494">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-3495">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3495">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-3496">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3496">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-3497">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3497">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-3498">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3498">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-3499">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3499">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-3500">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3500">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-3501">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3501">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-3502">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3502">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-3503">노드의 유형 미리 정의 된 빼기 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3503">The type of the node is the result type of the predefined subtraction operator.</span></span>  
  
-   <span data-ttu-id="2ed3f-3504">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3504">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-3505">노드의 유형 미리 정의 된 빼기 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3505">The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-3506"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3506"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-3507"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3507"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-3508"><paramref name="method" />가 <see langword="null" />이고 빼기 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3508"><paramref name="method" /> is <see langword="null" /> and the subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SubtractAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-3509">오버플로를 검사하지 않는 빼기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3509">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SubtractAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member SubtractAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-3510"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3510">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-3511"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3511">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3512">오버플로를 검사하지 않는 빼기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3512">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3513"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3513">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member SubtractAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-3514"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3514">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-3515"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3515">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-3516"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3516">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3517">오버플로를 검사하지 않는 빼기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3517">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3518"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3518">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member SubtractAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-3519"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3519">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-3520"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3520">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-3521"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3521">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="2ed3f-3522"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3522">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3523">오버플로를 검사하지 않는 빼기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3523">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3524"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3524">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SubtractAssignChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-3525">오버플로를 검사하는 빼기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3525">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SubtractAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssignChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member SubtractAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractAssignChecked (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-3526"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3526">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-3527"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3527">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3528">오버플로를 검사하는 빼기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3528">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3529"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3529">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssignChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member SubtractAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractAssignChecked (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-3530"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3530">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-3531"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3531">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-3532"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3532">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3533">오버플로를 검사하는 빼기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3533">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3534"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3534">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssignChecked (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member SubtractAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractAssignChecked (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-3535"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3535">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-3536"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3536">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-3537"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3537">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="2ed3f-3538"><see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3538">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3539">오버플로를 검사하는 빼기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3539">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3540"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3540">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SubtractChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-3541">오버플로를 검사하는 산술 빼기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3541">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that has overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SubtractChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member SubtractChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractChecked (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-3542"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3542">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-3543"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3543">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3544">오버플로를 검사하는 산술 빼기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3544">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3545"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3545">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-3546">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3546">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-3547"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3547">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-3548">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3548">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-3549">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3549">Otherwise, they are `false`.</span></span> <span data-ttu-id="2ed3f-3550"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3550">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-3551">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3551">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-3552">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3552">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-3553">다음 규칙은 선택한 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3553">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-3554">경우는 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 빼기 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3554">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-3555">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3555">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-3556">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3556">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-3557">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3557">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-3558">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3558">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-3559">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3559">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-3560">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3560">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-3561">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3561">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-3562">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3562">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-3563">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3563">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-3564">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3564">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-3565">노드의 유형 미리 정의 된 빼기 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3565">The type of the node is the result type of the predefined subtraction operator.</span></span>  
  
-   <span data-ttu-id="2ed3f-3566">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3566">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-3567">노드의 유형 미리 정의 된 빼기 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3567">The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-3568"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3568"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-3569"><paramref name="left" />.Type 및 <paramref name="right" />.Type에 빼기 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3569">The subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SubtractChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member SubtractChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractChecked (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="2ed3f-3570"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3570">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="2ed3f-3571"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3571">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-3572"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3572">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3573">오버플로를 검사하는 산술 빼기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3573">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3574"><see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3574">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-3575">결과 <xref:System.Linq.Expressions.BinaryExpression> 에 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 속성이 구현 메서드를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3575">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="2ed3f-3576"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3576">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-3577">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3577">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-3578">그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3578">Otherwise, they are `false`.</span></span> <span data-ttu-id="2ed3f-3579"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> 속성이 `null`일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3579">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="2ed3f-3580">다음 정보를 구현 하는 메서드를 노드 형식에 설명 및 노드 리프트 여부.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3580">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-3581">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3581">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-3582">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3582">The following rules determine the implementing method for the operation :</span></span>  
  
-   <span data-ttu-id="2ed3f-3583">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드는 두 개의 인수를 노드에 대 한 구현 메서드를 것입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3583">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="2ed3f-3584">그렇지 않은 경우, 합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 속성에 대 `left` 또는 `right` 빼기 연산자를 오버 로드 하는 사용자 정의 유형을 나타냅니다는 <xref:System.Reflection.MethodInfo> 메서드는 구현 하는 것이 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3584">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-3585">그렇지 않은 경우, `left`합니다. 형식 및 `right`합니다. 유형은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3585">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-3586">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3586">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-3587">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3587">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-3588">경우 `left`합니다. 형식 및 `right`합니다. 형식 구현 메서드의 해당 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3588">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-3589">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3589">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-3590">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3590">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-3591">`left`. 형식 및 `right`합니다. 형식이 값 형식 중 하나 이상이 null을 허용 하 고 해당 nullable이 아닌 형식과 구현 메서드의 해당 인수 유형이 같은지 집니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3591">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-3592">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3592">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-3593">구현 메서드가 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3593">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-3594">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 null이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3594">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-3595">노드의 유형 미리 정의 된 빼기 연산자의 결과 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3595">The type of the node is the result type of the predefined subtraction operator.</span></span>  
  
-   <span data-ttu-id="2ed3f-3596">경우 `left`합니다. 형식 및 `right`합니다. 형식 둘 다 노드가 리프트 된 null 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3596">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="2ed3f-3597">노드의 유형 미리 정의 된 빼기 연산자의 결과 형식에 해당 하는 nullable 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3597">The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-3598"><paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3598"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-3599"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3599"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-3600"><paramref name="method" />가 <see langword="null" />이고 빼기 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3600"><paramref name="method" /> is <see langword="null" /> and the subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Switch">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-3601"><see cref="T:System.Linq.Expressions.SwitchExpression" /> 문을 나타내는 <see langword="switch" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3601">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, params System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Switch (switchValue As Expression, ParamArray cases As SwitchCase()) As SwitchExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(System::Linq::Expressions::Expression ^ switchValue, ... cli::array &lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberSignature Language="F#" Value="static member Switch : System.Linq.Expressions.Expression * System.Linq.Expressions.SwitchCase[] -&gt; System.Linq.Expressions.SwitchExpression" Usage="System.Linq.Expressions.Expression.Switch (switchValue, cases)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="switchValue"><span data-ttu-id="2ed3f-3602">각 사례에 대해 테스트할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3602">The value to be tested against each case.</span></span></param>
        <param name="cases"><span data-ttu-id="2ed3f-3603">이 switch 식의 사례 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3603">The set of cases for this switch expression.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3604">기본 사례가 없는 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 문을 나타내는 <see langword="switch" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3604">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement without a default case.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3605">만든 <see cref="T:System.Linq.Expressions.SwitchExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3605">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-3606">모든 <xref:System.Linq.Expressions.SwitchCase> 개체를 <xref:System.Linq.Expressions.SwitchExpression> 경우가 아니면 개체에는 동일한 형식에 있어야 합니다 <xref:System.Linq.Expressions.SwitchExpression> 형식이 `void`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3606">All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.</span></span>  
  
 <span data-ttu-id="2ed3f-3607">각 <xref:System.Linq.Expressions.SwitchCase> 개체에는 암시적 `break` 문을 암시적 이동 금지 한 case 레이블 간 임을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3607">Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.</span></span>  
  
 <span data-ttu-id="2ed3f-3608">경우 `switchValue` 일치 하지 않습니다의 경우 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3608">If `switchValue` does not match any of the cases, no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-3609">다음 예제에서는 기본 사례가 없는 스위치 문을 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3609">The following example demonstrates how to create an expression that represents a switch statement without a default case.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#34](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#34)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, params System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Switch (switchValue As Expression, defaultBody As Expression, ParamArray cases As SwitchCase()) As SwitchExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, ... cli::array &lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberSignature Language="F#" Value="static member Switch : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.SwitchCase[] -&gt; System.Linq.Expressions.SwitchExpression" Usage="System.Linq.Expressions.Expression.Switch (switchValue, defaultBody, cases)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="switchValue"><span data-ttu-id="2ed3f-3610">각 사례에 대해 테스트할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3610">The value to be tested against each case.</span></span></param>
        <param name="defaultBody"><span data-ttu-id="2ed3f-3611"><paramref name="switchValue" />로 일치하는 사례가 없는 경우 switch의 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3611">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</span></span></param>
        <param name="cases"><span data-ttu-id="2ed3f-3612">이 switch 식의 사례 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3612">The set of cases for this switch expression.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3613">기본 사례가 있는 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 문을 나타내는 <see langword="switch" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3613">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3614">만든 <see cref="T:System.Linq.Expressions.SwitchExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3614">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-3615">모든 <xref:System.Linq.Expressions.SwitchCase> 개체를 <xref:System.Linq.Expressions.SwitchExpression> 경우가 아니면 개체에는 동일한 형식에 있어야 합니다 <xref:System.Linq.Expressions.SwitchExpression> 형식이 `void`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3615">All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.</span></span>  
  
 <span data-ttu-id="2ed3f-3616">각 <xref:System.Linq.Expressions.SwitchCase> 개체에는 암시적 `break` 문을 암시적 이동 금지 한 case 레이블 간 임을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3616">Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.</span></span>  
  
 <span data-ttu-id="2ed3f-3617">하는 경우 `switchValue` 사례를 나타내는 기본 대/소문자와 일치 하지 않습니다 `defaultBody` 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3617">If `switchValue` does not match any of the cases, the default case represented by `defaultBody` is run.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-3618">다음 예제에서는 기본 사례가 있는 switch 문을 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3618">The following example demonstrates how to create an expression that represents a switch statement that has a default case.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#35)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#35)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt; cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.SwitchCase&gt; cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Switch (switchValue As Expression, defaultBody As Expression, comparison As MethodInfo, cases As IEnumerable(Of SwitchCase)) As SwitchExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, System::Reflection::MethodInfo ^ comparison, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberSignature Language="F#" Value="static member Switch : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.SwitchCase&gt; -&gt; System.Linq.Expressions.SwitchExpression" Usage="System.Linq.Expressions.Expression.Switch (switchValue, defaultBody, comparison, cases)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cases" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt;" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="switchValue"><span data-ttu-id="2ed3f-3619">각 사례에 대해 테스트할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3619">The value to be tested against each case.</span></span></param>
        <param name="defaultBody"><span data-ttu-id="2ed3f-3620"><paramref name="switchValue" />로 일치하는 사례가 없는 경우 switch의 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3620">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</span></span></param>
        <param name="comparison"><span data-ttu-id="2ed3f-3621">사용할 같음 비교 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3621">The equality comparison method to use.</span></span></param>
        <param name="cases"><span data-ttu-id="2ed3f-3622">이 switch 식의 사례 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3622">The set of cases for this switch expression.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3623">기본 사례가 있는 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 문을 나타내는 <see langword="switch" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3623">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3624">만든 <see cref="T:System.Linq.Expressions.SwitchExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3624">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, params System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Switch (switchValue As Expression, defaultBody As Expression, comparison As MethodInfo, ParamArray cases As SwitchCase()) As SwitchExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, System::Reflection::MethodInfo ^ comparison, ... cli::array &lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberSignature Language="F#" Value="static member Switch : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.SwitchCase[] -&gt; System.Linq.Expressions.SwitchExpression" Usage="System.Linq.Expressions.Expression.Switch (switchValue, defaultBody, comparison, cases)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="switchValue"><span data-ttu-id="2ed3f-3625">각 사례에 대해 테스트할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3625">The value to be tested against each case.</span></span></param>
        <param name="defaultBody"><span data-ttu-id="2ed3f-3626"><paramref name="switchValue" />로 일치하는 사례가 없는 경우 switch의 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3626">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</span></span></param>
        <param name="comparison"><span data-ttu-id="2ed3f-3627">사용할 같음 비교 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3627">The equality comparison method to use.</span></span></param>
        <param name="cases"><span data-ttu-id="2ed3f-3628">이 switch 식의 사례 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3628">The set of cases for this switch expression.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3629">기본 사례가 있는 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 문을 나타내는 <see langword="switch" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3629">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3630">만든 <see cref="T:System.Linq.Expressions.SwitchExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3630">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (Type type, System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt; cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Type type, class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.SwitchCase&gt; cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(Type ^ type, System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, System::Reflection::MethodInfo ^ comparison, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberSignature Language="F#" Value="static member Switch : Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.SwitchCase&gt; -&gt; System.Linq.Expressions.SwitchExpression" Usage="System.Linq.Expressions.Expression.Switch (type, switchValue, defaultBody, comparison, cases)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cases" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt;" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="2ed3f-3631">switch의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3631">The result type of the switch.</span></span></param>
        <param name="switchValue"><span data-ttu-id="2ed3f-3632">각 사례에 대해 테스트할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3632">The value to be tested against each case.</span></span></param>
        <param name="defaultBody"><span data-ttu-id="2ed3f-3633"><paramref name="switchValue" />로 일치하는 사례가 없는 경우 switch의 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3633">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</span></span></param>
        <param name="comparison"><span data-ttu-id="2ed3f-3634">사용할 같음 비교 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3634">The equality comparison method to use.</span></span></param>
        <param name="cases"><span data-ttu-id="2ed3f-3635">이 switch 식의 사례 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3635">The set of cases for this switch expression.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3636">기본 사례가 있는 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 문을 나타내는 <see langword="switch" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3636">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3637">만든 <see cref="T:System.Linq.Expressions.SwitchExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3637">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (Type type, System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, params System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Type type, class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(Type ^ type, System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, System::Reflection::MethodInfo ^ comparison, ... cli::array &lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberSignature Language="F#" Value="static member Switch : Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.SwitchCase[] -&gt; System.Linq.Expressions.SwitchExpression" Usage="System.Linq.Expressions.Expression.Switch (type, switchValue, defaultBody, comparison, cases)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="2ed3f-3638">switch의 결과 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3638">The result type of the switch.</span></span></param>
        <param name="switchValue"><span data-ttu-id="2ed3f-3639">각 사례에 대해 테스트할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3639">The value to be tested against each case.</span></span></param>
        <param name="defaultBody"><span data-ttu-id="2ed3f-3640"><paramref name="switchValue" />로 일치하는 사례가 없는 경우 switch의 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3640">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</span></span></param>
        <param name="comparison"><span data-ttu-id="2ed3f-3641">사용할 같음 비교 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3641">The equality comparison method to use.</span></span></param>
        <param name="cases"><span data-ttu-id="2ed3f-3642">이 switch 식의 사례 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3642">The set of cases for this switch expression.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3643">기본 사례가 있는 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 문을 나타내는 <see langword="switch" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3643">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3644">만든 <see cref="T:System.Linq.Expressions.SwitchExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3644">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SwitchCase">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-3645"><see cref="T:System.Linq.Expressions.SwitchCase" /> 개체에 사용할 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 개체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3645">Creates a <see cref="T:System.Linq.Expressions.SwitchCase" /> object to be used in a <see cref="T:System.Linq.Expressions.SwitchExpression" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SwitchCase">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchCase SwitchCase (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; testValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchCase SwitchCase(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; testValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SwitchCase (body As Expression, testValues As IEnumerable(Of Expression)) As SwitchCase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchCase ^ SwitchCase(System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ testValues);" />
      <MemberSignature Language="F#" Value="static member SwitchCase : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.SwitchCase" Usage="System.Linq.Expressions.Expression.SwitchCase (body, testValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchCase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="testValues" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="2ed3f-3646">case의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3646">The body of the case.</span></span></param>
        <param name="testValues"><span data-ttu-id="2ed3f-3647">case의 테스트 값입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3647">The test values of the case.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3648"><see cref="T:System.Linq.Expressions.SwitchCase" /> 개체에 사용할 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 개체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3648">Creates a <see cref="T:System.Linq.Expressions.SwitchCase" /> object to be used in a <see cref="T:System.Linq.Expressions.SwitchExpression" /> object.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3649">만든 <see cref="T:System.Linq.Expressions.SwitchCase" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3649">The created <see cref="T:System.Linq.Expressions.SwitchCase" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-3650">모든 <xref:System.Linq.Expressions.SwitchCase> 개체를 <xref:System.Linq.Expressions.SwitchExpression> 경우가 아니면 개체에는 동일한 형식에 있어야 합니다 <xref:System.Linq.Expressions.SwitchExpression> 형식이 `void`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3650">All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.</span></span>  
  
 <span data-ttu-id="2ed3f-3651">각 <xref:System.Linq.Expressions.SwitchCase> 개체에는 암시적 `break` 문을 암시적 이동 금지 한 case 레이블 간 임을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3651">Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-3652">다음 예제에서는 기본 사례가 있는 switch 문을 나타내는 식을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3652">The following example demonstrates how to create an expression that represents a switch statement that has a default case.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#35)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#35)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SwitchCase">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchCase SwitchCase (System.Linq.Expressions.Expression body, params System.Linq.Expressions.Expression[] testValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchCase SwitchCase(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression[] testValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SwitchCase (body As Expression, ParamArray testValues As Expression()) As SwitchCase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchCase ^ SwitchCase(System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ testValues);" />
      <MemberSignature Language="F#" Value="static member SwitchCase : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.SwitchCase" Usage="System.Linq.Expressions.Expression.SwitchCase (body, testValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchCase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="testValues" Type="System.Linq.Expressions.Expression[]" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="2ed3f-3653">case의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3653">The body of the case.</span></span></param>
        <param name="testValues"><span data-ttu-id="2ed3f-3654">case의 테스트 값입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3654">The test values of the case.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3655"><see cref="T:System.Linq.Expressions.SwitchCase" />에 사용할 <see cref="T:System.Linq.Expressions.SwitchExpression" />를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3655">Creates a <see cref="T:System.Linq.Expressions.SwitchCase" /> for use in a <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3656">만든 <see cref="T:System.Linq.Expressions.SwitchCase" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3656">The created <see cref="T:System.Linq.Expressions.SwitchCase" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SymbolDocument">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-3657"><see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />의 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3657">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SymbolDocument (fileName As String) As SymbolDocumentInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SymbolDocumentInfo ^ SymbolDocument(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="static member SymbolDocument : string -&gt; System.Linq.Expressions.SymbolDocumentInfo" Usage="System.Linq.Expressions.Expression.SymbolDocument fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="2ed3f-3658"><see cref="T:System.String" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3658">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3659"><see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />의 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3659">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3660"><see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3660">A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> property set to the specified value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, valuetype System.Guid language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SymbolDocument (fileName As String, language As Guid) As SymbolDocumentInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SymbolDocumentInfo ^ SymbolDocument(System::String ^ fileName, Guid language);" />
      <MemberSignature Language="F#" Value="static member SymbolDocument : string * Guid -&gt; System.Linq.Expressions.SymbolDocumentInfo" Usage="System.Linq.Expressions.Expression.SymbolDocument (fileName, language)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="language" Type="System.Guid" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="2ed3f-3661"><see cref="T:System.String" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3661">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</span></span></param>
        <param name="language"><span data-ttu-id="2ed3f-3662"><see cref="T:System.Guid" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3662">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3663"><see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />의 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3663">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3664"><see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 및 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3664">A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> properties set to the specified value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language, Guid languageVendor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, valuetype System.Guid language, valuetype System.Guid languageVendor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SymbolDocument (fileName As String, language As Guid, languageVendor As Guid) As SymbolDocumentInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SymbolDocumentInfo ^ SymbolDocument(System::String ^ fileName, Guid language, Guid languageVendor);" />
      <MemberSignature Language="F#" Value="static member SymbolDocument : string * Guid * Guid -&gt; System.Linq.Expressions.SymbolDocumentInfo" Usage="System.Linq.Expressions.Expression.SymbolDocument (fileName, language, languageVendor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="language" Type="System.Guid" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="languageVendor" Type="System.Guid" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="2ed3f-3665"><see cref="T:System.String" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3665">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</span></span></param>
        <param name="language"><span data-ttu-id="2ed3f-3666"><see cref="T:System.Guid" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3666">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</span></span></param>
        <param name="languageVendor"><span data-ttu-id="2ed3f-3667"><see cref="T:System.Guid" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3667">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3668"><see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />의 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3668">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3669"><see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 및 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3669">A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> properties set to the specified value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language, Guid languageVendor, Guid documentType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, valuetype System.Guid language, valuetype System.Guid languageVendor, valuetype System.Guid documentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SymbolDocument (fileName As String, language As Guid, languageVendor As Guid, documentType As Guid) As SymbolDocumentInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SymbolDocumentInfo ^ SymbolDocument(System::String ^ fileName, Guid language, Guid languageVendor, Guid documentType);" />
      <MemberSignature Language="F#" Value="static member SymbolDocument : string * Guid * Guid * Guid -&gt; System.Linq.Expressions.SymbolDocumentInfo" Usage="System.Linq.Expressions.Expression.SymbolDocument (fileName, language, languageVendor, documentType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="language" Type="System.Guid" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="languageVendor" Type="System.Guid" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="documentType" Type="System.Guid" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="2ed3f-3670"><see cref="T:System.String" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3670">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</span></span></param>
        <param name="language"><span data-ttu-id="2ed3f-3671"><see cref="T:System.Guid" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3671">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</span></span></param>
        <param name="languageVendor"><span data-ttu-id="2ed3f-3672"><see cref="T:System.Guid" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3672">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> equal to.</span></span></param>
        <param name="documentType"><span data-ttu-id="2ed3f-3673"><see cref="T:System.Guid" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3673">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3674"><see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />의 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3674">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3675"><see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />, <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 및 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3675">A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> properties set to the specified value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Throw">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-3676">예외의 throw를 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3676">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a throwing of an exception.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Throw (System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Throw(class System.Linq.Expressions.Expression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Throw (value As Expression) As UnaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Throw(System::Linq::Expressions::Expression ^ value);" />
      <MemberSignature Language="F#" Value="static member Throw : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Throw value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2ed3f-3677"><see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3677">An <see cref="T:System.Linq.Expressions.Expression" />.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3678">예외의 throw를 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3678">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a throwing of an exception.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3679">예외를 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3679">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2ed3f-3680">다음 예제에서는 만드는 방법을 보여 줍니다.는 <xref:System.Linq.Expressions.TryExpression> 사용 하는 개체는 <xref:System.Linq.Expressions.Expression.Throw%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3680">The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that uses the <xref:System.Linq.Expressions.Expression.Throw%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#47)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#47)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Throw (System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Throw(class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Throw(System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Throw : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Throw (value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2ed3f-3681"><see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3681">An <see cref="T:System.Linq.Expressions.Expression" />.</span></span></param>
        <param name="type"><span data-ttu-id="2ed3f-3682">식의 새 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3682">The new <see cref="T:System.Type" /> of the expression.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3683">지정된 형식을 사용하여 예외를 throw하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3683">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a throwing of an exception with a given type.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3684">예외를 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3684">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the exception.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="expression.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2ed3f-3685"><see cref="T:System.Linq.Expressions.Expression" />의 텍스트 표현을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3685">Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression" />.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3686"><see cref="T:System.Linq.Expressions.Expression" />의 텍스트 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3686">A textual representation of the <see cref="T:System.Linq.Expressions.Expression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCatch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryCatch (System.Linq.Expressions.Expression body, params System.Linq.Expressions.CatchBlock[] handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryCatch(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.CatchBlock[] handlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryCatch (body As Expression, ParamArray handlers As CatchBlock()) As TryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ TryCatch(System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::CatchBlock ^&gt; ^ handlers);" />
      <MemberSignature Language="F#" Value="static member TryCatch : System.Linq.Expressions.Expression * System.Linq.Expressions.CatchBlock[] -&gt; System.Linq.Expressions.TryExpression" Usage="System.Linq.Expressions.Expression.TryCatch (body, handlers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="handlers" Type="System.Linq.Expressions.CatchBlock[]" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="2ed3f-3687">try 블록의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3687">The body of the try block.</span></span></param>
        <param name="handlers"><span data-ttu-id="2ed3f-3688">try 블록과 연결되는 catch 문을 나타내는 <see cref="T:System.Linq.Expressions.CatchBlock" /> 식을 0개 이상 포함하는 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3688">The array of zero or more <see cref="T:System.Linq.Expressions.CatchBlock" /> expressions representing the catch statements to be associated with the try block.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3689">원하는 수의 catch 문을 사용하고 fault 또는 finally 블록은 사용하지 않고 try 블록을 나타내는 <see cref="T:System.Linq.Expressions.TryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3689">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with any number of catch statements and neither a fault nor finally block.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3690">만든 <see cref="T:System.Linq.Expressions.TryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3690">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2ed3f-3691">다음 예제에서는 만드는 방법을 보여 줍니다는 <xref:System.Linq.Expressions.TryExpression> catch 문이 포함 된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3691">The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that contains a catch statement.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#47)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#47)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCatchFinally">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryCatchFinally (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally, params System.Linq.Expressions.CatchBlock[] handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryCatchFinally(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression finally, class System.Linq.Expressions.CatchBlock[] handlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryCatchFinally (body As Expression, finally As Expression, ParamArray handlers As CatchBlock()) As TryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ TryCatchFinally(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ finally, ... cli::array &lt;System::Linq::Expressions::CatchBlock ^&gt; ^ handlers);" />
      <MemberSignature Language="F#" Value="static member TryCatchFinally : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.CatchBlock[] -&gt; System.Linq.Expressions.TryExpression" Usage="System.Linq.Expressions.Expression.TryCatchFinally (body, finally, handlers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="finally" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="handlers" Type="System.Linq.Expressions.CatchBlock[]" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="2ed3f-3692">try 블록의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3692">The body of the try block.</span></span></param>
        <param name="finally"><span data-ttu-id="2ed3f-3693">finally 블록의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3693">The body of the finally block.</span></span></param>
        <param name="handlers"><span data-ttu-id="2ed3f-3694">try 블록과 연결되는 catch 문을 나타내는 <see cref="T:System.Linq.Expressions.CatchBlock" /> 식을 0개 이상 포함하는 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3694">The array of zero or more <see cref="T:System.Linq.Expressions.CatchBlock" /> expressions representing the catch statements to be associated with the try block.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3695">원하는 수의 catch 문과 finally 블록 하나를 사용하여 try 블록을 나타내는 <see cref="T:System.Linq.Expressions.TryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3695">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with any number of catch statements and a finally block.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3696">만든 <see cref="T:System.Linq.Expressions.TryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3696">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2ed3f-3697">다음 예제에서는 만드는 방법을 보여 줍니다는 <xref:System.Linq.Expressions.TryExpression> catch 문이 포함 된 개체 및 finally 문을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3697">The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that contains a catch statement and a finally statement.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#48](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#48)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#48](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#48)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFault">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryFault (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression fault);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryFault(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression fault) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFault (body As Expression, fault As Expression) As TryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ TryFault(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ fault);" />
      <MemberSignature Language="F#" Value="static member TryFault : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.TryExpression" Usage="System.Linq.Expressions.Expression.TryFault (body, fault)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="fault" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="2ed3f-3698">try 블록의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3698">The body of the try block.</span></span></param>
        <param name="fault"><span data-ttu-id="2ed3f-3699">fault 블록의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3699">The body of the fault block.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3700">catch 문은 사용하지 않고 fault 블록을 하나 사용하여 try 블록을 나타내는 <see cref="T:System.Linq.Expressions.TryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3700">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with a fault block and no catch statements.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3701">만든 <see cref="T:System.Linq.Expressions.TryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3701">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFinally">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryFinally (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryFinally(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression finally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFinally (body As Expression, finally As Expression) As TryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ TryFinally(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ finally);" />
      <MemberSignature Language="F#" Value="static member TryFinally : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.TryExpression" Usage="System.Linq.Expressions.Expression.TryFinally (body, finally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="finally" Type="System.Linq.Expressions.Expression" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="2ed3f-3702">try 블록의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3702">The body of the try block.</span></span></param>
        <param name="finally"><span data-ttu-id="2ed3f-3703">finally 블록의 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3703">The body of the finally block.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3704">catch 문은 사용하지 않고 finally 블록을 하나 사용하여 try 블록을 나타내는 <see cref="T:System.Linq.Expressions.TryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3704">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with a finally block and no catch statements.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3705">만든 <see cref="T:System.Linq.Expressions.TryExpression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3705">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetActionType">
      <MemberSignature Language="C#" Value="public static bool TryGetActionType (Type[] typeArgs, out Type actionType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetActionType(class System.Type[] typeArgs, [out] class System.Type&amp; actionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetActionType (typeArgs As Type(), ByRef actionType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetActionType(cli::array &lt;Type ^&gt; ^ typeArgs, [Runtime::InteropServices::Out] Type ^ % actionType);" />
      <MemberSignature Language="F#" Value="static member TryGetActionType : Type[] *  -&gt; bool" Usage="System.Linq.Expressions.Expression.TryGetActionType (typeArgs, actionType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="actionType" Type="System.Type" RefType="out" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="typeArgs"><span data-ttu-id="2ed3f-3706">System.Action 대리자 형식의 형식 인수를 지정하는 Type 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3706">An array of Type objects that specify the type arguments for the System.Action delegate type.</span></span></param>
        <param name="actionType"><span data-ttu-id="2ed3f-3707">이 메서드가 반환될 경우 특정 형식 인수가 있는 제네릭 System.Action 대리자 형식이 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3707">When this method returns, contains the generic System.Action delegate type that has specific type arguments.</span></span> <span data-ttu-id="2ed3f-3708"><paramref name="typeArgs" />와 일치하는 제네릭 System.Action 대리자가 없을 경우 null이 포함됩니다. 이 매개 변수는 초기화되지 않고 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3708">Contains null if there is no generic System.Action delegate that matches the <paramref name="typeArgs" />.This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3709">특정 형식 인수가 있는 제네릭 System.Action 대리자 형식을 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" /> 개체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3709">Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic System.Action delegate type that has specific type arguments.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3710">제네릭 System.Action 대리자 형식이 특정 <paramref name="typeArgs" />에 대해 만들어졌을 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3710"><see langword="true" /> if generic System.Action delegate type was created for specific <paramref name="typeArgs" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetFuncType">
      <MemberSignature Language="C#" Value="public static bool TryGetFuncType (Type[] typeArgs, out Type funcType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetFuncType(class System.Type[] typeArgs, [out] class System.Type&amp; funcType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetFuncType (typeArgs As Type(), ByRef funcType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetFuncType(cli::array &lt;Type ^&gt; ^ typeArgs, [Runtime::InteropServices::Out] Type ^ % funcType);" />
      <MemberSignature Language="F#" Value="static member TryGetFuncType : Type[] *  -&gt; bool" Usage="System.Linq.Expressions.Expression.TryGetFuncType (typeArgs, funcType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="funcType" Type="System.Type" RefType="out" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="typeArgs"><span data-ttu-id="2ed3f-3711">System.Func 대리자 형식의 형식 인수를 지정하는 Type 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3711">An array of Type objects that specify the type arguments for the System.Func delegate type.</span></span></param>
        <param name="funcType"><span data-ttu-id="2ed3f-3712">이 메서드가 반환될 경우 특정 형식 인수가 있는 제네릭 System.Func 대리자 형식이 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3712">When this method returns, contains the generic System.Func delegate type that has specific type arguments.</span></span> <span data-ttu-id="2ed3f-3713"><paramref name="typeArgs" />와 일치하는 제네릭 System.Func 대리자가 없을 경우 null이 포함됩니다. 이 매개 변수는 초기화되지 않고 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3713">Contains null if there is no generic System.Func delegate that matches the <paramref name="typeArgs" />.This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3714">특정 형식 인수가 있는 제네릭 System.Func 대리자 형식을 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" /> 개체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3714">Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic System.Func delegate type that has specific type arguments.</span></span> <span data-ttu-id="2ed3f-3715">마지막 형식 인수는 생성된 대리자의 반환 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3715">The last type argument specifies the return type of the created delegate.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3716">제네릭 System.Func 대리자 형식이 특정 <paramref name="typeArgs" />에 대해 만들어졌을 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3716"><see langword="true" /> if generic System.Func delegate type was created for specific <paramref name="typeArgs" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public virtual Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.Expression.Type" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Type As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ Type { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Type : Type" Usage="System.Linq.Expressions.Expression.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ed3f-3717">이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3717">Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</span></span></summary>
        <value><span data-ttu-id="2ed3f-3718">식의 정적 형식을 나타내는 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3718">The <see cref="T:System.Type" /> that represents the static type of the expression.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-3719">합니다 <xref:System.Linq.Expressions.Expression.NodeType%2A> 식 트리 노드를의 형식인 반면를 <xref:System.Linq.Expressions.Expression.Type%2A> 노드에서 나타내는 식의 정적 공용 언어 런타임 (CLR) 형식을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3719">The <xref:System.Linq.Expressions.Expression.NodeType%2A> is the type of the expression tree node, whereas the <xref:System.Linq.Expressions.Expression.Type%2A> represents the static common language runtime (CLR) type of the expression that the node represents.</span></span> <span data-ttu-id="2ed3f-3720">예를 들어, 다양 한 노드 형식 사용 하 여 두 개의 노드가 있습니다 동일한 <xref:System.Linq.Expressions.Expression.Type%2A>다음 코드 예제에 나와 있는 것 처럼 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3720">For example, two nodes with different node types can have the same <xref:System.Linq.Expressions.Expression.Type%2A>, as shown in the following code example.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#36](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#36)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#36)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeAs">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression TypeAs (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression TypeAs(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ TypeAs(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member TypeAs : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.TypeAs (expression, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-3721"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3721">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <param name="type"><span data-ttu-id="2ed3f-3722"><see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3722">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3723">변환에 실패하면 <see cref="T:System.Linq.Expressions.UnaryExpression" />이 제공되는 boxing 변환이나 명시적 참조를 나타내는 <see langword="null" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3723">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an explicit reference or boxing conversion where <see langword="null" /> is supplied if the conversion fails.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3724"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3724">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-3725">합니다 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> 결과 속성 <xref:System.Linq.Expressions.UnaryExpression> 는 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3725">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is `null`.</span></span> <span data-ttu-id="2ed3f-3726">합니다 <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> 속성은 모두 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3726">The <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> properties are both `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-3727">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.TypeAs%28System.Linq.Expressions.Expression%2CSystem.Type%29> 메서드를를 <xref:System.Linq.Expressions.UnaryExpression> 나타내는 nullable 정수 형식이 nullable이 아닌 정수 식의 참조 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3727">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.TypeAs%28System.Linq.Expressions.Expression%2CSystem.Type%29> method to create a <xref:System.Linq.Expressions.UnaryExpression> that represents the reference conversion of a non-nullable integer expression to the nullable integer type.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#11)]
 [!code-vb[System.Linq.Expressions.Expression#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-3728"><paramref name="expression" /> 또는 <paramref name="type" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3728"><paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TypeEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TypeBinaryExpression TypeEqual (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TypeBinaryExpression TypeEqual(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TypeBinaryExpression ^ TypeEqual(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member TypeEqual : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.TypeBinaryExpression" Usage="System.Linq.Expressions.Expression.TypeEqual (expression, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TypeBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-3729"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3729">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="T:System.Linq.Expressions.Expression" /> property equal to.</span></span></param>
        <param name="type"><span data-ttu-id="2ed3f-3730"><see cref="P:System.Linq.Expressions.Expression.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3730">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3731">런타임 형식 ID를 비교하는 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3731">Creates a <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> that compares run-time type identity.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3732"><see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /> 및 <see cref="T:System.Linq.Expressions.Expression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3732">A <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> for which the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is equal to <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /> and for which the <see cref="T:System.Linq.Expressions.Expression" /> and <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> properties are set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeIs">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TypeBinaryExpression TypeIs (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TypeBinaryExpression TypeIs(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TypeBinaryExpression ^ TypeIs(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member TypeIs : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.TypeBinaryExpression" Usage="System.Linq.Expressions.Expression.TypeIs (expression, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TypeBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-3733"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3733">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> property equal to.</span></span></param>
        <param name="type"><span data-ttu-id="2ed3f-3734"><see cref="P:System.Linq.Expressions.Expression.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3734">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3735"><see cref="T:System.Linq.Expressions.TypeBinaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3735">Creates a <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3736"><see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /> 및 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3736">A <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> for which the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is equal to <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /> and for which the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> and <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> properties are set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-3737">합니다 <xref:System.Linq.Expressions.Expression.Type%2A> 결과 속성 <xref:System.Linq.Expressions.UnaryExpression> 나타냅니다 <xref:System.Boolean>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3737">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> represents <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ed3f-3738">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.Expressions.Expression.TypeIs%28System.Linq.Expressions.Expression%2CSystem.Type%29> 메서드를를 <xref:System.Linq.Expressions.TypeBinaryExpression> 에 대 한 문자열 값의 형식 테스트를 나타내는 <xref:System.Int32> 형식.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3738">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.TypeIs%28System.Linq.Expressions.Expression%2CSystem.Type%29> method to create a <xref:System.Linq.Expressions.TypeBinaryExpression> that represents a type test of a string value against the <xref:System.Int32> type.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#12)]
 [!code-vb[System.Linq.Expressions.Expression#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-3739"><paramref name="expression" /> 또는 <paramref name="type" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3739"><paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UnaryPlus">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-3740">단항 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3740">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a unary plus operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UnaryPlus">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression UnaryPlus (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression UnaryPlus(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ UnaryPlus(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member UnaryPlus : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.UnaryPlus expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-3741"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3741">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3742">단항 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3742">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a unary plus operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3743"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3743">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-3744">합니다 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> 결과 속성 <xref:System.Linq.Expressions.UnaryExpression> 구현 방법으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3744">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="2ed3f-3745"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3745">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-3746">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3746">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-3747">이 고, 그렇지 않으면입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3747">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-3748">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3748">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-3749">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3749">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-3750">경우 `expression`합니다. 형식은 단항 더하기 연산자를 정의 하는 사용자 정의 형식은 <xref:System.Reflection.MethodInfo> 는 나타내는 연산자가 구현 메서드가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3750">If `expression`.Type is a user-defined type that defines the unary plus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-3751">그렇지 않은 경우, `expression`합니다. 형식은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3751">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-3752">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3752">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-3753">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3753">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-3754">경우 `expression`합니다. 형식은 구현 메서드의 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3754">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-3755">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3755">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-3756">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3756">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-3757">`expression`. 형식이 nullable 값 형식인와 구현 메서드의 인수 형식에 해당 하는 nullable이 아닌 값 형식 같습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3757">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-3758">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3758">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-3759">구현 메서드가 `null`, 노드 유형이 `expression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3759">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="2ed3f-3760">경우 `expression`합니다. 형식이 nullable이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3760">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-3761">그렇지 않은 경우 노드가 리프트 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3761">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-3762"><paramref name="expression" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3762"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-3763"><paramref name="expression" />.Type에 단항 더하기 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3763">The unary plus operator is not defined for <paramref name="expression" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="UnaryPlus">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression UnaryPlus (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression UnaryPlus(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ UnaryPlus(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member UnaryPlus : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.UnaryPlus (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-3764"><see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3764">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="2ed3f-3765"><see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3765">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3766">단항 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3766">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a unary plus operation.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3767"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3767">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-3768">합니다 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> 결과 속성 <xref:System.Linq.Expressions.UnaryExpression> 구현 방법으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3768">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="2ed3f-3769"><xref:System.Linq.Expressions.Expression.Type%2A> 노드 유형의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3769">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="2ed3f-3770">노드가 리프트 된 경우는 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> 하 고 <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> 속성은 모두 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3770">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="2ed3f-3771">이 고, 그렇지 않으면입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3771">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="2ed3f-3772">메서드 구현</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3772">Implementing Method</span></span>  
 <span data-ttu-id="2ed3f-3773">다음 규칙 작업에 대 한 구현 메서드를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3773">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="2ed3f-3774">경우 `method` 아닙니다 `null` void가 아닌 나타내고 `static` (`Shared` Visual Basic의) 메서드 인수 하나를 사용 하는 것이 노드에 대 한 구현 메서드.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3774">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="2ed3f-3775">경우 `expression`합니다. 형식은 단항 더하기 연산자를 정의 하는 사용자 정의 형식은 <xref:System.Reflection.MethodInfo> 는 나타내는 연산자가 구현 메서드가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3775">If `expression`.Type is a user-defined type that defines the unary plus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-3776">그렇지 않은 경우, `expression`합니다. 형식은 숫자 형식, 구현 방법은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3776">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="2ed3f-3777">노드 형식 및 비 리프트 및 리프트</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3777">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="2ed3f-3778">구현 메서드가 아닌 경우 `null`:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3778">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="2ed3f-3779">경우 `expression`합니다. 형식은 구현 메서드의 인수 형식에 할당할 수, 노드 리프트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3779">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-3780">노드의 유형 구현 메서드의 반환 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3780">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="2ed3f-3781">다음 두 조건이 충족 되 면 노드가 리프트 된 및 형식의 노드는 구현 메서드의 반환 형식에 해당 하는 nullable 형식:</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3781">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="2ed3f-3782">`expression`. 형식이 nullable 값 형식인와 구현 메서드의 인수 형식에 해당 하는 nullable이 아닌 값 형식 같습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3782">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="2ed3f-3783">구현 메서드의 반환 형식은 nullable이 아닌 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3783">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="2ed3f-3784">구현 메서드가 `null`, 노드 유형이 `expression`합니다. 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3784">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="2ed3f-3785">경우 `expression`합니다. 형식이 nullable이 아닌, 노드가 리프트 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3785">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="2ed3f-3786">그렇지 않은 경우 노드가 리프트 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3786">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ed3f-3787"><paramref name="expression" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3787"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ed3f-3788"><paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니거나, 정확하게 하나의 인수를 사용하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3788"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ed3f-3789"><paramref name="method" />가 <see langword="null" />이고 <paramref name="expression" />.Type에 단항 더하기 연산자가 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3789"><paramref name="method" /> is <see langword="null" /> and the unary plus operator is not defined for <paramref name="expression" />.Type.</span></span>  
  
<span data-ttu-id="2ed3f-3790">또는</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3790">-or-</span></span> 
 <span data-ttu-id="2ed3f-3791"><paramref name="expression" />.Type 또는 이 형식이 nullable 값 형식인 경우 nullable이 아닌 해당 형식을 <paramref name="method" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3791"><paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Unbox">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Unbox (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Unbox(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Unbox(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Unbox : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Unbox (expression, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="2ed3f-3792">unboxing할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3792">An <see cref="T:System.Linq.Expressions.Expression" /> to unbox.</span></span></param>
        <param name="type"><span data-ttu-id="2ed3f-3793">식의 새 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3793">The new <see cref="T:System.Type" /> of the expression.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3794">명시적 unboxing을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3794">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an explicit unboxing.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3795"><see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3795">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Variable">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2ed3f-3796">식 트리에서 매개 변수나 변수를 식별하는 데 사용할 수 있는 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3796">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Variable">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Variable (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Variable(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Variable(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ParameterExpression ^ Variable(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Variable : Type -&gt; System.Linq.Expressions.ParameterExpression" Usage="System.Linq.Expressions.Expression.Variable type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="2ed3f-3797">매개 변수 또는 변수의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3797">The type of the parameter or variable.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3798">식 트리에서 매개 변수나 변수를 식별하는 데 사용할 수 있는 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3798">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3799">지정된 이름과 형식의 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3799">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Variable">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Variable (Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Variable(class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ParameterExpression ^ Variable(Type ^ type, System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member Variable : Type * string -&gt; System.Linq.Expressions.ParameterExpression" Usage="System.Linq.Expressions.Expression.Variable (type, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="2ed3f-3800">매개 변수 또는 변수의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3800">The type of the parameter or variable.</span></span></param>
        <param name="name"><span data-ttu-id="2ed3f-3801">매개 변수나 변수의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3801">The name of the parameter or variable.</span></span> <span data-ttu-id="2ed3f-3802">이 이름은 디버깅 또는 인쇄용으로만 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3802">This name is used for debugging or printing purpose only.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3803">식 트리에서 매개 변수나 변수를 식별하는 데 사용할 수 있는 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3803">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3804">지정된 이름과 형식의 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3804">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitChildren">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitChildren (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitChildren(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitChildren (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ VisitChildren(System::Linq::Expressions::ExpressionVisitor ^ visitor);" />
      <MemberSignature Language="F#" Value="abstract member VisitChildren : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitChildren : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression" Usage="expression.VisitChildren visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="visitor"><span data-ttu-id="2ed3f-3805"><see cref="T:System.Func`2" />의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3805">An instance of <see cref="T:System.Func`2" />.</span></span></param>
        <summary><span data-ttu-id="2ed3f-3806">노드를 줄인 다음 줄인 식에서 방문자 대리자를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3806">Reduces the node and then calls the visitor delegate on the reduced expression.</span></span> <span data-ttu-id="2ed3f-3807">이 메서드는 노드를 줄일 수 없으면 예외를 throw합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3807">The method throws an exception if the node is not reducible.</span></span></summary>
        <returns><span data-ttu-id="2ed3f-3808">방문하는 식 또는 트리에서 해당 식을 바꿀 식입니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3808">The expression being visited, or an expression which should replace it in the tree.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ed3f-3809">노드의 자식을 탐색 하는 논리를 제공 하려면이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3809">Override this method to provide logic to walk the node's children.</span></span> <span data-ttu-id="2ed3f-3810">일반적인 구현에서는 방문자를 호출 합니다. 각 자식에 방문 하 고 있으면 해당 변경, 수정 된 자식 사용 하 여 자체의 새 복사본을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ed3f-3810">A typical implementation will call visitor.Visit on each of its children, and if any of them change, should return a new copy of itself with the modified children.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>