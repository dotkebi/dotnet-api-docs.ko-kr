<Type Name="IArgumentProvider" FullName="System.Linq.Expressions.IArgumentProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="18b622ce78fe8295b4aac908d2b2687c5ed1f01f" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58715507" /></Metadata><TypeSignature Language="C#" Value="public interface IArgumentProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IArgumentProvider" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.IArgumentProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IArgumentProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IArgumentProvider" />
  <TypeSignature Language="F#" Value="type IArgumentProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="64c43-101">여러 트리 노드(DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression 및 IndexExpression)의 인수에 액세스하기 위한 내부 인터페이스를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="64c43-101">Provides an internal interface for accessing the arguments of multiple tree nodes (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression, and IndexExpression).</span></span>  <span data-ttu-id="64c43-102">이 API를 사용하면 안됩니다.</span><span class="sxs-lookup"><span data-stu-id="64c43-102">You should not use this API.</span></span>  <span data-ttu-id="64c43-103">DLL 리팩터링으로 인해 공용으로만 사용되며 내부 성능 최적화용으로만 존재합니다.</span><span class="sxs-lookup"><span data-stu-id="64c43-103">It is only public due to DLL refactoring and exists only for internal performance optimizations.</span></span>  
  
<span data-ttu-id="64c43-104">이는 식 트리의 크기를 줄이는 두 가지 최적화를 가능하게 합니다.</span><span class="sxs-lookup"><span data-stu-id="64c43-104">This enables two optimizations which reduce the size of expression trees.</span></span>  <span data-ttu-id="64c43-105">첫 번째 최적화를 통해 트리 노드가 ReadOnlyCollection이 아니라 IList&lt;T&gt;를 유지할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="64c43-105">The first enables the tree nodes to hold onto an IList&lt;T&gt; instead of a ReadOnlyCollection.</span></span>  <span data-ttu-id="64c43-106">IList&lt;T&gt;는 각 노드에 대해 ReadOnlyCollection을 할당하는 비용을 절약합니다.</span><span class="sxs-lookup"><span data-stu-id="64c43-106">IList&lt;T&gt; saves the cost of allocating the ReadOnlyCollection for each node.</span></span>  <span data-ttu-id="64c43-107">두 번째는 특정 수의 인수(예: Block2, Block3, Block4)를 보유하는 특수 서브 클래스를 만들 수 있게 합니다.</span><span class="sxs-lookup"><span data-stu-id="64c43-107">The second enables creating specialized subclasses that hold onto a specific number of arguments (for example, Block2, Block3, Block4).</span></span>  <span data-ttu-id="64c43-108">따라서 이러한 노드는 ReadOnlyCollection과 해당 요소를 저장하기 위한 배열을 모두 할당하지 않으므로 노드당 32바이트를 절약합니다.</span><span class="sxs-lookup"><span data-stu-id="64c43-108">Therefore, these nodes avoid allocating both a ReadOnlyCollection and an array for storing their elements, saving 32 bytes per node.</span></span>  
  
<span data-ttu-id="64c43-109">식 트리 노드는 ReadOnlyCollections의 원래 LINQ 속성을 계속 노출합니다.</span><span class="sxs-lookup"><span data-stu-id="64c43-109">The expression tree nodes continue to expose the original LINQ properties of ReadOnlyCollections.</span></span>  <span data-ttu-id="64c43-110">노드는 배열 또는 일반적으로 배열에 저장되는 요소를 모두 저장하는 필드를 재사용함으로써 이 작업을 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="64c43-110">The nodes do this by re-using a field for storing both the array or an element that would normally be stored in the array.</span></span>  
  
<span data-ttu-id="64c43-111">배열의 경우 컬렉션은 ReadOnlyCollection&lt;T&gt;가 아니라 IList&lt;T&gt;로 형식화됩니다.</span><span class="sxs-lookup"><span data-stu-id="64c43-111">For the array case, the collection is typed to IList&lt;T&gt; instead of ReadOnlyCollection&lt;T&gt;.</span></span>  <span data-ttu-id="64c43-112">노드가 처음 생성될 때 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="64c43-112">When the node is initially constructed it is an array.</span></span>  <span data-ttu-id="64c43-113">컴파일러가 멤버에 액세스할 때 이 인터페이스를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="64c43-113">When the compiler accesses the members it uses this interface.</span></span>  <span data-ttu-id="64c43-114">배열 요소에 액세스하면 배열이 ReadOnlyCollection으로 승격됩니다.</span><span class="sxs-lookup"><span data-stu-id="64c43-114">Accessing array elements promotes the array to a ReadOnlyCollection.</span></span>  
  
<span data-ttu-id="64c43-115">개체의 경우 첫 번째 인수를 개체에 입력한 필드에 저장합니다.</span><span class="sxs-lookup"><span data-stu-id="64c43-115">For the object case we store the first argument in a field typed to object.</span></span>  <span data-ttu-id="64c43-116">노드를 처음 생성할 때 필드는 Expression을 보유합니다.</span><span class="sxs-lookup"><span data-stu-id="64c43-116">When the node is initially constructed, the field holds the Expression.</span></span>  <span data-ttu-id="64c43-117">컴파일러는 이 인터페이스를 통해 인수에 액세스하고 첫 번째 인수에 대한 접근자는 Expression.ReturnObject를 사용하여 Expression 또는 ReadOnlyCollection 사례를 처리하는 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="64c43-117">The compiler accesses arguments through this interface, and the accessor for the first argument uses Expression.ReturnObject to return the object that handles the Expression or ReadOnlyCollection case.</span></span>  <span data-ttu-id="64c43-118">사용자가 ReadOnlyCollection에 액세스하면 개체 필드가 ReadOnlyCollection에 직접 저장되도록 개체 필드가 업데이트됩니다.</span><span class="sxs-lookup"><span data-stu-id="64c43-118">When the user accesses the ReadOnlyCollection, then the object field is updated to hold directly onto the ReadOnlyCollection.</span></span>  
  
<span data-ttu-id="64c43-119">Expression이 동일한 ReadOnlyCollection을 일관되게 반환하는 것이 중요합니다.</span><span class="sxs-lookup"><span data-stu-id="64c43-119">It is important that the Expressions consistently return the same ReadOnlyCollection.</span></span>  <span data-ttu-id="64c43-120">그렇지 않으면 재기록 트리 워커가 중단됩니다.</span><span class="sxs-lookup"><span data-stu-id="64c43-120">Otherwise, the re-writer tree walker will break.</span></span>  <span data-ttu-id="64c43-121">동일한 Expression 노드에서 서로 다른 ReadOnlyCollections를 반환하는 것은 LINQ v1의 주요 변경 내용입니다.</span><span class="sxs-lookup"><span data-stu-id="64c43-121">It is a breaking change from LINQ v1 to return different ReadOnlyCollections form the same Expression node.</span></span>  <span data-ttu-id="64c43-122">현재 사용자가 개체 ID를 통해 노드가 변경되었는지 여부를 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="64c43-122">Currently users can rely on object identity to tell if the node has changed.</span></span>  <span data-ttu-id="64c43-123">오버로드된 필드에 ReadOnlyCollection을 저장하면 메모리 사용량이 감소하고 공용 API에 대한 호환성이 유지됩니다.</span><span class="sxs-lookup"><span data-stu-id="64c43-123">Storing the ReadOnlyCollection in an overloaded field both reduces memory usage and maintains compatibility for the public API.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ArgumentCount">
      <MemberSignature Language="C#" Value="public int ArgumentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ArgumentCount" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ArgumentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ArgumentCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ArgumentCount : int" Usage="System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="64c43-124">인수 수를 식 트리 노드에 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="64c43-124">Returns the number of arguments to the expression tree node.</span></span>  <span data-ttu-id="64c43-125">이 형식은 사용하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64c43-125">You should not use this type.</span></span>  <span data-ttu-id="64c43-126">어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="64c43-126">It is only public due to assembly refactoring, and it is used internally for performance optimizations.</span></span></summary>
        <value><span data-ttu-id="64c43-127">식 트리 노드에 <see cref="T:System.Int32" />로 반환되는 인수 수입니다.</span><span class="sxs-lookup"><span data-stu-id="64c43-127">The number of arguments to the expression tree node as <see cref="T:System.Int32" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArgument">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression GetArgument (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GetArgument(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetArgument (index As Integer) As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ GetArgument(int index);" />
      <MemberSignature Language="F#" Value="abstract member GetArgument : int -&gt; System.Linq.Expressions.Expression" Usage="iArgumentProvider.GetArgument index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="64c43-128">인수의 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="64c43-128">The index of the argument.</span></span></param>
        <summary><span data-ttu-id="64c43-129">인덱스에서 인수를 반환하며 인덱스가 범위를 벗어나는 경우 throw합니다.</span><span class="sxs-lookup"><span data-stu-id="64c43-129">Returns the argument at index, throwing if index is out of bounds.</span></span>  <span data-ttu-id="64c43-130">이 형식은 사용하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64c43-130">You should not use this type.</span></span>  <span data-ttu-id="64c43-131">어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="64c43-131">It is only public due to assembly refactoring, and it is used internally for performance optimizations.</span></span></summary>
        <returns><span data-ttu-id="64c43-132">인덱스에서 인수를 반환하며, 인덱스가 <see cref="T:System.Linq.Expressions.Expression" />으로 범위를 벗어나는 경우 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="64c43-132">The argument at index, throwing if index is out of bounds as <see cref="T:System.Linq.Expressions.Expression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>