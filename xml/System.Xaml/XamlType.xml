<Type Name="XamlType" FullName="System.Xaml.XamlType">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5f660970c55af6a8e8be700e1df5ac2c266d1596" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56383494" /></Metadata><TypeSignature Language="C#" Value="public class XamlType : IEquatable&lt;System.Xaml.XamlType&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlType extends System.Object implements class System.IEquatable`1&lt;class System.Xaml.XamlType&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlType" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlType&#xA;Implements IEquatable(Of XamlType)" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlType : IEquatable&lt;System::Xaml::XamlType ^&gt;" />
  <TypeSignature Language="F#" Value="type XamlType = class&#xA;    interface IEquatable&lt;XamlType&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Xaml.XamlType&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="a6beb-101">.NET Framework XAML 서비스에 구현된 전체 XAML 시스템의 일부로 XAML 형식에 대한 정보를 보고합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-101">Reports information about XAML types as part of the overall XAML system that is implemented in .NET Framework XAML Services.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-102">대부분의 Api는 <xref:System.Xaml.XamlType> 클래스 보고 개념은 비슷하지만 XAML 사양 [MS XAML]의 특정 섹션에 있는 XAML 형식에 대 한 정보를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-102">Many APIs in the <xref:System.Xaml.XamlType> class provide information about XAML types, where the concept they report on is similar to particular sections of the XAML specification [MS-XAML].</span></span>  
  
 <span data-ttu-id="a6beb-103"><xref:System.Xaml.XamlType> 광범위 하 게.NET Framework XAML 서비스 api에서는 XAML 형식에 대 한 정보를 보고 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-103"><xref:System.Xaml.XamlType> is used extensively in the .NET Framework XAML Services API for reporting information about a XAML type.</span></span> <span data-ttu-id="a6beb-104"><xref:System.Xaml.XamlType> 인스턴스를 사용 하거나 XAML 노드 스트림 또는 유사한 XAML 표현에서 해당 멤버에 액세스 하는 XAML 형식에 알아야 할 필요할 수 있는 정보를 보고 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-104"><xref:System.Xaml.XamlType> reports the information that you might need to know about a XAML type in order to work with an instance or to access its members from a XAML node stream, or a similar XAML representation.</span></span> <span data-ttu-id="a6beb-105">해당 보고 하는 방법과 유사 <xref:System.Type> clr에서 형식 시스템, 리플렉션 클래스와 함께 같은 <xref:System.Reflection.MemberInfo>, CLR 유형 및 해당 사용법에 대 한 정보를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-105">Its reporting is similar to how the <xref:System.Type> in the CLR type system, together with reflection classes such as <xref:System.Reflection.MemberInfo>, provide information about a CLR type and its usage.</span></span>  
  
 <span data-ttu-id="a6beb-106">XAML 형식 시스템을 확장 하려면에서 파생할 수 있습니다 <xref:System.Xaml.XamlType>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-106">To extend the XAML type system, you can derive from <xref:System.Xaml.XamlType>.</span></span> <span data-ttu-id="a6beb-107">를 효과적으로 수행 하려면 또한 해야 구현 하는 <xref:System.Xaml.Schema.XamlTypeInvoker>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-107">To do so effectively, you might also need to implement a <xref:System.Xaml.Schema.XamlTypeInvoker>.</span></span> <span data-ttu-id="a6beb-108"><xref:System.Xaml.Schema.XamlTypeInvoker> 호출 동작의 일부로 지정 하는 백업 형식 시스템을 사용 하는 일반화 된 XAML 형식 시스템을 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-108">The <xref:System.Xaml.Schema.XamlTypeInvoker> enables the generalized XAML type system to work with the type system backing that you specify as part of the invocation behavior.</span></span> <span data-ttu-id="a6beb-109">특정 사용자 지정 <xref:System.Xaml.Schema.XamlTypeInvoker> 는 기본적으로 사용 되는 CLR 형식 시스템에서 종속성을 줄이는 방법을 제공 <xref:System.Xaml.XamlType> 동작 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-109">The specific custom <xref:System.Xaml.Schema.XamlTypeInvoker> provides a way to reduce the dependencies on the CLR type system, which are used by the default <xref:System.Xaml.XamlType> behavior.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a6beb-110"><see cref="T:System.Xaml.XamlType" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-110">Initializes a new instance of the <see cref="T:System.Xaml.XamlType" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlType (Type underlyingType, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type underlyingType, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (underlyingType As Type, schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlType(Type ^ underlyingType, System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlType : Type * System.Xaml.XamlSchemaContext -&gt; System.Xaml.XamlType" Usage="new System.Xaml.XamlType (underlyingType, schemaContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="underlyingType" Type="System.Type" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="underlyingType"><span data-ttu-id="a6beb-111">생성할 XAML 형식에 대한 기본 CLR <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-111">The underlying CLR <see cref="T:System.Type" /> for the XAML type to construct.</span></span></param>
        <param name="schemaContext"><span data-ttu-id="a6beb-112">XAML 판독기 또는 XAML 작성기의 XAML 스키마 컨텍스트입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-112">XAML schema context for XAML readers or XAML writers.</span></span></param>
        <summary><span data-ttu-id="a6beb-113">기본 CLR 형식 정보를 기반으로 <see cref="T:System.Xaml.XamlType" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-113">Initializes a new instance of the <see cref="T:System.Xaml.XamlType" /> class based on the underlying CLR type information.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a6beb-114">하나 이상의 <paramref name="underlyingType" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-114">One or more of <paramref name="underlyingType" /> or <paramref name="schemaContext" /> are <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlType (string typeName, System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; typeArguments, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string typeName, class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; typeArguments, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (typeName As String, typeArguments As IList(Of XamlType), schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlType(System::String ^ typeName, System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ typeArguments, System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlType : string * System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; * System.Xaml.XamlSchemaContext -&gt; System.Xaml.XamlType" Usage="new System.Xaml.XamlType (typeName, typeArguments, schemaContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="a6beb-115">만들 형식의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-115">The name of the type to create.</span></span></param>
        <param name="typeArguments"><span data-ttu-id="a6beb-116">제네릭 형식을 나타내는 <see cref="T:System.Xaml.XamlType" />의 형식 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-116">The type arguments for a <see cref="T:System.Xaml.XamlType" /> that represents a generic type.</span></span> <span data-ttu-id="a6beb-117">표시된 형식이 제네릭 형식이 아님을 나타내는 <see langword="null" />인 경우가 많습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-117">Can be (and often is) <see langword="null" />, which indicates that the represented type is not a generic type.</span></span></param>
        <param name="schemaContext"><span data-ttu-id="a6beb-118">XAML 판독기 및 XAML 작성기의 XAML 스키마 컨텍스트입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-118">XAML schema context for XAML readers and XAML writers.</span></span></param>
        <summary><span data-ttu-id="a6beb-119">형식의 문자열 이름을 기반으로 <see cref="T:System.Xaml.XamlType" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-119">Initializes a new instance of the <see cref="T:System.Xaml.XamlType" /> class based on a string name for the type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-120">이 생성자는 protected 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-120">This is a protected constructor.</span></span> <span data-ttu-id="a6beb-121">현재 공용 파생된 클래스가 생성을 위해이 특정 경로 사용 하는 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-121">No current public derived classes exist that use this particular path for construction.</span></span> <span data-ttu-id="a6beb-122">기존 소비자로 서 <xref:System.Xaml.XamlType>, 다른 생성자 시그니처를 사용 해야 합니다 (<xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%2CSystem.Xaml.Schema.XamlTypeInvoker%29>를 <xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%29>, 또는 <xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29>) 초기화 하는 <xref:System.Xaml.XamlType> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-122">As a consumer of the existing <xref:System.Xaml.XamlType>, you must use the other constructor signatures (<xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%2CSystem.Xaml.Schema.XamlTypeInvoker%29>, <xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%29>, or <xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29>) to initialize a <xref:System.Xaml.XamlType> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a6beb-123">하나 이상의 <paramref name="typeName" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-123">One or more of <paramref name="typeName" /> or <paramref name="schemaContext" /> are <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlType (Type underlyingType, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlTypeInvoker invoker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type underlyingType, class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.Schema.XamlTypeInvoker invoker) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (underlyingType As Type, schemaContext As XamlSchemaContext, invoker As XamlTypeInvoker)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlType(Type ^ underlyingType, System::Xaml::XamlSchemaContext ^ schemaContext, System::Xaml::Schema::XamlTypeInvoker ^ invoker);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlType : Type * System.Xaml.XamlSchemaContext * System.Xaml.Schema.XamlTypeInvoker -&gt; System.Xaml.XamlType" Usage="new System.Xaml.XamlType (underlyingType, schemaContext, invoker)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="underlyingType" Type="System.Type" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="invoker" Type="System.Xaml.Schema.XamlTypeInvoker" />
      </Parameters>
      <Docs>
        <param name="underlyingType"><span data-ttu-id="a6beb-124">생성할 XAML 형식에 대한 기본 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-124">The underlying type for the XAML type to construct.</span></span></param>
        <param name="schemaContext"><span data-ttu-id="a6beb-125">XAML 판독기의 XAML 스키마 컨텍스트입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-125">XAML schema context for the XAML reader.</span></span></param>
        <param name="invoker"><span data-ttu-id="a6beb-126"><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 대한 런타임 리플렉션 호출을 처리하는 <see cref="T:System.Xaml.XamlType" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-126">The <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> implementation that handles run-time reflection calls against the <see cref="T:System.Xaml.XamlType" />.</span></span></param>
        <summary><span data-ttu-id="a6beb-127">기본 형식 정보와 <see cref="T:System.Xaml.XamlType" /> 구현을 기반으로 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-127">Initializes a new instance of the <see cref="T:System.Xaml.XamlType" /> class based on underlying type information and a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> implementation.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a6beb-128">하나 이상의 <paramref name="underlyingType" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-128">One or more of <paramref name="underlyingType" /> or <paramref name="schemaContext" /> are <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlType (string unknownTypeNamespace, string unknownTypeName, System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; typeArguments, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string unknownTypeNamespace, string unknownTypeName, class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; typeArguments, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (unknownTypeNamespace As String, unknownTypeName As String, typeArguments As IList(Of XamlType), schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlType(System::String ^ unknownTypeNamespace, System::String ^ unknownTypeName, System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ typeArguments, System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlType : string * string * System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; * System.Xaml.XamlSchemaContext -&gt; System.Xaml.XamlType" Usage="new System.Xaml.XamlType (unknownTypeNamespace, unknownTypeName, typeArguments, schemaContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="unknownTypeNamespace" Type="System.String" />
        <Parameter Name="unknownTypeName" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="unknownTypeNamespace"><span data-ttu-id="a6beb-129">형식에 대한 XML 네임스페이스로서, 문자열로 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-129">The XAML namespace for the type, as a string.</span></span></param>
        <param name="unknownTypeName"><span data-ttu-id="a6beb-130">제공된 <paramref name="unknownTypeNamespace" /> XAML 네임스페이스에 있는 형식의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-130">The name of the type in the provided <paramref name="unknownTypeNamespace" /> XAML namespace.</span></span></param>
        <param name="typeArguments"><span data-ttu-id="a6beb-131">제네릭 형식을 나타내는 <see cref="T:System.Xaml.XamlType" />의 형식 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-131">The type arguments for a <see cref="T:System.Xaml.XamlType" /> that represents a generic type.</span></span> <span data-ttu-id="a6beb-132">표시된 형식이 제네릭 형식이 아님을 나타내는 <see langword="null" />인 경우가 많습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-132">Can be (and often is) <see langword="null" />, which indicates that the represented type is not a generic type.</span></span></param>
        <param name="schemaContext"><span data-ttu-id="a6beb-133">XAML 판독기 또는 XAML 작성기의 XAML 스키마 컨텍스트입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-133">XAML schema context for XAML readers or XAML writers.</span></span></param>
        <summary><span data-ttu-id="a6beb-134">XAML 네임스페이스와 형식의 문자열 이름을 기반으로 <see cref="T:System.Xaml.XamlType" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-134">Initializes a new instance of the <see cref="T:System.Xaml.XamlType" /> class based on the XAML namespace and a string name for the type.</span></span> <span data-ttu-id="a6beb-135">이 생성자는 지원 형식 시스템과 XAML 스키마 컨텍스트에서 지원되지 않는 것으로 알려진 형식의 분석 및 XAML 노드 기록에만 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-135">This constructor is exclusively for analysis and XAML-node recording of type usages that are known to not have backing in the supporting type system and XAML schema context.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-136">기본 형식 시스템에 매핑되는 XAML 형식의 사용할 수 없는 "unknown" 형식에 대해서만이 생성자를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-136">Use this constructor only for "unknown" types where a XAML type that maps to an underlying type system is unavailable.</span></span> <span data-ttu-id="a6beb-137">이 생성자는 결과 생성 하지 않을 수 있습니다 위치 <xref:System.Xaml.XamlType.IsUnknown%2A?displayProperty=nameWithType> 는 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-137">This constructor might not produce a result where <xref:System.Xaml.XamlType.IsUnknown%2A?displayProperty=nameWithType> is `true`.</span></span> <span data-ttu-id="a6beb-138">기본 리플렉터 논리는 기본 형식을 보고 하는 대신 <xref:System.Xaml.XamlLanguage.Object%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-138">Instead, the default reflector logic reports the underlying type as <xref:System.Xaml.XamlLanguage.Object%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="a6beb-139">그러나이 동작 때문에 변경할 수는 <xref:System.Xaml.XamlType.LookupIsUnknown%2A> 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-139">However, this behavior can change because of the <xref:System.Xaml.XamlType.LookupIsUnknown%2A> override.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a6beb-140"><paramref name="unknownTypeNamespace" />, <paramref name="unknownTypeName" /> 또는 <paramref name="schemaContext" /> 중 하나 이상이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="a6beb-140">One or more of <paramref name="unknownTypeNamespace" />, <paramref name="unknownTypeName" />, or <paramref name="schemaContext" /> are <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AllowedContentTypes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; AllowedContentTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; AllowedContentTypes" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.AllowedContentTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowedContentTypes As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ AllowedContentTypes { System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AllowedContentTypes : System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" Usage="System.Xaml.XamlType.AllowedContentTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-141">이 <see cref="P:System.Xaml.XamlType.ContentProperty" />에 대한 <see cref="T:System.Xaml.XamlType" /> 값으로 사용할 수 있는 형식의 읽기 전용 컬렉션을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-141">Gets a read-only collection of the types that are usable as the <see cref="P:System.Xaml.XamlType.ContentProperty" /> value for this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <value><span data-ttu-id="a6beb-142">가능한 콘텐츠 형식의 읽기 전용 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-142">A read-only collection of possible content types.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-143">할당 가능한 형식 특정 콘텐츠 형식 (예: 허용 되는 콘텐츠 형식에는 기본 형식에 할당할 수)의 목적을 위해 여러 형식을 간주 되지 않습니다 <xref:System.Xaml.XamlType.AllowedContentTypes%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-143">Types that are assignable a specific content type (for example, assignable to a base type that is an allowed content type) are not considered multiple types for purposes of <xref:System.Xaml.XamlType.AllowedContentTypes%2A>.</span></span>  
  
 <span data-ttu-id="a6beb-144">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 있습니다 <xref:System.Xaml.XamlType.LookupAllowedContentTypes%2A> 에 재정의 <xref:System.Xaml.XamlType> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-144">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupAllowedContentTypes%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType BaseType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseType As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ BaseType { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseType : System.Xaml.XamlType" Usage="System.Xaml.XamlType.BaseType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-145">이 XAML 형식의 직접적인 기본 형식에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-145">Gets the <see cref="T:System.Xaml.XamlType" /> for the immediate base type of this XAML type.</span></span> <span data-ttu-id="a6beb-146">이 값은 이 <see cref="T:System.Xaml.XamlType" /> 및 스키마 컨텍스트의 기본 형식을 기준으로 결정됩니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-146">Determination of this value is based on the underlying type of this <see cref="T:System.Xaml.XamlType" /> and schema context.</span></span></summary>
        <value><span data-ttu-id="a6beb-147">이 XAML 형식의 직접적인 기본 형식에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-147">The <see cref="T:System.Xaml.XamlType" /> for the immediate base type of this XAML type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-148">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 있습니다 <xref:System.Xaml.XamlType.LookupBaseType%2A> 에 재정의 <xref:System.Xaml.XamlType> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-148">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupBaseType%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="a6beb-149">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 하세요. <xref:System.Xaml.XamlType.LookupBaseType%2A> 이 형식에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-149">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupBaseType%2A> on this type.</span></span> <span data-ttu-id="a6beb-150">기본적으로 <xref:System.Xaml.XamlType.BaseType%2A> 나타내는 내부 상수를 반환을 <xref:System.Object> 하는 경우 <xref:System.Xaml.XamlType.UnderlyingType%2A> 는 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-150">By default, <xref:System.Xaml.XamlType.BaseType%2A> returns an internal constant that represents an <xref:System.Object> if <xref:System.Xaml.XamlType.UnderlyingType%2A> is `null`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a6beb-151"><xref:System.Xaml.XamlType.LookupBaseType%2A> 가상 함수 이며 따라서 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-151"><xref:System.Xaml.XamlType.LookupBaseType%2A> is virtual, and therefore, can be overridden.</span></span> <span data-ttu-id="a6beb-152">재정의 될 수 없습니다 (악의적인 목적 여부 또는)이 더 이상 정렬 되도록 예상 되는 방식으로 기본 CLR 형식의 형식 시스템의 정보를 사용 하 여 XAML 형식에 대 한 보고 형식 정보를 변경 하려면.</span><span class="sxs-lookup"><span data-stu-id="a6beb-152">The override has the potential (whether for malicious purposes or otherwise) to change the reported type information about a XAML type so that it no longer aligns in an expected way with the type system information of its underlying CLR type.</span></span> <span data-ttu-id="a6beb-153">할당 작업 및 액세스의 보안에 중요 한 모든 검사에 대 한 기본 CLR 형식을 대신 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-153">For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanAssignTo">
      <MemberSignature Language="C#" Value="public virtual bool CanAssignTo (System.Xaml.XamlType xamlType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanAssignTo(class System.Xaml.XamlType xamlType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanAssignTo(System::Xaml::XamlType ^ xamlType);" />
      <MemberSignature Language="F#" Value="abstract member CanAssignTo : System.Xaml.XamlType -&gt; bool&#xA;override this.CanAssignTo : System.Xaml.XamlType -&gt; bool" Usage="xamlType.CanAssignTo xamlType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="xamlType"><span data-ttu-id="a6beb-154">현재 <see cref="T:System.Xaml.XamlType" />을 검사할 대상 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-154">The type to check against the current <see cref="T:System.Xaml.XamlType" /> .</span></span></param>
        <summary><span data-ttu-id="a6beb-155">이 <see cref="T:System.Xaml.XamlType" /> 인스턴스의 할당 가능한 형식 목록에 지정된 <see cref="T:System.Xaml.XamlType" />이 있는지 여부를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-155">Returns a value that indicates whether an instance of this <see cref="T:System.Xaml.XamlType" /> has the specified <see cref="T:System.Xaml.XamlType" /> in its list of assignable types.</span></span></summary>
        <returns><span data-ttu-id="a6beb-156"><paramref name="xamlType" />이 할당 가능한 형식 목록에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-156"><see langword="true" /> if <paramref name="xamlType" /> is in the assignable types list; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-157">할당 한 형식이 참조 형식인 모든 기능을 제공 하지는 않지만 할당에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-157">Although the assignable type does not have all the capabilities of the reference type, you can use it for assignment.</span></span> <span data-ttu-id="a6beb-158">예를 들어 속성의 값에 대 한 형식 일치 하는 할당을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-158">For example, you can use assignment to make type matches for the values of a property.</span></span> <span data-ttu-id="a6beb-159">XAML에 할당할 수 있는 형식의 개념은 CLR 형식 시스템에서 위로 캐스팅의 개념과 비슷합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-159">The concept of assignable types in XAML is similar to the concept of casting up in the CLR type system.</span></span> <span data-ttu-id="a6beb-160">예를 들어 CLR 형식 시스템에서 모든 형식에는 <xref:System.Object> 할당 가능한 형식 목록에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-160">For example, under a CLR type system, every type has an <xref:System.Object> in its assignable type list.</span></span>  
  
 <span data-ttu-id="a6beb-161">경우 둘 중 하나 <xref:System.Xaml.XamlType> 사용 되는 인스턴스 비교에 대 한 <xref:System.Xaml.XamlType.IsUnknown%2A> 같음 `true`,이 메서드가 반환 하는 특수 알 수 없는 모드 `true` 하는 경우 두 <xref:System.Xaml.XamlType> 인스턴스가 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-161">If one of the two <xref:System.Xaml.XamlType> instances that are used for comparison has <xref:System.Xaml.XamlType.IsUnknown%2A> equal to `true`, this method has a special Unknown mode that returns `true` if the two <xref:System.Xaml.XamlType> instances are equivalent.</span></span>  
  
 <span data-ttu-id="a6beb-162">기본 구현은 CLR을 사용 하 <xref:System.Type> 에서 <xref:System.Xaml.XamlType.UnderlyingType%2A> 이 대 한 <xref:System.Xaml.XamlType> 입력 <xref:System.Xaml.XamlType>, 및 호출 <xref:System.Type.IsAssignableFrom%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-162">The default implementation uses the CLR <xref:System.Type> from <xref:System.Xaml.XamlType.UnderlyingType%2A> for this <xref:System.Xaml.XamlType> and the input <xref:System.Xaml.XamlType>, and calls <xref:System.Type.IsAssignableFrom%2A>.</span></span> <span data-ttu-id="a6beb-163">할당할 수 있는 형식의 다른 결정 하려는 경우이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-163">Override this method if you want a different determination of assignable types.</span></span>  
  
 <span data-ttu-id="a6beb-164">Null을 전달 `xamlType` 예외를 throw 하지 않습니다 하 고 항상 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-164">Passing a null `xamlType` does not throw an exception and always returns `false`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a6beb-165"><xref:System.Xaml.XamlType.CanAssignTo%2A> 가상 함수 이며 따라서 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-165"><xref:System.Xaml.XamlType.CanAssignTo%2A> is virtual, and therefore, can be overridden.</span></span> <span data-ttu-id="a6beb-166">재정의 될 수 없습니다 (악의적인 목적 여부 또는) 기본 CLR 형식의 형식 캐스팅 동작에 더 이상 맞추는 예상 대로 되도록 XAML 형식의 가능성을 변경 하려면.</span><span class="sxs-lookup"><span data-stu-id="a6beb-166">The override has the potential (whether for malicious purposes or otherwise) to change the assignability of a XAML type so that it no longer aligns in an expected way with the type-casting behavior of its underlying CLR type.</span></span> <span data-ttu-id="a6beb-167">할당 작업 및 액세스의 보안에 중요 한 모든 검사에 대 한 기본 CLR 형식을 대신 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-167">For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstructionRequiresArguments">
      <MemberSignature Language="C#" Value="public bool ConstructionRequiresArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConstructionRequiresArguments" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.ConstructionRequiresArguments" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConstructionRequiresArguments As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ConstructionRequiresArguments { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ConstructionRequiresArguments : bool" Usage="System.Xaml.XamlType.ConstructionRequiresArguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-168">이 <see cref="T:System.Xaml.XamlType" />에 인수(<see langword="x:TypeArguments" />, 초기화 텍스트 또는 기타 XAML 기술을 통한 일반 제약 조건)가 있어야 해당 형식의 유효한 인스턴스를 생성할 수 있는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-168">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> must have arguments (generic constraints through <see langword="x:TypeArguments" />, initialization text, or other XAML techniques) to construct a valid instance of the type.</span></span></summary>
        <value><span data-ttu-id="a6beb-169">인스턴스를 생성하기 위해 일부 인수 값이 필요하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-169"><see langword="true" /> if construction of an instance requires some argument value; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-170">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 있습니다 <xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A> 에 재정의 <xref:System.Xaml.XamlType> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-170">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="a6beb-171">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 하세요. <xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A> 이 형식에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-171">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentProperty">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlMember ContentProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlMember ContentProperty" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.ContentProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContentProperty As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlMember ^ ContentProperty { System::Xaml::XamlMember ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContentProperty : System.Xaml.XamlMember" Usage="System.Xaml.XamlType.ContentProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-172">이 <see cref="T:System.Xaml.XamlMember" />의 콘텐츠 속성에 대한 <see cref="T:System.Xaml.XamlType" /> 정보를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-172">Gets the <see cref="T:System.Xaml.XamlMember" /> information for the content property of this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <value><span data-ttu-id="a6beb-173">이 <see cref="T:System.Xaml.XamlMember" />의 콘텐츠 속성에 대한 <see cref="T:System.Xaml.XamlType" /> 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-173"><see cref="T:System.Xaml.XamlMember" /> information for the content property of this <see cref="T:System.Xaml.XamlType" />.</span></span> <span data-ttu-id="a6beb-174">콘텐츠 속성이 없는 경우 <see langword="null" />일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-174">May be <see langword="null" /> if no content property exists.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-175">때 적용 하 여 형식에 XAML 콘텐츠 속성을 지정할 수는 바인딩을 사용 하 여 CLR 형식 시스템의 백업, <xref:System.Windows.Markup.ContentPropertyAttribute> 형식 정의에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-175">When using the binding or backing of the CLR type system, the XAML content property can be specified on a type by applying <xref:System.Windows.Markup.ContentPropertyAttribute> to the type definition.</span></span>  
  
 <span data-ttu-id="a6beb-176">이 속성에 맞도록는 `[content property]` [MS XAML] 사양에서 정보 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-176">This property aligns to the `[content property]` information item in the [MS-XAML] specification.</span></span>  
  
 <span data-ttu-id="a6beb-177">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 있습니다 <xref:System.Xaml.XamlType.LookupContentProperty%2A> 에 재정의 <xref:System.Xaml.XamlType> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-177">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupContentProperty%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="a6beb-178">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 하세요. <xref:System.Xaml.XamlType.LookupContentProperty%2A> 이 형식에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-178">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupContentProperty%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentWrappers">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; ContentWrappers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; ContentWrappers" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.ContentWrappers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContentWrappers As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ ContentWrappers { System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContentWrappers : System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" Usage="System.Xaml.XamlType.ContentWrappers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-179">콘텐츠 속성이 강력한 형식의 <see langword="Collection&lt;T&gt;" />에 있는 문자열과 같이 엄격한 형식 일치가 아닐 때 콘텐츠 속성의 콘텐츠를 래핑하는 데 사용되는 형식을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-179">Gets the types that are used to wrap content for a content property when it is not a strict type match, such as strings in a strongly typed <see langword="Collection&lt;T&gt;" />.</span></span></summary>
        <value><span data-ttu-id="a6beb-180">가능한 콘텐츠 래퍼 형식의 읽기 전용 컬렉션이거나, 그렇지 않으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-180">A read-only collection of possible content wrapper types; otherwise, <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-181">이 속성은 완화 하는 형식 일치 시키는 래퍼가 없으면 경우 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-181">If there are no wrappers to account for type match loosening, this property is `null`.</span></span>  
  
 <span data-ttu-id="a6beb-182">로 평가 되는 형식을 <xref:System.Xaml.XamlType.CanAssignTo%2A> 특정 콘텐츠 형식에 대 한 여러 형식의 목적을 간주 되지 않습니다 <xref:System.Xaml.XamlType.ContentWrappers%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-182">Types that evaluate as <xref:System.Xaml.XamlType.CanAssignTo%2A> for a specific content type are not considered multiple types for purposes of <xref:System.Xaml.XamlType.ContentWrappers%2A>.</span></span>  
  
 <span data-ttu-id="a6beb-183">에 대 한 CLR 바인딩에 <xref:System.Xaml> 하 고 <xref:System.Xaml.XamlType>, XAML 콘텐츠 래퍼 형식으로 형식을 지정할 수 있습니다는 <xref:System.Windows.Markup.ContentWrapperAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-183">In the CLR binding for <xref:System.Xaml> and <xref:System.Xaml.XamlType>, the XAML content wrapper type can be specified on a type as a <xref:System.Windows.Markup.ContentWrapperAttribute>.</span></span>  
  
 <span data-ttu-id="a6beb-184">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 있습니다 <xref:System.Xaml.XamlType.LookupContentWrappers%2A> 에 재정의 <xref:System.Xaml.XamlType> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-184">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupContentWrappers%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="a6beb-185">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 하세요. <xref:System.Xaml.XamlType.LookupContentWrappers%2A> 이 형식에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-185">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupContentWrappers%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeferringLoader">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt; DeferringLoader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Xaml.XamlDeferringLoader&gt; DeferringLoader" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.DeferringLoader" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeferringLoader As XamlValueConverter(Of XamlDeferringLoader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlValueConverter&lt;System::Xaml::XamlDeferringLoader ^&gt; ^ DeferringLoader { System::Xaml::Schema::XamlValueConverter&lt;System::Xaml::XamlDeferringLoader ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeferringLoader : System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;" Usage="System.Xaml.XamlType.DeferringLoader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-186">이 형식에 대한 지연된 로드 변환 동작을 나타내는 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-186">Gets the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> that represents the deferred loading conversion behavior for this type.</span></span></summary>
        <value><span data-ttu-id="a6beb-187">이 형식에 대한 지연된 로드 동작을 나타내는 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlDeferringLoader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-187">The <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Xaml.XamlDeferringLoader" /> constraint that represents the deferred loading behavior for this type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-188">WPF의 XAML 템플릿 동작은 지연 된 로드 동작의 예시입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-188">XAML template behavior in WPF is an example of deferred loading behavior.</span></span>  
  
 <span data-ttu-id="a6beb-189">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 있습니다 <xref:System.Xaml.XamlType.LookupDeferringLoader%2A> 에 재정의 <xref:System.Xaml.XamlType> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-189">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupDeferringLoader%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="a6beb-190">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 하세요. <xref:System.Xaml.XamlType.LookupDeferringLoader%2A> 이 형식에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-190">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupDeferringLoader%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a6beb-191">현재 개체가 다른 개체와 같은지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-191">Indicates whether the current object is equal to another object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="xamlType.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="a6beb-192">이 개체와 비교할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-192">The object to compare with this object.</span></span></param>
        <summary><span data-ttu-id="a6beb-193">현재 개체가 다른 개체와 같은지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-193">Indicates whether the current object is equal to another object.</span></span></summary>
        <returns><span data-ttu-id="a6beb-194">현재 개체가 <see langword="true" /> 매개 변수와 같으면 <paramref name="obj" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-194"><see langword="true" /> if the current object is equal to the <paramref name="obj" /> parameter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Xaml.XamlType other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Xaml.XamlType other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.Equals(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As XamlType) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Xaml::XamlType ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Xaml.XamlType -&gt; bool" Usage="xamlType.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="a6beb-195">이 개체와 비교할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-195">An object to compare with this object.</span></span></param>
        <summary><span data-ttu-id="a6beb-196">현재 개체가 동일한 형식의 다른 개체와 같은지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-196">Indicates whether the current object is equal to another object of the same type.</span></span></summary>
        <returns><span data-ttu-id="a6beb-197">현재 개체가 <see langword="true" /> 매개 변수와 같으면 <paramref name="other" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-197"><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAliasedProperty">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlMember GetAliasedProperty (System.Xaml.XamlDirective directive);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xaml.XamlMember GetAliasedProperty(class System.Xaml.XamlDirective directive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAliasedProperty (directive As XamlDirective) As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xaml::XamlMember ^ GetAliasedProperty(System::Xaml::XamlDirective ^ directive);" />
      <MemberSignature Language="F#" Value="member this.GetAliasedProperty : System.Xaml.XamlDirective -&gt; System.Xaml.XamlMember" Usage="xamlType.GetAliasedProperty directive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directive" Type="System.Xaml.XamlDirective" />
      </Parameters>
      <Docs>
        <param name="directive"><span data-ttu-id="a6beb-198">별칭이 지정된 멤버를 찾을 지시문입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-198">The directive for which to find the aliased member.</span></span></param>
        <summary><span data-ttu-id="a6beb-199">이 <see cref="T:System.Xaml.XamlType" />에 의해 XAML 지시문에 별칭으로 지정되는 XAML 멤버를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-199">Returns the XAML member that is aliased to a XAML directive by this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="a6beb-200">별칭이 지정된 멤버를 찾았으면 해당 멤버이고, 그렇지 않으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-200">The aliased member, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-201">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <xref:System.Xaml.XamlType>,이 메서드를 호출을 호출할 수 있습니다 <xref:System.Xaml.XamlType.LookupAliasedProperty%2A> 에 재정의 <xref:System.Xaml.XamlType> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-201">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this method can invoke <xref:System.Xaml.XamlType.LookupAliasedProperty%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="a6beb-202">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 하세요. <xref:System.Xaml.XamlType.LookupAliasedProperty%2A> 이 형식에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-202">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupAliasedProperty%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllAttachableMembers">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt; GetAllAttachableMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.ICollection`1&lt;class System.Xaml.XamlMember&gt; GetAllAttachableMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetAllAttachableMembers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllAttachableMembers () As ICollection(Of XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::ICollection&lt;System::Xaml::XamlMember ^&gt; ^ GetAllAttachableMembers();" />
      <MemberSignature Language="F#" Value="member this.GetAllAttachableMembers : unit -&gt; System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt;" Usage="xamlType.GetAllAttachableMembers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-203">이 <see cref="T:System.Xaml.XamlType" />에 의해 노출되는 모든 연결 가능 속성을 포함하는 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-203">Returns a collection that contains all the attachable properties that are exposed by this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="a6beb-204">0개 이상의 <see cref="T:System.Xaml.XamlMember" /> 값을 포함하는 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-204">A collection that contains zero or more <see cref="T:System.Xaml.XamlMember" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-205">각 <xref:System.Xaml.XamlMember> 반환된 된 컬렉션의 개념을 지원 하는 값을 포함 해야 하는 <xref:System.Xaml.XamlMember> 멤버에 연결할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-205">Each <xref:System.Xaml.XamlMember> in the returned collection should contain values that support the concept that the <xref:System.Xaml.XamlMember> is an attachable member.</span></span> <span data-ttu-id="a6beb-206">예를 들어, 멤버를 반환할지 `true` 에 대 한 <xref:System.Xaml.XamlMember.IsAttachable%2A>에 대 한 유형을 <xref:System.Xaml.XamlMember.TargetType%2A>등.</span><span class="sxs-lookup"><span data-stu-id="a6beb-206">For example, members should return `true` for <xref:System.Xaml.XamlMember.IsAttachable%2A>, a type for <xref:System.Xaml.XamlMember.TargetType%2A>, and so on.</span></span>  
  
 <span data-ttu-id="a6beb-207">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <xref:System.Xaml.XamlType>,이 메서드를 호출을 호출할 수 있습니다 <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> 에 재정의 <xref:System.Xaml.XamlType> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-207">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this method can invoke <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="a6beb-208">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 하세요. <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> 이 형식에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-208">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllMembers">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt; GetAllMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.ICollection`1&lt;class System.Xaml.XamlMember&gt; GetAllMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetAllMembers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllMembers () As ICollection(Of XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::ICollection&lt;System::Xaml::XamlMember ^&gt; ^ GetAllMembers();" />
      <MemberSignature Language="F#" Value="member this.GetAllMembers : unit -&gt; System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt;" Usage="xamlType.GetAllMembers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-209">이 <see cref="T:System.Xaml.XamlType" />에 의해 노출되는 모든 멤버를 포함하는 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-209">Returns a collection that contains all the members that are exposed by this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="a6beb-210">0개 이상의 <see cref="T:System.Xaml.XamlMember" /> 값을 포함하는 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-210">A collection that contains zero or more <see cref="T:System.Xaml.XamlMember" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-211">이 메서드를 호출을 호출할 수 있습니다 <xref:System.Xaml.XamlType.LookupAllMembers%2A> 에 재정의 <xref:System.Xaml.XamlType> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-211">Calls to this method can invoke <xref:System.Xaml.XamlType.LookupAllMembers%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttachableMember">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlMember GetAttachableMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xaml.XamlMember GetAttachableMember(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetAttachableMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttachableMember (name As String) As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xaml::XamlMember ^ GetAttachableMember(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.GetAttachableMember : string -&gt; System.Xaml.XamlMember" Usage="xamlType.GetAttachableMember name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="a6beb-212"><c>ownerTypeName.MemberName</c> 형식으로 된 가져올 연결 가능 멤버의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-212">The name of the attachable member to get, in <c>ownerTypeName.MemberName</c> form.</span></span></param>
        <summary><span data-ttu-id="a6beb-213">이 <see cref="T:System.Xaml.XamlType" />의 명명된 특정 연결 가능 멤버를 나타내는 <see cref="T:System.Xaml.XamlMember" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-213">Returns a <see cref="T:System.Xaml.XamlMember" /> representing a specific named attachable member of this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="a6beb-214">요청된 연결 가능 멤버의 경우 <see cref="T:System.Xaml.XamlMember" /> 개체이고, 그렇지 않고 해당 이름의 연결 가능 멤버가 없는 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-214">A <see cref="T:System.Xaml.XamlMember" /> object for the requested attachable member; otherwise, <see langword="null" />, if no attachable member by that name exists.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-215">이 메서드를 호출을 호출할 수 있습니다 <xref:System.Xaml.XamlType.LookupAttachableMember%2A> 에 재정의 <xref:System.Xaml.XamlType> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-215">Calls to this method can invoke <xref:System.Xaml.XamlType.LookupAttachableMember%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a6beb-216"><xref:System.Xaml.XamlType.LookupAttachableMember%2A> 가상 함수 이며 따라서 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-216"><xref:System.Xaml.XamlType.LookupAttachableMember%2A> is virtual, and therefore, can be overridden.</span></span> <span data-ttu-id="a6beb-217">재정의 될 수 없습니다 (악의적인 목적 여부 또는) 더 이상 예상 되는 방식으로 정렬 되도록 XAML 형식의 보고 된 구성원을 변경 하려면를 <xref:System.ComponentModel.TypeDescriptor> `Get*` 기본 CLR 형식에 대 한 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-217">The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the <xref:System.ComponentModel.TypeDescriptor> `Get*` information about the underlying CLR type.</span></span> <span data-ttu-id="a6beb-218">보고 하는 멤버의 모든 보안에 중요 한 검사를 기본 CLR 형식을 대신 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-218">For any security-critical checks of member reporting, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="xamlType.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-219">이 개체에 대한 해시 코드를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-219">Returns the hash code for this object.</span></span></summary>
        <returns><span data-ttu-id="a6beb-220">정수 해시 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-220">An integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlMember GetMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xaml.XamlMember GetMember(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMember (name As String) As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xaml::XamlMember ^ GetMember(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.GetMember : string -&gt; System.Xaml.XamlMember" Usage="xamlType.GetMember name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="a6beb-221">문자열로 가져올 멤버의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-221">The name of the member to get (as a string).</span></span></param>
        <summary><span data-ttu-id="a6beb-222">이 <see cref="T:System.Xaml.XamlMember" />에서 명명된 특정 멤버의 <see cref="T:System.Xaml.XamlType" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-222">Returns a <see cref="T:System.Xaml.XamlMember" /> for a specific named member from this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="a6beb-223">해당 멤버를 찾았으면 멤버의 <see cref="T:System.Xaml.XamlMember" /> 정보이고, 그렇지 않으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-223">The <see cref="T:System.Xaml.XamlMember" /> information for the member, if such a member was found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-224">에 대 한 값 `name` 비 정규화 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-224">The value for `name` is expected to be unqualified.</span></span> <span data-ttu-id="a6beb-225">연결 된 멤버를 나타내는 정규화 된 형식 이름에 제출 해야 <xref:System.Xaml.XamlType.GetAttachableMember%2A> 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-225">Type-qualified names that indicate an attached member should be submitted to <xref:System.Xaml.XamlType.GetAttachableMember%2A> instead.</span></span> <span data-ttu-id="a6beb-226">접두사가 붙은 이름을 사용할 수 없습니다; 멤버 접두사 사용에 상황에 따라 결정 되며 XAML 형식 시스템은 이런 사용의 컨텍스트 및 접두사 매핑되는 방법을 알 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-226">Prefixed member names should not be used; a prefix is situational to a usage and the XAML type system cannot know the context of such a usage and how the prefix is mapped.</span></span>  
  
 <span data-ttu-id="a6beb-227">이 메서드를 호출을 호출할 수 있습니다 <xref:System.Xaml.XamlType.LookupMember%2A> 에 재정의 <xref:System.Xaml.XamlType> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-227">Calls to this method can invoke <xref:System.Xaml.XamlType.LookupMember%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a6beb-228"><xref:System.Xaml.XamlType.LookupMember%2A> 가상 함수 이며 따라서 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-228"><xref:System.Xaml.XamlType.LookupMember%2A> is virtual, and therefore, can be overridden.</span></span> <span data-ttu-id="a6beb-229">재정의 될 수 없습니다 (악의적인 목적 여부 또는) 더 이상 예상 되는 방식으로 정렬 되도록 XAML 형식의 보고 된 구성원을 변경 하려면를 <xref:System.ComponentModel.TypeDescriptor> `Get*` 기본 CLR 형식에 대 한 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-229">The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the <xref:System.ComponentModel.TypeDescriptor> `Get*` information about the underlying CLR type.</span></span> <span data-ttu-id="a6beb-230">보고 하는 멤버의 모든 보안에 중요 한 검사를 기본 CLR 형식을 대신 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-230">For any security-critical checks of member reporting, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPositionalParameters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; GetPositionalParameters (int parameterCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; GetPositionalParameters(int32 parameterCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPositionalParameters (parameterCount As Integer) As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ GetPositionalParameters(int parameterCount);" />
      <MemberSignature Language="F#" Value="member this.GetPositionalParameters : int -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" Usage="xamlType.GetPositionalParameters parameterCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parameterCount"><span data-ttu-id="a6beb-231">정보를 보려는 특정 구문 또는 생성자 모드의 개수입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-231">The count (arity) of the particular syntax or constructor mode that you want information about.</span></span></param>
        <summary><span data-ttu-id="a6beb-232">태그 확장 형식의 경우 이 <see cref="T:System.Xaml.XamlType" />에 대한 특정 태그 확장 사용에서 지원되는 위치 매개 변수의 형식을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-232">For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="a6beb-233">각 <see cref="T:System.Xaml.XamlType" />이 구문에서 해당 위치의 형식인 <see cref="T:System.Xaml.XamlType" /> 값의 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-233">A list of <see cref="T:System.Xaml.XamlType" /> values, where each <see cref="T:System.Xaml.XamlType" /> is the type for that position in the syntax.</span></span> <span data-ttu-id="a6beb-234">태그 확장에 대한 태그 입력을 제공할 때 이 형식을 동일한 순서로 지정해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-234">You must specify the types in the same order when you supply markup input for the markup extension.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-235">이 API는만 관련이 <xref:System.Xaml.XamlType> 태그 확장을 나타내는지 (<xref:System.Xaml.XamlType.IsMarkupExtension%2A> 는 `true`).</span><span class="sxs-lookup"><span data-stu-id="a6beb-235">This API is only relevant if this <xref:System.Xaml.XamlType> represents a markup extension (<xref:System.Xaml.XamlType.IsMarkupExtension%2A> is `true`).</span></span>  
  
 <span data-ttu-id="a6beb-236">입력 `parameterCount` 특정 위치 매개 변수의 형식을 요청 하는 데 사용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-236">The input `parameterCount` is not for requesting the type of a specific positional parameter.</span></span> <span data-ttu-id="a6beb-237">태그 확장 사용의 인자 수를 지정 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-237">It is for specifying the arity of a markup extension usage.</span></span> <span data-ttu-id="a6beb-238">태그 확장 사용은 종종 여러 "서명" 하 고 구분 하기 위해 위치 매개 변수의 다른 매개 변수 인자 수 (개수)를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-238">Markup extension usage often has multiple "signatures" and uses different parameter arity (count) of positional parameters to differentiate.</span></span> <span data-ttu-id="a6beb-239">그러나 중복 arities를 허용 하 고 차이점에 대 한 형식의 위치 매개 변수를 사용 하는 스키마 컨텍스트를 구성할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-239">However, you can configure a schema context to allow duplicate arities and use types of the positional parameters for differentiation.</span></span> <span data-ttu-id="a6beb-240">자세한 내용은 <xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="a6beb-240">For more information, see <xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A>.</span></span> <span data-ttu-id="a6beb-241">특정 인자 (개수)에 대 한 매개 변수 위치 및 형식이 달라질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-241">For a specific arity (count), the parameter positions and types can vary.</span></span> <span data-ttu-id="a6beb-242">위치 형식의 특정 인자의 태그 확장 사용을 가져오려면 먼저 호출 <xref:System.Xaml.XamlType.GetPositionalParameters%2A> 인자 수를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-242">To get the positional type of a specific arity's markup extension usage, you first call <xref:System.Xaml.XamlType.GetPositionalParameters%2A> specifying the arity count.</span></span> <span data-ttu-id="a6beb-243">그런 다음 반환된 된 컬렉션에서 해당 위치의 항목을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-243">Then get the item at that position from the returned collection.</span></span>  
  
 <span data-ttu-id="a6beb-244">이 메서드를 호출을 호출할 수 있습니다 <xref:System.Xaml.XamlType.LookupPositionalParameters%2A> 에 재정의 <xref:System.Xaml.XamlType> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-244">Calls to this method can invoke <xref:System.Xaml.XamlType.LookupPositionalParameters%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXamlNamespaces">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;string&gt; GetXamlNamespaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;string&gt; GetXamlNamespaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetXamlNamespaces" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetXamlNamespaces () As IList(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IList&lt;System::String ^&gt; ^ GetXamlNamespaces();" />
      <MemberSignature Language="F#" Value="abstract member GetXamlNamespaces : unit -&gt; System.Collections.Generic.IList&lt;string&gt;&#xA;override this.GetXamlNamespaces : unit -&gt; System.Collections.Generic.IList&lt;string&gt;" Usage="xamlType.GetXamlNamespaces " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-245">이 형식이 포함되어 있는 XAML 네임스페이스에 대한 문자열 식별자 목록을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-245">Returns a list of string identifiers for XAML namespaces that the type is included in.</span></span></summary>
        <returns><span data-ttu-id="a6beb-246">각 문자열이 XAML 네임스페이스의 URI 식별자인 문자열 값 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-246">A list of string values, where each string is the URI identifier for a XAML namespace.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-247">일반적인 XAML 네임 스페이스 식별자는 URI 형식의 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-247">Typical XAML namespace identifiers are strings in URI form.</span></span>  
  
 <span data-ttu-id="a6beb-248">기본 구현에서는 다음 순서로 확인: 생성에 제공 되는 XAML 네임 스페이스 (<xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29> 서명 전용); 및 스키마 컨텍스트에서 사용할 수 있는 네임 스페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-248">The default implementation checks the following, in order: the XAML namespace that is supplied in construction (<xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29> signature only); and the namespaces that are available from the schema context.</span></span> <span data-ttu-id="a6beb-249">각각 `null`, 단일 빈 문자열을 포함 하는 새 목록이 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-249">If these are each `null`, a new list is generated that contains a single empty string.</span></span> <span data-ttu-id="a6beb-250">조회 방법을 변경 하려면이 메서드를 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-250">You can override this method to change the lookup methodology.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoker">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlTypeInvoker Invoker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlTypeInvoker Invoker" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.Invoker" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Invoker As XamlTypeInvoker" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlTypeInvoker ^ Invoker { System::Xaml::Schema::XamlTypeInvoker ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Invoker : System.Xaml.Schema.XamlTypeInvoker" Usage="System.Xaml.XamlType.Invoker" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlTypeInvoker</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-251">이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />과 연결된 <see cref="T:System.Xaml.XamlType" /> 구현을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-251">Gets the <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> implementation that is associated with this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <value><span data-ttu-id="a6beb-252">이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />과 연결된 <see cref="T:System.Xaml.XamlType" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-252">The <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> implementation that is associated with this <see cref="T:System.Xaml.XamlType" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-253">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <xref:System.Xaml.XamlType>, 호출 <xref:System.Xaml.XamlType.Invoker%2A> 호출할 수 <xref:System.Xaml.XamlType.LookupInvoker%2A> 또는 메서드의 특정 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-253">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calling <xref:System.Xaml.XamlType.Invoker%2A> can invoke either <xref:System.Xaml.XamlType.LookupInvoker%2A> or a specific override of that method.</span></span> <span data-ttu-id="a6beb-254">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 하세요. <xref:System.Xaml.XamlType.LookupInvoker%2A> 이 형식에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-254">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupInvoker%2A> on this type.</span></span>  
  
 <span data-ttu-id="a6beb-255">경우는 <xref:System.Xaml.XamlType.LookupInvoker%2A> 재정의 반환 `null`, 기본 구현을 반환 하는 경우 또는 `null` 부족으로 인해 <xref:System.Xaml.XamlType.UnderlyingType%2A> 이 대 한 <xref:System.Xaml.XamlType>, 다음 <xref:System.Xaml.XamlType.Invoker%2A> 반환 <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-255">If a <xref:System.Xaml.XamlType.LookupInvoker%2A> override returns `null`, or if the default implementation returns `null` because of lack of <xref:System.Xaml.XamlType.UnderlyingType%2A> for this <xref:System.Xaml.XamlType>, then <xref:System.Xaml.XamlType.Invoker%2A> returns <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAmbient">
      <MemberSignature Language="C#" Value="public bool IsAmbient { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAmbient" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsAmbient" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAmbient As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAmbient { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAmbient : bool" Usage="System.Xaml.XamlType.IsAmbient" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-256">XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 앰비언트 형식을 나타내는지 여부를 지정하는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-256">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents an ambient type, as per the XAML definition.</span></span></summary>
        <value><span data-ttu-id="a6beb-257">이 <see cref="T:System.Xaml.XamlType" />이 앰비언트 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-257"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents an ambient type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-258">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 있습니다 <xref:System.Xaml.XamlType.LookupIsAmbient%2A> 에 재정의 <xref:System.Xaml.XamlType> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-258">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsAmbient%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="a6beb-259">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 하세요. <xref:System.Xaml.XamlType.LookupIsAmbient%2A> 이 형식에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-259">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupIsAmbient%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public bool IsArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArray" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsArray" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsArray : bool" Usage="System.Xaml.XamlType.IsArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-260">이 <see cref="T:System.Xaml.XamlType" />이 배열을 나타내는지 여부를 지정하는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-260">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents an array.</span></span></summary>
        <value><span data-ttu-id="a6beb-261">이 <see cref="T:System.Xaml.XamlType" />이 배열을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-261"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents an array; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-262">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 있습니다 <xref:System.Xaml.XamlType.LookupCollectionKind%2A> 에 재정의 <xref:System.Xaml.XamlType> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-262">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupCollectionKind%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="a6beb-263">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 하세요. <xref:System.Xaml.XamlType.LookupCollectionKind%2A> 이 형식에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-263">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupCollectionKind%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCollection">
      <MemberSignature Language="C#" Value="public bool IsCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCollection" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsCollection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCollection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCollection { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCollection : bool" Usage="System.Xaml.XamlType.IsCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-264">이 <see cref="T:System.Xaml.XamlType" />이 컬렉션을 나타내는지 여부를 지정하는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-264">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a collection.</span></span></summary>
        <value><span data-ttu-id="a6beb-265">이 <see cref="T:System.Xaml.XamlType" />이 컬렉션을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-265"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a collection; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-266">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 있습니다 <xref:System.Xaml.XamlType.LookupCollectionKind%2A> 에 재정의 <xref:System.Xaml.XamlType> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-266">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupCollectionKind%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="a6beb-267">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 하세요. <xref:System.Xaml.XamlType.LookupCollectionKind%2A> 이 형식에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-267">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupCollectionKind%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConstructible">
      <MemberSignature Language="C#" Value="public bool IsConstructible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructible" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsConstructible" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsConstructible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsConstructible { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsConstructible : bool" Usage="System.Xaml.XamlType.IsConstructible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-268">XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 생성 가능 형식을 나타내는지 여부를 지정하는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-268">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a constructible type, as per the XAML definition.</span></span></summary>
        <value><span data-ttu-id="a6beb-269">이 <see cref="T:System.Xaml.XamlType" />이 생성 가능 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-269"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a constructible type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-270">이 속성에 맞도록는 `[is default constructible]` [MS XAML] 사양에서 정보 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-270">This property aligns to the `[is default constructible]` information item in the [MS-XAML] specification.</span></span>  
  
 <span data-ttu-id="a6beb-271">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 있습니다 <xref:System.Xaml.XamlType.LookupIsConstructible%2A> 에 재정의 <xref:System.Xaml.XamlType> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-271">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsConstructible%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="a6beb-272">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 하세요. <xref:System.Xaml.XamlType.LookupIsConstructible%2A> 이 형식에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-272">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupIsConstructible%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlType.ConstructionRequiresArguments" />
      </Docs>
    </Member>
    <Member MemberName="IsDictionary">
      <MemberSignature Language="C#" Value="public bool IsDictionary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDictionary" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsDictionary" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDictionary As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDictionary { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDictionary : bool" Usage="System.Xaml.XamlType.IsDictionary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-273">XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 사전을 나타내는지 여부를 지정하는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-273">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a dictionary, as per the XAML definition.</span></span></summary>
        <value><span data-ttu-id="a6beb-274">이 <see cref="T:System.Xaml.XamlType" />이 사전을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-274"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a dictionary; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-275">이 속성에 맞도록는 `[is dictionary]` [MS XAML] 사양에서 정보 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-275">This property aligns to the `[is dictionary]` information item in the [MS-XAML] specification.</span></span>  
  
 <span data-ttu-id="a6beb-276">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 있습니다 <xref:System.Xaml.XamlType.LookupCollectionKind%2A> 에 재정의 <xref:System.Xaml.XamlType> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-276">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupCollectionKind%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="a6beb-277">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 하세요. <xref:System.Xaml.XamlType.LookupCollectionKind%2A> 이 형식에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-277">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupCollectionKind%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGeneric">
      <MemberSignature Language="C#" Value="public bool IsGeneric { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGeneric" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsGeneric" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsGeneric As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsGeneric { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGeneric : bool" Usage="System.Xaml.XamlType.IsGeneric" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-278">이 <see cref="T:System.Xaml.XamlType" />이 제네릭 형식을 나타내는지 여부를 지정하는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-278">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a generic type.</span></span></summary>
        <value><span data-ttu-id="a6beb-279">이 <see cref="T:System.Xaml.XamlType" />이 제네릭 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-279"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a generic type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-280">이 속성은 null 값에 대 한 확인 하는 도우미 속성 <xref:System.Xaml.XamlType.TypeArguments%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-280">This property is a helper property that checks for a null value of <xref:System.Xaml.XamlType.TypeArguments%2A>.</span></span> <span data-ttu-id="a6beb-281">방법이 없는 특정 `Lookup` 관련 된 메서드 <xref:System.Xaml.XamlType.IsGeneric%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-281">There is no specific `Lookup` method related to <xref:System.Xaml.XamlType.IsGeneric%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMarkupExtension">
      <MemberSignature Language="C#" Value="public bool IsMarkupExtension { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMarkupExtension" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsMarkupExtension" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMarkupExtension As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMarkupExtension { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMarkupExtension : bool" Usage="System.Xaml.XamlType.IsMarkupExtension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-282">이 <see cref="T:System.Xaml.XamlType" />이 태그 확장을 나타내는지 여부를 지정하는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-282">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a markup extension.</span></span></summary>
        <value><span data-ttu-id="a6beb-283">이 <see cref="T:System.Xaml.XamlType" />이 태그 확장을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-283"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a markup extension; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-284">XAML 사양 말해에서이 형식에 할당할 수 있어야 `x:MarkupExtension` 반환 하기 위해 `true` 에 대 한 <xref:System.Xaml.XamlType.IsMarkupExtension%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-284">In XAML specification terms, this type must be assignable to `x:MarkupExtension` in order to return `true` for <xref:System.Xaml.XamlType.IsMarkupExtension%2A>.</span></span>  
  
 <span data-ttu-id="a6beb-285">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 있습니다 <xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A> 에 재정의 <xref:System.Xaml.XamlType> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-285">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="a6beb-286">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 하세요. <xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A> 이 형식에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-286">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNameScope">
      <MemberSignature Language="C#" Value="public bool IsNameScope { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNameScope" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsNameScope" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNameScope As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNameScope { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNameScope : bool" Usage="System.Xaml.XamlType.IsNameScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-287">XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 XAML 이름 범위를 나타내는지 여부를 지정하는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-287">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a XAML namescope, as per the XAML definition.</span></span></summary>
        <value><span data-ttu-id="a6beb-288">이 <see cref="T:System.Xaml.XamlType" />이 XAML 이름 범위를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-288"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a XAML namescope; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-289">속성 또는 속성에 사용 되는 이름 고유성을 적용 하는 XAML 이름 범위 `x:Name`  /  `[name property]`합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-289">A XAML namescope enforces the name uniqueness of the property or properties used for `x:Name` / `[name property]`.</span></span> <span data-ttu-id="a6beb-290">하는 경우 <xref:System.Xaml.XamlType.IsNameScope%2A> 는 `true`, 고유성을 적용 하기 위한 메커니즘이 있어야 하며 XAML 이름 범위를 소유 하는이 형식 측면에서 평가 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-290">If <xref:System.Xaml.XamlType.IsNameScope%2A> is `true`, some mechanism for enforcing uniqueness should exist and should evaluate from the perspective of this type owning a XAML namescope.</span></span> <span data-ttu-id="a6beb-291">다른 XAML 이름 범위를 소유 형식이 발견 될 때까지 XAML 이름 범위 형식의 내용으로 다음 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-291">The XAML namescope then extends to the content of the type until another XAML namescope-owning type is encountered.</span></span>  
  
 <span data-ttu-id="a6beb-292">이 속성에 맞도록는 `[is name scope]` [MS XAML] 사양에서 정보 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-292">This property aligns to the `[is name scope]` information item in the [MS-XAML] specification.</span></span>  
  
 <span data-ttu-id="a6beb-293">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 있습니다 <xref:System.Xaml.XamlType.LookupIsNameScope%2A> 에 재정의 <xref:System.Xaml.XamlType> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-293">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsNameScope%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNameValid">
      <MemberSignature Language="C#" Value="public bool IsNameValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNameValid" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsNameValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNameValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNameValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNameValid : bool" Usage="System.Xaml.XamlType.IsNameValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-294">이 <see cref="T:System.Xaml.XamlType" />이 유효한 <see langword="xamlName" /> 문자열을 <see cref="P:System.Xaml.XamlType.Name" />으로 사용하여 초기화되었는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-294">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> is initialized by using a valid <see langword="xamlName" /> string as its <see cref="P:System.Xaml.XamlType.Name" />.</span></span></summary>
        <value><span data-ttu-id="a6beb-295">이 <see cref="T:System.Xaml.XamlType" />이 유효한 <see langword="true" /> 문자열을 사용하여 초기화되었으면 <see langword="xamlName" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-295"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> is initialized by using a valid <see langword="xamlName" /> string; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNullable">
      <MemberSignature Language="C#" Value="public bool IsNullable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNullable" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsNullable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNullable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNullable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNullable : bool" Usage="System.Xaml.XamlType.IsNullable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-296">XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 null 허용 형식을 나타내는지 여부를 지정하는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-296">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a nullable type, as per the XAML definition.</span></span></summary>
        <value><span data-ttu-id="a6beb-297">이 <see cref="T:System.Xaml.XamlType" />이 null 허용 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-297"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a nullable type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-298">이 속성에 맞도록는 `[is nullable]` [MS XAML] 사양에서 정보 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-298">This property aligns to the `[is nullable]` information item in the [MS-XAML] specification.</span></span>  
  
 <span data-ttu-id="a6beb-299">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 있습니다 <xref:System.Xaml.XamlType.LookupIsNullable%2A> 에 재정의 <xref:System.Xaml.XamlType> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-299">If you are not using the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsNullable%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPublic : bool" Usage="System.Xaml.XamlType.IsPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-300">이 <see cref="T:System.Xaml.XamlType" />이 관련 형식 시스템에서 public 형식을 나타내는지 여부를 지정하는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-300">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a public type in the relevant type system.</span></span></summary>
        <value><span data-ttu-id="a6beb-301">이 <see cref="T:System.Xaml.XamlType" />이 public 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-301"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a public type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-302">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 있습니다 <xref:System.Xaml.XamlType.LookupIsPublic%2A> 에 재정의 <xref:System.Xaml.XamlType> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-302">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsPublic%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a6beb-303"><xref:System.Xaml.XamlType.LookupIsPublic%2A> 가상 함수 이며 따라서 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-303"><xref:System.Xaml.XamlType.LookupIsPublic%2A> is virtual, and therefore, can be overridden.</span></span> <span data-ttu-id="a6beb-304">재정의 될 수 없습니다 (악의적인 목적 여부 또는 그렇지 않은 경우)이 더 이상 정렬 되도록 예상 되는 방식으로 기본 CLR 형식의 형식 시스템 및 액세스 정보를 사용 하 여 XAML 형식에 대 한 보고 액세스 정보를 변경 하려면.</span><span class="sxs-lookup"><span data-stu-id="a6beb-304">The override has the potential (whether for malicious purposes or otherwise) to change the reported access information about a XAML type so that it no longer aligns in an expected way with the type system and access information of its underlying CLR type.</span></span> <span data-ttu-id="a6beb-305">할당 작업 및 액세스의 보안에 중요 한 모든 검사에 대 한 기본 CLR 형식을 대신 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-305">For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnknown">
      <MemberSignature Language="C#" Value="public bool IsUnknown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnknown" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsUnknown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUnknown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUnknown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUnknown : bool" Usage="System.Xaml.XamlType.IsUnknown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-306">이 <see cref="T:System.Xaml.XamlType" />이 기본 형식 시스템에서 확인할 수 없는 형식을 나타내는지 여부를 지정하는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-306">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a type that cannot be resolved in the underlying type system.</span></span></summary>
        <value><span data-ttu-id="a6beb-307">이 <see cref="T:System.Xaml.XamlType" />이 확인할 수 없는 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-307"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents an unresolvable type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-308">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 있습니다 <xref:System.Xaml.XamlType.LookupIsUnknown%2A> 에 재정의 <xref:System.Xaml.XamlType> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-308">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsUnknown%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span>  
  
 <span data-ttu-id="a6beb-309">포함 하는 로드 경로 대 한 <xref:System.Xaml.XamlObjectWriter>, a <xref:System.Xaml.XamlType> 있는 `true` 에 대 한 <xref:System.Xaml.XamlType.IsUnknown%2A> 개체 그래프에 쓸 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-309">For a load path that involves <xref:System.Xaml.XamlObjectWriter>, a <xref:System.Xaml.XamlType> that has `true` for <xref:System.Xaml.XamlType.IsUnknown%2A> cannot be written into an object graph.</span></span> <span data-ttu-id="a6beb-310">기본 구현은 아래 <xref:System.Xaml> , <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A?displayProperty=nameWithType> throw 호출을 <xref:System.Xaml.XamlObjectWriterException> 때 관련 <xref:System.Xaml.XamlType> 보고서 `true` 에 대 한 <xref:System.Xaml.XamlType.IsUnknown%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-310">Under the default implementations in <xref:System.Xaml> , the <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A?displayProperty=nameWithType> call throws a <xref:System.Xaml.XamlObjectWriterException> when the relevant <xref:System.Xaml.XamlType> reports `true` for <xref:System.Xaml.XamlType.IsUnknown%2A>.</span></span> <span data-ttu-id="a6beb-311">전달 해서는 안을 <xref:System.Xaml.XamlType> 있는 <xref:System.Xaml.XamlType.IsUnknown%2A> 으로 `true` 에서 예외를 처리할 준비가 아니라면 <xref:System.Xaml.XamlObjectWriter>, 조정 하는 다른 방법을 만들어야를 <xref:System.Xaml.XamlObjectWriter> 동작이 나 개체를 쓰기 전에 XAML 노드 스트림 그래프입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-311">You should not pass a <xref:System.Xaml.XamlType> that has <xref:System.Xaml.XamlType.IsUnknown%2A> as `true` unless you are prepared to handle the exceptions from <xref:System.Xaml.XamlObjectWriter>, or you have other ways to adjust the <xref:System.Xaml.XamlObjectWriter> behavior or the XAML node stream prior to writing the object graph.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUsableDuringInitialization">
      <MemberSignature Language="C#" Value="public bool IsUsableDuringInitialization { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUsableDuringInitialization" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsUsableDuringInitialization" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUsableDuringInitialization As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUsableDuringInitialization { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUsableDuringInitialization : bool" Usage="System.Xaml.XamlType.IsUsableDuringInitialization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-312">XAML을 초기화하는 동안 이 <see cref="T:System.Xaml.XamlType" />이 하향식으로 빌드되는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-312">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> is built top-down during XAML initialization.</span></span></summary>
        <value><span data-ttu-id="a6beb-313">XAML을 초기화하는 동안 이 <see cref="T:System.Xaml.XamlType" />이 하향식으로 빌드되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-313"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> is built top-down during XAML initialization; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a6beb-314">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-314">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-315">위에서 아래로 개체 그래프를 만들 때 XAML 프로세서 동작을 대략적으로 보여 주는 메타포입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-315">Top-down is a metaphor that approximates XAML processor behavior when creating the object graph.</span></span> <span data-ttu-id="a6beb-316">하향식을 빌드할 때 형식 인스턴스화되고 부모에 연결 된 다음 해당 속성이 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-316">When built top-down, a type is instantiated, attached to the parent, and then has its properties set.</span></span> <span data-ttu-id="a6beb-317">하향식 생성 속성 변경 처리기를 여러 번 호출을 방지 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-317">Top-down construction avoids invoking property-changed handlers multiple times.</span></span> <span data-ttu-id="a6beb-318">이러한 처리는 개체 그래프 위로 잔물결 및 따라서 여러 처리기 호출을 제거 하 고이 개체 그래프의 시작에 대 한 성능을 최적화 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-318">Such handling ripples up the object graph and therefore, eliminates the multiple handler calls and provides a performance optimization for startup of the object graph.</span></span>  
  
 <span data-ttu-id="a6beb-319">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 있습니다 <xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A> 에 재정의 <xref:System.Xaml.XamlType> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-319">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="a6beb-320">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 하세요. <xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A> 이 형식에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-320">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)" />
        <altmember cref="P:System.Windows.FrameworkElement.IsInitialized" />
      </Docs>
    </Member>
    <Member MemberName="IsWhitespaceSignificantCollection">
      <MemberSignature Language="C#" Value="public bool IsWhitespaceSignificantCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWhitespaceSignificantCollection" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsWhitespaceSignificantCollection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWhitespaceSignificantCollection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWhitespaceSignificantCollection { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsWhitespaceSignificantCollection : bool" Usage="System.Xaml.XamlType.IsWhitespaceSignificantCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-321">이 <see cref="T:System.Xaml.XamlType" />이 XML 정의를 기준으로 유효한 공백 컬렉션을 나타내는지 여부를 지정하는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-321">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a whitespace significant collection, as per the XML definition.</span></span></summary>
        <value><span data-ttu-id="a6beb-322">이 <see cref="T:System.Xaml.XamlType" />이 유효한 공백 컬렉션을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-322"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a whitespace significant collection; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-323">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 있습니다 <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> 에 재정의 <xref:System.Xaml.XamlType> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-323">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="a6beb-324">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 하세요. <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> 이 형식에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-324">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsXData">
      <MemberSignature Language="C#" Value="public bool IsXData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsXData" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsXData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsXData As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsXData { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsXData : bool" Usage="System.Xaml.XamlType.IsXData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-325">XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 XML <see langword="XDATA" />를 나타내는지 여부를 지정하는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-325">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents XML <see langword="XDATA" />, as per the XAML definition.</span></span></summary>
        <value><span data-ttu-id="a6beb-326">이 <see cref="T:System.Xaml.XamlType" />이 <see langword="true" />를 나타내면 <see langword="XDATA" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-326"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents <see langword="XDATA" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-327">이 속성에 맞도록는 `[is xdata]` [MS XAML] 사양에서 정보 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-327">This property aligns to the `[is xdata]` information item in the [MS-XAML] specification.</span></span>  
  
 <span data-ttu-id="a6beb-328">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 있습니다 <xref:System.Xaml.XamlType.LookupIsXData%2A> 에 재정의 <xref:System.Xaml.XamlType> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-328">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsXData%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="a6beb-329">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 하세요. <xref:System.Xaml.XamlType.LookupIsXData%2A> 이 형식에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-329">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupIsXData%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType ItemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType ItemType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.ItemType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ItemType As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ ItemType { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ItemType : System.Xaml.XamlType" Usage="System.Xaml.XamlType.ItemType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-330">이 <see cref="T:System.Xaml.XamlType" /> 개체의 <see langword="Items" /> 속성에 대한 형식 정보를 제공하는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-330">Gets a value that provides the type information for the <see langword="Items" /> property of this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <value><span data-ttu-id="a6beb-331">컬렉션에 있는 항목의 형식에 대한 <see cref="T:System.Xaml.XamlType" /> 개체이거나, 이 <see cref="T:System.Xaml.XamlType" />이 컬렉션을 나타내지 않는 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-331">A <see cref="T:System.Xaml.XamlType" /> object for the type of the items in the collection; otherwise, <see langword="null" />, if this <see cref="T:System.Xaml.XamlType" /> does not represent a collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-332">이 속성은이 관련만 <xref:System.Xaml.XamlType> 컬렉션을 나타냅니다 (<xref:System.Xaml.XamlType.IsCollection%2A> 는 `true`).</span><span class="sxs-lookup"><span data-stu-id="a6beb-332">This property is only relevant if this <xref:System.Xaml.XamlType> represents a collection (<xref:System.Xaml.XamlType.IsCollection%2A> is `true`).</span></span> <span data-ttu-id="a6beb-333">`Items` 속성은 컬렉션 또는 배열의 해당 형식에서 항목을 보유 하는 모든 속성.</span><span class="sxs-lookup"><span data-stu-id="a6beb-333">The `Items` property is whatever property holds items in that type of collection or array.</span></span>  
  
 <span data-ttu-id="a6beb-334">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 있습니다 <xref:System.Xaml.XamlType.LookupItemType%2A> 에 재정의 <xref:System.Xaml.XamlType> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-334">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupItemType%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="a6beb-335">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 하세요. <xref:System.Xaml.XamlType.LookupItemType%2A> 이 형식에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-335">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupItemType%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType KeyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType KeyType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.KeyType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyType As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ KeyType { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyType : System.Xaml.XamlType" Usage="System.Xaml.XamlType.KeyType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-336">이 <see cref="T:System.Xaml.XamlType" />이 사전을 나타내는 경우 이 <see cref="T:System.Xaml.XamlType" />의 키 속성에 대한 형식 정보를 제공하는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-336">Gets a value that provides the type information for the key property of this <see cref="T:System.Xaml.XamlType" />, if the <see cref="T:System.Xaml.XamlType" /> represents a dictionary.</span></span></summary>
        <value><span data-ttu-id="a6beb-337">사전인 경우 키의 형식에 대한 <see cref="T:System.Xaml.XamlType" /> 개체이며, 이 <see cref="T:System.Xaml.XamlType" />이 사전을 나타내지 않는 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-337">A <see cref="T:System.Xaml.XamlType" /> object for the type of the key for dictionary usage, otherwise, <see langword="null" />, if this <see cref="T:System.Xaml.XamlType" /> does not represent a dictionary.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-338">이 속성은이 관련만 <xref:System.Xaml.XamlType> 사전을 나타냅니다 (<xref:System.Xaml.XamlType.IsDictionary%2A> 는 `true`).</span><span class="sxs-lookup"><span data-stu-id="a6beb-338">This property is only relevant if this <xref:System.Xaml.XamlType> represents a dictionary (<xref:System.Xaml.XamlType.IsDictionary%2A> is `true`).</span></span>  
  
 <span data-ttu-id="a6beb-339">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 있습니다 <xref:System.Xaml.XamlType.LookupKeyType%2A> 에 재정의 <xref:System.Xaml.XamlType> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-339">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupKeyType%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="a6beb-340">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 하세요. <xref:System.Xaml.XamlType.LookupKeyType%2A> 이 형식에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-340">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupKeyType%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupAliasedProperty">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlMember LookupAliasedProperty (System.Xaml.XamlDirective directive);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlMember LookupAliasedProperty(class System.Xaml.XamlDirective directive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupAliasedProperty (directive As XamlDirective) As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlMember ^ LookupAliasedProperty(System::Xaml::XamlDirective ^ directive);" />
      <MemberSignature Language="F#" Value="abstract member LookupAliasedProperty : System.Xaml.XamlDirective -&gt; System.Xaml.XamlMember&#xA;override this.LookupAliasedProperty : System.Xaml.XamlDirective -&gt; System.Xaml.XamlMember" Usage="xamlType.LookupAliasedProperty directive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directive" Type="System.Xaml.XamlDirective" />
      </Parameters>
      <Docs>
        <param name="directive"><span data-ttu-id="a6beb-341">별칭이 지정된 멤버를 찾을 지시문입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-341">The directive for which to find the aliased member.</span></span></param>
        <summary><span data-ttu-id="a6beb-342">이 <see cref="T:System.Xaml.XamlType" />에 의해 XAML 지시문에 별칭으로 지정되는 XAML 멤버를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-342">Returns the XAML member that is aliased to a XAML directive by this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="a6beb-343">별칭이 지정된 멤버를 찾았으면 해당 멤버이고, 그렇지 않으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-343">The aliased member, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-344">값을 가져올 때이 메서드를 호출할 수 <xref:System.Xaml.XamlType.GetAliasedProperty%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-344">This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.GetAliasedProperty%2A>.</span></span>  
  
 <span data-ttu-id="a6beb-345">기본 구현은 다음과 같은 XAML 지시문에 대 한 결과 반환할 수 있습니다: `Key`; `Name`; `Uid`; 및 `xml:lang`합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-345">The default implementation can return results for the following XAML directives: `Key`; `Name`; `Uid`; and `xml:lang`.</span></span> <span data-ttu-id="a6beb-346">이러한 기본 리플렉션을 다르며 여전히 반환 될 수 있습니다에 대 한 값 `null` 별칭이 지정 된 속성이 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="a6beb-346">Values for these depend on underlying reflection and might still return `null` if no aliased property is found.</span></span>  
  
 <span data-ttu-id="a6beb-347">기본 내부 CLR 리플렉션에 의존 하지 않고 XAML 형식 시스템의 정보 또는 형식의 스키마 정보를 보고 하는 것에 대 한 메타 데이터 나 다른 기술을 사용할 경우이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-347">Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or the schema information of a type.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xaml.XamlDirective" />
        <altmember cref="T:System.Xaml.XamlLanguage" />
      </Docs>
    </Member>
    <Member MemberName="LookupAllAttachableMembers">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlMember&gt; LookupAllAttachableMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xaml.XamlMember&gt; LookupAllAttachableMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupAllAttachableMembers" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupAllAttachableMembers () As IEnumerable(Of XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::Xaml::XamlMember ^&gt; ^ LookupAllAttachableMembers();" />
      <MemberSignature Language="F#" Value="abstract member LookupAllAttachableMembers : unit -&gt; seq&lt;System.Xaml.XamlMember&gt;&#xA;override this.LookupAllAttachableMembers : unit -&gt; seq&lt;System.Xaml.XamlMember&gt;" Usage="xamlType.LookupAllAttachableMembers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-348">이 <see cref="T:System.Xaml.XamlType" />에 의해 노출되는 모든 연결 가능 속성을 포함하는 열거 가능한 집합을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-348">Returns an enumerable set that contains all attachable properties that are exposed by this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="a6beb-349">0개 이상의 <see cref="T:System.Xaml.XamlMember" /> 값을 포함하는 열거 가능한 집합이거나, 그렇지 않으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-349">An enumerable set that contains zero or more <see cref="T:System.Xaml.XamlMember" /> values; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-350">값을 가져올 때이 메서드를 호출할 수 <xref:System.Xaml.XamlType.GetAllAttachableMembers%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-350">This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.GetAllAttachableMembers%2A>.</span></span>  
  
 <span data-ttu-id="a6beb-351">하지만 <xref:System.Xaml.XamlType.GetAllAttachableMembers%2A> 제네릭 컬렉션을 반환 합니다.이 `Lookup` 메서드 제네릭 열거 가능한 집합을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-351">Although <xref:System.Xaml.XamlType.GetAllAttachableMembers%2A> returns a generic collection, this `Lookup` method returns a generic enumerable set.</span></span>  
  
 <span data-ttu-id="a6beb-352">기본 구현은 내부 CLR 리플렉션을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-352">The default implementation uses the internal CLR reflection.</span></span> <span data-ttu-id="a6beb-353">때 <xref:System.Xaml.XamlType.UnderlyingType%2A> 은 `null`, 기본 구현에서는 사용할 수 <xref:System.Xaml.XamlType.BaseType%2A>이면 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-353">When <xref:System.Xaml.XamlType.UnderlyingType%2A> is `null`, the default implementation can use <xref:System.Xaml.XamlType.BaseType%2A>, if it is available.</span></span> <span data-ttu-id="a6beb-354">호출 하는이 동작과 <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> 유효한 기본 형식 및 반환을 찾으려고 시도에 재귀적으로 `null` 유효한 기본 형식이 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="a6beb-354">This behavior calls <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> recursively to attempt to find a valid base type and returns `null` if no valid base type exists.</span></span>  
  
 <span data-ttu-id="a6beb-355">기본 내부 CLR 리플렉션에 의존 하지 않고 및 형식의 스키마 정보를 XAML 형식 시스템의 정보를 보고에 대 한 메타 데이터 나 다른 기술을 사용할 경우이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-355">Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</span></span> <span data-ttu-id="a6beb-356">형식 시스템 또는 리플렉션을 지원 부족으로 인해 정보를 확인할 수 없는 경우 null 반환 예약 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-356">A null return should be reserved for cases where information cannot be determined because of lack of type system or reflection support.</span></span> <span data-ttu-id="a6beb-357">대신 빈 경우 형식이 유효한 및 리플렉션이 나 다른 기술을 사용할 수 없는 형식 연결 가능한 멤버를 반환할지 <xref:System.Collections.Generic.IEnumerable%601> 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-357">If a type is valid and reflection or other techniques are available, but a type does not have attachable members, you should instead return an empty <xref:System.Collections.Generic.IEnumerable%601> set.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupAllMembers">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlMember&gt; LookupAllMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xaml.XamlMember&gt; LookupAllMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupAllMembers" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupAllMembers () As IEnumerable(Of XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::Xaml::XamlMember ^&gt; ^ LookupAllMembers();" />
      <MemberSignature Language="F#" Value="abstract member LookupAllMembers : unit -&gt; seq&lt;System.Xaml.XamlMember&gt;&#xA;override this.LookupAllMembers : unit -&gt; seq&lt;System.Xaml.XamlMember&gt;" Usage="xamlType.LookupAllMembers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-358">이 <see cref="T:System.Xaml.XamlType" />에 의해 노출되는 모든 멤버를 포함하는 열거 가능한 집합을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-358">Returns an enumerable set that contains all the members that are exposed by this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="a6beb-359">0개 이상의 <see cref="T:System.Xaml.XamlMember" /> 값을 포함하는 열거 가능한 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-359">An enumerable set that contains zero or more <see cref="T:System.Xaml.XamlMember" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-360">값을 가져올 때이 메서드를 호출할 수 <xref:System.Xaml.XamlType.GetAllMembers%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-360">This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.GetAllMembers%2A>.</span></span>  
  
 <span data-ttu-id="a6beb-361">하지만 <xref:System.Xaml.XamlType.GetAllMembers%2A> 제네릭 컬렉션을 반환 합니다.이 `Lookup` 메서드 제네릭 열거 가능한 집합을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-361">Although <xref:System.Xaml.XamlType.GetAllMembers%2A> returns a generic collection, this `Lookup` method returns a generic enumerable set.</span></span>  
  
 <span data-ttu-id="a6beb-362">기본 구현은 내부 CLR 리플렉션을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-362">The default implementation uses the internal CLR reflection.</span></span> <span data-ttu-id="a6beb-363">사례에 대 한 위치 <xref:System.Xaml.XamlType.UnderlyingType%2A> 는 `null`, 기본 구현에서는 사용할 수 <xref:System.Xaml.XamlType.BaseType%2A>이면 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-363">For cases where <xref:System.Xaml.XamlType.UnderlyingType%2A> is `null`, the default implementation can use <xref:System.Xaml.XamlType.BaseType%2A>, if it is available.</span></span> <span data-ttu-id="a6beb-364">호출 하는이 동작과 <xref:System.Xaml.XamlType.LookupAllMembers%2A> 유효한 기본 형식 및 반환을 찾으려고 시도에 재귀적으로 `null` 유효한 기본 형식이 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="a6beb-364">This behavior calls <xref:System.Xaml.XamlType.LookupAllMembers%2A> recursively to attempt to find a valid base type, and returns `null` if no valid base type exists.</span></span>  
  
 <span data-ttu-id="a6beb-365">기본 내부 CLR 리플렉션에 의존 하지 않고 및 형식의 스키마 정보를 XAML 형식 시스템의 정보를 보고에 대 한 메타 데이터 나 다른 기술을 사용할 경우이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-365">Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</span></span> <span data-ttu-id="a6beb-366">형식 시스템 또는 리플렉션을 지원 부족으로 인해 정보를 확인할 수 없는 경우 null 반환 예약 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-366">A null return should be reserved for cases where information cannot be determined because of lack of type system or reflection support.</span></span> <span data-ttu-id="a6beb-367">형식이 올바른 경우 리플렉션이 나 다른 기술을 사용할; 빈 형식 멤버에 없는 경우 대신 반환 해야 <xref:System.Collections.Generic.IEnumerable%601> 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-367">If a type is valid, reflection or other techniques are available; if a type does not have members, you should instead return an empty <xref:System.Collections.Generic.IEnumerable%601> set.</span></span>  
  
 <span data-ttu-id="a6beb-368">에 대 한 값을 반환할 <xref:System.Xaml.XamlType.LookupAllMembers%2A> 및 <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> 상호 제외 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-368">Return values for <xref:System.Xaml.XamlType.LookupAllMembers%2A> and <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> should be mutually exclusive.</span></span> <span data-ttu-id="a6beb-369">지원 형식 시스템 속성이 연결 가능한 사용 뿐만 아니라 표준 인스턴스 사용을 지원할 수 있는 상황에 있는 경우 해당 멤버 보고 되어야 합니다. 서로 다른 두 <xref:System.Xaml.XamlMember> 연결할 수 있는 목록에서 다른에 표시 되는 하나의 값을 사용 하 여 값을 표준 멤버 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-369">If you have a situation where a backing type system property can support a standard instance usage as well as an attachable usage, that member should be reported as two different <xref:System.Xaml.XamlMember> values, with one value appearing in the attachable list and another in the standard members list.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupAllowedContentTypes">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; LookupAllowedContentTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; LookupAllowedContentTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupAllowedContentTypes" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupAllowedContentTypes () As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ LookupAllowedContentTypes();" />
      <MemberSignature Language="F#" Value="abstract member LookupAllowedContentTypes : unit -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;&#xA;override this.LookupAllowedContentTypes : unit -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" Usage="xamlType.LookupAllowedContentTypes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-370">이 <see cref="P:System.Xaml.XamlType.ContentProperty" />에 대한 <see cref="T:System.Xaml.XamlType" /> 값으로 사용할 수 있는 형식 목록을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-370">Returns a list of the types that are usable as the <see cref="P:System.Xaml.XamlType.ContentProperty" /> value for this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="a6beb-371">가능한 콘텐츠 형식의 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-371">A list of possible content types.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-372">값을 가져올 때이 메서드를 호출할 수 <xref:System.Xaml.XamlType.AllowedContentTypes%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-372">This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.AllowedContentTypes%2A>.</span></span>  
  
 <span data-ttu-id="a6beb-373">로 평가 되는 형식을 <xref:System.Xaml.XamlType.CanAssignTo%2A> 특정 콘텐츠 형식에 대 한 여러 형식의 목적을 간주 되지 않습니다 <xref:System.Xaml.XamlType.AllowedContentTypes%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-373">Types that evaluate as <xref:System.Xaml.XamlType.CanAssignTo%2A> for a specific content type are not considered multiple types for purposes of <xref:System.Xaml.XamlType.AllowedContentTypes%2A>.</span></span>  
  
 <span data-ttu-id="a6beb-374">기본 구현은의 다른 속성을 사용할 수 <xref:System.Xaml.XamlType> (<xref:System.Xaml.XamlType.ContentWrappers%2A>를 <xref:System.Xaml.XamlType.ContentProperty%2A>, 또는 <xref:System.Xaml.XamlType.ItemType%2A>)는 결과를 얻습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-374">The default implementation can use other properties of <xref:System.Xaml.XamlType> (<xref:System.Xaml.XamlType.ContentWrappers%2A>, <xref:System.Xaml.XamlType.ContentProperty%2A>, or <xref:System.Xaml.XamlType.ItemType%2A>) to obtain a result.</span></span> <span data-ttu-id="a6beb-375">`Lookup` 재정의 속성 지나지가이 결정에 호출할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-375">The `Lookup` overrides for the preceding property list can also be invoked in this determination.</span></span>  
  
 <span data-ttu-id="a6beb-376">기본 내부 CLR 리플렉션에 의존 하지 않고 및 형식의 스키마 정보를 XAML 형식 시스템의 정보를 보고에 대 한 메타 데이터 나 다른 기술을 사용할 경우이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-376">Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupAttachableMember">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlMember LookupAttachableMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlMember LookupAttachableMember(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupAttachableMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupAttachableMember (name As String) As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlMember ^ LookupAttachableMember(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member LookupAttachableMember : string -&gt; System.Xaml.XamlMember&#xA;override this.LookupAttachableMember : string -&gt; System.Xaml.XamlMember" Usage="xamlType.LookupAttachableMember name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="a6beb-377"><c>ownerTypeName.MemberName</c> 형식으로 된 가져올 연결 가능 멤버의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-377">The name of the attachable member to get, in <c>ownerTypeName.MemberName</c> form.</span></span></param>
        <summary><span data-ttu-id="a6beb-378">이 <see cref="T:System.Xaml.XamlType" />에서 명명된 특정 연결 가능 항목에 대해 <see cref="T:System.Xaml.XamlMember" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-378">Returns a <see cref="T:System.Xaml.XamlMember" /> for a specific named attachable from this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="a6beb-379">요청된 연결 가능 멤버의 경우 <see cref="T:System.Xaml.XamlMember" /> 개체이고, 그렇지 않고 해당 이름의 연결 가능 멤버가 없는 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-379">A <see cref="T:System.Xaml.XamlMember" /> object for the requested attachable member; otherwise, <see langword="null" />, if no attachable member by that name exists.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-380">값을 가져올 때이 메서드를 호출할 수 <xref:System.Xaml.XamlType.GetAttachableMember%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-380">This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.GetAttachableMember%2A>.</span></span>  
  
 <span data-ttu-id="a6beb-381">기본 구현은 내부 CLR 리플렉션을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-381">The default implementation uses the internal CLR reflection.</span></span> <span data-ttu-id="a6beb-382">때 <xref:System.Xaml.XamlType.UnderlyingType%2A> 은 `null`, 기본 구현에서는 사용할 수 <xref:System.Xaml.XamlType.BaseType%2A>이면 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-382">When <xref:System.Xaml.XamlType.UnderlyingType%2A> is `null`, the default implementation can use <xref:System.Xaml.XamlType.BaseType%2A>, if it is available.</span></span> <span data-ttu-id="a6beb-383">호출 하는이 동작과 <xref:System.Xaml.XamlType.LookupAttachableMember%2A> 유효한 기본 형식 및 반환을 찾으려고 시도에 재귀적으로 `null` 유효한 기본 형식이 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="a6beb-383">This behavior calls <xref:System.Xaml.XamlType.LookupAttachableMember%2A> recursively to attempt to find a valid base type and returns `null` if no valid base type exists.</span></span>  
  
 <span data-ttu-id="a6beb-384">기본 내부 CLR 리플렉션에 의존 하지 않고 및 형식의 스키마 정보를 XAML 형식 시스템의 정보를 보고에 대 한 메타 데이터 나 다른 기술을 사용할 경우이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-384">Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a6beb-385"><xref:System.Xaml.XamlType.LookupAttachableMember%2A> 가상 함수 이며 따라서 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-385"><xref:System.Xaml.XamlType.LookupAttachableMember%2A> is virtual, and therefore, can be overridden.</span></span> <span data-ttu-id="a6beb-386">재정의 될 수 없습니다 (악의적인 목적 여부 또는) 더 이상 예상 되는 방식으로 정렬 되도록 XAML 형식의 보고 된 구성원을 변경 하려면를 <xref:System.ComponentModel.TypeDescriptor> `Get*` 기본 CLR 형식에 대 한 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-386">The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the <xref:System.ComponentModel.TypeDescriptor> `Get*` information about the underlying CLR type.</span></span> <span data-ttu-id="a6beb-387">보고 하는 멤버의 모든 보안에 중요 한 검사를 기본 CLR 형식을 대신 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-387">For any security-critical checks of member reporting, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupBaseType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupBaseType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupBaseType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupBaseType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupBaseType () As XamlType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlType ^ LookupBaseType();" />
      <MemberSignature Language="F#" Value="abstract member LookupBaseType : unit -&gt; System.Xaml.XamlType&#xA;override this.LookupBaseType : unit -&gt; System.Xaml.XamlType" Usage="xamlType.LookupBaseType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-388">이 XAML 형식의 직접적인 기본 형식에 대한 <see cref="T:System.Xaml.XamlType" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-388">Returns the <see cref="T:System.Xaml.XamlType" /> for the immediate base type of this XAML type.</span></span> <span data-ttu-id="a6beb-389">이 값은 이 <see cref="T:System.Xaml.XamlType" /> 및 스키마 컨텍스트의 기본 형식을 기준으로 결정됩니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-389">Determination of this value is based on the underlying type of this <see cref="T:System.Xaml.XamlType" /> and schema context.</span></span></summary>
        <returns><span data-ttu-id="a6beb-390">이 XAML 형식의 직접적인 기본 형식에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-390">The <see cref="T:System.Xaml.XamlType" /> for the immediate base type of this XAML type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-391">값을 가져올 때이 메서드를 호출할 수 <xref:System.Xaml.XamlType.BaseType%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-391">This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.BaseType%2A>.</span></span>  
  
 <span data-ttu-id="a6beb-392">기본 구현은 나타내는 내부 상수를 반환할 수 있습니다 합니다 <xref:System.Object> 하는 경우 <xref:System.Xaml.XamlType.UnderlyingType%2A> 는 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-392">The default implementation might return an internal constant that represents the <xref:System.Object> if <xref:System.Xaml.XamlType.UnderlyingType%2A> is `null`.</span></span>  
  
 <span data-ttu-id="a6beb-393">기본 내부 CLR 리플렉션에 의존 하지 않고 및 형식의 스키마 정보를 XAML 형식 시스템의 정보를 보고에 대 한 메타 데이터 나 다른 기술을 사용할 경우이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-393">Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a6beb-394"><xref:System.Xaml.XamlType.LookupBaseType%2A> 가상 함수 이며 따라서 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-394"><xref:System.Xaml.XamlType.LookupBaseType%2A> is virtual, and therefore, can be overridden.</span></span> <span data-ttu-id="a6beb-395">재정의 될 수 없습니다 (악의적인 목적 여부 또는)이 더 이상 정렬 되도록 예상 되는 방식으로 기본 CLR 형식의 형식 시스템의 정보를 사용 하 여 XAML 형식에 대 한 보고 형식 정보를 변경 하려면.</span><span class="sxs-lookup"><span data-stu-id="a6beb-395">The override has the potential (whether for malicious purposes or otherwise) to change the reported type information about a XAML type so that it no longer aligns in an expected way with the type system information of its underlying CLR type.</span></span> <span data-ttu-id="a6beb-396">할당 작업 및 액세스의 보안에 중요 한 모든 검사에 대 한 기본 CLR 형식을 대신 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-396">For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupCollectionKind">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlCollectionKind LookupCollectionKind ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Xaml.Schema.XamlCollectionKind LookupCollectionKind() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupCollectionKind" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupCollectionKind () As XamlCollectionKind" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlCollectionKind LookupCollectionKind();" />
      <MemberSignature Language="F#" Value="abstract member LookupCollectionKind : unit -&gt; System.Xaml.Schema.XamlCollectionKind&#xA;override this.LookupCollectionKind : unit -&gt; System.Xaml.Schema.XamlCollectionKind" Usage="xamlType.LookupCollectionKind " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlCollectionKind</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-397">이 <see cref="T:System.Xaml.Schema.XamlCollectionKind" />에서 사용하는 특정 컬렉션 형식을 선언하는 <see cref="T:System.Xaml.XamlType" /> 열거형의 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-397">Returns a value of the <see cref="T:System.Xaml.Schema.XamlCollectionKind" /> enumeration that declares which specific collection type this <see cref="T:System.Xaml.XamlType" /> uses.</span></span></summary>
        <returns><span data-ttu-id="a6beb-398"><see cref="T:System.Xaml.Schema.XamlCollectionKind" /> 열거형의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-398">A value of the <see cref="T:System.Xaml.Schema.XamlCollectionKind" /> enumeration.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-399">이 메서드는 내부 개인 메서드에 의해 호출 됩니다 (비공용 `CollectionKind` 나 `GetCollectionKind` API에 있는 <xref:System.Xaml.XamlType>).</span><span class="sxs-lookup"><span data-stu-id="a6beb-399">This method is invoked by an internal private method (no public `CollectionKind` or `GetCollectionKind` API exists on <xref:System.Xaml.XamlType>).</span></span>  
  
 <span data-ttu-id="a6beb-400">기본 구현은 내부 CLR 리플렉션을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-400">The default implementation uses the internal CLR reflection.</span></span> <span data-ttu-id="a6beb-401">사례에 대 한 위치 <xref:System.Xaml.XamlType.UnderlyingType%2A> 는 `null`, 기본 구현에서는 사용할 수 <xref:System.Xaml.XamlType.BaseType%2A>이면 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-401">For cases where <xref:System.Xaml.XamlType.UnderlyingType%2A> is `null`, the default implementation can use <xref:System.Xaml.XamlType.BaseType%2A>, if it is available.</span></span> <span data-ttu-id="a6beb-402">이 문제를 간접적으로 호출 <xref:System.Xaml.XamlType.LookupCollectionKind%2A> 는 유효한 기본 형식을 찾으려고 시도에 재귀적으로 반환 <xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType> 유효한 기본 형식이 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="a6beb-402">This behavior indirectly calls <xref:System.Xaml.XamlType.LookupCollectionKind%2A> recursively to attempt to find a valid base type; it returns <xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType> if no valid base type exists.</span></span> <span data-ttu-id="a6beb-403">기본 구현은 찾으려고 시도 하는 일반적으로 `Add` 리플렉션에 의해 기본 형식의 메서드.</span><span class="sxs-lookup"><span data-stu-id="a6beb-403">In general, the default implementation attempts to find the `Add` method of the underlying type by reflection.</span></span> <span data-ttu-id="a6beb-404">경우 발견 합니다 <xref:System.Reflection.MethodInfo> 의 `Add` 방법이 결정 하는 데 충분 한 정보가 <xref:System.Xaml.Schema.XamlCollectionKind> 값이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-404">If found, the <xref:System.Reflection.MethodInfo> of the `Add` method is enough information to determine which <xref:System.Xaml.Schema.XamlCollectionKind> value should be returned.</span></span> <span data-ttu-id="a6beb-405">그 외의 경우 <xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType>를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-405">Otherwise, it returns <xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="a6beb-406">기본 내부 CLR 리플렉션에 의존 하지 않고 및 형식의 스키마 정보를 XAML 형식 시스템의 정보를 보고에 대 한 메타 데이터 나 다른 기술을 사용할 경우이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-406">Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupConstructionRequiresArguments">
      <MemberSignature Language="C#" Value="protected virtual bool LookupConstructionRequiresArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupConstructionRequiresArguments() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupConstructionRequiresArguments" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupConstructionRequiresArguments () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupConstructionRequiresArguments();" />
      <MemberSignature Language="F#" Value="abstract member LookupConstructionRequiresArguments : unit -&gt; bool&#xA;override this.LookupConstructionRequiresArguments : unit -&gt; bool" Usage="xamlType.LookupConstructionRequiresArguments " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-407">이 <see cref="T:System.Xaml.XamlType" />에 인수(<see langword="x:TypeArguments" />, 초기화 텍스트 또는 기타 XAML 기술을 통한 제네릭 제약 조건)가 있어야 유효한 형식 인스턴스를 생성할 수 있는지 여부를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-407">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> must have arguments (generic constraints through <see langword="x:TypeArguments" />, initialization text, or other XAML techniques) to construct a valid instance of the type.</span></span></summary>
        <returns><span data-ttu-id="a6beb-408">인스턴스를 생성하기 위해 일부 인수 값이 필요하면 <see langword="true" />이고, 그렇지 않으면 false입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-408"><see langword="true" /> if construction of an instance requires some argument value; otherwise, false.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-409">값을 가져올 때이 메서드를 호출할 수 <xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-409">This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A>.</span></span>  
  
 <span data-ttu-id="a6beb-410">기본 구현은 반환 `false` clr에서 값 형식으로 간주 하는 형식에 대 한 형식 시스템.</span><span class="sxs-lookup"><span data-stu-id="a6beb-410">The default implementation returns `false` for types considered value types in the CLR type system.</span></span> <span data-ttu-id="a6beb-411">값 형식, CLR 리플렉션 보다 다른 <xref:System.Reflection.ConstructorInfo> 기본 생성자가 있는지 여부를 확인 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-411">For other than value types, CLR reflection <xref:System.Reflection.ConstructorInfo> is used to determine whether a default constructor exists.</span></span>  
  
 <span data-ttu-id="a6beb-412">기본 내부 CLR 리플렉션에 의존 하지 않고 및 형식의 스키마 정보를 XAML 형식 시스템의 정보를 보고에 대 한 메타 데이터 나 다른 기술을 사용할 경우이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-412">Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupContentProperty">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlMember LookupContentProperty ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlMember LookupContentProperty() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupContentProperty" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupContentProperty () As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlMember ^ LookupContentProperty();" />
      <MemberSignature Language="F#" Value="abstract member LookupContentProperty : unit -&gt; System.Xaml.XamlMember&#xA;override this.LookupContentProperty : unit -&gt; System.Xaml.XamlMember" Usage="xamlType.LookupContentProperty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-413">이 <see cref="T:System.Xaml.XamlMember" />의 콘텐츠 속성에 대한 <see cref="T:System.Xaml.XamlType" /> 정보를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-413">Returns <see cref="T:System.Xaml.XamlMember" /> information for the content property of this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="a6beb-414">이 <see cref="T:System.Xaml.XamlMember" />의 콘텐츠 속성에 대한 <see cref="T:System.Xaml.XamlType" /> 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-414"><see cref="T:System.Xaml.XamlMember" /> information for the content property of this <see cref="T:System.Xaml.XamlType" />.</span></span> <span data-ttu-id="a6beb-415"><see langword="null" />일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-415">May be <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-416">값을 가져올 때이 메서드를 호출할 수 <xref:System.Xaml.XamlType.ContentProperty%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-416">This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.ContentProperty%2A>.</span></span>  
  
 <span data-ttu-id="a6beb-417">기본 구현에 대 한 확인 <xref:System.Windows.Markup.ContentPropertyAttribute> 형식 정의에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-417">The default implementation checks for <xref:System.Windows.Markup.ContentPropertyAttribute> on the type definition.</span></span> <span data-ttu-id="a6beb-418">확인할 수도 있습니다 <xref:System.Xaml.XamlType.BaseType%2A> 직접적인 기본 형식에 특성이 있으면 특성에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-418">It can also check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type.</span></span> <span data-ttu-id="a6beb-419">기본 구현은 반환 하는 경우 이러한 검사에는 콘텐츠 형식을 검색 하지 않으면, `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-419">If these checks do not discover a content type, the default implementation returns `null`.</span></span>  
  
 <span data-ttu-id="a6beb-420">기본 내부 CLR 리플렉션에 의존 하지 않고 및 형식의 스키마 정보를 XAML 형식 시스템의 정보를 보고에 대 한 메타 데이터 나 다른 기술을 사용할 경우이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-420">Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupContentWrappers">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; LookupContentWrappers ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; LookupContentWrappers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupContentWrappers" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupContentWrappers () As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ LookupContentWrappers();" />
      <MemberSignature Language="F#" Value="abstract member LookupContentWrappers : unit -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;&#xA;override this.LookupContentWrappers : unit -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" Usage="xamlType.LookupContentWrappers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-421">이 <see cref="T:System.Xaml.XamlType" />에 대한 콘텐츠 래퍼를 나타내는 <see cref="T:System.Xaml.XamlType" /> 값의 목록을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-421">Gets a list of <see cref="T:System.Xaml.XamlType" /> values that represent the content wrappers for this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="a6beb-422">이 <see cref="T:System.Xaml.XamlType" />에 대한 콘텐츠 래퍼를 나타내는 <see cref="T:System.Xaml.XamlType" /> 값의 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-422">A list of <see cref="T:System.Xaml.XamlType" /> values that represent the content wrappers for this <see cref="T:System.Xaml.XamlType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-423">콘텐츠 래퍼는 형식을 해당 컬렉션에 사용 되는 형식 시스템에 인접 하지 않은 경우 콘텐츠 컬렉션 형식을 나타내는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-423">A content wrapper is a class that represents the content collection type when the types that are used in that collection are not contiguous to the type system.</span></span> <span data-ttu-id="a6beb-424">콘텐츠 래퍼에 대 한 컬렉션 항목의 형식은 넘어 몇 가지 방식으로 제한 해야 하는 <xref:System.Object> 또는 이와 동등한 중립 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-424">The types of collection items for the content wrapper are expected to be limited in some manner beyond <xref:System.Object> or a neutral object equivalent.</span></span> <span data-ttu-id="a6beb-425">그러나이 제한은 형식 시스템 아니라에 의해 디자인 또는 해당 형식을 사용 하는 속성의 용도만 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-425">However, this limitation is only enforced by the design or purpose of the properties that use that type, and not by the type system.</span></span> <span data-ttu-id="a6beb-426">둘 이상의 콘텐츠 래퍼 형식에 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-426">More than one content wrapper can exist on a type.</span></span>  
  
 <span data-ttu-id="a6beb-427">예제에서는 클래스 및 WPF XAML 구현에서 시나리오를 참조 하세요. <xref:System.Windows.Documents.InlineCollection>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-427">For an example class and scenario from the WPF XAML implementation, see <xref:System.Windows.Documents.InlineCollection>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupCustomAttributeProvider">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupCustomAttributeProvider" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupCustomAttributeProvider () As ICustomAttributeProvider" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::ICustomAttributeProvider ^ LookupCustomAttributeProvider();" />
      <MemberSignature Language="F#" Value="abstract member LookupCustomAttributeProvider : unit -&gt; System.Reflection.ICustomAttributeProvider&#xA;override this.LookupCustomAttributeProvider : unit -&gt; System.Reflection.ICustomAttributeProvider" Usage="xamlType.LookupCustomAttributeProvider " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ICustomAttributeProvider</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-428">파생 클래스에서 구현되는 경우 <see cref="T:System.Reflection.ICustomAttributeProvider" /> 구현을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-428">When implemented in a derived class, returns an <see cref="T:System.Reflection.ICustomAttributeProvider" /> implementation.</span></span></summary>
        <returns><span data-ttu-id="a6beb-429"><see cref="T:System.Reflection.ICustomAttributeProvider" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-429">An <see cref="T:System.Reflection.ICustomAttributeProvider" /> implementation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-430">내부 CLR 특성 값을 얻을 수 있는 대체 방법으로 리플렉션을 제공 하려면이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-430">Override this method to provide the internal reflection with an alternative way to obtain CLR attribute values.</span></span> <span data-ttu-id="a6beb-431">재정의 없는 경우, 내부 reflector 일반 CLR 리플렉션 논리를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-431">In absence of an override, the internal reflector uses typical CLR reflection logic.</span></span>  
  
 <span data-ttu-id="a6beb-432">기본 구현은 `null`를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-432">The default implementation returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupDeferringLoader">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt; LookupDeferringLoader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Xaml.XamlDeferringLoader&gt; LookupDeferringLoader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupDeferringLoader" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupDeferringLoader () As XamlValueConverter(Of XamlDeferringLoader)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlValueConverter&lt;System::Xaml::XamlDeferringLoader ^&gt; ^ LookupDeferringLoader();" />
      <MemberSignature Language="F#" Value="abstract member LookupDeferringLoader : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;&#xA;override this.LookupDeferringLoader : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;" Usage="xamlType.LookupDeferringLoader " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-433">XAML 선언된 개체의 지연된 로드에 사용되는 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-433">Returns a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object, which is used for deferred loading of XAML-declared objects.</span></span></summary>
        <returns><span data-ttu-id="a6beb-434">제네릭에 대한 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlDeferringLoader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-434">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> that has a <see cref="T:System.Xaml.XamlDeferringLoader" /> constraint on the generic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-435">값을 가져올 때이 메서드를 호출할 수 <xref:System.Xaml.XamlType.DeferringLoader%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-435">This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.DeferringLoader%2A>.</span></span> <span data-ttu-id="a6beb-436">원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.DeferringLoader%2A> 값을 반환 하는 다른 기본 내부 리플렉션에 의해 사용 되 고 제공 하는 보다 사용자 지정 <xref:System.Xaml.Schema.XamlTypeInvoker> 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-436">Override this method if you want <xref:System.Xaml.XamlType.DeferringLoader%2A> to return a different value than is enabled by default internal reflection and are also providing custom <xref:System.Xaml.Schema.XamlTypeInvoker> information.</span></span>  
  
 <span data-ttu-id="a6beb-437">읽기를 기준으로 개체를 반환 하는 기본 구현은 <xref:System.Windows.Markup.XamlDeferLoadAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-437">The default implementation returns an object on the basis of reading <xref:System.Windows.Markup.XamlDeferLoadAttribute>.</span></span> <span data-ttu-id="a6beb-438">확인할 수도 있습니다 <xref:System.Xaml.XamlType.BaseType%2A> 직접적인 기본 형식에 특성이 있으면 특성에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-438">It can also  check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type.</span></span> <span data-ttu-id="a6beb-439">이 메서드는 반환 값을 사용할 수 없으면 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-439">If a value is unavailable, this method returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupInvoker">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlTypeInvoker LookupInvoker ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlTypeInvoker LookupInvoker() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupInvoker" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupInvoker () As XamlTypeInvoker" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlTypeInvoker ^ LookupInvoker();" />
      <MemberSignature Language="F#" Value="abstract member LookupInvoker : unit -&gt; System.Xaml.Schema.XamlTypeInvoker&#xA;override this.LookupInvoker : unit -&gt; System.Xaml.Schema.XamlTypeInvoker" Usage="xamlType.LookupInvoker " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlTypeInvoker</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-440">이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />과 연결된 <see cref="T:System.Xaml.XamlType" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-440">Returns a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is associated with this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="a6beb-441">이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 대한 <see cref="T:System.Xaml.XamlType" /> 정보이거나, 그렇지 않으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-441">The <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> information for this <see cref="T:System.Xaml.XamlType" />; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-442">이 메서드를 호출 하 여 호출할 수 있습니다 <xref:System.Xaml.XamlType.Invoker%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-442">This method can be invoked by calls to <xref:System.Xaml.XamlType.Invoker%2A>.</span></span>  
  
 <span data-ttu-id="a6beb-443">기본 구현은 것을 요구 하지 않는 한 <xref:System.Xaml.XamlType> 초기를 전달 하는 생성자 중 하나를 사용 하 여 생성할 수 <xref:System.Xaml.Schema.XamlTypeInvoker>입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-443">The default implementation does not require that a <xref:System.Xaml.XamlType> be constructed by using one of the constructors that pass an initial <xref:System.Xaml.Schema.XamlTypeInvoker>.</span></span> <span data-ttu-id="a6beb-444">그러나는 <xref:System.Xaml.XamlType.UnderlyingType%2A> 에 대 한 값이 있어야 합니다 <xref:System.Xaml.XamlType>이 고, 그렇지 않으면 기본 구현은 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-444">However, an <xref:System.Xaml.XamlType.UnderlyingType%2A> value must exist for the <xref:System.Xaml.XamlType>; otherwise, the default implementation returns `null`.</span></span>  
  
 <span data-ttu-id="a6beb-445">파생된 된 클래스를 만드는 경우이 메서드를 재정의 <xref:System.Xaml.Schema.XamlTypeInvoker> 하며, 파생된 클래스를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-445">Override this method if you also create a derived class from <xref:System.Xaml.Schema.XamlTypeInvoker> and intend to return the derived class.</span></span> <span data-ttu-id="a6beb-446">반환 하는 경우 `null`하십시오 <xref:System.Xaml.XamlType.Invoker%2A> 반환 <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=nameWithType> 호출자에 게 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-446">If you return `null`, <xref:System.Xaml.XamlType.Invoker%2A> returns <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=nameWithType> to callers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsAmbient">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsAmbient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsAmbient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsAmbient" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsAmbient () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsAmbient();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsAmbient : unit -&gt; bool&#xA;override this.LookupIsAmbient : unit -&gt; bool" Usage="xamlType.LookupIsAmbient " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-447">XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 앰비언트 형식을 나타내는지 여부를 지정하는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-447">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents an ambient type, as per the XAML definition.</span></span></summary>
        <returns><span data-ttu-id="a6beb-448">이 <see cref="T:System.Xaml.XamlType" />이 앰비언트 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-448"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents an ambient type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-449">이 메서드를 호출 하 여 호출할 수 있습니다 <xref:System.Xaml.XamlType.IsAmbient%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-449">This method can be invoked by calls to <xref:System.Xaml.XamlType.IsAmbient%2A>.</span></span>  
  
 <span data-ttu-id="a6beb-450">기본 구현에서 CLR 리플렉션 사용을 <xref:System.Xaml.XamlType.UnderlyingType%2A> 기본 형식을 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-450">The default implementation uses CLR reflection on the <xref:System.Xaml.XamlType.UnderlyingType%2A> and can check the base types.</span></span> <span data-ttu-id="a6beb-451">이 구현에 대 한 확인 합니다 <xref:System.Windows.Markup.AmbientAttribute> 반환 하는 클래스 수준의 관련 형식 정의에 적용 되는 `true` 이 경우.</span><span class="sxs-lookup"><span data-stu-id="a6beb-451">This implementation checks for the <xref:System.Windows.Markup.AmbientAttribute> that is applied to the relevant type's definition at the class level and returns `true` in this case.</span></span> <span data-ttu-id="a6beb-452">다른 모든 경우 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-452">All other cases return `false`.</span></span>  
  
 <span data-ttu-id="a6beb-453">원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.IsAmbient%2A> 으로 활성화 된 기본 내부 리플렉션 다른 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-453">Override this method if you want <xref:System.Xaml.XamlType.IsAmbient%2A> to return a different value than is enabled by default internal reflection.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsConstructible">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsConstructible ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsConstructible() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsConstructible" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsConstructible () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsConstructible();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsConstructible : unit -&gt; bool&#xA;override this.LookupIsConstructible : unit -&gt; bool" Usage="xamlType.LookupIsConstructible " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-454">XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 생성 가능 형식을 나타내는지 여부를 지정하는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-454">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a constructible type, as per the XAML definition.</span></span></summary>
        <returns><span data-ttu-id="a6beb-455">이 <see cref="T:System.Xaml.XamlType" />이 생성 가능 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-455"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a constructible type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-456">이 메서드를 호출 하 여 호출할 수 있습니다 <xref:System.Xaml.XamlType.IsConstructible%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-456">This method can be invoked by calls to <xref:System.Xaml.XamlType.IsConstructible%2A>.</span></span>  
  
 <span data-ttu-id="a6beb-457">기본 구현에서 CLR 리플렉션 사용을 <xref:System.Xaml.XamlType.UnderlyingType%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-457">The default implementation uses CLR reflection on the <xref:System.Xaml.XamlType.UnderlyingType%2A>.</span></span> <span data-ttu-id="a6beb-458">구체적인, 비중첩 및 닫힌 형식 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-458">The type must be concrete, non-nested, and closed.</span></span> <span data-ttu-id="a6beb-459">기본 구현은 값 형식 및 반환 형식 인지 여부를 확인 <xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-459">The default implementation checks whether the type is a value type and the return of <xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A>.</span></span> <span data-ttu-id="a6beb-460">Null에 대 한 <xref:System.Xaml.XamlType.UnderlyingType%2A>,이 메서드는 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-460">For a null <xref:System.Xaml.XamlType.UnderlyingType%2A>, this method returns `true`.</span></span>  
  
 <span data-ttu-id="a6beb-461">원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.IsConstructible%2A> 으로 활성화 된 기본 내부 리플렉션 다른 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-461">Override this method if you want <xref:System.Xaml.XamlType.IsConstructible%2A> to return a different value than is enabled by default internal reflection.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsMarkupExtension">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsMarkupExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsMarkupExtension() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsMarkupExtension" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsMarkupExtension () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsMarkupExtension();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsMarkupExtension : unit -&gt; bool&#xA;override this.LookupIsMarkupExtension : unit -&gt; bool" Usage="xamlType.LookupIsMarkupExtension " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-462">이 <see cref="T:System.Xaml.XamlType" />이 태그 확장을 나타내는지 여부를 표시하는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-462">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a markup extension.</span></span></summary>
        <returns><span data-ttu-id="a6beb-463">이 <see cref="T:System.Xaml.XamlType" />이 태그 확장을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-463"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a markup extension; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-464">이 메서드를 호출 하 여 호출할 수 있습니다 <xref:System.Xaml.XamlType.IsMarkupExtension%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-464">This method can be invoked by calls to <xref:System.Xaml.XamlType.IsMarkupExtension%2A>.</span></span>  
  
 <span data-ttu-id="a6beb-465">기본 구현에서는이 호출의만 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-465">The default implementation consists only of this call:</span></span>  
  
 `return CanAssignTo(XamlLanguage.MarkupExtension);`  
  
 <span data-ttu-id="a6beb-466">원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.IsMarkupExtension%2A> 다른 논리를 사용 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-466">Override this method if you want <xref:System.Xaml.XamlType.IsMarkupExtension%2A> to use different logic.</span></span>  
  
 <span data-ttu-id="a6beb-467">XAML 사양 말해에서이 형식에 할당할 수 있어야 `x:MarkupExtension` 반환 하기 위해 `true` 에 대 한 <xref:System.Xaml.XamlType.IsMarkupExtension%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-467">In XAML specification terms, this type must be assignable to `x:MarkupExtension` in order to return `true` for <xref:System.Xaml.XamlType.IsMarkupExtension%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsNameScope">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsNameScope ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsNameScope() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsNameScope" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsNameScope () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsNameScope();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsNameScope : unit -&gt; bool&#xA;override this.LookupIsNameScope : unit -&gt; bool" Usage="xamlType.LookupIsNameScope " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-468">XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 XAML 이름 범위를 나타내는지 여부를 지정하는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-468">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a XAML namescope, as per the XAML definition.</span></span></summary>
        <returns><span data-ttu-id="a6beb-469">이 <see cref="T:System.Xaml.XamlType" />이 XAML 이름 범위를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-469"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a XAML namescope; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-470">이 메서드를 호출 하 여 호출할 수 있습니다 <xref:System.Xaml.XamlType.IsNameScope%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-470">This method can be invoked by calls to <xref:System.Xaml.XamlType.IsNameScope%2A>.</span></span>  
  
 <span data-ttu-id="a6beb-471">기본 구현에서는 한 <xref:System.Xaml.XamlType.CanAssignTo%2A> 형식에 대해 직접 호출 <xref:System.Windows.Markup.INameScope>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-471">The default implementation makes a <xref:System.Xaml.XamlType.CanAssignTo%2A> call indirectly against the type <xref:System.Windows.Markup.INameScope>.</span></span> <span data-ttu-id="a6beb-472"><xref:System.Windows.Markup.INameScope> WindowsBase.dll 어셈블리에 정의 된 인터페이스가입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-472"><xref:System.Windows.Markup.INameScope> is an interface that is defined in the assembly WindowsBase.dll.</span></span> <span data-ttu-id="a6beb-473">이 기법은 XAML 이름 범위 id에 대 한 XAML의 WPF 및 Windows Workflow Foundation 구현에서 둘 다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-473">This technique for XAML namescope identification is used both by WPF and Windows Workflow Foundation implementations of XAML.</span></span>  
  
 <span data-ttu-id="a6beb-474">원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.IsNameScope%2A> 다른 논리를 사용 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-474">Override this method if you want <xref:System.Xaml.XamlType.IsNameScope%2A> to use different logic.</span></span>  
  
 <span data-ttu-id="a6beb-475">속성 또는 속성에 사용 되는 이름 고유성을 적용 하는 XAML 이름 범위 `x:Name`  /  `[name property]`합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-475">A XAML namescope enforces the name uniqueness of the property or properties that are used for `x:Name` / `[name property]`.</span></span> <span data-ttu-id="a6beb-476">하는 경우 <xref:System.Xaml.XamlType.IsNameScope%2A> 는 `true`, 고유성을 적용 하기 위한 메커니즘이 있어야 하 고 XAML 이름 범위를 소유 하는이 형식 측면에서 평가 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-476">If <xref:System.Xaml.XamlType.IsNameScope%2A> is `true`, then some mechanism for enforcing uniqueness should exist and should evaluate from the perspective of this type owning a XAML namescope.</span></span> <span data-ttu-id="a6beb-477">다른 XAML 이름 범위 소유 형식이 발견 될 때까지 XAML 이름 범위 형식의 내용으로 다음 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-477">The XAML namescope then extends to the content of the type until another XAML namescope owning type is encountered.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectWriter.RootNameScope" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsNullable">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsNullable ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsNullable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsNullable" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsNullable () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsNullable();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsNullable : unit -&gt; bool&#xA;override this.LookupIsNullable : unit -&gt; bool" Usage="xamlType.LookupIsNullable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-478">XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 null 허용 형식을 나타내는지 여부를 지정하는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-478">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a nullable type, as per the XAML definition.</span></span></summary>
        <returns><span data-ttu-id="a6beb-479">이 <see cref="T:System.Xaml.XamlType" />이 null 허용 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-479"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a nullable type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-480">이 메서드를 호출 하 여 호출할 수 있습니다 <xref:System.Xaml.XamlType.IsNullable%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-480">This method can be invoked by calls to <xref:System.Xaml.XamlType.IsNullable%2A>.</span></span>  
  
 <span data-ttu-id="a6beb-481">기본 구현에서는 개념을 기반으로 CLR 핵심 라이브러리 nullable를 검사 하는 결정 <xref:System.Xaml.XamlType.UnderlyingType%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-481">The default implementation makes a determination based on the CLR core library nullable concept, checked against <xref:System.Xaml.XamlType.UnderlyingType%2A>.</span></span> <span data-ttu-id="a6beb-482">Null에 대 한 <xref:System.Xaml.XamlType.UnderlyingType%2A>를 반환 합니다 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-482">For a null <xref:System.Xaml.XamlType.UnderlyingType%2A>, it returns `true`.</span></span>  
  
 <span data-ttu-id="a6beb-483">원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.IsNullable%2A> 다른 논리를 사용 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-483">Override this method if you want <xref:System.Xaml.XamlType.IsNullable%2A> to use different logic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsPublic">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsPublic ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsPublic() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsPublic" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsPublic () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsPublic();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsPublic : unit -&gt; bool&#xA;override this.LookupIsPublic : unit -&gt; bool" Usage="xamlType.LookupIsPublic " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-484">이 <see cref="T:System.Xaml.XamlType" />이 관련 형식 시스템에서 public 형식을 나타내는지 여부를 지정하는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-484">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a public type in the relevant type system.</span></span></summary>
        <returns><span data-ttu-id="a6beb-485">이 <see cref="T:System.Xaml.XamlType" />이 public 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-485"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a public type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-486">이 메서드를 호출 하 여 호출할 수 있습니다 <xref:System.Xaml.XamlType.IsPublic%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-486">This method can be invoked by calls to <xref:System.Xaml.XamlType.IsPublic%2A>.</span></span>  
  
 <span data-ttu-id="a6beb-487">기본 구현에서는 null이 아닌에 대해 CLR 리플렉션 <xref:System.Xaml.XamlType.UnderlyingType%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-487">The default implementation uses CLR reflection against a non-null <xref:System.Xaml.XamlType.UnderlyingType%2A>.</span></span> <span data-ttu-id="a6beb-488">Null에 대 한 <xref:System.Xaml.XamlType.UnderlyingType%2A>를 반환 합니다 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-488">For a null <xref:System.Xaml.XamlType.UnderlyingType%2A>, it returns `true`.</span></span>  
  
 <span data-ttu-id="a6beb-489">원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.IsPublic%2A> 다른 논리를 사용 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-489">Override this method if you want <xref:System.Xaml.XamlType.IsPublic%2A> to use different logic.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a6beb-490"><xref:System.Xaml.XamlType.LookupIsPublic%2A> 가상 함수 이며 따라서 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-490"><xref:System.Xaml.XamlType.LookupIsPublic%2A> is virtual, and therefore, can be overridden.</span></span> <span data-ttu-id="a6beb-491">재정의 될 수 없습니다 (악의적인 목적 여부 또는 그렇지 않은 경우)이 더 이상 정렬 되도록 예상 되는 방식으로 기본 CLR 형식의 형식 시스템 또는 액세스 정보를 사용 하 여 XAML 형식에 대 한 보고 액세스 정보를 변경 하려면.</span><span class="sxs-lookup"><span data-stu-id="a6beb-491">The override has the potential (whether for malicious purposes or otherwise) to change the reported access information about a XAML type so that it no longer aligns in an expected way with the type system or access information of its underlying CLR type.</span></span> <span data-ttu-id="a6beb-492">할당 작업 및 액세스의 보안에 중요 한 모든 검사에 대 한 기본 CLR 형식을 대신 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-492">For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsUnknown">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsUnknown ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsUnknown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsUnknown" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsUnknown () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsUnknown();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsUnknown : unit -&gt; bool&#xA;override this.LookupIsUnknown : unit -&gt; bool" Usage="xamlType.LookupIsUnknown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-493">이 <see cref="T:System.Xaml.XamlType" />이 기본 형식 시스템에서 확인할 수 없는 형식을 나타내는지 여부를 지정하는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-493">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a type that cannot be resolved in the underlying type system.</span></span></summary>
        <returns><span data-ttu-id="a6beb-494">이 <see cref="T:System.Xaml.XamlType" />이 확인할 수 없는 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-494"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a nonresolvable type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-495">이 메서드를 호출 하 여 호출할 수 있습니다 <xref:System.Xaml.XamlType.IsUnknown%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-495">This method can be invoked by calls to <xref:System.Xaml.XamlType.IsUnknown%2A>.</span></span>  
  
 <span data-ttu-id="a6beb-496">기본 구현은 CLR 리플렉션을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-496">The default implementation can use CLR reflection.</span></span> <span data-ttu-id="a6beb-497">Null에 대 한 <xref:System.Xaml.XamlType.UnderlyingType%2A>를 반환 합니다 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-497">For a null <xref:System.Xaml.XamlType.UnderlyingType%2A>, it returns `true`.</span></span>  
  
 <span data-ttu-id="a6beb-498">원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.IsUnknown%2A> 다른 논리를 사용 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-498">Override this method if you want <xref:System.Xaml.XamlType.IsUnknown%2A> to use different logic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsWhitespaceSignificantCollection">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsWhitespaceSignificantCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsWhitespaceSignificantCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsWhitespaceSignificantCollection () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsWhitespaceSignificantCollection();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsWhitespaceSignificantCollection : unit -&gt; bool&#xA;override this.LookupIsWhitespaceSignificantCollection : unit -&gt; bool" Usage="xamlType.LookupIsWhitespaceSignificantCollection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-499">이 <see cref="T:System.Xaml.XamlType" />이 XML 정의를 기준으로 유효한 공백 컬렉션을 나타내는지 여부를 지정하는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-499">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a whitespace significant collection, as per the XML definition.</span></span></summary>
        <returns><span data-ttu-id="a6beb-500">이 <see cref="T:System.Xaml.XamlType" />이 유효한 공백 컬렉션을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-500"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a white-space significant collection; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-501">이 메서드를 호출 하 여 호출할 수 있습니다 <xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-501">This method can be invoked by calls to <xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A>.</span></span>  
  
 <span data-ttu-id="a6beb-502">읽기에 따라 값을 반환 하는 기본 구현은 <xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-502">The default implementation returns a value based on reading <xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute>.</span></span> <span data-ttu-id="a6beb-503">확인할 수도 있습니다는 <xref:System.Xaml.XamlType.BaseType%2A> 직접적인 기본 형식에 특성이 있으면 특성에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-503">It can also check the <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type.</span></span> <span data-ttu-id="a6beb-504">반환 값을 사용할 수 없으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-504">If a value is not available, it returns `false`.</span></span>  
  
 <span data-ttu-id="a6beb-505">원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A> 다른 논리를 사용 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-505">Override this method if you want <xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A> to use different logic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsXData">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsXData ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsXData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsXData" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsXData () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsXData();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsXData : unit -&gt; bool&#xA;override this.LookupIsXData : unit -&gt; bool" Usage="xamlType.LookupIsXData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-506">XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 XML <see langword="XDATA" />를 나타내는지 여부를 지정하는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-506">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents XML <see langword="XDATA" />, as per the XAML definition.</span></span></summary>
        <returns><span data-ttu-id="a6beb-507">이 <see cref="T:System.Xaml.XamlType" />이 <see langword="true" />를 나타내면 <see langword="XDATA" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-507"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents <see langword="XDATA" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-508">이 메서드를 호출 하 여 호출할 수 있습니다 <xref:System.Xaml.XamlType.IsXData%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-508">This method can be invoked by calls to <xref:System.Xaml.XamlType.IsXData%2A>.</span></span>  
  
 <span data-ttu-id="a6beb-509">기본 구현에서는 한 <xref:System.Xaml.XamlType.CanAssignTo%2A> 형식에 대해 직접 호출 <xref:System.Xml.Serialization.IXmlSerializable>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-509">The default implementation makes a <xref:System.Xaml.XamlType.CanAssignTo%2A> call indirectly against the type <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="a6beb-510">원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.IsXData%2A> 다른 논리를 사용 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-510">Override this method if you want <xref:System.Xaml.XamlType.IsXData%2A> to use different logic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupItemType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupItemType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupItemType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupItemType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupItemType () As XamlType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlType ^ LookupItemType();" />
      <MemberSignature Language="F#" Value="abstract member LookupItemType : unit -&gt; System.Xaml.XamlType&#xA;override this.LookupItemType : unit -&gt; System.Xaml.XamlType" Usage="xamlType.LookupItemType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-511">이 <see cref="T:System.Xaml.XamlType" /> 개체의 <see langword="Items" /> 속성에 대한 형식 정보를 제공하는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-511">Returns a value that provides the type information for the <see langword="Items" /> property of this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="a6beb-512">컬렉션에 있는 항목의 형식에 대한 <see cref="T:System.Xaml.XamlType" /> 개체이거나, 이 <see cref="T:System.Xaml.XamlType" />이 컬렉션을 나타내지 않는 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-512">A <see cref="T:System.Xaml.XamlType" /> object for the type of the items in the collection; otherwise, <see langword="null" /> if this <see cref="T:System.Xaml.XamlType" /> does not represent a collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-513">이 메서드를 호출 하 여 호출할 수 있습니다 <xref:System.Xaml.XamlType.ItemType%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-513">This method can be invoked by calls to <xref:System.Xaml.XamlType.ItemType%2A>.</span></span>  
  
 <span data-ttu-id="a6beb-514">기본 구현에 대 한 확인 등과 같은 CLR 리플렉션 개념을 사용할 수는 `Add` 메서드를 <xref:System.Reflection.MethodInfo> 하 고 사용 하는 <xref:System.Reflection.ParameterInfo>검사; <xref:System.Xaml.XamlType.IsArray%2A>; 및 검사 <xref:System.Xaml.XamlType.BaseType%2A> 하 고 동일한 논리를 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-514">The default implementation can use CLR reflection concepts, such as checking for an `Add` method by <xref:System.Reflection.MethodInfo> and using the <xref:System.Reflection.ParameterInfo>; checking <xref:System.Xaml.XamlType.IsArray%2A>; and checking <xref:System.Xaml.XamlType.BaseType%2A> and trying the same logic there.</span></span>  
  
 <span data-ttu-id="a6beb-515">원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.ItemType%2A> 다른 논리를 사용 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-515">Override this method if you want <xref:System.Xaml.XamlType.ItemType%2A> to use different logic.</span></span> <span data-ttu-id="a6beb-516">인 사례 <xref:System.Xaml.XamlType.LookupCollectionKind%2A> 반환 <xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType> 반환할지 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-516">Cases where <xref:System.Xaml.XamlType.LookupCollectionKind%2A> returns <xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType> should return `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupKeyType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupKeyType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupKeyType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupKeyType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupKeyType () As XamlType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlType ^ LookupKeyType();" />
      <MemberSignature Language="F#" Value="abstract member LookupKeyType : unit -&gt; System.Xaml.XamlType&#xA;override this.LookupKeyType : unit -&gt; System.Xaml.XamlType" Usage="xamlType.LookupKeyType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-517">이 <see cref="T:System.Xaml.XamlType" />이 사전을 나타내는 경우 이 <see cref="T:System.Xaml.XamlType" />의 키 속성에 대한 형식 정보를 제공하는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-517">Returns a value that provides the type information for the key property of this <see cref="T:System.Xaml.XamlType" />, if the <see cref="T:System.Xaml.XamlType" /> represents a dictionary.</span></span></summary>
        <returns><span data-ttu-id="a6beb-518">사전 사용 키의 형식에 대한 <see cref="T:System.Xaml.XamlType" /> 개체이거나, 이 <see cref="T:System.Xaml.XamlType" />이 사전을 나타내지 않는 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-518">A <see cref="T:System.Xaml.XamlType" /> object for the type of the key for dictionary usage, or <see langword="null" /> if this <see cref="T:System.Xaml.XamlType" /> does not represent a dictionary,</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-519">이 메서드를 호출 하 여 호출할 수 있습니다 <xref:System.Xaml.XamlType.KeyType%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-519">This method can be invoked by calls to <xref:System.Xaml.XamlType.KeyType%2A>.</span></span>  
  
 <span data-ttu-id="a6beb-520">기본 구현에 대 한 확인 등과 같은 CLR 리플렉션 개념을 사용할 수는 `Add` 메서드를 <xref:System.Reflection.MethodInfo> 하 고 사용 하는 <xref:System.Reflection.ParameterInfo>; 및 검사 <xref:System.Xaml.XamlType.BaseType%2A> 하 고 동일한 논리를 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-520">The default implementation can use CLR reflection concepts, such as checking for an `Add` method by <xref:System.Reflection.MethodInfo> and using the <xref:System.Reflection.ParameterInfo>; and checking <xref:System.Xaml.XamlType.BaseType%2A> and trying the same logic there.</span></span>  
  
 <span data-ttu-id="a6beb-521">원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.KeyType%2A> 다른 논리를 사용 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-521">Override this method if you want <xref:System.Xaml.XamlType.KeyType%2A> to use different logic.</span></span> <span data-ttu-id="a6beb-522">인 사례 <xref:System.Xaml.XamlType.LookupCollectionKind%2A> 을 반환 하지 않는 <xref:System.Xaml.Schema.XamlCollectionKind.Dictionary?displayProperty=nameWithType> 반환할지 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-522">Cases where <xref:System.Xaml.XamlType.LookupCollectionKind%2A> does not return <xref:System.Xaml.Schema.XamlCollectionKind.Dictionary?displayProperty=nameWithType> should return `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupMarkupExtensionReturnType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupMarkupExtensionReturnType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupMarkupExtensionReturnType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupMarkupExtensionReturnType () As XamlType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlType ^ LookupMarkupExtensionReturnType();" />
      <MemberSignature Language="F#" Value="abstract member LookupMarkupExtensionReturnType : unit -&gt; System.Xaml.XamlType&#xA;override this.LookupMarkupExtensionReturnType : unit -&gt; System.Xaml.XamlType" Usage="xamlType.LookupMarkupExtensionReturnType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-523">이 <see cref="T:System.Xaml.XamlType" />이 태그 확장을 나타내는 경우 이 개체의 반환된 <see langword="ProvideValue" />에 대한 형식 정보를 제공하는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-523">Returns a value that provides the type information for the returned <see langword="ProvideValue" /> of this <see cref="T:System.Xaml.XamlType" />, if it represents a markup extension.</span></span></summary>
        <returns><span data-ttu-id="a6beb-524">태그 확장 사용의 반환 형식에 대한 <see cref="T:System.Xaml.XamlType" /> 개체이거나, 이 <see cref="T:System.Xaml.XamlType" />이 태그 확장을 나타내지 않는 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-524">A <see cref="T:System.Xaml.XamlType" /> object for the return type for markup extension usage; otherwise, <see langword="null" />, if this <see cref="T:System.Xaml.XamlType" /> does not represent a markup extension.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-525">이 메서드를 호출 하 여 호출할 수 있습니다 <xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-525">This method can be invoked by calls to <xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A>.</span></span>  
  
 <span data-ttu-id="a6beb-526">기본 구현은 반환 된 <xref:System.Xaml.XamlType> 읽어 <xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-526">The default implementation returns a <xref:System.Xaml.XamlType> on the basis of reading <xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute>.</span></span> <span data-ttu-id="a6beb-527">확인할 수도 있습니다 <xref:System.Xaml.XamlType.BaseType%2A> 직접적인 기본 형식에 특성이 있으면 특성에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-527">It can also check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type.</span></span> <span data-ttu-id="a6beb-528">반환 값을 사용할 수 없으면 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-528">If a value is not available, it returns `null`.</span></span>  
  
 <span data-ttu-id="a6beb-529">원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A> 다른 논리를 사용 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-529">Override this method if you want <xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A> to use different logic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupMember">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlMember LookupMember (string name, bool skipReadOnlyCheck);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlMember LookupMember(string name, bool skipReadOnlyCheck) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupMember (name As String, skipReadOnlyCheck As Boolean) As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlMember ^ LookupMember(System::String ^ name, bool skipReadOnlyCheck);" />
      <MemberSignature Language="F#" Value="abstract member LookupMember : string * bool -&gt; System.Xaml.XamlMember&#xA;override this.LookupMember : string * bool -&gt; System.Xaml.XamlMember" Usage="xamlType.LookupMember (name, skipReadOnlyCheck)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="skipReadOnlyCheck" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="a6beb-530">문자열로 가져올 멤버의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-530">The name of the member to get (as a string).</span></span></param>
        <param name="skipReadOnlyCheck"><span data-ttu-id="a6beb-531">멤버의 <see cref="P:System.Xaml.XamlMember.IsReadOnly" /> 값이 <see langword="true" />인 경우에도 해당 멤버를 반환하면 <see langword="true" />이고, <see cref="P:System.Xaml.XamlMember.IsReadOnly" /> 멤버를 반환하지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-531"><see langword="true" /> to return a member even if that member has a <see langword="true" /> value for <see cref="P:System.Xaml.XamlMember.IsReadOnly" />; <see langword="false" /> to not return a <see cref="P:System.Xaml.XamlMember.IsReadOnly" /> member.</span></span> <span data-ttu-id="a6beb-532">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-532">The default is <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="a6beb-533">이 <see cref="T:System.Xaml.XamlMember" />에서 명명된 특정 멤버의 <see cref="T:System.Xaml.XamlType" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-533">Returns the <see cref="T:System.Xaml.XamlMember" /> for a specific named member from this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="a6beb-534">멤버를 찾았으면 해당 멤버의 <see cref="T:System.Xaml.XamlMember" /> 정보이고, 그렇지 않으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-534">The <see cref="T:System.Xaml.XamlMember" /> information for the member, if a member was found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-535">이 메서드를 호출 하 여 호출할 수 있습니다 <xref:System.Xaml.XamlType.GetMember%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-535">This method can be invoked by calls to <xref:System.Xaml.XamlType.GetMember%2A>.</span></span>  
  
 <span data-ttu-id="a6beb-536">기본 구현은 반환을 <xref:System.Xaml.XamlType> 내부 CLR 리플렉션 및 스키마 컨텍스트에 대 한 평가 기반 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-536">The default implementation returns a <xref:System.Xaml.XamlType> based on internal CLR reflection and evaluation against the schema context.</span></span>  
  
 <span data-ttu-id="a6beb-537">원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.GetMember%2A> 다른 논리를 사용 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-537">Override this method if you want <xref:System.Xaml.XamlType.GetMember%2A> to use different logic.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a6beb-538"><xref:System.Xaml.XamlType.LookupMember%2A> 가상 함수 이며 따라서 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-538"><xref:System.Xaml.XamlType.LookupMember%2A> is virtual, and therefore, can be overridden.</span></span> <span data-ttu-id="a6beb-539">재정의 될 수 없습니다 (악의적인 목적 여부 또는) 더 이상 예상 되는 방식으로 정렬 되도록 XAML 형식의 보고 된 구성원을 변경 하려면를 <xref:System.ComponentModel.TypeDescriptor> `Get*` 기본 CLR 형식에 대 한 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-539">The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the <xref:System.ComponentModel.TypeDescriptor> `Get*` information about the underlying CLR type.</span></span> <span data-ttu-id="a6beb-540">보고 하는 멤버의 모든 보안에 중요 한 검사를 기본 CLR 형식을 대신 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-540">For any security-critical checks of member reporting, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupPositionalParameters">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; LookupPositionalParameters (int parameterCount);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; LookupPositionalParameters(int32 parameterCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupPositionalParameters (parameterCount As Integer) As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ LookupPositionalParameters(int parameterCount);" />
      <MemberSignature Language="F#" Value="abstract member LookupPositionalParameters : int -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;&#xA;override this.LookupPositionalParameters : int -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" Usage="xamlType.LookupPositionalParameters parameterCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parameterCount"><span data-ttu-id="a6beb-541">정보를 보려는 특정 구문 또는 생성자 모드의 개수입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-541">The count (arity) of the particular syntax or constructor mode that you want information about.</span></span></param>
        <summary><span data-ttu-id="a6beb-542">태그 확장 형식의 경우 이 <see cref="T:System.Xaml.XamlType" />에 대한 특정 태그 확장 사용에서 지원되는 위치 매개 변수의 형식을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-542">For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="a6beb-543">각 <see cref="T:System.Xaml.XamlType" />이 구문에서 해당 위치의 형식인 <see cref="T:System.Xaml.XamlType" /> 값의 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-543">A list of <see cref="T:System.Xaml.XamlType" /> values where each such <see cref="T:System.Xaml.XamlType" /> is the type for that position in the syntax.</span></span> <span data-ttu-id="a6beb-544">태그 확장에 대한 태그 입력을 제공할 때 이 형식을 동일한 순서로 지정해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-544">You must specify those types in the same order when supplying markup input for the markup extension.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-545">이 메서드를 호출 하 여 호출할 수 있습니다 <xref:System.Xaml.XamlType.GetPositionalParameters%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-545">This method can be invoked by calls to <xref:System.Xaml.XamlType.GetPositionalParameters%2A>.</span></span>  
  
 <span data-ttu-id="a6beb-546">기본 구현에서는 생성자를 찾고 인자 수를 확인 하는 중에 따라 내부 리플렉션 정보를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-546">The default implementation uses internal reflection information based on finding constructors and checking the arity.</span></span> <span data-ttu-id="a6beb-547">원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.GetPositionalParameters%2A> 다른 논리를 사용 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-547">Override this method if you want <xref:System.Xaml.XamlType.GetPositionalParameters%2A> to use different logic.</span></span>  
  
 <span data-ttu-id="a6beb-548">이 API는만 관련이 <xref:System.Xaml.XamlType> 태그 확장을 나타내는지 (<xref:System.Xaml.XamlType.IsMarkupExtension%2A> 는 `true`).</span><span class="sxs-lookup"><span data-stu-id="a6beb-548">This API is only relevant if this <xref:System.Xaml.XamlType> represents a markup extension (<xref:System.Xaml.XamlType.IsMarkupExtension%2A> is `true`).</span></span>  
  
 <span data-ttu-id="a6beb-549">입력 `parameterCount` 특정 위치 매개 변수의 형식을 요청 하는 데 사용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-549">The input `parameterCount` is not for requesting the type of a specific positional parameter.</span></span> <span data-ttu-id="a6beb-550">태그 확장 사용의 인자 수를 지정 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-550">It is for specifying the arity of a markup extension usage.</span></span> <span data-ttu-id="a6beb-551">종종 태그 확장 사용에 여러 시그니처가 포함 하 게 되 고 구분 하기 위해 다른 매개 변수 인자 (개수) 위치 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-551">Markup extension usage often has multiple signatures and uses different parameter arity (count) of positional parameters to differentiate.</span></span> <span data-ttu-id="a6beb-552">그러나 중복 arities를 허용 하 고 차이점에 대 한 형식의 위치 매개 변수를 사용 하는 스키마 컨텍스트를 구성할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-552">However, you can configure a schema context to allow duplicate arities and use types of the positional parameters for differentiation.</span></span> <span data-ttu-id="a6beb-553">자세한 내용은 <xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="a6beb-553">For more information, see <xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A>.</span></span> <span data-ttu-id="a6beb-554">특정 인자 수에 대 한 매개 변수 위치 및 형식이 달라질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-554">For a specific arity count, the parameter positions and types can vary.</span></span> <span data-ttu-id="a6beb-555">위치 형식의 특정 인자의 태그 확장 사용을 가져오려면 먼저 호출 <xref:System.Xaml.XamlType.GetPositionalParameters%2A> 인자 수를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-555">To get the positional type of a specific arity's markup extension usage, you first call <xref:System.Xaml.XamlType.GetPositionalParameters%2A> with the arity count.</span></span> <span data-ttu-id="a6beb-556">그런 다음 반환된 된 컬렉션에서 해당 위치의 항목을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-556">Then get the item at that position from the returned collection.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupSetMarkupExtensionHandler">
      <MemberSignature Language="C#" Value="protected virtual EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; LookupSetMarkupExtensionHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; LookupSetMarkupExtensionHandler() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupSetMarkupExtensionHandler" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupSetMarkupExtensionHandler () As EventHandler(Of XamlSetMarkupExtensionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ LookupSetMarkupExtensionHandler();" />
      <MemberSignature Language="F#" Value="abstract member LookupSetMarkupExtensionHandler : unit -&gt; EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;&#xA;override this.LookupSetMarkupExtensionHandler : unit -&gt; EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;" Usage="xamlType.LookupSetMarkupExtensionHandler " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-557">태그 확장의 설정 작업에 사용할 처리기 콜백을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-557">Returns a handler callback to use for the set operations of markup extensions.</span></span></summary>
        <returns><span data-ttu-id="a6beb-558">태그 확장의 설정 작업에 사용할 처리기 콜백입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-558">A handler callback to use for the set operations of markup extensions.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-559">읽기에 따라 값을 반환 하는 기본 구현은 <xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-559">The default implementation returns a value based on reading <xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>.</span></span> <span data-ttu-id="a6beb-560">확인할 수도 있습니다 <xref:System.Xaml.XamlType.BaseType%2A> 직접적인 기본 형식에 특성이 있으면 특성에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-560">It can also check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type.</span></span> <span data-ttu-id="a6beb-561">반환 값을 사용할 수 없으면 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-561">If a value is unavailable, it returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupSetTypeConverterHandler">
      <MemberSignature Language="C#" Value="protected virtual EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; LookupSetTypeConverterHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; LookupSetTypeConverterHandler() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupSetTypeConverterHandler" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupSetTypeConverterHandler () As EventHandler(Of XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ LookupSetTypeConverterHandler();" />
      <MemberSignature Language="F#" Value="abstract member LookupSetTypeConverterHandler : unit -&gt; EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;&#xA;override this.LookupSetTypeConverterHandler : unit -&gt; EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;" Usage="xamlType.LookupSetTypeConverterHandler " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-562">형식 변환기 설정 사례에 사용할 처리기를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-562">Returns a handler to use for type converter setting cases.</span></span></summary>
        <returns><span data-ttu-id="a6beb-563">형식 변환기 설정 사례에 사용할 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-563">A handler to use for type converter setting cases.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-564">읽기에 따라 값을 반환 하는 기본 구현은 <xref:System.Windows.Markup.XamlSetTypeConverterAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-564">The default implementation returns a value based on reading <xref:System.Windows.Markup.XamlSetTypeConverterAttribute>.</span></span> <span data-ttu-id="a6beb-565">확인할 수도 있습니다 <xref:System.Xaml.XamlType.BaseType%2A> 직접적인 기본 형식에 특성이 있으면 특성에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-565">It can also check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type.</span></span> <span data-ttu-id="a6beb-566">반환 값을 사용할 수 없으면 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-566">If a value is unavailable, it returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTrimSurroundingWhitespace">
      <MemberSignature Language="C#" Value="protected virtual bool LookupTrimSurroundingWhitespace ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupTrimSurroundingWhitespace() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupTrimSurroundingWhitespace () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupTrimSurroundingWhitespace();" />
      <MemberSignature Language="F#" Value="abstract member LookupTrimSurroundingWhitespace : unit -&gt; bool&#xA;override this.LookupTrimSurroundingWhitespace : unit -&gt; bool" Usage="xamlType.LookupTrimSurroundingWhitespace " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-567">이 <see cref="T:System.Xaml.XamlType" />이 주변 공백을 트리밍하는 모드를 사용하여 serialize되어야 하는지 여부를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-567">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> should be serialized using a mode that  trims surrounding whitespace.</span></span></summary>
        <returns><span data-ttu-id="a6beb-568">이 <see cref="T:System.Xaml.XamlType" />이 주변 공백을 트리밍하는 모드로 serialize되어야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-568"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> should be serialized in a mode that trims surrounding whitespace; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-569">이 메서드를 호출 하 여 호출할 수 있습니다 <xref:System.Xaml.XamlType.TrimSurroundingWhitespace%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-569">This method can be invoked by calls to <xref:System.Xaml.XamlType.TrimSurroundingWhitespace%2A>.</span></span>  
  
 <span data-ttu-id="a6beb-570">읽기에 따라 값을 반환 하는 기본 구현은 <xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-570">The default implementation returns a value based on reading <xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute>.</span></span> <span data-ttu-id="a6beb-571">확인할 수도 있습니다 <xref:System.Xaml.XamlType.BaseType%2A> 직접적인 기본 형식에 특성이 있으면 특성에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-571">It can also check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type.</span></span> <span data-ttu-id="a6beb-572">반환 값을 사용할 수 없으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-572">If a value is unavailable, it returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTypeConverter">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt; LookupTypeConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.ComponentModel.TypeConverter&gt; LookupTypeConverter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupTypeConverter" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupTypeConverter () As XamlValueConverter(Of TypeConverter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlValueConverter&lt;System::ComponentModel::TypeConverter ^&gt; ^ LookupTypeConverter();" />
      <MemberSignature Language="F#" Value="abstract member LookupTypeConverter : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;&#xA;override this.LookupTypeConverter : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;" Usage="xamlType.LookupTypeConverter " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-573">이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 값에 대한 형식 변환 동작을 나타내는 <see cref="T:System.ComponentModel.TypeConverter" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlType" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-573">Returns a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> that has a <see cref="T:System.ComponentModel.TypeConverter" /> constraint, which represents type-conversion behavior for values of this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="a6beb-574">이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 값에 대한 형식 변환 동작을 나타내는 <see cref="T:System.ComponentModel.TypeConverter" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlType" />이거나, 그렇지 않으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-574">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.ComponentModel.TypeConverter" /> constraint that represents type-conversion behavior for values of this <see cref="T:System.Xaml.XamlType" />; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-575">이 메서드를 호출 하 여 호출할 수 있습니다 <xref:System.Xaml.XamlType.TypeConverter%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-575">This method can be invoked by calls to <xref:System.Xaml.XamlType.TypeConverter%2A>.</span></span>  
  
 <span data-ttu-id="a6beb-576">읽기에 따라 값을 반환 하는 기본 구현은 <xref:System.ComponentModel.TypeConverterAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-576">The default implementation returns a value based on reading <xref:System.ComponentModel.TypeConverterAttribute>.</span></span> <span data-ttu-id="a6beb-577">기본 구현은 확인할 수도 있습니다 <xref:System.Xaml.XamlType.BaseType%2A> 직접적인 기본 형식에 특성이 있으면 특성에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-577">The default implementation can also check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type.</span></span> <span data-ttu-id="a6beb-578">열거형, 공용 값 형식 및 제네릭 기본 변환 위한 특수 논리가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-578">It also includes special logic for default conversion of enumerations, common value types, and generics.</span></span> <span data-ttu-id="a6beb-579">반환 값을 사용할 수 없으면 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-579">If a value is unavailable, it returns `null`.</span></span>  
  
 <span data-ttu-id="a6beb-580">원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.TypeConverter%2A> 다른 논리를 사용 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-580">Override this method if you want <xref:System.Xaml.XamlType.TypeConverter%2A> to use different logic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupUnderlyingType">
      <MemberSignature Language="C#" Value="protected virtual Type LookupUnderlyingType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Type LookupUnderlyingType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupUnderlyingType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupUnderlyingType () As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Type ^ LookupUnderlyingType();" />
      <MemberSignature Language="F#" Value="abstract member LookupUnderlyingType : unit -&gt; Type&#xA;override this.LookupUnderlyingType : unit -&gt; Type" Usage="xamlType.LookupUnderlyingType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-581">이 <see cref="T:System.Type" />의 기반이 되는 CLR <see cref="T:System.Xaml.XamlType" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-581">Returns the CLR <see cref="T:System.Type" /> that underlies this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="a6beb-582">이 <see cref="T:System.Type" />의 기반이 되는 CLR <see cref="T:System.Xaml.XamlType" />이거나, 그렇지 않으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-582">The CLR <see cref="T:System.Type" /> that underlies this <see cref="T:System.Xaml.XamlType" />; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-583">이 메서드를 호출 하 여 호출할 수 있습니다 <xref:System.Xaml.XamlType.UnderlyingType%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-583">This method can be invoked by calls to <xref:System.Xaml.XamlType.UnderlyingType%2A>.</span></span>  
  
 <span data-ttu-id="a6beb-584">기본 구현에서는 내부 필드를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-584">The default implementation returns an internal field.</span></span> <span data-ttu-id="a6beb-585">해당 값은 생성자를 호출한 및 사용자가 제공한 정보를 기반으로 하며 및 해당 필드는 일반적으로 생성 하는 동안 초기화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-585">That field is generally initialized during construction and its value is based on which constructor was called and the information that you provided.</span></span>  
  
 <span data-ttu-id="a6beb-586">원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.UnderlyingType%2A> 다른 논리를 사용 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-586">Override this method if you want <xref:System.Xaml.XamlType.UnderlyingType%2A> to use different logic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupUsableDuringInitialization">
      <MemberSignature Language="C#" Value="protected virtual bool LookupUsableDuringInitialization ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupUsableDuringInitialization() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupUsableDuringInitialization" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupUsableDuringInitialization () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupUsableDuringInitialization();" />
      <MemberSignature Language="F#" Value="abstract member LookupUsableDuringInitialization : unit -&gt; bool&#xA;override this.LookupUsableDuringInitialization : unit -&gt; bool" Usage="xamlType.LookupUsableDuringInitialization " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-587">XAML을 초기화하는 동안 이 <see cref="T:System.Xaml.XamlType" />이 하향식으로 빌드되는지 여부를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-587">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> is built top-down during XAML initialization.</span></span></summary>
        <returns><span data-ttu-id="a6beb-588">XAML을 초기화하는 동안 이 <see cref="T:System.Xaml.XamlType" />이 하향식으로 빌드되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-588"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> is built top-down during XAML initialization; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-589">위에서 아래로 개체 그래프를 만들 때 XAML 프로세서 동작을 대략적으로 보여 주는 메타포입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-589">Top-down is a metaphor that approximates XAML processor behavior when it creates the object graph.</span></span> <span data-ttu-id="a6beb-590">하향식을 빌드할 때 형식, 부모에 연결 된 인스턴스화되고 해당 속성이 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-590">When built top-down, a type is instantiated, attached to the parent, and has its properties set.</span></span> <span data-ttu-id="a6beb-591">하향식 생성 속성 변경 처리기를 여러 번 호출을 방지 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-591">Top-down construction avoids invoking property-changed handlers multiple times.</span></span> <span data-ttu-id="a6beb-592">이러한 처리는 개체 그래프 위로 잔물결 및 따라서 여러 처리기 호출을 제거 하 고이 개체 그래프의 시작에 대 한 성능을 최적화 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-592">Such handling ripples up the object graph and therefore, eliminates the multiple handler calls and provides a performance optimization for startup of the object graph.</span></span>  
  
 <span data-ttu-id="a6beb-593">이 메서드를 호출 하 여 호출할 수 있습니다 <xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-593">This method can be invoked by calls to <xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A>.</span></span>  
  
 <span data-ttu-id="a6beb-594">읽기에 따라 값을 반환 하는 기본 구현은 <xref:System.Windows.Markup.UsableDuringInitializationAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-594">The default implementation returns a value based on reading <xref:System.Windows.Markup.UsableDuringInitializationAttribute>.</span></span> <span data-ttu-id="a6beb-595">확인할 수도 있습니다 <xref:System.Xaml.XamlType.BaseType%2A> 직접적인 기본 형식에 특성이 있으면 특성에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-595">It can also check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type.</span></span> <span data-ttu-id="a6beb-596">반환 값을 사용할 수 없으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-596">If a value is unavailable, it returns `false`.</span></span>  
  
 <span data-ttu-id="a6beb-597">원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A> 다른 논리를 사용 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-597">Override this method if you want <xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A> to use different logic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupValueSerializer">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt; LookupValueSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Windows.Markup.ValueSerializer&gt; LookupValueSerializer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupValueSerializer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupValueSerializer () As XamlValueConverter(Of ValueSerializer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlValueConverter&lt;System::Windows::Markup::ValueSerializer ^&gt; ^ LookupValueSerializer();" />
      <MemberSignature Language="F#" Value="abstract member LookupValueSerializer : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;&#xA;override this.LookupValueSerializer : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;" Usage="xamlType.LookupValueSerializer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-598">이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 값에 대한 값 serialization 동작을 나타내는 <see cref="T:System.Windows.Markup.ValueSerializer" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlType" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-598">Returns a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> that has a <see cref="T:System.Windows.Markup.ValueSerializer" /> constraint, which represents value serialization behavior for values of this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="a6beb-599">이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 값에 대한 값 serialization 동작을 나타내는 <see cref="T:System.Windows.Markup.ValueSerializer" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlType" />이거나, 그렇지 않으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-599">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Windows.Markup.ValueSerializer" /> constraint that represents value serialization behavior for values of this <see cref="T:System.Xaml.XamlType" />; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-600">이 메서드를 호출 하 여 호출할 수 있습니다 <xref:System.Xaml.XamlType.ValueSerializer%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-600">This method can be invoked by calls to <xref:System.Xaml.XamlType.ValueSerializer%2A>.</span></span>  
  
 <span data-ttu-id="a6beb-601">읽기에 따라 값을 반환 하는 기본 구현은 <xref:System.Windows.Markup.ValueSerializerAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-601">The default implementation returns a value based on reading <xref:System.Windows.Markup.ValueSerializerAttribute>.</span></span> <span data-ttu-id="a6beb-602">확인할 수도 있습니다 <xref:System.Xaml.XamlType.BaseType%2A> 직접적인 기본 형식에 특성이 있으면 특성에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-602">It can also check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type.</span></span> <span data-ttu-id="a6beb-603">열거형, 공용 값 형식 또는 제네릭 기본 serialization 위한 특수 논리가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-603">It also includes special logic for default serialization of enumerations, common value types, or generics.</span></span> <span data-ttu-id="a6beb-604">반환 값을 사용할 수 없으면 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-604">If a value is unavailable, it returns `null`.</span></span>  
  
 <span data-ttu-id="a6beb-605">원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.ValueSerializer%2A> 다른 논리를 사용 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-605">Override this method if you want <xref:System.Xaml.XamlType.ValueSerializer%2A> to use different logic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkupExtensionReturnType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType MarkupExtensionReturnType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType MarkupExtensionReturnType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.MarkupExtensionReturnType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MarkupExtensionReturnType As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ MarkupExtensionReturnType { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MarkupExtensionReturnType : System.Xaml.XamlType" Usage="System.Xaml.XamlType.MarkupExtensionReturnType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-606">이 <see cref="T:System.Xaml.XamlType" />이 태그 확장을 나타내는 경우 이 개체의 반환된 <see langword="ProvideValue" />에 대한 형식 정보를 제공하는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-606">Gets a value that provides the type information for the returned <see langword="ProvideValue" /> of this <see cref="T:System.Xaml.XamlType" />, if it represents a markup extension.</span></span></summary>
        <value><span data-ttu-id="a6beb-607">태그 확장 사용의 반환 형식에 대한 <see cref="T:System.Xaml.XamlType" /> 개체이거나, 이 <see cref="T:System.Xaml.XamlType" />이 태그 확장을 나타내지 않는 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-607">A <see cref="T:System.Xaml.XamlType" /> object for the return type for markup extension usage; otherwise, <see langword="null" />, if this <see cref="T:System.Xaml.XamlType" /> does not represent a markup extension.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-608">이 속성은이 관련만 <xref:System.Xaml.XamlType> 태그 확장을 나타내는지 (`x:MarkupExtension` 할당 가능한 형식 목록에).</span><span class="sxs-lookup"><span data-stu-id="a6beb-608">This property is only relevant if this <xref:System.Xaml.XamlType> represents a markup extension (`x:MarkupExtension` is in the assignable types list).</span></span>  
  
 <span data-ttu-id="a6beb-609">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 있습니다 <xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A> 에 재정의 <xref:System.Xaml.XamlType> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-609">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="a6beb-610">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 하세요. <xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A> 이 형식에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-610">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Xaml.XamlType.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-611">이 <see cref="T:System.Xaml.XamlType" />이 나타내는 형식의 문자열 이름을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-611">Gets the string name of the type that this <see cref="T:System.Xaml.XamlType" /> represents.</span></span></summary>
        <value><span data-ttu-id="a6beb-612">이 XAML 형식의 문자열 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-612">The string name of this XAML type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-613">이 속성은 일반적으로 스키마 생성 된 이름을 가져옵니다 (당 합니다 <xref:System.Xaml.XamlType.%23ctor%2A> 서명), 이름이 나는 <xref:System.Type>CLR 형식 시스템의 적절 한 생성자를 사용 하 여 생성 되는 경우, 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-613">This property typically gets the schema-constructed name (per the <xref:System.Xaml.XamlType.%23ctor%2A> signature), or the name of the <xref:System.Type>, if it is constructed by using the pertinent constructor of the CLR type system.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Xaml.XamlType xamlType1, System.Xaml.XamlType xamlType2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Xaml.XamlType xamlType1, class System.Xaml.XamlType xamlType2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (xamlType1 As XamlType, xamlType2 As XamlType) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Xaml::XamlType ^ xamlType1, System::Xaml::XamlType ^ xamlType2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Xaml.XamlType * System.Xaml.XamlType -&gt; bool" Usage="xamlType1 = xamlType2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlType1" Type="System.Xaml.XamlType" />
        <Parameter Name="xamlType2" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="xamlType1"><span data-ttu-id="a6beb-614"><see cref="T:System.Xaml.XamlType" /> 또는 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-614">A <see cref="T:System.Xaml.XamlType" /> or <see langword="null" />.</span></span></param>
        <param name="xamlType2"><span data-ttu-id="a6beb-615"><see cref="T:System.Xaml.XamlType" /> 또는 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-615">A <see cref="T:System.Xaml.XamlType" /> or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="a6beb-616">지정된 두 <see cref="T:System.Xaml.XamlType" /> 개체의 값이 같은지를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-616">Determines whether two specified <see cref="T:System.Xaml.XamlType" /> objects have the same value.</span></span></summary>
        <returns><span data-ttu-id="a6beb-617"><see langword="true" />의 값이 <paramref name="xamlType1" />의 값과 같으면 <paramref name="xamlType2" />를 반환하고, 그러지 않으면 <see langword="false" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-617"><see langword="true" /> if the value of <paramref name="xamlType1" /> is the same as the value of <paramref name="xamlType2" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Xaml.XamlType xamlType1, System.Xaml.XamlType xamlType2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Xaml.XamlType xamlType1, class System.Xaml.XamlType xamlType2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (xamlType1 As XamlType, xamlType2 As XamlType) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Xaml::XamlType ^ xamlType1, System::Xaml::XamlType ^ xamlType2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Xaml.XamlType * System.Xaml.XamlType -&gt; bool" Usage="System.Xaml.XamlType.op_Inequality (xamlType1, xamlType2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlType1" Type="System.Xaml.XamlType" />
        <Parameter Name="xamlType2" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="xamlType1"><span data-ttu-id="a6beb-618"><see cref="T:System.Xaml.XamlType" /> 또는 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-618">A <see cref="T:System.Xaml.XamlType" /> or <see langword="null" />.</span></span></param>
        <param name="xamlType2"><span data-ttu-id="a6beb-619"><see cref="T:System.Xaml.XamlType" /> 또는 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-619">A <see cref="T:System.Xaml.XamlType" /> or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="a6beb-620">지정된 두 <see cref="T:System.Xaml.XamlType" /> 개체의 값이 서로 다른지 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-620">Determines whether two specified <see cref="T:System.Xaml.XamlType" /> objects have different values.</span></span></summary>
        <returns><span data-ttu-id="a6beb-621"><see langword="true" />의 값이 <paramref name="xamlType1" />의 값과 다르면 <paramref name="xamlType2" />이고, 그러지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-621"><see langword="true" /> if the value of <paramref name="xamlType1" /> is different from the value of <paramref name="xamlType2" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredXamlNamespace">
      <MemberSignature Language="C#" Value="public string PreferredXamlNamespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PreferredXamlNamespace" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.PreferredXamlNamespace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PreferredXamlNamespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PreferredXamlNamespace { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PreferredXamlNamespace : string" Usage="System.Xaml.XamlType.PreferredXamlNamespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-622">이 <see cref="T:System.Xaml.XamlType" />에 대한 기본 XAML 네임스페이스인 단일 XAML 네임스페이스를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-622">Gets the single XAML namespace that is the primary XAML namespace for this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <value><span data-ttu-id="a6beb-623">이 XAML 형식에 대한 기본 XAML 네임스페이스의 식별자로서, 문자열로 지정됩니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-623">The identifier, as a string, of the primary XAML namespace for this XAML type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-624">이 구현은 호출할 때와 동일한 값을 제공 <xref:System.Xaml.XamlType.GetXamlNamespaces%2A> 다음 반환된 된 열거 가능한 집합에서 첫 번째 값 문자열을 시작 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-624">This implementation provides the same value as calling <xref:System.Xaml.XamlType.GetXamlNamespaces%2A> and then getting the first value string from the returned enumerable set.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SchemaContext">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlSchemaContext SchemaContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlSchemaContext SchemaContext" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.SchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SchemaContext As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlSchemaContext ^ SchemaContext { System::Xaml::XamlSchemaContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SchemaContext : System.Xaml.XamlSchemaContext" Usage="System.Xaml.XamlType.SchemaContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-625">이 <see cref="T:System.Xaml.XamlSchemaContext" />을 처리하기 위한 활성 <see cref="T:System.Xaml.XamlType" />를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-625">Gets the active <see cref="T:System.Xaml.XamlSchemaContext" /> for processing this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <value><span data-ttu-id="a6beb-626">이 <see cref="T:System.Xaml.XamlSchemaContext" />을 처리하기 위한 활성 <see cref="T:System.Xaml.XamlType" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-626">The active <see cref="T:System.Xaml.XamlSchemaContext" /> for processing this <see cref="T:System.Xaml.XamlType" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-627"><xref:System.Xaml.XamlSchemaContext> 필수 매개 변수 항목을 만들 때는 <xref:System.Xaml.XamlType>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-627"><xref:System.Xaml.XamlSchemaContext> is a required parameter entry when constructing a <xref:System.Xaml.XamlType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="xamlType.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6beb-628">이 <see cref="T:System.Xaml.XamlType" />의 문자열 표현을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-628">Returns a string representation of this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="a6beb-629">이 <see cref="T:System.Xaml.XamlType" />의 문자열 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-629">A string representation of this <see cref="T:System.Xaml.XamlType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-630"><xref:System.Xaml.XamlType> 구현의 <xref:System.Object.ToString%2A> 반환를 <xref:System.Xaml.XamlType.Name%2A> 의 속성을 <xref:System.Xaml.XamlType>합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-630">The <xref:System.Xaml.XamlType> implementation of <xref:System.Object.ToString%2A> returns the <xref:System.Xaml.XamlType.Name%2A> property of the <xref:System.Xaml.XamlType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimSurroundingWhitespace">
      <MemberSignature Language="C#" Value="public bool TrimSurroundingWhitespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TrimSurroundingWhitespace" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.TrimSurroundingWhitespace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TrimSurroundingWhitespace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TrimSurroundingWhitespace { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.TrimSurroundingWhitespace : bool" Usage="System.Xaml.XamlType.TrimSurroundingWhitespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-631">이 <see cref="T:System.Xaml.XamlType" />에 콘텐츠에서 주변 공백을 트리밍하는 serialization의 공백 처리 동작이 있는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-631">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> has whitespace handling behavior for serialization that trims the surrounding whitespace in its content.</span></span></summary>
        <value><span data-ttu-id="a6beb-632">이 <see cref="T:System.Xaml.XamlType" />이 공백 트리밍을 사용하는 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-632"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a type that uses whitespace trimming; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-633">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 있습니다 <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> 에 재정의 <xref:System.Xaml.XamlType> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-633">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="a6beb-634">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 하세요. <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> 이 형식에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-634">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeArguments">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; TypeArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; TypeArguments" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.TypeArguments" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeArguments As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ TypeArguments { System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeArguments : System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" Usage="System.Xaml.XamlType.TypeArguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-635">이 <see cref="T:System.Xaml.XamlType" />이 제네릭을 나타내는 경우 형식 인수의 목록을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-635">Gets a list of type arguments for cases where this <see cref="T:System.Xaml.XamlType" /> represents a generic.</span></span></summary>
        <value><span data-ttu-id="a6beb-636">형식 인수 형식의 목록이거나, 이 <see cref="T:System.Xaml.XamlType" />이 제네릭을 나타내지 않는 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-636">A list of type argument types; otherwise, <see langword="null" />, if this <see cref="T:System.Xaml.XamlType" /> does not represent a generic.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-637">에 대 한 특정 시나리오가 <xref:System.Xaml.XamlType> 를 호출 하는 <xref:System.Xaml.XamlType.TypeArguments%2A> 매개 변수 형식이 열려 있는 목록을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-637">There are certain scenarios for a <xref:System.Xaml.XamlType> where calling the <xref:System.Xaml.XamlType.TypeArguments%2A> parameter returns a list where the types are still open.</span></span> <span data-ttu-id="a6beb-638">반환 된이 경우, 하나 이상이 <xref:System.Xaml.XamlType> 값은 자리 표시자 값을 갖습니다 <xref:System.Xaml.XamlType.Name%2A?displayProperty=nameWithType>와 같은 `T`, 제네릭이 계속 열려 있는지를 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-638">In this case, one or more of the returned <xref:System.Xaml.XamlType> values will have placeholder values for <xref:System.Xaml.XamlType.Name%2A?displayProperty=nameWithType>, such as `T`, to represent that the generic is still open.</span></span> <span data-ttu-id="a6beb-639">표시 되 면이 시나리오가 발생할 수 있습니다는 <xref:System.Xaml.XamlType> 호출에서 <xref:System.Xaml.XamlSchemaContext.GetXamlType%2A>, 대신 XAML 판독기 구현에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-639">This scenario can occur if you get a <xref:System.Xaml.XamlType> from a call to <xref:System.Xaml.XamlSchemaContext.GetXamlType%2A>, instead of from a XAML reader implementation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeConverter">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt; TypeConverter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.ComponentModel.TypeConverter&gt; TypeConverter" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.TypeConverter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeConverter As XamlValueConverter(Of TypeConverter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlValueConverter&lt;System::ComponentModel::TypeConverter ^&gt; ^ TypeConverter { System::Xaml::Schema::XamlValueConverter&lt;System::ComponentModel::TypeConverter ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeConverter : System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;" Usage="System.Xaml.XamlType.TypeConverter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-640">이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 값에 대한 형식 변환 동작을 나타내는 <see cref="T:System.ComponentModel.TypeConverter" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlType" />를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-640">Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.ComponentModel.TypeConverter" /> constraint that represents type conversion behavior for values of this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <value><span data-ttu-id="a6beb-641">이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 값에 대한 형식 변환 동작을 나타내는 <see cref="T:System.ComponentModel.TypeConverter" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlType" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-641">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.ComponentModel.TypeConverter" /> constraint that represents type conversion behavior for values of this <see cref="T:System.Xaml.XamlType" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-642">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 있습니다 <xref:System.Xaml.XamlType.LookupTypeConverter%2A> 에 재정의 <xref:System.Xaml.XamlType> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-642">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupTypeConverter%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="a6beb-643">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 하세요. <xref:System.Xaml.XamlType.LookupTypeConverter%2A> 이 형식에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-643">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupTypeConverter%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingType">
      <MemberSignature Language="C#" Value="public Type UnderlyingType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.UnderlyingType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnderlyingType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ UnderlyingType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnderlyingType : Type" Usage="System.Xaml.XamlType.UnderlyingType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-644">이 <see cref="T:System.Type" />의 기반이 되는 CLR <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-644">Gets the CLR <see cref="T:System.Type" /> that underlies this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <value><span data-ttu-id="a6beb-645">이 <see cref="T:System.Type" />의 기반이 되는 CLR <see cref="T:System.Xaml.XamlType" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-645">The CLR <see cref="T:System.Type" /> that underlies this <see cref="T:System.Xaml.XamlType" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueSerializer">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt; ValueSerializer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Windows.Markup.ValueSerializer&gt; ValueSerializer" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.ValueSerializer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValueSerializer As XamlValueConverter(Of ValueSerializer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlValueConverter&lt;System::Windows::Markup::ValueSerializer ^&gt; ^ ValueSerializer { System::Xaml::Schema::XamlValueConverter&lt;System::Windows::Markup::ValueSerializer ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValueSerializer : System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;" Usage="System.Xaml.XamlType.ValueSerializer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6beb-646">이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 값에 대한 값 serialization 동작을 나타내는 <see cref="T:System.Windows.Markup.ValueSerializer" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlType" />를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-646">Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Windows.Markup.ValueSerializer" /> constraint that represents value serialization behavior for values of this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <value><span data-ttu-id="a6beb-647">이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 값에 대한 값 serialization 동작을 나타내는 <see cref="T:System.Windows.Markup.ValueSerializer" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlType" />이거나, 그렇지 않으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-647">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Windows.Markup.ValueSerializer" /> constraint that represents value serialization behavior for values of this <see cref="T:System.Xaml.XamlType" />; otherwise, <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6beb-648">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 있습니다 <xref:System.Xaml.XamlType.LookupValueSerializer%2A> 에 재정의 <xref:System.Xaml.XamlType> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-648">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupValueSerializer%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="a6beb-649">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 하세요. <xref:System.Xaml.XamlType.LookupValueSerializer%2A> 이 형식에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a6beb-649">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupValueSerializer%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>