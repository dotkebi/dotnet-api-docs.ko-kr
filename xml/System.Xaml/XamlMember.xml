<Type Name="XamlMember" FullName="System.Xaml.XamlMember">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a5bf358cf5bbfc2549fa0d48319a913cdf514495" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56357734" /></Metadata><TypeSignature Language="C#" Value="public class XamlMember : IEquatable&lt;System.Xaml.XamlMember&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlMember extends System.Object implements class System.IEquatable`1&lt;class System.Xaml.XamlMember&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlMember" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlMember&#xA;Implements IEquatable(Of XamlMember)" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlMember : IEquatable&lt;System::Xaml::XamlMember ^&gt;" />
  <TypeSignature Language="F#" Value="type XamlMember = class&#xA;    interface IEquatable&lt;XamlMember&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Xaml.XamlMember&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="60161-101">XAML 형식의 멤버에 대해 XAML 형식 시스템 식별자를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-101">Provides the XAML type system identifier for members of XAML types.</span></span> <span data-ttu-id="60161-102">멤버 노드를 처리하는 동안 XAML 판독기 및 XAML 작성기가 사용하는 식별자(XAML 판독기가 <see cref="F:System.Xaml.XamlNodeType.StartMember" />에 위치한 경우)이며, 일반 XAML 형식 시스템 논리에도 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="60161-102">The identifier is used by XAML readers and XAML writers during processing of member nodes (when the XAML reader is positioned on a <see cref="F:System.Xaml.XamlNodeType.StartMember" />) and also for general XAML type system logic.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-103"><xref:System.Xaml.XamlMember> XAML 멤버에 대 한 정보를 반환 하는 데 세 가지 방법론을 사용할 수 있습니다: 표준 공용 언어 런타임 (CLR) 리플렉션; 호출 내부 참조만 리플렉션 기술을 Api를 사용 하 여 액세스에 최적화 된 비트 플래그입니다. 또는 가상 호출의 재정의 `Lookup*` 가능한에서 제공 하는 API <xref:System.Xaml.XamlMember> 하위 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-103"><xref:System.Xaml.XamlMember> can use three methodologies for returning information about a XAML member: standard common language runtime (CLR) reflection; a reference-only reflection technique calling internal APIs that use optimized bit flags; or calling into virtual overrides of the `Lookup*` API that is provided by possible <xref:System.Xaml.XamlMember> subclasses.</span></span> <span data-ttu-id="60161-104">대부분의.NET Framework XAML 서비스 Api 사용에 대 한 및 <xref:System.Xaml.XamlMember> API, 기본 XAML 스키마 컨텍스트를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-104">For most uses of .NET Framework XAML Services APIs and the <xref:System.Xaml.XamlMember> API, you use the default XAML schema context.</span></span> <span data-ttu-id="60161-105">.NET Framework XAML 서비스에 대 한 기본 XAML 스키마 컨텍스트는 CLR 형식 시스템에 대 한 백업을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-105">The default XAML schema context for .NET Framework XAML Services uses CLR backing for the type system.</span></span> <span data-ttu-id="60161-106">이 통해 XAML 판독기 및 XAML 작성기와 모든 형식 또는 정의 된 멤버 또는 사용할 수 있는 CLR 리플렉션 기술 작동 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-106">This enables the XAML readers and XAML writers to work with any type or member that is defined in, or otherwise available to, the CLR and its reflection techniques.</span></span>  
  
## <a name="lookup-apis-and-xamlmember-derived-classes"></a><span data-ttu-id="60161-107">조회 Api 및 XamlMember 파생 클래스</span><span class="sxs-lookup"><span data-stu-id="60161-107">Lookup\* APIs and XamlMember Derived Classes</span></span>  
 <span data-ttu-id="60161-108"><xref:System.Xaml.XamlMember> 여러 정의 클래스를 파생 하는 가상 멤버를 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-108"><xref:System.Xaml.XamlMember> defines several virtual members that derived classes might override.</span></span> <span data-ttu-id="60161-109">이러한 멤버에 항상 문자열로 시작 하는 이름이 `Lookup`합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-109">These members have names that always start with the string `Lookup`.</span></span> <span data-ttu-id="60161-110">API의 나머지 부분에서는 다음 참조는 가상 메서드의 영향을 주는 속성의 이름을 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-110">The remainder of the API name then references the property that the virtual method influences.</span></span> <span data-ttu-id="60161-111">예를 들어, 한 <xref:System.Xaml.XamlMember> 파생된 클래스에서 재정의 될 수 있습니다 <xref:System.Xaml.XamlMember.LookupTargetType%2A> 어떤 기본 정의 속성에 영향을 줍니다 <xref:System.Xaml.XamlMember.TargetType%2A> 파생된 클래스에서 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-111">For example, a <xref:System.Xaml.XamlMember> derived class might override <xref:System.Xaml.XamlMember.LookupTargetType%2A> to influence what the base-defined property <xref:System.Xaml.XamlMember.TargetType%2A> returns in a derived class.</span></span> <span data-ttu-id="60161-112">이러한 속성에 대 한 반환 값을 예측할 수 있습니다 <xref:System.Xaml.XamlMember> 파생 클래스의 이름을 관련 설명서를 참조 하 여 기존 또는 `Lookup*` 메서드.</span><span class="sxs-lookup"><span data-stu-id="60161-112">You can predict return values for such properties in <xref:System.Xaml.XamlMember> or existing derived classes by reading the documentation for the relevant `Lookup*` methods.</span></span>  
  
 <span data-ttu-id="60161-113">용도 `Lookup*` 메서드를 통합 하는 XAML 형식 시스템 확장 기술을 제공 하는 것은 <xref:System.Xaml.XamlMember> 기본 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-113">The purpose of the `Lookup*` methods is to provide a XAML type system extension technique that incorporates the <xref:System.Xaml.XamlMember> base class.</span></span> <span data-ttu-id="60161-114">파생 시켜 <xref:System.Xaml.XamlMember> 재정의 `Lookup` 가상 멤버를 정의할 수 있습니다 XAML 스키마에 대 한 XAML 멤버의 개념 XAML 형식 시스템에서 지원 형식 시스템의 기술 세부 정보에 국한 되지 않고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-114">By deriving from <xref:System.Xaml.XamlMember> and overriding the `Lookup` virtual members, you can define the concept of a XAML member for a XAML schema in a XAML type system without being tied to the specifics of a backing type system or technology.</span></span> <span data-ttu-id="60161-115">또한이 체계를 제공 된 XAML 스키마 컨텍스트를 사용 하 고 원하는 결과 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-115">You can also use a provided XAML schema context under this scheme and still return the results you want.</span></span>  
  
 <span data-ttu-id="60161-116">예를 들어 고려해 야 합니다 <xref:System.Xaml.XamlMember> 속성 <xref:System.Xaml.XamlMember.IsWritePublic%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-116">As an example, consider the <xref:System.Xaml.XamlMember> property <xref:System.Xaml.XamlMember.IsWritePublic%2A>.</span></span> <span data-ttu-id="60161-117">이 속성에 사용 하는 등 작업 호출자에 게 알립니다는 <xref:System.Xaml.XamlWriter> serialization 대상 개체에서이 멤버에 대 한 값을 쓸 수에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-117">This property informs callers that operations such as using a <xref:System.Xaml.XamlWriter> for serialization can write a value for this member on a target object.</span></span> <span data-ttu-id="60161-118">기본 구현에서 지원 CLR에 대 한 리플렉션 기술을 사용 하 여 쓰기 가능한 멤버 인지 확인 하는 프로세스가 이루어집니다 <xref:System.Type> 및 해당 멤버 (의 <xref:System.Reflection.MemberInfo>).</span><span class="sxs-lookup"><span data-stu-id="60161-118">In the default implementation, the determination of whether the member is writable is made by using reflection techniques against the backing CLR <xref:System.Type> and its members (the <xref:System.Reflection.MemberInfo>).</span></span> <span data-ttu-id="60161-119">따라서 기본적으로 XAML 형식 시스템 CLR 형식 시스템에 종속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="60161-119">Therefore, by default, the XAML type system depends on the CLR type system.</span></span> <span data-ttu-id="60161-120">그러나의 XAML 형식 시스템 보고를 위해이 종속성을 제거할 수 있습니다 <xref:System.Xaml.XamlMember.IsWritePublic%2A> API를 재정의 하 여 <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-120">However, you can remove this dependency for your XAML type system reporting of <xref:System.Xaml.XamlMember.IsWritePublic%2A> by overriding the API <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>.</span></span> <span data-ttu-id="60161-121">재정의 내 기술, XAML 멤버의 쓰기 가능 인지 고정된 XAML 어휘, 또는 다양 한 다른 전략을 결정 하는 데에 최적화 된 마스터 조회 테이블에 관련 된 메타 데이터와 같은 다른 판단을 사용할 수 있습니다 프로그램 XAML 어휘입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-121">Within your override, you can use other determinations, such as metadata that is specific to your technology, a master lookup table that is optimized for a fixed XAML vocabulary, or a variety of other strategies for determining whether a XAML member is writable in your XAML vocabulary.</span></span>  
  
## <a name="constructing-xamlmember-without-xaml-schema-context"></a><span data-ttu-id="60161-122">XAML 스키마 컨텍스트 없이 XamlMember를 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-122">Constructing XamlMember Without XAML Schema Context</span></span>  
 <span data-ttu-id="60161-123">생성자의 대부분 <xref:System.Xaml.XamlMember> 필요를 <xref:System.Xaml.XamlSchemaContext> 초기화의 일부로.</span><span class="sxs-lookup"><span data-stu-id="60161-123">Most constructors of <xref:System.Xaml.XamlMember> require a <xref:System.Xaml.XamlSchemaContext> as part of their initialization.</span></span> <span data-ttu-id="60161-124">합니다 <xref:System.Xaml.XamlSchemaContext> 필요한 많은 내부 이기도 <xref:System.Xaml.XamlSchemaContext> 지원 형식에서 전달 되는 정보를 가져오는 등의 작업을 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-124">The <xref:System.Xaml.XamlSchemaContext> is also necessary for many internal <xref:System.Xaml.XamlSchemaContext> operations, such as obtaining information that is being forwarded from the backing type.</span></span> <span data-ttu-id="60161-125">사용 중인 경우는 <xref:System.Xaml.XamlMember> API, 일반적으로 해야를 <xref:System.Xaml.XamlSchemaContext> 에서 사용할 수 있는 주변 생성 같은 <xref:System.Xaml.XamlWriter>.</span><span class="sxs-lookup"><span data-stu-id="60161-125">When you are working with the <xref:System.Xaml.XamlMember> API, you typically have a <xref:System.Xaml.XamlSchemaContext> that is available from a surrounding construct such as a <xref:System.Xaml.XamlWriter>.</span></span> <span data-ttu-id="60161-126">이 경우에 전달할 수 있습니다는 <xref:System.Xaml.XamlSchemaContext> 통해 XAML 스키마 컨텍스트를 필요로 하는 모든 XAML 형식 시스템 호출에 대 한 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-126">In this case, you can pass the <xref:System.Xaml.XamlSchemaContext> reference through to all XAML type system calls that require a XAML schema context.</span></span>  
  
 <span data-ttu-id="60161-127">하나의 특정 생성자 <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>, 필요 하지 않습니다는 <xref:System.Xaml.XamlSchemaContext>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-127">One specific constructor, <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>, does not require a <xref:System.Xaml.XamlSchemaContext>.</span></span> <span data-ttu-id="60161-128">그러나를 <xref:System.Xaml.XamlMember> 사용 하 여 생성 된 합니다 <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29> 서명을 반환 `true` 에 대 한 <xref:System.Xaml.XamlMember.IsUnknown%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-128">However, a <xref:System.Xaml.XamlMember> that is constructed with the <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29> signature returns `true` for <xref:System.Xaml.XamlMember.IsUnknown%2A>.</span></span>  
  
 <span data-ttu-id="60161-129">포함 하는 로드 경로 대 한 <xref:System.Xaml.XamlObjectWriter>, 개체 그래프에는 이러한 멤버를 쓸 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-129">For a load path that involves <xref:System.Xaml.XamlObjectWriter>, such a member cannot be written into an object graph.</span></span> <span data-ttu-id="60161-130">.NET Framework XAML 서비스 구현에서 사용 하는 <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType> throw 호출을 <xref:System.Xaml.XamlObjectWriterException> 때 관련 <xref:System.Xaml.XamlMember> 보고서 `true` 에 대 한 <xref:System.Xaml.XamlMember.IsUnknown%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-130">Using the .NET Framework XAML services implementation, the <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType> call throws a <xref:System.Xaml.XamlObjectWriterException> when the relevant <xref:System.Xaml.XamlMember> reports `true` for <xref:System.Xaml.XamlMember.IsUnknown%2A>.</span></span>  
  
 <span data-ttu-id="60161-131">구성 하지 않아야는 <xref:System.Xaml.XamlMember> 의 값이 있는 `true` 에 대 한 <xref:System.Xaml.XamlMember.IsUnknown%2A> 구현에서 예외를 처리할 수 있습니다 <xref:System.Xaml.XamlObjectWriter>를 조정 하는 다른 방법을 만들어야 합니다 <xref:System.Xaml.XamlObjectWriter> 동작 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-131">You should not construct a <xref:System.Xaml.XamlMember> that has a value of `true` for <xref:System.Xaml.XamlMember.IsUnknown%2A> unless your implementation can handle the exceptions from <xref:System.Xaml.XamlObjectWriter>, or you have other ways to adjust the <xref:System.Xaml.XamlObjectWriter> behavior.</span></span> <span data-ttu-id="60161-132">예를 들어, 다음 중 하나 이상의 구현의 true 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-132">For example, one or more of the  following might be true of your implementation:</span></span>  
  
-   <span data-ttu-id="60161-133">XAML 스키마 컨텍스트는 나중에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-133">The XAML schema context is available later.</span></span>  
  
-   <span data-ttu-id="60161-134">멤버 호출자 패턴을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-134">You use a member invoker pattern.</span></span>  
  
-   <span data-ttu-id="60161-135">의도적으로 재정의 <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType> 사용자 지정 XAML 작성기에서.</span><span class="sxs-lookup"><span data-stu-id="60161-135">You deliberately override <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType> in a custom XAML writer.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlType" />
    <altmember cref="T:System.Xaml.XamlDirective" />
    <altmember cref="T:System.Xaml.XamlObjectWriter" />
    <related type="Article" href="https://msdn.microsoft.com/library/7c11abec-1075-474c-9d9b-778e5dab21c3"><span data-ttu-id="60161-136">XAML 노드 스트림 구조 및 개념 이해</span><span class="sxs-lookup"><span data-stu-id="60161-136">Understanding XAML Node Stream Structures and Concepts</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="60161-137"><see cref="T:System.Xaml.XamlMember" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-137">Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (System.Reflection.EventInfo eventInfo, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.EventInfo eventInfo, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::Reflection::EventInfo ^ eventInfo, System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlMember : System.Reflection.EventInfo * System.Xaml.XamlSchemaContext -&gt; System.Xaml.XamlMember" Usage="new System.Xaml.XamlMember (eventInfo, schemaContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="eventInfo" Type="System.Reflection.EventInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="eventInfo"><span data-ttu-id="60161-138">이벤트 멤버를 나타내는 CLR 형식 시스템 <see cref="T:System.Reflection.EventInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-138">The CLR type system <see cref="T:System.Reflection.EventInfo" /> that represents the event member.</span></span></param>
        <param name="schemaContext"><span data-ttu-id="60161-139">멤버를 정규화하는 <see cref="T:System.Xaml.XamlSchemaContext" /> 컨텍스트입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-139">The <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</span></span></param>
        <summary><span data-ttu-id="60161-140">CLR 형식 시스템 <see cref="T:System.Xaml.XamlMember" /> 및 <see cref="T:System.Reflection.EventInfo" />를 사용하여 <see cref="T:System.Xaml.XamlSchemaContext" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-140">Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class using CLR type system <see cref="T:System.Reflection.EventInfo" /> and a <see cref="T:System.Xaml.XamlSchemaContext" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-141">멤버가 이벤트 (이벤트 처리기 연결 지점 속성)을 나타내는 경우이 생성자를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-141">Use this constructor if the member represents an event (event handler connection-point property).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (System.Reflection.PropertyInfo propertyInfo, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.PropertyInfo propertyInfo, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::Reflection::PropertyInfo ^ propertyInfo, System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlMember : System.Reflection.PropertyInfo * System.Xaml.XamlSchemaContext -&gt; System.Xaml.XamlMember" Usage="new System.Xaml.XamlMember (propertyInfo, schemaContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="propertyInfo" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="propertyInfo"><span data-ttu-id="60161-142">속성 멤버를 나타내는 CLR 형식 시스템 <see cref="T:System.Reflection.PropertyInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-142">The CLR type system <see cref="T:System.Reflection.PropertyInfo" /> that represents the property member.</span></span></param>
        <param name="schemaContext"><span data-ttu-id="60161-143">멤버를 정규화하는 <see cref="T:System.Xaml.XamlSchemaContext" /> 컨텍스트입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-143">The <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</span></span></param>
        <summary><span data-ttu-id="60161-144">CLR 형식 시스템 <see cref="T:System.Xaml.XamlMember" /> 및 <see cref="T:System.Reflection.PropertyInfo" />를 사용하여 <see cref="T:System.Xaml.XamlSchemaContext" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-144">Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class using CLR type system <see cref="T:System.Reflection.PropertyInfo" /> and a <see cref="T:System.Xaml.XamlSchemaContext" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-145">멤버 속성을 나타냅니다 (그리고 특히 않은 경우는 이벤트 처리기 연결) 하는 경우이 생성자를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-145">Use this constructor if the member represents a property (and specifically is not an event handler connection).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (System.Reflection.EventInfo eventInfo, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.EventInfo eventInfo, class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.Schema.XamlMemberInvoker invoker) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::Reflection::EventInfo ^ eventInfo, System::Xaml::XamlSchemaContext ^ schemaContext, System::Xaml::Schema::XamlMemberInvoker ^ invoker);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlMember : System.Reflection.EventInfo * System.Xaml.XamlSchemaContext * System.Xaml.Schema.XamlMemberInvoker -&gt; System.Xaml.XamlMember" Usage="new System.Xaml.XamlMember (eventInfo, schemaContext, invoker)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="eventInfo" Type="System.Reflection.EventInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="invoker" Type="System.Xaml.Schema.XamlMemberInvoker" />
      </Parameters>
      <Docs>
        <param name="eventInfo"><span data-ttu-id="60161-146">이벤트 멤버를 나타내는 CLR 형식 시스템 <see cref="T:System.Reflection.EventInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-146">The CLR type system <see cref="T:System.Reflection.EventInfo" /> that represents the event member.</span></span></param>
        <param name="schemaContext"><span data-ttu-id="60161-147">멤버를 정규화하는 <see cref="T:System.Xaml.XamlSchemaContext" /> 컨텍스트입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-147">The <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</span></span></param>
        <param name="invoker"><span data-ttu-id="60161-148"><see cref="T:System.Xaml.Schema.XamlMemberInvoker" />에 대한 런타임 리플렉션 호출을 처리하는 <see cref="T:System.Xaml.XamlMember" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-148">The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> implementation that handles run-time reflection calls against the <see cref="T:System.Xaml.XamlMember" />.</span></span></param>
        <summary><span data-ttu-id="60161-149">CLR 형식 시스템 <see cref="T:System.Xaml.XamlMember" /> 및 <see cref="T:System.Reflection.EventInfo" />를 사용하여 <see cref="T:System.Xaml.XamlSchemaContext" /> 클래스의 새 인스턴스를 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 정보와 함께 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-149">Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class using CLR type system <see cref="T:System.Reflection.EventInfo" /> and a <see cref="T:System.Xaml.XamlSchemaContext" />, including <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-150">멤버가 이벤트 (또는 이벤트 처리기 연결 지점 속성)을 나타내는 경우이 생성자를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-150">Use this constructor if the member represents an event (or an event handler connection-point property).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (System.Reflection.PropertyInfo propertyInfo, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.PropertyInfo propertyInfo, class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.Schema.XamlMemberInvoker invoker) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::Reflection::PropertyInfo ^ propertyInfo, System::Xaml::XamlSchemaContext ^ schemaContext, System::Xaml::Schema::XamlMemberInvoker ^ invoker);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlMember : System.Reflection.PropertyInfo * System.Xaml.XamlSchemaContext * System.Xaml.Schema.XamlMemberInvoker -&gt; System.Xaml.XamlMember" Usage="new System.Xaml.XamlMember (propertyInfo, schemaContext, invoker)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyInfo" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="invoker" Type="System.Xaml.Schema.XamlMemberInvoker" />
      </Parameters>
      <Docs>
        <param name="propertyInfo"><span data-ttu-id="60161-151">속성 멤버를 나타내는 CLR 형식 시스템 <see cref="T:System.Reflection.PropertyInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-151">The CLR type system <see cref="T:System.Reflection.PropertyInfo" /> that represents the property member.</span></span></param>
        <param name="schemaContext"><span data-ttu-id="60161-152">멤버를 정규화하는 <see cref="T:System.Xaml.XamlSchemaContext" /> 컨텍스트입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-152">The <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</span></span></param>
        <param name="invoker"><span data-ttu-id="60161-153"><see cref="T:System.Xaml.Schema.XamlMemberInvoker" />에 대한 런타임 호출을 처리하는 <see cref="T:System.Xaml.XamlMember" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-153">The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> implementation that handles run-time invocation calls against the <see cref="T:System.Xaml.XamlMember" />.</span></span></param>
        <summary><span data-ttu-id="60161-154">리플렉션 <see cref="T:System.Xaml.XamlMember" /> 및 <see cref="T:System.Reflection.PropertyInfo" />를 사용하여 <see cref="T:System.Xaml.XamlSchemaContext" /> 클래스의 새 인스턴스를 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 정보와 함께 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-154">Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class using reflection <see cref="T:System.Reflection.PropertyInfo" /> and a <see cref="T:System.Xaml.XamlSchemaContext" />, including <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-155">멤버 속성을 나타내는 경우에 한 대 한 이벤트 처리기 연결 되지 않은 경우이 생성자를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-155">Use this constructor only if the member represents a property and if it is not an event handler connection.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (string attachableEventName, System.Reflection.MethodInfo adder, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string attachableEventName, class System.Reflection.MethodInfo adder, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (attachableEventName As String, adder As MethodInfo, schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::String ^ attachableEventName, System::Reflection::MethodInfo ^ adder, System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlMember : string * System.Reflection.MethodInfo * System.Xaml.XamlSchemaContext -&gt; System.Xaml.XamlMember" Usage="new System.Xaml.XamlMember (attachableEventName, adder, schemaContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="attachableEventName" Type="System.String" />
        <Parameter Name="adder" Type="System.Reflection.MethodInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="attachableEventName"><span data-ttu-id="60161-156">연결 가능한 이벤트의 문자열 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-156">The string name of the attachable event.</span></span></param>
        <param name="adder"><span data-ttu-id="60161-157">연결 가능한 멤버의 지원을 구현하는 처리기 <see langword="Add" /> 메서드에 대한 CLR 형식 시스템 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-157">The CLR type system <see cref="T:System.Reflection.MethodInfo" /> for the handler <see langword="Add" /> method of the attachable member's backing implementation.</span></span></param>
        <param name="schemaContext"><span data-ttu-id="60161-158">멤버를 정규화하는 <see cref="T:System.Xaml.XamlSchemaContext" /> 컨텍스트입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-158">The <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</span></span></param>
        <summary><span data-ttu-id="60161-159">연결 가능한 이벤트를 나타내는 <see cref="T:System.Xaml.XamlMember" />에 대해 <see cref="T:System.Xaml.XamlMember" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-159">Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class for a <see cref="T:System.Xaml.XamlMember" /> that represents an attachable event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-160">멤버가 연결 가능한 이벤트 멤버를 나타내는 경우이 생성자를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-160">Use this constructor if the member represents an attachable event member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (string name, System.Xaml.XamlType declaringType, bool isAttachable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Xaml.XamlType declaringType, bool isAttachable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, declaringType As XamlType, isAttachable As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::String ^ name, System::Xaml::XamlType ^ declaringType, bool isAttachable);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlMember : string * System.Xaml.XamlType * bool -&gt; System.Xaml.XamlMember" Usage="new System.Xaml.XamlMember (name, declaringType, isAttachable)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="declaringType" Type="System.Xaml.XamlType" />
        <Parameter Name="isAttachable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="60161-161">멤버의 문자열 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-161">The string name of the member.</span></span></param>
        <param name="declaringType"><span data-ttu-id="60161-162">선언 형식에 대한 <see cref="T:System.Xaml.XamlType" /> 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-162">The <see cref="T:System.Xaml.XamlType" /> information for the declaring type.</span></span></param>
        <param name="isAttachable"><span data-ttu-id="60161-163">멤버가 연결 가능하다는 것을 나타내려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-163"><see langword="true" /> to indicate that the member is attachable; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="60161-164">문자열 이름을 사용하고 <see cref="T:System.Xaml.XamlMember" /> 정보를 선언하여 <see cref="T:System.Xaml.XamlType" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-164">Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class using a string name and declaring <see cref="T:System.Xaml.XamlType" /> information.</span></span> <span data-ttu-id="60161-165">이 서명을 사용하여 생성된 <see cref="T:System.Xaml.XamlMember" />에는 중요한 제한이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-165">A <see cref="T:System.Xaml.XamlMember" /> that is constructed with this signature has significant limitations.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-166">A <xref:System.Xaml.XamlMember> 사용 하 여 생성 된 합니다 <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29> 서명을 반환 `true` 에 대 한 <xref:System.Xaml.XamlMember.IsUnknown%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-166">A <xref:System.Xaml.XamlMember> that is constructed with the <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29> signature returns `true` for <xref:System.Xaml.XamlMember.IsUnknown%2A>.</span></span>  
  
 <span data-ttu-id="60161-167">포함 하는 로드 경로 대 한 <xref:System.Xaml.XamlObjectWriter>, 개체 그래프에는 이러한 멤버를 쓸 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-167">For a load path that involves <xref:System.Xaml.XamlObjectWriter>, such a member cannot be written into an object graph.</span></span> <span data-ttu-id="60161-168">.NET Framework XAML 서비스 구현에 사용 하는 <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType> throw 호출을 <xref:System.Xaml.XamlObjectWriterException> 때 관련 <xref:System.Xaml.XamlMember> 보고서 `true` 에 대 한 <xref:System.Xaml.XamlMember.IsUnknown%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-168">Using the .NET Framework XAML Services implementation, the <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType> call throws a <xref:System.Xaml.XamlObjectWriterException> when the relevant <xref:System.Xaml.XamlMember> reports `true` for <xref:System.Xaml.XamlMember.IsUnknown%2A>.</span></span>  
  
 <span data-ttu-id="60161-169">구성 하지 않아야는 <xref:System.Xaml.XamlMember> 사용 하 여 <xref:System.Xaml.XamlMember.IsUnknown%2A> `true` 구현에서 예외를 처리할 수 있습니다 <xref:System.Xaml.XamlObjectWriter>를 조정 하는 다른 방법을 만들어야 합니다 <xref:System.Xaml.XamlObjectWriter> 동작 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-169">You should not construct a <xref:System.Xaml.XamlMember> with <xref:System.Xaml.XamlMember.IsUnknown%2A>`true` unless your implementation can handle the exceptions from <xref:System.Xaml.XamlObjectWriter>, or you have other ways to adjust the <xref:System.Xaml.XamlObjectWriter> behavior.</span></span> <span data-ttu-id="60161-170">예를 들어, 다음 중 하나 이상의 구현의 true 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-170">For example, one or more of the following might be true of your implementation:</span></span>  
  
-   <span data-ttu-id="60161-171">XAML 스키마 컨텍스트는 나중에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-171">The XAML schema context is available later.</span></span>  
  
-   <span data-ttu-id="60161-172">멤버 호출자 패턴을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-172">You use a member invoker pattern.</span></span>  
  
-   <span data-ttu-id="60161-173">의도적으로 재정의 <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType> 사용자 지정 XAML 작성기에서.</span><span class="sxs-lookup"><span data-stu-id="60161-173">You deliberately override <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType> in a custom XAML writer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="60161-174"><paramref name="name" /> 또는 <paramref name="declaringType" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="60161-174"><paramref name="name" /> or <paramref name="declaringType" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (string attachablePropertyName, System.Reflection.MethodInfo getter, System.Reflection.MethodInfo setter, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string attachablePropertyName, class System.Reflection.MethodInfo getter, class System.Reflection.MethodInfo setter, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (attachablePropertyName As String, getter As MethodInfo, setter As MethodInfo, schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::String ^ attachablePropertyName, System::Reflection::MethodInfo ^ getter, System::Reflection::MethodInfo ^ setter, System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlMember : string * System.Reflection.MethodInfo * System.Reflection.MethodInfo * System.Xaml.XamlSchemaContext -&gt; System.Xaml.XamlMember" Usage="new System.Xaml.XamlMember (attachablePropertyName, getter, setter, schemaContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="attachablePropertyName" Type="System.String" />
        <Parameter Name="getter" Type="System.Reflection.MethodInfo" />
        <Parameter Name="setter" Type="System.Reflection.MethodInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="attachablePropertyName"><span data-ttu-id="60161-175">연결 가능한 속성의 문자열 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-175">The string name of the attachable property.</span></span></param>
        <param name="getter"><span data-ttu-id="60161-176">연결 가능한 멤버의 지원을 구현하는 <see langword="get" /> 접근자에 대한 CLR 형식 시스템 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-176">The CLR type system <see cref="T:System.Reflection.MethodInfo" /> for the <see langword="get" /> accessor of the attachable member's backing implementation.</span></span></param>
        <param name="setter"><span data-ttu-id="60161-177">연결 가능한 멤버의 지원을 구현하는 <see langword="set" /> 접근자에 대한 CLR 형식 시스템 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-177">The CLR type system <see cref="T:System.Reflection.MethodInfo" /> for the <see langword="set" /> accessor of the attachable member's backing implementation.</span></span></param>
        <param name="schemaContext"><span data-ttu-id="60161-178">멤버를 정규화하는 <see cref="T:System.Xaml.XamlSchemaContext" /> 컨텍스트입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-178">The <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</span></span></param>
        <summary><span data-ttu-id="60161-179">연결 가능한 속성을 나타내는 <see cref="T:System.Xaml.XamlMember" />에 대해 <see cref="T:System.Xaml.XamlMember" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-179">Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class for a <see cref="T:System.Xaml.XamlMember" /> that represents an attachable property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-180">멤버가 연결 가능한 속성을 나타내는 경우이 생성자를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-180">Use this constructor if the member represents an attachable property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (string attachableEventName, System.Reflection.MethodInfo adder, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string attachableEventName, class System.Reflection.MethodInfo adder, class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.Schema.XamlMemberInvoker invoker) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (attachableEventName As String, adder As MethodInfo, schemaContext As XamlSchemaContext, invoker As XamlMemberInvoker)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::String ^ attachableEventName, System::Reflection::MethodInfo ^ adder, System::Xaml::XamlSchemaContext ^ schemaContext, System::Xaml::Schema::XamlMemberInvoker ^ invoker);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlMember : string * System.Reflection.MethodInfo * System.Xaml.XamlSchemaContext * System.Xaml.Schema.XamlMemberInvoker -&gt; System.Xaml.XamlMember" Usage="new System.Xaml.XamlMember (attachableEventName, adder, schemaContext, invoker)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="attachableEventName" Type="System.String" />
        <Parameter Name="adder" Type="System.Reflection.MethodInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="invoker" Type="System.Xaml.Schema.XamlMemberInvoker" />
      </Parameters>
      <Docs>
        <param name="attachableEventName"><span data-ttu-id="60161-181">연결 가능한 이벤트의 문자열 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-181">The string name of the attachable event.</span></span></param>
        <param name="adder"><span data-ttu-id="60161-182">연결 가능한 멤버의 지원을 구현하는 처리기 <see langword="Add" /> 메서드에 대한 CLR 형식 시스템 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-182">The CLR type system <see cref="T:System.Reflection.MethodInfo" /> for the handler <see langword="Add" /> method of the attachable member's backing implementation.</span></span></param>
        <param name="schemaContext"><span data-ttu-id="60161-183">멤버를 정규화하는 <see cref="T:System.Xaml.XamlSchemaContext" /> 컨텍스트입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-183">The <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</span></span></param>
        <param name="invoker"><span data-ttu-id="60161-184"><see cref="T:System.Xaml.Schema.XamlMemberInvoker" />에 대한 런타임 호출을 처리하는 <see cref="T:System.Xaml.XamlMember" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-184">The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> implementation that handles run-time invocation calls against the <see cref="T:System.Xaml.XamlMember" />.</span></span></param>
        <summary><span data-ttu-id="60161-185">연결 가능한 이벤트를 나타내는 <see cref="T:System.Xaml.XamlMember" />에 대해 <see cref="T:System.Xaml.XamlMember" /> 클래스의 새 인스턴스를 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 정보와 함께 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-185">Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class for a <see cref="T:System.Xaml.XamlMember" /> that represents an attachable event, including <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-186">멤버가 연결 가능한 이벤트 멤버를 나타내는 경우이 생성자를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-186">Use this constructor if the member represents an attachable event member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (string attachablePropertyName, System.Reflection.MethodInfo getter, System.Reflection.MethodInfo setter, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string attachablePropertyName, class System.Reflection.MethodInfo getter, class System.Reflection.MethodInfo setter, class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.Schema.XamlMemberInvoker invoker) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (attachablePropertyName As String, getter As MethodInfo, setter As MethodInfo, schemaContext As XamlSchemaContext, invoker As XamlMemberInvoker)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::String ^ attachablePropertyName, System::Reflection::MethodInfo ^ getter, System::Reflection::MethodInfo ^ setter, System::Xaml::XamlSchemaContext ^ schemaContext, System::Xaml::Schema::XamlMemberInvoker ^ invoker);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlMember : string * System.Reflection.MethodInfo * System.Reflection.MethodInfo * System.Xaml.XamlSchemaContext * System.Xaml.Schema.XamlMemberInvoker -&gt; System.Xaml.XamlMember" Usage="new System.Xaml.XamlMember (attachablePropertyName, getter, setter, schemaContext, invoker)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="attachablePropertyName" Type="System.String" />
        <Parameter Name="getter" Type="System.Reflection.MethodInfo" />
        <Parameter Name="setter" Type="System.Reflection.MethodInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="invoker" Type="System.Xaml.Schema.XamlMemberInvoker" />
      </Parameters>
      <Docs>
        <param name="attachablePropertyName"><span data-ttu-id="60161-187">연결 가능한 속성의 문자열 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-187">The string name of the attachable property.</span></span></param>
        <param name="getter"><span data-ttu-id="60161-188">연결 가능한 멤버의 지원을 구현하는 <see langword="get" /> 접근자에 대한 CLR 형식 시스템 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-188">The CLR type system <see cref="T:System.Reflection.MethodInfo" /> for the <see langword="get" /> accessor of the attachable member's backing implementation.</span></span></param>
        <param name="setter"><span data-ttu-id="60161-189">연결 가능한 멤버의 지원을 구현하는 <see langword="set" /> 접근자에 대한 CLR 형식 시스템 <see cref="T:System.Reflection.MethodInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-189">The CLR type system <see cref="T:System.Reflection.MethodInfo" /> for the <see langword="set" /> accessor of the attachable member's backing implementation.</span></span></param>
        <param name="schemaContext"><span data-ttu-id="60161-190">멤버를 정규화하는 <see cref="T:System.Xaml.XamlSchemaContext" /> 컨텍스트입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-190">The <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</span></span></param>
        <param name="invoker"><span data-ttu-id="60161-191"><see cref="T:System.Xaml.Schema.XamlMemberInvoker" />에 대한 런타임 호출을 처리하는 <see cref="T:System.Xaml.XamlMember" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-191">The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> implementation that handles run-time invocation calls against the <see cref="T:System.Xaml.XamlMember" />.</span></span></param>
        <summary><span data-ttu-id="60161-192">연결 가능한 속성을 나타내는 <see cref="T:System.Xaml.XamlMember" />에 대해 <see cref="T:System.Xaml.XamlMember" /> 클래스의 새 인스턴스를 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 정보와 함께 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-192">Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class for a <see cref="T:System.Xaml.XamlMember" /> that represents an attachable property, including <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-193">멤버가 연결 가능한 속성 멤버를 나타내는 경우이 생성자를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-193">Use this constructor if the member represents an attachable property member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeclaringType As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ DeclaringType { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : System.Xaml.XamlType" Usage="System.Xaml.XamlMember.DeclaringType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60161-194">이 <see cref="T:System.Xaml.XamlType" />와 연관된 멤버를 선언하는 형식의 <see cref="T:System.Xaml.XamlMember" />을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="60161-194">Gets the <see cref="T:System.Xaml.XamlType" /> for the type that declares the member that is associated with this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <value><span data-ttu-id="60161-195">이 <see cref="T:System.Xaml.XamlType" />와 연관된 멤버를 선언하는 형식의 <see cref="T:System.Xaml.XamlMember" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-195">The <see cref="T:System.Xaml.XamlType" /> for the type that declares the member that is associated with this <see cref="T:System.Xaml.XamlMember" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-196">이 값은 일반적으로 초기화 하는 동안 설정 되며 일반적으로 없습니다 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-196">This value is typically set during initialization and is usually not `null`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="60161-197"><xref:System.Xaml.XamlMember.DeclaringType%2A> 정보로 전달할 수에서 생성자 초기화 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-197"><xref:System.Xaml.XamlMember.DeclaringType%2A> information can be passed in by constructors for initialization.</span></span> <span data-ttu-id="60161-198">기본 생성자에 대 한 초기화를 직접 호출 하 여 <xref:System.Xaml.XamlMember> 파생된 클래스가 기본 클래스에서 만든 값 확인 생략할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-198">By calling directly into base constructors, initialization for <xref:System.Xaml.XamlMember> derived classes can omit some of the value-checks that are made in the base class.</span></span> <span data-ttu-id="60161-199">따라서이 더 이상 정렬 되도록 예상 되는 방식으로 기본 CLR 선언의 형식 시스템의 정보를 사용 하 여 파생 된 초기화 XAML 멤버의 보고 형식 멤버 관계 정보를 변경할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-199">Therefore, the derived initialization can change the reported type-member relationship information of a XAML member so that it no longer aligns in an expected way with the type system information of its underlying CLR declaration.</span></span> <span data-ttu-id="60161-200">형식 정보를 선언 하는 보안에 중요 한 모든 검사에 대 한 기본 CLR 형식을 대신 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-200">For any security-critical checks of declaring type information, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeferringLoader">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt; DeferringLoader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Xaml.XamlDeferringLoader&gt; DeferringLoader" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.DeferringLoader" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeferringLoader As XamlValueConverter(Of XamlDeferringLoader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlValueConverter&lt;System::Xaml::XamlDeferringLoader ^&gt; ^ DeferringLoader { System::Xaml::Schema::XamlValueConverter&lt;System::Xaml::XamlDeferringLoader ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeferringLoader : System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;" Usage="System.Xaml.XamlMember.DeferringLoader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60161-201">XAML 선언된 개체의 지연된 로드에 사용되는 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="60161-201">Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object, which is used for deferred loading of XAML declared objects.</span></span></summary>
        <value><span data-ttu-id="60161-202">제네릭에 대한 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 제약 조건이 포함된 <see cref="T:System.Xaml.XamlDeferringLoader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-202">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Xaml.XamlDeferringLoader" /> constraint on the generic.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-203">호출 <xref:System.Xaml.XamlMember.DeferringLoader%2A> 호출 <xref:System.Xaml.XamlMember.LookupDeferringLoader%2A> 또는 메서드의 특정 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-203">Calling <xref:System.Xaml.XamlMember.DeferringLoader%2A> invokes <xref:System.Xaml.XamlMember.LookupDeferringLoader%2A> or a specific override of that method.</span></span> <span data-ttu-id="60161-204">이 문제를 초기 내부 리플렉션 논리가 정보를 아직 설정 하지 않은 경우에 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-204">This behavior occurs in cases where the initial internal reflection logic has not already set the information.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DependsOn">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Xaml.XamlMember&gt; DependsOn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlMember&gt; DependsOn" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.DependsOn" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependsOn As IList(Of XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Xaml::XamlMember ^&gt; ^ DependsOn { System::Collections::Generic::IList&lt;System::Xaml::XamlMember ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependsOn : System.Collections.Generic.IList&lt;System.Xaml.XamlMember&gt;" Usage="System.Xaml.XamlMember.DependsOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60161-205"><see cref="T:System.Xaml.XamlMember" /> 개체의 목록을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="60161-205">Gets a list of <see cref="T:System.Xaml.XamlMember" /> objects.</span></span> <span data-ttu-id="60161-206">초기화 순서에 대한 종속성 관계가 이 <see cref="T:System.Xaml.XamlMember" />를 기준으로 존재하는 경우 해당 멤버를 보고합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-206">These report the members where dependency relationships for initialization order exist relative to this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <value><span data-ttu-id="60161-207"><see cref="T:System.Xaml.XamlMember" /> 개체의 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-207">A list of <see cref="T:System.Xaml.XamlMember" /> objects.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-208">호출 <xref:System.Xaml.XamlMember.DependsOn%2A> 호출 <xref:System.Xaml.XamlMember.LookupDependsOn%2A> 또는 메서드의 특정 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-208">Calling <xref:System.Xaml.XamlMember.DependsOn%2A> invokes <xref:System.Xaml.XamlMember.LookupDependsOn%2A> or a specific override of that method.</span></span> <span data-ttu-id="60161-209">이 문제를 초기 내부 리플렉션 논리가 정보를 아직 설정 하지 않은 경우에 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-209">This behavior occurs in cases where the initial internal reflection logic has not already set the information.</span></span>  
  
 <span data-ttu-id="60161-210">`DependsOn` 패턴을 의도적으로 XAML 일반적으로 일치 하지 않는 개체 모델 사례에 적용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-210">The `DependsOn` pattern can be applied to object model cases that deliberately contradict a general XAML rule.</span></span> <span data-ttu-id="60161-211">일반적인 XAML 규칙은 초기화 텍스트로 (또는 XAML 2009의 팩터리 메서드에) 전달 되지 않는 형식의 멤버 순서에 관계 없이 할당 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-211">The general XAML rule is that members of a type that are not passed as initialization text (or by a factory method in XAML 2009) must be able to be assigned in any order.</span></span> <span data-ttu-id="60161-212">적용 하 여는 `DependsOn` 패턴을 멤버로 XAML 작성기에 지시할 수 있습니다 항상이 멤버 보다 먼저 참조 된 멤버를 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-212">By applying a `DependsOn` pattern to a member, you can instruct XAML writers to always process the referenced member before this member.</span></span> <span data-ttu-id="60161-213">현재 멤버의 값을 컨텍스트 또는 다른 멤버가 설정 되 면 에서만 사용할 수 있는 기타 정보에 필요한 상황에서이 패턴을 적용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-213">You can apply this pattern in situations where the value of the current member requires context or other information that is only available after the other member is set.</span></span>  
  
 <span data-ttu-id="60161-214">`DependsOn` 패턴을 신중 하 게 적용 하 고는 아키텍처 용도로 사용 되는 속성 시나리오에 대 한 예약 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-214">The `DependsOn` pattern should be applied judiciously and reserved for property scenarios where it serves an architectural purpose.</span></span> <span data-ttu-id="60161-215">많은 종속성 될 XAML 처리가 느려질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-215">Large numbers of dependencies have the potential to slow down XAML processing.</span></span> <span data-ttu-id="60161-216">또한 있기 순환 종속성을 생성 하는 경우에 XAML 처리 동작이 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-216">Also, it is possible to produce circular dependencies, in which case the XAML processing behavior is undefined.</span></span>  
  
 <span data-ttu-id="60161-217">예제 `DependsOn` 에서 특정 속성을 포함 하는 WPF에서 시나리오 <xref:System.Windows.Controls.ControlTemplate> 하 고 <xref:System.Windows.DataTemplate>의 <xref:System.Windows.Trigger>, 및 <xref:System.Windows.Setter>.</span><span class="sxs-lookup"><span data-stu-id="60161-217">Example `DependsOn` scenarios from WPF include certain properties on <xref:System.Windows.Controls.ControlTemplate> and <xref:System.Windows.DataTemplate>, on <xref:System.Windows.Trigger>, and on <xref:System.Windows.Setter>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Markup.DependsOnAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="60161-218">현재 개체가 다른 개체와 같은지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="60161-218">Indicates whether the current object is equal to another object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="xamlMember.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="60161-219">이 개체와 비교할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-219">The object to compare with this object.</span></span></param>
        <summary><span data-ttu-id="60161-220">현재 개체가 다른 개체와 같은지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="60161-220">Indicates whether the current object is equal to another object.</span></span></summary>
        <returns><span data-ttu-id="60161-221">현재 개체가 <paramref name="obj" /> 매개 변수와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-221"><see langword="true" /> if the current object is equal to the <paramref name="obj" /> parameter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Xaml.XamlMember other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Xaml.XamlMember other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As XamlMember) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Xaml::XamlMember ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Xaml.XamlMember -&gt; bool" Usage="xamlMember.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Xaml.XamlMember" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="60161-222">이 개체와 비교할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-222">An object to compare with this object.</span></span></param>
        <summary><span data-ttu-id="60161-223">현재 개체가 동일한 형식의 다른 개체와 같은지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="60161-223">Indicates whether the current object is equal to another object of the same type.</span></span></summary>
        <returns><span data-ttu-id="60161-224">현재 개체가 <paramref name="other" /> 매개 변수와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-224"><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="xamlMember.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="60161-225">해당 개체의 해시 코드를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-225">Returns the hash code for this object.</span></span></summary>
        <returns><span data-ttu-id="60161-226">정수 해시 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-226">An integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXamlNamespaces">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;string&gt; GetXamlNamespaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;string&gt; GetXamlNamespaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.GetXamlNamespaces" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetXamlNamespaces () As IList(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IList&lt;System::String ^&gt; ^ GetXamlNamespaces();" />
      <MemberSignature Language="F#" Value="abstract member GetXamlNamespaces : unit -&gt; System.Collections.Generic.IList&lt;string&gt;&#xA;override this.GetXamlNamespaces : unit -&gt; System.Collections.Generic.IList&lt;string&gt;" Usage="xamlMember.GetXamlNamespaces " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="60161-227">이 XAML 멤버가 있을 수 있는 XAML 네임스페이스의 목록을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-227">Returns a list of XAML namespaces where this XAML member can exist.</span></span></summary>
        <returns><span data-ttu-id="60161-228">문자열로 제공되는 XAML 네임스페이스 식별자 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-228">A list of XAML namespace identifiers as strings.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-229">기본 구현은 반환 합니다 <xref:System.Xaml.XamlType.GetXamlNamespaces%2A?displayProperty=nameWithType> 호출에서 결과 <xref:System.Xaml.XamlMember.DeclaringType%2A> 이 사용 하 여 연결 된 <xref:System.Xaml.XamlMember>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-229">The default implementation returns the <xref:System.Xaml.XamlType.GetXamlNamespaces%2A?displayProperty=nameWithType> call result from the <xref:System.Xaml.XamlMember.DeclaringType%2A> that is associated with this <xref:System.Xaml.XamlMember>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoker">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlMemberInvoker Invoker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlMemberInvoker Invoker" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.Invoker" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Invoker As XamlMemberInvoker" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlMemberInvoker ^ Invoker { System::Xaml::Schema::XamlMemberInvoker ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Invoker : System.Xaml.Schema.XamlMemberInvoker" Usage="System.Xaml.XamlMember.Invoker" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlMemberInvoker</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60161-230">이 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />과 연결된 <see cref="T:System.Xaml.XamlMember" /> 구현을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="60161-230">Gets the <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> implementation that is associated with this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <value><span data-ttu-id="60161-231">이 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />과 연결된 <see cref="T:System.Xaml.XamlMember" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-231">The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> implementation that is associated with this <see cref="T:System.Xaml.XamlMember" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-232">`Invoker` 패턴은 고급 XAML 형식 시스템 확장 기술 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-232">The `Invoker` pattern is an advanced XAML type system extension technique.</span></span> <span data-ttu-id="60161-233">`Invoker` 패턴은.NET Framework XAML 서비스에서 XAML 형식 시스템 정의 사용 하 여 다른 스키마 형식 매핑 동작을 삽입 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-233">The `Invoker` pattern provides a way to inject different schema type mapping behavior, while still using XAML type system definitions from .NET Framework XAML Services.</span></span>  
  
 <span data-ttu-id="60161-234">경우는 <xref:System.Xaml.XamlMember.LookupInvoker%2A> 반환 재정의 `null`, 기본 구현을 반환 하는 경우 또는 `null` 없기 때문를 <xref:System.Xaml.XamlMember.UnderlyingMember%2A> 이 대 한 <xref:System.Xaml.XamlMember>의 <xref:System.Xaml.XamlMember.Invoker%2A> 속성에서 반환 <xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="60161-234">If a <xref:System.Xaml.XamlMember.LookupInvoker%2A> override returns `null`, or if the default implementation returns `null` because it lacks the <xref:System.Xaml.XamlMember.UnderlyingMember%2A> for this <xref:System.Xaml.XamlMember>, the <xref:System.Xaml.XamlMember.Invoker%2A> property returns <xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="60161-235"><xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType>가 기본값입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-235"><xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType> is the default.</span></span> <span data-ttu-id="60161-236">이.NET Framework XAML 서비스 및 기본 XAML 스키마 컨텍스트를 사용 하는 관련 없는 재정의할 경우 대부분의 작업에 대해 true `Invoker` 패턴 XAML 형식 시스템 엔터티의 생성을 위해 전달 됩니다.</span><span class="sxs-lookup"><span data-stu-id="60161-236">This is true for most operations that use .NET Framework XAML Services and the default XAML schema context, and where no specific override `Invoker` patterns are passed for construction of XAML type system entities.</span></span>  
  
 <span data-ttu-id="60161-237">호출 <xref:System.Xaml.XamlMember.Invoker%2A> 호출 <xref:System.Xaml.XamlMember.LookupInvoker%2A> 또는 메서드의 특정 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-237">Calling <xref:System.Xaml.XamlMember.Invoker%2A> invokes <xref:System.Xaml.XamlMember.LookupInvoker%2A> or a specific override of that method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAmbient">
      <MemberSignature Language="C#" Value="public bool IsAmbient { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAmbient" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsAmbient" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAmbient As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAmbient { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAmbient : bool" Usage="System.Xaml.XamlMember.IsAmbient" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60161-238">이 <see cref="T:System.Xaml.XamlMember" />가 앰비언트 속성으로 보고되는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="60161-238">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" /> is reported as an ambient property.</span></span></summary>
        <value><span data-ttu-id="60161-239">이 <see cref="T:System.Xaml.XamlMember" />가 앰비언트 속성으로 보고되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-239"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> is reported as an ambient property; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-240">호출 <xref:System.Xaml.XamlMember.IsAmbient%2A> 호출 <xref:System.Xaml.XamlMember.LookupIsAmbient%2A> 또는 메서드의 특정 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-240">Calling <xref:System.Xaml.XamlMember.IsAmbient%2A> invokes <xref:System.Xaml.XamlMember.LookupIsAmbient%2A> or a specific override of that method.</span></span> <span data-ttu-id="60161-241">여기서는 초기 내부 리플렉션 논리가 정보를 아직 설정 하지 않은 구현에서이 문제가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-241">This behavior occurs in implementations where the initial internal reflection logic has not already set the information.</span></span>  
  
 <span data-ttu-id="60161-242">앰비언트 속성에 대 한 검사는 일반적으로 일부 개체 및 형식 한정자에 대 한 앰비언트 사용에 의존 하는 값을 올바르게 작동할 수 있도록 하는 XAML 처리 논리입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-242">Checking for ambient properties is are usually part of XAML processing logic to make sure that objects and values that rely on ambient usage for type qualification can function correctly.</span></span> <span data-ttu-id="60161-243">.NET Framework XAML 서비스 Api 및 기본 XAML 스키마 컨텍스트를 사용 하 여 특성을 기반으로이 값을 채웁니다 <xref:System.Windows.Markup.AmbientAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-243">The .NET Framework XAML Services APIs and the default XAML schema context populates this value based on attribution with <xref:System.Windows.Markup.AmbientAttribute>.</span></span> <span data-ttu-id="60161-244">기본 구현을 <xref:System.Xaml.XamlMember.LookupIsAmbient%2A> 사용이 기존 <xref:System.Windows.Markup.AmbientAttribute> 기법을 반환 `true` 경우 <xref:System.Windows.Markup.AmbientAttribute> 멤버 선언에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-244">The default implementation of <xref:System.Xaml.XamlMember.LookupIsAmbient%2A> uses this existing <xref:System.Windows.Markup.AmbientAttribute> technique, and it returns `true` if <xref:System.Windows.Markup.AmbientAttribute> exists on a member declaration.</span></span>  
  
 <span data-ttu-id="60161-245"><xref:System.Windows.Markup.AmbientAttribute> 포함 하는 몇 가지 WPF 형식 멤버에서 발견 되 <xref:System.Windows.Application>, <xref:System.Windows.Setter>, 및 <xref:System.Windows.Style>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-245"><xref:System.Windows.Markup.AmbientAttribute> is found on members of several WPF types, which include <xref:System.Windows.Application>, <xref:System.Windows.Setter>, and <xref:System.Windows.Style>.</span></span> <span data-ttu-id="60161-246">또한에서 발견 된 합니다 <xref:System.Windows.ResourceDictionary> 형식을 사용 하는 모든 멤버를 지정 하는데 <xref:System.Windows.ResourceDictionary> 해당 형식을 고려해 야 앰비언트 멤버 특히 인 경우에으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-246">It is also found on the <xref:System.Windows.ResourceDictionary> type, which connotes that any member that uses <xref:System.Windows.ResourceDictionary> as its type should be considered ambient even if the member is not specifically attributed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Markup.AmbientAttribute" />
      </Docs>
    </Member>
    <Member MemberName="IsAttachable">
      <MemberSignature Language="C#" Value="public bool IsAttachable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAttachable" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsAttachable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAttachable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAttachable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAttachable : bool" Usage="System.Xaml.XamlMember.IsAttachable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60161-247">이 <see cref="T:System.Xaml.XamlMember" />가 연결 가능한 멤버인지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="60161-247">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" /> is an attachable member.</span></span></summary>
        <value><span data-ttu-id="60161-248">이 <see cref="T:System.Xaml.XamlMember" />가 연결 가능한 멤버이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-248"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> is an attachable member; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-249">합니다 <xref:System.Xaml.XamlMember.IsAttachable%2A> 생성자를 생성 하는 데 사용 된에 따라 값이 초기화는 <xref:System.Xaml.XamlMember>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-249">The <xref:System.Xaml.XamlMember.IsAttachable%2A> value is initialized based on which constructor was used to construct a <xref:System.Xaml.XamlMember>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDirective">
      <MemberSignature Language="C#" Value="public bool IsDirective { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirective" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsDirective" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDirective As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDirective { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDirective : bool" Usage="System.Xaml.XamlMember.IsDirective" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60161-250">이 <see cref="T:System.Xaml.XamlMember" />가 XAML 지시문인지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="60161-250">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" /> is a XAML directive.</span></span></summary>
        <value><span data-ttu-id="60161-251">이 <see cref="T:System.Xaml.XamlMember" />가 XAML 지시문이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-251"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> is a XAML directive; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-252">합니다 <xref:System.Xaml.XamlMember.IsDirective%2A> 생성자를 생성 하는 데 사용 된에 따라 값이 초기화는 <xref:System.Xaml.XamlMember>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-252">The <xref:System.Xaml.XamlMember.IsDirective%2A> value is initialized based on which constructor was used to construct a <xref:System.Xaml.XamlMember>.</span></span> <span data-ttu-id="60161-253">기본 <xref:System.Xaml.XamlMember> 생성자는 초기화 되도록 <xref:System.Xaml.XamlMember.IsDirective%2A> 는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-253">The base <xref:System.Xaml.XamlMember> constructors initialize so that <xref:System.Xaml.XamlMember.IsDirective%2A> is `false`.</span></span> <span data-ttu-id="60161-254">그러나 합니다 <xref:System.Xaml.XamlDirective> 클래스 (을 <xref:System.Xaml.XamlMember> 파생 클래스)를 초기화 있도록 <xref:System.Xaml.XamlMember.IsDirective%2A> 는 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-254">However, the <xref:System.Xaml.XamlDirective> class (a <xref:System.Xaml.XamlMember> derived class) initializes so that <xref:System.Xaml.XamlMember.IsDirective%2A> is `true`.</span></span>  
  
 <span data-ttu-id="60161-255">보고 하려는 경우 <xref:System.Xaml.XamlMember.IsDirective%2A> 으로 `true` XAML 멤버에 대 한 사용자 지정 XAML 스키마 클래스의 호출자에 게 확인에서 파생 되어야 <xref:System.Xaml.XamlDirective> 해당 동작을 사용 하는 유일한 방법은 이기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-255">If you want to report <xref:System.Xaml.XamlMember.IsDirective%2A> as `true` to callers of a custom XAML schema class for XAML members, make sure you derive from <xref:System.Xaml.XamlDirective> because that is the only way to enable that behavior.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEvent">
      <MemberSignature Language="C#" Value="public bool IsEvent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEvent" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsEvent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEvent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEvent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEvent : bool" Usage="System.Xaml.XamlMember.IsEvent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60161-256">이 <see cref="T:System.Xaml.XamlMember" />가 이벤트 멤버를 나타내는지 여부를 표시하는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="60161-256">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" /> represents an event member.</span></span></summary>
        <value><span data-ttu-id="60161-257">이 <see cref="T:System.Xaml.XamlMember" />가 이벤트를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-257"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> represents an event; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-258">호출 <xref:System.Xaml.XamlMember.IsEvent%2A> 호출 <xref:System.Xaml.XamlMember.LookupIsEvent%2A> 또는 메서드의 특정 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-258">Calling <xref:System.Xaml.XamlMember.IsEvent%2A> invokes <xref:System.Xaml.XamlMember.LookupIsEvent%2A> or a specific override of that method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNameValid">
      <MemberSignature Language="C#" Value="public bool IsNameValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNameValid" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsNameValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNameValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNameValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNameValid : bool" Usage="System.Xaml.XamlMember.IsNameValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60161-259">이 <see cref="T:System.Xaml.XamlMember" />가 유효한 <see langword="xamlName" /> 문자열을 <see cref="P:System.Xaml.XamlMember.Name" />으로 사용하여 초기화되었는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="60161-259">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" /> is initialized with a valid <see langword="xamlName" /> string as its <see cref="P:System.Xaml.XamlMember.Name" />.</span></span></summary>
        <value><span data-ttu-id="60161-260">이 <see cref="T:System.Xaml.XamlMember" />가 유효한 <see langword="true" /> 문자열을 사용하여 초기화되었으면 <see langword="xamlName" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-260"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> is initialized with a valid <see langword="xamlName" /> string; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/11e4cada-41d2-494d-9531-0d3df4dfcbe3"><span data-ttu-id="60161-261">XamlName</span><span class="sxs-lookup"><span data-stu-id="60161-261">XamlName</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Xaml.XamlMember.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60161-262">이 <see cref="T:System.Xaml.XamlMember" />가 읽기 전용 멤버를 나타내는지 여부를 표시하는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="60161-262">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" /> represents a read-only member.</span></span></summary>
        <value><span data-ttu-id="60161-263">이 <see cref="T:System.Xaml.XamlMember" />가 읽기 전용 멤버를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-263"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> represents a read-only member; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-264">호출 <xref:System.Xaml.XamlMember.IsReadOnly%2A> 호출 <xref:System.Xaml.XamlMember.LookupIsReadOnly%2A> 또는 메서드의 특정 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-264">Calling <xref:System.Xaml.XamlMember.IsReadOnly%2A> invokes <xref:System.Xaml.XamlMember.LookupIsReadOnly%2A> or a specific override of that method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadPublic">
      <MemberSignature Language="C#" Value="public bool IsReadPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadPublic" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsReadPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadPublic : bool" Usage="System.Xaml.XamlMember.IsReadPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60161-265">이 <see cref="T:System.Xaml.XamlMember" />가 호출 가능한 public <see langword="get" /> 접근자가 있는 멤버를 나타내는지 여부를 표시하는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="60161-265">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" /> represents a member with a callable public <see langword="get" /> accessor.</span></span></summary>
        <value><span data-ttu-id="60161-266">이 <see cref="T:System.Xaml.XamlMember" />가 호출 가능한 public <see langword="true" /> 접근자를 나타내면 <see langword="get" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-266"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> represents a callable public <see langword="get" /> accessor; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-267"><xref:System.Xaml.XamlMember.IsReadPublic%2A> 여부 검사 값을 <xref:System.Xaml.XamlMember.DeclaringType%2A> 공개 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-267">The <xref:System.Xaml.XamlMember.IsReadPublic%2A> value checks whether the <xref:System.Xaml.XamlMember.DeclaringType%2A> is public.</span></span> <span data-ttu-id="60161-268">하는 경우 <xref:System.Xaml.XamlMember.DeclaringType%2A> 가 public이 아닌 경우는 `get` 접근자는 실용적인 방식으로 호출할 수 없습니다 및 <xref:System.Xaml.XamlMember.IsReadPublic%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-268">If <xref:System.Xaml.XamlMember.DeclaringType%2A> is nonpublic, the `get` accessor is not callable in a practical way, and <xref:System.Xaml.XamlMember.IsReadPublic%2A> returns `false`.</span></span>  
  
 <span data-ttu-id="60161-269">호출 <xref:System.Xaml.XamlMember.IsReadPublic%2A> 호출 <xref:System.Xaml.XamlMember.LookupIsReadPublic%2A> 또는 메서드의 특정 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-269">Calling <xref:System.Xaml.XamlMember.IsReadPublic%2A> invokes <xref:System.Xaml.XamlMember.LookupIsReadPublic%2A> or a specific override of that method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="60161-270"><xref:System.Xaml.XamlMember.LookupIsReadPublic%2A> 메서드가 가상 이며 따라서 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-270">The <xref:System.Xaml.XamlMember.LookupIsReadPublic%2A> method is virtual and therefore, can be overridden.</span></span> <span data-ttu-id="60161-271">재정의는 정보를 변경 하려면 (악의적으로 또는 그렇지 않은 경우) 보고 액세스 XAML 멤버의이 더 이상 정렬 되도록 예상 되는 방식으로 기본 CLR 선언의 형식 시스템 액세스 정보를 사용 하 여 될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-271">The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</span></span> <span data-ttu-id="60161-272">액세스 수준 보안에 중요 한 모든 검사에 대 한 기본 CLR 형식을 대신 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-272">For any security-critical checks of access levels, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnknown">
      <MemberSignature Language="C#" Value="public bool IsUnknown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnknown" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsUnknown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUnknown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUnknown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUnknown : bool" Usage="System.Xaml.XamlMember.IsUnknown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60161-273">멤버가 형식 및 멤버 확인에 사용되는 지원 시스템에서 확인될 수 없는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="60161-273">Gets a value that indicates whether the member is not resolvable by the backing system that is used for type and member resolution.</span></span></summary>
        <value><span data-ttu-id="60161-274">멤버를 확인할 수 없으면 <see langword="true" />이고, 멤버를 확인할 수 있으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-274"><see langword="true" /> if the member is not resolvable; <see langword="false" /> if the member is resolvable.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-275">A <xref:System.Xaml.XamlMember> 사용 하 여 생성 된 합니다 <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29> 서명을 반환 `true` 에 대 한 <xref:System.Xaml.XamlMember.IsUnknown%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-275">A <xref:System.Xaml.XamlMember> that is constructed with the <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29> signature returns `true` for <xref:System.Xaml.XamlMember.IsUnknown%2A>.</span></span>  
  
 <span data-ttu-id="60161-276">포함 하는 로드 경로 대 한 <xref:System.Xaml.XamlObjectWriter>, a <xref:System.Xaml.XamlMember> 사용 하 여 `true` 에 대 한 <xref:System.Xaml.XamlMember.IsUnknown%2A> 개체 그래프에 쓸 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-276">For a load path that involves <xref:System.Xaml.XamlObjectWriter>, a <xref:System.Xaml.XamlMember> with `true` for <xref:System.Xaml.XamlMember.IsUnknown%2A> cannot be written into an object graph.</span></span> <span data-ttu-id="60161-277">.NET Framework XAML 서비스 api에서 기본 구현에서의 <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType> throw 호출을 <xref:System.Xaml.XamlObjectWriterException> 때 관련 <xref:System.Xaml.XamlMember> 보고서 `true` 에 대 한 <xref:System.Xaml.XamlMember.IsUnknown%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-277">Under the default implementations in .NET Framework XAML Services APIs, the <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType> call throws a <xref:System.Xaml.XamlObjectWriterException> when the relevant <xref:System.Xaml.XamlMember> reports `true` for <xref:System.Xaml.XamlMember.IsUnknown%2A>.</span></span>  
  
 <span data-ttu-id="60161-278">구성 하지 않아야는 <xref:System.Xaml.XamlMember> 의 값이 있는 `true` 에 대 한 <xref:System.Xaml.XamlMember.IsUnknown%2A> 구현에서 예외를 처리할 수 있습니다 <xref:System.Xaml.XamlObjectWriter>를 조정 하는 다른 방법을 만들어야 합니다 <xref:System.Xaml.XamlObjectWriter> 동작 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-278">You should not construct a <xref:System.Xaml.XamlMember> that has a value of `true` for <xref:System.Xaml.XamlMember.IsUnknown%2A> unless your implementation can handle the exceptions from <xref:System.Xaml.XamlObjectWriter>, or you have other ways to adjust the <xref:System.Xaml.XamlObjectWriter> behavior.</span></span>  
  
 <span data-ttu-id="60161-279">호출 <xref:System.Xaml.XamlMember.IsUnknown%2A> 호출 <xref:System.Xaml.XamlMember.LookupIsUnknown%2A> 또는 메서드의 특정 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-279">Calling <xref:System.Xaml.XamlMember.IsUnknown%2A> invokes <xref:System.Xaml.XamlMember.LookupIsUnknown%2A> or a specific override of that method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWriteOnly">
      <MemberSignature Language="C#" Value="public bool IsWriteOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWriteOnly" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsWriteOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWriteOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWriteOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsWriteOnly : bool" Usage="System.Xaml.XamlMember.IsWriteOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60161-280">이 <see cref="T:System.Xaml.XamlMember" />가 쓰기 전용 멤버를 나타내는지 여부를 표시하는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="60161-280">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" /> represents a write-only member.</span></span></summary>
        <value><span data-ttu-id="60161-281">이 <see cref="T:System.Xaml.XamlMember" />가 쓰기 전용 멤버를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-281"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> represents a write-only member; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-282">호출 <xref:System.Xaml.XamlMember.IsWriteOnly%2A> 호출 <xref:System.Xaml.XamlMember.LookupIsWriteOnly%2A> 또는 메서드의 특정 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-282">Calling <xref:System.Xaml.XamlMember.IsWriteOnly%2A> invokes <xref:System.Xaml.XamlMember.LookupIsWriteOnly%2A> or a specific override of that method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWritePublic">
      <MemberSignature Language="C#" Value="public bool IsWritePublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWritePublic" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsWritePublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWritePublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWritePublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsWritePublic : bool" Usage="System.Xaml.XamlMember.IsWritePublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60161-283">이 <see cref="T:System.Xaml.XamlMember" />가 호출 가능한 public <see langword="set" /> 접근자가 있는 멤버를 나타내는지 여부를 표시하는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="60161-283">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" /> represents a member that has a callable public <see langword="set" /> accessor.</span></span></summary>
        <value><span data-ttu-id="60161-284">이 <see cref="T:System.Xaml.XamlMember" />가 호출 가능한 public <see langword="true" /> 접근자를 나타내면 <see langword="set" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-284"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> represents a callable public <see langword="set" /> accessor; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-285"><xref:System.Xaml.XamlMember.IsWritePublic%2A> 값으로 간주 하는지 여부를 <xref:System.Xaml.XamlMember.DeclaringType%2A> 공용 결정의 일환으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-285">The <xref:System.Xaml.XamlMember.IsWritePublic%2A> value considers whether the <xref:System.Xaml.XamlMember.DeclaringType%2A> is public as part of the determination.</span></span> <span data-ttu-id="60161-286">하는 경우 <xref:System.Xaml.XamlMember.DeclaringType%2A> 가 public이 아닌 경우는 `set` 접근자는 실용적인 방식으로 호출할 수 없습니다 및 <xref:System.Xaml.XamlMember.IsWritePublic%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-286">If <xref:System.Xaml.XamlMember.DeclaringType%2A> is nonpublic, the `set` accessor is not callable in a practical way, and <xref:System.Xaml.XamlMember.IsWritePublic%2A> returns `false`.</span></span>  
  
 <span data-ttu-id="60161-287">호출 <xref:System.Xaml.XamlMember.IsWritePublic%2A> 호출 <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A> 또는 메서드의 특정 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-287">Calling <xref:System.Xaml.XamlMember.IsWritePublic%2A> invokes <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A> or a specific override of that method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="60161-288"><xref:System.Xaml.XamlMember.LookupIsWritePublic%2A> 메서드가 가상 이며 따라서 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-288">The <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A> method is virtual and therefore, can be overridden.</span></span> <span data-ttu-id="60161-289">재정의는 정보를 변경 하려면 (악의적으로 또는 그렇지 않은 경우) 보고 액세스 XAML 멤버의이 더 이상 정렬 되도록 예상 되는 방식으로 기본 CLR 선언의 형식 시스템 액세스 정보를 사용 하 여 될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-289">The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</span></span> <span data-ttu-id="60161-290">액세스 수준 보안에 중요 한 모든 검사에 대 한 기본 CLR 형식을 대신 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-290">For any security-critical checks of access levels, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupCustomAttributeProvider">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupCustomAttributeProvider" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupCustomAttributeProvider () As ICustomAttributeProvider" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::ICustomAttributeProvider ^ LookupCustomAttributeProvider();" />
      <MemberSignature Language="F#" Value="abstract member LookupCustomAttributeProvider : unit -&gt; System.Reflection.ICustomAttributeProvider&#xA;override this.LookupCustomAttributeProvider : unit -&gt; System.Reflection.ICustomAttributeProvider" Usage="xamlMember.LookupCustomAttributeProvider " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ICustomAttributeProvider</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="60161-291">파생 클래스에서 구현되는 경우 <see cref="T:System.Reflection.ICustomAttributeProvider" /> 구현을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-291">When implemented in a derived class, returns an <see cref="T:System.Reflection.ICustomAttributeProvider" /> implementation.</span></span></summary>
        <returns><span data-ttu-id="60161-292"><see cref="T:System.Reflection.ICustomAttributeProvider" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-292">An <see cref="T:System.Reflection.ICustomAttributeProvider" /> implementation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-293">내부 CLR 특성 값을 얻을 수 있는 대체 방법으로 리플렉션을 제공 하려면이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-293">Override this method to provide the internal reflection with an alternative way to obtain CLR attribute values.</span></span> <span data-ttu-id="60161-294">가 없을 경우 재정의 내부 리플렉터를 사용 하 여에 대 한 호출 등의 일반적인 CLR 리플렉션 논리 <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-294">In the absence of an override, the internal reflector uses typical CLR reflection logic such as calls to <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A>.</span></span>  
  
 <span data-ttu-id="60161-295">기본 구현은 `null`를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-295">The default implementation returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupDeferringLoader">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt; LookupDeferringLoader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Xaml.XamlDeferringLoader&gt; LookupDeferringLoader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupDeferringLoader" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupDeferringLoader () As XamlValueConverter(Of XamlDeferringLoader)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlValueConverter&lt;System::Xaml::XamlDeferringLoader ^&gt; ^ LookupDeferringLoader();" />
      <MemberSignature Language="F#" Value="abstract member LookupDeferringLoader : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;&#xA;override this.LookupDeferringLoader : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;" Usage="xamlMember.LookupDeferringLoader " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="60161-296">XAML 선언된 개체의 지연된 로드에 사용되는 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-296">Returns a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object, which is used for deferred loading of XAML declared objects.</span></span></summary>
        <returns><span data-ttu-id="60161-297">제네릭에 대한 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlDeferringLoader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-297">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> that has a <see cref="T:System.Xaml.XamlDeferringLoader" /> constraint on the generic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-298">값을 가져올 때이 메서드가 호출 되는 <xref:System.Xaml.XamlMember.DeferringLoader%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-298">This method is invoked when a caller gets a value from the <xref:System.Xaml.XamlMember.DeferringLoader%2A> property.</span></span> <span data-ttu-id="60161-299">원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlMember.DeferringLoader%2A> 기본 내부 리플렉션을 통해 사용할 수 있는 값과 다른 값을 반환할 사용자 지정 제공 하는 경우 및 <xref:System.Xaml.Schema.XamlMemberInvoker> 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-299">Override this method if you want <xref:System.Xaml.XamlMember.DeferringLoader%2A> to return a value that differs from the value that is enabled by default internal reflection, and if you are also providing custom <xref:System.Xaml.Schema.XamlMemberInvoker> information.</span></span>  
  
 <span data-ttu-id="60161-300">기본 구현에서는 개체를 반환 하거나 읽는 <xref:System.Windows.Markup.XamlDeferLoadAttribute> 를 사용 하 여 또는 <xref:System.Xaml.XamlDeferringLoader> 선언 형식에서입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-300">The default implementation returns an object either by reading <xref:System.Windows.Markup.XamlDeferLoadAttribute> or using a <xref:System.Xaml.XamlDeferringLoader> from the declaring type.</span></span> <span data-ttu-id="60161-301">어떤 개체도 사용 가능한 경우이 메서드가 반환 될 수 있습니다 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-301">If neither object is available, this method might return `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.DeferringLoader" />
      </Docs>
    </Member>
    <Member MemberName="LookupDependsOn">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IList&lt;System.Xaml.XamlMember&gt; LookupDependsOn ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlMember&gt; LookupDependsOn() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupDependsOn" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupDependsOn () As IList(Of XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IList&lt;System::Xaml::XamlMember ^&gt; ^ LookupDependsOn();" />
      <MemberSignature Language="F#" Value="abstract member LookupDependsOn : unit -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlMember&gt;&#xA;override this.LookupDependsOn : unit -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlMember&gt;" Usage="xamlMember.LookupDependsOn " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="60161-302"><see cref="T:System.Xaml.XamlMember" /> 개체의 목록을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-302">Returns a list of <see cref="T:System.Xaml.XamlMember" /> objects.</span></span> <span data-ttu-id="60161-303">이 목록의 항목은 초기화 순서에 대한 종속성 관계가 이 <see cref="T:System.Xaml.XamlMember" />를 기준으로 존재하는 멤버를 보고합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-303">Items in the list report the members where dependency relationships for initialization order exist relative to this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <returns><span data-ttu-id="60161-304"><see cref="T:System.Xaml.XamlMember" /> 개체의 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-304">A list of <see cref="T:System.Xaml.XamlMember" /> objects.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-305">값을 가져올 때이 메서드가 호출 되는 <xref:System.Xaml.XamlMember.DependsOn%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-305">This method is invoked when a caller gets a value from the <xref:System.Xaml.XamlMember.DependsOn%2A> property.</span></span> <span data-ttu-id="60161-306">원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlMember.DependsOn%2A> 기본 내부 리플렉션을 통해 사용할 수 있는 값과 다른 값을 반환할 사용자 지정 제공 하는 경우 및 <xref:System.Xaml.Schema.XamlMemberInvoker> 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-306">Override this method if you want <xref:System.Xaml.XamlMember.DependsOn%2A> to return a value that differs from the value that is enabled by default internal reflection, and if you are also providing custom <xref:System.Xaml.Schema.XamlMemberInvoker> information.</span></span>  
  
 <span data-ttu-id="60161-307">WPF XAML 판독기 및 작성기 구현을 사용 하 여이 경우 특성 <xref:System.Windows.Markup.DependsOnAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-307">The WPF XAML reader and writer implementations attribute this case with <xref:System.Windows.Markup.DependsOnAttribute>.</span></span> <span data-ttu-id="60161-308">기본 구현은 사용이 기존 <xref:System.Windows.Markup.DependsOnAttribute> 기법입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-308">The default implementation uses this existing <xref:System.Windows.Markup.DependsOnAttribute> technique.</span></span>  
  
 <span data-ttu-id="60161-309">사용 하지 않는 경우이 메서드를 재정의 <xref:System.Windows.Markup.DependsOnAttribute> 이 용도의 및을 자신의 기술 사용 하 여 속성 처리 순서를 나타내는 기술을 교체 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-309">Override this method if you are not using <xref:System.Windows.Markup.DependsOnAttribute> for this purpose and intend to replace that technique for indicating property processing order with your own technique.</span></span> <span data-ttu-id="60161-310">속성 처리 순서를 지원 하지 않을 경우에 적절 한 없는 결과 반환 하므로 기본 구현은 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-310">If you do not intend to support a property processing order, you can use the default implementation because it returns no results, which is appropriate.</span></span>  
  
 <span data-ttu-id="60161-311">목록은 읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-311">The list is read-only.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.DependsOn" />
      </Docs>
    </Member>
    <Member MemberName="LookupInvoker">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlMemberInvoker LookupInvoker ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlMemberInvoker LookupInvoker() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupInvoker" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupInvoker () As XamlMemberInvoker" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlMemberInvoker ^ LookupInvoker();" />
      <MemberSignature Language="F#" Value="abstract member LookupInvoker : unit -&gt; System.Xaml.Schema.XamlMemberInvoker&#xA;override this.LookupInvoker : unit -&gt; System.Xaml.Schema.XamlMemberInvoker" Usage="xamlMember.LookupInvoker " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlMemberInvoker</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="60161-312">이 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />과 연결된 <see cref="T:System.Xaml.XamlMember" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-312">Returns a <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> that is associated with this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <returns><span data-ttu-id="60161-313">이 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />에 대한 <see cref="T:System.Xaml.XamlMember" /> 정보이거나 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-313">The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> information for this <see cref="T:System.Xaml.XamlMember" />; or <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-314">이 메서드를 호출 하 여 <xref:System.Xaml.XamlMember.Invoker%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-314">This method is invoked by calls to <xref:System.Xaml.XamlMember.Invoker%2A>.</span></span>  
  
 <span data-ttu-id="60161-315">기본 구현은 것을 요구 하지 않는 한 <xref:System.Xaml.XamlMember> 초기를 전달 하는 생성자 중 하나를 사용 하 여 생성할 수 <xref:System.Xaml.Schema.XamlMemberInvoker>입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-315">The default implementation does not require that a <xref:System.Xaml.XamlMember> be constructed by using one of the constructors that pass an initial <xref:System.Xaml.Schema.XamlMemberInvoker>.</span></span> <span data-ttu-id="60161-316">그러나는 <xref:System.Xaml.XamlMember.UnderlyingMember%2A> 에 대 한 값이 있어야 합니다 <xref:System.Xaml.XamlMember>이 고, 그렇지 않으면 기본 구현은 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-316">However, an <xref:System.Xaml.XamlMember.UnderlyingMember%2A> value must exist for the <xref:System.Xaml.XamlMember>; otherwise, the default implementation returns `null`.</span></span>  
  
 <span data-ttu-id="60161-317">또한에서 파생 하는 경우이 메서드를 재정의 <xref:System.Xaml.Schema.XamlMemberInvoker> 하며, 파생된 클래스를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-317">Override this method if you also derive from <xref:System.Xaml.Schema.XamlMemberInvoker> and intend to return the derived class.</span></span> <span data-ttu-id="60161-318">반환 하는 경우 `null`하십시오 <xref:System.Xaml.XamlMember.Invoker%2A> 반환 <xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType> 호출자에 게 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-318">If you return `null`, <xref:System.Xaml.XamlMember.Invoker%2A> returns <xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType> to callers.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.Invoker" />
        <altmember cref="T:System.Xaml.Schema.XamlMemberInvoker" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsAmbient">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsAmbient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsAmbient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsAmbient" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsAmbient () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsAmbient();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsAmbient : unit -&gt; bool&#xA;override this.LookupIsAmbient : unit -&gt; bool" Usage="xamlMember.LookupIsAmbient " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="60161-319">이 <see cref="T:System.Xaml.XamlMember" />가 앰비언트 속성으로 보고되는지 여부를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-319">Returns whether this <see cref="T:System.Xaml.XamlMember" /> is reported as an ambient property.</span></span></summary>
        <returns><span data-ttu-id="60161-320">이 <see cref="T:System.Xaml.XamlMember" />를 앰비언트 속성으로 보고하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-320"><see langword="true" /> to report this <see cref="T:System.Xaml.XamlMember" /> as an ambient property; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-321">이 메서드는 앰비언트 XAML 속성 정보를 확인 하는 내부 호출에 의해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="60161-321">This method is invoked by internal calls that check for ambient XAML property information.</span></span> <span data-ttu-id="60161-322">XAML 판독기 및 XAML 작성기의 공용 API 동작에서 앰비언트 속성 동작 고려 됩니다.</span><span class="sxs-lookup"><span data-stu-id="60161-322">Ambient property behavior is accounted for in the public API behavior of XAML readers and XAML writers.</span></span> <span data-ttu-id="60161-323">참조 하는 내부 호출 <xref:System.Xaml.XamlMember.LookupIsAmbient%2A> 개체 및 형식 한정자에 대 한 앰비언트 사용에 의존 하는 값을 올바르게 작동할 수 있도록 하는 XAML 처리 논리의 일부인 일반적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-323">The internal calls that reference <xref:System.Xaml.XamlMember.LookupIsAmbient%2A> are usually part of XAML processing logic to make sure that objects and values that rely on ambient usage for type qualification can function correctly.</span></span> <span data-ttu-id="60161-324">기본.NET Framework XAML 서비스 구현은 CLR 리플렉션에서 지원 형식을 통해이 정보를 얻으려면 특성을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-324">The default .NET Framework XAML Services implementation uses CLR attributing to obtain this information from reflection over backing types.</span></span> <span data-ttu-id="60161-325">기본 구현에 대 한 검사는 특히 <xref:System.Windows.Markup.AmbientAttribute> 반환 `true` 에 대 한 <xref:System.Xaml.XamlMember.LookupIsAmbient%2A> 경우 <xref:System.Windows.Markup.AmbientAttribute> 멤버 정의에 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-325">Specifically, the default implementation checks for <xref:System.Windows.Markup.AmbientAttribute> and returns `true` for <xref:System.Xaml.XamlMember.LookupIsAmbient%2A> if <xref:System.Windows.Markup.AmbientAttribute> exists on a member definition.</span></span>  
  
 <span data-ttu-id="60161-326">사용 하지 않는 경우이 메서드를 재정의 <xref:System.Windows.Markup.AmbientAttribute> 이 용도의 및을 자신의 기술 사용 하 여 앰비언트 XAML 속성을 나타내는 기술을 교체 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-326">Override this method if you are not using <xref:System.Windows.Markup.AmbientAttribute> for this purpose and intend to replace that technique for indicating ambient XAML properties with your own technique.</span></span>  
  
 <span data-ttu-id="60161-327">특성을 WPF Api 예제의 <xref:System.Windows.Markup.AmbientAttribute> 됩니다 <xref:System.Windows.Trigger.Property%2A?displayProperty=nameWithType> 고 <xref:System.Windows.Style.BasedOn%2A?displayProperty=nameWithType>입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-327">Example APIs from WPF that attribute with <xref:System.Windows.Markup.AmbientAttribute> are <xref:System.Windows.Trigger.Property%2A?displayProperty=nameWithType> and <xref:System.Windows.Style.BasedOn%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Markup.AmbientAttribute" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsEvent">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsEvent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsEvent" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsEvent () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsEvent();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsEvent : unit -&gt; bool&#xA;override this.LookupIsEvent : unit -&gt; bool" Usage="xamlMember.LookupIsEvent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="60161-328">이 <see cref="T:System.Xaml.XamlMember" />가 이벤트를 나타내는지 여부를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-328">Returns whether this <see cref="T:System.Xaml.XamlMember" /> represents an event.</span></span></summary>
        <returns><span data-ttu-id="60161-329">이 <see cref="T:System.Xaml.XamlMember" />가 이벤트를 나타낸다고 보고하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-329"><see langword="true" /> to report that this <see cref="T:System.Xaml.XamlMember" /> represents an event; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-330">기본 구현 검사 여부를 <xref:System.Xaml.XamlMember.UnderlyingMember%2A> 유형의 <xref:System.Reflection.EventInfo>, 인 경우 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-330">The default implementation checks whether <xref:System.Xaml.XamlMember.UnderlyingMember%2A> is of type <xref:System.Reflection.EventInfo>, and if it is, returns `true`.</span></span>  
  
 <span data-ttu-id="60161-331">이 메서드는 호출자에서 값을 가져올 때 <xref:System.Xaml.XamlMember.IsEvent%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-331">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.IsEvent%2A>.</span></span> <span data-ttu-id="60161-332">전체에 대 한 고유한 결과 보고 하려는 경우이 메서드를 재정의 <xref:System.Xaml.XamlMember> 파생 클래스인 사례 별로 사용 가능한 메타 데이터가 XAML 결정할 해석 될 수 있는 특수 한 있는 경우 또는 형식 시스템 표현을 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-332">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available that can be interpreted to determine XAML type system representations on a per-case basis.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.IsEvent" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsReadOnly">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsReadOnly () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsReadOnly();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsReadOnly : unit -&gt; bool&#xA;override this.LookupIsReadOnly : unit -&gt; bool" Usage="xamlMember.LookupIsReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="60161-333">이 <see cref="T:System.Xaml.XamlMember" />가 의도된 읽기 전용 속성을 나타내는지 여부를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-333">Returns whether this <see cref="T:System.Xaml.XamlMember" /> represents an intended read-only property.</span></span></summary>
        <returns><span data-ttu-id="60161-334"><see cref="T:System.Xaml.XamlMember" />를 의도된 읽기 전용 속성으로 보고하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-334"><see langword="true" /> to report this <see cref="T:System.Xaml.XamlMember" /> as an intended read-only property; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-335">기본 구현은 반환 `true` 하는 경우 <xref:System.Xaml.XamlMember.UnderlyingMember%2A> 있지만, 공용 `set` 내부 리플렉션에 의해 결정 된 대로 접근자를 존재 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-335">The default implementation returns `true` if <xref:System.Xaml.XamlMember.UnderlyingMember%2A> exists, but a public `set` accessor does not exist for it, as determined by internal reflection.</span></span>  
  
 <span data-ttu-id="60161-336">이 메서드는 호출자에서 값을 가져올 때 <xref:System.Xaml.XamlMember.IsReadOnly%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-336">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.IsReadOnly%2A>.</span></span> <span data-ttu-id="60161-337">전체에 대 한 고유한 결과 보고 하려는 경우이 메서드를 재정의 <xref:System.Xaml.XamlMember> 파생 클래스인 사례 별로 사용 가능한 메타 데이터가 XAML 결정할 해석 될 수 있는 특수 한 있는 경우 또는 형식 시스템 표현을 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-337">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available that can be interpreted to determine XAML type system representations on a per-case basis.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsReadPublic">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsReadPublic ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsReadPublic() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsReadPublic" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsReadPublic () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsReadPublic();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsReadPublic : unit -&gt; bool&#xA;override this.LookupIsReadPublic : unit -&gt; bool" Usage="xamlMember.LookupIsReadPublic " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="60161-338">이 <see cref="T:System.Xaml.XamlMember" />가 public <see langword="get" /> 접근자가 있는 속성을 나타내는지 여부를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-338">Returns whether this <see cref="T:System.Xaml.XamlMember" /> represents a property that has a public <see langword="get" /> accessor.</span></span></summary>
        <returns><span data-ttu-id="60161-339">이 <see cref="T:System.Xaml.XamlMember" />가 public <see langword="true" />접근자가 있는 속성임을 나타내면 <see langword="get" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-339"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> represents a property that has a public <see langword="get" /> accessor; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-340">내부 리플렉션 또는의 부정을 나타내는 결과 반환 하는 기본 구현은 <xref:System.Xaml.XamlMember.IsWriteOnly%2A>, 그 순서 대로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-340">The default implementation returns results based either on internal reflection or the negation of <xref:System.Xaml.XamlMember.IsWriteOnly%2A>, processing in that order.</span></span>  
  
 <span data-ttu-id="60161-341"><xref:System.Xaml.XamlMember.LookupIsReadPublic%2A> 멤버 자체를 공용으로 인지 여부를 반환 합니다. 반환 `true` 비공용 선언 형식에 public 멤버에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-341"><xref:System.Xaml.XamlMember.LookupIsReadPublic%2A> returns whether the member itself is public; it returns `true` for a public member on a nonpublic declaring type.</span></span> <span data-ttu-id="60161-342">사용 하 여 <xref:System.Xaml.XamlMember.IsReadPublic%2A> 대신도 선언 형식의 표시 여부를 고려해 야 할 경우.</span><span class="sxs-lookup"><span data-stu-id="60161-342">Use <xref:System.Xaml.XamlMember.IsReadPublic%2A> instead, if you also want to consider the visibility of the declaring type.</span></span>  
  
 <span data-ttu-id="60161-343">이 메서드는 호출자에서 값을 가져올 때 <xref:System.Xaml.XamlMember.IsReadPublic%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-343">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.IsReadPublic%2A>.</span></span> <span data-ttu-id="60161-344">전체에 대 한 고유한 결과 보고 하려는 경우이 메서드를 재정의 <xref:System.Xaml.XamlMember> 파생 클래스인 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우.</span><span class="sxs-lookup"><span data-stu-id="60161-344">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="60161-345"><xref:System.Xaml.XamlMember.LookupIsReadPublic%2A> 메서드가 가상 이며 따라서 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-345">The <xref:System.Xaml.XamlMember.LookupIsReadPublic%2A> method is virtual and therefore, can be overridden.</span></span> <span data-ttu-id="60161-346">재정의는 정보를 변경 하려면 (악의적으로 또는 그렇지 않은 경우) 보고 액세스 XAML 멤버의이 더 이상 정렬 되도록 예상 되는 방식으로 기본 CLR 선언의 형식 시스템 액세스 정보를 사용 하 여 될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-346">The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</span></span> <span data-ttu-id="60161-347">액세스 수준 보안에 중요 한 모든 검사에 대 한 기본 CLR 형식을 대신 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-347">For any security-critical checks of access levels, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.IsReadPublic" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsUnknown">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsUnknown ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsUnknown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsUnknown" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsUnknown () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsUnknown();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsUnknown : unit -&gt; bool&#xA;override this.LookupIsUnknown : unit -&gt; bool" Usage="xamlMember.LookupIsUnknown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="60161-348">이 <see cref="T:System.Xaml.XamlMember" />가 형식 및 멤버 확인에 사용되는 지원 시스템에서 확인될 수 없는 멤버를 나타내는지 여부를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-348">Returns whether this <see cref="T:System.Xaml.XamlMember" /> represents a member that is not resolvable by the backing system that is used for type and member resolution.</span></span></summary>
        <returns><span data-ttu-id="60161-349">이 <see cref="T:System.Xaml.XamlMember" />가 확인할 수 없는 멤버를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-349"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> represents a non-resolvable member; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-350">값을 가져올 때이 메서드를 호출할 수 있습니다 <xref:System.Xaml.XamlMember.IsUnknown%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-350">This method may be invoked when a caller gets a value from <xref:System.Xaml.XamlMember.IsUnknown%2A>.</span></span> <span data-ttu-id="60161-351">기본 구현은 반환 하거나 내부 리플렉션 기반 또는 검사에 대 한 결과 `null` 의 값 <xref:System.Xaml.XamlMember.UnderlyingMember%2A>해당 순서 대로 처리 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-351">The default implementation returns results that are based on either internal reflection or checking for a `null` value of <xref:System.Xaml.XamlMember.UnderlyingMember%2A>, processing in that order.</span></span>  
  
 <span data-ttu-id="60161-352">전체에 대 한 고유한 결과 보고 하려는 경우이 메서드를 재정의 <xref:System.Xaml.XamlMember> 파생 클래스인 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우.</span><span class="sxs-lookup"><span data-stu-id="60161-352">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.IsUnknown" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsWriteOnly">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsWriteOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsWriteOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsWriteOnly" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsWriteOnly () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsWriteOnly();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsWriteOnly : unit -&gt; bool&#xA;override this.LookupIsWriteOnly : unit -&gt; bool" Usage="xamlMember.LookupIsWriteOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="60161-353">이 <see cref="T:System.Xaml.XamlMember" />가 public <see langword="set" /> 접근자는 있지만 public <see langword="get" /> 접근자는 없는 멤버를 나타내는지 여부를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-353">Returns whether this <see cref="T:System.Xaml.XamlMember" /> represents a member that has a public <see langword="set" /> accessor but not a public <see langword="get" /> accessor.</span></span></summary>
        <returns><span data-ttu-id="60161-354">이 <see cref="T:System.Xaml.XamlMember" />가 쓰기 전용 멤버를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-354"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> represents a write-only member; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-355">기본 구현은 반환 `true` 경우는 <xref:System.Xaml.XamlMember.UnderlyingMember%2A> 존재 있는 공용 `set` 접근자 및 비공용 `get` 접근자 내부 리플렉션을 기준으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-355">The default implementation returns `true` if an <xref:System.Xaml.XamlMember.UnderlyingMember%2A> exists that has a public `set` accessor and a nonpublic `get` accessor, as determined by internal reflection.</span></span>  
  
 <span data-ttu-id="60161-356">이 메서드는 호출자에서 값을 가져올 때 <xref:System.Xaml.XamlMember.IsWriteOnly%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-356">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.IsWriteOnly%2A>.</span></span> <span data-ttu-id="60161-357">전체에 대 한 고유한 결과 보고 하려는 경우이 메서드를 재정의 <xref:System.Xaml.XamlMember> 파생 클래스인 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우.</span><span class="sxs-lookup"><span data-stu-id="60161-357">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.IsWriteOnly" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsWritePublic">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsWritePublic ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsWritePublic() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsWritePublic" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsWritePublic () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsWritePublic();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsWritePublic : unit -&gt; bool&#xA;override this.LookupIsWritePublic : unit -&gt; bool" Usage="xamlMember.LookupIsWritePublic " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="60161-358">이 <see cref="T:System.Xaml.XamlMember" />가 public <see langword="set" /> 접근자가 있는 멤버를 나타내는지 여부를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-358">Returns whether this <see cref="T:System.Xaml.XamlMember" /> represents a member that has a public <see langword="set" /> accessor.</span></span></summary>
        <returns><span data-ttu-id="60161-359">이 <see cref="T:System.Xaml.XamlMember" />가 쓰기 가능한 멤버를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-359"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> represents a writable member; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-360">기본 구현은 반환 결과 따라 내부 리플렉션 또는의 부정을 나타내는 <xref:System.Xaml.XamlMember.IsReadOnly%2A>, 그 순서 대로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-360">The default implementation returns results based  either internal reflection or the negation of <xref:System.Xaml.XamlMember.IsReadOnly%2A>, processing in that order.</span></span>  
  
 <span data-ttu-id="60161-361">이 메서드는 호출자에서 값을 가져올 때 <xref:System.Xaml.XamlMember.IsWritePublic%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-361">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.IsWritePublic%2A>.</span></span> <span data-ttu-id="60161-362">전체에 대 한 고유한 결과 보고 하려는 경우이 메서드를 재정의 <xref:System.Xaml.XamlMember> 파생 클래스인 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우.</span><span class="sxs-lookup"><span data-stu-id="60161-362">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="60161-363"><xref:System.Xaml.XamlMember.LookupIsWritePublic%2A> 메서드가 가상 이며 따라서 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-363">The <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A> method is virtual and therefore, can be overridden.</span></span> <span data-ttu-id="60161-364">재정의는 정보를 변경 하려면 (악의적으로 또는 그렇지 않은 경우) 보고 액세스 XAML 멤버의이 더 이상 정렬 되도록 예상 되는 방식으로 기본 CLR 선언의 형식 시스템 액세스 정보를 사용 하 여 될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-364">The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</span></span> <span data-ttu-id="60161-365">액세스 수준 보안에 중요 한 모든 검사에 대 한 기본 CLR 형식을 대신 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-365">For any security-critical checks of access levels, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.IsWritePublic" />
      </Docs>
    </Member>
    <Member MemberName="LookupMarkupExtensionBracketCharacters">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IReadOnlyDictionary&lt;char,char&gt; LookupMarkupExtensionBracketCharacters ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyDictionary`2&lt;char, char&gt; LookupMarkupExtensionBracketCharacters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupMarkupExtensionBracketCharacters" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupMarkupExtensionBracketCharacters () As IReadOnlyDictionary(Of Char, Char)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IReadOnlyDictionary&lt;char, char&gt; ^ LookupMarkupExtensionBracketCharacters();" />
      <MemberSignature Language="F#" Value="abstract member LookupMarkupExtensionBracketCharacters : unit -&gt; System.Collections.Generic.IReadOnlyDictionary&lt;char, char&gt;&#xA;override this.LookupMarkupExtensionBracketCharacters : unit -&gt; System.Collections.Generic.IReadOnlyDictionary&lt;char, char&gt;" Usage="xamlMember.LookupMarkupExtensionBracketCharacters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyDictionary&lt;System.Char,System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="60161-366">태그 확장에 대해 여는 대괄호와 닫는 대괄호 문자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-366">Returns the opening and closing bracket characters for a markup extension.</span></span></summary>
        <returns><span data-ttu-id="60161-367">여는 대괄호와 닫는 대괄호 문자를 포함하는 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-367">A collection containing the opening and closing bracket characters.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTargetType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupTargetType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupTargetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupTargetType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupTargetType () As XamlType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlType ^ LookupTargetType();" />
      <MemberSignature Language="F#" Value="abstract member LookupTargetType : unit -&gt; System.Xaml.XamlType&#xA;override this.LookupTargetType : unit -&gt; System.Xaml.XamlType" Usage="xamlMember.LookupTargetType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="60161-368"><see cref="T:System.Xaml.XamlType" />가 있을 수 있는 형식의 <see cref="T:System.Xaml.XamlMember" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-368">Returns the <see cref="T:System.Xaml.XamlType" /> of the type where the <see cref="T:System.Xaml.XamlMember" /> can exist.</span></span></summary>
        <returns><span data-ttu-id="60161-369"><see cref="T:System.Xaml.XamlMember" />가 있을 수 있는 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-369">The type where the <see cref="T:System.Xaml.XamlMember" /> can exist.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-370">기본 구현에서는 연결 가능한 및 연결할 수 없는 멤버를 구분합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-370">The default implementation distinguishes between attachable and non-attachable members.</span></span> <span data-ttu-id="60161-371">연결할 수 없는 멤버에 대 한 <xref:System.Xaml.XamlMember.LookupTargetType%2A> 항상 반환 <xref:System.Xaml.XamlMember.DeclaringType%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-371">For non-attachable members, <xref:System.Xaml.XamlMember.LookupTargetType%2A> always returns <xref:System.Xaml.XamlMember.DeclaringType%2A>.</span></span> <span data-ttu-id="60161-372">연결 가능한 멤버에 대 한 <xref:System.Xaml.XamlMember.LookupTargetType%2A> 검사에 따라 결과 반환 합니다 <xref:System.Xaml.XamlMember.UnderlyingMember%2A> 접근자 매개 변수 형식은 형식 컨텍스트를 기반으로 XAML 스키마를 해석 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-372">For attachable members, <xref:System.Xaml.XamlMember.LookupTargetType%2A> returns a result based on examining the <xref:System.Xaml.XamlMember.UnderlyingMember%2A> accessor parameter type and interprets that type based on XAML schema context.</span></span>  
  
 <span data-ttu-id="60161-373">이 메서드는 호출자에서 값을 가져올 때 <xref:System.Xaml.XamlMember.TargetType%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-373">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.TargetType%2A>.</span></span> <span data-ttu-id="60161-374">전체에 대 한 고유한 결과 보고 하려는 경우이 메서드를 재정의 <xref:System.Xaml.XamlMember> 파생 클래스인 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우.</span><span class="sxs-lookup"><span data-stu-id="60161-374">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.TargetType" />
      </Docs>
    </Member>
    <Member MemberName="LookupType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupType () As XamlType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlType ^ LookupType();" />
      <MemberSignature Language="F#" Value="abstract member LookupType : unit -&gt; System.Xaml.XamlType&#xA;override this.LookupType : unit -&gt; System.Xaml.XamlType" Usage="xamlMember.LookupType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="60161-375">이 멤버가 사용하는 형식의 <see cref="T:System.Xaml.XamlType" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-375">Returns the <see cref="T:System.Xaml.XamlType" /> of the type that is used by the member.</span></span></summary>
        <returns><span data-ttu-id="60161-376">이 멤버가 사용하는 형식의 <see cref="T:System.Xaml.XamlType" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-376">The <see cref="T:System.Xaml.XamlType" /> of the type that is used by the member.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-377">이 메서드는 호출자에서 값을 가져올 때 <xref:System.Xaml.XamlMember.Type%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-377">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.Type%2A>.</span></span> <span data-ttu-id="60161-378">원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlMember.Type%2A> 기본 내부 리플렉션을 통해 사용할 수 있는 값과 다른 값을 반환할 사용자 지정 제공 하는 경우 및 <xref:System.Xaml.Schema.XamlMemberInvoker> 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-378">Override this method if you want <xref:System.Xaml.XamlMember.Type%2A> to return a value that differs from the value that is enabled by default internal reflection, and if you are also providing custom <xref:System.Xaml.Schema.XamlMemberInvoker> information.</span></span>  
  
 <span data-ttu-id="60161-379">반환 된 항목에 대 한 다른 코드 경로 및 개념적 의미를 사용 하는 기본 구현은 <xref:System.Xaml.XamlType> 여부를 기반으로 하는이 <xref:System.Xaml.XamlMember> 속성, 메서드 또는 이벤트를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="60161-379">The default implementation uses different code paths and conceptual meanings for the returned <xref:System.Xaml.XamlType> that is based on whether this <xref:System.Xaml.XamlMember> represents a property, method, or event.</span></span>  
  
-   <span data-ttu-id="60161-380">속성의 경우 반환 된 <xref:System.Xaml.XamlType> 속성을 설정 또는 속성에서 반환 되는 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-380">For a property, the returned <xref:System.Xaml.XamlType> is the type that sets the property or is returned by the property.</span></span>  
  
-   <span data-ttu-id="60161-381">반환 된 이벤트 <xref:System.Xaml.XamlType> 필요한 이벤트 처리기 형식 (CLR 구현에서 대리자)입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-381">For an event, the returned <xref:System.Xaml.XamlType> is the required event handler type (a delegate in a CLR implementation).</span></span>  
  
-   <span data-ttu-id="60161-382">메서드의 경우 <xref:System.Xaml.XamlType> 반환 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-382">For a method, <xref:System.Xaml.XamlType> is the return type.</span></span>  
  
 <span data-ttu-id="60161-383">각각의 경우에서 XAML 스키마 컨텍스트 내부 시스템 형식과에서 XAML 형식을 평가에 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="60161-383">In each case, XAML schema context is used to evaluate the XAML type from the underlying system type.</span></span>  
  
 <span data-ttu-id="60161-384">이 메서드는 호출자에서 값을 가져올 때 <xref:System.Xaml.XamlMember.Type%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-384">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.Type%2A>.</span></span> <span data-ttu-id="60161-385">전체에 대 한 고유한 결과 보고 하려는 경우이 메서드를 재정의 <xref:System.Xaml.XamlMember> 파생 클래스인 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우.</span><span class="sxs-lookup"><span data-stu-id="60161-385">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.Type" />
      </Docs>
    </Member>
    <Member MemberName="LookupTypeConverter">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt; LookupTypeConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.ComponentModel.TypeConverter&gt; LookupTypeConverter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupTypeConverter" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupTypeConverter () As XamlValueConverter(Of TypeConverter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlValueConverter&lt;System::ComponentModel::TypeConverter ^&gt; ^ LookupTypeConverter();" />
      <MemberSignature Language="F#" Value="abstract member LookupTypeConverter : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;&#xA;override this.LookupTypeConverter : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;" Usage="xamlMember.LookupTypeConverter " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="60161-386">이 <see cref="T:System.Xaml.XamlMember" />와 연관된 형식 변환기 구현을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-386">Returns a type converter implementation that is associated with this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <returns><span data-ttu-id="60161-387"><see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 제약 조건이 있는 <see cref="T:System.ComponentModel.TypeConverter" /> 인스턴스이거나 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-387">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> instance with <see cref="T:System.ComponentModel.TypeConverter" /> constraint; or <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-388">기본 구현에서는 다음 논리와 처리 순서를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-388">The default implementation uses the following logic and processing order:</span></span>  
  
-   <span data-ttu-id="60161-389">특성에 있으면 멤버 수준 (<xref:System.ComponentModel.TypeConverterAttribute>), 특성 정보에 대 한 호출에 사용 됩니다 <xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A> XAML 스키마 컨텍스트에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-389">If attributing exists at the member level (<xref:System.ComponentModel.TypeConverterAttribute>), the attribute information is used for a call to <xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A> against the XAML schema context.</span></span>  
  
-   <span data-ttu-id="60161-390">경우 <xref:System.Xaml.XamlMember.Type%2A> 유효 형식과 연결 된 형식 변환기를 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="60161-390">If <xref:System.Xaml.XamlMember.Type%2A> is valid, a type converter that is associated with the type is returned.</span></span>  
  
-   <span data-ttu-id="60161-391">멤버는 이벤트에 이벤트 관련 형식 변환기를 사용 하는 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="60161-391">If the member is an event, an event-specific type converter is returned.</span></span>  
  
 <span data-ttu-id="60161-392">이 메서드는 호출자에서 값을 가져올 때 <xref:System.Xaml.XamlMember.TypeConverter%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-392">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.TypeConverter%2A>.</span></span> <span data-ttu-id="60161-393">전체에 대 한 고유한 결과 보고 하려는 경우이 메서드를 재정의 <xref:System.Xaml.XamlMember> 파생 클래스인 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우.</span><span class="sxs-lookup"><span data-stu-id="60161-393">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.TypeConverter" />
      </Docs>
    </Member>
    <Member MemberName="LookupUnderlyingGetter">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MethodInfo LookupUnderlyingGetter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo LookupUnderlyingGetter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupUnderlyingGetter" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupUnderlyingGetter () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MethodInfo ^ LookupUnderlyingGetter();" />
      <MemberSignature Language="F#" Value="abstract member LookupUnderlyingGetter : unit -&gt; System.Reflection.MethodInfo&#xA;override this.LookupUnderlyingGetter : unit -&gt; System.Reflection.MethodInfo" Usage="xamlMember.LookupUnderlyingGetter " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="60161-394">이 <see cref="T:System.Xaml.XamlMember" />와 연관된 <see langword="get" /> 접근자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-394">Returns a <see langword="get" /> accessor that is associated with this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <returns><span data-ttu-id="60161-395">연관된 <see langword="get" /> 접근자에 대한 <see cref="T:System.Reflection.MethodInfo" />이거나 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-395">The <see cref="T:System.Reflection.MethodInfo" /> for the associated <see langword="get" /> accessor; or <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-396">기본 구현은 해석를 <xref:System.Xaml.XamlMember.UnderlyingMember%2A> 속성으로 <xref:System.Reflection.PropertyInfo> 의 값을 반환 합니다 <xref:System.Reflection.PropertyInfo.GetGetMethod%2A?displayProperty=nameWithType> (로 매개 변수를 사용 하 여 `true`), 반환 되는 메서드를 public이 아닌 수 있음을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-396">The default implementation interprets the <xref:System.Xaml.XamlMember.UnderlyingMember%2A> property as <xref:System.Reflection.PropertyInfo> and returns the value of <xref:System.Reflection.PropertyInfo.GetGetMethod%2A?displayProperty=nameWithType> (with the parameter set to `true`), which means that the returned method can be nonpublic.</span></span> <span data-ttu-id="60161-397">이 동작에서 발생할 수 있습니다 `null` 특정 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-397">This behavior can result in `null` for certain cases.</span></span> <span data-ttu-id="60161-398">연결 된 접근자 존재 하거나 멤버 속성이 아닙니다. 있는 경우를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-398">including cases where no associated accessor exists or the member is not a property.</span></span>  
  
 <span data-ttu-id="60161-399">값을 가져올 때이 메서드가 호출 되는 <xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A> 연결된 된 속성 <xref:System.Xaml.Schema.XamlMemberInvoker>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-399">This method is invoked when a caller gets a value from the <xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A> property on an associated <xref:System.Xaml.Schema.XamlMemberInvoker>.</span></span> <span data-ttu-id="60161-400">전체에 대 한 고유한 결과 보고 하려는 경우이 메서드를 재정의 <xref:System.Xaml.XamlMember> 파생 클래스인 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우.</span><span class="sxs-lookup"><span data-stu-id="60161-400">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span> <span data-ttu-id="60161-401">구현 해야 <xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>, <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>, 및 <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> 상관 관계가 지정 된 결과 반환 하는 모두입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-401">Make sure to implement <xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>, <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>, and <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> so that they all return correlated results.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupUnderlyingMember">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MemberInfo LookupUnderlyingMember ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MemberInfo LookupUnderlyingMember() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupUnderlyingMember" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupUnderlyingMember () As MemberInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MemberInfo ^ LookupUnderlyingMember();" />
      <MemberSignature Language="F#" Value="abstract member LookupUnderlyingMember : unit -&gt; System.Reflection.MemberInfo&#xA;override this.LookupUnderlyingMember : unit -&gt; System.Reflection.MemberInfo" Usage="xamlMember.LookupUnderlyingMember " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="60161-402">이 <see cref="T:System.Reflection.MemberInfo" />와 연관된 CLR 형식 시스템 <see cref="T:System.Xaml.XamlMember" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-402">Returns a CLR type system <see cref="T:System.Reflection.MemberInfo" /> that is associated with this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <returns><span data-ttu-id="60161-403">이 <see cref="T:System.Reflection.MemberInfo" />와 연관된 CLR 형식 시스템 <see cref="T:System.Xaml.XamlMember" /> 개체이거나 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-403">A CLR type system <see cref="T:System.Reflection.MemberInfo" /> object that is associated with this <see cref="T:System.Xaml.XamlMember" />; or <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-404">기본 구현은 생성을 기반으로 하는 기본 멤버 정보를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-404">The default implementation returns the underlying member information, which is based on construction.</span></span> <span data-ttu-id="60161-405">경우는 <xref:System.Reflection.MemberInfo> 내부 멤버를 설정 하려면 충분 한 정보를 제공 하지 않는 서명을 사용 하 여 개체가 생성 되 면이 메서드는 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-405">If the <xref:System.Reflection.MemberInfo> object is constructed with a signature that does not provide enough information to set the underlying member, this method returns `null`.</span></span>  
  
 <span data-ttu-id="60161-406">기본 멤버를 생성 하는 동안 설정 된 경우이 메서드를 호출 하지 않아도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="60161-406">If an underlying member was set during construction, you should not need to call this method.</span></span>  
  
 <span data-ttu-id="60161-407">이 메서드는 호출자에서 값을 가져올 때 <xref:System.Xaml.XamlMember.UnderlyingMember%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-407">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.UnderlyingMember%2A>.</span></span> <span data-ttu-id="60161-408">전체에 대 한 고유한 결과 보고 하려는 경우이 메서드를 재정의 <xref:System.Xaml.XamlMember> 파생 클래스인 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우.</span><span class="sxs-lookup"><span data-stu-id="60161-408">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span> <span data-ttu-id="60161-409">구현 해야 <xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>, <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>, 및 <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> 상관 관계가 지정 된 결과 반환 하는 모두입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-409">Make sure to implement <xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>, <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>, and <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> so that they all return correlated results.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.UnderlyingMember" />
      </Docs>
    </Member>
    <Member MemberName="LookupUnderlyingSetter">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MethodInfo LookupUnderlyingSetter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo LookupUnderlyingSetter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupUnderlyingSetter" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupUnderlyingSetter () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MethodInfo ^ LookupUnderlyingSetter();" />
      <MemberSignature Language="F#" Value="abstract member LookupUnderlyingSetter : unit -&gt; System.Reflection.MethodInfo&#xA;override this.LookupUnderlyingSetter : unit -&gt; System.Reflection.MethodInfo" Usage="xamlMember.LookupUnderlyingSetter " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="60161-410">이 <see cref="T:System.Xaml.XamlMember" />와 연관된 <see langword="set" /> 접근자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-410">Returns a <see langword="set" /> accessor that is associated with this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <returns><span data-ttu-id="60161-411">연관된 <see langword="set" /> 접근자에 대한 <see cref="T:System.Reflection.MethodInfo" />이거나 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-411">The <see cref="T:System.Reflection.MethodInfo" /> for the associated <see langword="set" /> accessor; or <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-412">기본 구현은 해석 <xref:System.Xaml.XamlMember.UnderlyingMember%2A> 으로 <xref:System.Reflection.PropertyInfo> 의 값을 반환 합니다 <xref:System.Reflection.PropertyInfo.GetSetMethod%2A?displayProperty=nameWithType> (로 매개 변수를 사용 하 여 `true`), 반환 되는 메서드를 public이 아닌 수 있음을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-412">The default implementation interprets <xref:System.Xaml.XamlMember.UnderlyingMember%2A> as <xref:System.Reflection.PropertyInfo> and returns the value of <xref:System.Reflection.PropertyInfo.GetSetMethod%2A?displayProperty=nameWithType> (with the parameter set to `true`), which means that the returned method can be nonpublic.</span></span> <span data-ttu-id="60161-413">그러면 `null` 특정를 포함 한 경우 이러한 접근자 없습니다 나 멤버 속성이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="60161-413">This can result in `null` for certain cases, including cases where there is no such accessor, or the member is not a property.</span></span>  
  
 <span data-ttu-id="60161-414">이 메서드는 호출자에서 값을 가져올 때 호출 됩니다 <xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A> 에 연결 된 <xref:System.Xaml.Schema.XamlMemberInvoker>합니다. 전체에 대 한 고유한 결과 보고 하려는 경우이 메서드를 재정의 <xref:System.Xaml.XamlMember> 파생 클래스인 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우.</span><span class="sxs-lookup"><span data-stu-id="60161-414">This method is invoked when a caller gets a value from <xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A> on an associated <xref:System.Xaml.Schema.XamlMemberInvoker>.Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span> <span data-ttu-id="60161-415">구현 해야 <xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>, <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>, 및 <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> 상관 관계가 지정 된 결과 반환 하는 모두입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-415">Make sure to implement <xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>, <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>, and <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> so that they all return correlated results.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupValueSerializer">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt; LookupValueSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Windows.Markup.ValueSerializer&gt; LookupValueSerializer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupValueSerializer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupValueSerializer () As XamlValueConverter(Of ValueSerializer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlValueConverter&lt;System::Windows::Markup::ValueSerializer ^&gt; ^ LookupValueSerializer();" />
      <MemberSignature Language="F#" Value="abstract member LookupValueSerializer : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;&#xA;override this.LookupValueSerializer : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;" Usage="xamlMember.LookupValueSerializer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="60161-416">이 <see cref="T:System.Xaml.XamlMember" />와 연관된 값 serializer 구현을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-416">Returns a value serializer implementation that is associated with this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <returns><span data-ttu-id="60161-417"><see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 제약 조건이 있는 <see cref="T:System.Windows.Markup.ValueSerializer" /> 인스턴스이거나 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-417">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> instance with <see cref="T:System.Windows.Markup.ValueSerializer" /> constraint, or <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-418">기본 구현에서는 다음 논리와 처리 순서를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-418">The default implementation uses the following logic and processing order:</span></span>  
  
-   <span data-ttu-id="60161-419">특성에 있으면 멤버 수준 (<xref:System.Windows.Markup.ValueSerializerAttribute>), 특성 정보에 대 한 호출에 사용 됩니다 <xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A> XAML 스키마 컨텍스트에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-419">If attributing exists at the member level (<xref:System.Windows.Markup.ValueSerializerAttribute>), the attribute information is used for a call to <xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A> against the XAML schema context.</span></span>  
  
-   <span data-ttu-id="60161-420">경우 <xref:System.Xaml.XamlMember.Type%2A> 유효 형식과 연결 된 값 변환기가 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="60161-420">If <xref:System.Xaml.XamlMember.Type%2A> is valid, a value converter that is associated with the type is returned.</span></span>  
  
-   <span data-ttu-id="60161-421">이전 조건이 적용 되지 않은 경우 `null` 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="60161-421">If the previous conditions do not apply, `null` is returned.</span></span>  
  
 <span data-ttu-id="60161-422">이 메서드는 호출자에서 값을 가져올 때 <xref:System.Xaml.XamlMember.ValueSerializer%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-422">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.ValueSerializer%2A>.</span></span> <span data-ttu-id="60161-423">전체에 대 한 고유한 결과 보고 하려는 경우이 메서드를 재정의 <xref:System.Xaml.XamlMember> 파생 클래스인 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우.</span><span class="sxs-lookup"><span data-stu-id="60161-423">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.ValueSerializer" />
      </Docs>
    </Member>
    <Member MemberName="MarkupExtensionBracketCharacters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyDictionary&lt;char,char&gt; MarkupExtensionBracketCharacters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyDictionary`2&lt;char, char&gt; MarkupExtensionBracketCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.MarkupExtensionBracketCharacters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MarkupExtensionBracketCharacters As IReadOnlyDictionary(Of Char, Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IReadOnlyDictionary&lt;char, char&gt; ^ MarkupExtensionBracketCharacters { System::Collections::Generic::IReadOnlyDictionary&lt;char, char&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MarkupExtensionBracketCharacters : System.Collections.Generic.IReadOnlyDictionary&lt;char, char&gt;" Usage="System.Xaml.XamlMember.MarkupExtensionBracketCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyDictionary&lt;System.Char,System.Char&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60161-424">태그 확장에 대해 여는 대괄호와 닫는 대괄호 문자를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-424">Defines the opening and closing bracket characters for a markup extension.</span></span></summary>
        <value><span data-ttu-id="60161-425">여는 대괄호와 닫는 대괄호 문자를 포함하는 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-425">A collection containing the opening and closing bracket characters.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Xaml.XamlMember.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60161-426">이 <see cref="T:System.Xaml.XamlMember" />를 선언하는 <see langword="xamlName" /> 이름 문자열을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="60161-426">Gets the <see langword="xamlName" /> name string that declares this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <value><span data-ttu-id="60161-427">이 <see cref="T:System.Xaml.XamlMember" />를 선언하는 <see langword="xamlName" /> 이름 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-427">The <see langword="xamlName" /> name string that declares this <see cref="T:System.Xaml.XamlMember" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-428">이 값은 항상 생성 하는 동안 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="60161-428">This value is always set during construction.</span></span> <span data-ttu-id="60161-429">구현 되는 생성자 <xref:System.Xaml.XamlMember> 일반적으로 예외를 throw 함 초기 이름이 지정 되지 않은 경우 따라서 예상 되지 않는이 속성을 `null` 이거나 빈 문자열인 경우 기본.NET Framework XAML 서비스를 사용 하는 경우 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-429">The constructors that are implemented by <xref:System.Xaml.XamlMember> typically throw an exception if an initial name is not specified; therefore, do not expect this property to be `null` or an empty string, if you are using default .NET Framework XAML Services implementations.</span></span>  
  
 <span data-ttu-id="60161-430">[XamlName 문법](~/docs/framework/xaml-services/xamlname-grammar.md) CLR 형식 및 멤버에 대 한 명명 규칙 정확한 교집합이 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-430">[XamlName Grammar](~/docs/framework/xaml-services/xamlname-grammar.md) and naming rules for CLR type and members are not an exact intersect.</span></span> <span data-ttu-id="60161-431">CLR에서 올바른 멤버 이름을 선언할 수 있지만 XAML 이름에서 유효 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-431">It is possible to declare a member name that is legal under CLR but not valid under XAML naming.</span></span> <span data-ttu-id="60161-432">이 경우는 가능 하면 피해 야 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-432">You should avoid this situation if possible.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/11e4cada-41d2-494d-9531-0d3df4dfcbe3"><span data-ttu-id="60161-433">XamlName</span><span class="sxs-lookup"><span data-stu-id="60161-433">XamlName</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Xaml.XamlMember xamlMember1, System.Xaml.XamlMember xamlMember2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Xaml.XamlMember xamlMember1, class System.Xaml.XamlMember xamlMember2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (xamlMember1 As XamlMember, xamlMember2 As XamlMember) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Xaml::XamlMember ^ xamlMember1, System::Xaml::XamlMember ^ xamlMember2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Xaml.XamlMember * System.Xaml.XamlMember -&gt; bool" Usage="xamlMember1 = xamlMember2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlMember1" Type="System.Xaml.XamlMember" />
        <Parameter Name="xamlMember2" Type="System.Xaml.XamlMember" />
      </Parameters>
      <Docs>
        <param name="xamlMember1"><span data-ttu-id="60161-434"><see cref="T:System.Xaml.XamlMember" /> 또는 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-434">A <see cref="T:System.Xaml.XamlMember" /> or <see langword="null" />.</span></span></param>
        <param name="xamlMember2"><span data-ttu-id="60161-435"><see cref="T:System.Xaml.XamlMember" /> 또는 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-435">A <see cref="T:System.Xaml.XamlMember" /> or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="60161-436">지정된 두 <see cref="T:System.Xaml.XamlMember" /> 개체의 값이 같은지를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-436">Determines whether two specified <see cref="T:System.Xaml.XamlMember" /> objects have the same value.</span></span></summary>
        <returns><span data-ttu-id="60161-437"><see langword="true" />의 값이 <paramref name="xamlMember1" />의 값과 같으면 <paramref name="xamlMember2" />를 반환하고, 그러지 않으면 <see langword="false" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-437"><see langword="true" /> if the value of <paramref name="xamlMember1" /> is the same as the value of <paramref name="xamlMember2" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Xaml.XamlMember xamlMember1, System.Xaml.XamlMember xamlMember2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Xaml.XamlMember xamlMember1, class System.Xaml.XamlMember xamlMember2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (xamlMember1 As XamlMember, xamlMember2 As XamlMember) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Xaml::XamlMember ^ xamlMember1, System::Xaml::XamlMember ^ xamlMember2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Xaml.XamlMember * System.Xaml.XamlMember -&gt; bool" Usage="System.Xaml.XamlMember.op_Inequality (xamlMember1, xamlMember2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlMember1" Type="System.Xaml.XamlMember" />
        <Parameter Name="xamlMember2" Type="System.Xaml.XamlMember" />
      </Parameters>
      <Docs>
        <param name="xamlMember1"><span data-ttu-id="60161-438"><see cref="T:System.Xaml.XamlMember" /> 또는 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-438">A <see cref="T:System.Xaml.XamlMember" /> or <see langword="null" />.</span></span></param>
        <param name="xamlMember2"><span data-ttu-id="60161-439"><see cref="T:System.Xaml.XamlMember" /> 또는 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-439">A <see cref="T:System.Xaml.XamlMember" /> or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="60161-440">지정된 두 <see cref="T:System.Xaml.XamlMember" /> 개체의 값이 서로 다른지 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-440">Determines whether two specified <see cref="T:System.Xaml.XamlMember" /> objects have different values.</span></span></summary>
        <returns><span data-ttu-id="60161-441"><paramref name="xamlMember1" />의 값이 <paramref name="xamlMember2" />의 값과 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-441"><see langword="true" /> if the value of <paramref name="xamlMember1" /> differs from the value of <paramref name="xamlMember2" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredXamlNamespace">
      <MemberSignature Language="C#" Value="public string PreferredXamlNamespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PreferredXamlNamespace" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.PreferredXamlNamespace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PreferredXamlNamespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PreferredXamlNamespace { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PreferredXamlNamespace : string" Usage="System.Xaml.XamlMember.PreferredXamlNamespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60161-442">이 <see cref="T:System.Xaml.XamlMember" />에 대한 기본 XAML 네임스페이스를 식별하는 단일 XAML 네임스페이스 URI를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="60161-442">Gets the single XAML namespace URI that identifies the primary XAML namespace for this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <value><span data-ttu-id="60161-443">이 <see cref="T:System.Xaml.XamlMember" />에 대한 기본 XML 네임스페이스 식별자로서, 문자열로 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-443">The identifier for the primary XAML namespace for this <see cref="T:System.Xaml.XamlMember" />, as a string.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-444"><xref:System.Xaml.XamlMember.PreferredXamlNamespace%2A> 호출할 때와 동일한 값을 제공 하는 속성 <xref:System.Xaml.XamlMember.GetXamlNamespaces%2A> 다음 반환된 된 목록에서 첫 번째 값 문자열을 시작 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-444">The <xref:System.Xaml.XamlMember.PreferredXamlNamespace%2A> property provides the same value as calling <xref:System.Xaml.XamlMember.GetXamlNamespaces%2A> and then getting the first value string from the returned list.</span></span> <span data-ttu-id="60161-445">텍스트 또는 XAML 네임 스페이스 정보를 유지 하는 다른 표현을 상호 멤버를 작성 하는 경우 기본 XAML 네임 스페이스는 것 같습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-445">The preferred XAML namespace should be used when writing the member back to text or other representations that preserve XAML namespace information.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializationVisibility">
      <MemberSignature Language="C#" Value="public System.ComponentModel.DesignerSerializationVisibility SerializationVisibility { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ComponentModel.DesignerSerializationVisibility SerializationVisibility" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.SerializationVisibility" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SerializationVisibility As DesignerSerializationVisibility" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::DesignerSerializationVisibility SerializationVisibility { System::ComponentModel::DesignerSerializationVisibility get(); };" />
      <MemberSignature Language="F#" Value="member this.SerializationVisibility : System.ComponentModel.DesignerSerializationVisibility" Usage="System.Xaml.XamlMember.SerializationVisibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.DesignerSerializationVisibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60161-446">비주얼 디자이너에서 멤버를 어떻게 처리해야 하는지를 나타내는 <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="60161-446">Gets a <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> value, which indicates how a visual designer should process the member.</span></span></summary>
        <value><span data-ttu-id="60161-447"><see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 열거형의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-447">A value of the <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> enumeration.</span></span> <span data-ttu-id="60161-448">기본값은 <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-448">The default is <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType TargetType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType TargetType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.TargetType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetType As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ TargetType { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetType : System.Xaml.XamlType" Usage="System.Xaml.XamlMember.TargetType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60161-449"><see cref="T:System.Xaml.XamlType" />가 있을 수 있는 형식의 <see cref="T:System.Xaml.XamlMember" />을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="60161-449">Gets the <see cref="T:System.Xaml.XamlType" /> of the type where the <see cref="T:System.Xaml.XamlMember" /> can exist.</span></span></summary>
        <value><span data-ttu-id="60161-450"><see cref="T:System.Xaml.XamlMember" />가 있을 수 있는 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-450">The type where the <see cref="T:System.Xaml.XamlMember" /> can exist.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-451">반환 된 값을 연결할 수 있는 및 연결할 수 없는 멤버에 대해 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="60161-451">The returned value is different for attachable and non-attachable members.</span></span> <span data-ttu-id="60161-452">연결할 수 없는 멤버에 대 한 <xref:System.Xaml.XamlMember.TargetType%2A> 반환 <xref:System.Xaml.XamlMember.DeclaringType%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-452">For non-attachable members, <xref:System.Xaml.XamlMember.TargetType%2A> returns <xref:System.Xaml.XamlMember.DeclaringType%2A>.</span></span> <span data-ttu-id="60161-453">연결 가능한 멤버에 대 한 <xref:System.Xaml.XamlMember.LookupTargetType%2A> 이 논리를 기반으로 하는 결과 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-453">For attachable members, <xref:System.Xaml.XamlMember.LookupTargetType%2A> returns a result that is based on this logic:</span></span>  
  
-   <span data-ttu-id="60161-454">리플렉션을 지원을 확인할 수 없는 경우 (<xref:System.Xaml.XamlMember.IsUnknown%2A> `true`),이 메서드는 제네릭 개체 형식을 나타내는 내부 상수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-454">If reflection cannot resolve a backing (<xref:System.Xaml.XamlMember.IsUnknown%2A> `true`), this method returns an internal constant that represents a generic object type.</span></span>  
  
-   <span data-ttu-id="60161-455">이전 조건이 적용 되지 않는 경우 <xref:System.Xaml.XamlMember.LookupTargetType%2A> 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-455">If the previous condition does not apply, <xref:System.Xaml.XamlMember.LookupTargetType%2A> is called.</span></span> <span data-ttu-id="60161-456">기본 구현은 반환을 <xref:System.Xaml.XamlType> 구현 하는 메서드를 검사 하는 데 기반으로 하는 `get` 및 `set` 접근자입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-456">The default implementation returns a <xref:System.Xaml.XamlType> that is based on examining the methods that implement the `get` and `set` accessors.</span></span> <span data-ttu-id="60161-457">클래스에서 재정의 될 수 있습니다 <xref:System.Xaml.XamlMember.LookupTargetType%2A> 연결 가능한 멤버에 대 한 대상 유형을 보고할 수 있습니다 하는 다른 메타 데이터 형식 같은 다른 동작을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-457">A class might override <xref:System.Xaml.XamlMember.LookupTargetType%2A> to use a different behavior such as other metadata forms that might report target types for attachable members.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="xamlMember.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="60161-458">이 <see cref="T:System.Xaml.XamlMember" />의 문자열 표현을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-458">Returns a string representation of this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <returns><span data-ttu-id="60161-459">이 <see cref="T:System.Xaml.XamlMember" />의 문자열 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-459">A string representation of this <see cref="T:System.Xaml.XamlMember" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-460">이 구현은 <xref:System.Xaml.XamlMember.Name%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-460">This implementation returns <xref:System.Xaml.XamlMember.Name%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType Type" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.Type" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Type As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ Type { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Type : System.Xaml.XamlType" Usage="System.Xaml.XamlMember.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60161-461">이 멤버가 사용하는 형식의 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="60161-461">Gets the <see cref="T:System.Xaml.XamlType" /> of the type that is used by the member.</span></span></summary>
        <value><span data-ttu-id="60161-462">이 멤버가 사용하는 형식의 <see cref="T:System.Xaml.XamlType" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-462">The <see cref="T:System.Xaml.XamlType" /> of the type that is used by the member.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-463">호출 <xref:System.Xaml.XamlMember.Type%2A> 호출 <xref:System.Xaml.XamlMember.LookupType%2A> 또는 메서드의 특정 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-463">Calling <xref:System.Xaml.XamlMember.Type%2A> invokes <xref:System.Xaml.XamlMember.LookupType%2A> or a specific override of that method.</span></span> <span data-ttu-id="60161-464">이 초기 내부 리플렉션 논리 정보를 아직 설정 하지 않은 경우 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-464">This occurs when the initial internal reflection logic has not already set the information.</span></span>  
  
 <span data-ttu-id="60161-465">기본 동작에서 (없습니다 <xref:System.Xaml.XamlMember.LookupType%2A> 재정의), 반환 된 <xref:System.Xaml.XamlType> 다른 개념적 의미를 가질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-465">In the default behavior (no <xref:System.Xaml.XamlMember.LookupType%2A> override), the returned <xref:System.Xaml.XamlType> can have different conceptual meanings.</span></span> <span data-ttu-id="60161-466">여부에 따라 달라 집니다 어떤 의미가 적용이 <xref:System.Xaml.XamlMember> 다음 목록에 표시 속성, 메서드 또는 이벤트를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="60161-466">Which meaning applies depends on whether this <xref:System.Xaml.XamlMember> represents a property, method, or event, as the following list shows:</span></span>  
  
-   <span data-ttu-id="60161-467">속성의 경우 반환 된 <xref:System.Xaml.XamlType> 속성을 설정 또는 속성에서 반환 되는 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-467">For a property, the returned <xref:System.Xaml.XamlType> is the type that sets the property or is returned by the property.</span></span>  
  
-   <span data-ttu-id="60161-468">반환 된 이벤트 <xref:System.Xaml.XamlType> 필요한 이벤트 처리기 형식 (CLR 구현에서 대리자)입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-468">For an event, the returned <xref:System.Xaml.XamlType> is the required event handler type (a delegate in a CLR implementation).</span></span>  
  
-   <span data-ttu-id="60161-469">메서드에 대 한 <xref:System.Xaml.XamlType> 일 수 있는 해당 메서드의 반환 형식인 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-469">For a method, <xref:System.Xaml.XamlType> is the return type of that method, which may be `null`.</span></span>  
  
 <span data-ttu-id="60161-470">각각의 경우에서 XAML 형식을 지원 형식에서 평가 하는 XAML 스키마 컨텍스트 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="60161-470">In each case, the XAML schema context is used to evaluate the XAML type from the backing type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeConverter">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt; TypeConverter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.ComponentModel.TypeConverter&gt; TypeConverter" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.TypeConverter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeConverter As XamlValueConverter(Of TypeConverter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlValueConverter&lt;System::ComponentModel::TypeConverter ^&gt; ^ TypeConverter { System::Xaml::Schema::XamlValueConverter&lt;System::ComponentModel::TypeConverter ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeConverter : System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;" Usage="System.Xaml.XamlMember.TypeConverter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60161-471">XAML 선언된 개체의 형식 변환 생성에 사용될 수 있는 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="60161-471">Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object, which can be used for type conversion construction of XAML declared objects.</span></span></summary>
        <value><span data-ttu-id="60161-472">제네릭에 대한 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 제약 조건이 있는 <see cref="T:System.ComponentModel.TypeConverter" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-472">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> value, with a <see cref="T:System.ComponentModel.TypeConverter" /> constraint on the generic.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-473">호출 <xref:System.Xaml.XamlMember.TypeConverter%2A> 호출 <xref:System.Xaml.XamlMember.LookupTypeConverter%2A> 또는 메서드의 특정 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-473">Calling <xref:System.Xaml.XamlMember.TypeConverter%2A> invokes <xref:System.Xaml.XamlMember.LookupTypeConverter%2A> or a specific override of that method.</span></span> <span data-ttu-id="60161-474">이 동작은 초기 내부 리플렉션 논리 정보를 아직 설정 하지 않은 경우 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-474">This behavior occurs when the initial internal reflection logic has not already set the information.</span></span>  
  
 <span data-ttu-id="60161-475">Null이 아닌 속성을 반환 하는 구현에 대 한 값 <xref:System.Xaml.XamlMember.TypeConverter%2A> 가 작동 하는 반드시 <xref:System.ComponentModel.TypeConverter>입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-475">Implementations that return a non-null property value for <xref:System.Xaml.XamlMember.TypeConverter%2A> are not necessarily a working <xref:System.ComponentModel.TypeConverter>.</span></span> <span data-ttu-id="60161-476">다음은 가능한 null이 아닌 반환 값에 대 한 목록을 <xref:System.Xaml.XamlMember.TypeConverter%2A> 및 이러한 값이 나타내는 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-476">The following is a list of possible non-null return values for <xref:System.Xaml.XamlMember.TypeConverter%2A> and what these values represent:</span></span>  
  
-   <span data-ttu-id="60161-477">반환 값 또는 더 일반적으로 대상 형식 변환기의 해당 멤버에만 특성을 사용 하는 형식 변환기를 보고 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-477">The return value reports a type converter that is attributed specifically to that member or more generally to the target type of the converter.</span></span> <span data-ttu-id="60161-478">이 문제는 일반적으로 대부분의 XAML 형식 시스템을 형식 변환기를 인스턴스화하고 해당 메서드를 호출 하기 위해 XAML 프로세서 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-478">This behavior is typically what most XAML type systems and XAML processors look for in order to instantiate a type converter and invoke its methods.</span></span>  
  
-   <span data-ttu-id="60161-479">반환 값에는 기본 제공 값 변환기를 보고합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-479">The return value reports a built-in value converter.</span></span> <span data-ttu-id="60161-480">이 변환기는 XAML 작성기에서 수행 되는 특정 내부 작업에 대해 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-480">These converters exist for certain internal operations that are performed by a XAML writer.</span></span> <span data-ttu-id="60161-481">특히, 이러한 기본 제공 값 변환기는 XAML 언어 수준 기본 구성 요소에 원시 특성 문자열 값을 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-481">In particular, these built-in value converters convert the raw attribute string values to the XAML language-level primitives.</span></span> <span data-ttu-id="60161-482">.NET Framework XAML 서비스 구현에 대 한 이러한 기본 제공 형식 변환이 자주 시스템 어셈블리에 정의 된 형식 변환기에 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-482">For the .NET Framework XAML Services implementation, these built-in type conversions often forward to a type converter that is defined in the System assembly.</span></span> <span data-ttu-id="60161-483">에 대 한 변환 예를 들어를 <xref:System.Int32> 값에 변환에 전달 하는 기본 제공 따라서 합니다 <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterType%2A> 참조 값 <xref:System.ComponentModel.Int32Converter>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-483">For example, a conversion for an <xref:System.Int32> value has built-in forwarded conversion, and therefore, the <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterType%2A> value references <xref:System.ComponentModel.Int32Converter>.</span></span>  
  
-   <span data-ttu-id="60161-484">반환 값에는 제한 되지 않은 개체 모델의 특수 사례 보고 즉, 합니다 <xref:System.Xaml.XamlMember> 에 <xref:System.Xaml.XamlMember.Type%2A> 의 값 <xref:System.Object>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-484">The return value reports the special case of an unconstrained object model; that is, the <xref:System.Xaml.XamlMember> has a <xref:System.Xaml.XamlMember.Type%2A> value of <xref:System.Object>.</span></span> <span data-ttu-id="60161-485">이 경우에 <xref:System.Xaml.Schema.XamlValueConverter%601> 보고 하는 합니다 <xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A?displayProperty=nameWithType> 는 {`Object}`합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-485">In this case, the <xref:System.Xaml.Schema.XamlValueConverter%601> reports that the <xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A?displayProperty=nameWithType> is {`Object}`.</span></span> <span data-ttu-id="60161-486">그러나 <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A> 는 `null` 없는 실제 형식 또는 인스턴스는이 변환을 수행 하기 위해 사용할 수 있으므로 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-486">However, <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A> is `null` because no actual type or instance is available to perform this conversion.</span></span> <span data-ttu-id="60161-487">대신, 런타임까지 특정 기술의 런타임 개체 그래프의 처리를 결정 하는 경우 개체 모델의 동작을 확인할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-487">Instead, the object model behavior cannot be determined until run time, when the runtime of the specific technology determines the handling of its object graph.</span></span>  
  
 <span data-ttu-id="60161-488">작업에 액세스할 수 있으면 <xref:System.ComponentModel.TypeConverter> 에서 <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>, 변환 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-488">If you can access a working <xref:System.ComponentModel.TypeConverter> from <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>, you can invoke its conversion methods.</span></span> <span data-ttu-id="60161-489">그러나 여러 변환 메서드 서비스 컨텍스트에 의존합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-489">However, many conversion methods rely on service context.</span></span> <span data-ttu-id="60161-490">과 같은 서비스 컨텍스트 개체 그래프에 대 한 개체를 작성 하는 일반적인 역할에 대 한 형식 변환기를 필요로 하는 사용할 수 없는 경우 변환기 메서드 예외를 throw 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60161-490">If you do not have the same service context available that the type converter expects for its typical role of writing objects for object graphs, the converter methods can throw exceptions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo UnderlyingMember { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MemberInfo UnderlyingMember" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.UnderlyingMember" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnderlyingMember As MemberInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MemberInfo ^ UnderlyingMember { System::Reflection::MemberInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnderlyingMember : System.Reflection.MemberInfo" Usage="System.Xaml.XamlMember.UnderlyingMember" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60161-491"><see cref="T:System.Reflection.MemberInfo" />, <see cref="T:System.Reflection.PropertyInfo" /> 또는 <see cref="T:System.Reflection.MethodInfo" />에 의해 생성된 멤버에 사용할 수 있는 CLR 형식 시스템 <see cref="T:System.Reflection.EventInfo" />를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="60161-491">Gets the CLR type system <see cref="T:System.Reflection.MemberInfo" /> that is available for a member that is constructed by <see cref="T:System.Reflection.PropertyInfo" />, <see cref="T:System.Reflection.MethodInfo" />, or <see cref="T:System.Reflection.EventInfo" />.</span></span></summary>
        <value><span data-ttu-id="60161-492">초기 생성자 매개 변수에서 캐스트된 CLR 형식 시스템 <see cref="T:System.Reflection.MemberInfo" /> 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-492">CLR type system <see cref="T:System.Reflection.MemberInfo" /> information, as cast from the initial constructor parameters.</span></span> <span data-ttu-id="60161-493"><see cref="T:System.Xaml.XamlMember" /> 시그니처로 생성된 <see cref="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" />는 <see langword="null" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-493">A <see cref="T:System.Xaml.XamlMember" /> that is constructed with the <see cref="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" /> signature returns <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-494">호출 <xref:System.Xaml.XamlMember.UnderlyingMember%2A> 호출 <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> 또는 메서드의 특정 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-494">Calling <xref:System.Xaml.XamlMember.UnderlyingMember%2A> invokes <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> or a specific override of that method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueSerializer">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt; ValueSerializer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Windows.Markup.ValueSerializer&gt; ValueSerializer" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.ValueSerializer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValueSerializer As XamlValueConverter(Of ValueSerializer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlValueConverter&lt;System::Windows::Markup::ValueSerializer ^&gt; ^ ValueSerializer { System::Xaml::Schema::XamlValueConverter&lt;System::Windows::Markup::ValueSerializer ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValueSerializer : System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;" Usage="System.Xaml.XamlMember.ValueSerializer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60161-495">XAML 선언된 개체의 값 serialization에 사용되는 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="60161-495">Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object, which is used for value serialization of XAML declared objects.</span></span></summary>
        <value><span data-ttu-id="60161-496">제네릭에 대한 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 제약 조건이 포함된 <see cref="T:System.Windows.Markup.ValueSerializer" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60161-496">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Windows.Markup.ValueSerializer" /> constraint on the generic.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60161-497">호출 <xref:System.Xaml.XamlMember.ValueSerializer%2A> 호출 <xref:System.Xaml.XamlMember.LookupValueSerializer%2A> 또는 메서드의 특정 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-497">Calling <xref:System.Xaml.XamlMember.ValueSerializer%2A> invokes <xref:System.Xaml.XamlMember.LookupValueSerializer%2A> or a specific override of that method.</span></span> <span data-ttu-id="60161-498">이 동작은 초기 내부 리플렉션 논리 정보를 아직 설정 하지 않은 경우 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-498">This behavior occurs when the initial internal reflection logic has not already set the information.</span></span>  
  
 <span data-ttu-id="60161-499">Null이 아닌 속성을 반환 하는 모든 사례에 대 한 값 <xref:System.Xaml.XamlMember.ValueSerializer%2A> 반드시 작동 하는 <xref:System.Windows.Markup.ValueSerializer>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-499">Not all cases that return a non-null property value for <xref:System.Xaml.XamlMember.ValueSerializer%2A> are necessarily a working <xref:System.Windows.Markup.ValueSerializer>.</span></span> <span data-ttu-id="60161-500">참조 <xref:System.Xaml.XamlMember.TypeConverter%2A>;에 동일한 고려 사항이 적용 <xref:System.Xaml.XamlMember.ValueSerializer%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="60161-500">See <xref:System.Xaml.XamlMember.TypeConverter%2A>; the same considerations apply to <xref:System.Xaml.XamlMember.ValueSerializer%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>