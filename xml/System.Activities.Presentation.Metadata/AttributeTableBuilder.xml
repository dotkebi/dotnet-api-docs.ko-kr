<Type Name="AttributeTableBuilder" FullName="System.Activities.Presentation.Metadata.AttributeTableBuilder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2e40950b081c8e6ad86ecad5761b8dacdd34565c" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57957443" /></Metadata><TypeSignature Language="C#" Value="public class AttributeTableBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AttributeTableBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Presentation.Metadata.AttributeTableBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class AttributeTableBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class AttributeTableBuilder" />
  <TypeSignature Language="F#" Value="type AttributeTableBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities.Presentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="ebfe4-101"><see cref="T:System.Activities.Presentation.Metadata.AttributeTable" />가 특성 조회 및 등록을 제공하는 데 사용하는 <see cref="T:System.Activities.Presentation.Metadata.MetadataStore" />을 만들고 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-101">Creates and populates an <see cref="T:System.Activities.Presentation.Metadata.AttributeTable" /> that is used by the <see cref="T:System.Activities.Presentation.Metadata.MetadataStore" /> to provide attribute lookup and registration.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebfe4-102"><xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A>, <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes%2A> 및 <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddTable%2A>을 사용하여 작성기를 채운 다음 <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.CreateTable%2A>을 호출하여 원하는 특성 컬렉션이 포함된 <xref:System.Activities.Presentation.Metadata.AttributeTable>을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-102">Use <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A>, <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes%2A>, and <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddTable%2A> to populate the builder, then call <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.CreateTable%2A> to acquire an <xref:System.Activities.Presentation.Metadata.AttributeTable> containing the desired collection of attributes.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AttributeTableBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AttributeTableBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ebfe4-103"><see cref="T:System.Activities.Presentation.Metadata.AttributeTableBuilder" /> 클래스의 새 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-103">Creates a new instance of the <see cref="T:System.Activities.Presentation.Metadata.AttributeTableBuilder" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCallback">
      <MemberSignature Language="C#" Value="public void AddCallback (Type type, System.Activities.Presentation.Metadata.AttributeCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCallback(class System.Type type, class System.Activities.Presentation.Metadata.AttributeCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback(System.Type,System.Activities.Presentation.Metadata.AttributeCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCallback(Type ^ type, System::Activities::Presentation::Metadata::AttributeCallback ^ callback);" />
      <MemberSignature Language="F#" Value="member this.AddCallback : Type * System.Activities.Presentation.Metadata.AttributeCallback -&gt; unit" Usage="attributeTableBuilder.AddCallback (type, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="callback" Type="System.Activities.Presentation.Metadata.AttributeCallback" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="ebfe4-104">콜백이 메타데이터를 제공할 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-104">The type for which the callback will provide metadata.</span></span></param>
        <param name="callback"><span data-ttu-id="ebfe4-105">콜백 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-105">The callback method.</span></span></param>
        <summary><span data-ttu-id="ebfe4-106">지정된 형식의 메타데이터가 필요할 때 호출될 콜백을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-106">Specifies a callback that will be invoked when metadata for the given type is needed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebfe4-107"><xref:System.Activities.Presentation.Metadata.AttributeTable>에서 반환한 <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.CreateTable%2A>이 `type`에 대한 특성으로 처음 쿼리될 때 메타데이터 정보를 제공하기 위해 `callback`이 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-107">The first time an <xref:System.Activities.Presentation.Metadata.AttributeTable> returned by <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.CreateTable%2A> is queried for attributes for `type`, `callback` is called to provide the metadata information.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ebfe4-108">제공된 특성의 내용을 이 작성기에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-108">Adds the contents of the provided attributes to this builder.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebfe4-109">특성이 작성기에 이미 포함된 다른 특성과 충돌하는 경우 마지막에 추가한 특성이 이전 특성을 대체합니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-109">If an attribute conflicts with another attribute already included in the builder, the last attribute added replaces previous attributes.</span></span>  
  
 <span data-ttu-id="ebfe4-110">큰 특성 테이블을 만들 때는 <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A>을 사용하여 필요할 때까지 특성을 만드는 작업을 지연합니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-110">When building a large attribute table, use <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A> to defer the work of creating attributes until they are needed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddCustomAttributes">
      <MemberSignature Language="C#" Value="public void AddCustomAttributes (Type type, params Attribute[] attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCustomAttributes(class System.Type type, class System.Attribute[] attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.Attribute[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCustomAttributes(Type ^ type, ... cli::array &lt;Attribute ^&gt; ^ attributes);" />
      <MemberSignature Language="F#" Value="member this.AddCustomAttributes : Type * Attribute[] -&gt; unit" Usage="attributeTableBuilder.AddCustomAttributes (type, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="attributes" Type="System.Attribute[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-4.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="ebfe4-111">클래스 수준 특성을 추가할 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-111">The type to add class-level attributes to.</span></span></param>
        <param name="attributes"><span data-ttu-id="ebfe4-112">작성기에 추가되는 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-112">The attributes that are added to the builder.</span></span></param>
        <summary><span data-ttu-id="ebfe4-113">제공된 특성의 내용을 이 작성기에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-113">Adds the contents of the provided attributes to this builder.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebfe4-114">특성이 작성기에 이미 포함된 다른 특성과 충돌하는 경우 마지막에 추가한 특성이 이전 특성을 대체합니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-114">If an attribute conflicts with another attribute already included in the builder, the last attribute added replaces previous attributes.</span></span>  
  
 <span data-ttu-id="ebfe4-115">큰 특성 테이블을 만들 때는 <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A>을 사용하여 필요할 때까지 특성을 만드는 작업을 지연합니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-115">When building a large attribute table, use <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A> to defer the work of creating attributes until they are needed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ebfe4-116"><paramref name="type" /> 또는 <paramref name="attributes" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="ebfe4-116"><paramref name="type" /> or <paramref name="attributes" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddCustomAttributes">
      <MemberSignature Language="C#" Value="public void AddCustomAttributes (Type ownerType, System.ComponentModel.MemberDescriptor descriptor, params Attribute[] attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCustomAttributes(class System.Type ownerType, class System.ComponentModel.MemberDescriptor descriptor, class System.Attribute[] attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.ComponentModel.MemberDescriptor,System.Attribute[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCustomAttributes (ownerType As Type, descriptor As MemberDescriptor, ParamArray attributes As Attribute())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCustomAttributes(Type ^ ownerType, System::ComponentModel::MemberDescriptor ^ descriptor, ... cli::array &lt;Attribute ^&gt; ^ attributes);" />
      <MemberSignature Language="F#" Value="member this.AddCustomAttributes : Type * System.ComponentModel.MemberDescriptor * Attribute[] -&gt; unit" Usage="attributeTableBuilder.AddCustomAttributes (ownerType, descriptor, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="descriptor" Type="System.ComponentModel.MemberDescriptor" />
        <Parameter Name="attributes" Type="System.Attribute[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-4.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ownerType"><span data-ttu-id="ebfe4-117"><paramref name="descriptor" />로 식별되는 멤버를 포함하는 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-117">The type that contains the member identified by <paramref name="descriptor" />.</span></span></param>
        <param name="descriptor"><span data-ttu-id="ebfe4-118">특성이 추가되는 이벤트 또는 속성 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-118">The event or property info that the attributes are added to.</span></span></param>
        <param name="attributes"><span data-ttu-id="ebfe4-119">작성기에 추가되는 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-119">The attributes that are added to the builder.</span></span></param>
        <summary><span data-ttu-id="ebfe4-120">제공된 특성의 내용을 이 작성기에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-120">Adds the contents of the provided attributes to this builder.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebfe4-121">특성이 작성기에 이미 포함된 다른 특성과 충돌하는 경우 마지막에 추가한 특성이 이전 특성을 대체합니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-121">If an attribute conflicts with another attribute already included in the builder, the last attribute added replaces previous attributes.</span></span>  
  
 <span data-ttu-id="ebfe4-122">큰 특성 테이블을 만들 때는 <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A>을 사용하여 필요할 때까지 특성을 만드는 작업을 지연합니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-122">When building a large attribute table, use <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A> to defer the work of creating attributes until they are needed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ebfe4-123"><paramref name="ownerType" />, <paramref name="descriptor" /> 또는 <paramref name="attributes" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="ebfe4-123"><paramref name="ownerType" />, <paramref name="descriptor" /> or <paramref name="attributes" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddCustomAttributes">
      <MemberSignature Language="C#" Value="public void AddCustomAttributes (Type ownerType, System.Reflection.MemberInfo member, params Attribute[] attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCustomAttributes(class System.Type ownerType, class System.Reflection.MemberInfo member, class System.Attribute[] attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.Reflection.MemberInfo,System.Attribute[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCustomAttributes (ownerType As Type, member As MemberInfo, ParamArray attributes As Attribute())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCustomAttributes(Type ^ ownerType, System::Reflection::MemberInfo ^ member, ... cli::array &lt;Attribute ^&gt; ^ attributes);" />
      <MemberSignature Language="F#" Value="member this.AddCustomAttributes : Type * System.Reflection.MemberInfo * Attribute[] -&gt; unit" Usage="attributeTableBuilder.AddCustomAttributes (ownerType, member, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="attributes" Type="System.Attribute[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-4.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ownerType"><span data-ttu-id="ebfe4-124"><paramref name="member" />로 식별되는 멤버를 포함하는 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-124">The type that contains the member identified by <paramref name="member" />.</span></span></param>
        <param name="member"><span data-ttu-id="ebfe4-125">특성이 추가되는 이벤트 또는 속성 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-125">The event or property info that the attributes are added to.</span></span></param>
        <param name="attributes"><span data-ttu-id="ebfe4-126">작성기에 추가되는 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-126">The attributes that are added to the builder.</span></span></param>
        <summary><span data-ttu-id="ebfe4-127">제공된 특성의 내용을 이 작성기에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-127">Adds the contents of the provided attributes to this builder.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebfe4-128">특성이 작성기에 이미 포함된 다른 특성과 충돌하는 경우 마지막에 추가한 특성이 이전 특성을 대체합니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-128">If an attribute conflicts with another attribute already included in the builder, the last attribute added replaces previous attributes.</span></span>  
  
 <span data-ttu-id="ebfe4-129">큰 특성 테이블을 만들 때는 <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A>을 사용하여 필요할 때까지 특성을 만드는 작업을 지연합니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-129">When building a large attribute table, use <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A> to defer the work of creating attributes until they are needed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ebfe4-130"><paramref name="ownerType" />, <paramref name="member" /> 또는 <paramref name="attributes" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="ebfe4-130"><paramref name="ownerType" />, <paramref name="member" /> or <paramref name="attributes" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddCustomAttributes">
      <MemberSignature Language="C#" Value="public void AddCustomAttributes (Type ownerType, string memberName, params Attribute[] attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCustomAttributes(class System.Type ownerType, string memberName, class System.Attribute[] attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.String,System.Attribute[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCustomAttributes (ownerType As Type, memberName As String, ParamArray attributes As Attribute())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCustomAttributes(Type ^ ownerType, System::String ^ memberName, ... cli::array &lt;Attribute ^&gt; ^ attributes);" />
      <MemberSignature Language="F#" Value="member this.AddCustomAttributes : Type * string * Attribute[] -&gt; unit" Usage="attributeTableBuilder.AddCustomAttributes (ownerType, memberName, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="memberName" Type="System.String" />
        <Parameter Name="attributes" Type="System.Attribute[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-4.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ownerType"><span data-ttu-id="ebfe4-131"><paramref name="memberName" />로 식별되는 멤버를 포함하는 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-131">The type that contains the member identified by <paramref name="memberName" />.</span></span></param>
        <param name="memberName"><span data-ttu-id="ebfe4-132">특성이 추가되는 속성 정보 또는 이벤트의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-132">The name of the event or property info that the attributes are added to.</span></span></param>
        <param name="attributes"><span data-ttu-id="ebfe4-133">작성기에 추가되는 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-133">The attributes that are added to the builder.</span></span></param>
        <summary><span data-ttu-id="ebfe4-134">제공된 특성의 내용을 이 작성기에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-134">Adds the contents of the provided attributes to this builder.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebfe4-135">특성이 작성기에 이미 포함된 다른 특성과 충돌하는 경우 마지막에 추가한 특성이 이전 특성을 대체합니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-135">If an attribute conflicts with another attribute already included in the builder, the last attribute added replaces previous attributes.</span></span>  
  
 <span data-ttu-id="ebfe4-136">큰 특성 테이블을 만들 때는 <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A>을 사용하여 필요할 때까지 특성을 만드는 작업을 지연합니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-136">When building a large attribute table, use <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A> to defer the work of creating attributes until they are needed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ebfe4-137"><paramref name="ownerType" />, <paramref name="memberName" /> 또는 <paramref name="attributes" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-137"><paramref name="ownerType" />, <paramref name="memberName" />, or <paramref name="attributes" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddCustomAttributes">
      <MemberSignature Language="C#" Value="public void AddCustomAttributes (Type ownerType, System.Windows.DependencyProperty dp, params Attribute[] attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCustomAttributes(class System.Type ownerType, class System.Windows.DependencyProperty dp, class System.Attribute[] attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.Windows.DependencyProperty,System.Attribute[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCustomAttributes (ownerType As Type, dp As DependencyProperty, ParamArray attributes As Attribute())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCustomAttributes(Type ^ ownerType, System::Windows::DependencyProperty ^ dp, ... cli::array &lt;Attribute ^&gt; ^ attributes);" />
      <MemberSignature Language="F#" Value="member this.AddCustomAttributes : Type * System.Windows.DependencyProperty * Attribute[] -&gt; unit" Usage="attributeTableBuilder.AddCustomAttributes (ownerType, dp, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="attributes" Type="System.Attribute[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-4.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ownerType"><span data-ttu-id="ebfe4-138"><paramref name="dp" />로 식별되는 종속성을 포함하는 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-138">The type that contains the dependency identified by <paramref name="dp" />.</span></span></param>
        <param name="dp"><span data-ttu-id="ebfe4-139">특성을 추가할 종속성 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-139">A dependency property to add attributes to.</span></span></param>
        <param name="attributes"><span data-ttu-id="ebfe4-140">작성기에 추가되는 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-140">The attributes that are added to the builder.</span></span></param>
        <summary><span data-ttu-id="ebfe4-141">제공된 특성의 내용을 이 작성기에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-141">Adds the contents of the provided attributes to this builder.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebfe4-142">특성이 작성기에 이미 포함된 다른 특성과 충돌하는 경우 마지막에 추가한 특성이 이전 특성을 대체합니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-142">If an attribute conflicts with another attribute already included in the builder, the last attribute added replaces previous attributes.</span></span>  
  
 <span data-ttu-id="ebfe4-143">큰 특성 테이블을 만들 때는 <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A>을 사용하여 필요할 때까지 특성을 만드는 작업을 지연합니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-143">When building a large attribute table, use <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A> to defer the work of creating attributes until they are needed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ebfe4-144"><paramref name="ownerType" />, <paramref name="dp" /> 또는 <paramref name="attributes" />이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="ebfe4-144"><paramref name="ownerType" />, <paramref name="dp" /> or <paramref name="attributes" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddTable">
      <MemberSignature Language="C#" Value="public void AddTable (System.Activities.Presentation.Metadata.AttributeTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddTable(class System.Activities.Presentation.Metadata.AttributeTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddTable(System.Activities.Presentation.Metadata.AttributeTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddTable (table As AttributeTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddTable(System::Activities::Presentation::Metadata::AttributeTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.AddTable : System.Activities.Presentation.Metadata.AttributeTable -&gt; unit" Usage="attributeTableBuilder.AddTable table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Activities.Presentation.Metadata.AttributeTable" />
      </Parameters>
      <Docs>
        <param name="table"><span data-ttu-id="ebfe4-145">원본 특성 테이블입니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-145">The source attribute table.</span></span></param>
        <summary><span data-ttu-id="ebfe4-146">제공된 특성 테이블의 내용을 이 작성기에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-146">Adds the contents of the provided attribute table to this builder.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebfe4-147">특성이 작성기에 이미 포함된 다른 특성과 충돌하는 경우 마지막에 추가한 특성이 이전 특성을 대체합니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-147">If an attribute conflicts with another attribute already included in the builder, the last attribute added replaces previous attributes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ebfe4-148"><paramref name="table" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-148"><paramref name="table" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateTable">
      <MemberSignature Language="C#" Value="public System.Activities.Presentation.Metadata.AttributeTable CreateTable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Activities.Presentation.Metadata.AttributeTable CreateTable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.CreateTable" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateTable () As AttributeTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Activities::Presentation::Metadata::AttributeTable ^ CreateTable();" />
      <MemberSignature Language="F#" Value="member this.CreateTable : unit -&gt; System.Activities.Presentation.Metadata.AttributeTable" Usage="attributeTableBuilder.CreateTable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Presentation.Metadata.AttributeTable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ebfe4-149"><see cref="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.Attribute[])" /> 호출을 통해 제공된 모든 특성 정의가 포함된 특성 테이블을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-149">Creates an attribute table that contains all of the attribute definitions provided through <see cref="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.Attribute[])" /> calls.</span></span></summary>
        <returns><span data-ttu-id="ebfe4-150">메타데이터 저장소에 전달할 수 있는 <see cref="T:System.Activities.Presentation.Metadata.AttributeTable" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-150">An <see cref="T:System.Activities.Presentation.Metadata.AttributeTable" /> that can be passed to the metadata store.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebfe4-151">테이블은 특성 작성기의 현재 상태 스냅숏이며, 이후 <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes%2A> 호출로 추가되는 특성은 테이블에 포함되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-151">The table is a snapshot of the current state of the attribute builder; any attributes added by subsequent <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes%2A> calls are not included in the table.</span></span>  
  
 <span data-ttu-id="ebfe4-152">특성을 선언하는 데 콜백 메서드가 사용되는 경우 이러한 메서드는 <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.CreateTable%2A> 중에 확인되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-152">If callback methods were used to declare attributes, those methods will not be evaluated during <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.CreateTable%2A>.</span></span> <span data-ttu-id="ebfe4-153">대신 테이블이 이러한 콜백을 포함하고 필요에 따라 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-153">Instead, the table will contain those callbacks and will evaluate them as needed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateTable">
      <MemberSignature Language="C#" Value="public void ValidateTable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateTable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.ValidateTable" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateTable ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateTable();" />
      <MemberSignature Language="F#" Value="member this.ValidateTable : unit -&gt; unit" Usage="attributeTableBuilder.ValidateTable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ebfe4-154">작성되는 특성 테이블에 유효한 특성 정보가 포함되는지 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-154">Verifies that the attribute table that is being built contains valid attribute information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ebfe4-155">재정의 중 일부 <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes%2A> 매개 변수에 전달 되는 값 클래스의 유효한 멤버를 나타내는 검사할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-155">Some overrides of <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes%2A> cannot validate that values passed to their parameters represent valid members on classes.</span></span> <span data-ttu-id="ebfe4-156"><xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.ValidateTable%2A>은 모든 사용자 지정 특성 정보가 실제 멤버에 해당하는지 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-156"><xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.ValidateTable%2A> verifies that all custom attribute information corresponds to actual members.</span></span> <span data-ttu-id="ebfe4-157">이 메서드는 완료되는 데 많은 시간이 소요되므로 유효성 검사가 명시적으로 필요한 경우에만 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="ebfe4-157">This method can take a long time to complete and is not recommended unless validation is explicitly needed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Activities.Presentation.Metadata.AttributeTableValidationException"><span data-ttu-id="ebfe4-158">테이블의 상태가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="ebfe4-158">the state of the table is invalid.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>