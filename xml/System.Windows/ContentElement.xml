<Type Name="ContentElement" FullName="System.Windows.ContentElement">
  <Metadata><Meta Name="ms.openlocfilehash" Value="aa85743d6a364530c4a2bb6414241b766420cfc5" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57935499" /></Metadata><TypeSignature Language="C#" Value="public class ContentElement : System.Windows.DependencyObject, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ContentElement extends System.Windows.DependencyObject implements class System.Windows.IInputElement, class System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.ContentElement" />
  <TypeSignature Language="VB.NET" Value="Public Class ContentElement&#xA;Inherits DependencyObject&#xA;Implements IAnimatable, IInputElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class ContentElement : System::Windows::DependencyObject, System::Windows::IInputElement, System::Windows::Media::Animation::IAnimatable" />
  <TypeSignature Language="F#" Value="type ContentElement = class&#xA;    inherit DependencyObject&#xA;    interface IInputElement&#xA;    interface IAnimatable" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Media.Animation.IAnimatable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="7d306-101">콘텐츠 요소에 대한 WPF 핵심 수준 기본 클래스를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-101">Provides a WPF core-level base class for content elements.</span></span> <span data-ttu-id="7d306-102">콘텐츠 요소는 직관적인 태그 지향 레이아웃 모델 및 단순한 개체 모델을 사용하는 흐름 스타일 프레젠테이션을 위한 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-102">Content elements are designed for flow-style presentation, using an intuitive markup-oriented layout model and a deliberately simple object model.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-103"><xref:System.Windows.ContentElement> 다음 일반적인 콘텐츠 특성을 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-103"><xref:System.Windows.ContentElement> defines the following common content characteristics:</span></span>  
  
-   <span data-ttu-id="7d306-104">입력: 모든 <xref:System.Windows.ContentElement> 파생된 클래스는 키보드, 마우스, 끌어서 놓기 작업, 스타일러스 컨트롤 및 액셀러레이터 키에서 기본 입력된 캡처에 대 한 지원을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-104">Input: All <xref:System.Windows.ContentElement> derived classes provide support for basic input capture from keyboard, mouse, drag-and-drop operations, stylus controls, and accelerators.</span></span>  
  
-   <span data-ttu-id="7d306-105">장점: 모든 <xref:System.Windows.ContentElement> 파생된 클래스는 잠재적으로 포커스를 받을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-105">Focus: All <xref:System.Windows.ContentElement> derived classes are potentially focusable.</span></span> <span data-ttu-id="7d306-106">그러나 (에 대 한 기본 포커스 상태를 <xref:System.Windows.ContentElement> 기본 클래스는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-106">(However, the default focusable state for the <xref:System.Windows.ContentElement> base class is `false`.</span></span> <span data-ttu-id="7d306-107">확인 하는 방법에 대 한 세부 정보에 대 한는 <xref:System.Windows.ContentElement> 포커스를 참조 하십시오 <xref:System.Windows.ContentElement.Focusable%2A>.) 또한이 클래스는 [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] 관련된 요소에서 포커스를 통과 하는 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-107">For details on how to make a <xref:System.Windows.ContentElement> focusable, see <xref:System.Windows.ContentElement.Focusable%2A>.) In addition, this class contains [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] that you can use for traversing the focus across related elements.</span></span>  
  
-   <span data-ttu-id="7d306-108">이벤트: <xref:System.Windows.ContentElement> 이벤트를 포함 합니다. 입력 및 포커스 관련 된; 상태에서 변경에 대 한 이벤트도 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-108">Events: <xref:System.Windows.ContentElement> includes events that are related to input and focus; it also includes events for changes in state.</span></span> <span data-ttu-id="7d306-109">대부분의 경우에 <xref:System.Windows.ContentElement> 이벤트는 라우트된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-109">In many cases, the <xref:System.Windows.ContentElement> events are routed events.</span></span> <span data-ttu-id="7d306-110">일부 경우 라우트된 이벤트에는 터널링 및 버블링 라우트 전략을 동일한 상태 또는 조건에 대 한 응답에서 별도 이벤트로 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-110">In some cases, routed events have both tunneling and bubbling routing strategies, raised as separate events in response to the same state or condition.</span></span> <span data-ttu-id="7d306-111">또한 <xref:System.Windows.ContentElement> 정의 [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] 추가 하거나 이벤트 처리기를 제거할 수는 수 raise 라우팅된 이벤트와입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-111">Also, <xref:System.Windows.ContentElement> defines [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] that can raise routed events and that can add or remove handlers to events.</span></span>  
  
 <span data-ttu-id="7d306-112"><xref:System.Windows.ContentElement> 많은 일반적인 공유 [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] 사용 하 여 <xref:System.Windows.UIElement>입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-112"><xref:System.Windows.ContentElement> shares many common [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] with <xref:System.Windows.UIElement>.</span></span> <span data-ttu-id="7d306-113">이러한 공용 [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] 공유 클래스 상속에서 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-113">These common [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] do not come from a shared class inheritance.</span></span> <span data-ttu-id="7d306-114">일반적인 명명 유사한 동작의, 및 비슷한 내부 구현을 공유 [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] 각 클래스에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-114">But they do share common naming, similar behavior, and similar internal implementation of [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] in each class.</span></span> <span data-ttu-id="7d306-115">유사성 이므로 <xref:System.Windows.ContentElement> 고 <xref:System.Windows.UIElement> 태그 개체 모델 동작에 대 한 다른 의도 갖는 요소를 기반으로 각 클래스는 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-115">The similarity is because <xref:System.Windows.ContentElement> and <xref:System.Windows.UIElement> are each classes that are an element base, although each has different intentions for its markup object model behavior.</span></span>  
  
 <span data-ttu-id="7d306-116">특히 <xref:System.Windows.UIElement> 에서 상속 <xref:System.Windows.Media.Visual>, 하위 수준 그래픽 렌더링에 대 한 지원 제공 하는 한 <xref:System.Windows.ContentElement> 합성 창 내의 사각형 영역을 반면 <xref:System.Windows.ContentElement> 렌더링을 연기 있도록 자세한 개념 줄 바꿈, 흐름 등의 문서 시나리오에 대 한 일반적인 보다 쉽게 지원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-116">In particular, <xref:System.Windows.UIElement> descends from <xref:System.Windows.Media.Visual>, which provides the lower-level graphics support for rendering a <xref:System.Windows.ContentElement> to a rectangular region within a composited window, whereas <xref:System.Windows.ContentElement> defers rendering so that concepts more common to document scenarios, such as flow and wrapping, are more easily supported.</span></span> <span data-ttu-id="7d306-117">이 두 가지 관련 클래스는 공용 인터페이스를 구현할 수도 <xref:System.Windows.IInputElement> 고 <xref:System.Windows.Media.Animation.IAnimatable>입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-117">These two related classes also implement the common interfaces <xref:System.Windows.IInputElement> and <xref:System.Windows.Media.Animation.IAnimatable>.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="7d306-118"><see cref="T:System.Windows.ContentElement" /> 클래스는 흐름 스타일 프레젠테이션에 대 한 전체 콘텐츠 요소의 모든 측면을 아직 정의 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-118">The <see cref="T:System.Windows.ContentElement" /> class does not yet define all aspects of a complete content element for flow-style presentation.</span></span> <span data-ttu-id="7d306-119"><see cref="T:System.Windows.FrameworkContentElement" /> 즉시 파생 클래스인 <see cref="T:System.Windows.ContentElement" />합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-119"><see cref="T:System.Windows.FrameworkContentElement" /> is an immediately derived class of <see cref="T:System.Windows.ContentElement" />.</span></span> <span data-ttu-id="7d306-120"><see cref="T:System.Windows.FrameworkContentElement" /> 렌더링을 지 원하는 추가 멤버의 전체 집합을 포함 한 <see cref="T:System.Windows.FrameworkContentElement" /> 콘텐츠를 호스팅하고 WPF 프레임 워크 수준 레이아웃 시스템을 사용 하 여 내에서.</span><span class="sxs-lookup"><span data-stu-id="7d306-120"><see cref="T:System.Windows.FrameworkContentElement" /> includes a more complete set of additional members that support rendering a <see cref="T:System.Windows.FrameworkContentElement" /> within a content host and using the WPF framework-level layout system.</span></span></para></block>
    <altmember cref="T:System.Windows.UIElement" />
    <altmember cref="T:System.Windows.FrameworkContentElement" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContentElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContentElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7d306-121"><see cref="T:System.Windows.ContentElement" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-121">Initializes a new instance of the <see cref="T:System.Windows.ContentElement" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7d306-122">지정된 라우트된 이벤트에 대해 라우트된 이벤트 처리기를 추가하여 해당 처리기를 현재 요소의 처리기 컬렉션에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-122">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="contentElement.AddHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent"><span data-ttu-id="7d306-123">처리할 라우트된 이벤트의 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-123">An identifier for the routed event to be handled.</span></span></param>
        <param name="handler"><span data-ttu-id="7d306-124">처리기 구현에 대한 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-124">A reference to the handler implementation.</span></span></param>
        <summary><span data-ttu-id="7d306-125">지정된 라우트된 이벤트에 대해 라우트된 이벤트 처리기를 추가하여 해당 처리기를 현재 요소의 처리기 컬렉션에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-125">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-126">예외가 발생 하지 않고 동일한 이벤트에 대 한 동일한 처리기를 여러 번 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-126">You can add the same handler for the same event multiple times without raising an exception.</span></span> <span data-ttu-id="7d306-127">그러나 처리기는 실제로 이벤트를 처리 하는 경우 여러 번 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-127">However, the handler is actually invoked multiple times when the event is handled.</span></span> <span data-ttu-id="7d306-128">따라서이 동작은 처리기 구현에서 고려해 야 하는 부작용이 있을 수 있습니다 어떻게 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-128">Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</span></span>  
  
 <span data-ttu-id="7d306-129">에 대 한 "추가" 접근자의 구현을 제공 하도록이 메서드를 사용 하 여 [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] 사용자 지정 라우트된 이벤트의 이벤트 액세스 패턴입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-129">You typically use this method to provide the implementation of the "add" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="member this.AddHandler : System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="contentElement.AddHandler (routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="routedEvent"><span data-ttu-id="7d306-130">처리할 라우트된 이벤트의 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-130">An identifier for the.routed event to be handled.</span></span></param>
        <param name="handler"><span data-ttu-id="7d306-131">처리기 구현에 대한 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-131">A reference to the handler implementation.</span></span></param>
        <param name="handledEventsToo"><span data-ttu-id="7d306-132">라우트된 이벤트가 해당 이벤트 데이터에서 처리된 것으로 표시된 경우에도 처리기를 호출하도록 등록하려면 <see langword="true" />이고, 라우트된 이벤트가 이미 처리된 것으로 표시된 경우 처리기를 호출하지 않는 기본 조건으로 등록하려면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-132"><see langword="true" /> to register the handler such that it is invoked even when the routed event is marked handled in its event data; <see langword="false" /> to register the handler with the default condition that it will not be invoked if the routed event is already marked handled.</span></span>  
  
<span data-ttu-id="7d306-133">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-133">The default is <see langword="false" />.</span></span>  
  
<span data-ttu-id="7d306-134">라우트된 이벤트를 다시 처리하도록 자주 요청하지 마세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-134">Do not routinely ask to rehandle a routed event.</span></span></param>
        <summary><span data-ttu-id="7d306-135">지정된 라우트된 이벤트에 대해 라우트된 이벤트 처리기를 추가하여 해당 처리기를 현재 요소의 처리기 컬렉션에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-135">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span></span> <span data-ttu-id="7d306-136">이벤트 경로를 따라 다른 요소에서 처리된 것으로 이미 표시된 라우트된 이벤트에 대해 제공된 처리기를 호출하기 위해 <paramref name="handledEventsToo" />를 <see langword="true" />로 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-136">Specify <paramref name="handledEventsToo" /> as <see langword="true" /> to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-137">하위 수준 입력된 이벤트를 효율적으로 처리 하는 것은 복잡 한 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-137">Processing low-level input events in a practical way is a complex task.</span></span> <span data-ttu-id="7d306-138">여기서 특정 이벤트를 처리 됨으로 표시 되 고 다른 직관적인 이벤트에 의해 대체 됩니다 동작을 구현 하는 다양 한 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-138">Many controls implement behavior where a certain event is marked as handled, and is replaced by another more intuitive event.</span></span> <span data-ttu-id="7d306-139">일반적으로 컨트롤을 일부 디자인 의도 한 경우 처리에 플랫폼 입력된 이벤트를 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-139">Generally, a control will only mark a platform input event as handled if there is some design intention for doing so.</span></span> <span data-ttu-id="7d306-140">특정 시나리오에서 이러한 디자인 의도 되지 않을 수 있습니다에 특정 입력된 이벤트 처리에 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-140">In certain scenarios, those design intentions might not be what your particular handling of the input event requires.</span></span> <span data-ttu-id="7d306-141">등록 하는 이러한 시나리오는 처리기 `handledEventsToo` 으로 `true` 적합 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-141">It is for these scenarios that registering handlers with `handledEventsToo` as `true` is appropriate.</span></span> <span data-ttu-id="7d306-142">하지만 정기적으로 없습니다 수행 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-142">But you should not do this routinely.</span></span> <span data-ttu-id="7d306-143">처리 하는 경우에 모든 이벤트에 대 한 응답으로 처리기를 호출 응용 프로그램 이벤트 처리 논리 복잡 하 게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-143">Invoking handlers in response to all events even if handled will complicate your own application event processing logic.</span></span> <span data-ttu-id="7d306-144">처리기 논리는 많은 경우 성능 저하를 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-144">You may see a decrease in performance if the handler logic is substantial.</span></span> <span data-ttu-id="7d306-145">특정 컨트롤이 여전히 응용 프로그램 논리를 사용 하 여 처리 하려는 이벤트를 처리 하는 개발 프로세스 중 이미 검색 위치 하는 경우 이미 처리 된 이벤트에 대 한 처리기를 연결의 사용을 예약 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-145">You should reserve the use of attaching handlers for already-handled events for situations where you have already discovered during the development process that certain controls are handling events that you still want to handle with application logic.</span></span>  
  
 <span data-ttu-id="7d306-146">특정 이벤트 컨트롤 조합의 동작을 처리 하는 클래스를 방지 하는 것에 대 한 또 다른 방법은 해당 이벤트의 미리 보기 대신을 사용 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-146">Another technique for avoiding the class handling behavior of certain event-control combinations is to use that event's preview alternative.</span></span> <span data-ttu-id="7d306-147">예를 들어 있으면 <xref:System.Windows.ContentElement.MouseLeftButtonDown> 처리 됨으로 표시 되 클래스 처리를 통해 수 있습니다에 대 한 처리기를 추가 하려면 <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-147">For example, if <xref:System.Windows.ContentElement.MouseLeftButtonDown> is marked handled by class handling, you might be able to add handlers for <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> instead.</span></span>  
  
 <span data-ttu-id="7d306-148">예외가 발생 하지 않고 동일한 이벤트에 대 한 동일한 처리기를 여러 번 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-148">You can add the same handler for the same event multiple times without raising an exception.</span></span> <span data-ttu-id="7d306-149">그러나 처리기는 실제로 이벤트를 처리 하는 경우 여러 번 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-149">However, the handler is actually invoked multiple times when the event is handled.</span></span> <span data-ttu-id="7d306-150">따라서이 동작은 처리기 구현에서 고려해 야 하는 부작용이 있을 수 있습니다 어떻게 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-150">Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</span></span>  
  
 <span data-ttu-id="7d306-151">에 대 한 "추가" 접근자의 구현을 제공 하도록이 메서드를 사용 하 여 [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] 사용자 지정 라우트된 이벤트의 이벤트 액세스 패턴입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-151">You typically use this method to provide the implementation of the "add" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d306-152">다음 예제에서 호출 하는 처리기를 구현 합니다 <xref:System.Windows.FrameworkElement.Initialized> 페이지에서 사용 하는 페이지의 명명된 된 요소 중 하나에 정의 된 처리기를 연결 하는 이벤트 `handledEventsToo` `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-152">The following example implements a handler invoked on the <xref:System.Windows.FrameworkElement.Initialized> event on a page that attaches a defined handler to one of the named elements on the page using `handledEventsToo` `true`.</span></span> <span data-ttu-id="7d306-153">경로의 다른 요소 경로에서 처리가 필요한 요소에 도달 하기 전에 처리 된 것으로 공유 된 이벤트 데이터를 표시 하는 경우에이 처리기를 호출할 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-153">This handler would be invoked even if another element along the route marked the shared event data as handled before reaching the handling element in the route.</span></span>  
  
 [!code-csharp[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml.cs#addhandlerhandledtoo)]
 [!code-vb[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EventOvwSupport/visualbasic/page2.xaml.vb#addhandlerhandledtoo)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToEventRoute">
      <MemberSignature Language="C#" Value="public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToEventRoute(class System.Windows.EventRoute route, class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToEventRoute (route As EventRoute, e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToEventRoute(System::Windows::EventRoute ^ route, System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.AddToEventRoute : System.Windows.EventRoute * System.Windows.RoutedEventArgs -&gt; unit" Usage="contentElement.AddToEventRoute (route, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="System.Windows.EventRoute" />
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="route"><span data-ttu-id="7d306-154">처리기가 추가되는 이벤트 경로입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-154">The event route that handlers are added to.</span></span></param>
        <param name="e"><span data-ttu-id="7d306-155">처리기를 추가하는 데 사용되는 이벤트 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-155">The event data that is used to add the handlers.</span></span> <span data-ttu-id="7d306-156">이 메서드는 인수의 <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> 속성을 사용하여 처리기를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-156">This method uses the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of the arguments to create the handlers.</span></span></param>
        <summary><span data-ttu-id="7d306-157">현재 <see cref="T:System.Windows.EventRoute" /> 이벤트 처리기 컬렉션에 대해 지정된 <see cref="T:System.Windows.ContentElement" />에 처리기를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-157">Adds handlers to the specified <see cref="T:System.Windows.EventRoute" /> for the current <see cref="T:System.Windows.ContentElement" /> event handler collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-158">콘텐츠 호스트 요소에 대 한이 메서드를 사용 하 여 (구현 하는지 여부에 관계 없이 <xref:System.Windows.IContentHost>) 처리기 콘텐츠 호스트 자식 요소에 대 한 호스트를 추가 하려면 <xref:System.Windows.EventRoute>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-158">Use this method for content host elements (regardless whether they implement <xref:System.Windows.IContentHost>) in order to add handlers for the content host child elements to the host <xref:System.Windows.EventRoute>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AllowDrop" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDrop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowDrop : bool with get, set" Usage="System.Windows.ContentElement.AllowDrop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-159">이 요소를 끌어서 놓기 작업의 대상으로 사용할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-159">Gets or sets a value that indicates whether this element can be used as the target of a drag-and-drop operation.</span></span></summary>
        <value><span data-ttu-id="7d306-160">이 요소를 끌어서 놓기 작업의 대상으로 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-160"><see langword="true" /> if this element can be used as the target of a drag-and-drop operation; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7d306-161">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-161">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-162">끌어서 놓기 작업을 기본적으로 사용 되지 않습니다 및 설정 하 여 의도적으로 설정 해야 합니다 <xref:System.Windows.ContentElement.AllowDrop%2A> 에 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-162">Drag-and-drop operations are not enabled by default, and must be enabled deliberately by setting <xref:System.Windows.ContentElement.AllowDrop%2A> to  `true`.</span></span> <span data-ttu-id="7d306-163">이 기본 설정을 제외 하면 끌어서 놓기 동작 특정 구현 하는 것은 전적으로 및에서 정의 되지 않은 <xref:System.Windows.ContentElement> 또는 기타 기본 요소 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-163">Beyond this basic setting, drag-and-drop behavior is entirely implementation specific and is not defined by <xref:System.Windows.ContentElement> or any other base element class.</span></span> <span data-ttu-id="7d306-164">예를 들어 특정 컨트롤을 <xref:System.Windows.Controls.RichTextBox>, 기본 동작을 했지만 권한이 <xref:System.Windows.ContentElement> 파생된 클래스는 이러한 동작이 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-164">Certain controls, for example, <xref:System.Windows.Controls.RichTextBox>, do have a default behavior, but no <xref:System.Windows.ContentElement> derived classes have such a behavior.</span></span> <span data-ttu-id="7d306-165">끌어서 놓기에 대 한 자세한 내용은 참조 하세요. [끌어서 놓기 개요](~/docs/framework/wpf/advanced/drag-and-drop-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-165">For more information on drag and drop, see [Drag and Drop Overview](~/docs/framework/wpf/advanced/drag-and-drop-overview.md).</span></span>  
  
 <span data-ttu-id="7d306-166"><xref:System.Windows.FrameworkContentElement> 이 종속성 속성 구현에서에 대 한 메타 데이터를 재정의합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-166"><xref:System.Windows.FrameworkContentElement> overrides the metadata for this dependency property in its implementation.</span></span> <span data-ttu-id="7d306-167">특히 <xref:System.Windows.FrameworkContentElement> 지정 하는이 속성에서는 속성 값 상속을 허용 하는 (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> 는 `true` 메타 데이터에서).</span><span class="sxs-lookup"><span data-stu-id="7d306-167">Specifically, <xref:System.Windows.FrameworkContentElement> designates that this property allows property value inheritance (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> is `true` in metadata).</span></span> <span data-ttu-id="7d306-168">이 컨텍스트에서 속성 값 상속 하는 경우에 대 한 다른 값이 없는 자식 요소가 <xref:System.Windows.ContentElement.AllowDrop%2A> 로컬 값 또는 스타일을이 값이 할당 (기본적으로 스타일에서을 사용 하 여 가장 가까운 부모 요소의 값을 통해 할당 값 또는 로컬 값), 해당 부모 요소의 값은 속성 시스템에서 모든 할당 되지 않은 자식 요소에 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-168">Property value inheritance in this context means that if there are child elements with no other value for <xref:System.Windows.ContentElement.AllowDrop%2A> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a local value), then the value from that parent element is assigned to all unassigned child elements by the property system.</span></span> <span data-ttu-id="7d306-169">즉, 모든 값을 전파 한 다음 루트 요소에서 놓기 작업을 허용할지 여부를 지정할 수 있습니다 <xref:System.Windows.FrameworkContentElement> 자식 요소를 할당 하지 않은 특히 값 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-169">This means that you can specify whether to allow drop operations at the root element and then propagate the value to all <xref:System.Windows.FrameworkContentElement> child elements that have not specifically assigned it a value of `false`.</span></span>  
  
<a name="dependencyPropertyInfo_AllowDrop"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7d306-170">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-170">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-171">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-171">Identifier field</span></span>|<xref:System.Windows.ContentElement.AllowDropProperty>|  
|<span data-ttu-id="7d306-172">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="7d306-172">Metadata properties set to `true`</span></span>|<span data-ttu-id="7d306-173">없음</span><span class="sxs-lookup"><span data-stu-id="7d306-173">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="7d306-174">다음 예제에서는 <xref:System.Windows.ContentElement.AllowDrop%2A> 에서 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-174">The following example sets <xref:System.Windows.ContentElement.AllowDrop%2A> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 [!code-xaml[ContentElementsSmorgasbord#AllowDrop](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#allowdrop)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDropProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowDropProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowDropProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AllowDropProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowDropProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowDropProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AllowDropProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.AllowDropProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-175"><see cref="P:System.Windows.ContentElement.AllowDrop" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-175">Identifies the <see cref="P:System.Windows.ContentElement.AllowDrop" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ApplyAnimationClock">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7d306-176">이 요소의 지정된 종속성 속성에 애니메이션을 적용합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-176">Applies an animation to a specified dependency property on this element.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyAnimationClock (dp As DependencyProperty, clock As AnimationClock)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit" Usage="contentElement.ApplyAnimationClock (dp, clock)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="7d306-177">애니메이션 효과를 줄 속성의 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-177">The identifier for the property to animate.</span></span></param>
        <param name="clock"><span data-ttu-id="7d306-178">애니메이션을 제어하고 선언하는 애니메이션 클록입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-178">The animation clock that controls and declares the animation.</span></span></param>
        <summary><span data-ttu-id="7d306-179">이 요소의 지정된 종속성 속성에 애니메이션을 적용합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-179">Applies an animation to a specified dependency property on this element.</span></span> <span data-ttu-id="7d306-180">모든 기존 애니메이션이 중지되고 새 애니메이션으로 대체됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-180">Any existing animations are stopped and replaced with the new animation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-181">속성에서 애니메이션을 제거 하려면 해당 속성에 대 한 식별자를 지정 `dp` 지정 `clock` 으로 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-181">To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`.</span></span> <span data-ttu-id="7d306-182">이 애니메이션을 제거 하 고 애니메이션은 애니메이션된 속성의 기본 값으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-182">This removes the animation and the animated property is set to its base value.</span></span> <span data-ttu-id="7d306-183">그러나 원래 연결 된 애니메이션 클록 중지 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-183">However, the originally associated animation clock is not stopped.</span></span> <span data-ttu-id="7d306-184">해당 클록에 할당 된 다른 애니메이션과 계속 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-184">Any other animations assigned to that clock will continue to run.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="contentElement.ApplyAnimationClock (dp, clock, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="7d306-185">애니메이션 효과를 주는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-185">The property to animate.</span></span></param>
        <param name="clock"><span data-ttu-id="7d306-186">애니메이션을 제어하고 선언하는 애니메이션 클록입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-186">The animation clock that controls and declares the animation.</span></span></param>
        <param name="handoffBehavior"><span data-ttu-id="7d306-187">열거형 값입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-187">A value of the enumeration.</span></span> <span data-ttu-id="7d306-188">기본값은 <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />이며 이는 모든 기존 애니메이션을 중지하고 새 애니메이션으로 대체합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-188">The default is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />, which will stop any existing animation and replace with the new one.</span></span></param>
        <summary><span data-ttu-id="7d306-189">속성에 이미 실행되는 애니메이션이 있는 경우 어떤 일이 발생할지를 지정하는 기능과 함께 이 요소의 지정된 종속성 속성에 애니메이션을 적용합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-189">Applies an animation to a specified dependency property on this element, with the ability to specify what happens if the property already has a running animation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-190">속성에서 애니메이션을 제거 하려면 해당 속성에 대 한 식별자를 지정 `dp` 지정 `clock` 으로 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-190">To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`.</span></span> <span data-ttu-id="7d306-191">이 애니메이션을 제거 하 고 애니메이션은 애니메이션된 속성의 기본 값으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-191">This removes the animation and the animated property is set to its base value.</span></span> <span data-ttu-id="7d306-192">그러나 원래 연결 된 애니메이션 클록 중지 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-192">However, the originally associated animation clock is not stopped.</span></span> <span data-ttu-id="7d306-193">해당 클록에 할당 된 다른 애니메이션과 계속 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-193">Any other animations assigned to that clock will continue to run.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCaptured">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AreAnyTouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCaptured : bool" Usage="System.Windows.ContentElement.AreAnyTouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-194">하나 이상의 터치가 이 요소에 캡처되는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-194">Gets a value that indicates whether at least one touch is captured to this element.</span></span></summary>
        <value><span data-ttu-id="7d306-195">하나 이상의 터치가 이 요소에 캡처되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-195"><see langword="true" /> if at least one touch is captured to this element; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.AreAnyTouchesCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-196"><see cref="P:System.Windows.ContentElement.AreAnyTouchesCaptured" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-196">Identifies the <see cref="P:System.Windows.ContentElement.AreAnyTouchesCaptured" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCapturedWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCapturedWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCapturedWithin : bool" Usage="System.Windows.ContentElement.AreAnyTouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-197">하나 이상의 터치가 이 요소나 시각적 트리의 임의 자식 요소에 캡처되는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-197">Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.</span></span></summary>
        <value><span data-ttu-id="7d306-198">하나 이상의 터치가 이 요소나 시각적 트리의 임의 자식 요소에 캡처되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-198"><see langword="true" /> if at least one touch is captured to this element or any child elements in its visual tree; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-199"><see cref="P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-199">Identifies the <see cref="P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesDirectlyOver : bool" Usage="System.Windows.ContentElement.AreAnyTouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-200">이 요소 위에서 하나 이상의 터치를 눌렀는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-200">Gets a value that indicates whether at least one touch is pressed over this element.</span></span></summary>
        <value><span data-ttu-id="7d306-201">이 요소 위에서 하나 이상의 터치를 눌렀으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-201"><see langword="true" /> if at least one touch is pressed over this element; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-202"><see cref="P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-202">Identifies the <see cref="P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AreAnyTouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesOver : bool" Usage="System.Windows.ContentElement.AreAnyTouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-203">이 요소나 시각적 트리의 임의 자식 요소 위에서 하나 이상의 터치를 눌렀는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-203">Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.</span></span></summary>
        <value><span data-ttu-id="7d306-204">이 요소나 시각적 트리의 임의 자식 요소 위에서 하나 이상의 터치를 눌렀으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-204"><see langword="true" /> if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AreAnyTouchesOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.AreAnyTouchesOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-205"><see cref="P:System.Windows.ContentElement.AreAnyTouchesOver" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-205">Identifies the <see cref="P:System.Windows.ContentElement.AreAnyTouchesOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAnimation">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7d306-206">이 요소에서 지정된 애니메이션 속성에 대한 애니메이션을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-206">Starts an animation for a specified animated property on this element.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginAnimation (dp As DependencyProperty, animation As AnimationTimeline)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit" Usage="contentElement.BeginAnimation (dp, animation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="7d306-207">종속성 속성 식별자로 지정된, 애니메이션을 지정할 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-207">The property to animate, which is specified as a dependency property identifier.</span></span></param>
        <param name="animation"><span data-ttu-id="7d306-208">시작할 애니메이션의 Timeline입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-208">The timeline of the animation to start.</span></span></param>
        <summary><span data-ttu-id="7d306-209">이 요소에서 지정된 애니메이션 속성에 대한 애니메이션을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-209">Starts an animation for a specified animated property on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-210">속성에 애니메이션이 적용 되어 있는지 여부를 확인 하면 note는 애니메이션이 시작 되 고이 고려해 야 하는 애니메이션이 적용 되지 않은 시작 지점 벗어난 첫 번째 프레임 렌더링 될 때 애니메이션을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-210">When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.</span></span>  
  
 <span data-ttu-id="7d306-211">경우는 <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> 에 대 한 `animation` 는 `null`, 그런 다음 현재 애니메이션 제거 되 고 속성의 현재 값이 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-211">If the <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> for `animation` is `null`, then any current animations are removed and the current value of the property is held.</span></span>  
  
 <span data-ttu-id="7d306-212">하는 경우 전체 `animation` 값은 `null`, 모든 애니메이션이 속성에서 제거 되 고 속성 값을 기준 값으로 되돌아갑니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-212">If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value.</span></span> <span data-ttu-id="7d306-213">그러나 원래 연결 된 애니메이션 타임 라인을 중지 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-213">However, the originally associated animation timeline is not stopped.</span></span> <span data-ttu-id="7d306-214">해당 타임 라인에 할당 된 다른 애니메이션과 계속 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-214">Any other animations assigned to that timeline will continue to run.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="contentElement.BeginAnimation (dp, animation, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="7d306-215">종속성 속성 식별자로 지정된, 애니메이션을 지정할 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-215">The property to animate, which is specified as the dependency property identifier.</span></span></param>
        <param name="animation"><span data-ttu-id="7d306-216">적용할 애니메이션의 Timeline입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-216">The timeline of the animation to be applied.</span></span></param>
        <param name="handoffBehavior"><span data-ttu-id="7d306-217">새 애니메이션이 이미 속성 값에 영향을 주고 있는 현재(실행 중인) 애니메이션과 상호 작용하는 방법을 지정하는 열거형 값입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-217">A value of the enumeration that specifies how the new animation interacts with any current (running) animations that are already affecting the property value.</span></span></param>
        <summary><span data-ttu-id="7d306-218">속성에 이미 실행 중인 애니메이션이 있는 경우 수행할 동작을 지정하는 옵션을 사용하여 이 요소의 지정된 애니메이션 속성에 대해 특정 애니메이션을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-218">Starts a specific animation for a specified animated property on this element, with the option of specifying what happens if the property already has a running animation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-219">속성에 애니메이션이 적용 되어 있는지 여부를 확인 하면 note는 애니메이션이 시작 되 고이 고려해 야 하는 애니메이션이 적용 되지 않은 시작 지점 벗어난 첫 번째 프레임 렌더링 될 때 애니메이션을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-219">When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.</span></span>  
  
 <span data-ttu-id="7d306-220">경우는 <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> 에 대 한 `animation` 는 `null`, 그런 다음 현재 애니메이션 제거 되 고 속성의 현재 값이 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-220">If the <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> for `animation` is `null`, then any current animations are removed and the current value of the property is held.</span></span>  
  
 <span data-ttu-id="7d306-221">하는 경우 전체 `animation` 값은 `null`, 모든 애니메이션이 속성에서 제거 되 고 속성 값을 기준 값으로 되돌아갑니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-221">If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value.</span></span> <span data-ttu-id="7d306-222">그러나 원래 연결 된 애니메이션 타임 라인을 중지 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-222">However, the originally associated animation timeline is not stopped.</span></span> <span data-ttu-id="7d306-223">해당 타임 라인에 할당 된 다른 애니메이션과 계속 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-223">Any other animations assigned to that timeline will continue to run.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureMouse">
      <MemberSignature Language="C#" Value="public bool CaptureMouse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureMouse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.CaptureMouse" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureMouse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureMouse();" />
      <MemberSignature Language="F#" Value="abstract member CaptureMouse : unit -&gt; bool&#xA;override this.CaptureMouse : unit -&gt; bool" Usage="contentElement.CaptureMouse " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureMouse</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7d306-224">이 요소가 마우스를 캡처하게 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-224">Attempts to force capture of the mouse to this element.</span></span></summary>
        <returns><span data-ttu-id="7d306-225">마우스가 캡처되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-225"><see langword="true" /> if the mouse is successfully captured; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-226">를 캡처할 요소 활성화 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-226">To be captured, an element must be enabled.</span></span> <span data-ttu-id="7d306-227">확인 여부 <xref:System.Windows.ContentElement.IsEnabled%2A> 됩니다 `true` 를 호출 하기 전에 <xref:System.Windows.ContentElement.CaptureMouse%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-227">Check whether <xref:System.Windows.ContentElement.IsEnabled%2A> is `true` before you call <xref:System.Windows.ContentElement.CaptureMouse%2A>.</span></span>  
  
 <span data-ttu-id="7d306-228">호출 하는 경우 <xref:System.Windows.ContentElement.CaptureMouse%2A> 반환 `true`, 한 다음 <xref:System.Windows.ContentElement.IsMouseCaptured%2A> 이기도 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-228">If calling <xref:System.Windows.ContentElement.CaptureMouse%2A> returns `true`, then <xref:System.Windows.ContentElement.IsMouseCaptured%2A> is also `true`.</span></span>  
  
 <span data-ttu-id="7d306-229">호출 하는 경우 <xref:System.Windows.ContentElement.CaptureMouse%2A> 반환 `true`, 해당 <xref:System.Windows.ContentElement.GotMouseCapture> 및 <xref:System.Windows.ContentElement.IsMouseCapturedChanged> 이벤트가 발생 하는 사용 하 여 <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType> 데이터 요소로 보고 하는 이벤트 위치는 <xref:System.Windows.ContentElement.CaptureMouse%2A> 메서드는 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-229">If calling <xref:System.Windows.ContentElement.CaptureMouse%2A> returns `true`, then the <xref:System.Windows.ContentElement.GotMouseCapture> and <xref:System.Windows.ContentElement.IsMouseCapturedChanged> events are raised, with <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType> in the event data reported as the element where the <xref:System.Windows.ContentElement.CaptureMouse%2A> method is called.</span></span> <span data-ttu-id="7d306-230">캡처를 강제 적용 하는 경우에 마우스를 사용 하 여 끌어서 놓기 관련 된 캡처를 사용 하 여 특히 기존 캡처-충돌할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-230">If you force capture, you might interfere with existing captures - especially with captures that relate to drag-and-drop with the mouse.</span></span>  
  
 <span data-ttu-id="7d306-231">호출 하는 모든 요소에서 마우스 캡처를 지우려면 <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> 사용 하 여는 `element` 매개 변수로 제공 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-231">To clear mouse capture from all elements, call <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> with the `element` parameter provided as `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d306-232">다음 예제에서는 마우스를 캡처하거나 마우스가 요소에 의해 이미 캡처되어 여부에 따라 캡처를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-232">The following example captures the mouse or releases capture, based on whether the mouse is already captured by the element.</span></span> <span data-ttu-id="7d306-233">이 예에서는 캐스팅 잠재 캡처 대상 요소를 확인 합니다 <xref:System.Windows.IInputElement> 인터페이스 및 호출을 <xref:System.Windows.IInputElement.CaptureMouse%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7d306-233">Note that this example casts the prospective capture target element to the <xref:System.Windows.IInputElement> interface, and is thus initially calling the <xref:System.Windows.IInputElement.CaptureMouse%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="7d306-234">캐스팅 <xref:System.Windows.IInputElement> 는 캡처 할 요소 마우스 인지 확실 하지 않은 경우에 유용 하는 기법을 <xref:System.Windows.UIElement> 또는 <xref:System.Windows.ContentElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-234">Casting to <xref:System.Windows.IInputElement> is a technique that is useful if you are unsure whether the element you want to have capture the mouse is a <xref:System.Windows.UIElement> or a <xref:System.Windows.ContentElement>.</span></span> <span data-ttu-id="7d306-235">인터페이스 메서드 및 인터페이스를 캐스팅 한 다음 호출 적절 한 type 별 CaptureMouse 구현을 호출 내부적으로 캐스팅을 시험적 <xref:System.Windows.UIElement> 또는 <xref:System.Windows.ContentElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-235">The interface cast and the interface method call then calls the appropriate type-specific CaptureMouse implementation internally without requiring a trial cast to either <xref:System.Windows.UIElement> or <xref:System.Windows.ContentElement>.</span></span> <span data-ttu-id="7d306-236">이 기술은 캐스팅 다른 멤버에 대해 작동 하는 <xref:System.Windows.IInputElement> , 예를 들어 대부분의 정의 입력 관련 이벤트 및 기타 입력 관련 메서드.</span><span class="sxs-lookup"><span data-stu-id="7d306-236">This same casting technique works for other members that <xref:System.Windows.IInputElement> defines, for instance many of the input-related events, and other input-related methods.</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#ismousecaptured)]
 [!code-vb[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#ismousecaptured)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="CaptureStylus">
      <MemberSignature Language="C#" Value="public bool CaptureStylus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureStylus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.CaptureStylus" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureStylus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureStylus();" />
      <MemberSignature Language="F#" Value="abstract member CaptureStylus : unit -&gt; bool&#xA;override this.CaptureStylus : unit -&gt; bool" Usage="contentElement.CaptureStylus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureStylus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7d306-237">이 요소가 스타일러스를 캡처하게 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-237">Attempts to force capture of the stylus to this element.</span></span></summary>
        <returns><span data-ttu-id="7d306-238">스타일러스가 캡처되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-238"><see langword="true" /> if the stylus is successfully captured; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-239">항상 기본 기본 스타일러스 장치에 따라 기본 구현은 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-239">The default implementation based on the underlying default stylus device always returns `true`.</span></span> <span data-ttu-id="7d306-240">그러나 입력된 시스템에 대 한 장치 구현을 제공 하는 입력된 장치를 확장 하는 경우 다른 결과 반환할 수 있는 대체 스타일러스 장치 구현 된 시스템을 만들 수는 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-240">However, if you are extending the input devices that provide the device implementation for the input system, it is possible to create a system with an alternative stylus device implementation that might return different results.</span></span>  
  
 <span data-ttu-id="7d306-241">스타일러스를 캡처한 요소 스타일러스가 해당 경계 밖에 있는 경우에 스타일러스 입력을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-241">When an element captures the stylus, it receives stylus input even if the stylus is outside its bounds.</span></span> <span data-ttu-id="7d306-242">스타일러스는 일반적으로 끌어서 놓기 작업 중에 캡처됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-242">The stylus is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="7d306-243">이 메서드를 호출 내부 정적 <xref:System.Windows.Input.Stylus> 메서드 <xref:System.Windows.Input.Stylus.Capture%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-243">Calling this method calls an underlying static <xref:System.Windows.Input.Stylus> method <xref:System.Windows.Input.Stylus.Capture%2A>.</span></span> <span data-ttu-id="7d306-244">캡처 동작은 활성 스타일러스 장치 구현에 의해 구현 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-244">The actual capture behavior is implemented by the active stylus device implementation.</span></span>  
  
 <span data-ttu-id="7d306-245">를 캡처할 요소 활성화 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-245">To be captured, an element must be enabled.</span></span> <span data-ttu-id="7d306-246">확인 여부 <xref:System.Windows.ContentElement.IsEnabled%2A> 는 `true` 를 호출 하기 전에 반환 <xref:System.Windows.ContentElement.CaptureStylus%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-246">Check whether <xref:System.Windows.ContentElement.IsEnabled%2A> is `true` return before you call <xref:System.Windows.ContentElement.CaptureStylus%2A>.</span></span>  
  
 <span data-ttu-id="7d306-247">호출 하는 경우 <xref:System.Windows.ContentElement.CaptureStylus%2A> 반환 `true`를 <xref:System.Windows.ContentElement.IsStylusCaptured%2A> 이기도 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-247">If calling <xref:System.Windows.ContentElement.CaptureStylus%2A> returns `true`, <xref:System.Windows.ContentElement.IsStylusCaptured%2A> is also `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureTouch">
      <MemberSignature Language="C#" Value="public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CaptureTouch(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CaptureTouch(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.CaptureTouch : System.Windows.Input.TouchDevice -&gt; bool" Usage="contentElement.CaptureTouch touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="touchDevice"><span data-ttu-id="7d306-248">캡처할 장치입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-248">The device to capture.</span></span></param>
        <summary><span data-ttu-id="7d306-249">이 요소에 터치를 캡처하도록 강제합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-249">Attempts to force capture of a touch to this element.</span></span></summary>
        <returns><span data-ttu-id="7d306-250">지정된 터치가 이 요소에 캡처되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-250"><see langword="true" /> if the specified touch is captured to this element; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-251"><xref:System.Windows.ContentElement.CaptureTouch%2A> 돌아갑니다 `false` 경우는 <xref:System.Windows.Input.TouchDevice> 현재 다른 요소에 캡처됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-251"><xref:System.Windows.ContentElement.CaptureTouch%2A> will return `false` if the <xref:System.Windows.Input.TouchDevice> is currently captured to another element.</span></span>  
  
 <span data-ttu-id="7d306-252">하는 경우 <xref:System.Windows.ContentElement.CaptureTouch%2A> 반환 `true`, 그런 다음 <xref:System.Windows.ContentElement.GotTouchCapture> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-252">If <xref:System.Windows.ContentElement.CaptureTouch%2A> returns `true`, then the <xref:System.Windows.ContentElement.GotTouchCapture> event is raised.</span></span>  
  
 <span data-ttu-id="7d306-253">이 요소에서 단일 터치의 캡처를 해제 하려면 사용는 <xref:System.Windows.ContentElement.ReleaseTouchCapture%2A> 메서드 터치 장치 릴리스를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-253">To release capture of a single touch from this element, use the <xref:System.Windows.ContentElement.ReleaseTouchCapture%2A> method and specify the touch device to release.</span></span> <span data-ttu-id="7d306-254">이 요소에서 모든 터치를 해제 하려면 사용 된 <xref:System.Windows.ContentElement.ReleaseAllTouchCaptures%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7d306-254">To release all touches from this element, use the <xref:System.Windows.ContentElement.ReleaseAllTouchCaptures%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7d306-255"><paramref name="touchDevice" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-255"><paramref name="touchDevice" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="CommandBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.CommandBindingCollection CommandBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.CommandBindingCollection CommandBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.CommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandBindings As CommandBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::CommandBindingCollection ^ CommandBindings { System::Windows::Input::CommandBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommandBindings : System.Windows.Input.CommandBindingCollection" Usage="System.Windows.ContentElement.CommandBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CommandBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-256">이 요소와 연결된 <see cref="T:System.Windows.Input.CommandBinding" /> 개체의 컬렉션을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-256">Gets a collection of <see cref="T:System.Windows.Input.CommandBinding" /> objects that are associated with this element.</span></span></summary>
        <value><span data-ttu-id="7d306-257">모든 <see cref="T:System.Windows.Input.CommandBinding" /> 개체의 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-257">The collection of all <see cref="T:System.Windows.Input.CommandBinding" /> objects.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-258"><xref:System.Windows.Input.CommandBinding> 이 요소에 대 한 특정 명령의 명령 처리를 사용 하도록 설정 하 고 명령, 해당 이벤트 및이 요소에 의해 연결 된 처리기 사이의 링크를 선언 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-258">A <xref:System.Windows.Input.CommandBinding> enables command handling of a specific command for this element and declares the linkage between a command, its events, and the handlers that are attached by this element.</span></span>  
  
 <span data-ttu-id="7d306-259">또 다른 일반적인 방법은 채우기는 <xref:System.Windows.ContentElement.CommandBindings%2A> 컬렉션에 사용 될 <xref:System.Windows.Input.CommandManager> 메서드 프로그래밍 방식으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-259">Another typical way to populate the <xref:System.Windows.ContentElement.CommandBindings%2A> collection is to use <xref:System.Windows.Input.CommandManager> methods programmatically.</span></span>  
  
<a name="xamlPropertyElementUsage_CommandBindings"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="7d306-260">XAML 속성 요소 사용</span><span class="sxs-lookup"><span data-stu-id="7d306-260">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.CommandBindings>  
    oneOrMoreCommandBindings  </object.CommandBindings>  
</object>  
```  
  
<a name="xamlValues_CommandBindings"></a>   
## <a name="xaml-values"></a><span data-ttu-id="7d306-261">XAML 값</span><span class="sxs-lookup"><span data-stu-id="7d306-261">XAML Values</span></span>  
 <span data-ttu-id="7d306-262">*oneOrMoreCommandBindings*</span><span class="sxs-lookup"><span data-stu-id="7d306-262">*oneOrMoreCommandBindings*</span></span>  
 <span data-ttu-id="7d306-263">하나 이상의 <xref:System.Windows.Input.CommandBinding> 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-263">One or more <xref:System.Windows.Input.CommandBinding> elements.</span></span> <span data-ttu-id="7d306-264">이러한 각 있어야를 <xref:System.Windows.Input.CommandBinding.Command%2A> 특성에는 알려진된 명령 설정 및 특성에 대 한 설정를 <xref:System.Windows.Input.CommandBinding.CanExecute> 및 <xref:System.Windows.Input.CommandBinding.Executed> 처리기를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-264">Each of these should have a <xref:System.Windows.Input.CommandBinding.Command%2A> attribute set to a known command, and attributes set for the <xref:System.Windows.Input.CommandBinding.CanExecute> and <xref:System.Windows.Input.CommandBinding.Executed> handler implementations.</span></span> <span data-ttu-id="7d306-265">자세한 내용은 <xref:System.Windows.Input.CommandBinding>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-265">For more information see <xref:System.Windows.Input.CommandBinding>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.DragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragEnter;" />
      <MemberSignature Language="F#" Value="member this.DragEnter : System.Windows.DragEventHandler " Usage="member this.DragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-266">입력 시스템에서 이 요소를 끌기 대상으로 사용하는 기본 끌기 이벤트를 보고하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-266">Occurs when the input system reports an underlying drag event with this element as the drag target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-267">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.DragEnter?displayProperty=nameWithType> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-267">This event creates an alias for the <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.DragEnter?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-268">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.DragEnter> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-268">Event handlers that are attached to the <xref:System.Windows.ContentElement.DragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_DragEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-269">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-269">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-270">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-270">Identifier field</span></span>|<xref:System.Windows.ContentElement.DragEnterEvent>|  
|<span data-ttu-id="7d306-271">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-271">Routing strategy</span></span>|<span data-ttu-id="7d306-272">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-272">Bubbling</span></span>|  
|<span data-ttu-id="7d306-273">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-273">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="7d306-274">해당 터널링 이벤트가 <xref:System.Windows.ContentElement.PreviewDragEnter>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-274">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewDragEnter>.</span></span>  
  
-   <span data-ttu-id="7d306-275">재정의 <xref:System.Windows.ContentElement.OnDragEnter%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-275">Override <xref:System.Windows.ContentElement.OnDragEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragLeave" />
        <altmember cref="E:System.Windows.ContentElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="DragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.DragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.DragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-276"><see cref="E:System.Windows.ContentElement.DragEnter" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-276">Identifies the <see cref="E:System.Windows.ContentElement.DragEnter" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-277">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-277">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-278">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-278">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-279">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-279">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-280">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-280">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-281">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-281">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragLeave;" />
      <MemberSignature Language="F#" Value="member this.DragLeave : System.Windows.DragEventHandler " Usage="member this.DragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-282">입력 시스템에서 이 요소를 끌기 원본으로 사용하는 기본 끌기 이벤트를 보고하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-282">Occurs when the input system reports an underlying drag event with this element as the drag origin.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-283">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.DragLeave?displayProperty=nameWithType> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-283">This event creates an alias for the <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.ContentElement.DragLeave?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-284">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.DragLeave> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-284">Event handlers that are attached to the <xref:System.Windows.ContentElement.DragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_DragLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-285">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-285">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-286">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-286">Identifier field</span></span>|<xref:System.Windows.ContentElement.DragLeaveEvent>|  
|<span data-ttu-id="7d306-287">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-287">Routing strategy</span></span>|<span data-ttu-id="7d306-288">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-288">Bubbling</span></span>|  
|<span data-ttu-id="7d306-289">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-289">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="7d306-290">해당 터널링 이벤트가 <xref:System.Windows.DragDrop.PreviewDragLeave>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-290">The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragLeave>.</span></span>  
  
-   <span data-ttu-id="7d306-291">재정의 <xref:System.Windows.ContentElement.OnDragLeave%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-291">Override <xref:System.Windows.ContentElement.OnDragLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragEnter" />
        <altmember cref="E:System.Windows.ContentElement.DragOver" />
        <altmember cref="E:System.Windows.ContentElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="DragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.DragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.DragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-292"><see cref="E:System.Windows.ContentElement.DragLeave" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-292">Identifies the <see cref="E:System.Windows.ContentElement.DragLeave" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-293">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-293">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-294">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-294">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-295">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-295">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-296">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-296">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-297">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-297">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragOver;" />
      <MemberSignature Language="F#" Value="member this.DragOver : System.Windows.DragEventHandler " Usage="member this.DragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-298">입력 시스템에서 이 요소를 잠재적인 놓기 대상으로 사용하는 기본 끌기 이벤트를 보고하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-298">Occurs when the input system reports an underlying drag event with this element as the potential drop target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-299">이 이벤트는 끌기 요소 범위에서 시작 하는 경우에 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-299">This event occurs even if the drag originates in the element bounds.</span></span> <span data-ttu-id="7d306-300">끌기 범위 외부에서 시작 하 고 그 안에 있는 이동 한 다음이 이벤트는, 하는 경우와 <xref:System.Windows.ContentElement.DragEnter> 과 미리 보기 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-300">If the drag starts outside the bounds and then moves inside, this event is also raised, as well as <xref:System.Windows.ContentElement.DragEnter> and related preview events.</span></span>  
  
 <span data-ttu-id="7d306-301">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.DragOver?displayProperty=nameWithType> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-301">This event creates an alias for the <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.ContentElement.DragOver?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-302">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.DragOver> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-302">Event handlers that are attached to the <xref:System.Windows.ContentElement.DragOver> event are attached to the underlying <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_DragOver"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-303">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-303">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-304">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-304">Identifier field</span></span>|<xref:System.Windows.ContentElement.DragOverEvent>|  
|<span data-ttu-id="7d306-305">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-305">Routing strategy</span></span>|<span data-ttu-id="7d306-306">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-306">Bubbling</span></span>|  
|<span data-ttu-id="7d306-307">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-307">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="7d306-308">해당 터널링 이벤트가 <xref:System.Windows.DragDrop.PreviewDragOver>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-308">The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragOver>.</span></span>  
  
-   <span data-ttu-id="7d306-309">재정의 <xref:System.Windows.ContentElement.OnDragOver%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-309">Override <xref:System.Windows.ContentElement.OnDragOver%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragEnter" />
        <altmember cref="E:System.Windows.ContentElement.DragLeave" />
        <altmember cref="E:System.Windows.ContentElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="DragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.DragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.DragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-310"><see cref="E:System.Windows.ContentElement.DragOver" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-310">Identifies the <see cref="E:System.Windows.ContentElement.DragOver" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-311">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-311">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-312">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-312">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-313">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-313">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-314">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-314">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-315">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-315">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Drop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler Drop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler Drop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.Drop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Drop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ Drop;" />
      <MemberSignature Language="F#" Value="member this.Drop : System.Windows.DragEventHandler " Usage="member this.Drop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-316">입력 시스템에서 이 요소를 놓기 대상으로 사용하는 기본 놓기 이벤트를 보고하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-316">Occurs when the input system reports an underlying drop event with this element as the drop target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-317">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.Drop?displayProperty=nameWithType> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-317">This event creates an alias for the <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.ContentElement.Drop?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-318">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.Drop> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-318">Event handlers that are attached to the <xref:System.Windows.ContentElement.Drop> event are attached to the underlying <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_Drop"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-319">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-319">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-320">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-320">Identifier field</span></span>|<xref:System.Windows.ContentElement.DropEvent>|  
|<span data-ttu-id="7d306-321">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-321">Routing strategy</span></span>|<span data-ttu-id="7d306-322">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-322">Bubbling</span></span>|  
|<span data-ttu-id="7d306-323">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-323">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="7d306-324">해당 터널링 이벤트가 <xref:System.Windows.ContentElement.PreviewDrop>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-324">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewDrop>.</span></span>  
  
-   <span data-ttu-id="7d306-325">재정의 <xref:System.Windows.ContentElement.OnDrop%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-325">Override <xref:System.Windows.ContentElement.OnDrop%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragOver" />
        <altmember cref="E:System.Windows.ContentElement.MouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="DropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.DropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DropEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.DropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-326"><see cref="E:System.Windows.ContentElement.Drop" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-326">Identifies the <see cref="E:System.Windows.ContentElement.Drop" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-327">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-327">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-328">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-328">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-329">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-329">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-330">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-330">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-331">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-331">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public bool Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Function Focus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Focus();" />
      <MemberSignature Language="F#" Value="abstract member Focus : unit -&gt; bool&#xA;override this.Focus : unit -&gt; bool" Usage="contentElement.Focus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.Focus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7d306-332">이 요소에 포커스를 설정하려고 시도합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-332">Attempts to set focus to this element.</span></span></summary>
        <returns><span data-ttu-id="7d306-333">이 요소에 키보드 포커스를 설정할 수 있으면 <see langword="true" />이고, 이 메서드를 호출해도 포커스를 강제 설정하지 못한 경우에는 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-333"><see langword="true" /> if keyboard focus could be set to this element; <see langword="false" /> if this method call did not force focus.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-334">포커스, 되도록 <xref:System.Windows.ContentElement.Focusable%2A> 하 고 <xref:System.Windows.ContentElement.IsEnabled%2A> 둘 다 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-334">To be focusable, <xref:System.Windows.ContentElement.Focusable%2A> and <xref:System.Windows.ContentElement.IsEnabled%2A> must both be `true`.</span></span> <span data-ttu-id="7d306-335">거의 모든 <xref:System.Windows.ContentElement> 파생된 클래스에는 없는 <xref:System.Windows.ContentElement.Focusable%2A> 기본적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-335">Note that nearly all <xref:System.Windows.ContentElement> derived classes are not <xref:System.Windows.ContentElement.Focusable%2A> by default.</span></span>  
  
 <span data-ttu-id="7d306-336">요소는 특정 트리 내에서 포커스를 받을 수 있고 사용 하도록 설정, 이벤트 처리를 하는 경우에 포커스를 허용 하지 않도록 preview 포커스 이벤트에 응답할 수 있습니다 (예: 합성 컨트롤) 되므로이 메서드는 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-336">Even if an element is focusable and enabled, event handling within a specific tree, (such as for a composite control) might respond to the preview focus events by not allowing focus there, thus this method would return `false`.</span></span>  
  
 <span data-ttu-id="7d306-337">일반적 포커스가 두 개의 별도 개념에 의해 제어 됩니다: 키보드 포커스와 논리 포커스가 항상 동일 하지 않은 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-337">Focus in general is governed by two separate concepts: keyboard focus and logical focus, which are not always identical.</span></span> <span data-ttu-id="7d306-338">이 메서드는 논리적 포커스를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-338">This method sets the logical focus.</span></span> <span data-ttu-id="7d306-339">특히; 키보드 포커스를 설정할 프로그래밍 방식으로 없음 키보드 포커스는 사용자 입력에 따라 결정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-339">There is no programmatic means to set keyboard focus specifically; keyboard focus is determined by user input.</span></span> <span data-ttu-id="7d306-340">자세한 내용은 [포커스 개요](~/docs/framework/wpf/advanced/focus-overview.md) 하 고 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-340">For more information, see [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="7d306-341">호출 하는 경우 <xref:System.Windows.ContentElement.Focus%2A> 반환 `true`를 <xref:System.Windows.ContentElement.IsKeyboardFocused%2A> 하 고 <xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> 도 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-341">If calling <xref:System.Windows.ContentElement.Focus%2A> returns `true`, <xref:System.Windows.ContentElement.IsKeyboardFocused%2A> and <xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> are also `true`.</span></span>  
  
 <span data-ttu-id="7d306-342">관련된 속성이 없는 경우 `true`호출 하는 경우, <xref:System.Windows.ContentElement.Focus%2A>, 다음 이벤트 중 하나 이상이 발생 하는 다음 순서로: <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>를 <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> (원본은 새 포커스 대상 임), <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged>, <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.ContentElement.LostKeyboardFocus>, <xref:System.Windows.ContentElement.GotKeyboardFocus> (원본이 새 포커스 대상).</span><span class="sxs-lookup"><span data-stu-id="7d306-342">If the related properties are not already `true`, when you call <xref:System.Windows.ContentElement.Focus%2A>, one or more of the following events are raised in the following order: <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>, <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> (source is the new focus target), <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged>, <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.ContentElement.LostKeyboardFocus>, <xref:System.Windows.ContentElement.GotKeyboardFocus> (source is the new focus target).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d306-343">다음 예제에서는 지정 된 문서의 단락에에서 명명 된 발견 하는 페이지 로드 이벤트 처리기를 이며 포커스를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-343">The following example is a page-loaded event handler that finds a specified named paragraph in the document and sets focus to it.</span></span> <span data-ttu-id="7d306-344">단락은 기본적으로 포커스를 받을 수 없는 경우 이 특정 단락이 적용 되는 스타일 스타일을 사용 하는 (표시 되지 않음) <xref:System.Windows.Setter> 포커스를 받을 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-344">Paragraphs are not focusable by default; this particular paragraph had a style applied (not shown) that used a style <xref:System.Windows.Setter> to make it focusable.</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#Focus](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#focus)]
 [!code-vb[ContentElementsSmorgasbord#Focus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#focus)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="P:System.Windows.ContentElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="Focusable">
      <MemberSignature Language="C#" Value="public bool Focusable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focusable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.Focusable" />
      <MemberSignature Language="VB.NET" Value="Public Property Focusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Focusable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Focusable : bool with get, set" Usage="System.Windows.ContentElement.Focusable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.Focusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-345">요소가 포커스를 받을 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-345">Gets or sets a value that indicates whether the element can receive focus.</span></span></summary>
        <value><span data-ttu-id="7d306-346">요소가 포커스를 받을 수 있으면 <see langword="true" />이고, 포커스를 받을 수 없으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-346"><see langword="true" /> if the element is focusable; otherwise <see langword="false" />.</span></span> <span data-ttu-id="7d306-347">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-347">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-348">포커스가 있는 요소는 키보드 입력을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-348">Only the focused element receives keyboard input.</span></span>  
  
 <span data-ttu-id="7d306-349">파생된 클래스는 기본적으로 포커스를 받을 수 있도록 특정 파생된 클래스에서이 종속성 속성에 대 한 메타 데이터를 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-349">Certain derived classes might override metadata for this dependency property such that the derived class is focusable by default.</span></span>  
  
 <span data-ttu-id="7d306-350">상속 되는 경우 <xref:System.Windows.Documents.Hyperlink> 또는 해당 파생된 클래스인 <xref:System.Windows.Documents.Hyperlink> 이 종속성 속성에 대 한 메타 데이터를 재정의 하 고이 속성의 기본값을 재정의 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-350">When inherited by <xref:System.Windows.Documents.Hyperlink> or its derived classes, <xref:System.Windows.Documents.Hyperlink> overrides the metadata for this dependency property and redefines the default value of this property to be `true`.</span></span>  
  
<a name="dependencyPropertyInfo_Focusable"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7d306-351">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-351">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-352">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-352">Identifier field</span></span>|<xref:System.Windows.ContentElement.FocusableProperty>|  
|<span data-ttu-id="7d306-353">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="7d306-353">Metadata properties set to `true`</span></span>|<span data-ttu-id="7d306-354">없음</span><span class="sxs-lookup"><span data-stu-id="7d306-354">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="7d306-355">스타일을 만드는 다음 예제는 <xref:System.Windows.Documents.Paragraph> 기본적으로 포커스를 받을 수 하 고 포커스를 받을 때 시각적 동작을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-355">The following example creates a style that makes a <xref:System.Windows.Documents.Paragraph> focusable by default and gives it a visual behavior when it receives focus.</span></span>  
  
 [!code-xaml[ContentElementsSmorgasbord#Focusable](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#focusable)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="7d306-356">파생 하는 경우 <see cref="T:System.Windows.ContentElement" />, 원하는 요소 포커스 가능 하기 때문에 기본적으로 없습니다 포커스를 받을 수 있는지 여부를 고려해 야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-356">When you derive from <see cref="T:System.Windows.ContentElement" />, consider whether you want your element to be focusable, because by default it will not be focusable.</span></span> <span data-ttu-id="7d306-357">포커스 가능 요소를 하려는 경우 다음과 같이 파생된 클래스 정적 생성자에서이 속성의 메타 데이터를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-357">If you want your element to be focusable, override the metadata for this property in your derived class static constructor as follows:</span></span> 
<span data-ttu-id="7d306-358">[! 코드 csharp[CorePseudocode #UIElementShortOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementshortoverride)] [! 코드 vb[CorePseudocode #UIElementShortOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementshortoverride)]</span><span class="sxs-lookup"><span data-stu-id="7d306-358">[!code-csharp[CorePseudocode#UIElementShortOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementshortoverride)] [!code-vb[CorePseudocode#UIElementShortOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementshortoverride)]</span></span> 
<span data-ttu-id="7d306-359">여기서 <paramref name="myElement" /> 클래스 이름에서 메타 데이터 값을 재정의 하는 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-359">where <paramref name="myElement" /> is the class name of the type that you are overriding the metadata value on.</span></span></para></block>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="FocusableChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler FocusableChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.FocusableChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FocusableChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ FocusableChanged;" />
      <MemberSignature Language="F#" Value="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-360"><see cref="P:System.Windows.ContentElement.Focusable" /> 속성 값이 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-360">Occurs when the value of the <see cref="P:System.Windows.ContentElement.Focusable" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-361">이 멤버는 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트를 라우트된 이벤트를 사용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-361">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="FocusableProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusableProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusableProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.FocusableProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusableProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusableProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FocusableProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.FocusableProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-362"><see cref="P:System.Windows.ContentElement.Focusable" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-362">Identifies the <see cref="P:System.Windows.ContentElement.Focusable" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnimationBaseValue">
      <MemberSignature Language="C#" Value="public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetAnimationBaseValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAnimationBaseValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetAnimationBaseValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj&#xA;override this.GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj" Usage="contentElement.GetAnimationBaseValue dp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.GetAnimationBaseValue(System.Windows.DependencyProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="7d306-363">확인할 종속성 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-363">The.dependency property to check.</span></span></param>
        <summary><span data-ttu-id="7d306-364">실행하거나 중지된 애니메이션의 가능한 애니메이션 값을 모두 무시하고 이 요소에 대해 지정된 속성의 기본 속성 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-364">Returns the base property value for the specified property on this element, disregarding any possible animated value from a running or stopped animation.</span></span></summary>
        <returns><span data-ttu-id="7d306-365">지정된 종속성 속성에 연결된 애니메이션이 없는 경우와 동일한 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-365">The property value as if no animations are attached to the specified dependency property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-366">속성에 연결 된 애니메이션이 없는 경우 해당 <xref:System.Windows.ContentElement.GetAnimationBaseValue%2A> 반환 값은 항상 동일 합니다 <xref:System.Windows.DependencyObject.GetValue%2A> 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-366">If no animations are attached to the property, then the <xref:System.Windows.ContentElement.GetAnimationBaseValue%2A> return value is always identical to the <xref:System.Windows.DependencyObject.GetValue%2A> return value.</span></span> <span data-ttu-id="7d306-367">연결 된 애니메이션의 경우 모든 가능한 애니메이션 시작 부분을 포함 하 여 값을 파생 하는 다음 및 중지 값 무시 되 고 속성 값을 다른 모든 사용 가능한 입력에 따라 결정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-367">If there are animations attached, then all possible animation derived values including the start and stop values are ignored, and the property value is determined based on all other possible inputs.</span></span> <span data-ttu-id="7d306-368">자세한 내용은 [종속성 속성 값 우선 순위](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-368">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal virtual System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberSignature Language="F#" Value="abstract member GetUIParentCore : unit -&gt; System.Windows.DependencyObject&#xA;override this.GetUIParentCore : unit -&gt; System.Windows.DependencyObject" Usage="contentElement.GetUIParentCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7d306-369">파생 클래스에서 재정의되는 경우 시각적 부모가 없으면 이 요소에 대해 다른 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 부모를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-369">When overridden in a derived class, returns an alternative [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] parent for this element if no visual parent exists.</span></span></summary>
        <returns><span data-ttu-id="7d306-370">파생 클래스 구현에 보고할 다른 부모 연결이 있는 경우의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-370">An object, if implementation of a derived class has an alternate parent connection to report.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-371">이 메서드의 기본 가상 구현은 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-371">The default virtual implementation of this method returns `null`.</span></span> <span data-ttu-id="7d306-372"><xref:System.Windows.FrameworkContentElement> 실제 구현을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-372"><xref:System.Windows.FrameworkContentElement> provides a practical implementation.</span></span>  
  
 <span data-ttu-id="7d306-373">대체 부모가 있는 요소를 만들어 경우 대체 부모 구조체 이벤트 라우팅되도록 표준 부모의 시각적 트리를 라우팅의 표준 패턴에서 달라 지므로 하는 방식에서, 이벤트 라우팅에 사용 되는 중이거나 아래쪽에 라우팅 전략을 미리 봅니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-373">Alternative parents are used for event routing, in cases where an element creates an alternative parent structure so that its events are routed in a way that diverges from the standard pattern of routing up the visual tree to the standard parent, or downward in the preview routing strategy.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ GiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-374">입력 시스템에서 이 요소를 포함하는 기본 끌어서 놓기 이벤트를 보고하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-374">Occurs when the input system reports an underlying drag-and-drop event that involves this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-375"><xref:System.Windows.ContentElement.GiveFeedback> 이벤트를 사용 하면 끌어서 놓기 작업 중 사용자의 시각적 피드백을 제공 하기 위해 마우스 포인터의 모양을 수정 하는 끌기 이벤트의 소스입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-375">The <xref:System.Windows.ContentElement.GiveFeedback> event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation.</span></span> <span data-ttu-id="7d306-376">시각적 피드백을 끌어서 놓기 작업이 진행에서 되는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-376">The visual feedback reinforces that a drag-and-drop operation is in process.</span></span>  
  
 <span data-ttu-id="7d306-377">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.GiveFeedback> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-377">This event creates an alias for the <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.ContentElement.GiveFeedback> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-378">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.GiveFeedback> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-378">Event handlers that are attached to the <xref:System.Windows.ContentElement.GiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_GiveFeedback"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-379">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-379">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-380">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-380">Identifier field</span></span>|<xref:System.Windows.ContentElement.GiveFeedbackEvent>|  
|<span data-ttu-id="7d306-381">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-381">Routing strategy</span></span>|<span data-ttu-id="7d306-382">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-382">Bubbling</span></span>|  
|<span data-ttu-id="7d306-383">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-383">Delegate</span></span>|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   <span data-ttu-id="7d306-384">해당 터널링 이벤트가 <xref:System.Windows.ContentElement.PreviewGiveFeedback>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-384">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewGiveFeedback>.</span></span>  
  
-   <span data-ttu-id="7d306-385">재정의 <xref:System.Windows.ContentElement.OnGiveFeedback%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-385">Override <xref:System.Windows.ContentElement.OnGiveFeedback%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="GiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.GiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-386"><see cref="E:System.Windows.ContentElement.GiveFeedback" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-386">Identifies the <see cref="E:System.Windows.ContentElement.GiveFeedback" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-387">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-387">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-388">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-388">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-389">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-389">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-390">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-390">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-391">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-391">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : System.Windows.RoutedEventHandler " Usage="member this.GotFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-392">이 요소가 논리 포커스를 가져오면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-392">Occurs when this element gets logical focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-393">논리 포커스 메서드 호출을 사용 하 여 포커스를 강제로 했지만 이전 키보드 포커스가 다른 범위에 있는 경우 키보드 포커스가 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-393">Logical focus differs from keyboard focus if focus is deliberately forced by using a method call but the previous keyboard focus exists in a different scope.</span></span> <span data-ttu-id="7d306-394">이 시나리오에서는 키보드 포커스가 유지 위치와 요소의 위치를 <xref:System.Windows.ContentElement.Focus%2A> 메서드는 여전히 논리적 포커스를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-394">In this scenario, keyboard focus remains where it is and the element where a <xref:System.Windows.ContentElement.Focus%2A> method is called still gets logical focus.</span></span>  
  
 <span data-ttu-id="7d306-395">보다 정밀 하 게 설명 하면이 이벤트는 발생할 때의 값을 <xref:System.Windows.ContentElement.IsFocused%2A> 경로에 있는 요소의 속성에서 변경 되 `false` 를 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-395">A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.ContentElement.IsFocused%2A> property of an element in the route is changed from `false` to `true`.</span></span>  
  
 <span data-ttu-id="7d306-396">이 이벤트는 버블링 라우팅을 사용 하므로 포커스를 받는 요소 이벤트 처리기가 실제로 연결 되어 있는 요소 대신 자식 요소를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-396">Because this event uses bubbling routing, the element that receives focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="7d306-397">확인 된 <xref:System.Windows.RoutedEventArgs.Source%2A> 포커스가 있는 실제 요소를 확인 하기 위해 이벤트 데이터에서.</span><span class="sxs-lookup"><span data-stu-id="7d306-397">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.</span></span>  
  
<a name="routedEventInfo_GotFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-398">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-398">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-399">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-399">Identifier field</span></span>|<xref:System.Windows.ContentElement.GotFocusEvent>|  
|<span data-ttu-id="7d306-400">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-400">Routing strategy</span></span>|<span data-ttu-id="7d306-401">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-401">Bubbling</span></span>|  
|<span data-ttu-id="7d306-402">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-402">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
-   <span data-ttu-id="7d306-403">해당 없음 터널링 이벤트가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-403">There is no corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="7d306-404">재정의 <xref:System.Windows.ContentElement.OnGotFocus%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-404">Override <xref:System.Windows.ContentElement.OnGotFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotKeyboardFocus" />
        <altmember cref="M:System.Windows.ContentElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="GotFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.GotFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-405"><see cref="E:System.Windows.ContentElement.GotFocus" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-405">Identifies the <see cref="E:System.Windows.ContentElement.GotFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-406">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-406">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-407">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-407">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-408">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-408">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-409">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-409">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-410">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-410">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ GotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-411">이 요소에 키보드 포커스가 있으면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-411">Occurs when the keyboard is focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-412"><xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> 요소에 대 한 포커스 상태를 유지 하는 속성의 상태 변경 내용을 추적 하는 유사한 이벤트 <xref:System.Windows.ContentElement.GotKeyboardFocus> 다양 한 동일한 상황에서 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-412"><xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> is a similar event that tracks status changes in a property that maintains the focus state for an element; the <xref:System.Windows.ContentElement.GotKeyboardFocus> event is raised in many of the same circumstances.</span></span>  
  
 <span data-ttu-id="7d306-413">이 이벤트는 버블링 라우팅을 사용 하기 때문에 포커스가 있는 요소 이벤트 처리기가 실제로 연결 되어 있는 요소 대신 자식 요소를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-413">Because this event uses bubbling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="7d306-414">확인 된 <xref:System.Windows.RoutedEventArgs.Source%2A> 실제 포커스가 있는 요소를 확인 하기 위해 이벤트 데이터의 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-414">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.</span></span>  
  
 <span data-ttu-id="7d306-415">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.GotKeyboardFocus> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-415">This event creates an alias for the <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.ContentElement.GotKeyboardFocus> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-416">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.GotKeyboardFocus> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-416">Event handlers that are attached to the <xref:System.Windows.ContentElement.GotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_GotKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-417">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-417">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-418">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-418">Identifier field</span></span>|<xref:System.Windows.ContentElement.GotKeyboardFocusEvent>|  
|<span data-ttu-id="7d306-419">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-419">Routing strategy</span></span>|<span data-ttu-id="7d306-420">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-420">Bubbling</span></span>|  
|<span data-ttu-id="7d306-421">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-421">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="7d306-422">해당 터널링 이벤트가 <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-422">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="7d306-423">재정의 <xref:System.Windows.ContentElement.OnGotKeyboardFocus%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-423">Override <xref:System.Windows.ContentElement.OnGotKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.GotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-424"><see cref="E:System.Windows.ContentElement.GotKeyboardFocus" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-424">Identifies the <see cref="E:System.Windows.ContentElement.GotKeyboardFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-425">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-425">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-426">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-426">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-427">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-427">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-428">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-428">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-429">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-429">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler GotMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler GotMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ GotMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-430">이 요소가 마우스를 캡처하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-430">Occurs when this element captures the mouse.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-431">마우스를 캡처한 요소 마우스 포인터가 해당 경계 밖에 있는 경우에 마우스 입력을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-431">When an element captures the mouse, it receives mouse input even if the mouse pointer is outside its bounds.</span></span> <span data-ttu-id="7d306-432">끌어서 놓기 작업 중에 마우스가 일반적으로 캡처되고 캡처된까지 끌어서 놓기 작업의 삭제 동작이 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-432">The mouse is typically captured only during drag-and-drop operations and remains captured until the drop action of the drag-and-drop operation occurs.</span></span>  
  
 <span data-ttu-id="7d306-433">이 이벤트는 버블링 라우팅을 사용 하므로 캡처가 있는 요소의 이벤트 처리기가 실제로 연결 되어 있는 요소 대신를 자식 요소일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-433">Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="7d306-434">확인 된 <xref:System.Windows.RoutedEventArgs.Source%2A> 마우스를 사용 하는 실제 요소를 확인 하는 데이터의 캡처 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-434">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has mouse capture.</span></span>  
  
 <span data-ttu-id="7d306-435">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.GotMouseCapture> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-435">This event creates an alias for the <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> attached event for  this class so that <xref:System.Windows.ContentElement.GotMouseCapture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-436">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.GotMouseCapture> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-436">Event handlers that are attached to the <xref:System.Windows.ContentElement.GotMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_GotMouseCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-437">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-437">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-438">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-438">Identifier field</span></span>|<xref:System.Windows.ContentElement.GotMouseCaptureEvent>|  
|<span data-ttu-id="7d306-439">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-439">Routing strategy</span></span>|<span data-ttu-id="7d306-440">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-440">Bubbling</span></span>|  
|<span data-ttu-id="7d306-441">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-441">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="7d306-442">정의 된 해당 터널링 이벤트가 없습니다 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-442">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="7d306-443">재정의 <xref:System.Windows.ContentElement.OnGotMouseCapture%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-443">Override <xref:System.Windows.ContentElement.OnGotMouseCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="GotMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.GotMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-444"><see cref="E:System.Windows.ContentElement.GotMouseCapture" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-444">Identifies the <see cref="E:System.Windows.ContentElement.GotMouseCapture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-445">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-445">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-446">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-446">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-447">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-447">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-448">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-448">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-449">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-449">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler GotStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler GotStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ GotStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-450">이 요소가 스타일러스를 캡처하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-450">Occurs when this element captures the stylus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-451">스타일러스를 캡처한 요소 포인터가 해당 경계 밖에 있는 경우에 스타일러스 입력을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-451">When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="7d306-452">스타일러스는 끌어서 놓기 작업의 삭제 동작이 발생할 때까지 캡처를 유지 하 고는 일반적으로 끌어서 놓기 작업 중에 캡처됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-452">The stylus is typically captured only during drag-and-drop operations and retains capture until the drop action of the drag-and-drop operation occurs.</span></span>  
  
 <span data-ttu-id="7d306-453">이 이벤트는 버블링 라우팅을 사용 하므로 캡처가 있는 요소의 이벤트 처리기가 실제로 연결 되어 있는 요소 대신를 자식 요소일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-453">Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="7d306-454">확인 된 <xref:System.Windows.RoutedEventArgs.Source%2A> 이벤트 데이터 캡처에는 실제 요소를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-454">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has capture.</span></span>  
  
 <span data-ttu-id="7d306-455">이 이벤트는이 클래스에 대 한 연결된 된 이벤트에 대 한 별칭을 만들어 되도록 <xref:System.Windows.ContentElement.GotStylusCapture> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-455">This event creates an alias for the  attached event for this class so that <xref:System.Windows.ContentElement.GotStylusCapture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-456">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.GotStylusCapture> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-456">Event handlers that are attached to the <xref:System.Windows.ContentElement.GotStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_GotStylusCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-457">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-457">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-458">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-458">Identifier field</span></span>|<xref:System.Windows.ContentElement.GotStylusCaptureEvent>|  
|<span data-ttu-id="7d306-459">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-459">Routing strategy</span></span>|<span data-ttu-id="7d306-460">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-460">Bubbling</span></span>|  
|<span data-ttu-id="7d306-461">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-461">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="7d306-462">정의 된 해당 터널링 이벤트가 없습니다 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-462">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="7d306-463">재정의 <xref:System.Windows.ContentElement.OnGotStylusCapture%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-463">Override <xref:System.Windows.ContentElement.OnGotStylusCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.GotStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-464"><see cref="E:System.Windows.ContentElement.GotStylusCapture" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-464">Identifies the <see cref="E:System.Windows.ContentElement.GotStylusCapture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-465">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-465">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-466">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-466">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-467">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-467">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-468">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-468">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-469">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-469">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; GotTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; GotTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ GotTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.GotTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.GotTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-470">이 요소에 터치가 캡처될 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-470">Occurs when a touch is captured to this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_GotTouchCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-471">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-471">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-472">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-472">Identifier field</span></span>|<xref:System.Windows.ContentElement.GotTouchCaptureEvent>|  
|<span data-ttu-id="7d306-473">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-473">Routing strategy</span></span>|<span data-ttu-id="7d306-474">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-474">Bubbling</span></span>|  
|<span data-ttu-id="7d306-475">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-475">Delegate</span></span>|<span data-ttu-id="7d306-476"><xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.TouchEventArgs>입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-476"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="7d306-477">재정의 <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-477">Override <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.GotTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-478"><see cref="E:System.Windows.ContentElement.GotTouchCapture" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-478">Identifies the <see cref="E:System.Windows.ContentElement.GotTouchCapture" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnimatedProperties">
      <MemberSignature Language="C#" Value="public bool HasAnimatedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAnimatedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.HasAnimatedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAnimatedProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAnimatedProperties { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasAnimatedProperties : bool" Usage="System.Windows.ContentElement.HasAnimatedProperties" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Media.Animation.IAnimatable.HasAnimatedProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-479">이 요소에 애니메이션이 적용된 속성이 있는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-479">Gets a value that indicates whether this element has any animated properties.</span></span></summary>
        <value><span data-ttu-id="7d306-480">이 요소의 속성에 애니메이션이 연결되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-480"><see langword="true" /> if this element has animations attached to any of its properties; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-481">이 속성은 반환 `true` 영구 (unclocked, 항상 실행) 애니메이션이 나 애니메이션을 일정에 대 한 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-481">This property returns `true` either for persistent (unclocked, always-running) animations or for animations that have a specific timeline.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputBindingCollection InputBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputBindingCollection InputBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.InputBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputBindings As InputBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputBindingCollection ^ InputBindings { System::Windows::Input::InputBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputBindings : System.Windows.Input.InputBindingCollection" Usage="System.Windows.ContentElement.InputBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-482">이 요소와 연결된 입력 바인딩 컬렉션을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-482">Gets the collection of input bindings that are associated with this element.</span></span></summary>
        <value><span data-ttu-id="7d306-483">입력 바인딩 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-483">The collection of input bindings.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-484">입력된 바인딩은 입력 장치에 명령의 바인딩을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-484">Input bindings support the binding of commands to input devices.</span></span> <span data-ttu-id="7d306-485">예를 들어 <xref:System.Windows.Input.MouseBinding> 입력 마우스 장치와 관련 된 속성을 포함 하는 바인딩을 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-485">For example, <xref:System.Windows.Input.MouseBinding> implements input bindings that include properties that are specific to mouse devices.</span></span>  
  
 <span data-ttu-id="7d306-486">입력 바인딩의 컬렉션 형식에 속하는 입력된 바인딩은 모두 및 입력된 바인딩 인스턴스에서 선언 된도 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-486">The collection of input bindings includes both input bindings that pertain to the type and also input bindings that are declared on the instance.</span></span>  
  
 <span data-ttu-id="7d306-487">관련된 속성을 <xref:System.Windows.ContentElement.CommandBindings%2A>, 명령 바인딩의 컬렉션을 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-487">A related property, <xref:System.Windows.ContentElement.CommandBindings%2A>, maintains a collection of command bindings.</span></span> <span data-ttu-id="7d306-488">이러한 바인딩은 나타낸다는 점에서 다음 수준 아래로 명령 처리에 알려진된 명령 및 관련 클래스 처리기에 연결 된 작업의 입력 바인딩에서 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-488">These bindings differ from input bindings in that they represent the next level down of command processing - actions that are tied to known commands and class-specific handlers for them.</span></span>  
  
<a name="xamlPropertyElementUsage_InputBindings"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="7d306-489">XAML 속성 요소 사용</span><span class="sxs-lookup"><span data-stu-id="7d306-489">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.InputBindings>  
    oneOrMoreInputBindings  </object.InputBindings>  
</object>  
```  
  
<a name="xamlValues_InputBindings"></a>   
## <a name="xaml-values"></a><span data-ttu-id="7d306-490">XAML 값</span><span class="sxs-lookup"><span data-stu-id="7d306-490">XAML Values</span></span>  
 <span data-ttu-id="7d306-491">*oneOrMoreInputBindings*</span><span class="sxs-lookup"><span data-stu-id="7d306-491">*oneOrMoreInputBindings*</span></span>  
 <span data-ttu-id="7d306-492">하나 이상의 <xref:System.Windows.Input.InputBinding> 요소 (일반적으로 <xref:System.Windows.Input.KeyBinding> 또는 <xref:System.Windows.Input.MouseBinding> 파생 클래스).</span><span class="sxs-lookup"><span data-stu-id="7d306-492">One or more <xref:System.Windows.Input.InputBinding> elements (typically the <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding> derived classes).</span></span> <span data-ttu-id="7d306-493">이러한 각 것으로 예상 되는 <xref:System.Windows.Input.InputBinding.Command%2A> 및 <xref:System.Windows.Input.InputBinding.Gesture%2A> 특성이 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-493">Each of these is expected to have a <xref:System.Windows.Input.InputBinding.Command%2A> and <xref:System.Windows.Input.InputBinding.Gesture%2A> attribute set.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.ContentElement.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-494">이 요소를 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]에서 사용할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-494">Gets or sets a value that indicates whether this element is enabled in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span></summary>
        <value><span data-ttu-id="7d306-495">요소를 사용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-495"><see langword="true" /> if the element is enabled; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7d306-496">기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-496">The default value is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7d306-497">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-497">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-498">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-498">Identifier field</span></span>|<xref:System.Windows.ContentElement.IsEnabledProperty>|  
|<span data-ttu-id="7d306-499">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="7d306-499">Metadata properties set to `true`</span></span>|<span data-ttu-id="7d306-500">없음</span><span class="sxs-lookup"><span data-stu-id="7d306-500">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="7d306-501">다음 예제에서는 다른 시각적 동작을 제공 하는 속성 setter를 포함 하는 스타일 경우는 <xref:System.Windows.Documents.Hyperlink> 로 설정 된 <xref:System.Windows.ContentElement.IsEnabled%2A> `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-501">The following example creates a style that includes a property setter that gives an alternate visual behavior when a <xref:System.Windows.Documents.Hyperlink> is set to <xref:System.Windows.ContentElement.IsEnabled%2A> `false`.</span></span>  
  
 [!code-xaml[ContentElementsSmorgasbord#IsEnabledIsMouseOver](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#isenabledismouseover)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsEnabledChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsEnabledChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsEnabledChanged;" />
      <MemberSignature Language="F#" Value="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-502">이 요소의 <see cref="P:System.Windows.ContentElement.IsEnabled" /> 속성 값이 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-502">Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsEnabled" /> property on this element changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-503">이 멤버는 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트를 라우트된 이벤트를 사용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-503">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledCore">
      <MemberSignature Language="C#" Value="protected virtual bool IsEnabledCore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabledCore" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsEnabledCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsEnabledCore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsEnabledCore { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabledCore : bool" Usage="System.Windows.ContentElement.IsEnabledCore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-504">파생 클래스에서 <see cref="P:System.Windows.ContentElement.IsEnabled" />의 반환 값이 되는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-504">Gets a value that becomes the return value of <see cref="P:System.Windows.ContentElement.IsEnabled" /> in derived classes.</span></span></summary>
        <value><span data-ttu-id="7d306-505">요소를 사용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-505"><see langword="true" /> if the element is enabled; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="7d306-506">이 속성의 기본 구현 값을 캐시 합니다 및이 요소의 부모 요소를 사용할 수 있는지 여부를 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-506">The default implementation of this property caches the value and also calculates whether the parent element of this element is enabled.</span></span> <span data-ttu-id="7d306-507">(부모를 사용 하지 않는 경우 자식 요소를 사용할 수 없습니다 효과적으로 유용한 팁에서 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].) 이 구현을 재정의 확인 하려는 경우이 동작을 유지 하는 기본 구현을 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-507">(If the parent is not enabled, the child element cannot be effectively enabled in practical [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].) If you choose to override this implementation, make certain that you call the base implementation to preserve this behavior.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-508"><see cref="P:System.Windows.ContentElement.IsEnabled" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-508">Identifies the <see cref="P:System.Windows.ContentElement.IsEnabled" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFocused">
      <MemberSignature Language="C#" Value="public bool IsFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFocused : bool" Usage="System.Windows.ContentElement.IsFocused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-509">이 요소에 논리 포커스가 있는지 여부를 결정하는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-509">Gets a value that determines whether this element has logical focus.</span></span></summary>
        <value><span data-ttu-id="7d306-510">이 요소에 논리 포커스가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-510"><see langword="true" /> if this element has logical focus; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-511">응용 프로그램 메뉴 내용 사이의 응용 프로그램의 나머지와 같은 여러 포커스 사업부에 논리 포커스는 키보드 포커스가 달라질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-511">Logical focus might differ from keyboard focus if an application has multiple focus divisions, such as between menu contents and the remainder of the application.</span></span> <span data-ttu-id="7d306-512">이 시나리오에서는 응용 프로그램 UI의 한 요소에 키보드 포커스 가능, 다른 포커스 사업부의 특정 요소 논리 포커스가 있습니다 계속 유지 하는 단, 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-512">In this scenario, keyboard focus can only be on one element of the application  UI, however, certain elements in other focus divisions might still retain logical focus.</span></span> <span data-ttu-id="7d306-513">논리 포커스에 대 한 자세한 내용은 참조 하세요. [입력 개요](~/docs/framework/wpf/advanced/input-overview.md) 하 고 [포커스 개요](~/docs/framework/wpf/advanced/focus-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-513">For more information on logical focus, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md) and [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsFocused"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7d306-514">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-514">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-515">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-515">Identifier field</span></span>|<xref:System.Windows.ContentElement.IsFocusedProperty>|  
|<span data-ttu-id="7d306-516">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="7d306-516">Metadata properties set to `true`</span></span>|<span data-ttu-id="7d306-517">없음</span><span class="sxs-lookup"><span data-stu-id="7d306-517">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="7d306-518">스타일을 만드는 다음 예제는 <xref:System.Windows.Documents.Paragraph> 기본적으로 포커스를 받을 수 하 고 포커스를 받을 때 시각적 동작을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-518">The following example creates a style that makes a <xref:System.Windows.Documents.Paragraph> focusable by default and gives it a visual behavior when it receives focus.</span></span>  
  
 [!code-xaml[ContentElementsSmorgasbord#Focusable](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#focusable)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="IsFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-519"><see cref="P:System.Windows.ContentElement.IsFocused" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-519">Identifies the <see cref="P:System.Windows.ContentElement.IsFocused" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInputMethodEnabled">
      <MemberSignature Language="C#" Value="public bool IsInputMethodEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInputMethodEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsInputMethodEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInputMethodEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInputMethodEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInputMethodEnabled : bool" Usage="System.Windows.ContentElement.IsInputMethodEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-520">[!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)] 등의 입력 메서드 시스템에서 이 요소에 대한 입력을 처리할 수 있는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-520">Gets a value that indicates whether an input method system, such as an [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)], is enabled for processing the input to this element.</span></span></summary>
        <value><span data-ttu-id="7d306-521">입력 방법이 활성 상태이면 <see langword="true" />이고, 활성 상태가 아니면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-521"><see langword="true" /> if an input method is active; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7d306-522">기본 연결 된 속성의 기본값은 <see langword="true" />하지만이 값은 런타임에 입력된 방법의 상태에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-522">The default value of the underlying attached property is <see langword="true" />; however, this value is influenced by the state of input methods at runtime.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-523">이 속성에 연결된 된 속성에서 반환 되는 값을 반환 합니다 <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType> (키보드, 음성 및 기타 입력된 장치) 현재 사용 가능한 입력된 메서드에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-523">This property returns the value that is returned by the attached property <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType> for the currently enabled input methods (keyboard, speech, and other input devices).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocused">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsKeyboardFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocused : bool" Usage="System.Windows.ContentElement.IsKeyboardFocused" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocused</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-524">이 요소에 키보드 포커스가 있는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-524">Gets a value that indicates whether this element has keyboard focus.</span></span></summary>
        <value><span data-ttu-id="7d306-525">이 요소에 키보드 포커스가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-525"><see langword="true" /> if this element has keyboard focus; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7d306-526">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-526">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsKeyboardFocused"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7d306-527">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-527">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-528">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-528">Identifier field</span></span>|<xref:System.Windows.ContentElement.IsKeyboardFocusedProperty>|  
|<span data-ttu-id="7d306-529">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="7d306-529">Metadata properties set to `true`</span></span>|<span data-ttu-id="7d306-530">없음</span><span class="sxs-lookup"><span data-stu-id="7d306-530">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotFocus" />
        <altmember cref="E:System.Windows.ContentElement.LostFocus" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsKeyboardFocusedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-531">이 요소의 <see cref="P:System.Windows.ContentElement.IsKeyboardFocused" /> 속성 값이 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-531">Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsKeyboardFocused" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-532">이 멤버는 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트를 라우트된 이벤트를 사용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-532">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsKeyboardFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsKeyboardFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-533"><see cref="P:System.Windows.ContentElement.IsKeyboardFocused" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-533">Identifies the <see cref="P:System.Windows.ContentElement.IsKeyboardFocused" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithin">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocusWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocusWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsKeyboardFocusWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocusWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocusWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithin : bool" Usage="System.Windows.ContentElement.IsKeyboardFocusWithin" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocusWithin</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-534">키보드 포커스가 요소 내에 있는지 아니면 자식 요소에 있는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-534">Gets a value that indicates whether keyboard focus is anywhere within the element or child elements.</span></span></summary>
        <value><span data-ttu-id="7d306-535">키보드 포커스가 요소 또는 자식 요소에 있으면 <see langword="true" />이고, 없으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-535"><see langword="true" /> if keyboard focus is on the element or its child elements; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7d306-536">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-536">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-537">이 속성의 값을 변경 하는 일반적으로 발생 합니다 <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> 이벤트를 파생된 클래스에 재정의 되지 않은 경우 <xref:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged%2A> 이벤트를 표시 하지 않으려면입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-537">Changes to the value of this property typically raise the <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> event, unless a derived class has overridden <xref:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged%2A> to suppress the event.</span></span>  
  
 <span data-ttu-id="7d306-538">이 속성은 직접 설정 하지는 않지만 호출 하 여 요소에 포커스를 설정할 수 있습니다 <xref:System.Windows.ContentElement.Focus%2A>, 또는 여는 <xref:System.Windows.ContentElement.MoveFocus%2A> 요청 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-538">You do not set this property directly, but you can set the focus to the element by calling <xref:System.Windows.ContentElement.Focus%2A>, or by making a <xref:System.Windows.ContentElement.MoveFocus%2A> request.</span></span> <span data-ttu-id="7d306-539">이러한 메서드 호출 중 하나는 속성 값이 변경 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-539">Either of these method calls might change this property value.</span></span>  
  
<a name="dependencyPropertyInfo_IsKeyboardFocusWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7d306-540">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-540">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-541">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-541">Identifier field</span></span>|<xref:System.Windows.ContentElement.IsKeyboardFocusWithinProperty>|  
|<span data-ttu-id="7d306-542">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="7d306-542">Metadata properties set to `true`</span></span>|<span data-ttu-id="7d306-543">없음</span><span class="sxs-lookup"><span data-stu-id="7d306-543">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-544">이 요소의 <see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" /> 속성 값이 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-544">Occurs when the value of the <see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-545">이 멤버는 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트를 라우트된 이벤트를 사용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-545">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.IsKeyboardFocusedChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsKeyboardFocusWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-546"><see cref="P:System.Windows.ContentElement.IsKeyboardFocusWithin" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-546">Identifies the <see cref="P:System.Windows.ContentElement.IsKeyboardFocusWithin" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptured">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsMouseCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptured : bool" Usage="System.Windows.ContentElement.IsMouseCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-547">마우스가 이 요소에 의해 캡처되었는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-547">Gets a value that indicates whether the mouse is captured by this element.</span></span></summary>
        <value><span data-ttu-id="7d306-548">요소에 마우스 캡처가 있으면 <see langword="true" />이고, 없으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-548"><see langword="true" /> if the element has mouse capture; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7d306-549">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-549">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-550">마우스 캡처 상태를 in-process 끌어서 놓기 작업 관련이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-550">Mouse capture state is related to in-process drag-and-drop operations.</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseCaptured"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7d306-551">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-551">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-552">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-552">Identifier field</span></span>|<xref:System.Windows.ContentElement.IsMouseCapturedProperty>|  
|<span data-ttu-id="7d306-553">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="7d306-553">Metadata properties set to `true`</span></span>|<span data-ttu-id="7d306-554">없음</span><span class="sxs-lookup"><span data-stu-id="7d306-554">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="7d306-555">다음 예제에서는 켜거나 마우스 캡처 상태는 요소에 의해 이미 캡처한 여부에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-555">The following example turns the mouse capture state on or off based on whether the mouse is already captured by the element.</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#ismousecaptured)]
 [!code-vb[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#ismousecaptured)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.CaptureMouse" />
        <altmember cref="E:System.Windows.ContentElement.GotMouseCapture" />
        <altmember cref="E:System.Windows.ContentElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsMouseCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-556">이 요소의 <see cref="P:System.Windows.ContentElement.IsMouseCaptured" /> 속성 값이 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-556">Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsMouseCaptured" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-557">이 멤버는 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트를 라우트된 이벤트를 사용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-557">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsMouseCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsMouseCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-558"><see cref="P:System.Windows.ContentElement.IsMouseCaptured" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-558">Identifies the <see cref="P:System.Windows.ContentElement.IsMouseCaptured" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsMouseCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithin : bool" Usage="System.Windows.ContentElement.IsMouseCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-559">마우스 캡처가 이 요소 또는 해당 요소 트리의 자식 요소에 의해 보류되는지 여부를 결정하는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-559">Gets a value that determines whether mouse capture is held by this element or by child elements in its element tree.</span></span></summary>
        <value><span data-ttu-id="7d306-560">이 요소 또는 포함된 요소에 마우스 캡처가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-560"><see langword="true" /> if this element or a contained element has mouse capture; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7d306-561">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-561">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsMouseCaptureWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7d306-562">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-562">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-563">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-563">Identifier field</span></span>|<xref:System.Windows.ContentElement.IsMouseCaptureWithinProperty>|  
|<span data-ttu-id="7d306-564">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="7d306-564">Metadata properties set to `true`</span></span>|<span data-ttu-id="7d306-565">없음</span><span class="sxs-lookup"><span data-stu-id="7d306-565">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.IsMouseCaptured" />
        <altmember cref="M:System.Windows.ContentElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-566">이 요소의 <see cref="F:System.Windows.ContentElement.IsMouseCaptureWithinProperty" /> 값이 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-566">Occurs when the value of the <see cref="F:System.Windows.ContentElement.IsMouseCaptureWithinProperty" /> changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-567">이 멤버는 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트를 라우트된 이벤트를 사용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-567">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsMouseCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsMouseCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-568"><see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-568">Identifies the <see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsMouseDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsMouseDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOver : bool" Usage="System.Windows.ContentElement.IsMouseDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-569">마우스 포인터의 위치가 요소 합치기를 고려한 적중 횟수 테스트 결과와 일치하는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-569">Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.</span></span></summary>
        <value><span data-ttu-id="7d306-570">마우스 포인터가 적중 횟수 테스트와 동일한 요소 결과 위에 있으면 <see langword="true" />이고, 없으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-570"><see langword="true" /> if the mouse pointer is over the same element result as a hit test; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7d306-571">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-571">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-572">와 달리 <xref:System.Windows.ContentElement.IsMouseOver%2A>,이 속성은만 `true` 적중 횟수 테스트에 대 한 리터럴 요소-위에 마우스 포인터 인지 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-572">Unlike <xref:System.Windows.ContentElement.IsMouseOver%2A>, this property is only `true` if the mouse pointer is over the literal element - as it is for a hit test.</span></span> <span data-ttu-id="7d306-573">마우스 포인터가 자식 요소 위에 있으면 특히 요소의 하위 수준 템플릿 및 합성 된 요소를 통해이 속성은 됩니다 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-573">If the mouse pointer is instead over a child element, in particular over elements that are part of an element's deeper template and compositing, this property will be `false`.</span></span> <span data-ttu-id="7d306-574">컨트롤 합성 되는 방식을 알 수 없는 경우 (예를 들어이 속성 사용 하면 사용자 지정 컨트롤 템플릿에서 정의 하는 컨트롤에 대 한),이 속성에서 예기치 않은 결과 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-574">Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</span></span> <span data-ttu-id="7d306-575">컨트롤 제작 하지 않는 대부분의 시나리오에서 사용 하 여 <xref:System.Windows.ContentElement.IsMouseOver%2A> 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-575">For most scenarios where you are not authoring controls, use <xref:System.Windows.ContentElement.IsMouseOver%2A> instead.</span></span>  
  
 <span data-ttu-id="7d306-576">이 요소에 마우스가 캡처되는지 경우 및이 속성은 `true` 캡처 시이 속성은 반환할 계속 `true` 까지 마우스 캡처가 손실 되 고 해당 영역 위에 포인터가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-576">If the mouse is captured by this element, and this property is `true` at time of capture, this property will continue to return `true` until mouse capture is lost and the pointer is not over its bounds.</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseDirectlyOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7d306-577">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-577">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-578">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-578">Identifier field</span></span>|<xref:System.Windows.ContentElement.IsMouseDirectlyOverProperty>|  
|<span data-ttu-id="7d306-579">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="7d306-579">Metadata properties set to `true`</span></span>|<span data-ttu-id="7d306-580">없음</span><span class="sxs-lookup"><span data-stu-id="7d306-580">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseEnter" />
        <altmember cref="E:System.Windows.ContentElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsMouseDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-581">이 요소의 <see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" /> 속성 값이 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-581">Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-582">이 멤버는 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트를 라우트된 이벤트를 사용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-582">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsMouseDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsMouseDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-583"><see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-583">Identifies the <see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOver">
      <MemberSignature Language="C#" Value="public bool IsMouseOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsMouseOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseOver : bool" Usage="System.Windows.ContentElement.IsMouseOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-584">마우스 포인터가 시각적 자식 요소 또는 해당 컨트롤 합성을 포함하여 이 요소 위에 있는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-584">Gets a value that indicates whether the mouse pointer is located over this element (including visual child elements, or its control compositing).</span></span></summary>
        <value><span data-ttu-id="7d306-585">마우스 포인터가 요소 또는 해당 자식 요소 위에 있으면 <see langword="true" />이고, 없으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-585"><see langword="true" /> if mouse pointer is over the element or its child elements; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7d306-586">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-586">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-587">유사한 "IsMouseOverChanged" 이벤트, 존재 하지 않더라도 여러 비슷한 이벤트 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-587">Although an analogous "IsMouseOverChanged" event does not exist, several similar events do.</span></span> <span data-ttu-id="7d306-588">예를 들어 사용할 수 있습니다 <xref:System.Windows.ContentElement.MouseEnter>하십시오 <xref:System.Windows.ContentElement.MouseMove>, 및 <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-588">For example, you can use <xref:System.Windows.ContentElement.MouseEnter>, <xref:System.Windows.ContentElement.MouseMove>, and <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged>.</span></span>  
  
 <span data-ttu-id="7d306-589">이 속성은이 요소가 마우스를 캡처한 경우 `true` 마우스 캡처가 손실 되 고 마우스 포인터가 요소 범위를 벗어날 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-589">If this element captures the mouse, this property remains `true` until mouse capture is lost and the mouse pointer leaves the element bounds.</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7d306-590">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-590">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-591">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-591">Identifier field</span></span>|<xref:System.Windows.ContentElement.IsMouseOverProperty>|  
|<span data-ttu-id="7d306-592">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="7d306-592">Metadata properties set to `true`</span></span>|<span data-ttu-id="7d306-593">없음</span><span class="sxs-lookup"><span data-stu-id="7d306-593">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="7d306-594">다음 예제에서는 다른 시각적 동작을 제공 하는 속성 setter를 포함 하는 스타일 경우는 <xref:System.Windows.Documents.Hyperlink> 보고서 <xref:System.Windows.ContentElement.IsMouseOver%2A> `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-594">The following example creates a style that includes a property setter that gives an alternate visual behavior when a <xref:System.Windows.Documents.Hyperlink> reports <xref:System.Windows.ContentElement.IsMouseOver%2A> `true`.</span></span>  
  
 [!code-xaml[ContentElementsSmorgasbord#IsEnabledIsMouseOver](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#isenabledismouseover)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsMouseOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsMouseOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-595"><see cref="P:System.Windows.ContentElement.IsMouseOver" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-595">Identifies the <see cref="P:System.Windows.ContentElement.IsMouseOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptured">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsStylusCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptured : bool" Usage="System.Windows.ContentElement.IsStylusCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-596">스타일러스가 이 요소에 캡처되었는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-596">Gets a value that indicates whether the stylus is captured to this element.</span></span></summary>
        <value><span data-ttu-id="7d306-597">요소에 스타일러스 캡처가 있으면 <see langword="true" />이고, 없으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-597"><see langword="true" /> if the element has stylus capture; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7d306-598">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-598">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-599">터치, 마우스 및 스타일러스 입력에 특정 관계에 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-599">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="7d306-600">자세한 내용은 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-600">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusCaptured"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7d306-601">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-601">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-602">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-602">Identifier field</span></span>|<xref:System.Windows.ContentElement.IsStylusCapturedProperty>|  
|<span data-ttu-id="7d306-603">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="7d306-603">Metadata properties set to `true`</span></span>|<span data-ttu-id="7d306-604">없음</span><span class="sxs-lookup"><span data-stu-id="7d306-604">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.CaptureStylus" />
        <altmember cref="E:System.Windows.ContentElement.GotStylusCapture" />
        <altmember cref="E:System.Windows.ContentElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsStylusCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-605">이 요소의 <see cref="P:System.Windows.ContentElement.IsStylusCaptured" /> 속성 값이 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-605">Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsStylusCaptured" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-606">이 멤버는 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트를 라우트된 이벤트를 사용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-606">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsStylusCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsStylusCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-607"><see cref="P:System.Windows.ContentElement.IsStylusCaptured" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-607">Identifies the <see cref="P:System.Windows.ContentElement.IsStylusCaptured" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsStylusCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithin : bool" Usage="System.Windows.ContentElement.IsStylusCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-608">자식 요소 및 컨트롤 합성을 포함하여 스타일러스 캡처를 이 요소에서 보관하는지를 결정하는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-608">Gets a value that determines whether stylus capture is held by this element, including child elements and control compositing.</span></span></summary>
        <value><span data-ttu-id="7d306-609">스타일러스 캡처가 이 요소 내에 보관되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-609"><see langword="true" /> if stylus capture is held within this element; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-610">터치, 마우스 및 스타일러스 입력에 특정 관계에 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-610">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="7d306-611">자세한 내용은 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-611">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusCaptureWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7d306-612">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-612">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-613">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-613">Identifier field</span></span>|<xref:System.Windows.ContentElement.IsStylusCaptureWithinProperty>|  
|<span data-ttu-id="7d306-614">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="7d306-614">Metadata properties set to `true`</span></span>|<span data-ttu-id="7d306-615">없음</span><span class="sxs-lookup"><span data-stu-id="7d306-615">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsStylusCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-616">이 요소의 <see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" /> 속성 값이 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-616">Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-617">이 멤버는 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트를 라우트된 이벤트를 사용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-617">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsStylusCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsStylusCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-618"><see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-618">Identifies the <see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsStylusDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsStylusDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOver : bool" Usage="System.Windows.ContentElement.IsStylusDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-619">스타일러스의 위치가 요소 합치기를 고려한 적중 횟수 테스트 결과와 일치하는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-619">Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.</span></span></summary>
        <value><span data-ttu-id="7d306-620">스타일러스가 적중 테스트와 같은 요소 위에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-620"><see langword="true" /> if the stylus is over the same element as a hit test; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7d306-621">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-621">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-622">와 달리 <xref:System.Windows.ContentElement.IsStylusOver%2A>,이 속성은만 `true` 스타일러스가 요소 위에 있는 경우.</span><span class="sxs-lookup"><span data-stu-id="7d306-622">Unlike <xref:System.Windows.ContentElement.IsStylusOver%2A>, this property is only `true` if the stylus is over the element.</span></span> <span data-ttu-id="7d306-623">이 속성은 됩니다 스타일러스가 요소의 하위 수준 합성 요소 또는 자식 요소 위에 있으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-623">If the stylus is instead over a child element or over elements that are part of an element's deeper compositing, this property will be `false`.</span></span>  
  
 <span data-ttu-id="7d306-624">컨트롤 합성 되는 방식을 알 수 없는 경우 (예를 들어이 속성 사용 하면 사용자 지정 컨트롤 템플릿에서 정의 하는 컨트롤에 대 한),이 속성에서 예기치 않은 결과 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-624">Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</span></span> <span data-ttu-id="7d306-625">컨트롤 제작 하지 않는 대부분의 시나리오에서 사용 하 여 <xref:System.Windows.ContentElement.IsStylusOver%2A> 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-625">For most scenarios where you are not authoring controls, use <xref:System.Windows.ContentElement.IsStylusOver%2A> instead.</span></span>  
  
 <span data-ttu-id="7d306-626">이 요소가 스타일러스 캡처를이 속성은 `true` 캡처 시이 속성은 `true` 스타일러스 캡처가 손실 되며 해당 경계를 넘어 스타일러스 아닙니다 될 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-626">If this element has stylus capture and this property is `true` at the time of capture, this property remains `true` until stylus capture is lost and the stylus is not over its bounds.</span></span>  
  
 <span data-ttu-id="7d306-627">터치, 마우스 및 스타일러스 입력에 특정 관계에 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-627">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="7d306-628">자세한 내용은 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-628">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusDirectlyOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7d306-629">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-629">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-630">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-630">Identifier field</span></span>|<xref:System.Windows.ContentElement.IsStylusDirectlyOverProperty>|  
|<span data-ttu-id="7d306-631">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="7d306-631">Metadata properties set to `true`</span></span>|<span data-ttu-id="7d306-632">없음</span><span class="sxs-lookup"><span data-stu-id="7d306-632">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsStylusDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-633">이 요소의 <see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" /> 속성 값이 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-633">Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-634">이 멤버는 한 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 이벤트를 라우트된 이벤트를 사용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-634">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsStylusDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsStylusDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-635"><see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-635">Identifies the <see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOver">
      <MemberSignature Language="C#" Value="public bool IsStylusOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsStylusOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusOver : bool" Usage="System.Windows.ContentElement.IsStylusOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-636">스타일러스가 시각적 자식 요소를 포함하여 이 요소 위에 있는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-636">Gets a value that indicates whether the stylus is located over this element (including visual child elements).</span></span></summary>
        <value><span data-ttu-id="7d306-637">스타일러스가 요소 또는 자식 요소 위에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-637"><see langword="true" /> if the stylus is over the element or its child elements; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7d306-638">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-638">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-639">이 속성은이 요소에 스타일러스 캡처가 있으면 `true` 스타일러스 캡처가 손실 되 고 포인터를 해당 범위를 벗어났습니다.까지.</span><span class="sxs-lookup"><span data-stu-id="7d306-639">If this element has stylus capture, this property remains `true` until stylus capture is lost and the pointer is out of its bounds.</span></span>  
  
 <span data-ttu-id="7d306-640">터치, 마우스 및 스타일러스 입력에 특정 관계에 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-640">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="7d306-641">자세한 내용은 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-641">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7d306-642">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-642">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-643">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-643">Identifier field</span></span>|<xref:System.Windows.ContentElement.IsStylusOverProperty>|  
|<span data-ttu-id="7d306-644">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="7d306-644">Metadata properties set to `true`</span></span>|<span data-ttu-id="7d306-645">없음</span><span class="sxs-lookup"><span data-stu-id="7d306-645">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsStylusOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsStylusOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-646"><see cref="P:System.Windows.ContentElement.IsStylusOver" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-646">Identifies the <see cref="P:System.Windows.ContentElement.IsStylusOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyDown;" />
      <MemberSignature Language="F#" Value="member this.KeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.KeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-647">이 요소에 포커스가 있는 동안 키를 누르면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-647">Occurs when a key is pressed while focus is on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-648">키 처리 명령 및 텍스트 컴퍼지션 등의 기타 플랫폼 기능을 사용 하 여 상호 작용합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-648">Key handling interacts with other platform features such as commanding and text composition.</span></span> <span data-ttu-id="7d306-649"><xref:System.Windows.ContentElement.KeyDown> 이벤트는 하위 수준의 텍스트 입력된 이벤트는 특정 컨트롤에 예상 대로 작동 하지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-649">The <xref:System.Windows.ContentElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls.</span></span> <span data-ttu-id="7d306-650">일부 컨트롤에 컨트롤 합치기 또는 상위 버전의 텍스트를 제공 하는 클래스 처리 입력 처리 및 관련 이벤트 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-650">This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</span></span>  
  
 <span data-ttu-id="7d306-651">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.KeyDown> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-651">This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.ContentElement.KeyDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-652">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.KeyDown> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-652">Event handlers that are attached to the <xref:System.Windows.ContentElement.KeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_KeyDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-653">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-653">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-654">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-654">Identifier field</span></span>|<xref:System.Windows.ContentElement.KeyDownEvent>|  
|<span data-ttu-id="7d306-655">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-655">Routing strategy</span></span>|<span data-ttu-id="7d306-656">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-656">Bubbling</span></span>|  
|<span data-ttu-id="7d306-657">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-657">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="7d306-658">해당 터널링 이벤트가 <xref:System.Windows.ContentElement.PreviewKeyDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-658">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewKeyDown>.</span></span>  
  
-   <span data-ttu-id="7d306-659">재정의 <xref:System.Windows.ContentElement.OnKeyDown%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-659">Override <xref:System.Windows.ContentElement.OnKeyDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="KeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.KeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.KeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-660"><see cref="E:System.Windows.ContentElement.KeyDown" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-660">Identifies the <see cref="E:System.Windows.ContentElement.KeyDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-661">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-661">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-662">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-662">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-663">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-663">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-664">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-664">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-665">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-665">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyUp;" />
      <MemberSignature Language="F#" Value="member this.KeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.KeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-666">이 요소에 포커스가 있는 동안 키를 놓을 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-666">Occurs when a key is released while focus is on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-667">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.KeyUp> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-667">This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> attached event for this class so that  <xref:System.Windows.ContentElement.KeyUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-668">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.KeyUp> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-668">Event handlers that are attached to the <xref:System.Windows.ContentElement.KeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_KeyUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-669">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-669">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-670">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-670">Identifier field</span></span>|<xref:System.Windows.ContentElement.KeyUpEvent>|  
|<span data-ttu-id="7d306-671">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-671">Routing strategy</span></span>|<span data-ttu-id="7d306-672">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-672">Bubbling</span></span>|  
|<span data-ttu-id="7d306-673">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-673">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="7d306-674">해당 터널링 이벤트가 <xref:System.Windows.ContentElement.PreviewKeyUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-674">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewKeyUp>.</span></span>  
  
-   <span data-ttu-id="7d306-675">재정의 <xref:System.Windows.ContentElement.OnKeyUp%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-675">Override <xref:System.Windows.ContentElement.OnKeyUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.KeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.KeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-676"><see cref="E:System.Windows.ContentElement.KeyUp" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-676">Identifies the <see cref="E:System.Windows.ContentElement.KeyUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-677">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-677">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-678">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-678">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-679">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-679">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-680">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-680">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-681">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-681">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : System.Windows.RoutedEventHandler " Usage="member this.LostFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-682">이 요소가 논리 포커스를 손실하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-682">Occurs when this element loses logical focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-683">메서드 호출을 사용하여 의도적으로 포커스를 다른 위치로 이동했지만 이전 키보드 포커스가 다른 범위에 존재하는 경우 논리적 포커스와 키보드 포커스가 달라집니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-683">Logical focus differs from keyboard focus if focus is deliberately forced away by using a method call but the previous keyboard focus exists in a different scope.</span></span> <span data-ttu-id="7d306-684">이 시나리오, 키보드 포커스 계속 위치 및 요소 위치를 <xref:System.Windows.ContentElement.Focus%2A> 메서드는 여전히 논리적 포커스를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-684">In this scenario, keyboard focus remains where it is, and the element where a <xref:System.Windows.ContentElement.Focus%2A> method is called still gets logical focus.</span></span>  
  
 <span data-ttu-id="7d306-685">보다 정밀 하 게 설명 하면이 이벤트는 발생할 때의 값을 <xref:System.Windows.ContentElement.IsFocused%2A> 에서 경로에 있는 요소의 속성이 변경 `true` 에 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-685">A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.ContentElement.IsFocused%2A> property of an element in the route changes from `true` to `false`.</span></span>  
  
 <span data-ttu-id="7d306-686">이 이벤트는 버블링 라우팅을 사용 하기 때문에 포커스를 잃는 요소 이벤트 처리기가 실제로 연결 되어 있는 요소 대신 자식 요소를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-686">Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="7d306-687">확인 된 <xref:System.Windows.RoutedEventArgs.Source%2A> 포커스가 있는 실제 요소를 확인 하기 위해 이벤트 데이터에서.</span><span class="sxs-lookup"><span data-stu-id="7d306-687">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.</span></span>  
  
<a name="routedEventInfo_LostFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-688">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-688">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-689">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-689">Identifier field</span></span>|<xref:System.Windows.ContentElement.LostFocusEvent>|  
|<span data-ttu-id="7d306-690">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-690">Routing strategy</span></span>|<span data-ttu-id="7d306-691">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-691">Bubbling</span></span>|  
|<span data-ttu-id="7d306-692">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-692">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
-   <span data-ttu-id="7d306-693">해당 없음 터널링 이벤트가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-693">There is no corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="7d306-694">재정의 <xref:System.Windows.ContentElement.OnLostFocus%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-694">Override <xref:System.Windows.ContentElement.OnLostFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostKeyboardFocus" />
        <altmember cref="M:System.Windows.ContentElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="LostFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.LostFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-695"><see cref="E:System.Windows.ContentElement.LostFocus" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-695">Identifies the <see cref="E:System.Windows.ContentElement.LostFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-696">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-696">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-697">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-697">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-698">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-698">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-699">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-699">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-700">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-700">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ LostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-701">이 요소에 더 이상 키보드 포커스가 없으면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-701">Occurs when the keyboard is no longer focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-702">이 이벤트는 버블링 라우팅을 사용 하기 때문에 포커스가 있는 요소 이벤트 처리기가 실제로 연결 되어 있는 요소 대신 자식 요소를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-702">Because this event uses bubbling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="7d306-703">확인 된 <xref:System.Windows.RoutedEventArgs.Source%2A> 포커스를 잃은 실제 요소를 확인 하기 위해 이벤트 데이터의 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-703">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="7d306-704">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.LostKeyboardFocus> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-704">This event creates an alias for the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.LostKeyboardFocus> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-705">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.LostKeyboardFocus> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-705">Event handlers that are attached to the <xref:System.Windows.ContentElement.LostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_LostKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-706">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-706">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-707">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-707">Identifier field</span></span>|<xref:System.Windows.ContentElement.LostKeyboardFocusEvent>|  
|<span data-ttu-id="7d306-708">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-708">Routing strategy</span></span>|<span data-ttu-id="7d306-709">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-709">Bubbling</span></span>|  
|<span data-ttu-id="7d306-710">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-710">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="7d306-711">해당 터널링 이벤트가 <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-711">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="7d306-712">재정의 <xref:System.Windows.ContentElement.OnLostKeyboardFocus%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-712">Override <xref:System.Windows.ContentElement.OnLostKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.LostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-713"><see cref="E:System.Windows.ContentElement.LostKeyboardFocus" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-713">Identifies the <see cref="E:System.Windows.ContentElement.LostKeyboardFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-714">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-714">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-715">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-715">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-716">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-716">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-717">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-717">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-718">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-718">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler LostMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler LostMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ LostMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-719">이 요소가 마우스 캡처를 손실하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-719">Occurs when this element loses mouse capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-720">마우스를 캡처한 요소 포인터가 해당 경계 밖에 있는 경우에 마우스 입력을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-720">When an element captures the mouse, it receives mouse input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="7d306-721">마우스는 끌어서 놓기 작업 중에 일반적으로 캡처됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-721">The mouse is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="7d306-722">이 이벤트는 버블링 라우팅을 사용 하므로 캡처를 손실 하는 요소 이벤트 처리기가 실제로 연결 되어 있는 요소 대신를 자식 요소일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-722">Because this event uses bubbling routing, the element that loses capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="7d306-723">확인 된 <xref:System.Windows.RoutedEventArgs.Source%2A> 이벤트 데이터 캡처를 손실 하는 실제 요소를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-723">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost capture.</span></span>  
  
 <span data-ttu-id="7d306-724">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.LostMouseCapture> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-724">This event creates an alias for the <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.LostMouseCapture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-725">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.LostMouseCapture> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-725">Event handlers that are attached to the <xref:System.Windows.ContentElement.LostMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_LostMouseCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-726">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-726">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-727">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-727">Identifier field</span></span>|<xref:System.Windows.ContentElement.LostMouseCaptureEvent>|  
|<span data-ttu-id="7d306-728">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-728">Routing strategy</span></span>|<span data-ttu-id="7d306-729">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-729">Bubbling</span></span>|  
|<span data-ttu-id="7d306-730">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-730">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="7d306-731">정의 된 해당 터널링 이벤트가 없습니다 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-731">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="7d306-732">재정의 <xref:System.Windows.ContentElement.OnLostMouseCapture%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-732">Override <xref:System.Windows.ContentElement.OnLostMouseCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.LostMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-733"><see cref="E:System.Windows.ContentElement.LostMouseCapture" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-733">Identifies the <see cref="E:System.Windows.ContentElement.LostMouseCapture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-734">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-734">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-735">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-735">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-736">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-736">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-737">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-737">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-738">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-738">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler LostStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler LostStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ LostStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-739">이 요소가 스타일러스 캡처를 손실하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-739">Occurs when this element loses stylus capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-740">스타일러스를 캡처한 요소 포인터가 해당 경계 밖에 있는 경우에 스타일러스 입력을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-740">When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="7d306-741">스타일러스는 일반적으로 끌어서 놓기 작업 중에 캡처됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-741">The stylus is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="7d306-742">이 이벤트는 버블링 라우팅을 사용 하기 때문에 포커스를 잃는 요소 이벤트 처리기가 실제로 연결 되어 있는 요소 대신 자식 요소를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-742">Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="7d306-743">확인 된 <xref:System.Windows.RoutedEventArgs.Source%2A> 포커스를 잃은 실제 요소를 확인 하기 위해 이벤트 데이터의 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-743">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="7d306-744">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.LostStylusCapture> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-744">This event creates an alias for the <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.LostStylusCapture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-745">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.LostStylusCapture> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-745">Event handlers that are attached to the <xref:System.Windows.ContentElement.LostStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_LostStylusCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-746">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-746">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-747">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-747">Identifier field</span></span>|<xref:System.Windows.ContentElement.LostStylusCaptureEvent>|  
|<span data-ttu-id="7d306-748">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-748">Routing strategy</span></span>|<span data-ttu-id="7d306-749">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-749">Bubbling</span></span>|  
|<span data-ttu-id="7d306-750">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-750">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="7d306-751">정의 된 해당 터널링 이벤트가 없습니다 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-751">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="7d306-752">재정의 <xref:System.Windows.ContentElement.OnLostStylusCapture%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-752">Override <xref:System.Windows.ContentElement.OnLostStylusCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.LostStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-753"><see cref="E:System.Windows.ContentElement.LostStylusCapture" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-753">Identifies the <see cref="E:System.Windows.ContentElement.LostStylusCapture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-754">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-754">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-755">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-755">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-756">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-756">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-757">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-757">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-758">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-758">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; LostTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; LostTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ LostTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.LostTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.LostTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-759">이 요소에서 터치 캡처가 손실될 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-759">Occurs when this element loses a touch capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_LostTouchCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-760">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-760">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-761">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-761">Identifier field</span></span>|<xref:System.Windows.ContentElement.LostTouchCaptureEvent>|  
|<span data-ttu-id="7d306-762">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-762">Routing strategy</span></span>|<span data-ttu-id="7d306-763">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-763">Bubbling</span></span>|  
|<span data-ttu-id="7d306-764">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-764">Delegate</span></span>|<span data-ttu-id="7d306-765"><xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.TouchEventArgs>입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-765"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="7d306-766">재정의 <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-766">Override <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.LostTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-767"><see cref="E:System.Windows.ContentElement.LostTouchCapture" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-767">Identifies the <see cref="E:System.Windows.ContentElement.LostTouchCapture" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseDown;" />
      <MemberSignature Language="F#" Value="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-768">포인터가 이 요소 위에 있는 동안 마우스 단추를 누르면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-768">Occurs when any mouse button is pressed while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-769">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.MouseDown> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-769">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.MouseDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-770">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.MouseDown> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-770">Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="7d306-771">합니다 <xref:System.Windows.ContentElement.MouseDown> 이벤트와 함께 자주 발생 <xref:System.Windows.ContentElement.MouseLeftButtonDown> 또는 <xref:System.Windows.ContentElement.MouseRightButtonDown>, 두 개의 표준 마우스 단추 중 하나를 누르는 것에 해당 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-771">The <xref:System.Windows.ContentElement.MouseDown> event is often raised together with either <xref:System.Windows.ContentElement.MouseLeftButtonDown> or <xref:System.Windows.ContentElement.MouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="7d306-772"><xref:System.Windows.ContentElement.MouseLeftButtonDown> 및 <xref:System.Windows.ContentElement.MouseRightButtonDown> 라우트된 이벤트도 하지만 직접 라우트된 이벤트 이며 적절 한 단추 특정 이벤트가 발생할 때를 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 이벤트에 이벤트 경로 따라이 요소에 도달 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-772"><xref:System.Windows.ContentElement.MouseLeftButtonDown> and <xref:System.Windows.ContentElement.MouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="7d306-773">주의 참조 하십시오 <xref:System.Windows.ContentElement.MouseLeftButtonDown> 또는 <xref:System.Windows.ContentElement.MouseRightButtonDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-773">See Remarks for <xref:System.Windows.ContentElement.MouseLeftButtonDown> or <xref:System.Windows.ContentElement.MouseRightButtonDown>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7d306-774">소수의 <xref:System.Windows.ContentElement> 컨트롤과 비슷한 동작을 예를 들어 있는 클래스를 파생 <xref:System.Windows.Documents.Hyperlink>, 고유 클래스 마우스 단추 이벤트에 대 한 처리가 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-774">A few <xref:System.Windows.ContentElement> derived classes that have control-like behavior, for example, <xref:System.Windows.Documents.Hyperlink>, might have inherent class handling for mouse button events.</span></span> <span data-ttu-id="7d306-775">이벤트는 마우스 왼쪽된 단추는 컨트롤에서 처리 하는 클래스를 할 가능성이 가장 높은 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-775">The left mouse button down event is the most likely event to have class handling in a control.</span></span> <span data-ttu-id="7d306-776">자주 처리 하는 클래스는 기본 표시 <xref:System.Windows.Input.Mouse> 클래스 이벤트를 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-776">The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled.</span></span> <span data-ttu-id="7d306-777">이벤트가 처리 됨으로 표시 되 면 해당 요소에 연결 된 다른 인스턴스 처리기 일반적으로 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-777">Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</span></span> <span data-ttu-id="7d306-778">UI 트리에서 루트를 향해 버블링 방향의 요소에 연결 된 다른 모든 클래스 또는 인스턴스 처리기도 하지 일반적으로 발생 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-778">Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</span></span>  
  
 <span data-ttu-id="7d306-779">앞의 중요에 설명 된 문제를 해결 하 고 계속 받을 수 있는 <xref:System.Windows.ContentElement.MouseDown> 왼쪽된 마우스 단추 누름 이러한 솔루션 중 하나를 사용 하 여 처리 하는 클래스가 파생된 클래스에서 이벤트에 대 한 이벤트:</span><span class="sxs-lookup"><span data-stu-id="7d306-779">You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.ContentElement.MouseDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</span></span>  
  
-   <span data-ttu-id="7d306-780">연결에 대 한 처리기를 <xref:System.Windows.ContentElement.PreviewMouseDown> 이벤트를 컨트롤에 의해 처리 된 것으로 표시 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-780">Attach handlers for the <xref:System.Windows.ContentElement.PreviewMouseDown> event, which is not marked as handled by the controls.</span></span> <span data-ttu-id="7d306-781">미리 보기 이벤트 이기 때문에 경로 루트에서 시작 및 컨트롤까지 아래로 터널링 통지 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-781">Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</span></span>  
  
-   <span data-ttu-id="7d306-782">컨트롤에 처리기를 호출 하 여 절차에 따라 등록 <xref:System.Windows.ContentElement.AddHandler%2A> 처리기가 라우트된 이벤트 데이터의 처리 된 것으로 이미 표시 된 경우에 이벤트를 수신할 수 있도록 서명 옵션을 선택 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-782">Register a handler on the control procedurally by calling <xref:System.Windows.ContentElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</span></span>  
  
<a name="routedEventInfo_MouseDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-783">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-783">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-784">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-784">Identifier field</span></span>|<xref:System.Windows.ContentElement.MouseDownEvent>|  
|<span data-ttu-id="7d306-785">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-785">Routing strategy</span></span>|<span data-ttu-id="7d306-786">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-786">Bubbling</span></span>|  
|<span data-ttu-id="7d306-787">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-787">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="7d306-788">해당 터널링 이벤트가 <xref:System.Windows.ContentElement.PreviewMouseDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-788">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewMouseDown>.</span></span>  
  
-   <span data-ttu-id="7d306-789">재정의 <xref:System.Windows.ContentElement.OnMouseDown%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-789">Override <xref:System.Windows.ContentElement.OnMouseDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-790"><see cref="E:System.Windows.ContentElement.MouseDown" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-790">Identifies the <see cref="E:System.Windows.ContentElement.MouseDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-791">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-791">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-792">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-792">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-793">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-793">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-794">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-794">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-795">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-795">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseEnter;" />
      <MemberSignature Language="F#" Value="member this.MouseEnter : System.Windows.Input.MouseEventHandler " Usage="member this.MouseEnter : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-796">마우스 포인터가 이 요소의 영역 안으로 들어가면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-796">Occurs when the mouse pointer enters the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-797"><xref:System.Windows.ContentElement.MouseEnter> [라우트된 이벤트 개요](~/docs/framework/wpf/advanced/routed-events-overview.md) 직접 이벤트 라우팅 전략 처리를 사용 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-797"><xref:System.Windows.ContentElement.MouseEnter> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="7d306-798">경로 따라 직접 라우트된 이벤트가 발생 하지 않습니다. 대신 처리 됩니다 동일한 요소에서 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-798">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="7d306-799">그러나 라우트된 이벤트 동작 스타일의 트리거와 이벤트 등의 다른 측면을 활성화 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-799">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="7d306-800">하지만 <xref:System.Windows.ContentElement.MouseEnter> 트랙 포인터가 더 많은이 이벤트를이 요소의 영역 안으로 들어가면 직접적으로 보고 합니다는 <xref:System.Windows.ContentElement.IsMouseOver%2A> 에서 속성 값이 변경 `false` 에 `true` 이 요소에 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-800">Although <xref:System.Windows.ContentElement.MouseEnter> tracks when the mouse pointer enters the bounds of an element, this event more literally reports that the <xref:System.Windows.ContentElement.IsMouseOver%2A> property value has changed from `false` to `true` on this element.</span></span>  
  
 <span data-ttu-id="7d306-801">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.MouseEnter> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-801">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.MouseEnter> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-802">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.MouseEnter> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-802">Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseEnter> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_MouseEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-803">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-803">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-804">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-804">Identifier field</span></span>|<xref:System.Windows.ContentElement.MouseEnterEvent>|  
|<span data-ttu-id="7d306-805">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-805">Routing strategy</span></span>|<span data-ttu-id="7d306-806">직접</span><span class="sxs-lookup"><span data-stu-id="7d306-806">Direct</span></span>|  
|<span data-ttu-id="7d306-807">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-807">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="7d306-808">재정의 <xref:System.Windows.ContentElement.OnMouseEnter%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-808">Override <xref:System.Windows.ContentElement.OnMouseEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-809"><see cref="E:System.Windows.ContentElement.MouseEnter" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-809">Identifies the <see cref="E:System.Windows.ContentElement.MouseEnter" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-810">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-810">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-811">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-811">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-812">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-812">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-813">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-813">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-814">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-814">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseLeave;" />
      <MemberSignature Language="F#" Value="member this.MouseLeave : System.Windows.Input.MouseEventHandler " Usage="member this.MouseLeave : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-815">마우스 포인터가 이 요소의 영역을 벗어나면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-815">Occurs when the mouse pointer leaves the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-816"><xref:System.Windows.ContentElement.MouseLeave> [라우트된 이벤트 개요](~/docs/framework/wpf/advanced/routed-events-overview.md) 직접 이벤트 라우팅 전략 처리를 사용 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-816"><xref:System.Windows.ContentElement.MouseLeave> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="7d306-817">경로 따라 직접 라우트된 이벤트가 발생 하지 않습니다. 대신 처리 됩니다 동일한 요소에서 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-817">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="7d306-818">그러나 라우트된 이벤트 동작 스타일의 트리거와 이벤트 등의 다른 측면을 활성화 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-818">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="7d306-819">하지만 <xref:System.Windows.ContentElement.MouseLeave> 트랙 마우스가 요소에이 이벤트가 더 직접적으로 보고 합니다는 <xref:System.Windows.ContentElement.IsMouseOver%2A> 속성 값에서 변경 되었습니다 `true` 를 `false` 이 요소에.</span><span class="sxs-lookup"><span data-stu-id="7d306-819">Although <xref:System.Windows.ContentElement.MouseLeave> tracks when the mouse leaves an element, this event more literally reports that the <xref:System.Windows.ContentElement.IsMouseOver%2A> property value has changed from `true` to `false` on this element.</span></span>  
  
 <span data-ttu-id="7d306-820">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.MouseLeave> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-820">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.MouseLeave> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-821">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.MouseLeave> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-821">Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseLeave> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_MouseLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-822">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-822">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-823">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-823">Identifier field</span></span>|<xref:System.Windows.ContentElement.MouseLeaveEvent>|  
|<span data-ttu-id="7d306-824">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-824">Routing strategy</span></span>|<span data-ttu-id="7d306-825">직접</span><span class="sxs-lookup"><span data-stu-id="7d306-825">Direct</span></span>|  
|<span data-ttu-id="7d306-826">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-826">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="7d306-827">재정의 <xref:System.Windows.ContentElement.OnMouseLeave%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-827">Override <xref:System.Windows.ContentElement.OnMouseLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-828"><see cref="E:System.Windows.ContentElement.MouseLeave" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-828">Identifies the <see cref="E:System.Windows.ContentElement.MouseLeave" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-829">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-829">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-830">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-830">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-831">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-831">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-832">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-832">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-833">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-833">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-834">마우스 포인터가 이 요소 위에 있는 동안 마우스 왼쪽 단추를 누르면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-834">Occurs when the left mouse button is pressed while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-835">하지만 이렇게 [라우트된 이벤트 개요](~/docs/framework/wpf/advanced/routed-events-overview.md) 요소 트리를 통해 버블링 경로 따르는 것 직접 라우트된 이벤트는 발생 하 고 각 요소 트리를 따라 보이지만 실제로 <xref:System.Windows.ContentElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-835">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.</span></span>  
  
 <span data-ttu-id="7d306-836">이 이벤트를 사용 하 여 기본 마우스 단추 세부 정보를 보고 하는 몇 가지 관련된 이벤트 중 하나인 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 이벤트를 이벤트 경로 따라 각 요소에 의해 처리 되는 연결된 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-836">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="7d306-837">기본 인수를 노출 하는이 이벤트의 인수 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-837">The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="7d306-838">해당 이벤트는 이벤트 경로의 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 하지만 명시적으로 호출 하 여는 마우스 단추 관련 이벤트의 처리기를 추가 해야 <xref:System.Windows.ContentElement.AddHandler%2A>, 이벤트 수신기를 위해서는 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-838">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span>  
  
 <span data-ttu-id="7d306-839">이 이벤트를 개념적으로 생각할 (및 다른 마우스 단추 이벤트에 <xref:System.Windows.ContentElement>) "서비스" 마우스를 (에서 제공 하는 서비스 정의 사용 하 여는 <xref:System.Windows.Input.Mouse> 클래스).</span><span class="sxs-lookup"><span data-stu-id="7d306-839">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="7d306-840">이벤트 데이터의 원래 마우스 이벤트는 마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽)을 확인할 필요가 없으므로 편리 하 게를 추가 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-840">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="7d306-841">비표준 단추 상태에 대 한 검사와 같은 더 고급 시나리오에 사용 해야 합니다 [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] 에 <xref:System.Windows.Input.Mouse> 에 해당 하는 대신 클래스 <xref:System.Windows.ContentElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-841">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7d306-842">소수의 <xref:System.Windows.ContentElement> 컨트롤과 비슷한 동작을 예를 들어 있는 클래스를 파생 <xref:System.Windows.Documents.Hyperlink>, 고유 클래스 마우스 단추 이벤트에 대 한 처리가 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-842">A few <xref:System.Windows.ContentElement> derived classes that have control-like behavior, for example, <xref:System.Windows.Documents.Hyperlink>, might have inherent class handling for mouse button events.</span></span> <span data-ttu-id="7d306-843">이벤트는 마우스 왼쪽된 단추는 컨트롤에서 처리 하는 클래스를 할 가능성이 가장 높은 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-843">The left mouse button down event is the most likely event to have class handling in a control.</span></span> <span data-ttu-id="7d306-844">자주 처리 하는 클래스는 기본 표시 <xref:System.Windows.Input.Mouse> 클래스 이벤트를 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-844">The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled.</span></span> <span data-ttu-id="7d306-845">이벤트가 처리 됨으로 표시 되 면 해당 요소에 연결 된 다른 인스턴스 처리기 일반적으로 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-845">Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</span></span> <span data-ttu-id="7d306-846">UI 트리에서 루트를 향해 버블링 방향의 요소에 연결 된 다른 모든 클래스 또는 인스턴스 처리기도 하지 일반적으로 발생 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-846">Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</span></span>  
  
 <span data-ttu-id="7d306-847">앞의 중요에 설명 된 문제를 해결 하 고 계속 받을 수 있는 <xref:System.Windows.ContentElement.MouseLeftButtonDown> 왼쪽된 마우스 단추 누름 이러한 솔루션 중 하나를 사용 하 여 처리 하는 클래스가 파생된 클래스에서 이벤트에 대 한 이벤트:</span><span class="sxs-lookup"><span data-stu-id="7d306-847">You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.ContentElement.MouseLeftButtonDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</span></span>  
  
-   <span data-ttu-id="7d306-848">연결에 대 한 처리기를 <xref:System.Windows.ContentElement.PreviewMouseDown> 이벤트를 컨트롤에 의해 처리 된 것으로 표시 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-848">Attach handlers for the <xref:System.Windows.ContentElement.PreviewMouseDown> event, which is not marked as handled by the controls.</span></span> <span data-ttu-id="7d306-849">미리 보기 이벤트 이기 때문에 경로 루트에서 시작 및 컨트롤까지 아래로 터널링 통지 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-849">Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</span></span>  
  
-   <span data-ttu-id="7d306-850">컨트롤에 처리기를 호출 하 여 절차에 따라 등록 <xref:System.Windows.ContentElement.AddHandler%2A> 처리기가 라우트된 이벤트 데이터의 처리 된 것으로 이미 표시 된 경우에 이벤트를 수신할 수 있도록 서명 옵션을 선택 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-850">Register a handler on the control procedurally by calling <xref:System.Windows.ContentElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</span></span>  
  
<a name="routedEventInfo_MouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-851">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-851">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-852">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-852">Identifier field</span></span>|<xref:System.Windows.ContentElement.MouseLeftButtonDownEvent>|  
|<span data-ttu-id="7d306-853">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-853">Routing strategy</span></span>|<span data-ttu-id="7d306-854">직접</span><span class="sxs-lookup"><span data-stu-id="7d306-854">Direct</span></span>|  
|<span data-ttu-id="7d306-855">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-855">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="7d306-856">재정의 <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-856">Override <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-857"><see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-857">Identifies the <see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-858">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-858">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-859">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-859">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-860">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-860">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-861">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-861">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-862">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-862">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-863">마우스 포인터가 이 요소 위에 있는 동안 마우스 왼쪽 단추를 놓으면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-863">Occurs when the left mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-864">하지만 이렇게 [라우트된 이벤트 개요](~/docs/framework/wpf/advanced/routed-events-overview.md) 요소 트리를 통해 버블링 경로 따르는 것 직접 라우트된 이벤트는 발생 하 고 각 요소 트리를 따라 보이지만 실제로 <xref:System.Windows.ContentElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-864">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.</span></span>  
  
 <span data-ttu-id="7d306-865">이 이벤트를 사용 하 여 기본 마우스 단추 세부 정보를 보고 하는 몇 가지 관련된 이벤트 중 하나인 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 이벤트를 이벤트 경로 따라 각 요소에 의해 처리 되는 연결된 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-865">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="7d306-866">기본 인수를 노출 하는이 이벤트의 인수 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-866">The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="7d306-867">해당 이벤트는 이벤트 경로의 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 하지만 명시적으로 호출 하 여는 마우스 단추 관련 이벤트의 처리기를 추가 해야 <xref:System.Windows.ContentElement.AddHandler%2A>, 이벤트 수신기를 위해서는 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-867">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span>  
  
 <span data-ttu-id="7d306-868">이 이벤트를 개념적으로 생각할 (및 다른 마우스 단추 이벤트에 <xref:System.Windows.ContentElement>) "서비스" 마우스를 (에서 제공 하는 서비스 정의 사용 하 여는 <xref:System.Windows.Input.Mouse> 클래스).</span><span class="sxs-lookup"><span data-stu-id="7d306-868">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="7d306-869">이벤트 데이터의 원래 마우스 이벤트는 마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽)을 확인할 필요가 없으므로 편리 하 게를 추가 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-869">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="7d306-870">비표준 단추 상태에 대 한 검사와 같은 더 고급 시나리오에 사용 해야 합니다 [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] 에 <xref:System.Windows.Input.Mouse> 에 해당 하는 대신 클래스 <xref:System.Windows.ContentElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-870">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.</span></span>  
  
<a name="routedEventInfo_MouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-871">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-871">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-872">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-872">Identifier field</span></span>|<xref:System.Windows.ContentElement.MouseLeftButtonUpEvent>|  
|<span data-ttu-id="7d306-873">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-873">Routing strategy</span></span>|<span data-ttu-id="7d306-874">직접</span><span class="sxs-lookup"><span data-stu-id="7d306-874">Direct</span></span>|  
|<span data-ttu-id="7d306-875">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-875">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="7d306-876">재정의 <xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-876">Override <xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-877"><see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-877">Identifies the <see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-878">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-878">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-879">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-879">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-880">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-880">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-881">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-881">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-882">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-882">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseMove;" />
      <MemberSignature Language="F#" Value="member this.MouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.MouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-883">이 요소 위에 있는 동안 마우스 포인터를 움직이면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-883">Occurs when the mouse pointer moves while over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-884">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.MouseMove> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-884">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.MouseMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-885">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.MouseMove> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-885">Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_MouseMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-886">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-886">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-887">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-887">Identifier field</span></span>|<xref:System.Windows.ContentElement.MouseMoveEvent>|  
|<span data-ttu-id="7d306-888">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-888">Routing strategy</span></span>|<span data-ttu-id="7d306-889">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-889">Bubbling</span></span>|  
|<span data-ttu-id="7d306-890">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-890">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="7d306-891">해당 터널링 이벤트가 <xref:System.Windows.ContentElement.PreviewMouseMove>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-891">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewMouseMove>.</span></span>  
  
-   <span data-ttu-id="7d306-892">재정의 <xref:System.Windows.ContentElement.OnMouseMove%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-892">Override <xref:System.Windows.ContentElement.OnMouseMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseEnter" />
        <altmember cref="E:System.Windows.ContentElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="MouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-893"><see cref="E:System.Windows.ContentElement.MouseMove" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-893">Identifies the <see cref="E:System.Windows.ContentElement.MouseMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-894">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-894">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-895">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-895">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-896">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-896">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-897">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-897">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-898">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-898">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-899">마우스 포인터가 이 요소 위에 있는 동안 마우스 오른쪽 단추를 누르면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-899">Occurs when the right mouse button is pressed while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-900">하지만 이렇게 [라우트된 이벤트 개요](~/docs/framework/wpf/advanced/routed-events-overview.md) 요소 트리를 통해 버블링 경로 따르는 것 직접 라우트된 이벤트는 발생 하 고 각 요소 트리를 따라 보이지만 실제로 <xref:System.Windows.ContentElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-900">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.</span></span>  
  
 <span data-ttu-id="7d306-901">이 이벤트를 사용 하 여 기본 마우스 단추 세부 정보를 보고 하는 몇 가지 관련된 이벤트 중 하나인 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 이벤트를 이벤트 경로 따라 각 요소에 의해 처리 되는 연결된 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-901">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="7d306-902">기본 인수를 노출 하는이 이벤트의 인수 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-902">The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="7d306-903">해당 이벤트는 이벤트 경로의 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 하지만 명시적으로 호출 하 여는 마우스 단추 관련 이벤트의 처리기를 추가 해야 <xref:System.Windows.ContentElement.AddHandler%2A>, 이벤트 수신기를 위해서는 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-903">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span>  
  
 <span data-ttu-id="7d306-904">이 이벤트를 개념적으로 생각할 (및 다른 마우스 단추 이벤트에 <xref:System.Windows.ContentElement>) "서비스" 마우스를 (에서 제공 하는 서비스 정의 사용 하 여는 <xref:System.Windows.Input.Mouse> 클래스).</span><span class="sxs-lookup"><span data-stu-id="7d306-904">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="7d306-905">이벤트 데이터의 원래 마우스 이벤트는 마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽)을 확인할 필요가 없으므로 편리 하 게를 추가 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-905">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="7d306-906">비표준 단추 상태에 대 한 검사와 같은 더 고급 시나리오에 사용 해야 합니다 [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] 에 <xref:System.Windows.Input.Mouse> 에 해당 하는 대신 클래스 <xref:System.Windows.ContentElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-906">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.</span></span>  
  
 <span data-ttu-id="7d306-907">오른쪽 단추 마우스 이벤트는 자주 응용 프로그램 시나리오에서 기본 처리를 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-907">Right button mouse events frequently have native handling in application scenarios.</span></span> <span data-ttu-id="7d306-908">예를 들어 아래쪽을 마우스 오른쪽 단추로 상황에 맞는 메뉴를 표시할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-908">For instance, a right mouse button down might display a context menu.</span></span> <span data-ttu-id="7d306-909">참조 [ContextMenu 개요](~/docs/framework/wpf/controls/contextmenu-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-909">See [ContextMenu Overview](~/docs/framework/wpf/controls/contextmenu-overview.md).</span></span>  
  
<a name="routedEventInfo_MouseRightButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-910">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-910">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-911">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-911">Identifier field</span></span>|<xref:System.Windows.ContentElement.MouseRightButtonDownEvent>|  
|<span data-ttu-id="7d306-912">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-912">Routing strategy</span></span>|<span data-ttu-id="7d306-913">직접</span><span class="sxs-lookup"><span data-stu-id="7d306-913">Direct</span></span>|  
|<span data-ttu-id="7d306-914">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-914">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="7d306-915">재정의 <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-915">Override <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-916"><see cref="E:System.Windows.ContentElement.MouseRightButtonDown" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-916">Identifies the <see cref="E:System.Windows.ContentElement.MouseRightButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-917">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-917">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-918">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-918">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-919">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-919">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-920">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-920">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-921">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-921">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-922">마우스 포인터가 이 요소 위에 있는 동안 마우스 오른쪽 단추를 놓으면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-922">Occurs when the right mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-923">하지만 이렇게 [라우트된 이벤트 개요](~/docs/framework/wpf/advanced/routed-events-overview.md) 요소 트리를 통해 버블링 경로 따르는 것 직접 라우트된 이벤트는 발생 하 고 각 요소 트리를 따라 보이지만 실제로 <xref:System.Windows.ContentElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-923">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.</span></span>  
  
 <span data-ttu-id="7d306-924">이 이벤트를 사용 하 여 기본 마우스 단추 세부 정보를 보고 하는 몇 가지 관련된 이벤트 중 하나인 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 이벤트를 이벤트 경로 따라 각 요소에 의해 처리 되는 연결된 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-924">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="7d306-925">기본 인수를 노출 하는이 이벤트의 인수 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-925">The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="7d306-926">해당 이벤트는 이벤트 경로의 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 하지만 명시적으로 호출 하 여는 마우스 단추 관련 이벤트의 처리기를 추가 해야 <xref:System.Windows.ContentElement.AddHandler%2A>, 이벤트 수신기를 위해서는 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-926">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span>  
  
 <span data-ttu-id="7d306-927">이 이벤트를 개념적으로 생각할 (및 다른 마우스 단추 이벤트에 <xref:System.Windows.ContentElement>) "서비스" 마우스를 (에서 제공 하는 서비스 정의 사용 하 여는 <xref:System.Windows.Input.Mouse> 클래스).</span><span class="sxs-lookup"><span data-stu-id="7d306-927">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="7d306-928">이벤트 데이터의 원래 마우스 이벤트는 마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽)을 확인할 필요가 없으므로 편리 하 게를 추가 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-928">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="7d306-929">비표준 단추 상태에 대 한 검사와 같은 더 고급 시나리오에 사용 해야 합니다 [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] 에 <xref:System.Windows.Input.Mouse> 에 해당 하는 대신 클래스 <xref:System.Windows.ContentElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-929">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.</span></span>  
  
<a name="routedEventInfo_MouseRightButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-930">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-930">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-931">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-931">Identifier field</span></span>|<xref:System.Windows.ContentElement.MouseRightButtonUpEvent>|  
|<span data-ttu-id="7d306-932">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-932">Routing strategy</span></span>|<span data-ttu-id="7d306-933">직접</span><span class="sxs-lookup"><span data-stu-id="7d306-933">Direct</span></span>|  
|<span data-ttu-id="7d306-934">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-934">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="7d306-935">재정의 <xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-935">Override <xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-936"><see cref="E:System.Windows.ContentElement.MouseRightButtonUp" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-936">Identifies the <see cref="E:System.Windows.ContentElement.MouseRightButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-937">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-937">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-938">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-938">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-939">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-939">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-940">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-940">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-941">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-941">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseUp;" />
      <MemberSignature Language="F#" Value="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-942">이 요소 위에서 마우스 단추를 놓으면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-942">Occurs when any mouse button is released over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-943">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.MouseUp> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-943">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.MouseUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-944">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.MouseUp> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-944">Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="7d306-945">합니다 <xref:System.Windows.ContentElement.MouseUp> 이벤트와 함께 자주 발생 <xref:System.Windows.ContentElement.MouseLeftButtonUp> 또는 <xref:System.Windows.ContentElement.MouseRightButtonUp>, 릴리스를 두 개의 표준 마우스 단추 중 하나에 해당 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-945">The <xref:System.Windows.ContentElement.MouseUp> event is often raised together with either <xref:System.Windows.ContentElement.MouseLeftButtonUp> or <xref:System.Windows.ContentElement.MouseRightButtonUp>, which correspond to a release of one of the two standard mouse buttons.</span></span> <span data-ttu-id="7d306-946"><xref:System.Windows.ContentElement.MouseLeftButtonUp> 및 <xref:System.Windows.ContentElement.MouseRightButtonUp> 라우트된 이벤트도 하지만 직접 라우트된 이벤트 이며 적절 한 단추 특정 이벤트가 발생할 때를 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 이벤트에 이벤트 경로 따라이 요소에 도달 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-946"><xref:System.Windows.ContentElement.MouseLeftButtonUp> and <xref:System.Windows.ContentElement.MouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="7d306-947">주의 참조 하십시오 <xref:System.Windows.ContentElement.MouseLeftButtonUp> 또는 <xref:System.Windows.ContentElement.MouseRightButtonUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-947">See Remarks for <xref:System.Windows.ContentElement.MouseLeftButtonUp> or <xref:System.Windows.ContentElement.MouseRightButtonUp>.</span></span>  
  
<a name="routedEventInfo_MouseUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-948">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-948">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-949">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-949">Identifier field</span></span>|<xref:System.Windows.ContentElement.MouseUpEvent>|  
|<span data-ttu-id="7d306-950">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-950">Routing strategy</span></span>|<span data-ttu-id="7d306-951">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-951">Bubbling</span></span>|  
|<span data-ttu-id="7d306-952">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-952">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="7d306-953">해당 터널링 이벤트가 <xref:System.Windows.ContentElement.PreviewMouseUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-953">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewMouseUp>.</span></span>  
  
-   <span data-ttu-id="7d306-954">재정의 <xref:System.Windows.ContentElement.OnMouseUp%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-954">Override <xref:System.Windows.ContentElement.OnMouseUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-955"><see cref="E:System.Windows.ContentElement.MouseUp" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-955">Identifies the <see cref="E:System.Windows.ContentElement.MouseUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-956">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-956">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-957">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-957">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-958">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-958">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-959">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-959">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-960">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-960">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler MouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler MouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ MouseWheel;" />
      <MemberSignature Language="F#" Value="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-961">마우스 포인터가 이 요소 위에 있는 동안 사용자가 마우스 휠을 굴리면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-961">Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-962">포커스 또는 마우스 캡처 우선; 마우스 포인터가 인 따라서 수신 되 면는 <xref:System.Windows.ContentElement.MouseWheel> 시점 요소에서 이벤트를 다른 요소 보다 마우스 포인터 수 실제로 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-962">Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive the <xref:System.Windows.ContentElement.MouseWheel> event from a focused or captured element, the mouse pointer might actually be over another element.</span></span>  
  
 <span data-ttu-id="7d306-963">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.MouseWheel> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-963">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.MouseWheel> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-964">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.MouseWheel> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-964">Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseWheel> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_MouseWheel"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-965">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-965">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-966">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-966">Identifier field</span></span>|<xref:System.Windows.ContentElement.MouseWheelEvent>|  
|<span data-ttu-id="7d306-967">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-967">Routing strategy</span></span>|<span data-ttu-id="7d306-968">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-968">Bubbling</span></span>|  
|<span data-ttu-id="7d306-969">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-969">Delegate</span></span>|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   <span data-ttu-id="7d306-970">해당 터널링 이벤트가 <xref:System.Windows.ContentElement.PreviewMouseWheel>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-970">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewMouseWheel>.</span></span>  
  
-   <span data-ttu-id="7d306-971">재정의 <xref:System.Windows.ContentElement.OnMouseWheel%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-971">Override <xref:System.Windows.ContentElement.OnMouseWheel%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-972"><see cref="E:System.Windows.ContentElement.MouseWheel" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-972">Identifies the <see cref="E:System.Windows.ContentElement.MouseWheel" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-973">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-973">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-974">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-974">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-975">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-975">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-976">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-976">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-977">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-977">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberSignature Language="F#" Value="abstract member MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool&#xA;override this.MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool" Usage="contentElement.MoveFocus request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="7d306-978">기존 탭 순서에서 이동할 모드 또는 시각적으로 이동할 방향을 나타내는 속성이 포함된 이동 요청입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-978">A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.</span></span></param>
        <summary><span data-ttu-id="7d306-979">이 요소에서 다른 요소로 포커스를 이동하려고 시도합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-979">Attempts to move focus from this element to another element.</span></span> <span data-ttu-id="7d306-980">포커스를 이동하는 방향은 지시 방향에 의해 지정됩니다. 이 방향은 이 요소의 표시 부모 조직 내에서 해석됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-980">The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element.</span></span></summary>
        <returns><span data-ttu-id="7d306-981">요청된 이동이 수행되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-981"><see langword="true" /> if the requested traversal was performed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-982">이 메서드의 반환 값을 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-982">Make sure you check the return value of this method.</span></span> <span data-ttu-id="7d306-983">반환 값 `false` 방향으로 컨트롤의 조합으로 정의 된 탭은 실행 및 이동 요청 래핑할 요청 하지 않은 경우에 반환 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-983">A return value of `false` might be returned if the traversal runs into a tab stop that is defined by a control's composition, and the traversal request did not request to wrap.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer&#xA;override this.OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer" Usage="contentElement.OnCreateAutomationPeer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7d306-984">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 인프라에 대해 클래스 관련 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 구현을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-984">Returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations for the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure.</span></span></summary>
        <returns><span data-ttu-id="7d306-985">형식별 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-985">The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation.</span></span></returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="7d306-986">이 메서드의 구현은 특정 생성자를 호출 하는 일반적으로 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 구현 하 고 반환 값으로 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-986">The implementation of this method is typically to call the constructor of a specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation, and return it as the return value.</span></span>  
  
<span data-ttu-id="7d306-987">모든 <see cref="T:System.Windows.ContentElement" /> 파생된 클래스는 자체적인 특정 제공 하기 위해이 메서드를 구현 해야 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 구현을 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 인프라입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-987">All <see cref="T:System.Windows.ContentElement" /> derived classes should implement this method in order to provide their own specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations to the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure.</span></span> <span data-ttu-id="7d306-988">이 패턴을 구현에 대 한 자세한 내용은 참조 하세요. <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-988">For details on implementing this pattern, see <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-989">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DragEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-989">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-990">처리되지 않은 <see cref="E:System.Windows.DragDrop.DragEnter" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-990">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragEnter" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-991">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-991">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-992">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-992">This method has no default implementation.</span></span> <span data-ttu-id="7d306-993">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-993">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-994">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-994">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-995">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-995">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-996">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-996">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-997">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-997">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-998">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-998">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-999">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-999">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1000">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1000">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1001">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DragEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1001">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1002">처리되지 않은 <see cref="E:System.Windows.DragDrop.DragLeave" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1002">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragLeave" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1003">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1003">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1004">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1004">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1005">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1005">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1006">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1006">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1007">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1007">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1008">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1008">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1009">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1009">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1010">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1010">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1011">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1011">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1012">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1012">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1013">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DragEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1013">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1014">처리되지 않은 <see cref="E:System.Windows.DragDrop.DragOver" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1014">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragOver" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1015">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1015">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1016">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1016">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1017">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1017">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1018">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1018">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1019">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1019">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1020">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1020">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1021">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1021">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1022">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1022">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1023">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1023">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1024">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1024">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnDrop">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDrop : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1025">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DragEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1025">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1026">처리되지 않은 <see cref="E:System.Windows.DragDrop.DragEnter" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1026">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragEnter" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1027">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1027">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1028">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1028">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1029">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1029">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1030">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1030">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1031">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1031">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1032">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1032">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1033">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1033">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1034">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1034">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1035">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1035">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1036">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1036">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="contentElement.OnGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1037">이벤트 데이터를 포함하는 <see cref="T:System.Windows.GiveFeedbackEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1037">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1038">처리되지 않은 <see cref="E:System.Windows.DragDrop.GiveFeedback" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1038">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.GiveFeedback" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1039">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1039">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1040">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1040">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1041">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1041">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1042">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1042">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1043">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1043">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1044">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1044">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1045">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1045">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1046">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1046">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1047">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1047">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1048">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1048">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="contentElement.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1049">이벤트 데이터가 포함된 <see cref="T:System.Windows.RoutedEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1049">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data.</span></span> <span data-ttu-id="7d306-1050">이 이벤트 데이터에는 <see cref="E:System.Windows.ContentElement.GotFocus" /> 이벤트의 식별자가 포함되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1050">This event data must contain the identifier for the <see cref="E:System.Windows.ContentElement.GotFocus" /> event.</span></span></param>
        <summary><span data-ttu-id="7d306-1051">지정된 이벤트 데이터를 사용하여 <see cref="E:System.Windows.ContentElement.GotFocus" /> 라우트된 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1051">Raises the <see cref="E:System.Windows.ContentElement.GotFocus" /> routed event by using the event data provided.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1052">이 메서드를 가상 이벤트를 발생 시키는 기본 구현이 되어지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1052">This method, although virtual, does have a default implementation that raises the event.</span></span>  
  
 <span data-ttu-id="7d306-1053">에 대 한 \* 메서드 구현을 이벤트를 발생 시키기 위한 것 이며이 같은 메서드 구현을 이벤트를 발생 시킬 때의 <xref:System.Windows.ContentElement.IsFocused%2A> 속성 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1053">This On\* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.ContentElement.IsFocused%2A> property value changes.</span></span> <span data-ttu-id="7d306-1054"><xref:System.Windows.ContentElement.OnGotFocus%2A> 구현이 다른 몇 가지 다른 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 에 \* 구현을 해당 이벤트를 처리 하는 클래스를 추가 하는 편리한 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1054">The <xref:System.Windows.ContentElement.OnGotFocus%2A> implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On\* implementations, which only provide a convenient way to add class handling for that event.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="7d306-1055">포커스 이벤트를 발생 시 키 지는 의도적으로 필요 없다면 구현 기본 구현을 호출 하는 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1055">Unless you have a deliberate and unusual need to not raise the focus events, make sure that your implementation calls the base implementation.</span></span> <span data-ttu-id="7d306-1056">그렇지 않은 경우는 <see cref="E:System.Windows.ContentElement.GotFocus" /> 이 요소에 포커스를 설정 하는 일반적인 사용자 작업 하는 동안 이벤트가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1056">Otherwise, the <see cref="E:System.Windows.ContentElement.GotFocus" /> event is not raised during typical user operations that ordinarily set focus to this element.</span></span> <span data-ttu-id="7d306-1057">포커스 요소 않으려는 경우 설정 하 여 포커스를 받을 수 없도록 요소를 방지할 수 있습니다 <see cref="P:System.Windows.ContentElement.Focusable" /> 에 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1057">If you do not intend your element to be focusable, you can prevent the element from being focusable by setting <see cref="P:System.Windows.ContentElement.Focusable" /> to <see langword="false" />.</span></span> <span data-ttu-id="7d306-1058">기본적을 <see cref="P:System.Windows.ContentElement.Focusable" /> 포커스를 설정 하므로 아닙니다 <see cref="P:System.Windows.ContentElement.Focusable" /> 의도적으로 필요가 없을 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1058">Note that by default a <see cref="P:System.Windows.ContentElement.Focusable" /> is not focusable, therefore setting <see cref="P:System.Windows.ContentElement.Focusable" /> deliberately might not be necessary.</span></span></para></block>
        <altmember cref="P:System.Windows.ContentElement.Focusable" />
        <altmember cref="E:System.Windows.ContentElement.GotFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="contentElement.OnGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1059">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1059">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1060">처리되지 않은 <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1060">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1061">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1061">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1062">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1062">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1063">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1063">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1064">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1064">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1065">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1065">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1066">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1066">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1067">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1067">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1068">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1068">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1069">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1069">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1070">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1070">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotMouseCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="contentElement.OnGotMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1071">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1071">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1072">처리되지 않은 <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1072">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1073">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1073">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1074">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1074">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1075">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1075">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1076">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1076">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1077">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1077">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1078">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1078">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1079">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1079">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1080">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1080">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1081">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1081">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1082">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1082">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotStylusCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnGotStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1083">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1083">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1084">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1084">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1085">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1085">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1086">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1086">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1087">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1087">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1088">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1088">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1089">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1089">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1090">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1090">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1091">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1091">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1092">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1092">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1093">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1093">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1094">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1094">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotTouchCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnGotTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1095">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TouchEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1095">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1096">이 요소에 터치가 캡처될 때 발생하는 <see cref="E:System.Windows.ContentElement.GotTouchCapture" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1096">Provides class handling for the <see cref="E:System.Windows.ContentElement.GotTouchCapture" /> routed event that occurs when a touch is captured to this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1097"><xref:System.Windows.ContentElement.OnGotTouchCapture%2A> 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1097">The <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> method has no default implementation.</span></span> <span data-ttu-id="7d306-1098">재정의 <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> 처리 하는 파생된 클래스에는 <xref:System.Windows.ContentElement.GotTouchCapture> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1098">Override <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> in a derived class to handle the <xref:System.Windows.ContentElement.GotTouchCapture> event.</span></span> <span data-ttu-id="7d306-1099">기본 클래스를 호출 해야 <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> 메서드는 기본 클래스 이벤트를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1099">Be sure to call the base class' <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsKeyboardFocusedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1100">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1100">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1101">이 요소에 의해 처리되지 않은 <see cref="E:System.Windows.ContentElement.IsKeyboardFocusedChanged" /> 이벤트가 발생할 때 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1101">Invoked when an unhandled <see cref="E:System.Windows.ContentElement.IsKeyboardFocusedChanged" /> event is raised on this element.</span></span> <span data-ttu-id="7d306-1102">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1102">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1103">이 가상 메서드는 발생 하는 경우의 값을 <xref:System.Windows.ContentElement.IsKeyboardFocused%2A> 종속성 속성이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1103">This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsKeyboardFocused%2A> dependency property changes.</span></span> <span data-ttu-id="7d306-1104">가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1104">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="7d306-1105">그런 다음 <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> 동일한 이벤트 데이터 인스턴스를 사용 하 여 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1105">Then the <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="7d306-1106">에 <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> 이벤트가 라우트된 이벤트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1106">Notice that the  <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> event is not a routed event.</span></span> <span data-ttu-id="7d306-1107">따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다. 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1107">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="7d306-1108">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1108">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1109">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1109">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="7d306-1110">호출할 수 있습니다 기본 앞 이나 뒤에 특수 한 처리 요구 사항에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1110">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsKeyboardFocusWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1111">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1111">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1112">이 요소에 의해 <see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" /> 이벤트가 발생하기 직전에 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1112">Invoked just before the <see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" /> event is raised by this element.</span></span> <span data-ttu-id="7d306-1113">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1113">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1114">이 가상 메서드는 발생 하는 경우의 값을 <xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> 종속성 속성의 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1114">This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> dependency property changes its value.</span></span> <span data-ttu-id="7d306-1115">가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1115">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="7d306-1116">그런 다음 <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> 동일한 이벤트 데이터 인스턴스를 사용 하 여 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1116">Then the <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="7d306-1117">에 <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> 이벤트가 라우트된 이벤트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1117">Notice that the <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> event is not a routed event.</span></span> <span data-ttu-id="7d306-1118">따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다. 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1118">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="7d306-1119">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1119">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1120">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1120">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="7d306-1121">호출할 수 있습니다 기본 앞 이나 뒤에 특수 한 처리 요구 사항에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1121">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsMouseCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1122">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1122">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1123">이 요소에 의해 처리되지 않은 <see cref="E:System.Windows.ContentElement.IsMouseCapturedChanged" /> 이벤트가 발생할 때 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1123">Invoked when an unhandled <see cref="E:System.Windows.ContentElement.IsMouseCapturedChanged" /> event is raised on this element.</span></span> <span data-ttu-id="7d306-1124">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1124">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1125">이 가상 메서드는 발생 하는 경우의 값을 <xref:System.Windows.ContentElement.IsMouseCaptured%2A> 종속성 속성의 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1125">This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsMouseCaptured%2A> dependency property changes its value.</span></span> <span data-ttu-id="7d306-1126">가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1126">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="7d306-1127">그런 다음 <xref:System.Windows.ContentElement.IsMouseCapturedChanged> 동일한 이벤트 데이터 인스턴스를 사용 하 여 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1127">Then the <xref:System.Windows.ContentElement.IsMouseCapturedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="7d306-1128">에 <xref:System.Windows.ContentElement.IsMouseCapturedChanged> 이벤트가 라우트된 이벤트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1128">Notice that the <xref:System.Windows.ContentElement.IsMouseCapturedChanged> event is not a routed event.</span></span> <span data-ttu-id="7d306-1129">따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다. 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1129">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="7d306-1130">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1130">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1131">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1131">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="7d306-1132">호출할 수 있습니다 기본 앞 이나 뒤에 특수 한 처리 요구 사항에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1132">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsMouseCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1133">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1133">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1134">이 요소에 의해 처리되지 않은 <see cref="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" /> 이벤트가 발생할 때 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1134">Invoked when an unhandled <see cref="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" /> event is raised on this element.</span></span> <span data-ttu-id="7d306-1135">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1135">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="7d306-1136">이 가상 메서드는 발생 하는 경우의 값을 <see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin" /> 종속성 속성의 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1136">This virtual method is raised when the value of the <see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin" /> dependency property changes its value.</span></span> <span data-ttu-id="7d306-1137">가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1137">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="7d306-1138">그런 다음 <see cref="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" /> 동일한 이벤트 데이터 인스턴스를 사용 하 여 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1138">Then the <see cref="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" /> event is raised with that same event data instance.</span></span> <span data-ttu-id="7d306-1139">이벤트는 라우트된 이벤트; 하지 알 수 있습니다. 따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다. 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1139">Notice that the event is not a routed event; Therefore,  you cannot mark it as handled in the class handler.</span></span>  
  
<span data-ttu-id="7d306-1140">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1140">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1141">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1141">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="7d306-1142">호출할 수 있습니다 기본 앞 이나 뒤에 특수 한 처리 요구 사항에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1142">You may call base either before or after your special handling, depending on your requirements.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsMouseDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1143">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1143">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1144">이 요소에 의해 처리되지 않은 <see cref="E:System.Windows.ContentElement.IsMouseDirectlyOverChanged" /> 이벤트가 발생할 때 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1144">Invoked when an unhandled <see cref="E:System.Windows.ContentElement.IsMouseDirectlyOverChanged" /> event is raised on this element.</span></span> <span data-ttu-id="7d306-1145">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1145">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1146">이 가상 메서드는 발생 하는 경우의 값을 <xref:System.Windows.ContentElement.IsMouseDirectlyOver%2A> 종속성 속성의 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1146">This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsMouseDirectlyOver%2A> dependency property changes its value.</span></span> <span data-ttu-id="7d306-1147">가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1147">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="7d306-1148">그런 다음 <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> 동일한 이벤트 데이터 인스턴스를 사용 하 여 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1148">Then the <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="7d306-1149">에 <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> 이벤트가 라우트된 이벤트 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1149">Notice that the <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> event is not a routed event.</span></span> <span data-ttu-id="7d306-1150">따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다. 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1150">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="7d306-1151">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1151">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1152">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1152">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="7d306-1153">호출할 수 있습니다 기본 앞 이나 뒤에 특수 한 처리 요구 사항에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1153">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsStylusCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1154">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1154">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1155">이 요소에 의해 처리되지 않은 <see cref="E:System.Windows.ContentElement.IsStylusCapturedChanged" /> 이벤트가 발생할 때 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1155">Invoked when an unhandled <see cref="E:System.Windows.ContentElement.IsStylusCapturedChanged" /> event is raised on this element.</span></span> <span data-ttu-id="7d306-1156">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1156">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1157">이 가상 메서드는 발생 하는 경우의 값을 <xref:System.Windows.ContentElement.IsStylusCaptured%2A> 종속성 속성의 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1157">This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsStylusCaptured%2A> dependency property changes its value.</span></span> <span data-ttu-id="7d306-1158">가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1158">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="7d306-1159">그런 다음 <xref:System.Windows.ContentElement.IsStylusCapturedChanged> 동일한 이벤트 데이터 인스턴스를 사용 하 여 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1159">Then the <xref:System.Windows.ContentElement.IsStylusCapturedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="7d306-1160">이벤트를 라우트된 이벤트 인지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1160">Notice that the event is not a routed event.</span></span> <span data-ttu-id="7d306-1161">따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다. 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1161">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="7d306-1162">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1162">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1163">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1163">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="7d306-1164">호출할 수 있습니다 기본 앞 이나 뒤에 특수 한 처리 요구 사항에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1164">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsStylusCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1165">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1165">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1166">이 요소에 의해 처리되지 않은 <see cref="E:System.Windows.ContentElement.IsStylusCaptureWithinChanged" /> 이벤트가 발생할 때 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1166">Invoked when an unhandled <see cref="E:System.Windows.ContentElement.IsStylusCaptureWithinChanged" /> event is raised on this element.</span></span> <span data-ttu-id="7d306-1167">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1167">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1168">이 가상 메서드는 발생 하는 경우의 값을 <xref:System.Windows.ContentElement.IsStylusCaptureWithin%2A> 종속성 속성의 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1168">This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsStylusCaptureWithin%2A> dependency property changes its value.</span></span> <span data-ttu-id="7d306-1169">가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1169">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="7d306-1170">그런 다음 <xref:System.Windows.ContentElement.IsStylusCaptureWithinChanged> 동일한 이벤트 데이터 인스턴스를 사용 하 여 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1170">Then the <xref:System.Windows.ContentElement.IsStylusCaptureWithinChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="7d306-1171">이벤트를 라우트된 이벤트 인지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1171">Notice that the event is not a routed event.</span></span> <span data-ttu-id="7d306-1172">따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다. 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1172">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="7d306-1173">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1173">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1174">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1174">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="7d306-1175">호출할 수 있습니다 기본 앞 이나 뒤에 특수 한 처리 요구 사항에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1175">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsStylusDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1176">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1176">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1177">이 요소에 의해 처리되지 않은 <see cref="E:System.Windows.ContentElement.IsStylusDirectlyOverChanged" /> 이벤트가 발생할 때 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1177">Invoked when an unhandled <see cref="E:System.Windows.ContentElement.IsStylusDirectlyOverChanged" /> event is raised on this element.</span></span> <span data-ttu-id="7d306-1178">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1178">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1179">이 가상 메서드는 발생 하는 경우의 값을 <xref:System.Windows.ContentElement.IsStylusDirectlyOver%2A> 종속성 속성의 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1179">This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsStylusDirectlyOver%2A> dependency property changes its value.</span></span> <span data-ttu-id="7d306-1180">가상 메서드는 먼저 발생 하 고 필요에 따라 이벤트 데이터를 조작할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1180">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="7d306-1181">그런 다음 <xref:System.Windows.ContentElement.IsStylusDirectlyOverChanged> 동일한 이벤트 데이터 인스턴스를 사용 하 여 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1181">Then the <xref:System.Windows.ContentElement.IsStylusDirectlyOverChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="7d306-1182">이벤트를 라우트된 이벤트 인지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1182">Notice that the event is not a routed event.</span></span> <span data-ttu-id="7d306-1183">따라서 클래스 처리기에서 처리 된 것으로 표시할 수 없습니다. 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1183">Therefore you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="7d306-1184">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1184">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1185">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1185">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="7d306-1186">호출할 수 있습니다 기본 앞 이나 뒤에 특수 한 처리 요구 사항에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1186">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="contentElement.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1187">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.KeyEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1187">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1188">처리되지 않은 <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1188">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1189">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1189">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1190">키 입력 전용된 입력된 관리자에서 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1190">Keystrokes are handled by a dedicated input manager.</span></span> <span data-ttu-id="7d306-1191">예를 들어, 입력 및 명령 바인딩 키를 사용 하는 다른 프로그래밍 기능 일반 키 입력으로 노출 하기 전에 키 입력을 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1191">Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.</span></span> <span data-ttu-id="7d306-1192">이러한 입력 시스템 기능으로 처리 한 다음 이벤트를 표시 하는 경우 <xref:System.Windows.ContentElement.OnKeyDown%2A> 호출 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1192">If these input system features mark the event as handled, then <xref:System.Windows.ContentElement.OnKeyDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="7d306-1193">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1193">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1194">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1194">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1195">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1195">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1196">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1196">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1197">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1197">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1198">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1198">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1199">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1199">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1200">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1200">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1201">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1201">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="contentElement.OnKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1202">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.KeyEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1202">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1203">처리되지 않은 <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1203">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1204">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1204">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1205">키 입력 전용된 입력된 관리자에서 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1205">Keystrokes are handled by a dedicated input manager.</span></span> <span data-ttu-id="7d306-1206">예를 들어, 입력 및 명령 바인딩 키를 사용 하는 다른 프로그래밍 기능 일반 키 입력으로 노출 하기 전에 키 입력을 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1206">Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.</span></span> <span data-ttu-id="7d306-1207">이러한 입력 시스템 기능으로 처리 한 다음 이벤트를 표시 하는 경우 <xref:System.Windows.ContentElement.OnKeyUp%2A> 호출 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1207">If these input system features mark the event as handled, then <xref:System.Windows.ContentElement.OnKeyUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="7d306-1208">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1208">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1209">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1209">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1210">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1210">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1211">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1211">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1212">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1212">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1213">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1213">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1214">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1214">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1215">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1215">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1216">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1216">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="contentElement.OnLostFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1217">이벤트 데이터가 포함된 <see cref="T:System.Windows.RoutedEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1217">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data.</span></span> <span data-ttu-id="7d306-1218">이 이벤트 데이터에는 <see cref="E:System.Windows.ContentElement.LostFocus" /> 이벤트의 식별자가 포함되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1218">This event data must contain the identifier for the <see cref="E:System.Windows.ContentElement.LostFocus" /> event.</span></span></param>
        <summary><span data-ttu-id="7d306-1219">지정된 이벤트 데이터를 사용하여 <see cref="E:System.Windows.ContentElement.LostFocus" /> 라우트된 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1219">Raises the <see cref="E:System.Windows.ContentElement.LostFocus" /> routed event by using the event data that is provided.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1220">이 메서드를 가상 이벤트를 발생 시키는 기본 구현이 되어지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1220">This method, although virtual, does have a default implementation that raises the event.</span></span>  
  
 <span data-ttu-id="7d306-1221">에 대 한 \* 메서드 구현을 이벤트를 발생 시키기 위한 것 이며이 같은 메서드 구현을 이벤트를 발생 시킬 때의 <xref:System.Windows.ContentElement.IsFocused%2A> 속성 값이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1221">This On\* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.ContentElement.IsFocused%2A> property value changes.</span></span> <span data-ttu-id="7d306-1222">이 구현은 일부 다른 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 에 \* 구현을 해당 이벤트를 처리 하는 클래스를 추가 하는 편리한 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1222">This implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On\* implementations, which only provide a convenient way to add class handling for that event.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="7d306-1223">포커스 이벤트를 발생 시 키 지는 의도적으로 필요 없다면 구현 기본 구현을 호출 하는 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1223">Unless you have a deliberate and unusual need to not raise the focus events, make sure that your implementation calls the base implementation.</span></span> <span data-ttu-id="7d306-1224">그렇지 않은 경우는 <see cref="E:System.Windows.ContentElement.LostFocus" /> 이 요소에 포커스를 설정 하는 일반적인 사용자 작업 하는 동안 이벤트가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1224">Otherwise, the <see cref="E:System.Windows.ContentElement.LostFocus" /> event is not raised during typical user operations that ordinarily set focus to this element.</span></span> <span data-ttu-id="7d306-1225">포커스 요소 않으려는 경우 설정 하 여 포커스를 받을 수 없도록 요소를 방지할 수 있습니다 <see cref="P:System.Windows.ContentElement.Focusable" /> 에 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1225">If you do not intend your element to be focusable, you can prevent the element from being focusable by setting <see cref="P:System.Windows.ContentElement.Focusable" /> to <see langword="false" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="contentElement.OnLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1226">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1226">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1227">처리되지 않은 <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1227">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1228">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1228">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1229">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1229">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1230">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1230">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1231">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1231">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1232">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1232">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1233">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1233">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1234">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1234">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1235">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1235">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1236">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1236">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1237">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1237">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnLostMouseCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="contentElement.OnLostMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1238">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1238">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1239">처리되지 않은 <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1239">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1240">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1240">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1241">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1241">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1242">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1242">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1243">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1243">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1244">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1244">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1245">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1245">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1246">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1246">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1247">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1247">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1248">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1248">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1249">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1249">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostStylusCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnLostStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1250">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1250">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1251">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1251">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1252">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1252">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1253">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1253">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1254">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1254">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1255">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1255">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1256">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1256">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1257">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1257">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1258">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1258">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1259">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1259">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1260">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1260">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1261">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1261">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostTouchCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnLostTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1262">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TouchEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1262">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1263">이 요소에서 터치 캡처가 손실될 때 발생하는 <see cref="E:System.Windows.ContentElement.LostTouchCapture" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1263">Provides class handling for the <see cref="E:System.Windows.ContentElement.LostTouchCapture" /> routed event that occurs when this element loses a touch capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1264"><xref:System.Windows.ContentElement.OnLostTouchCapture%2A> 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1264">The <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> method has no default implementation.</span></span> <span data-ttu-id="7d306-1265">재정의 <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> 처리 하는 파생된 클래스에는 <xref:System.Windows.ContentElement.LostTouchCapture> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1265">Override <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> in a derived class to handle the <xref:System.Windows.ContentElement.LostTouchCapture> event.</span></span> <span data-ttu-id="7d306-1266">기본 클래스를 호출 해야 <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> 메서드는 기본 클래스 이벤트를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1266">Be sure to call the base class' <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1267">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1267">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="7d306-1268">이 이벤트 데이터는 누른 상태 및 처리된 상태의 마우스 단추에 대한 세부 사항을 보고합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1268">This event data reports details about the mouse button that was pressed and the handled state.</span></span></param>
        <summary><span data-ttu-id="7d306-1269">처리되지 않은 <see cref="E:System.Windows.Input.Mouse.MouseDown" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1269">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1270">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1270">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1271">마우스 단추 작업 전용된 입력된 관리자에서 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1271">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="7d306-1272">바인딩, 명령 및 입력과 같은 마우스 단추 작업을 사용 하는 다른 프로그래밍 기능 일반 마우스 단추 작업으로 노출 되기 전에 작업에 대 한 처리기를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1272">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="7d306-1273">이러한 시스템 기능 표시를 입력 합니다 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 이벤트를 처리 <xref:System.Windows.ContentElement.OnMouseDown%2A> 호출 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1273">If these input system features mark the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event as handled, <xref:System.Windows.ContentElement.OnMouseDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="7d306-1274">다음 이벤트 영향 처리 이벤트를 표시 하려면이 클래스 처리기를 사용 하는 경우: <xref:System.Windows.ContentElement.MouseLeftButtonDown> 고 <xref:System.Windows.ContentElement.MouseRightButtonDown>입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1274">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.MouseLeftButtonDown> and <xref:System.Windows.ContentElement.MouseRightButtonDown>.</span></span> <span data-ttu-id="7d306-1275">이러한 이벤트 중 하나가 받는 요소에서 발생할 수 있습니다 때 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 수신 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1275">Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="7d306-1276">이 이벤트를 처리 하는 클래스에서 처리를 표시 하는 경우 하위 이벤트는 여전히 발생 합니다. 그러나 이벤트 데이터의 처리 상태를 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1276">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="7d306-1277">명시적으로 사용 하지 않는 한 하위 이벤트에 대 한 인스턴스 처리기 호출 되지 이벤트 클래스 처리에서 처리 되 면 <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 사용 하 여 `handledEventsToo` `true` 처리기를 연결 하기 위해.</span><span class="sxs-lookup"><span data-stu-id="7d306-1277">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="7d306-1278">클래스 처리기도 호출 되지 않으면 해당 클래스 처리기에 등록 된 합니다 <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 서명을 `handledEventsToo` `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1278">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="7d306-1279">처리 하 여 <xref:System.Windows.ContentElement.OnMouseDown%2A>는 처리 하면 클래스 처리에 작업 아래로 모든 가능한 마우스 단추입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1279">By handling <xref:System.Windows.ContentElement.OnMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions.</span></span> <span data-ttu-id="7d306-1280">이 동작은 원치 않을; 따라서이 가상 메서드를 사용 하 여 이벤트를 처리 됨으로 표시 하는 경우 주의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1280">This behavior might be unwanted; therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="7d306-1281">각 단추 관련 직접 이벤트에는 가상 On \* 메서드 여부를 이러한 단추 관련 클래스 처리기를 재정의 더 적합할 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1281">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="7d306-1282">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1282">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1283">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1283">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1284">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1284">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1285">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1285">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1286">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1286">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1287">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1287">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1288">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1288">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1289">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1289">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1290">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1290">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseEnter(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseEnter (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseEnter(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="contentElement.OnMouseEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1291">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1291">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1292">이 요소에 의해 처리되지 않은 <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> 연결된 이벤트가 발생할 때 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1292">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> attached event is raised on this element.</span></span> <span data-ttu-id="7d306-1293">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1293">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1294">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1294">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1295">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1295">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="7d306-1296">호출할 수 있습니다 기본 앞 이나 뒤에 특수 한 처리 요구 사항에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1296">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="7d306-1297">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1297">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1298">이 경우 일치 하는 이벤트는 직접 라우팅 전략을 사용 하 여 라우트된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1298">In this case the matching event is a routed event, with a direct routing strategy.</span></span> <span data-ttu-id="7d306-1299">이벤트를 처리 됨으로 표시 하는 것은 일반적인 인스턴스 처리기를 방지 하는 데 유용 하지만 (지정 하지 않는 `handledEventsToo`)가 호출 되지 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1299">Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeave(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeave (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeave(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="contentElement.OnMouseLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1300">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1300">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1301">이 요소에 의해 처리되지 않은 <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> 연결된 이벤트가 발생할 때 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1301">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> attached event is raised on this element.</span></span> <span data-ttu-id="7d306-1302">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1302">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1303">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1303">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1304">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1304">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="7d306-1305">호출할 수 있습니다 기본 앞 이나 뒤에 특수 한 처리 요구 사항에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1305">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="7d306-1306">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1306">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1307">이 경우 일치 하는 이벤트는 직접 라우팅 전략을 사용 하 여 라우트된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1307">In this case the matching event is a routed event, with a direct routing strategy.</span></span> <span data-ttu-id="7d306-1308">이벤트를 처리 됨으로 표시 하는 것은 일반적인 인스턴스 처리기를 방지 하는 데 유용 하지만 (지정 하지 않는 `handledEventsToo`)가 호출 되지 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1308">Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1309">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1309">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="7d306-1310">이벤트 데이터는 마우스 왼쪽 단추를 놓았음을 보고합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1310">The event data reports that the left mouse button was pressed.</span></span></param>
        <summary><span data-ttu-id="7d306-1311">이 요소에 의해 처리되지 않은 <see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" /> 라우트된 이벤트가 발생할 때 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1311">Invoked when an unhandled <see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" /> routed event is raised on this element.</span></span> <span data-ttu-id="7d306-1312">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1312">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1313"><xref:System.Windows.ContentElement.MouseLeftButtonDown> 버블링 경로 이동 하는 이벤트 보이지만 실제로 간접적인 방식에서으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1313">The <xref:System.Windows.ContentElement.MouseLeftButtonDown> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="7d306-1314"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 이벤트는 라우팅, 버블링 및 각 됩니다 <xref:System.Windows.ContentElement> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시키는 <xref:System.Windows.ContentElement.MouseLeftButtonDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1314"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseLeftButtonDown>.</span></span> <span data-ttu-id="7d306-1315">사용 하기는 <xref:System.Windows.ContentElement.MouseLeftButtonDown> 이 요소에 대 한 처리 이벤트를 처리 된 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1315">Although you can mark the <xref:System.Windows.ContentElement.MouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="7d306-1316">그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 수 있습니다 (지정 하지 않은 `handledEventsToo`)가 호출 되지.</span><span class="sxs-lookup"><span data-stu-id="7d306-1316">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="7d306-1317">일반 마우스 이벤트 처리에 대 한 기본 구현은 <xref:System.Windows.ContentElement> 수신 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 되 고 적절 한 로컬 이벤트로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1317">The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="7d306-1318">이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1318">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="7d306-1319">파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1319">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7d306-1320">마우스 처리 동작을 변경할 수 없습니다 <xref:System.Windows.ContentElement> 재정의 하 여 <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1320">You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="7d306-1321">또는 특정 마우스 상태를 처리 하는 이벤트를 변경 하려면이 메서드를 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1321">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="7d306-1322">기본 구현을 호출 것인지 여부는 시나리오에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1322">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="7d306-1323">해당 마우스 이벤트를 호출 해야 하는 상위 클래스에 대 한 기본 입력된 처리 사용 하지 않도록 설정 기본 호출 하지 못하면 <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1323">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A>.</span></span> <span data-ttu-id="7d306-1324">예를 들어에서 파생할 수 있습니다 <xref:System.Windows.Controls.Button> 시키고 <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A> 에 파생된 클래스에서 기본 구현을 호출 하지 않고 단,이 재정의 사용 하지 않도록 설정 된 <xref:System.Windows.Controls.Primitives.ButtonBase.Click> 이벤트.</span><span class="sxs-lookup"><span data-stu-id="7d306-1324">For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1325">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1325">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="7d306-1326">이벤트 데이터는 마우스 왼쪽 단추를 놓았음을 보고합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1326">The event data reports that the left mouse button was released.</span></span></param>
        <summary><span data-ttu-id="7d306-1327">처리되지 않은 <see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" /> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1327">Invoked when an unhandled <see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1328">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1328">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1329"><xref:System.Windows.ContentElement.MouseLeftButtonUp> 버블링 경로 이동 하는 이벤트 보이지만 실제로 간접적인 방식에서으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1329">The <xref:System.Windows.ContentElement.MouseLeftButtonUp> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="7d306-1330"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 이벤트는 라우팅, 버블링 및 각 됩니다 <xref:System.Windows.ContentElement> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시키는 <xref:System.Windows.ContentElement.MouseLeftButtonUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1330"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseLeftButtonUp>.</span></span> <span data-ttu-id="7d306-1331">사용 하기는 <xref:System.Windows.ContentElement.MouseLeftButtonUp> 이 요소에 대 한 처리 이벤트를 처리 된 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1331">Although you can mark the <xref:System.Windows.ContentElement.MouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="7d306-1332">그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 수 있습니다 (지정 하지 않은 `handledEventsToo`)가 호출 되지.</span><span class="sxs-lookup"><span data-stu-id="7d306-1332">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="7d306-1333">일반 마우스 이벤트 처리에 대 한 기본 구현은 <xref:System.Windows.ContentElement> 수신 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 되 고 적절 한 로컬 이벤트로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1333">The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="7d306-1334">이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1334">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="7d306-1335">파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1335">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7d306-1336">마우스 처리 동작을 변경할 수 없습니다 <xref:System.Windows.ContentElement> 재정의 하 여 <xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1336">You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="contentElement.OnMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1337">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1337">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1338">처리되지 않은 <see cref="E:System.Windows.Input.Mouse.MouseMove" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1338">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1339">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1339">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1340">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1340">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1341">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1341">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1342">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1342">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1343">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1343">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1344">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1344">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1345">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1345">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1346">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1346">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1347">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1347">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1348">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1348">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1349">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1349">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="7d306-1350">이벤트 데이터는 마우스 오른쪽 단추를 놓았음을 보고합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1350">The event data reports that the right mouse button was pressed.</span></span></param>
        <summary><span data-ttu-id="7d306-1351">처리되지 않은 <see cref="E:System.Windows.ContentElement.MouseRightButtonDown" /> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1351">Invoked when an unhandled <see cref="E:System.Windows.ContentElement.MouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1352">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1352">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1353"><xref:System.Windows.ContentElement.MouseRightButtonDown> 버블링 경로 이동 하는 이벤트 보이지만 실제로 간접적인 방식에서으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1353">The <xref:System.Windows.ContentElement.MouseRightButtonDown> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="7d306-1354"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 이벤트는 라우팅, 버블링 및 각 됩니다 <xref:System.Windows.ContentElement> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시키는 <xref:System.Windows.ContentElement.MouseRightButtonDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1354"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseRightButtonDown>.</span></span> <span data-ttu-id="7d306-1355">사용 하기는 <xref:System.Windows.ContentElement.MouseRightButtonDown> 이 요소에 대 한 처리 이벤트를 처리 된 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1355">Although you can mark the <xref:System.Windows.ContentElement.MouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="7d306-1356">그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 수 있습니다 (지정 하지 않은 `handledEventsToo`)가 호출 되지.</span><span class="sxs-lookup"><span data-stu-id="7d306-1356">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="7d306-1357">일반 마우스 이벤트 처리에 대 한 기본 구현은 <xref:System.Windows.ContentElement> 수신 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 되 고 적절 한 로컬 이벤트로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1357">The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="7d306-1358">이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1358">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="7d306-1359">파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1359">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7d306-1360">마우스 처리 동작을 변경할 수 없습니다 <xref:System.Windows.ContentElement> 재정의 하 여 <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1360">You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="7d306-1361">또는 특정 마우스 상태를 처리 하는 이벤트를 변경 하려면이 메서드를 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1361">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="7d306-1362">기본 구현을 호출 것인지 여부는 시나리오에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1362">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="7d306-1363">해당 마우스 이벤트를 호출 해야 하는 상위 클래스에 대 한 기본 입력된 처리 사용 하지 않도록 설정 기본 호출 하지 못하면 <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1363">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A>.</span></span> <span data-ttu-id="7d306-1364">예를 들어에서 파생할 수 있습니다 <xref:System.Windows.Controls.Control> 시키고 <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A> 기반의 호출 하지 않고 파생된 클래스에서 단,이 재정의 사용 하지 않도록 설정 상황에 맞는 메뉴의 서비스를 컨트롤에 속한의 <xref:System.Windows.Controls.Control> 기본 동작입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1364">For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1365">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1365">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="7d306-1366">이벤트 데이터는 마우스 오른쪽 단추를 놓았음을 보고합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1366">The event data reports that the right mouse button was released.</span></span></param>
        <summary><span data-ttu-id="7d306-1367">처리되지 않은 <see cref="E:System.Windows.ContentElement.MouseRightButtonUp" /> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1367">Invoked when an unhandled <see cref="E:System.Windows.ContentElement.MouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1368">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1368">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1369"><xref:System.Windows.ContentElement.MouseRightButtonUp> 버블링 경로 이동 하는 이벤트 보이지만 실제로 간접적인 방식에서으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1369">The <xref:System.Windows.ContentElement.MouseRightButtonUp> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="7d306-1370"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 이벤트는 라우팅, 버블링 및 각 됩니다 <xref:System.Windows.ContentElement> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시키는 <xref:System.Windows.ContentElement.MouseRightButtonUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1370"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseRightButtonUp>.</span></span> <span data-ttu-id="7d306-1371">사용 하기는 <xref:System.Windows.ContentElement.MouseRightButtonUp> 이 요소에 대 한 처리 이벤트를 처리 된 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1371">Although you can mark the <xref:System.Windows.ContentElement.MouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="7d306-1372">그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 수 있습니다 (지정 하지 않은 `handledEventsToo`)가 호출 되지.</span><span class="sxs-lookup"><span data-stu-id="7d306-1372">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="7d306-1373">일반 마우스 이벤트 처리에 대 한 기본 구현은 <xref:System.Windows.ContentElement> 수신 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 되 고 적절 한 로컬 이벤트로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1373">The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="7d306-1374">이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1374">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="7d306-1375">파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1375">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7d306-1376">마우스 처리 동작을 변경할 수 없습니다 <xref:System.Windows.ContentElement> 재정의 하 여 <xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1376">You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1377">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1377">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="7d306-1378">이벤트 데이터는 마우스 단추를 놓았음을 보고합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1378">The event data reports that the mouse button was released.</span></span></param>
        <summary><span data-ttu-id="7d306-1379">처리되지 않은 <see cref="E:System.Windows.Input.Mouse.MouseUp" /> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1379">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1380">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1380">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1381">마우스 단추 작업 전용된 입력된 관리자에서 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1381">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="7d306-1382">바인딩, 명령 및 입력과 같은 마우스 단추 작업을 사용 하는 다른 프로그래밍 기능 일반 마우스 단추 작업으로 노출 되기 전에 작업에 대 한 처리기를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1382">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="7d306-1383">이러한 시스템 기능 표시를 입력 합니다 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 이벤트를 처리 <xref:System.Windows.ContentElement.OnMouseUp%2A> 호출 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1383">If these input system features mark the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event as handled, <xref:System.Windows.ContentElement.OnMouseUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="7d306-1384">다음 이벤트 영향 처리 이벤트를 표시 하려면이 클래스 처리기를 사용 하는 경우: <xref:System.Windows.ContentElement.MouseLeftButtonUp> 고 <xref:System.Windows.ContentElement.MouseRightButtonUp>입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1384">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.MouseLeftButtonUp> and <xref:System.Windows.ContentElement.MouseRightButtonUp>.</span></span> <span data-ttu-id="7d306-1385">이러한 이벤트 중 하나가 받는 요소에서 발생할 수 있습니다 때 <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1385">Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="7d306-1386">이 이벤트를 처리 하는 클래스에서 처리를 표시 하는 경우 하위 이벤트는 여전히 발생 합니다. 그러나 이벤트 데이터의 처리 상태를 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1386">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="7d306-1387">명시적으로 사용 하지 않는 한 하위 이벤트에 대 한 인스턴스 처리기 호출 되지 이벤트 클래스 처리에서 처리 되 면 <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 사용 하 여 `handledEventsToo` `true` 처리기를 연결 하기 위해.</span><span class="sxs-lookup"><span data-stu-id="7d306-1387">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="7d306-1388">클래스 처리기도 호출 되지 않으면 해당 클래스 처리기에 등록 된 합니다 <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 서명을 `handledEventsToo` `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1388">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="7d306-1389">처리 하 여 <xref:System.Windows.ContentElement.OnMouseUp%2A>는 처리 하면 클래스 처리에 동작을 모든 가능한 마우스 단추입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1389">By handling <xref:System.Windows.ContentElement.OnMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions.</span></span> <span data-ttu-id="7d306-1390">이 동작은 원치 않을; 따라서이 가상 메서드를 사용 하 여 이벤트를 처리 됨으로 표시 하는 경우 주의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1390">This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="7d306-1391">각 단추 관련 직접 이벤트에는 가상 On \* 메서드 여부를 이러한 단추 관련 클래스 처리기를 재정의 더 적합할 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1391">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="7d306-1392">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1392">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1393">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1393">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1394">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1394">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1395">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1395">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1396">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1396">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1397">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1397">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1398">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1398">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1399">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1399">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1400">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1400">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="contentElement.OnMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1401">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseWheelEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1401">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1402">처리되지 않은 <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1402">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1403">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1403">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1404">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1404">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1405">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1405">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1406">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1406">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1407">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1407">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1408">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1408">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1409">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1409">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1410">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1410">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1411">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1411">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1412">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1412">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnPreviewDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1413">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DragEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1413">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1414">처리되지 않은 <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1414">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1415">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1415">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1416">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1416">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1417">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1417">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1418">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1418">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1419">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1419">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1420">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1420">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1421">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1421">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1422">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1422">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1423">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1423">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1424">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1424">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="7d306-1425">다른 시나리오는 미리 보기 이벤트는 일치 하는 버블링 클래스 처리기가 호출 되지 않습니다 있도록 처리 된 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1425">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewDragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnPreviewDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1426">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DragEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1426">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1427">처리되지 않은 <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1427">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1428">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1428">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1429">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1429">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1430">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1430">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1431">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1431">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1432">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1432">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1433">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1433">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1434">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1434">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1435">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1435">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1436">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1436">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1437">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1437">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="7d306-1438">다른 시나리오는 미리 보기 이벤트는 일치 하는 버블링 클래스 처리기가 호출 되지 않습니다 있도록 처리 된 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1438">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewDragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragOver">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnPreviewDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1439">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DragEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1439">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1440">처리되지 않은 <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1440">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1441">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1441">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1442">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1442">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1443">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1443">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1444">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1444">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1445">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1445">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1446">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1446">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1447">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1447">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1448">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1448">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1449">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1449">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1450">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1450">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="7d306-1451">다른 시나리오는 미리 보기 이벤트는 일치 하는 버블링 클래스 처리기가 호출 되지 않습니다 있도록 처리 된 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1451">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewDragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDrop">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnPreviewDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1452">이벤트 데이터를 포함하는 <see cref="T:System.Windows.DragEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1452">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1453">처리되지 않은 <see cref="E:System.Windows.DragDrop.PreviewDrop" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1453">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDrop" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1454">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1454">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1455">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1455">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1456">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1456">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1457">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1457">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1458">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1458">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1459">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1459">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1460">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1460">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1461">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1461">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1462">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1462">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1463">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1463">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="7d306-1464">다른 시나리오는 미리 보기 이벤트는 일치 하는 버블링 클래스 처리기가 호출 되지 않습니다 있도록 처리 된 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1464">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewDrop" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGiveFeedback">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="contentElement.OnPreviewGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1465">이벤트 데이터를 포함하는 <see cref="T:System.Windows.GiveFeedbackEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1465">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1466">처리되지 않은 <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1466">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1467">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1467">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1468">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1468">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1469">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1469">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1470">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1470">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1471">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1471">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1472">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1472">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1473">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1473">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1474">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1474">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1475">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1475">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1476">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1476">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="7d306-1477">다른 시나리오는 미리 보기 이벤트는 일치 하는 버블링 클래스 처리기가 호출 되지 않습니다 있도록 처리 된 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1477">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewGiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="contentElement.OnPreviewGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1478">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1478">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1479">처리되지 않은 <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1479">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1480">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1480">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1481">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1481">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1482">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1482">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1483">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1483">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1484">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1484">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1485">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1485">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1486">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1486">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1487">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1487">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1488">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1488">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1489">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1489">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="7d306-1490">다른 시나리오는 미리 보기 이벤트는 일치 하는 버블링 클래스 처리기가 호출 되지 않습니다 있도록 처리 된 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1490">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="contentElement.OnPreviewKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1491">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.KeyEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1491">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1492">처리되지 않은 <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1492">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1493">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1493">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1494">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1494">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1495">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1495">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1496">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1496">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1497">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1497">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1498">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1498">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1499">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1499">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1500">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1500">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1501">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1501">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1502">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1502">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="7d306-1503">다른 시나리오는 미리 보기 이벤트는 일치 하는 버블링 클래스 처리기가 호출 되지 않습니다 있도록 처리 된 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1503">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="contentElement.OnPreviewKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1504">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.KeyEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1504">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1505">처리되지 않은 <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1505">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1506">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1506">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1507">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1507">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1508">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1508">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1509">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1509">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1510">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1510">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1511">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1511">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1512">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1512">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1513">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1513">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1514">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1514">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1515">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1515">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="7d306-1516">다른 시나리오는 미리 보기 이벤트는 일치 하는 버블링 클래스 처리기가 호출 되지 않습니다 있도록 처리 된 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1516">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="contentElement.OnPreviewLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1517">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1517">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1518">처리되지 않은 <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1518">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1519">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1519">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1520">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1520">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1521">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1521">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1522">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1522">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1523">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1523">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1524">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1524">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1525">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1525">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1526">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1526">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1527">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1527">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1528">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1528">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="7d306-1529">다른 시나리오는 미리 보기 이벤트는 일치 하는 버블링 클래스 처리기가 호출 되지 않습니다 있도록 처리 된 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1529">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1530">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1530">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="7d306-1531">이벤트 데이터는 하나 이상의 마우스 단추를 놓았음을 보고합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1531">The event data reports that one or more mouse buttons were pressed.</span></span></param>
        <summary><span data-ttu-id="7d306-1532">처리되지 않은 <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> 연결된 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1532">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> attached routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1533">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1533">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1534">마우스 단추 작업 전용된 입력된 관리자에서 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1534">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="7d306-1535">바인딩, 명령 및 입력과 같은 마우스 단추 작업을 사용 하는 다른 프로그래밍 기능 일반 마우스 단추 작업으로 노출 되기 전에 작업에 대 한 처리기를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1535">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="7d306-1536">이러한 시스템 기능 표시를 입력 합니다 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 이벤트를 처리 <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A> 호출 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1536">If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event as handled, <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="7d306-1537">다음 이벤트 영향 처리 이벤트를 표시 하려면이 클래스 처리기를 사용 하는 경우: <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> 고 <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1537">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>.</span></span> <span data-ttu-id="7d306-1538">이러한 이벤트 중 하나가 받는 요소에서 발생할 수 있습니다 때 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 수신 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1538">Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="7d306-1539">이 이벤트를 처리 하는 클래스에서 처리를 표시 하는 경우 하위 이벤트는 여전히 발생 합니다. 그러나 이벤트 데이터의 처리 상태를 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1539">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="7d306-1540">명시적으로 사용 하지 않는 한 하위 이벤트에 대 한 인스턴스 처리기 호출 되지 이벤트 클래스 처리에서 처리 되 면 <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 사용 하 여 `handledEventsToo` `true` 처리기를 연결 하기 위해.</span><span class="sxs-lookup"><span data-stu-id="7d306-1540">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="7d306-1541">클래스 처리기도 호출 되지 않으면 해당 클래스 처리기에 등록 된 합니다 <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 서명을 `handledEventsToo` `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1541">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="7d306-1542">처리 하 여 <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A>는 처리 하면 클래스 처리에 작업 아래로 모든 가능한 마우스 단추입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1542">By handling <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions.</span></span> <span data-ttu-id="7d306-1543">이 동작은 원치 않을; 따라서이 가상 메서드를 사용 하 여 이벤트를 처리 됨으로 표시 하는 경우 주의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1543">This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="7d306-1544">각 단추 관련 직접 이벤트에는 가상 On \* 메서드 여부를 이러한 단추 관련 클래스 처리기를 재정의 더 적합할 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1544">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="7d306-1545">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1545">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1546">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1546">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1547">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1547">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1548">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1548">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1549">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1549">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1550">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1550">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1551">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1551">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1552">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1552">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1553">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1553">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="7d306-1554">다른 시나리오는 미리 보기 이벤트는 일치 하는 버블링 클래스 처리기가 호출 되지 않습니다 있도록 처리 된 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1554">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1555">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1555">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="7d306-1556">이벤트 데이터는 마우스 왼쪽 단추를 놓았음을 보고합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1556">The event data reports that the left mouse button was pressed.</span></span></param>
        <summary><span data-ttu-id="7d306-1557">처리되지 않은 <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" /> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1557">Invoked when an unhandled <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1558">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1558">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1559"><xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> 터널링 경로 이동 하는 이벤트 보이지만 실제로 간접적인 방식에서으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1559">The <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="7d306-1560"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 이벤트는 라우팅, 터널 및 각 <xref:System.Windows.ContentElement> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시키는 <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1560"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>.</span></span> <span data-ttu-id="7d306-1561">사용 하기는 <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> 이 요소에 대 한 처리 이벤트를 처리 된 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1561">Although you can mark the <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="7d306-1562">그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 수 있습니다 (지정 하지 않은 `handledEventsToo`)가 호출 되지.</span><span class="sxs-lookup"><span data-stu-id="7d306-1562">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="7d306-1563">일반 마우스 이벤트 처리에 대 한 기본 구현은 <xref:System.Windows.ContentElement> 수신 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 되 고 적절 한 로컬 이벤트로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1563">The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="7d306-1564">이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1564">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="7d306-1565">파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1565">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7d306-1566">마우스 처리 동작을 변경할 수 없습니다 <xref:System.Windows.ContentElement> 재정의 하 여 <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1566">You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="7d306-1567">또는 특정 마우스 상태를 처리 하는 이벤트를 변경 하려면이 메서드를 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1567">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="7d306-1568">기본 구현을 호출 것인지 여부는 시나리오에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1568">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="7d306-1569">해당 마우스 이벤트를 호출 해야 하는 상위 클래스에 대 한 기본 입력된 처리 사용 하지 않도록 설정 기본 호출 하지 못하면 <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1569">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A>.</span></span> <span data-ttu-id="7d306-1570">예를 들어에서 파생할 수 있습니다 <xref:System.Windows.Controls.Button> 시키고 <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A> 에 파생된 클래스에서 기본 구현을 호출 하지 않고 단,이 재정의 사용 하지 않도록 설정 된 <xref:System.Windows.Controls.Primitives.ButtonBase.Click> 이벤트.</span><span class="sxs-lookup"><span data-stu-id="7d306-1570">For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1571">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1571">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="7d306-1572">이벤트 데이터는 마우스 왼쪽 단추를 놓았음을 보고합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1572">The event data reports that the left mouse button was released.</span></span></param>
        <summary><span data-ttu-id="7d306-1573">처리되지 않은 <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" /> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1573">Invoked when an unhandled <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1574">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1574">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1575"><xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> 터널링 경로 이동 하는 이벤트 보이지만 실제로 간접적인 방식에서으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1575">The <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="7d306-1576"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 이벤트는 라우팅, 터널 및 각 <xref:System.Windows.ContentElement> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시키는 <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1576"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp>.</span></span> <span data-ttu-id="7d306-1577">사용 하기는 <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> 이 요소에 대 한 처리 이벤트를 처리 된 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1577">Although you can mark the <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="7d306-1578">그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 수 있습니다 (지정 하지 않은 `handledEventsToo`)가 호출 되지.</span><span class="sxs-lookup"><span data-stu-id="7d306-1578">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="7d306-1579">일반 마우스 이벤트 처리에 대 한 기본 구현은 <xref:System.Windows.ContentElement> 수신 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 되 고 적절 한 로컬 이벤트로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1579">The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="7d306-1580">이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1580">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="7d306-1581">파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1581">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7d306-1582">마우스 처리 동작을 변경할 수 없습니다 <xref:System.Windows.ContentElement> 재정의 하 여 <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1582">You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1583">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1583">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1584">처리되지 않은 <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1584">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1585">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1585">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1586">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1586">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1587">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1587">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1588">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1588">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1589">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1589">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1590">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1590">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1591">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1591">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1592">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1592">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1593">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1593">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1594">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1594">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="7d306-1595">다른 시나리오는 미리 보기 이벤트는 일치 하는 버블링 클래스 처리기가 호출 되지 않습니다 있도록 처리 된 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1595">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1596">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1596">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="7d306-1597">이벤트 데이터는 마우스 오른쪽 단추를 놓았음을 보고합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1597">The event data reports that the right mouse button was pressed.</span></span></param>
        <summary><span data-ttu-id="7d306-1598">처리되지 않은 <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" /> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1598">Invoked when an unhandled <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1599">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1599">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1600"><xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> 터널링 경로 이동 하는 이벤트 보이지만 실제로 간접적인 방식에서으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1600">The <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="7d306-1601"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 이벤트는 라우팅, 터널 및 각 <xref:System.Windows.ContentElement> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시키는 <xref:System.Windows.ContentElement.MouseRightButtonDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1601"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseRightButtonDown>.</span></span> <span data-ttu-id="7d306-1602">사용 하기는 <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> 이 요소에 대 한 처리 이벤트를 처리 된 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1602">Although you can mark the <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="7d306-1603">그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 수 있습니다 (지정 하지 않은 `handledEventsToo`)가 호출 되지.</span><span class="sxs-lookup"><span data-stu-id="7d306-1603">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="7d306-1604">일반 마우스 이벤트 처리에 대 한 기본 구현은 <xref:System.Windows.ContentElement> 수신 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 되 고 적절 한 로컬 이벤트로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1604">The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="7d306-1605">이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1605">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="7d306-1606">파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1606">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7d306-1607">마우스 처리 동작을 변경할 수 없습니다 <xref:System.Windows.ContentElement> 재정의 하 여 <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1607">You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="7d306-1608">또는 특정 마우스 상태를 처리 하는 이벤트를 변경 하려면이 메서드를 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1608">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="7d306-1609">기본 구현을 호출 것인지 여부는 시나리오에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1609">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="7d306-1610">해당 마우스 이벤트를 호출 해야 하는 상위 클래스에 대 한 기본 입력된 처리 사용 하지 않도록 설정 기본 호출 하지 못하면 <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1610">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A>.</span></span> <span data-ttu-id="7d306-1611">예를 들어에서 파생할 수 있습니다 <xref:System.Windows.Controls.Control> 시키고 <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A> 기반의 호출 하지 않고 파생된 클래스에서 단,이 재정의 사용 하지 않도록 설정 상황에 맞는 메뉴의 서비스를 컨트롤에 속한의 <xref:System.Windows.Controls.Control> 기본 동작입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1611">For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1612">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1612">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="7d306-1613">이벤트 데이터는 마우스 오른쪽 단추를 놓았음을 보고합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1613">The event data reports that the right mouse button was released.</span></span></param>
        <summary><span data-ttu-id="7d306-1614">처리되지 않은 <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" /> 라우트된 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1614">Invoked when an unhandled <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1615">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1615">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1616"><xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> 터널링 경로 이동 하는 이벤트 보이지만 실제로 간접적인 방식에서으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1616">The <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="7d306-1617"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 이벤트는 라우팅, 터널 및 각 <xref:System.Windows.ContentElement> 이벤트에 따라 경로를 사용 하 여 동일한 처리 직접 라우트된 이벤트를 발생 시키는 <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1617"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>.</span></span> <span data-ttu-id="7d306-1618">사용 하기는 <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> 이 요소에 대 한 처리 이벤트를 처리 된 상태 이벤트 경로 따라 다른 요소에 적용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1618">Although you can mark the <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="7d306-1619">그러나 일반 인스턴스 처리기를 방지 하기 위해 처리 된 것으로 이벤트를 표시 수 있습니다 (지정 하지 않은 `handledEventsToo`)가 호출 되지.</span><span class="sxs-lookup"><span data-stu-id="7d306-1619">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="7d306-1620">일반 마우스 이벤트 처리에 대 한 기본 구현은 <xref:System.Windows.ContentElement> 수신 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 되 고 적절 한 로컬 이벤트로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1620">The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="7d306-1621">이 논리를 재정의 하려는 경우 파생된 클래스를 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1621">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="7d306-1622">파생된 클래스의 정적 생성자에서 등록에 대 한 대체 클래스 처리기 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1622">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7d306-1623">마우스 처리 동작을 변경할 수 없습니다 <xref:System.Windows.ContentElement> 재정의 하 여 <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1623">You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1624">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1624">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="7d306-1625">이벤트 데이터는 하나 이상의 마우스 단추를 놓았음을 보고합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1625">The event data reports that one or more mouse buttons were released.</span></span></param>
        <summary><span data-ttu-id="7d306-1626">처리되지 않은 <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1626">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1627">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1627">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1628">마우스 단추 작업 전용된 입력된 관리자에서 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1628">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="7d306-1629">바인딩, 명령 및 입력과 같은 마우스 단추 작업을 사용 하는 다른 프로그래밍 기능 일반 마우스 단추 작업으로 노출 되기 전에 작업에 대 한 처리기를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1629">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="7d306-1630">이러한 시스템 기능 표시를 입력 합니다 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 이벤트를 처리 <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A> 호출 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1630">If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event as handled, <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="7d306-1631">다음 이벤트 영향 처리 이벤트를 표시 하려면이 클래스 처리기를 사용 하는 경우: <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> 고 <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1631">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>.</span></span> <span data-ttu-id="7d306-1632">이러한 이벤트 중 하나가 받는 요소에서 발생할 수 있습니다 때 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1632">Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="7d306-1633">이 이벤트를 처리 하는 클래스에서 처리를 표시 하는 경우 하위 이벤트는 여전히 발생 합니다. 그러나 이벤트 데이터의 처리 상태를 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1633">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="7d306-1634">명시적으로 사용 하지 않는 한 하위 이벤트에 대 한 인스턴스 처리기 호출 되지 이벤트 클래스 처리에서 처리 되 면 <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 사용 하 여 `handledEventsToo` `true` 처리기를 연결 하기 위해.</span><span class="sxs-lookup"><span data-stu-id="7d306-1634">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="7d306-1635">클래스 처리기도 호출 되지 않으면 해당 클래스 처리기에 등록 된 합니다 <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 서명을 `handledEventsToo` `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1635">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="7d306-1636">처리 하 여 <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A>는 처리 하면 클래스 처리에 동작을 모든 가능한 마우스 단추입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1636">By handling <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions.</span></span> <span data-ttu-id="7d306-1637">이 동작은 원치 않을; 따라서이 가상 메서드를 사용 하 여 이벤트를 처리 됨으로 표시 하는 경우 주의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1637">This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="7d306-1638">각 단추 관련 직접 이벤트에는 가상 On \* 메서드 여부를 이러한 단추 관련 클래스 처리기를 재정의 더 적합할 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1638">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="7d306-1639">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1639">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1640">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1640">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1641">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1641">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1642">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1642">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1643">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1643">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1644">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1644">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1645">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1645">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1646">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1646">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1647">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1647">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseWheel">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1648">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.MouseWheelEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1648">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1649">처리되지 않은 <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1649">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1650">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1650">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1651">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1651">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1652">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1652">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1653">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1653">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1654">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1654">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1655">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1655">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1656">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1656">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1657">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1657">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1658">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1658">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1659">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1659">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="7d306-1660">다른 시나리오는 미리 보기 이벤트는 일치 하는 버블링 클래스 처리기가 호출 되지 않습니다 있도록 처리 된 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1660">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="contentElement.OnPreviewQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1661">이벤트 데이터를 포함하는 <see cref="T:System.Windows.QueryContinueDragEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1661">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1662">처리되지 않은 <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1662">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1663">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1663">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1664">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1664">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1665">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1665">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1666">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1666">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1667">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1667">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1668">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1668">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1669">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1669">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1670">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1670">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1671">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1671">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1672">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1672">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="7d306-1673">다른 시나리오는 미리 보기 이벤트는 일치 하는 버블링 클래스 처리기가 호출 되지 않습니다 있도록 처리 된 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1673">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewQueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1674">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusButtonEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1674">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1675">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1675">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1676">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1676">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1677">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1677">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1678">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1678">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1679">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1679">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1680">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1680">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1681">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1681">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1682">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1682">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1683">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1683">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1684">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1684">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1685">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1685">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="7d306-1686">다른 시나리오는 미리 보기 이벤트는 일치 하는 버블링 클래스 처리기가 호출 되지 않습니다 있도록 처리 된 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1686">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1687">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusButtonEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1687">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1688">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1688">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1689">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1689">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1690">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1690">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1691">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1691">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1692">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1692">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1693">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1693">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1694">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1694">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1695">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1695">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1696">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1696">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1697">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1697">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1698">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1698">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="7d306-1699">다른 시나리오는 미리 보기 이벤트는 일치 하는 버블링 클래스 처리기가 호출 되지 않습니다 있도록 처리 된 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1699">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1700">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusDownEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1700">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1701">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1701">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1702">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1702">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1703">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1703">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1704">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1704">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1705">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1705">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1706">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1706">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1707">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1707">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1708">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1708">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1709">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1709">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1710">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1710">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1711">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1711">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="7d306-1712">다른 시나리오는 미리 보기 이벤트는 일치 하는 버블링 클래스 처리기가 호출 되지 않습니다 있도록 처리 된 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1712">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1713">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1713">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1714">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1714">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1715">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1715">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1716">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1716">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1717">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1717">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1718">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1718">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1719">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1719">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1720">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1720">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1721">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1721">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1722">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1722">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1723">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1723">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1724">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1724">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="7d306-1725">다른 시나리오는 미리 보기 이벤트는 일치 하는 버블링 클래스 처리기가 호출 되지 않습니다 있도록 처리 된 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1725">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1726">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1726">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1727">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1727">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1728">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1728">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1729">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1729">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1730">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1730">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1731">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1731">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1732">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1732">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1733">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1733">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1734">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1734">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1735">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1735">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1736">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1736">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1737">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1737">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="7d306-1738">다른 시나리오는 미리 보기 이벤트는 일치 하는 버블링 클래스 처리기가 호출 되지 않습니다 있도록 처리 된 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1738">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1739">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1739">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1740">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1740">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1741">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1741">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1742">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1742">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1743">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1743">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1744">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1744">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1745">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1745">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1746">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1746">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1747">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1747">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1748">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1748">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1749">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1749">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1750">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1750">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="7d306-1751">다른 시나리오는 미리 보기 이벤트는 일치 하는 버블링 클래스 처리기가 호출 되지 않습니다 있도록 처리 된 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1751">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1752">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1752">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1753">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1753">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1754">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1754">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1755">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1755">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1756">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1756">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1757">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1757">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1758">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1758">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1759">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1759">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1760">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1760">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1761">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1761">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1762">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1762">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1763">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1763">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="7d306-1764">다른 시나리오는 미리 보기 이벤트는 일치 하는 버블링 클래스 처리기가 호출 되지 않습니다 있도록 처리 된 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1764">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1765">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1765">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1766">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1766">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1767">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1767">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1768">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1768">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1769">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1769">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1770">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1770">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1771">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1771">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1772">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1772">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1773">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1773">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1774">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1774">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1775">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1775">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1776">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1776">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="7d306-1777">다른 시나리오는 미리 보기 이벤트는 일치 하는 버블링 클래스 처리기가 호출 되지 않습니다 있도록 처리 된 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1777">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1778">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1778">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1779">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1779">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1780">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1780">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1781">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1781">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1782">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1782">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1783">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1783">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1784">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1784">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1785">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1785">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1786">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1786">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1787">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1787">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1788">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1788">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1789">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1789">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="7d306-1790">다른 시나리오는 미리 보기 이벤트는 일치 하는 버블링 클래스 처리기가 호출 되지 않습니다 있도록 처리 된 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1790">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTextInput">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="contentElement.OnPreviewTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1791">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TextCompositionEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1791">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1792">처리되지 않은 <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1792">Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1793">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1793">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1794">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1794">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1795">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1795">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1796">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1796">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1797">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1797">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1798">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1798">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1799">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1799">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1800">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1800">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1801">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1801">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1802">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1802">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="7d306-1803">다른 시나리오는 미리 보기 이벤트는 일치 하는 버블링 클래스 처리기가 호출 되지 않습니다 있도록 처리 된 것으로 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1803">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
        <altmember cref="E:System.Windows.ContentElement.PreviewTextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnPreviewTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1804">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TouchEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1804">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1805">터치가 이 요소를 누를 때 발생하는 <see cref="E:System.Windows.ContentElement.PreviewTouchDown" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1805">Provides class handling for the <see cref="E:System.Windows.ContentElement.PreviewTouchDown" /> routed event that occurs when a touch presses this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1806"><xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1806">The <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> method has no default implementation.</span></span> <span data-ttu-id="7d306-1807">재정의 <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> 처리 하는 파생된 클래스에는 <xref:System.Windows.ContentElement.PreviewTouchDown> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1807">Override <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> in a derived class to handle the <xref:System.Windows.ContentElement.PreviewTouchDown> event.</span></span> <span data-ttu-id="7d306-1808">기본 클래스를 호출 해야 <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> 메서드는 기본 클래스 이벤트를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1808">Be sure to call the base class' <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnPreviewTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1809">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TouchEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1809">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1810">이 요소 내부에 있는 동안 터치가 이동할 때 발생하는 <see cref="E:System.Windows.ContentElement.PreviewTouchMove" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1810">Provides class handling for the <see cref="E:System.Windows.ContentElement.PreviewTouchMove" /> routed event that occurs when a touch moves while inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1811"><xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1811">The <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> method has no default implementation.</span></span> <span data-ttu-id="7d306-1812">재정의 <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> 처리 하는 파생된 클래스에는 <xref:System.Windows.ContentElement.PreviewTouchMove> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1812">Override <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> in a derived class to handle the <xref:System.Windows.ContentElement.PreviewTouchMove> event.</span></span> <span data-ttu-id="7d306-1813">기본 클래스를 호출 해야 <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> 메서드는 기본 클래스 이벤트를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1813">Be sure to call the base class' <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnPreviewTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1814">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TouchEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1814">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1815">이 요소 내에서 터치를 해제할 때 발생하는 <see cref="E:System.Windows.ContentElement.PreviewTouchUp" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1815">Provides class handling for the <see cref="E:System.Windows.ContentElement.PreviewTouchUp" /> routed event that occurs when a touch is released inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1816"><xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1816">The <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> method has no default implementation.</span></span> <span data-ttu-id="7d306-1817">재정의 <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> 처리 하는 파생된 클래스에는 <xref:System.Windows.ContentElement.PreviewTouchUp> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1817">Override <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> in a derived class to handle the <xref:System.Windows.ContentElement.PreviewTouchUp> event.</span></span> <span data-ttu-id="7d306-1818">기본 클래스를 호출 해야 <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> 메서드는 기본 클래스 이벤트를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1818">Be sure to call the base class' <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected internal virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="contentElement.OnQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1819">이벤트 데이터를 포함하는 <see cref="T:System.Windows.QueryContinueDragEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1819">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1820">처리되지 않은 <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1820">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1821">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1821">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1822">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1822">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1823">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1823">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1824">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1824">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1825">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1825">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1826">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1826">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1827">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1827">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1828">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1828">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1829">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1829">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1830">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1830">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.QueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnQueryCursor">
      <MemberSignature Language="C#" Value="protected internal virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnQueryCursor(class System.Windows.Input.QueryCursorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnQueryCursor (e As QueryCursorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnQueryCursor(System::Windows::Input::QueryCursorEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit&#xA;override this.OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit" Usage="contentElement.OnQueryCursor e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.QueryCursorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1831">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.QueryCursorEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1831">The <see cref="T:System.Windows.Input.QueryCursorEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1832">처리되지 않은 <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1832">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1833">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1833">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1834">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1834">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1835">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1835">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1836">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1836">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1837">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1837">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1838">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1838">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1839">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1839">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1840">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1840">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1841">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1841">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1842">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1842">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.QueryCursor" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="contentElement.OnStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1843">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusButtonEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1843">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1844">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1844">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1845">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1845">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1846">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1846">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1847">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1847">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1848">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1848">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1849">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1849">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1850">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1850">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1851">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1851">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1852">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1852">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1853">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1853">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1854">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1854">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="contentElement.OnStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1855">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusButtonEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1855">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1856">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1856">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1857">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1857">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1858">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1858">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1859">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1859">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1860">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1860">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1861">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1861">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1862">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1862">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1863">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1863">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1864">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1864">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1865">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1865">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1866">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1866">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="contentElement.OnStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1867">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusDownEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1867">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1868">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusDown" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1868">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1869">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1869">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1870">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1870">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1871">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1871">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1872">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1872">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1873">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1873">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1874">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1874">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1875">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1875">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1876">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1876">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1877">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1877">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1878">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1878">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusEnter(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusEnter (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusEnter(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1879">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1879">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1880">이 요소에 의해 처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> 연결된 이벤트가 발생할 때 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1880">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> attached event is raised by this element.</span></span> <span data-ttu-id="7d306-1881">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1881">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1882">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1882">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1883">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1883">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="7d306-1884">호출할 수 있습니다 기본 앞 이나 뒤에 특수 한 처리 요구 사항에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1884">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="7d306-1885">이 메서드의 용도 비슷합니다 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1885">The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1886">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1886">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1887">이벤트를 처리 됨으로 표시 하는 것은 일반적인 인스턴스 처리기를 방지 하는 데 유용 하지만 (지정 하지 않는 `handledEventsToo`)가 호출 되지 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1887">Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInAirMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1888">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1888">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1889">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1889">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1890">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1890">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1891">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1891">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1892">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1892">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1893">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1893">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1894">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1894">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1895">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1895">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1896">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1896">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1897">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1897">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1898">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1898">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1899">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1899">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1900">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1900">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1901">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1901">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1902">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1902">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1903">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1903">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1904">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1904">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1905">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1905">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1906">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1906">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1907">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1907">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1908">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1908">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1909">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1909">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1910">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1910">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1911">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1911">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusLeave(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusLeave (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusLeave(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1912">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1912">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1913">이 요소에 의해 처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> 연결된 이벤트가 발생할 때 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1913">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> attached event is raised by this element.</span></span> <span data-ttu-id="7d306-1914">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1914">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1915">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1915">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1916">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1916">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="7d306-1917">호출할 수 있습니다 기본 앞 이나 뒤에 특수 한 처리 요구 사항에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1917">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="7d306-1918">이 메서드의 용도 비슷합니다 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1918">The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1919">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1919">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1920">이벤트를 처리 됨으로 표시 하는 것은 일반적인 인스턴스 처리기를 방지 하는 데 유용 하지만 (지정 하지 않는 `handledEventsToo`)가 호출 되지 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1920">Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1921">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1921">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1922">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusMove" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1922">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1923">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1923">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1924">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1924">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1925">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1925">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1926">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1926">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1927">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1927">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1928">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1928">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1929">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1929">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1930">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1930">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1931">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1931">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1932">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1932">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1933">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1933">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1934">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1934">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1935">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1935">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1936">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1936">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1937">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1937">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1938">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1938">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1939">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1939">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1940">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1940">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1941">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1941">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1942">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1942">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1943">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1943">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1944">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1944">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="contentElement.OnStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1945">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1945">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1946">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1946">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1947">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1947">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1948">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1948">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1949">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1949">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1950">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1950">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1951">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1951">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1952">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1952">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1953">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1953">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1954">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1954">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1955">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1955">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1956">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1956">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1957">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.StylusEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1957">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1958">처리되지 않은 <see cref="E:System.Windows.Input.Stylus.StylusUp" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1958">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1959">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1959">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1960">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1960">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1961">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1961">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1962">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1962">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1963">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1963">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1964">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1964">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1965">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1965">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1966">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1966">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1967">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1967">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1968">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1968">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnTextInput">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="contentElement.OnTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1969">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TextCompositionEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1969">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1970">처리되지 않은 <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> 연결 이벤트가 해당 경로에서 이 클래스로부터 파생된 요소에 도달할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1970">Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="7d306-1971">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1971">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1972">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1972">This method has no default implementation.</span></span> <span data-ttu-id="7d306-1973">상속의 중간 클래스는이 메서드를 구현할 수 있으므로 구현에서 기본 구현을 호출 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1973">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="7d306-1974">이 메서드의 용도 비슷합니다는 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드:이 메서드는 인스턴스 처리기 대신 클래스 처리기를 설정 하 여 파생된 클래스에서 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1974">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="7d306-1975">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1975">In this case the matching event is a routed event.</span></span> <span data-ttu-id="7d306-1976">On \* 메서드의 구현 패턴 라우트된 이벤트에 대 한 다른 이므로 처리기를 호출 하는 요소가 아닌 자식 요소를 통해 라우트된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1976">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="7d306-1977">따라서 이벤트 데이터의 원본 속성을 확인 하려면 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1977">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="7d306-1978">대부분의 이벤트를 다시 발생 시키면 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1978">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="7d306-1979">이 메서드를 재정의 하거나 등록 하 여 클래스 처리기 <xref:System.Windows.EventManager.RegisterClassHandler%2A>의 파생 클래스인 <xref:System.Windows.ContentElement> 이벤트 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1979">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="7d306-1980">클래스 처리 적합 한 시나리오는 이벤트 데이터를 조작 하 고 처리 된 것으로 라우트된 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1980">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.TextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnTouchDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1981">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TouchEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1981">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1982">터치가 이 요소 내부를 누를 때 발생하는 <see cref="E:System.Windows.ContentElement.TouchDown" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1982">Provides class handling for the <see cref="E:System.Windows.ContentElement.TouchDown" /> routed event that occurs when a touch presses inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1983"><xref:System.Windows.ContentElement.OnTouchDown%2A> 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1983">The <xref:System.Windows.ContentElement.OnTouchDown%2A> method has no default implementation.</span></span> <span data-ttu-id="7d306-1984">재정의 <xref:System.Windows.ContentElement.OnTouchDown%2A> 처리 하는 파생된 클래스에는 <xref:System.Windows.ContentElement.TouchDown> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1984">Override <xref:System.Windows.ContentElement.OnTouchDown%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchDown> event.</span></span> <span data-ttu-id="7d306-1985">기본 클래스를 호출 해야 <xref:System.Windows.ContentElement.OnTouchDown%2A> 메서드는 기본 클래스 이벤트를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1985">Be sure to call the base class' <xref:System.Windows.ContentElement.OnTouchDown%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchEnter(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchEnter (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchEnter(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnTouchEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1986">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TouchEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1986">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1987">터치가 이 요소의 경계 외부에서 내부로 이동할 때 발생하는 <see cref="E:System.Windows.ContentElement.TouchEnter" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1987">Provides class handling for the <see cref="E:System.Windows.ContentElement.TouchEnter" /> routed event that occurs when a touch moves from outside to inside the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1988"><xref:System.Windows.ContentElement.OnTouchEnter%2A> 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1988">The <xref:System.Windows.ContentElement.OnTouchEnter%2A> method has no default implementation.</span></span> <span data-ttu-id="7d306-1989">재정의 <xref:System.Windows.ContentElement.OnTouchEnter%2A> 처리 하는 파생된 클래스에는 <xref:System.Windows.ContentElement.TouchEnter> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1989">Override <xref:System.Windows.ContentElement.OnTouchEnter%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchEnter> event.</span></span> <span data-ttu-id="7d306-1990">기본 클래스를 호출 해야 <xref:System.Windows.ContentElement.OnTouchEnter%2A> 메서드는 기본 클래스 이벤트를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1990">Be sure to call the base class' <xref:System.Windows.ContentElement.OnTouchEnter%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchLeave(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchLeave (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchLeave(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnTouchLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1991">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TouchEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1991">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1992">터치가 이 요소의 경계 내부에서 외부로 이동할 때 발생하는 <see cref="E:System.Windows.ContentElement.TouchLeave" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1992">Provides class handling for the <see cref="E:System.Windows.ContentElement.TouchLeave" /> routed event that occurs when a touch moves from inside to outside the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1993"><xref:System.Windows.ContentElement.OnTouchLeave%2A> 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1993">The <xref:System.Windows.ContentElement.OnTouchLeave%2A> method has no default implementation.</span></span> <span data-ttu-id="7d306-1994">재정의 <xref:System.Windows.ContentElement.OnTouchLeave%2A> 처리 하는 파생된 클래스에는 <xref:System.Windows.ContentElement.TouchLeave> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1994">Override <xref:System.Windows.ContentElement.OnTouchLeave%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchLeave> event.</span></span> <span data-ttu-id="7d306-1995">기본 클래스를 호출 해야 <xref:System.Windows.ContentElement.OnTouchLeave%2A> 메서드는 기본 클래스 이벤트를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1995">Be sure to call the base class' <xref:System.Windows.ContentElement.OnTouchLeave%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-1996">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TouchEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1996">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-1997">이 요소 내부에 있는 동안 터치가 이동할 때 발생하는 <see cref="E:System.Windows.ContentElement.TouchMove" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1997">Provides class handling for the <see cref="E:System.Windows.ContentElement.TouchMove" /> routed event that occurs when a touch moves while inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-1998"><xref:System.Windows.ContentElement.OnTouchMove%2A> 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1998">The <xref:System.Windows.ContentElement.OnTouchMove%2A> method has no default implementation.</span></span> <span data-ttu-id="7d306-1999">재정의 <xref:System.Windows.ContentElement.OnTouchMove%2A> 처리 하는 파생된 클래스에는 <xref:System.Windows.ContentElement.TouchMove> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-1999">Override <xref:System.Windows.ContentElement.OnTouchMove%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchMove> event.</span></span> <span data-ttu-id="7d306-2000">기본 클래스를 호출 해야 <xref:System.Windows.ContentElement.OnTouchMove%2A> 메서드는 기본 클래스 이벤트를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2000">Be sure to call the base class' <xref:System.Windows.ContentElement.OnTouchMove%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-2001">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Input.TouchEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2001">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7d306-2002">이 요소 내에서 터치를 해제할 때 발생하는 <see cref="E:System.Windows.ContentElement.TouchUp" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2002">Provides class handling for the <see cref="E:System.Windows.ContentElement.TouchUp" /> routed event that occurs when a touch is released inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2003"><xref:System.Windows.ContentElement.OnTouchUp%2A> 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2003">The <xref:System.Windows.ContentElement.OnTouchUp%2A> method has no default implementation.</span></span> <span data-ttu-id="7d306-2004">재정의 <xref:System.Windows.ContentElement.OnTouchUp%2A> 처리 하는 파생된 클래스에는 <xref:System.Windows.ContentElement.TouchUp> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2004">Override <xref:System.Windows.ContentElement.OnTouchUp%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchUp> event.</span></span> <span data-ttu-id="7d306-2005">기본 클래스를 호출 해야 <xref:System.Windows.ContentElement.OnTouchUp%2A> 메서드는 기본 클래스 이벤트를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2005">Be sure to call the base class' <xref:System.Windows.ContentElement.OnTouchUp%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberSignature Language="F#" Value="abstract member PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject&#xA;override this.PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject" Usage="contentElement.PredictFocus direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction"><span data-ttu-id="7d306-2006">요청된 포커스 이동 방향입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2006">The direction of the requested focus traversal.</span></span></param>
        <summary><span data-ttu-id="7d306-2007">파생 클래스에서 재정의되는 경우 지정된 포커스 이동 방향에 대해 포커스를 받는 요소를 반환하며 실제로 해당 요소로 포커스를 이동하지는 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2007">When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.</span></span></summary>
        <returns><span data-ttu-id="7d306-2008"><see cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />가 실제로 호출된 경우에 포커스를 받는 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2008">The element that would have received focus if <see cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> were actually invoked.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2009">이 클래스에서이 메서드의 기본 구현은 완전 하지 않으며 항상 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2009">The default implementation of this method in this class is incomplete and always returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewDragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragEnter;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragEnter : System.Windows.DragEventHandler " Usage="member this.PreviewDragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2010">입력 시스템에서 이 요소를 끌기 대상으로 사용하는 기본 끌기 이벤트를 보고하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2010">Occurs when the input system reports an underlying drag event with this element as the drag target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2011">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.PreviewDragEnter> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2011">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewDragEnter> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2012">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.PreviewDragEnter> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2012">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewDragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewDragEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2013">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2013">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2014">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2014">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewDragEnterEvent>|  
|<span data-ttu-id="7d306-2015">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2015">Routing strategy</span></span>|<span data-ttu-id="7d306-2016">터널링</span><span class="sxs-lookup"><span data-stu-id="7d306-2016">Tunneling</span></span>|  
|<span data-ttu-id="7d306-2017">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2017">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="7d306-2018">해당 버블링 이벤트가 <xref:System.Windows.ContentElement.DragEnter>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2018">The corresponding bubbling event is <xref:System.Windows.ContentElement.DragEnter>.</span></span>  
  
-   <span data-ttu-id="7d306-2019">재정의 <xref:System.Windows.ContentElement.OnPreviewDragEnter%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2019">Override <xref:System.Windows.ContentElement.OnPreviewDragEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewDragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewDragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2020"><see cref="E:System.Windows.ContentElement.PreviewDragEnter" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2020">Identifies the <see cref="E:System.Windows.ContentElement.PreviewDragEnter" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2021">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2021">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2022">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2022">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2023">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2023">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2024">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2024">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2025">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2025">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewDragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragLeave;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragLeave : System.Windows.DragEventHandler " Usage="member this.PreviewDragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2026">입력 시스템에서 이 요소를 끌기 원본으로 사용하는 기본 끌기 이벤트를 보고하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2026">Occurs when the input system reports an underlying drag event with this element as the drag origin.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2027">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.PreviewDragLeave> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2027">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewDragLeave> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2028">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.PreviewDragLeave> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2028">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewDragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewDragLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2029">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2029">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2030">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2030">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewDragLeaveEvent>|  
|<span data-ttu-id="7d306-2031">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2031">Routing strategy</span></span>|<span data-ttu-id="7d306-2032">터널링</span><span class="sxs-lookup"><span data-stu-id="7d306-2032">Tunneling</span></span>|  
|<span data-ttu-id="7d306-2033">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2033">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="7d306-2034">해당 버블링 이벤트가 <xref:System.Windows.ContentElement.DragLeave>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2034">The corresponding bubbling event is <xref:System.Windows.ContentElement.DragLeave>.</span></span>  
  
-   <span data-ttu-id="7d306-2035">재정의 <xref:System.Windows.ContentElement.OnPreviewDragLeave%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2035">Override <xref:System.Windows.ContentElement.OnPreviewDragLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewDragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewDragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2036"><see cref="E:System.Windows.ContentElement.PreviewDragLeave" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2036">Identifies the <see cref="E:System.Windows.ContentElement.PreviewDragLeave" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2037">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2037">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2038">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2038">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2039">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2039">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2040">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2040">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2041">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2041">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewDragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragOver;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragOver : System.Windows.DragEventHandler " Usage="member this.PreviewDragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2042">입력 시스템에서 이 요소를 잠재적인 놓기 대상으로 사용하는 기본 끌기 이벤트를 보고하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2042">Occurs when the input system reports an underlying drag event with this element as the potential drop target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2043">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.PreviewDragOver> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2043">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewDragOver> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2044">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.PreviewDragOver> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2044">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewDragOver> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewDragOver"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2045">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2045">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2046">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2046">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewDragOverEvent>|  
|<span data-ttu-id="7d306-2047">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2047">Routing strategy</span></span>|<span data-ttu-id="7d306-2048">터널링</span><span class="sxs-lookup"><span data-stu-id="7d306-2048">Tunneling</span></span>|  
|<span data-ttu-id="7d306-2049">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2049">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="7d306-2050">해당 버블링 이벤트가 <xref:System.Windows.ContentElement.DragOver>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2050">The corresponding bubbling event is <xref:System.Windows.ContentElement.DragOver>.</span></span>  
  
-   <span data-ttu-id="7d306-2051">재정의 <xref:System.Windows.ContentElement.OnPreviewDragOver%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2051">Override <xref:System.Windows.ContentElement.OnPreviewDragOver%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewDragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewDragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2052"><see cref="E:System.Windows.ContentElement.PreviewDragOver" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2052">Identifies the <see cref="E:System.Windows.ContentElement.PreviewDragOver" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2053">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2053">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2054">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2054">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2055">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2055">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2056">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2056">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2057">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2057">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewDrop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDrop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDrop;" />
      <MemberSignature Language="F#" Value="member this.PreviewDrop : System.Windows.DragEventHandler " Usage="member this.PreviewDrop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2058">입력 시스템에서 이 요소를 놓기 대상으로 사용하는 기본 놓기 이벤트를 보고하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2058">Occurs when the input system reports an underlying drop event with this element as the drop target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2059">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.PreviewDrop> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2059">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewDrop> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2060">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.PreviewDrop> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2060">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewDrop> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewDrop"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2061">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2061">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2062">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2062">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewDropEvent>|  
|<span data-ttu-id="7d306-2063">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2063">Routing strategy</span></span>|<span data-ttu-id="7d306-2064">터널링</span><span class="sxs-lookup"><span data-stu-id="7d306-2064">Tunneling</span></span>|  
|<span data-ttu-id="7d306-2065">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2065">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="7d306-2066">해당 버블링 이벤트가 <xref:System.Windows.ContentElement.Drop>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2066">The corresponding bubbling event is <xref:System.Windows.ContentElement.Drop>.</span></span>  
  
-   <span data-ttu-id="7d306-2067">재정의 <xref:System.Windows.ContentElement.OnPreviewDrop%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2067">Override <xref:System.Windows.ContentElement.OnPreviewDrop%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewDropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDropEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewDropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2068"><see cref="E:System.Windows.ContentElement.PreviewDrop" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2068">Identifies the <see cref="E:System.Windows.ContentElement.PreviewDrop" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2069">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2069">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2070">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2070">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2071">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2071">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2072">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2072">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2073">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2073">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewGiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ PreviewGiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2074">끌어서 놓기 작업이 시작되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2074">Occurs when a drag-and-drop operation is started.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2075"><xref:System.Windows.ContentElement.PreviewGiveFeedback> 이벤트를 사용 하면 끌어서 놓기 작업 중 사용자의 시각적 피드백을 제공 하기 위해 마우스 포인터의 모양을 수정 하는 끌기 이벤트의 소스입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2075">The <xref:System.Windows.ContentElement.PreviewGiveFeedback> event enables the source of a drag event to modify the appearance of the mouse pointer, in order to give the user visual feedback during a drag-and-drop operation.</span></span>  
  
 <span data-ttu-id="7d306-2076">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.PreviewGiveFeedback> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2076">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewGiveFeedback> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2077">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.PreviewGiveFeedback> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2077">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewGiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewGiveFeedback"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2078">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2078">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2079">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2079">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewGiveFeedbackEvent>|  
|<span data-ttu-id="7d306-2080">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2080">Routing strategy</span></span>|<span data-ttu-id="7d306-2081">터널링</span><span class="sxs-lookup"><span data-stu-id="7d306-2081">Tunneling</span></span>|  
|<span data-ttu-id="7d306-2082">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2082">Delegate</span></span>|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   <span data-ttu-id="7d306-2083">해당 버블링 이벤트가 <xref:System.Windows.ContentElement.GiveFeedback>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2083">The corresponding bubbling event is <xref:System.Windows.ContentElement.GiveFeedback>.</span></span>  
  
-   <span data-ttu-id="7d306-2084">재정의 <xref:System.Windows.ContentElement.OnPreviewGiveFeedback%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2084">Override <xref:System.Windows.ContentElement.OnPreviewGiveFeedback%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewGiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewGiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2085"><see cref="E:System.Windows.ContentElement.PreviewGiveFeedback" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2085">Identifies the <see cref="E:System.Windows.ContentElement.PreviewGiveFeedback" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2086">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2086">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2087">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2087">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2088">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2088">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2089">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2089">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2090">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2090">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewGotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewGotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2091">이 요소에 키보드 포커스가 있으면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2091">Occurs when the keyboard is focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2092">이 이벤트는 라우팅 터널링을 사용 하므로 포커스가 있는 요소 이벤트 처리기가 실제로 연결 되어 있는 요소 대신 자식 요소를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2092">Because this event uses tunneling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="7d306-2093">확인 된 <xref:System.Windows.RoutedEventArgs.Source%2A> 실제 포커스가 있는 요소를 확인 하기 위해 이벤트 데이터의 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2093">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.</span></span>  
  
 <span data-ttu-id="7d306-2094">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2094">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2095">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2095">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewGotKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2096">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2096">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2097">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2097">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent>|  
|<span data-ttu-id="7d306-2098">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2098">Routing strategy</span></span>|<span data-ttu-id="7d306-2099">터널링</span><span class="sxs-lookup"><span data-stu-id="7d306-2099">Tunneling</span></span>|  
|<span data-ttu-id="7d306-2100">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2100">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="7d306-2101">해당 버블링 이벤트가 <xref:System.Windows.ContentElement.GotKeyboardFocus>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2101">The corresponding bubbling event is <xref:System.Windows.ContentElement.GotKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="7d306-2102">재정의 <xref:System.Windows.ContentElement.OnPreviewGotKeyboardFocus%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2102">Override <xref:System.Windows.ContentElement.OnPreviewGotKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewGotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2103"><see cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2103">Identifies the <see cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2104">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2104">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2105">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2105">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2106">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2106">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2107">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2107">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2108">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2108">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2109">이 요소에 키보드 포커스가 있는 동안 키를 누르면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2109">Occurs when a key is pressed while the keyboard is focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2110">키 처리 명령 및 텍스트 컴퍼지션 등의 기타 플랫폼 기능을 사용 하 여 상호 작용합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2110">Key handling interacts with other platform features such as commanding and text composition.</span></span> <span data-ttu-id="7d306-2111"><xref:System.Windows.ContentElement.KeyDown> 이벤트는 하위 수준의 텍스트 입력된 이벤트는 특정 컨트롤에 예상 대로 작동 하지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2111">The <xref:System.Windows.ContentElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls.</span></span> <span data-ttu-id="7d306-2112">일부 컨트롤에 컨트롤 합치기 또는 상위 버전의 텍스트를 제공 하는 클래스 처리 입력 처리 및 관련 이벤트 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2112">This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</span></span>  
  
 <span data-ttu-id="7d306-2113">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.PreviewKeyDown> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2113">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewKeyDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2114">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.PreviewKeyDown> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2114">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewKeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewKeyDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2115">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2115">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2116">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2116">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewKeyDownEvent>|  
|<span data-ttu-id="7d306-2117">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2117">Routing strategy</span></span>|<span data-ttu-id="7d306-2118">터널링</span><span class="sxs-lookup"><span data-stu-id="7d306-2118">Tunneling</span></span>|  
|<span data-ttu-id="7d306-2119">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2119">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="7d306-2120">해당 버블링 이벤트가 <xref:System.Windows.ContentElement.KeyDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2120">The corresponding bubbling event is <xref:System.Windows.ContentElement.KeyDown>.</span></span>  
  
-   <span data-ttu-id="7d306-2121">재정의 <xref:System.Windows.ContentElement.OnPreviewKeyDown%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2121">Override <xref:System.Windows.ContentElement.OnPreviewKeyDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewKeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewKeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2122"><see cref="E:System.Windows.ContentElement.PreviewKeyDown" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2122">Identifies the <see cref="E:System.Windows.ContentElement.PreviewKeyDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2123">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2123">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2124">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2124">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2125">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2125">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2126">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2126">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2127">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2127">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewKeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2128">이 요소에 키보드 포커스가 있는 동안 키를 놓으면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2128">Occurs when a key is released while the keyboard is focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2129">키 처리 명령 및 텍스트 컴퍼지션 등의 기타 플랫폼 기능을 사용 하 여 상호 작용합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2129">Key handling interacts with other platform features such as commanding and text composition.</span></span> <span data-ttu-id="7d306-2130"><xref:System.Windows.ContentElement.KeyUp> 이벤트는 하위 수준의 텍스트 입력된 이벤트는 특정 컨트롤에 예상 대로 작동 하지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2130">The <xref:System.Windows.ContentElement.KeyUp> event is a lower-level text input event that might not behave as expected on certain controls.</span></span> <span data-ttu-id="7d306-2131">일부 컨트롤에 컨트롤 합치기 또는 상위 버전의 텍스트를 제공 하는 클래스 처리 입력 처리 및 관련 이벤트 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2131">This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</span></span> <span data-ttu-id="7d306-2132">자세한 내용은 개별 컨트롤에 대 한 설명서를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2132">For details, check the documentation for individual controls.</span></span>  
  
 <span data-ttu-id="7d306-2133">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.PreviewKeyUp> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2133">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewKeyUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2134">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.PreviewKeyUp> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2134">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewKeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewKeyUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2135">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2135">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2136">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2136">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewKeyUpEvent>|  
|<span data-ttu-id="7d306-2137">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2137">Routing strategy</span></span>|<span data-ttu-id="7d306-2138">터널링</span><span class="sxs-lookup"><span data-stu-id="7d306-2138">Tunneling</span></span>|  
|<span data-ttu-id="7d306-2139">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2139">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="7d306-2140">해당 버블링 이벤트가 <xref:System.Windows.ContentElement.KeyUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2140">The corresponding bubbling event is <xref:System.Windows.ContentElement.KeyUp>.</span></span>  
  
-   <span data-ttu-id="7d306-2141">재정의 <xref:System.Windows.ContentElement.OnPreviewKeyUp%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2141">Override <xref:System.Windows.ContentElement.OnPreviewKeyUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewKeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewKeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2142"><see cref="E:System.Windows.ContentElement.PreviewKeyUp" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2142">Identifies the <see cref="E:System.Windows.ContentElement.PreviewKeyUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2143">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2143">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2144">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2144">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2145">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2145">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2146">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2146">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2147">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2147">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewLostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewLostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewLostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2148">이 요소에 더 이상 키보드 포커스가 없으면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2148">Occurs when the keyboard is no longer focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2149">이 이벤트는 라우팅 터널링을 사용 하므로 포커스가 있는 요소 이벤트 처리기가 실제로 연결 되어 있는 요소 대신 자식 요소를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2149">Because this event uses tunneling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="7d306-2150">확인 된 <xref:System.Windows.RoutedEventArgs.Source%2A> 포커스를 잃은 실제 요소를 확인 하기 위해 이벤트 데이터의 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2150">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="7d306-2151">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2151">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2152">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2152">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewLostKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2153">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2153">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2154">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2154">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent>|  
|<span data-ttu-id="7d306-2155">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2155">Routing strategy</span></span>|<span data-ttu-id="7d306-2156">터널링</span><span class="sxs-lookup"><span data-stu-id="7d306-2156">Tunneling</span></span>|  
|<span data-ttu-id="7d306-2157">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2157">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="7d306-2158">해당 버블링 이벤트가 <xref:System.Windows.ContentElement.LostKeyboardFocus>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2158">The corresponding bubbling event is <xref:System.Windows.ContentElement.LostKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="7d306-2159">재정의 <xref:System.Windows.ContentElement.OnPreviewLostKeyboardFocus%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2159">Override <xref:System.Windows.ContentElement.OnPreviewLostKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewLostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewLostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewLostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2160"><see cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2160">Identifies the <see cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2161">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2161">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2162">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2162">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2163">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2163">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2164">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2164">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2165">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2165">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2166">포인터가 이 요소 위에 있는 동안 마우스 단추를 누르면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2166">Occurs when any mouse button is pressed while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2167">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.PreviewMouseDown> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2167">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewMouseDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2168">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.PreviewMouseDown> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2168">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewMouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="7d306-2169">합니다 <xref:System.Windows.ContentElement.PreviewMouseDown> 이벤트와 함께 자주 발생 <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> 또는 <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>, 두 개의 표준 마우스 단추 중 하나를 누르는 것에 해당 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2169">The <xref:System.Windows.ContentElement.PreviewMouseDown> event is often raised together with either <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="7d306-2170"><xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> 및 <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> 라우트된 이벤트도 하지만 직접 라우트된 이벤트 이며 적절 한 단추 특정 이벤트가 발생할 때를 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 이벤트에 이벤트 경로 따라이 요소에 도달 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2170"><xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="7d306-2171">주의 참조 하십시오 <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> 또는 <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2171">See Remarks for <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2172">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2172">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2173">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2173">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewMouseDownEvent>|  
|<span data-ttu-id="7d306-2174">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2174">Routing strategy</span></span>|<span data-ttu-id="7d306-2175">터널링</span><span class="sxs-lookup"><span data-stu-id="7d306-2175">Tunneling</span></span>|  
|<span data-ttu-id="7d306-2176">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2176">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="7d306-2177">해당 버블링 이벤트가 <xref:System.Windows.ContentElement.MouseDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2177">The corresponding bubbling event is <xref:System.Windows.ContentElement.MouseDown>.</span></span>  
  
-   <span data-ttu-id="7d306-2178">재정의 <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2178">Override <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2179"><see cref="E:System.Windows.ContentElement.PreviewMouseDown" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2179">Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2180">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2180">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2181">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2181">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2182">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2182">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2183">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2183">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2184">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2184">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2185">마우스 포인터가 이 요소 위에 있는 동안 마우스 왼쪽 단추를 누르면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2185">Occurs when the left mouse button is pressed while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2186">하지만 이렇게 [라우트된 이벤트 개요](~/docs/framework/wpf/advanced/routed-events-overview.md) 요소 트리를 통해 터널링 경로 따르는 것 직접 라우트된 이벤트는 발생 하 고 각 요소 트리를 따라 보이지만 실제로 <xref:System.Windows.ContentElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2186">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.</span></span>  
  
 <span data-ttu-id="7d306-2187">이 이벤트를 사용 하 여 기본 마우스 단추 세부 정보를 보고 하는 몇 가지 관련된 이벤트 중 하나인 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 이벤트를 이벤트 경로 따라 각 요소에 의해 처리 되는 연결된 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2187">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="7d306-2188">기본 인수를 노출 하는이 이벤트의 인수 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2188">The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="7d306-2189">해당 이벤트는 이벤트 경로의 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 하지만 명시적으로 호출 하 여는 마우스 단추 관련 이벤트의 처리기를 추가 해야 <xref:System.Windows.ContentElement.AddHandler%2A>, 이벤트 수신기를 위해서는 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2189">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span>  
  
 <span data-ttu-id="7d306-2190">이 이벤트를 개념적으로 생각할 (및 다른 마우스 단추 이벤트에 <xref:System.Windows.ContentElement>) "서비스" 마우스를 (에서 제공 하는 서비스 정의 사용 하 여는 <xref:System.Windows.Input.Mouse> 클래스).</span><span class="sxs-lookup"><span data-stu-id="7d306-2190">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="7d306-2191">이벤트 데이터의 원래 마우스 이벤트는 마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽)을 확인할 필요가 없으므로 편리 하 게를 추가 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2191">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="7d306-2192">비표준 단추 상태에 대 한 검사와 같은 더 고급 시나리오에 사용 해야 합니다 [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] 에 <xref:System.Windows.Input.Mouse> 에 해당 하는 대신 클래스 <xref:System.Windows.ContentElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2192">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2193">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2193">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2194">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2194">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent>|  
|<span data-ttu-id="7d306-2195">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2195">Routing strategy</span></span>|<span data-ttu-id="7d306-2196">직접</span><span class="sxs-lookup"><span data-stu-id="7d306-2196">Direct</span></span>|  
|<span data-ttu-id="7d306-2197">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2197">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="7d306-2198">재정의 <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2198">Override <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2199"><see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2199">Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2200">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2200">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2201">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2201">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2202">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2202">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2203">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2203">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2204">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2204">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2205">마우스 포인터가 이 요소 위에 있는 동안 마우스 왼쪽 단추를 놓으면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2205">Occurs when the left mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2206">하지만 이렇게 [라우트된 이벤트 개요](~/docs/framework/wpf/advanced/routed-events-overview.md) 요소 트리를 통해 터널링 경로 따르는 것 직접 라우트된 이벤트는 발생 하 고 각 요소 트리를 따라 보이지만 실제로 <xref:System.Windows.ContentElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2206">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.</span></span>  
  
 <span data-ttu-id="7d306-2207">이 이벤트를 사용 하 여 기본 마우스 단추 세부 정보를 보고 하는 몇 가지 관련된 이벤트 중 하나인 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 이벤트를 이벤트 경로 따라 각 요소에 의해 처리 되는 연결된 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2207">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="7d306-2208">기본 인수를 노출 하는이 이벤트의 인수 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2208">The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="7d306-2209">해당 이벤트는 이벤트 경로의 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 하지만 명시적으로 호출 하 여는 마우스 단추 관련 이벤트의 처리기를 추가 해야 <xref:System.Windows.ContentElement.AddHandler%2A>, 이벤트 수신기를 위해서는 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2209">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span>  
  
 <span data-ttu-id="7d306-2210">이 이벤트를 개념적으로 생각할 (및 다른 마우스 단추 이벤트에 <xref:System.Windows.ContentElement>) "서비스" 마우스를 (에서 제공 하는 서비스 정의 사용 하 여는 <xref:System.Windows.Input.Mouse> 클래스).</span><span class="sxs-lookup"><span data-stu-id="7d306-2210">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="7d306-2211">이벤트 데이터의 원래 마우스 이벤트는 마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽)을 확인할 필요가 없으므로 편리 하 게를 추가 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2211">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="7d306-2212">비표준 단추 상태에 대 한 검사와 같은 더 고급 시나리오에 사용 해야 합니다 [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] 에 <xref:System.Windows.Input.Mouse> 에 해당 하는 대신 클래스 <xref:System.Windows.ContentElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2212">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2213">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2213">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2214">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2214">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent>|  
|<span data-ttu-id="7d306-2215">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2215">Routing strategy</span></span>|<span data-ttu-id="7d306-2216">직접</span><span class="sxs-lookup"><span data-stu-id="7d306-2216">Direct</span></span>|  
|<span data-ttu-id="7d306-2217">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2217">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="7d306-2218">재정의 <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2218">Override <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2219"><see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2219">Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2220">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2220">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2221">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2221">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2222">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2222">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2223">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2223">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2224">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2224">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler PreviewMouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler PreviewMouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ PreviewMouseMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2225">마우스 포인터가 이 요소 위에 있는 동안 마우스 포인터를 움직이면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2225">Occurs when the mouse pointer moves while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2226">마우스 포인터가 먼저 요소 범위 안으로 들어가면이 이벤트가 발생 모두도 경우 마우스 포인터를 이동 하면서 여전히 요소 경계 및 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2226">This event occurs both when the mouse pointer first enters into the element bounds, and also when the mouse pointer moves while still remaining within the element bounds.</span></span>  
  
 <span data-ttu-id="7d306-2227">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.PreviewMouseMove> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2227">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2228">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.PreviewMouseMove> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2228">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewMouseMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2229">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2229">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2230">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2230">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewMouseMoveEvent>|  
|<span data-ttu-id="7d306-2231">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2231">Routing strategy</span></span>|<span data-ttu-id="7d306-2232">터널링</span><span class="sxs-lookup"><span data-stu-id="7d306-2232">Tunneling</span></span>|  
|<span data-ttu-id="7d306-2233">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2233">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="7d306-2234">해당 버블링 이벤트가 <xref:System.Windows.ContentElement.MouseMove>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2234">The corresponding bubbling event is <xref:System.Windows.ContentElement.MouseMove>.</span></span>  
  
-   <span data-ttu-id="7d306-2235">재정의 <xref:System.Windows.ContentElement.OnPreviewMouseMove%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2235">Override <xref:System.Windows.ContentElement.OnPreviewMouseMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2236"><see cref="E:System.Windows.ContentElement.PreviewMouseMove" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2236">Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2237">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2237">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2238">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2238">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2239">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2239">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2240">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2240">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2241">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2241">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2242">마우스 포인터가 이 요소 위에 있는 동안 마우스 오른쪽 단추를 누르면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2242">Occurs when the right mouse button is pressed while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2243">하지만 이렇게 [라우트된 이벤트 개요](~/docs/framework/wpf/advanced/routed-events-overview.md) 요소 트리를 통해 터널링 경로 따르는 것 직접 라우트된 이벤트는 발생 하 고 각 요소 트리를 따라 보이지만 실제로 <xref:System.Windows.ContentElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2243">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.</span></span>  
  
 <span data-ttu-id="7d306-2244">이 이벤트를 사용 하 여 기본 마우스 단추 세부 정보를 보고 하는 몇 가지 관련된 이벤트 중 하나인 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 이벤트를 이벤트 경로 따라 각 요소에 의해 처리 되는 연결된 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2244">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="7d306-2245">기본 인수를 노출 하는이 이벤트의 인수 <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2245">The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="7d306-2246">해당 이벤트는 이벤트 경로의 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 하지만 명시적으로 호출 하 여는 마우스 단추 관련 이벤트의 처리기를 추가 해야 <xref:System.Windows.ContentElement.AddHandler%2A>, 이벤트 수신기를 위해서는 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2246">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span>  
  
 <span data-ttu-id="7d306-2247">이 이벤트를 개념적으로 생각할 (및 다른 마우스 단추 이벤트에 <xref:System.Windows.ContentElement>) "서비스" 마우스를 (에서 제공 하는 서비스 정의 사용 하 여는 <xref:System.Windows.Input.Mouse> 클래스).</span><span class="sxs-lookup"><span data-stu-id="7d306-2247">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="7d306-2248">이벤트 데이터의 원래 마우스 이벤트는 마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽)을 확인할 필요가 없으므로 편리 하 게를 추가 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2248">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="7d306-2249">비표준 단추 상태에 대 한 검사와 같은 더 고급 시나리오에 사용 해야 합니다 [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] 에 <xref:System.Windows.Input.Mouse> 에 해당 하는 대신 클래스 <xref:System.Windows.ContentElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2249">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseRightButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2250">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2250">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2251">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2251">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent>|  
|<span data-ttu-id="7d306-2252">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2252">Routing strategy</span></span>|<span data-ttu-id="7d306-2253">직접</span><span class="sxs-lookup"><span data-stu-id="7d306-2253">Direct</span></span>|  
|<span data-ttu-id="7d306-2254">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2254">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="7d306-2255">재정의 <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2255">Override <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2256"><see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2256">Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2257">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2257">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2258">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2258">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2259">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2259">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2260">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2260">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2261">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2261">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2262">마우스 포인터가 이 요소 위에 있는 동안 마우스 오른쪽 단추를 놓으면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2262">Occurs when the right mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2263">하지만 이렇게 [라우트된 이벤트 개요](~/docs/framework/wpf/advanced/routed-events-overview.md) 요소 트리를 통해 터널링 경로 따르는 것 직접 라우트된 이벤트는 발생 하 고 각 요소 트리를 따라 보이지만 실제로 <xref:System.Windows.ContentElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2263">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.</span></span>  
  
 <span data-ttu-id="7d306-2264">이 이벤트를 사용 하 여 기본 마우스 단추 세부 정보를 보고 하는 몇 가지 관련된 이벤트 중 하나인 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 이벤트를 이벤트 경로 따라 각 요소에 의해 처리 되는 연결된 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2264">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="7d306-2265">기본 인수를 노출 하는이 이벤트의 인수 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2265">The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="7d306-2266">해당 이벤트는 이벤트 경로의 처리 된 것으로 표시 된 경우는 마우스 단추 관련 이벤트는 여전히 발생 합니다. 하지만 명시적으로 호출 하 여는 마우스 단추 관련 이벤트의 처리기를 추가 해야 <xref:System.Windows.ContentElement.AddHandler%2A>, 이벤트 수신기를 위해서는 이미 처리 된 것으로 표시 된 이벤트를 처리 하는 옵션을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2266">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span>  
  
 <span data-ttu-id="7d306-2267">이 이벤트를 개념적으로 생각할 (및 다른 마우스 단추 이벤트에 <xref:System.Windows.ContentElement>) "서비스" 마우스를 (에서 제공 하는 서비스 정의 사용 하 여는 <xref:System.Windows.Input.Mouse> 클래스).</span><span class="sxs-lookup"><span data-stu-id="7d306-2267">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="7d306-2268">이벤트 데이터의 원래 마우스 이벤트는 마우스 단추 상태 (왼쪽-오른쪽, 위쪽 / 아래쪽)을 확인할 필요가 없으므로 편리 하 게를 추가 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2268">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="7d306-2269">비표준 단추 상태에 대 한 검사와 같은 더 고급 시나리오에 사용 해야 합니다 [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] 에 <xref:System.Windows.Input.Mouse> 에 해당 하는 대신 클래스 <xref:System.Windows.ContentElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2269">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseRightButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2270">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2270">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2271">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2271">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent>|  
|<span data-ttu-id="7d306-2272">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2272">Routing strategy</span></span>|<span data-ttu-id="7d306-2273">직접</span><span class="sxs-lookup"><span data-stu-id="7d306-2273">Direct</span></span>|  
|<span data-ttu-id="7d306-2274">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2274">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="7d306-2275">재정의 <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2275">Override <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2276"><see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2276">Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2277">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2277">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2278">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2278">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2279">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2279">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2280">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2280">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2281">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2281">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2282">마우스 포인터가 이 요소 위에 있는 동안 마우스 단추를 놓으면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2282">Occurs when any mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2283">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.PreviewMouseUp> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2283">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewMouseUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2284">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.PreviewMouseUp> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2284">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewMouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="7d306-2285">합니다 <xref:System.Windows.ContentElement.PreviewMouseUp> 이벤트와 함께 자주 발생 <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> 또는 <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>, 두 개의 표준 마우스 단추 중 하나를 누르는 것에 해당 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2285">The <xref:System.Windows.ContentElement.PreviewMouseUp> event is often raised together with either <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="7d306-2286"><xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> 및 <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> 라우트된 이벤트도 하지만 직접 라우트된 이벤트 이며 적절 한 단추 특정 이벤트가 발생할 때를 <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 이벤트에 이벤트 경로 따라이 요소에 도달 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2286"><xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="7d306-2287">주의 참조 하십시오 <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> 또는 <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2287">See Remarks for <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2288">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2288">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2289">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2289">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewMouseUpEvent>|  
|<span data-ttu-id="7d306-2290">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2290">Routing strategy</span></span>|<span data-ttu-id="7d306-2291">터널링</span><span class="sxs-lookup"><span data-stu-id="7d306-2291">Tunneling</span></span>|  
|<span data-ttu-id="7d306-2292">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2292">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="7d306-2293">해당 버블링 이벤트가 <xref:System.Windows.ContentElement.MouseUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2293">The corresponding bubbling event is <xref:System.Windows.ContentElement.MouseUp>.</span></span>  
  
-   <span data-ttu-id="7d306-2294">재정의 <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2294">Override <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2295"><see cref="E:System.Windows.ContentElement.PreviewMouseUp" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2295">Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2296">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2296">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2297">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2297">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2298">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2298">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2299">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2299">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2300">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2300">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ PreviewMouseWheel;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2301">마우스 포인터가 이 요소 위에 있는 동안 사용자가 마우스 휠을 굴리면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2301">Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2302">포커스 또는 마우스 캡처 우선; 마우스 포인터가 인 따라서 캡처된 또는 포커스가 있는 요소에서이 이벤트를 받을 경우 마우스 포인터를 다른 요소 보다 실제로 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2302">Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive this event from a focused or captured element, the mouse pointer might actually be over another element.</span></span>  
  
 <span data-ttu-id="7d306-2303">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.PreviewMouseMove> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2303">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2304">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.PreviewMouseMove> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2304">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewMouseWheel"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2305">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2305">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2306">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2306">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewMouseWheelEvent>|  
|<span data-ttu-id="7d306-2307">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2307">Routing strategy</span></span>|<span data-ttu-id="7d306-2308">터널링</span><span class="sxs-lookup"><span data-stu-id="7d306-2308">Tunneling</span></span>|  
|<span data-ttu-id="7d306-2309">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2309">Delegate</span></span>|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   <span data-ttu-id="7d306-2310">해당 버블링 이벤트가 <xref:System.Windows.ContentElement.MouseWheel>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2310">The corresponding bubbling event is <xref:System.Windows.ContentElement.MouseWheel>.</span></span>  
  
-   <span data-ttu-id="7d306-2311">재정의 <xref:System.Windows.ContentElement.OnPreviewMouseWheel%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2311">Override <xref:System.Windows.ContentElement.OnPreviewMouseWheel%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2312"><see cref="E:System.Windows.ContentElement.PreviewMouseWheel" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2312">Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseWheel" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2313">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2313">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2314">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2314">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2315">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2315">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2316">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2316">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2317">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2317">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewQueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewQueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ PreviewQueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2318">끌어서 놓기 작업 중 키보드 또는 마우스 단추 상태가 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2318">Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2319"><xref:System.Windows.ContentElement.PreviewQueryContinueDrag> 이벤트를 사용 하면 끌기 소스를 끌어서 놓기 작업을 취소 해야 하는지 여부를 선언 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2319">The <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> event enables the drag source to declare whether the drag-and-drop operation should be canceled.</span></span>  
  
 <span data-ttu-id="7d306-2320">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2320">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2321">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2321">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewQueryContinueDrag"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2322">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2322">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2323">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2323">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewQueryContinueDragEvent>|  
|<span data-ttu-id="7d306-2324">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2324">Routing strategy</span></span>|<span data-ttu-id="7d306-2325">터널링</span><span class="sxs-lookup"><span data-stu-id="7d306-2325">Tunneling</span></span>|  
|<span data-ttu-id="7d306-2326">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2326">Delegate</span></span>|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   <span data-ttu-id="7d306-2327">해당 버블링 이벤트가 <xref:System.Windows.ContentElement.QueryContinueDrag>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2327">The corresponding bubbling event is <xref:System.Windows.ContentElement.QueryContinueDrag>.</span></span>  
  
-   <span data-ttu-id="7d306-2328">재정의 <xref:System.Windows.ContentElement.OnPreviewQueryContinueDrag%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2328">Override <xref:System.Windows.ContentElement.OnPreviewQueryContinueDrag%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewQueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewQueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewQueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewQueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewQueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2329"><see cref="E:System.Windows.ContentElement.PreviewQueryContinueDrag" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2329">Identifies the <see cref="E:System.Windows.ContentElement.PreviewQueryContinueDrag" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2330">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2330">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2331">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2331">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2332">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2332">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2333">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2333">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2334">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2334">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2335">포인터가 이 요소 위에 있는 동안 스타일러스 단추를 누르면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2335">Occurs when the stylus button is pressed while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2336">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.PreviewStylusButtonDown> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2336">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusButtonDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2337">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.PreviewStylusButtonDown> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2337">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="7d306-2338">터치, 마우스 및 스타일러스 입력에 특정 관계에 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2338">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="7d306-2339">자세한 내용은 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2339">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2340">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2340">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2341">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2341">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewStylusButtonDownEvent>|  
|<span data-ttu-id="7d306-2342">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2342">Routing strategy</span></span>|<span data-ttu-id="7d306-2343">터널링</span><span class="sxs-lookup"><span data-stu-id="7d306-2343">Tunneling</span></span>|  
|<span data-ttu-id="7d306-2344">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2344">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="7d306-2345">해당 버블링 이벤트가 <xref:System.Windows.ContentElement.StylusButtonDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2345">The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusButtonDown>.</span></span>  
  
-   <span data-ttu-id="7d306-2346">재정의 <xref:System.Windows.ContentElement.OnPreviewStylusButtonDown%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2346">Override <xref:System.Windows.ContentElement.OnPreviewStylusButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2347"><see cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2347">Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2348">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2348">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2349">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2349">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2350">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2350">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2351">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2351">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2352">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2352">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2353">포인터가 이 요소 위에 있는 동안 스타일러스 단추를 놓으면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2353">Occurs when the stylus button is released while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2354">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.PreviewStylusButtonUp> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2354">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusButtonUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2355">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.PreviewStylusButtonUp> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2355">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="7d306-2356">터치, 마우스 및 스타일러스 입력에 특정 관계에 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2356">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="7d306-2357">자세한 내용은 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2357">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2358">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2358">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2359">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2359">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewStylusButtonUpEvent>|  
|<span data-ttu-id="7d306-2360">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2360">Routing strategy</span></span>|<span data-ttu-id="7d306-2361">터널링</span><span class="sxs-lookup"><span data-stu-id="7d306-2361">Tunneling</span></span>|  
|<span data-ttu-id="7d306-2362">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2362">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="7d306-2363">해당 버블링 이벤트가 <xref:System.Windows.ContentElement.StylusButtonUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2363">The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusButtonUp>.</span></span>  
  
-   <span data-ttu-id="7d306-2364">재정의 <xref:System.Windows.ContentElement.OnPreviewStylusButtonUp%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2364">Override <xref:System.Windows.ContentElement.OnPreviewStylusButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2365"><see cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2365">Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2366">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2366">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2367">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2367">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2368">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2368">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2369">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2369">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2370">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2370">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler PreviewStylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ PreviewStylusDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2371">이 요소 위에 있는 동안 스타일러스가 디지타이저를 건드리면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2371">Occurs when the stylus touches the digitizer while it is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2372">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.PreviewStylusDown> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2372">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2373">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.PreviewStylusDown> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2373">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="7d306-2374">터치, 마우스 및 스타일러스 입력에 특정 관계에 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2374">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="7d306-2375">자세한 내용은 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2375">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2376">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2376">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2377">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2377">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewStylusDownEvent>|  
|<span data-ttu-id="7d306-2378">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2378">Routing strategy</span></span>|<span data-ttu-id="7d306-2379">터널링</span><span class="sxs-lookup"><span data-stu-id="7d306-2379">Tunneling</span></span>|  
|<span data-ttu-id="7d306-2380">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2380">Delegate</span></span>|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   <span data-ttu-id="7d306-2381">해당 버블링 이벤트가 <xref:System.Windows.ContentElement.StylusDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2381">The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusDown>.</span></span>  
  
-   <span data-ttu-id="7d306-2382">재정의 <xref:System.Windows.ContentElement.OnPreviewStylusDown%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2382">Override <xref:System.Windows.ContentElement.OnPreviewStylusDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2383"><see cref="E:System.Windows.ContentElement.PreviewStylusDown" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2383">Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2384">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2384">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2385">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2385">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2386">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2386">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2387">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2387">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2388">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2388">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2389">스타일러스가 디지타이저를 실제로 건드리지 않고 요소 위로 움직이면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2389">Occurs when the stylus moves over an element without actually touching the digitizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2390">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.PreviewStylusInAirMove> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2390">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusInAirMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2391">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.PreviewStylusInAirMove> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2391">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="7d306-2392">터치, 마우스 및 스타일러스 입력에 특정 관계에 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2392">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="7d306-2393">자세한 내용은 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2393">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusInAirMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2394">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2394">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2395">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2395">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewStylusInAirMoveEvent>|  
|<span data-ttu-id="7d306-2396">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2396">Routing strategy</span></span>|<span data-ttu-id="7d306-2397">터널링</span><span class="sxs-lookup"><span data-stu-id="7d306-2397">Tunneling</span></span>|  
|<span data-ttu-id="7d306-2398">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2398">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="7d306-2399">해당 버블링 이벤트가 <xref:System.Windows.ContentElement.StylusInAirMove>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2399">The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusInAirMove>.</span></span>  
  
-   <span data-ttu-id="7d306-2400">재정의 <xref:System.Windows.ContentElement.OnPreviewStylusInAirMove%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2400">Override <xref:System.Windows.ContentElement.OnPreviewStylusInAirMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2401"><see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2401">Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2402">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2402">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2403">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2403">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2404">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2404">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2405">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2405">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2406">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2406">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2407">이 요소 위에 있는 동안 스타일러스가 디지타이저를 검색할 만큼 가까이 있으면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2407">Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2408">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.PreviewStylusInRange> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2408">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusInRange> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2409">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.PreviewStylusInRange> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2409">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="7d306-2410">터치, 마우스 및 스타일러스 입력에 특정 관계에 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2410">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="7d306-2411">자세한 내용은 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2411">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusInRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2412">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2412">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2413">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2413">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewStylusInRangeEvent>|  
|<span data-ttu-id="7d306-2414">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2414">Routing strategy</span></span>|<span data-ttu-id="7d306-2415">터널링</span><span class="sxs-lookup"><span data-stu-id="7d306-2415">Tunneling</span></span>|  
|<span data-ttu-id="7d306-2416">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2416">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="7d306-2417">해당 버블링 이벤트가 <xref:System.Windows.ContentElement.StylusInRange>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2417">The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusInRange>.</span></span>  
  
-   <span data-ttu-id="7d306-2418">재정의 <xref:System.Windows.ContentElement.OnPreviewStylusInRange%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2418">Override <xref:System.Windows.ContentElement.OnPreviewStylusInRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2419"><see cref="E:System.Windows.ContentElement.PreviewStylusInRange" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2419">Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusInRange" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2420">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2420">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2421">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2421">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2422">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2422">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2423">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2423">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2424">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2424">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2425">요소 위에 있는 동안 스타일러스를 움직이면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2425">Occurs when the stylus moves while over the element.</span></span> <span data-ttu-id="7d306-2426">이 이벤트를 발생시키려면 디지타이저에서 검색하는 동안 스타일러스를 움직여야 하며, 그렇지 않으면 <see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" />가 대신 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2426">The stylus must move while being detected by the  digitizer  to raise this event, otherwise, <see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" /> is raised instead.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2427">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.PreviewStylusMove> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2427">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2428">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.PreviewStylusMove> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2428">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="7d306-2429">터치, 마우스 및 스타일러스 입력에 특정 관계에 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2429">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="7d306-2430">자세한 내용은 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2430">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2431">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2431">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2432">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2432">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewStylusMoveEvent>|  
|<span data-ttu-id="7d306-2433">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2433">Routing strategy</span></span>|<span data-ttu-id="7d306-2434">터널링</span><span class="sxs-lookup"><span data-stu-id="7d306-2434">Tunneling</span></span>|  
|<span data-ttu-id="7d306-2435">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2435">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="7d306-2436">해당 버블링 이벤트가 <xref:System.Windows.ContentElement.StylusMove>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2436">The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusMove>.</span></span>  
  
-   <span data-ttu-id="7d306-2437">재정의 <xref:System.Windows.ContentElement.OnPreviewStylusMove%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2437">Override <xref:System.Windows.ContentElement.OnPreviewStylusMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2438"><see cref="E:System.Windows.ContentElement.PreviewStylusMove" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2438">Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2439">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2439">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2440">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2440">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2441">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2441">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2442">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2442">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2443">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2443">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2444">스타일러스가 디지타이저에서 멀리 떨어져 있어 검색할 수 없으면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2444">Occurs when the stylus is too far from the digitizer to be detected.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2445">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.PreviewStylusOutOfRange> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2445">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusOutOfRange> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2446">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.PreviewStylusOutOfRange> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2446">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="7d306-2447">터치, 마우스 및 스타일러스 입력에 특정 관계에 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2447">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="7d306-2448">자세한 내용은 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2448">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusOutOfRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2449">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2449">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2450">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2450">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent>|  
|<span data-ttu-id="7d306-2451">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2451">Routing strategy</span></span>|<span data-ttu-id="7d306-2452">터널링</span><span class="sxs-lookup"><span data-stu-id="7d306-2452">Tunneling</span></span>|  
|<span data-ttu-id="7d306-2453">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2453">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="7d306-2454">해당 버블링 이벤트가 <xref:System.Windows.ContentElement.StylusOutOfRange>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2454">The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusOutOfRange>.</span></span>  
  
-   <span data-ttu-id="7d306-2455">재정의 <xref:System.Windows.ContentElement.OnPreviewStylusOutOfRange%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2455">Override <xref:System.Windows.ContentElement.OnPreviewStylusOutOfRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2456"><see cref="E:System.Windows.ContentElement.PreviewStylusOutOfRange" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2456">Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusOutOfRange" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2457">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2457">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2458">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2458">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2459">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2459">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2460">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2460">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2461">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2461">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ PreviewStylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2462">사용자가 여러 스타일러스 제스처 중 하나를 수행하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2462">Occurs when a user performs one of several stylus gestures.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2463">스타일러스 제스처에 대 한 정보를 참조 하세요. <xref:System.Windows.Input.SystemGesture>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2463">For information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.</span></span>  
  
 <span data-ttu-id="7d306-2464">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.PreviewStylusSystemGesture> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2464">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusSystemGesture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2465">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.PreviewStylusSystemGesture> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2465">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="7d306-2466">터치, 마우스 및 스타일러스 입력에 특정 관계에 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2466">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="7d306-2467">자세한 내용은 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2467">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusSystemGesture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2468">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2468">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2469">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2469">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewStylusSystemGestureEvent>|  
|<span data-ttu-id="7d306-2470">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2470">Routing strategy</span></span>|<span data-ttu-id="7d306-2471">터널링</span><span class="sxs-lookup"><span data-stu-id="7d306-2471">Tunneling</span></span>|  
|<span data-ttu-id="7d306-2472">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2472">Delegate</span></span>|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   <span data-ttu-id="7d306-2473">해당 버블링 이벤트가 <xref:System.Windows.ContentElement.StylusSystemGesture>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2473">The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusSystemGesture>.</span></span>  
  
-   <span data-ttu-id="7d306-2474">재정의 <xref:System.Windows.ContentElement.OnPreviewStylusSystemGesture%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2474">Override <xref:System.Windows.ContentElement.OnPreviewStylusSystemGesture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2475"><see cref="E:System.Windows.ContentElement.PreviewStylusSystemGesture" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2475">Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusSystemGesture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2476">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2476">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2477">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2477">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2478">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2478">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2479">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2479">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2480">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2480">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2481">스타일러스가 이 요소 위에 있는 동안 사용자가 디지타이저에서 스타일러스를 올리면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2481">Occurs when the user raises the stylus off the digitizer while the stylus is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2482">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.PreviewStylusDown> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2482">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2483">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.PreviewStylusDown> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2483">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="7d306-2484">터치, 마우스 및 스타일러스 입력에 특정 관계에 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2484">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="7d306-2485">자세한 내용은 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2485">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2486">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2486">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2487">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2487">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewStylusUpEvent>|  
|<span data-ttu-id="7d306-2488">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2488">Routing strategy</span></span>|<span data-ttu-id="7d306-2489">터널링</span><span class="sxs-lookup"><span data-stu-id="7d306-2489">Tunneling</span></span>|  
|<span data-ttu-id="7d306-2490">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2490">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="7d306-2491">해당 버블링 이벤트가 <xref:System.Windows.ContentElement.StylusUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2491">The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusUp>.</span></span>  
  
-   <span data-ttu-id="7d306-2492">재정의 <xref:System.Windows.ContentElement.OnPreviewStylusUp%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2492">Override <xref:System.Windows.ContentElement.OnPreviewStylusUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2493"><see cref="E:System.Windows.ContentElement.PreviewStylusUp" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2493">Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2494">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2494">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2495">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2495">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2496">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2496">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2497">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2497">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2498">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2498">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler PreviewTextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewTextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ PreviewTextInput;" />
      <MemberSignature Language="F#" Value="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewTextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2499">이 요소가 장치와 별개의 방식으로 텍스트를 가져오면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2499">Occurs when this element gets text in a device-independent manner.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2500"><xref:System.Windows.ContentElement.PreviewTextInput> 이벤트 구성 요소 또는 장치 독립적인 방식으로 텍스트 입력에 대 한 수신 대기 하도록 응용 프로그램을 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2500">The <xref:System.Windows.ContentElement.PreviewTextInput> event allows a component or application to listen for text input in a device-independent manner.</span></span> <span data-ttu-id="7d306-2501">키보드는 방식과 <xref:System.Windows.ContentElement.PreviewTextInput>; 음성, 필기 및 기타 입력된 장치를 생성할 수도 있지만 <xref:System.Windows.ContentElement.PreviewTextInput>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2501">The keyboard is the primary means of <xref:System.Windows.ContentElement.PreviewTextInput>; but speech, handwriting, and other input devices can also generate <xref:System.Windows.ContentElement.PreviewTextInput>.</span></span>  
  
 <span data-ttu-id="7d306-2502">기본 키보드 또는 입력된 방법 편집기-를 통해 키 조합으로 인해 여러 주요 이벤트 하나만 텍스트 입력된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2502">Because of key combinations - either in default keyboards or through input method editors - multiple key events may raise just one text input event.</span></span>  
  
 <span data-ttu-id="7d306-2503">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.PreviewTextInput> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2503">This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewTextInput> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2504">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.PreviewTextInput> 이벤트 원본에 연결 된 <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2504">Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewTextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewTextInput"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2505">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2505">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2506">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2506">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewTextInputEvent>|  
|<span data-ttu-id="7d306-2507">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2507">Routing strategy</span></span>|<span data-ttu-id="7d306-2508">터널링</span><span class="sxs-lookup"><span data-stu-id="7d306-2508">Tunneling</span></span>|  
|<span data-ttu-id="7d306-2509">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2509">Delegate</span></span>|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   <span data-ttu-id="7d306-2510">해당 버블링 이벤트가 <xref:System.Windows.ContentElement.TextInput>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2510">The corresponding bubbling event is <xref:System.Windows.ContentElement.TextInput>.</span></span>  
  
-   <span data-ttu-id="7d306-2511">재정의 <xref:System.Windows.ContentElement.OnPreviewTextInput%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2511">Override <xref:System.Windows.ContentElement.OnPreviewTextInput%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewTextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewTextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2512"><see cref="E:System.Windows.ContentElement.PreviewTextInput" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2512">Identifies the <see cref="E:System.Windows.ContentElement.PreviewTextInput" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2513">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2513">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2514">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2514">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2515">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2515">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2516">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2516">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2517">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2517">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewTouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2518">손가락이 이 요소 위에 있는 동안 화면을 터치하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2518">Occurs when a finger touches the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2519">기본적으로 <xref:System.Windows.ContentElement.PreviewTouchDown> 고 <xref:System.Windows.ContentElement.TouchDown> 손가락 화면을 터치 하 고 이동 될 때까지 이벤트가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2519">By default, the <xref:System.Windows.ContentElement.PreviewTouchDown> and <xref:System.Windows.ContentElement.TouchDown> events do not occur until a finger touches the screen and moves.</span></span> <span data-ttu-id="7d306-2520">손가락 화면에서 이동 하지 않고 눌러 게를 누른 채로의 동작을 포함 한 <xref:System.Windows.Input.Stylus>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2520">Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>.</span></span> <span data-ttu-id="7d306-2521">키를 누른 동작을 마우스 오른쪽 단추로 클릭 하는 것과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2521">The press and hold behavior is equivalent to a mouse right-click.</span></span>  
  
 <span data-ttu-id="7d306-2522">시킬를 <xref:System.Windows.ContentElement.PreviewTouchDown> 및 <xref:System.Windows.ContentElement.TouchDown> 손가락을 화면을 터치 하는 즉시 발생 하는 이벤트를 설정 합니다 <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> 연결 된 속성을 `false` 이 요소에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2522">To cause the <xref:System.Windows.ContentElement.PreviewTouchDown> and <xref:System.Windows.ContentElement.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> attached property to `false` for this element.</span></span>  
  
<a name="routedEventInfo_PreviewTouchDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2523">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2523">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2524">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2524">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewTouchDownEvent>|  
|<span data-ttu-id="7d306-2525">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2525">Routing strategy</span></span>|<span data-ttu-id="7d306-2526">터널링</span><span class="sxs-lookup"><span data-stu-id="7d306-2526">Tunneling</span></span>|  
|<span data-ttu-id="7d306-2527">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2527">Delegate</span></span>|<span data-ttu-id="7d306-2528"><xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.TouchEventArgs>입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2528"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="7d306-2529">해당 버블링 이벤트가 <xref:System.Windows.ContentElement.TouchDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2529">The corresponding bubbling event is <xref:System.Windows.ContentElement.TouchDown>.</span></span>  
  
-   <span data-ttu-id="7d306-2530">재정의 <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2530">Override <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewTouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewTouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2531"><see cref="E:System.Windows.ContentElement.PreviewTouchDown" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2531">Identifies the <see cref="E:System.Windows.ContentElement.PreviewTouchDown" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewTouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2532">손가락이 이 요소 위에 있는 동안 화면에서 손가락을 움직이면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2532">Occurs when a finger moves on the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2533">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2533">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2534">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2534">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewTouchMoveEvent>|  
|<span data-ttu-id="7d306-2535">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2535">Routing strategy</span></span>|<span data-ttu-id="7d306-2536">터널링</span><span class="sxs-lookup"><span data-stu-id="7d306-2536">Tunneling</span></span>|  
|<span data-ttu-id="7d306-2537">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2537">Delegate</span></span>|<span data-ttu-id="7d306-2538"><xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.TouchEventArgs>입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2538"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="7d306-2539">해당 버블링 이벤트가 <xref:System.Windows.ContentElement.TouchMove>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2539">The corresponding bubbling event is <xref:System.Windows.ContentElement.TouchMove>.</span></span>  
  
-   <span data-ttu-id="7d306-2540">재정의 <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2540">Override <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewTouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewTouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2541"><see cref="E:System.Windows.ContentElement.PreviewTouchMove" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2541">Identifies the <see cref="E:System.Windows.ContentElement.PreviewTouchMove" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewTouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2542">손가락이 이 요소 위에 있는 동안 화면에서 손가락을 떼면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2542">Occurs when a finger is raised off of the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2543">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2543">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2544">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2544">Identifier field</span></span>|<xref:System.Windows.ContentElement.PreviewTouchUpEvent>|  
|<span data-ttu-id="7d306-2545">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2545">Routing strategy</span></span>|<span data-ttu-id="7d306-2546">터널링</span><span class="sxs-lookup"><span data-stu-id="7d306-2546">Tunneling</span></span>|  
|<span data-ttu-id="7d306-2547">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2547">Delegate</span></span>|<span data-ttu-id="7d306-2548"><xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.TouchEventArgs>입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2548"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="7d306-2549">해당 버블링 이벤트가 <xref:System.Windows.ContentElement.TouchUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2549">The corresponding bubbling event is <xref:System.Windows.ContentElement.TouchUp>.</span></span>  
  
-   <span data-ttu-id="7d306-2550">재정의 <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2550">Override <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewTouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewTouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2551"><see cref="E:System.Windows.ContentElement.PreviewTouchUp" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2551">Identifies the <see cref="E:System.Windows.ContentElement.PreviewTouchUp" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.QueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ QueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2552">끌어서 놓기 작업 중 키보드 또는 마우스 단추 상태가 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2552">Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2553"><xref:System.Windows.ContentElement.QueryContinueDrag> 이벤트 끌기 소스가 끌어서 놓기 작업을 취소 해야 하는지 여부를 결정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2553">The <xref:System.Windows.ContentElement.QueryContinueDrag> event enables the drag source to determine whether the drag-and-drop operation should be canceled.</span></span>  
  
 <span data-ttu-id="7d306-2554">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.QueryContinueDrag> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2554">This event creates an alias for the <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.QueryContinueDrag> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2555">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.QueryContinueDrag> 이벤트 원본에 연결 된 <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2555">Event handlers that are attached to the <xref:System.Windows.ContentElement.QueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_QueryContinueDrag"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2556">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2556">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2557">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2557">Identifier field</span></span>|<xref:System.Windows.ContentElement.QueryContinueDragEvent>|  
|<span data-ttu-id="7d306-2558">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2558">Routing strategy</span></span>|<span data-ttu-id="7d306-2559">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-2559">Bubbling</span></span>|  
|<span data-ttu-id="7d306-2560">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2560">Delegate</span></span>|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   <span data-ttu-id="7d306-2561">해당 터널링 이벤트가 <xref:System.Windows.ContentElement.PreviewQueryContinueDrag>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2561">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewQueryContinueDrag>.</span></span>  
  
-   <span data-ttu-id="7d306-2562">재정의 <xref:System.Windows.ContentElement.OnQueryContinueDrag%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2562">Override <xref:System.Windows.ContentElement.OnQueryContinueDrag%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.QueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.QueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2563"><see cref="E:System.Windows.ContentElement.QueryContinueDrag" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2563">Identifies the <see cref="E:System.Windows.ContentElement.QueryContinueDrag" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2564">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2564">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2565">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2565">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2566">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2566">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2567">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2567">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2568">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2568">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCursor">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.QueryCursorEventHandler QueryCursor;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.QueryCursorEventHandler QueryCursor" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.QueryCursor" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryCursor As QueryCursorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::QueryCursorEventHandler ^ QueryCursor;" />
      <MemberSignature Language="F#" Value="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " Usage="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.QueryCursorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2569">커서를 표시하도록 요청하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2569">Occurs when the cursor is requested to display.</span></span> <span data-ttu-id="7d306-2570">이 이벤트는 마우스 포인터를 새 위치로 이동할 때마다 요소에서 발생합니다. 즉, 새로운 위치에 따라 커서 개체가 변경되어야 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2570">This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2571">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.QueryCursor> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2571">This event creates an alias for the <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.QueryCursor> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2572">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.QueryCursor> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2572">Event handlers that are attached to the <xref:System.Windows.ContentElement.QueryCursor> event are attached to the underlying <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="7d306-2573">이 이벤트 이름으로 참조 되 고 커서가 반드시 (삽입 지점이 라고도 함)에 텍스트 커서를 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2573">The cursor being referred to by this event name is not necessarily the text cursor (sometimes known as the insertion point).</span></span> <span data-ttu-id="7d306-2574">대신이 컨텍스트에서 커서에는 여러 가능한 입력 관련 장치 또는 Windows 프로그래밍의 개념과 관련 된 화면의 그래픽 표시를 선언 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2574">Instead, the cursor in this context is the object that declares the onscreen graphical display related to several possible input-related devices or concepts in Windows programming.</span></span> <span data-ttu-id="7d306-2575">해당 개체를 표현 합니다 <xref:System.Windows.Input.Cursor> wpf에서 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2575">That object is represented by the <xref:System.Windows.Input.Cursor> class in WPF.</span></span> <span data-ttu-id="7d306-2576">WPF 입력된 시스템을 사용 하면 마우스 포인터의 화면 위치를 나타내는 경우이 커서를 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2576">The WPF input system enables you to change this cursor when it represents the onscreen position of the mouse pointer.</span></span> <span data-ttu-id="7d306-2577">미리 정의 된 값에서 사용할 수는 <xref:System.Windows.Input.Cursors> 열거 하거나 이미지 파일로 사용자 지정 커서를 선언할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2577">You can use predefined values from the <xref:System.Windows.Input.Cursors> enumeration, or you can declare a custom cursor as an image file.</span></span>  
  
 <span data-ttu-id="7d306-2578">수신 대기를 <xref:System.Windows.ContentElement.QueryCursor> 이벤트는 커서 관리를 위한 효율적인 기술 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2578">Listening for the <xref:System.Windows.ContentElement.QueryCursor> event is not an efficient technique for cursor management.</span></span> <span data-ttu-id="7d306-2579">각 요소는 사용 하 여 자체 커서 동작을 정의 하는 대신 <xref:System.Windows.FrameworkContentElement.Cursor%2A> 고 <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2579">Instead, each element should define its own cursor behavior with <xref:System.Windows.FrameworkContentElement.Cursor%2A> and <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>.</span></span> <span data-ttu-id="7d306-2580">만 사용 해야 <xref:System.Windows.ContentElement.QueryCursor> WPF 프레임 워크 수준 기본 요소를 사용 하지 않는 경우 또는에서 특별 한 경우 여기서 요소 마다 단위로 커서 동작을 정의 요구를 충족 하지.</span><span class="sxs-lookup"><span data-stu-id="7d306-2580">You should only rely on <xref:System.Windows.ContentElement.QueryCursor> if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs.</span></span> <span data-ttu-id="7d306-2581">에 대 한 응답에서 커서 동작을 구현 하는 방법은 <xref:System.Windows.ContentElement.QueryCursor>를 참조 하세요 <xref:System.Windows.Input.QueryCursorEventHandler>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2581">For more information on implementing cursor behavior in response to <xref:System.Windows.ContentElement.QueryCursor>, see <xref:System.Windows.Input.QueryCursorEventHandler>.</span></span>  
  
<a name="routedEventInfo_QueryCursor"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2582">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2582">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2583">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2583">Identifier field</span></span>|<xref:System.Windows.ContentElement.QueryCursorEvent>|  
|<span data-ttu-id="7d306-2584">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2584">Routing strategy</span></span>|<span data-ttu-id="7d306-2585">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-2585">Bubbling</span></span>|  
|<span data-ttu-id="7d306-2586">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2586">Delegate</span></span>|<xref:System.Windows.Input.QueryCursorEventHandler>|  
  
-   <span data-ttu-id="7d306-2587">정의 된 해당 터널링 이벤트가 없습니다 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2587">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="7d306-2588">재정의 <xref:System.Windows.ContentElement.OnQueryCursor%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2588">Override <xref:System.Windows.ContentElement.OnQueryCursor%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="QueryCursorEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryCursorEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryCursorEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.QueryCursorEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryCursorEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryCursorEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryCursorEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.QueryCursorEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2589"><see cref="E:System.Windows.ContentElement.QueryCursor" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2589">Identifies the <see cref="E:System.Windows.ContentElement.QueryCursor" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2590">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2590">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2591">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2591">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2592">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2592">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2593">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2593">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2594">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2594">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEvent">
      <MemberSignature Language="C#" Value="public void RaiseEvent (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseEvent(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseEvent (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RaiseEvent(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit" Usage="contentElement.RaiseEvent e" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RaiseEvent(System.Windows.RoutedEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d306-2595">이벤트 데이터를 포함하고 발생할 이벤트도 식별하는 <see cref="T:System.Windows.RoutedEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2595">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data and also identifies the event to raise.</span></span></param>
        <summary><span data-ttu-id="7d306-2596">특정 라우트된 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2596">Raises a specific routed event.</span></span> <span data-ttu-id="7d306-2597">발생되는 <see cref="T:System.Windows.RoutedEvent" />는 제공된 <see cref="T:System.Windows.RoutedEventArgs" /> 인스턴스 내에서 해당 이벤트 데이터의 <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> 속성으로 식별됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2597">The <see cref="T:System.Windows.RoutedEvent" /> to be raised is identified within the <see cref="T:System.Windows.RoutedEventArgs" /> instance that is provided (as the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of that event data).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2598">합니다 `e` 매개 변수의 모든 라우트된 이벤트 데이터에 대 한 일반적인 기본 형식으로 지정 됩니다; 그러나 때문에 발생 하는 이벤트에 사용할 수 있는 가장 구체적인 이벤트 데이터 형식으로 이벤트 데이터를 제공 해야 <xref:System.Windows.RoutedEventArgs> 파생된 클래스를 포함 합니다 특정 이벤트 발생 하는 경우를 위해 사용 되는 특정 실제 데이터 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2598">The `e` parameter is typed as the common base type for all routed event data; however, the event data should be given as the most specific event data type that is available for the event being raised, because <xref:System.Windows.RoutedEventArgs> derived classes contain the actual specific data properties that are intended for the specific event when it is raised.</span></span>  
  
 <span data-ttu-id="7d306-2599"><xref:System.Windows.RoutedEventArgs> 이벤트에 대 한 상태 속성만 아닙니다. 또한 시키려면 라우트된 이벤트를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2599"><xref:System.Windows.RoutedEventArgs> is not just the state properties for the event; it also identifies which routed event to raise.</span></span> <span data-ttu-id="7d306-2600">이 이벤트를 발생 시키는 패턴 및 라우트된 이벤트 데이터에서 다를 둘 다 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트와 관련 된 속성만 포함 하는 이벤트 및 데이터 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2600">This event-raising pattern and the routed event data both differ from [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] events and data classes, which typically just contain properties that are related to the event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d306-2601">다음 예제에서는 이벤트 데이터를 만듭니다, 그리고 데이터, 이벤트 식별자를 추가 및 이벤트 데이터 인스턴스를 사용 하 여 사용자 지정 라우트된 이벤트를 발생 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2601">The following example creates event data, appends the event identifier to the data, and then uses the event data instance to raise a custom routed event.</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#RaiseEvent](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#raiseevent)]
 [!code-vb[ContentElementsSmorgasbord#RaiseEvent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#raiseevent)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAllTouchCaptures">
      <MemberSignature Language="C#" Value="public void ReleaseAllTouchCaptures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseAllTouchCaptures() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ReleaseAllTouchCaptures" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseAllTouchCaptures ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseAllTouchCaptures();" />
      <MemberSignature Language="F#" Value="member this.ReleaseAllTouchCaptures : unit -&gt; unit" Usage="contentElement.ReleaseAllTouchCaptures " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7d306-2602">이 요소에서 캡처된 터치 장치를 모두 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2602">Releases all captured touch devices from this element.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMouseCapture">
      <MemberSignature Language="C#" Value="public void ReleaseMouseCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseMouseCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ReleaseMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseMouseCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseMouseCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseMouseCapture : unit -&gt; unit&#xA;override this.ReleaseMouseCapture : unit -&gt; unit" Usage="contentElement.ReleaseMouseCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7d306-2603">이 요소가 마우스를 캡처한 경우 캡처를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2603">Releases the mouse capture, if this element held the capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2604">이 요소는 캡처를 유지 하지 않은 경우이 메서드를 호출 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2604">If this element did not hold the capture, calling this method has no effect.</span></span> <span data-ttu-id="7d306-2605">값을 확인 하는 것이 좋습니다. <xref:System.Windows.ContentElement.IsMouseCaptured%2A> 이 메서드를 호출 하기 전에 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2605">Consider checking the value of <xref:System.Windows.ContentElement.IsMouseCaptured%2A> before you call this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d306-2606">다음 처리기를 캡처 또는 마우스 단추 상태에 따라 마우스 캡처를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2606">The following handler captures or releases mouse capture according to mouse button states.</span></span> <span data-ttu-id="7d306-2607">마우스 포인터를 이동 하는 보다 다른 용도로 캡처된 마우스 동작을 사용 하는 방법을 보여는 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2607">The example shows how to use captured mouse movement for alternative purposes other than moving the mouse pointer in the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[ContentElementsSmorgasbord#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseStylusCapture">
      <MemberSignature Language="C#" Value="public void ReleaseStylusCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseStylusCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ReleaseStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseStylusCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseStylusCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseStylusCapture : unit -&gt; unit&#xA;override this.ReleaseStylusCapture : unit -&gt; unit" Usage="contentElement.ReleaseStylusCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7d306-2608">이 요소가 스타일러스 장치를 캡처한 경우 캡처를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2608">Releases the stylus device capture, if this element held the capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2609">이 요소는 캡처를 유지 하지 않은 경우이 메서드를 호출 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2609">If this element did not hold the capture, calling this method has no effect.</span></span> <span data-ttu-id="7d306-2610">값을 확인 하는 것이 좋습니다. <xref:System.Windows.ContentElement.IsStylusCaptured%2A> 이 메서드를 호출 하기 전에 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2610">Consider checking the value of <xref:System.Windows.ContentElement.IsStylusCaptured%2A> before you call this method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseTouchCapture">
      <MemberSignature Language="C#" Value="public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReleaseTouchCapture(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReleaseTouchCapture(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.ReleaseTouchCapture : System.Windows.Input.TouchDevice -&gt; bool" Usage="contentElement.ReleaseTouchCapture touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="touchDevice"><span data-ttu-id="7d306-2611">해제할 장치입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2611">The device to release.</span></span></param>
        <summary><span data-ttu-id="7d306-2612">이 요소에서 지정된 터치 장치를 해제하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2612">Attempts to release the specified touch device from this element.</span></span></summary>
        <returns><span data-ttu-id="7d306-2613">터치 장치가 해제되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2613"><see langword="true" /> if the touch device is released; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7d306-2614"><paramref name="touchDevice" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2614"><paramref name="touchDevice" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="contentElement.RemoveHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent"><span data-ttu-id="7d306-2615">처리기가 연결된 라우트된 이벤트의 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2615">The identifier of the.routed event for which the handler is attached.</span></span></param>
        <param name="handler"><span data-ttu-id="7d306-2616">이 요소의 이벤트 처리기 컬렉션에서 제거할 특정 처리기 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2616">The specific handler implementation to remove from the event handler collection on this element.</span></span></param>
        <summary><span data-ttu-id="7d306-2617">지정된 라우트된 이벤트 처리기를 이 요소에서 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2617">Removes the specified routed event handler from this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2618">이 사용 하 여에 대 한 가장 일반적인 시나리오 [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] 구현 하는 경우는 합니다 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 연결 된 사용자 지정 라우트된 이벤트 처리기에 대 한 "제거" 논리를 구현 하는 경우에 특히 "래퍼" 이벤트를 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 수준.</span><span class="sxs-lookup"><span data-stu-id="7d306-2618">The most common scenario for using this [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] is when you implement the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] "wrapper" event that is associated with a custom routed event, specifically when you implement the "remove" logic for handlers at the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] level.</span></span> <span data-ttu-id="7d306-2619">이 예제 주의 섹션에서는이 시나리오를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2619">The example that follows this remarks section illustrates this scenario.</span></span>  
  
 <span data-ttu-id="7d306-2620">다음과 같은 메서드 호출에 대 한 입력된 매개 변수와 일치 하는 조건으로 등록 된 처리기가 없는 경우에이 메서드를 호출 하면 효과가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2620">Calling this method has no effect if there were no handlers registered with criteria that match the input parameters for the method call.</span></span>  
  
 <span data-ttu-id="7d306-2621">둘 이상의 이벤트 처리기 저장소는 제거, 첫 번째 처리기만 조건과 일치 하는 하나의 처리기 연결 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2621">If more than one handler is attached that matched the criteria, only the first handler in the event handler store is removed.</span></span> <span data-ttu-id="7d306-2622">이 동작은 일치 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 의 동작을 `-=` 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2622">This behavior is consistent with [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] behavior of the `-=` operator.</span></span>  
  
 <span data-ttu-id="7d306-2623">모두 `routedEvent` 나 `handler` 않을 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2623">Neither `routedEvent` nor `handler` may be `null`.</span></span> <span data-ttu-id="7d306-2624">두 값을 제공 하는 동안 `null` 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2624">Attempting to provide either value as `null` will raise an exception.</span></span>  
  
 <span data-ttu-id="7d306-2625">이 메서드는 무시 합니다 `handledEventsToo` 처리기가 처음 경우 제공 되는 매개 변수 정보를 사용 하 여 추가 <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 는 이미 처리 된 이벤트를 처리할 수 있도록 서명 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2625">This method ignores the `handledEventsToo` parameter information, which is provided if the handler was first added with the <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature that enables handling of already-handled events.</span></span> <span data-ttu-id="7d306-2626">두 가지 형식의 처리기 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2626">Either type of handler is removed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeCommandBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeCommandBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeCommandBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ShouldSerializeCommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeCommandBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeCommandBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeCommandBindings : unit -&gt; bool" Usage="contentElement.ShouldSerializeCommandBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7d306-2627">serialization 프로세스에서 이 클래스의 인스턴스에 있는 <see cref="P:System.Windows.ContentElement.CommandBindings" /> 속성의 콘텐츠를 serialize해야 하는지 여부를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2627">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.ContentElement.CommandBindings" /> property on instances of this class.</span></span></summary>
        <returns><span data-ttu-id="7d306-2628"><see cref="P:System.Windows.ContentElement.CommandBindings" /> 속성 값을 serialize해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2628"><see langword="true" /> if the <see cref="P:System.Windows.ContentElement.CommandBindings" /> property value should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2629">돌아갑니다 `true` 경우 <xref:System.Windows.ContentElement.CommandBindings%2A> 로컬로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2629">This will return `true` if <xref:System.Windows.ContentElement.CommandBindings%2A> is locally set.</span></span>  
  
 <span data-ttu-id="7d306-2630">이 `ShouldSerialize` 때문에 메서드가 제공 됩니다는 <xref:System.Windows.UIElement.CommandBindings%2A> 속성에는 간단한 기본 값이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2630">This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.CommandBindings%2A> property does not have a simple default value.</span></span> <span data-ttu-id="7d306-2631">이 메서드는 속성이 기본값에서 변경 되었는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2631">This method indicates whether the property has changed from its default value.</span></span> <span data-ttu-id="7d306-2632">디자이너를 개발 하거나 통합 하는 고유한 컨트롤을 개발 된 경우 일반적으로이 메서드를 호출을 <xref:System.Windows.UIElement>입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2632">You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="7d306-2633">자세한 내용은 [ShouldSerialize 및 다시 설정 하는 메서드를 사용 하 여 기본값 정의](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2633">For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeInputBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeInputBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeInputBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ShouldSerializeInputBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeInputBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeInputBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeInputBindings : unit -&gt; bool" Usage="contentElement.ShouldSerializeInputBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7d306-2634">serialization 프로세스에서 이 클래스의 인스턴스에 있는 <see cref="P:System.Windows.ContentElement.InputBindings" /> 속성의 콘텐츠를 serialize해야 하는지 여부를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2634">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.ContentElement.InputBindings" /> property on instances of this class.</span></span></summary>
        <returns><span data-ttu-id="7d306-2635"><see cref="P:System.Windows.ContentElement.InputBindings" /> 속성 값을 serialize해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2635"><see langword="true" /> if the <see cref="P:System.Windows.ContentElement.InputBindings" /> property value should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2636">돌아갑니다 `true` 경우 <xref:System.Windows.ContentElement.InputBindings%2A> 로컬로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2636">This will return `true` if <xref:System.Windows.ContentElement.InputBindings%2A> is locally set.</span></span>  
  
 <span data-ttu-id="7d306-2637">이 `ShouldSerialize` 때문에 메서드가 제공 됩니다는 <xref:System.Windows.UIElement.InputBindings%2A> 속성에는 간단한 기본 값이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2637">This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.InputBindings%2A> property does not have a simple default value.</span></span> <span data-ttu-id="7d306-2638">이 메서드는 속성이 기본값에서 변경 되었는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2638">This method indicates whether the property has changed from its default value.</span></span> <span data-ttu-id="7d306-2639">디자이너를 개발 하거나 통합 하는 고유한 컨트롤을 개발 된 경우 일반적으로이 메서드를 호출을 <xref:System.Windows.UIElement>입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2639">You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="7d306-2640">자세한 내용은 [ShouldSerialize 및 다시 설정 하는 메서드를 사용 하 여 기본값 정의](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2640">For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2641">포인터가 이 요소 위에 있는 동안 스타일러스 단추를 누르면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2641">Occurs when the stylus button is pressed while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2642">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.StylusButtonDown> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2642">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.StylusButtonDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2643">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.StylusButtonDown> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2643">Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="7d306-2644">터치, 마우스 및 스타일러스 입력에 특정 관계에 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2644">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="7d306-2645">자세한 내용은 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2645">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2646">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2646">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2647">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2647">Identifier field</span></span>|<xref:System.Windows.ContentElement.StylusButtonDownEvent>|  
|<span data-ttu-id="7d306-2648">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2648">Routing strategy</span></span>|<span data-ttu-id="7d306-2649">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-2649">Bubbling</span></span>|  
|<span data-ttu-id="7d306-2650">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2650">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="7d306-2651">해당 터널링 이벤트가 <xref:System.Windows.ContentElement.PreviewStylusButtonDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2651">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusButtonDown>.</span></span>  
  
-   <span data-ttu-id="7d306-2652">재정의 <xref:System.Windows.ContentElement.OnStylusButtonDown%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2652">Override <xref:System.Windows.ContentElement.OnStylusButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2653"><see cref="E:System.Windows.ContentElement.StylusButtonDown" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2653">Identifies the <see cref="E:System.Windows.ContentElement.StylusButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2654">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2654">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2655">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2655">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2656">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2656">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2657">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2657">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2658">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2658">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2659">포인터가 이 요소 위에 있는 동안 스타일러스 단추를 놓으면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2659">Occurs when the stylus button is released while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2660">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.StylusButtonUp> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2660">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.StylusButtonUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2661">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.StylusButtonUp> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2661">Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="7d306-2662">터치, 마우스 및 스타일러스 입력에 특정 관계에 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2662">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="7d306-2663">자세한 내용은 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2663">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2664">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2664">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2665">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2665">Identifier field</span></span>|<xref:System.Windows.ContentElement.StylusButtonUpEvent>|  
|<span data-ttu-id="7d306-2666">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2666">Routing strategy</span></span>|<span data-ttu-id="7d306-2667">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-2667">Bubbling</span></span>|  
|<span data-ttu-id="7d306-2668">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2668">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="7d306-2669">해당 터널링 이벤트가 <xref:System.Windows.ContentElement.PreviewStylusButtonUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2669">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusButtonUp>.</span></span>  
  
-   <span data-ttu-id="7d306-2670">재정의 <xref:System.Windows.ContentElement.OnStylusButtonUp%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2670">Override <xref:System.Windows.ContentElement.OnStylusButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2671"><see cref="E:System.Windows.ContentElement.StylusButtonUp" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2671">Identifies the <see cref="E:System.Windows.ContentElement.StylusButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2672">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2672">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2673">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2673">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2674">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2674">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2675">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2675">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2676">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2676">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler StylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler StylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ StylusDown;" />
      <MemberSignature Language="F#" Value="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2677">스타일러스가 이 요소 위에 있는 동안 스타일러스가 디지타이저를 건드리면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2677">Occurs when the stylus touches the digitizer while the stylus is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2678">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.StylusDown> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2678">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.StylusDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2679">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.StylusDown> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2679">Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="7d306-2680">터치, 마우스 및 스타일러스 입력에 특정 관계에 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2680">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="7d306-2681">자세한 내용은 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2681">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2682">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2682">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2683">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2683">Identifier field</span></span>|<xref:System.Windows.ContentElement.StylusDownEvent>|  
|<span data-ttu-id="7d306-2684">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2684">Routing strategy</span></span>|<span data-ttu-id="7d306-2685">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-2685">Bubbling</span></span>|  
|<span data-ttu-id="7d306-2686">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2686">Delegate</span></span>|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   <span data-ttu-id="7d306-2687">해당 터널링 이벤트가 <xref:System.Windows.ContentElement.PreviewStylusDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2687">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusDown>.</span></span>  
  
-   <span data-ttu-id="7d306-2688">재정의 <xref:System.Windows.ContentElement.OnStylusDown%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2688">Override <xref:System.Windows.ContentElement.OnStylusDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2689"><see cref="E:System.Windows.ContentElement.StylusDown" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2689">Identifies the <see cref="E:System.Windows.ContentElement.StylusDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2690">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2690">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2691">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2691">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2692">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2692">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2693">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2693">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2694">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2694">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusEnter As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusEnter;" />
      <MemberSignature Language="F#" Value="member this.StylusEnter : System.Windows.Input.StylusEventHandler " Usage="member this.StylusEnter : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2695">스타일러스가 이 요소의 영역 안으로 들어가면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2695">Occurs when the stylus enters the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2696"><xref:System.Windows.ContentElement.StylusEnter> [라우트된 이벤트 개요](~/docs/framework/wpf/advanced/routed-events-overview.md) 직접 이벤트 라우팅 전략 처리를 사용 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2696"><xref:System.Windows.ContentElement.StylusEnter> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="7d306-2697">경로 따라 직접 라우트된 이벤트가 발생 하지 않습니다. 대신 처리 됩니다 동일한 요소에서 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2697">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="7d306-2698">그러나 라우트된 이벤트 동작 스타일의 트리거와 이벤트 등의 다른 측면을 활성화 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2698">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="7d306-2699">하지만 <xref:System.Windows.ContentElement.StylusEnter> 트랙 스타일러스이 이벤트를 더이 요소의 영역 안으로 들어가면 직접적으로 보고 합니다는 <xref:System.Windows.ContentElement.IsStylusOver%2A> 속성 값에서 변경 되었습니다 `false` 를 `true` 이 요소에.</span><span class="sxs-lookup"><span data-stu-id="7d306-2699">Although <xref:System.Windows.ContentElement.StylusEnter> tracks when the stylus enters the bounds of an element, this event more literally reports that the <xref:System.Windows.ContentElement.IsStylusOver%2A> property value has changed from `false` to `true` on this element.</span></span>  
  
 <span data-ttu-id="7d306-2700">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.StylusEnter> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2700">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.StylusEnter> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2701">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.StylusEnter> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2701">Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusEnter> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="7d306-2702">터치, 마우스 및 스타일러스 입력에 특정 관계에 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2702">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="7d306-2703">자세한 내용은 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2703">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2704">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2704">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2705">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2705">Identifier field</span></span>|<xref:System.Windows.ContentElement.StylusEnterEvent>|  
|<span data-ttu-id="7d306-2706">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2706">Routing strategy</span></span>|<span data-ttu-id="7d306-2707">직접</span><span class="sxs-lookup"><span data-stu-id="7d306-2707">Direct</span></span>|  
|<span data-ttu-id="7d306-2708">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2708">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="7d306-2709">재정의 <xref:System.Windows.ContentElement.OnStylusEnter%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2709">Override <xref:System.Windows.ContentElement.OnStylusEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2710"><see cref="E:System.Windows.ContentElement.StylusEnter" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2710">Identifies the <see cref="E:System.Windows.ContentElement.StylusEnter" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2711">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2711">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2712">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2712">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2713">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2713">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2714">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2714">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2715">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2715">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2716">스타일러스가 디지타이저를 실제로 건드리지 않고 요소 위로 움직이면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2716">Occurs when the stylus moves over an element without actually touching the digitizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2717">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.StylusInAirMove> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2717">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.StylusInAirMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2718">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.StylusInAirMove> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2718">Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="7d306-2719">터치, 마우스 및 스타일러스 입력에 특정 관계에 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2719">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="7d306-2720">자세한 내용은 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2720">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusInAirMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2721">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2721">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2722">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2722">Identifier field</span></span>|<xref:System.Windows.ContentElement.StylusInAirMoveEvent>|  
|<span data-ttu-id="7d306-2723">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2723">Routing strategy</span></span>|<span data-ttu-id="7d306-2724">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-2724">Bubbling</span></span>|  
|<span data-ttu-id="7d306-2725">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2725">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="7d306-2726">해당 터널링 이벤트가 <xref:System.Windows.ContentElement.PreviewStylusInAirMove>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2726">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusInAirMove>.</span></span>  
  
-   <span data-ttu-id="7d306-2727">재정의 <xref:System.Windows.ContentElement.OnStylusInAirMove%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2727">Override <xref:System.Windows.ContentElement.OnStylusInAirMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2728"><see cref="E:System.Windows.ContentElement.StylusInAirMove" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2728">Identifies the <see cref="E:System.Windows.ContentElement.StylusInAirMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2729">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2729">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2730">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2730">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2731">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2731">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2732">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2732">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2733">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2733">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInRange;" />
      <MemberSignature Language="F#" Value="member this.StylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2734">이 요소 위에 있는 동안 스타일러스가 디지타이저를 검색할 만큼 가까이 있으면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2734">Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2735">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.StylusInRange> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2735">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.StylusInRange> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2736">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.StylusInRange> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2736">Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="7d306-2737">터치, 마우스 및 스타일러스 입력에 특정 관계에 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2737">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="7d306-2738">자세한 내용은 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2738">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusInRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2739">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2739">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2740">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2740">Identifier field</span></span>|<xref:System.Windows.ContentElement.StylusInRangeEvent>|  
|<span data-ttu-id="7d306-2741">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2741">Routing strategy</span></span>|<span data-ttu-id="7d306-2742">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-2742">Bubbling</span></span>|  
|<span data-ttu-id="7d306-2743">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2743">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="7d306-2744">해당 터널링 이벤트가 <xref:System.Windows.ContentElement.PreviewStylusInRange>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2744">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusInRange>.</span></span>  
  
-   <span data-ttu-id="7d306-2745">재정의 <xref:System.Windows.ContentElement.OnStylusInRange%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2745">Override <xref:System.Windows.ContentElement.OnStylusInRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2746"><see cref="E:System.Windows.ContentElement.StylusInRange" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2746">Identifies the <see cref="E:System.Windows.ContentElement.StylusInRange" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2747">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2747">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2748">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2748">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2749">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2749">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2750">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2750">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2751">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2751">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusLeave As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusLeave;" />
      <MemberSignature Language="F#" Value="member this.StylusLeave : System.Windows.Input.StylusEventHandler " Usage="member this.StylusLeave : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2752">스타일러스가 요소의 영역을 벗어나면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2752">Occurs when the stylus leaves the bounds of the element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2753"><xref:System.Windows.ContentElement.StylusLeave> [라우트된 이벤트 개요](~/docs/framework/wpf/advanced/routed-events-overview.md) 직접 이벤트 라우팅 전략 처리를 사용 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2753"><xref:System.Windows.ContentElement.StylusLeave> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="7d306-2754">경로 따라 직접 라우트된 이벤트가 발생 하지 않습니다. 대신 처리 됩니다 동일한 요소에서 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2754">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="7d306-2755">그러나 라우트된 이벤트 동작 스타일의 트리거와 이벤트 등의 다른 측면을 활성화 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2755">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="7d306-2756">하지만 <xref:System.Windows.ContentElement.StylusLeave> 트랙 스타일러스 범위를 벗어날 때이 이벤트는 요소의 더 직접적으로 보고 합니다는 <xref:System.Windows.ContentElement.IsStylusOver%2A> 속성 값에서 변경 되었습니다 `true` 에 `false` 이 요소에.</span><span class="sxs-lookup"><span data-stu-id="7d306-2756">Although <xref:System.Windows.ContentElement.StylusLeave> tracks when the stylus leaves the bounds of an element, this event more literally reports that the <xref:System.Windows.ContentElement.IsStylusOver%2A> property value has changed from `true` to `false` on this element.</span></span>  
  
 <span data-ttu-id="7d306-2757">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.StylusLeave> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2757">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.StylusLeave> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2758">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.StylusLeave> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2758">Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusLeave> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="7d306-2759">터치, 마우스 및 스타일러스 입력에 특정 관계에 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2759">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="7d306-2760">자세한 내용은 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2760">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2761">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2761">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2762">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2762">Identifier field</span></span>|<xref:System.Windows.ContentElement.StylusLeaveEvent>|  
|<span data-ttu-id="7d306-2763">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2763">Routing strategy</span></span>|<span data-ttu-id="7d306-2764">직접</span><span class="sxs-lookup"><span data-stu-id="7d306-2764">Direct</span></span>|  
|<span data-ttu-id="7d306-2765">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2765">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="7d306-2766">재정의 <xref:System.Windows.ContentElement.OnStylusLeave%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2766">Override <xref:System.Windows.ContentElement.OnStylusLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2767"><see cref="E:System.Windows.ContentElement.StylusLeave" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2767">Identifies the <see cref="E:System.Windows.ContentElement.StylusLeave" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2768">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2768">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2769">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2769">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2770">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2770">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2771">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2771">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2772">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2772">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusMove;" />
      <MemberSignature Language="F#" Value="member this.StylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2773">스타일러스가 이 요소 위로 움직일 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2773">Occurs when the stylus moves over this element.</span></span> <span data-ttu-id="7d306-2774">이 이벤트가 발생하려면 스타일러스가 디지타이저 위에서 움직여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2774">The stylus must move while on the digitizer to raise this event.</span></span> <span data-ttu-id="7d306-2775">그러지 않으면 <see cref="E:System.Windows.ContentElement.StylusInAirMove" />가 대신 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2775">Otherwise, <see cref="E:System.Windows.ContentElement.StylusInAirMove" /> is raised instead.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2776">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.StylusMove> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2776">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.StylusMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2777">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.StylusMove> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2777">Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="7d306-2778">터치, 마우스 및 스타일러스 입력에 특정 관계에 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2778">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="7d306-2779">자세한 내용은 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2779">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2780">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2780">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2781">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2781">Identifier field</span></span>|<xref:System.Windows.ContentElement.StylusMoveEvent>|  
|<span data-ttu-id="7d306-2782">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2782">Routing strategy</span></span>|<span data-ttu-id="7d306-2783">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-2783">Bubbling</span></span>|  
|<span data-ttu-id="7d306-2784">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2784">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="7d306-2785">해당 터널링 이벤트가 <xref:System.Windows.ContentElement.PreviewStylusMove>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2785">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusMove>.</span></span>  
  
-   <span data-ttu-id="7d306-2786">재정의 <xref:System.Windows.ContentElement.OnStylusMove%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2786">Override <xref:System.Windows.ContentElement.OnStylusMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2787"><see cref="E:System.Windows.ContentElement.StylusMove" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2787">Identifies the <see cref="E:System.Windows.ContentElement.StylusMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2788">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2788">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2789">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2789">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2790">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2790">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2791">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2791">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2792">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2792">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2793">이 요소 위에 있는 동안 스타일러스가 디지타이저에서 멀리 떨어져 있어 검색할 수 없으면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2793">Occurs when the stylus is too far from the digitizer to be detected, while over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2794">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.StylusOutOfRange> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2794">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.StylusOutOfRange> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2795">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.StylusOutOfRange> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2795">Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="7d306-2796">터치, 마우스 및 스타일러스 입력에 특정 관계에 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2796">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="7d306-2797">자세한 내용은 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2797">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusOutOfRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2798">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2798">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2799">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2799">Identifier field</span></span>|<xref:System.Windows.ContentElement.StylusOutOfRangeEvent>|  
|<span data-ttu-id="7d306-2800">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2800">Routing strategy</span></span>|<span data-ttu-id="7d306-2801">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-2801">Bubbling</span></span>|  
|<span data-ttu-id="7d306-2802">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2802">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="7d306-2803">해당 터널링 이벤트가 <xref:System.Windows.ContentElement.PreviewStylusOutOfRange>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2803">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusOutOfRange>.</span></span>  
  
-   <span data-ttu-id="7d306-2804">재정의 <xref:System.Windows.ContentElement.OnStylusOutOfRange%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2804">Override <xref:System.Windows.ContentElement.OnStylusOutOfRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2805"><see cref="E:System.Windows.ContentElement.StylusOutOfRange" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2805">Identifies the <see cref="E:System.Windows.ContentElement.StylusOutOfRange" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2806">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2806">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2807">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2807">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2808">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2808">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2809">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2809">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2810">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2810">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ StylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2811">사용자가 여러 스타일러스 제스처 중 하나를 수행하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2811">Occurs when a user performs one of several stylus gestures.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2812">스타일러스 제스처에 대 한 자세한 내용은 참조 하세요. <xref:System.Windows.Input.SystemGesture>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2812">For more information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.</span></span>  
  
 <span data-ttu-id="7d306-2813">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.StylusSystemGesture> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2813">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.StylusSystemGesture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2814">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.StylusSystemGesture> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2814">Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="7d306-2815">터치, 마우스 및 스타일러스 입력에 특정 관계에 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2815">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="7d306-2816">자세한 내용은 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2816">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusSystemGesture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2817">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2817">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2818">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2818">Identifier field</span></span>|<xref:System.Windows.ContentElement.StylusSystemGestureEvent>|  
|<span data-ttu-id="7d306-2819">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2819">Routing strategy</span></span>|<span data-ttu-id="7d306-2820">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-2820">Bubbling</span></span>|  
|<span data-ttu-id="7d306-2821">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2821">Delegate</span></span>|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   <span data-ttu-id="7d306-2822">해당 터널링 이벤트가 <xref:System.Windows.ContentElement.PreviewStylusSystemGesture>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2822">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusSystemGesture>.</span></span>  
  
-   <span data-ttu-id="7d306-2823">재정의 <xref:System.Windows.ContentElement.OnStylusSystemGesture%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2823">Override <xref:System.Windows.ContentElement.OnStylusSystemGesture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2824"><see cref="E:System.Windows.ContentElement.StylusSystemGesture" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2824">Identifies the <see cref="E:System.Windows.ContentElement.StylusSystemGesture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2825">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2825">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2826">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2826">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2827">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2827">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2828">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2828">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2829">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2829">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusUp;" />
      <MemberSignature Language="F#" Value="member this.StylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.StylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2830">스타일러스가 이 요소 위에 있는 동안 사용자가 디지타이저에서 스타일러스를 올리면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2830">Occurs when the user raises the stylus off the digitizer while it is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2831">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.StylusUp> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2831">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.StylusUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2832">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.StylusUp> 이벤트 원본에 연결 된 <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2832">Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="7d306-2833">터치, 마우스 및 스타일러스 입력에 특정 관계에 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2833">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="7d306-2834">자세한 내용은 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2834">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2835">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2835">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2836">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2836">Identifier field</span></span>|<xref:System.Windows.ContentElement.StylusUpEvent>|  
|<span data-ttu-id="7d306-2837">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2837">Routing strategy</span></span>|<span data-ttu-id="7d306-2838">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-2838">Bubbling</span></span>|  
|<span data-ttu-id="7d306-2839">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2839">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="7d306-2840">해당 터널링 이벤트가 <xref:System.Windows.ContentElement.PreviewStylusUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2840">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusUp>.</span></span>  
  
-   <span data-ttu-id="7d306-2841">재정의 <xref:System.Windows.ContentElement.OnStylusUp%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2841">Override <xref:System.Windows.ContentElement.OnStylusUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2842"><see cref="E:System.Windows.ContentElement.StylusUp" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2842">Identifies the <see cref="E:System.Windows.ContentElement.StylusUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2843">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2843">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2844">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2844">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2845">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2845">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2846">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2846">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2847">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2847">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler TextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler TextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ TextInput;" />
      <MemberSignature Language="F#" Value="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.TextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2848">이 요소가 장치와 별개의 방식으로 텍스트를 가져오면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2848">Occurs when this element gets text in a device-independent manner.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="7d306-2849">이 이벤트에서 합성 컨트롤의 내부 구현을 처리에 이미 표시 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2849">This event might already be marked as handled by the internal implementations of composited controls.</span></span> <span data-ttu-id="7d306-2850">아래의 설명을 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2850">See Remark below.</span></span>  
  
 <span data-ttu-id="7d306-2851"><xref:System.Windows.ContentElement.TextInput> 이벤트 합성 컨트롤의 내부 구현에 의해 처리 된 것으로 이미 표시 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2851">The <xref:System.Windows.ContentElement.TextInput> event may already be marked as handled by the internal implementations of composited controls.</span></span> <span data-ttu-id="7d306-2852">예를 들어를 <xref:System.Windows.Controls.TextBox> 복합 컨트롤은 여기서는 <xref:System.Windows.ContentElement.TextInput> 이벤트는 처리로 해당 합치기 내에 이미 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2852">For example, a <xref:System.Windows.Controls.TextBox> is a composited control where the <xref:System.Windows.ContentElement.TextInput> event is already marked as handled; within its compositing.</span></span> <span data-ttu-id="7d306-2853">컨트롤은 컨트롤의 입력을 제어 하는 특별 한 의미 있는 것으로 화살표 키와 같은 일부 형식을 해석 하기 때문에이 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2853">Controls do this because the control needs to interpret some types of input, such as arrow keys, as having special meaning to that control.</span></span> <span data-ttu-id="7d306-2854">사용 하는 경우 <xref:System.Windows.ContentElement.PreviewTextInput> 텍스트 입력에 대 한 처리기를 연결 하는 이벤트로 더 나은 결과가 나타날 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2854">If you use <xref:System.Windows.ContentElement.PreviewTextInput> as the event where you attach handlers for text input, you may receive better results.</span></span> <span data-ttu-id="7d306-2855">이 기술은 대부분의 컨트롤 컴퍼지션이 이미 표시가이 이벤트를 처리 하 고 처리기 이벤트 경로 따라가 이벤트를 수신 하지 못하도록 하는 위치를 우회 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2855">This technique circumvents most cases where control composition has already marked this event as handled and prevents your handler from receiving the event along the event route.</span></span>  
  
 <span data-ttu-id="7d306-2856"><xref:System.Windows.ContentElement.TextInput> 이벤트 구성 요소 또는 장치 독립적인 방식으로 텍스트 입력에 대 한 수신 대기 하도록 응용 프로그램을 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2856">The <xref:System.Windows.ContentElement.TextInput> event allows a component or application to listen for text input in a device-independent manner.</span></span> <span data-ttu-id="7d306-2857">키보드는 방식과 <xref:System.Windows.ContentElement.TextInput>, 음성, 필기 및 기타 입력된 장치를 발생 시킬 수 있지만 <xref:System.Windows.ContentElement.TextInput>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2857">The keyboard is the primary means of <xref:System.Windows.ContentElement.TextInput>, but speech, handwriting, and other input devices can also raise <xref:System.Windows.ContentElement.TextInput>.</span></span>  
  
 <span data-ttu-id="7d306-2858">기본 키보드 또는 입력된 방법 편집기-를 통해 키 조합으로 인해 여러 주요 이벤트 하나만 텍스트 입력된 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2858">Because of key combinations - either in default keyboards or through input method editors - multiple key events might raise just one text input event.</span></span>  
  
 <span data-ttu-id="7d306-2859">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> 이 클래스에 대 한 이벤트를 연결 되도록 <xref:System.Windows.ContentElement.TextInput> 일부인 클래스의 멤버 때 목록을 <xref:System.Windows.ContentElement> 기본 요소로 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2859">This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.ContentElement.TextInput> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element.</span></span> <span data-ttu-id="7d306-2860">에 연결 된 이벤트 처리기를 <xref:System.Windows.ContentElement.TextInput> 이벤트 원본에 연결 된 <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> 연결 된 이벤트와 같은 이벤트 데이터 인스턴스를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2860">Event handlers that are attached to the <xref:System.Windows.ContentElement.TextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_TextInput"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2861">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2861">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2862">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2862">Identifier field</span></span>|<xref:System.Windows.ContentElement.TextInputEvent>|  
|<span data-ttu-id="7d306-2863">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2863">Routing strategy</span></span>|<span data-ttu-id="7d306-2864">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-2864">Bubbling</span></span>|  
|<span data-ttu-id="7d306-2865">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2865">Delegate</span></span>|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   <span data-ttu-id="7d306-2866">해당 터널링 이벤트가 <xref:System.Windows.ContentElement.PreviewTextInput>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2866">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewTextInput>.</span></span>  
  
-   <span data-ttu-id="7d306-2867">재정의 <xref:System.Windows.ContentElement.OnTextInput%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2867">Override <xref:System.Windows.ContentElement.OnTextInput%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.TextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2868"><see cref="E:System.Windows.ContentElement.TextInput" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2868">Identifies the <see cref="E:System.Windows.ContentElement.TextInput" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2869">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2869">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="7d306-2870">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2870">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="7d306-2871">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2871">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="7d306-2872">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2872">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="7d306-2873">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7d306-2873">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchDown;" />
      <MemberSignature Language="F#" Value="member this.TouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2874">손가락이 이 요소 위에 있는 동안 화면을 터치하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2874">Occurs when a finger touches the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2875">기본적으로 <xref:System.Windows.ContentElement.PreviewTouchDown> 고 <xref:System.Windows.ContentElement.TouchDown> 손가락 화면을 터치 하 고 이동 될 때까지 이벤트가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2875">By default, the <xref:System.Windows.ContentElement.PreviewTouchDown> and <xref:System.Windows.ContentElement.TouchDown> events do not occur until a finger touches the screen and moves.</span></span> <span data-ttu-id="7d306-2876">손가락 화면에서 이동 하지 않고 눌러 게를 누른 채로의 동작을 포함 한 <xref:System.Windows.Input.Stylus>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2876">Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>.</span></span> <span data-ttu-id="7d306-2877">키를 누른 동작을 마우스 오른쪽 단추로 클릭 하는 것과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2877">The press and hold behavior is equivalent to a mouse right-click.</span></span>  
  
 <span data-ttu-id="7d306-2878">시킬를 <xref:System.Windows.ContentElement.PreviewTouchDown> 및 <xref:System.Windows.ContentElement.TouchDown> 손가락을 화면을 터치 하는 즉시 발생 하는 이벤트를 설정 합니다 <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> 연결 된 속성을 `false` 이 요소에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2878">To cause the <xref:System.Windows.ContentElement.PreviewTouchDown> and <xref:System.Windows.ContentElement.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> attached property to `false` for this element.</span></span>  
  
<a name="routedEventInfo_TouchDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2879">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2879">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2880">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2880">Identifier field</span></span>|<xref:System.Windows.ContentElement.TouchDownEvent>|  
|<span data-ttu-id="7d306-2881">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2881">Routing strategy</span></span>|<span data-ttu-id="7d306-2882">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-2882">Bubbling</span></span>|  
|<span data-ttu-id="7d306-2883">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2883">Delegate</span></span>|<span data-ttu-id="7d306-2884"><xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.TouchEventArgs>입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2884"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="7d306-2885">해당 터널링 이벤트가 <xref:System.Windows.ContentElement.PreviewTouchDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2885">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewTouchDown>.</span></span>  
  
-   <span data-ttu-id="7d306-2886">재정의 <xref:System.Windows.ContentElement.OnTouchDown%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2886">Override <xref:System.Windows.ContentElement.OnTouchDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="TouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.TouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2887"><see cref="E:System.Windows.ContentElement.TouchDown" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2887">Identifies the <see cref="E:System.Windows.ContentElement.TouchDown" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnter">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchEnter As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchEnter;" />
      <MemberSignature Language="F#" Value="member this.TouchEnter : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchEnter : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2888">터치가 이 요소의 경계 외부에서 내부로 이동할 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2888">Occurs when a touch moves from outside to inside the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d306-2889">이 이벤트는 터치 장치를이 UI 요소에 캡처되는지 여부에 관계 없이 항상 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2889">This event is always raised, whether or not the touch device is captured to this UI element.</span></span>  
  
<a name="routedEventInfo_TouchEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2890">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2890">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2891">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2891">Identifier field</span></span>|<xref:System.Windows.ContentElement.TouchEnterEvent>|  
|<span data-ttu-id="7d306-2892">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2892">Routing strategy</span></span>|<span data-ttu-id="7d306-2893">직접</span><span class="sxs-lookup"><span data-stu-id="7d306-2893">Direct</span></span>|  
|<span data-ttu-id="7d306-2894">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2894">Delegate</span></span>|<span data-ttu-id="7d306-2895"><xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.TouchEventArgs>입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2895"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="7d306-2896">재정의 <xref:System.Windows.ContentElement.OnTouchEnter%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2896">Override <xref:System.Windows.ContentElement.OnTouchEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.TouchEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2897"><see cref="E:System.Windows.ContentElement.TouchEnter" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2897">Identifies the <see cref="E:System.Windows.ContentElement.TouchEnter" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCaptured">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.TouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCaptured As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCaptured { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCaptured : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.ContentElement.TouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2898">이 요소에 캡처된 터치 장치를 모두 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2898">Gets all touch devices that are captured to this element.</span></span></summary>
        <value><span data-ttu-id="7d306-2899">이 요소에 캡처된 <see cref="T:System.Windows.Input.TouchDevice" /> 개체의 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2899">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.TouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCapturedWithin As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCapturedWithin { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCapturedWithin : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.ContentElement.TouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2900">이 요소나 시각적 트리의 임의 자식 요소에 캡처된 터치 장치를 모두 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2900">Gets all touch devices that are captured to this element or any child elements in its visual tree.</span></span></summary>
        <value><span data-ttu-id="7d306-2901">이 요소나 시각적 트리의 임의 자식 요소에 캡처된 <see cref="T:System.Windows.Input.TouchDevice" /> 개체의 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2901">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element or any child elements in its visual tree.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.TouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesDirectlyOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesDirectlyOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesDirectlyOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.ContentElement.TouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2902">이 요소 위에 있는 터치 장치를 모두 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2902">Gets all touch devices that are over this element.</span></span></summary>
        <value><span data-ttu-id="7d306-2903">이 요소 위에 있는 <see cref="T:System.Windows.Input.TouchDevice" /> 개체의 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2903">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.TouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.ContentElement.TouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2904">이 요소나 시각적 트리의 임의 자식 요소 위에 있는 터치 장치를 모두 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2904">Gets all touch devices that are over this element or any child elements in its visual tree.</span></span></summary>
        <value><span data-ttu-id="7d306-2905">이 요소나 시각적 트리의 임의 자식 요소 위에 있는 <see cref="T:System.Windows.Input.TouchDevice" /> 개체의 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2905">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element or any child elements in its visual tree.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeave">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchLeave As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchLeave;" />
      <MemberSignature Language="F#" Value="member this.TouchLeave : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchLeave : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2906">터치가 이 요소의 경계 내부에서 외부로 이동할 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2906">Occurs when a touch moves from inside to outside the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2907">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2907">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2908">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2908">Identifier field</span></span>|<xref:System.Windows.ContentElement.TouchLeaveEvent>|  
|<span data-ttu-id="7d306-2909">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2909">Routing strategy</span></span>|<span data-ttu-id="7d306-2910">직접</span><span class="sxs-lookup"><span data-stu-id="7d306-2910">Direct</span></span>|  
|<span data-ttu-id="7d306-2911">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2911">Delegate</span></span>|<span data-ttu-id="7d306-2912"><xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.TouchEventArgs>입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2912"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="7d306-2913">재정의 <xref:System.Windows.ContentElement.OnTouchLeave%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2913">Override <xref:System.Windows.ContentElement.OnTouchLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.TouchLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2914"><see cref="E:System.Windows.ContentElement.TouchLeave" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2914">Identifies the <see cref="E:System.Windows.ContentElement.TouchLeave" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchMove;" />
      <MemberSignature Language="F#" Value="member this.TouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2915">손가락이 이 요소 위에 있는 동안 화면에서 손가락을 움직이면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2915">Occurs when a finger moves on the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2916">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2916">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2917">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2917">Identifier field</span></span>|<xref:System.Windows.ContentElement.TouchMoveEvent>|  
|<span data-ttu-id="7d306-2918">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2918">Routing strategy</span></span>|<span data-ttu-id="7d306-2919">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-2919">Bubbling</span></span>|  
|<span data-ttu-id="7d306-2920">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2920">Delegate</span></span>|<span data-ttu-id="7d306-2921"><xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.TouchEventArgs>입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2921"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="7d306-2922">해당 터널링 이벤트가 <xref:System.Windows.ContentElement.PreviewTouchMove>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2922">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewTouchMove>.</span></span>  
  
-   <span data-ttu-id="7d306-2923">재정의 <xref:System.Windows.ContentElement.OnTouchMove%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2923">Override <xref:System.Windows.ContentElement.OnTouchMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.TouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2924"><see cref="E:System.Windows.ContentElement.TouchMove" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2924">Identifies the <see cref="E:System.Windows.ContentElement.TouchMove" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchUp;" />
      <MemberSignature Language="F#" Value="member this.TouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2925">손가락이 이 요소 위에 있는 동안 화면에서 손가락을 떼면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2925">Occurs when a finger is raised off of the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="7d306-2926">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="7d306-2926">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7d306-2927">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="7d306-2927">Identifier field</span></span>|<xref:System.Windows.ContentElement.TouchUpEvent>|  
|<span data-ttu-id="7d306-2928">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="7d306-2928">Routing strategy</span></span>|<span data-ttu-id="7d306-2929">버블링</span><span class="sxs-lookup"><span data-stu-id="7d306-2929">Bubbling</span></span>|  
|<span data-ttu-id="7d306-2930">대리자</span><span class="sxs-lookup"><span data-stu-id="7d306-2930">Delegate</span></span>|<span data-ttu-id="7d306-2931"><xref:System.EventHandler%601> 형식의 <xref:System.Windows.Input.TouchEventArgs>입니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2931"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="7d306-2932">해당 터널링 이벤트가 <xref:System.Windows.ContentElement.PreviewTouchUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2932">The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewTouchUp>.</span></span>  
  
-   <span data-ttu-id="7d306-2933">재정의 <xref:System.Windows.ContentElement.OnTouchUp%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2933">Override <xref:System.Windows.ContentElement.OnTouchUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.TouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d306-2934"><see cref="E:System.Windows.ContentElement.TouchUp" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="7d306-2934">Identifies the <see cref="E:System.Windows.ContentElement.TouchUp" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>