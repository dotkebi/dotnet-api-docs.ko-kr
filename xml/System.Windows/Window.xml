<Type Name="Window" FullName="System.Windows.Window">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9d43e1669777630039410a6a9e7e3d24852c6ad1" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57937124" /></Metadata><TypeSignature Language="C#" Value="public class Window : System.Windows.Controls.ContentControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Window extends System.Windows.Controls.ContentControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Window" />
  <TypeSignature Language="VB.NET" Value="Public Class Window&#xA;Inherits ContentControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class Window : System::Windows::Controls::ContentControl" />
  <TypeSignature Language="F#" Value="type Window = class&#xA;    inherit ContentControl" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.ContentControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Ignore)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="2ab17-101">창과 대화 상자의 수명을 생성, 구성, 표시 및 관리하는 기능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-101">Provides the ability to create, configure, show, and manage the lifetime of windows and dialog boxes.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-102">사용자와 독립 실행형 응용 프로그램 간의 상호 작용 지점 창입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-102">The point of interaction between a user and a standalone application is a window.</span></span> <span data-ttu-id="2ab17-103">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 창 두 고유 영역으로 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-103">A [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window consists of two distinct areas:</span></span>  
  
-   <span data-ttu-id="2ab17-104">아이콘, 제목, 시스템 메뉴를 포함 하 여 windows 도구 영역을 호스트 하는 비클라이언트 영역을 최소화 단추, 단추, 복원 단추, 닫기 단추 및 테두리를 최대화 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-104">A non-client area, which hosts the windows adornments, including an icon, title, System menu, minimize button, maximize button, restore button, close button, and a border.</span></span>  
  
-   <span data-ttu-id="2ab17-105">응용 프로그램별 콘텐츠를 호스트 하는 클라이언트 영역입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-105">A client area, which hosts application-specific content.</span></span>  
  
 <span data-ttu-id="2ab17-106">표준 창 다음 그림에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-106">A standard window is shown in the following figure:</span></span>  
  
 <span data-ttu-id="2ab17-107">![창 요소](~/add/media/windowoverviewfigure1.PNG "창 요소")</span><span class="sxs-lookup"><span data-stu-id="2ab17-107">![Window elements](~/add/media/windowoverviewfigure1.PNG "Window elements")</span></span>  
  
 <span data-ttu-id="2ab17-108"><xref:System.Windows.Window> 만들기, 구성, 표시 및 창과 대화 상자 모두의 수명을 관리 하는 기능을 캡슐화 하 고 다음과 같은 핵심 서비스를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-108"><xref:System.Windows.Window> encapsulates the ability to create, configure, show, and manage the lifetime of both windows and dialog boxes, and provides the following key services:</span></span>  
  
 <span data-ttu-id="2ab17-109">**수명 관리**: <xref:System.Windows.Window.Activate%2A>, <xref:System.Windows.Window.Activated>, <xref:System.Windows.Window.Close%2A>, <xref:System.Windows.Window.Closed>를 <xref:System.Windows.Window.Closing>, <xref:System.Windows.Window.Deactivated>를 <xref:System.Windows.Window.Hide%2A>, <xref:System.Windows.Window.IsActive%2A>를 <xref:System.Windows.Window.Show%2A>, <xref:System.Windows.Window.SourceInitialized>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-109">**Lifetime Management**: <xref:System.Windows.Window.Activate%2A>, <xref:System.Windows.Window.Activated>, <xref:System.Windows.Window.Close%2A>, <xref:System.Windows.Window.Closed>, <xref:System.Windows.Window.Closing>, <xref:System.Windows.Window.Deactivated>, <xref:System.Windows.Window.Hide%2A>, <xref:System.Windows.Window.IsActive%2A>, <xref:System.Windows.Window.Show%2A>, <xref:System.Windows.Window.SourceInitialized>.</span></span>  
  
 <span data-ttu-id="2ab17-110">**창 관리**: <xref:System.Windows.Window.GetWindow%2A>하십시오 <xref:System.Windows.Window.OwnedWindows%2A>, <xref:System.Windows.Window.Owner%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-110">**Window Management**: <xref:System.Windows.Window.GetWindow%2A>, <xref:System.Windows.Window.OwnedWindows%2A>, <xref:System.Windows.Window.Owner%2A>.</span></span>  
  
 <span data-ttu-id="2ab17-111">**모양 및 동작**: <xref:System.Windows.Window.AllowsTransparency%2A>, <xref:System.Windows.Window.ContentRendered>, <xref:System.Windows.Window.DragMove%2A>, <xref:System.Windows.Window.Icon%2A>를 <xref:System.Windows.Window.Left%2A>, <xref:System.Windows.Window.LocationChanged>를 <xref:System.Windows.Window.ResizeMode%2A>, <xref:System.Windows.Window.RestoreBounds%2A>를 <xref:System.Windows.Window.ShowActivated%2A>, <xref:System.Windows.Window.ShowInTaskbar%2A>, <xref:System.Windows.Window.SizeToContent%2A>, <xref:System.Windows.Window.StateChanged>, <xref:System.Windows.Window.Title%2A>, <xref:System.Windows.Window.Top%2A>, <xref:System.Windows.Window.Topmost%2A>, <xref:System.Windows.Window.WindowStartupLocation%2A>, <xref:System.Windows.Window.WindowState%2A>, <xref:System.Windows.Window.WindowStyle%2A></span><span class="sxs-lookup"><span data-stu-id="2ab17-111">**Appearance and Behavior**: <xref:System.Windows.Window.AllowsTransparency%2A>, <xref:System.Windows.Window.ContentRendered>, <xref:System.Windows.Window.DragMove%2A>, <xref:System.Windows.Window.Icon%2A>, <xref:System.Windows.Window.Left%2A>, <xref:System.Windows.Window.LocationChanged>, <xref:System.Windows.Window.ResizeMode%2A>, <xref:System.Windows.Window.RestoreBounds%2A>, <xref:System.Windows.Window.ShowActivated%2A>, <xref:System.Windows.Window.ShowInTaskbar%2A>, <xref:System.Windows.Window.SizeToContent%2A>, <xref:System.Windows.Window.StateChanged>, <xref:System.Windows.Window.Title%2A>, <xref:System.Windows.Window.Top%2A>, <xref:System.Windows.Window.Topmost%2A>, <xref:System.Windows.Window.WindowStartupLocation%2A>, <xref:System.Windows.Window.WindowState%2A>, <xref:System.Windows.Window.WindowStyle%2A></span></span>  
  
 <span data-ttu-id="2ab17-112">**대화 상자**: <xref:System.Windows.Window.DialogResult%2A>, <xref:System.Windows.Window.ShowDialog%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-112">**Dialog Boxes**: <xref:System.Windows.Window.DialogResult%2A>, <xref:System.Windows.Window.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="2ab17-113">또한 <xref:System.Windows.Application> 모든 응용 프로그램의 창 관리에 대 한 특별 한 지원을 노출 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-113">Additionally, <xref:System.Windows.Application> exposes special support for managing all of the windows in an application:</span></span>  
  
-   <span data-ttu-id="2ab17-114">응용 프로그램에는 현재 응용 프로그램에서 인스턴스화되는 모든 windows의 목록을 유지 관리 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-114">Application maintains a list of all the windows that are currently instantiated in the application.</span></span> <span data-ttu-id="2ab17-115">이 목록에 의해 노출 되는 <xref:System.Windows.Application.Windows%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-115">This list is exposed by the <xref:System.Windows.Application.Windows%2A> property.</span></span>  
  
-   <span data-ttu-id="2ab17-116">기본적으로 <xref:System.Windows.Application.MainWindow%2A> 첫 번째에 대 한 참조를 사용 하 여 자동으로 설정 됩니다 <xref:System.Windows.Window> 는 응용 프로그램에서 인스턴스화됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-116">By default, <xref:System.Windows.Application.MainWindow%2A> is automatically set with a reference to the first <xref:System.Windows.Window> that is instantiated in an application.</span></span> <span data-ttu-id="2ab17-117">따라서이 창의 기본 응용 프로그램 창입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-117">This thereby making the window the main application window.</span></span>  
  
 <span data-ttu-id="2ab17-118"><xref:System.Windows.Window> 태그, 태그 및 코드 숨김 또는 코드를 사용 하 여 구현할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-118">A <xref:System.Windows.Window> can be implemented using markup, markup and code-behind, or code.</span></span>  
  
 <span data-ttu-id="2ab17-119"><xref:System.Windows.Window> windows 및 독립 실행형 응용 프로그램에 대 한 대화 상자를 표시할 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-119"><xref:System.Windows.Window> is primarily used to display windows and dialog boxes for standalone applications.</span></span> <span data-ttu-id="2ab17-120">그러나 탐색 마법사와 같은 창 수준에서 필요한 응용 프로그램을 사용할 수 있습니다 <xref:System.Windows.Navigation.NavigationWindow> 대신; <xref:System.Windows.Navigation.NavigationWindow> 에서 파생 <xref:System.Windows.Window> 브라우저 스타일 탐색 지원을 통해 확장 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-120">However, for applications that require navigation at the window level, such as wizards, you can use <xref:System.Windows.Navigation.NavigationWindow> instead; <xref:System.Windows.Navigation.NavigationWindow> derives from <xref:System.Windows.Window> and extends it with browser-style navigation support.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ab17-121">탐색 가능한 콘텐츠를 사용 하 여 다른 콘텐츠 및 콘텐츠 컨테이너에 통합할 수 <xref:System.Windows.Controls.Frame>입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-121">Islands of navigable content can be incorporated into other content and content containers using <xref:System.Windows.Controls.Frame>.</span></span>  
  
 <span data-ttu-id="2ab17-122"><xref:System.Windows.Window> 필요한 `UnmanagedCode` 보안 권한을 인스턴스화해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-122"><xref:System.Windows.Window> needs `UnmanagedCode` security permission to be instantiated.</span></span> <span data-ttu-id="2ab17-123">이 다음과 같은 결과가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-123">This has the following consequences:</span></span>  
  
-   [!INCLUDE[TLA#tla_clickonce](~/includes/tlasharptla-clickonce-md.md)]<span data-ttu-id="2ab17-124">-배포 된 독립 실행형 응용 프로그램은 인터넷 또는 로컬 인트라넷 영역에서 시작 하는 경우 권한 상승을 요청 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-124">-deployed standalone applications will request permission elevation when launched from either the Internet or Local Intranet zones.</span></span>  
  
-   [!INCLUDE[TLA2#tla_xbap#plural](~/includes/tla2sharptla-xbapsharpplural-md.md)] <span data-ttu-id="2ab17-125">보다 낮은 권한을 요청 전체 사용 권한 창 또는 대화 상자를 인스턴스화할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-125">that request anything less than full permissions will not be able to instantiate windows or dialog boxes.</span></span>  
  
 <span data-ttu-id="2ab17-126">독립 실행형 응용 프로그램 배포 및 보안 고려 사항에 대 한 자세한 내용은 [WPF 보안 전략-플랫폼 보안](~/docs/framework/wpf/wpf-security-strategy-platform-security.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-126">For information about standalone application deployment and security considerations, see [WPF Security Strategy - Platform Security](~/docs/framework/wpf/wpf-security-strategy-platform-security.md).</span></span>  
  
 <span data-ttu-id="2ab17-127">A <xref:System.Windows.Window> 는 <xref:System.Windows.Controls.ContentControl>, 즉, 모든 형식 (예: 문자열, 이미지 또는 패널)의 단일 개체가 포함 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-127">A <xref:System.Windows.Window> is a <xref:System.Windows.Controls.ContentControl>, which means that it can contain a single object of any type (such as a string, an image, or a panel).</span></span> <span data-ttu-id="2ab17-128">자세한 내용은 <xref:System.Windows.Controls.ContentControl> 클래스를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="2ab17-128">For more information, see the <xref:System.Windows.Controls.ContentControl> class.</span></span> <span data-ttu-id="2ab17-129">또한 <xref:System.Windows.Window> 루트 요소 이며, 따라서 다른 요소의 콘텐츠가 포함 될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-129">Also, <xref:System.Windows.Window> is a root element and, therefore, cannot be part of another element's content.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ab17-130">합니다 <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.Window.Top%2A>, 및 <xref:System.Windows.Window.Left%2A> 에 설정 된 속성을 <xref:System.Windows.Window> 스타일을 통해 적용 되지 것입니다 런타임 시.</span><span class="sxs-lookup"><span data-stu-id="2ab17-130">The <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.Window.Top%2A>, and <xref:System.Windows.Window.Left%2A> properties set on a <xref:System.Windows.Window> through a style will not be applied at run time.</span></span>  
  
## <a name="customizing-the-window-control"></a><span data-ttu-id="2ab17-131">창 컨트롤을 사용자 지정</span><span class="sxs-lookup"><span data-stu-id="2ab17-131">Customizing the Window Control</span></span>  
 <span data-ttu-id="2ab17-132">여러 동일한 속성 설정에 적용할 <xref:System.Windows.Window> 컨트롤을 사용 하 여는 <xref:System.Windows.FrameworkElement.Style%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-132">To apply the same property settings to multiple <xref:System.Windows.Window> controls, use the <xref:System.Windows.FrameworkElement.Style%2A> property.</span></span> <span data-ttu-id="2ab17-133">기본값을 수정할 수 있습니다 <xref:System.Windows.Controls.ControlTemplate> 고유한 모양을 제어할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-133">You can modify the default <xref:System.Windows.Controls.ControlTemplate> to give the control a unique appearance.</span></span> <span data-ttu-id="2ab17-134">만들기에 대 한 자세한 내용은 <xref:System.Windows.Controls.ControlTemplate>를 참조 하세요 [ControlTemplate을 만들어 기존 컨트롤의 모양 사용자 지정](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-134">For more information about creating a <xref:System.Windows.Controls.ControlTemplate>, see [Customizing the Appearance of an Existing Control by Creating a ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).</span></span>  <span data-ttu-id="2ab17-135">부분과 관련 된 상태를 보려면 합니다 <xref:System.Windows.Window>를 참조 하세요 [Window 스타일 및 템플릿](~/docs/framework/wpf/controls/window-styles-and-templates.md).</span><span class="sxs-lookup"><span data-stu-id="2ab17-135">To see the parts and states that are specific to the <xref:System.Windows.Window>, see [Window Styles and Templates](~/docs/framework/wpf/controls/window-styles-and-templates.md).</span></span>  
  
 <span data-ttu-id="2ab17-136">이 컨트롤에 대 한 종속성 속성은 컨트롤의 기본 스타일으로 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-136">Dependency properties for this control might be set by the control's default style.</span></span>  <span data-ttu-id="2ab17-137">속성이 설정 된 기본 스타일을 컨트롤 응용 프로그램에 표시 되 면 속성 값이 기본값에서 변경 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-137">If a property is set by a default style, the property might change from its default value when the control appears in the application.</span></span> <span data-ttu-id="2ab17-138">기본 스타일은 응용 프로그램 실행 중일 때 사용 되는 바탕 화면 테마에서 결정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-138">The default style is determined by which desktop theme is used when the application is running.</span></span>  <span data-ttu-id="2ab17-139">자세한 내용은 [기본 WPF 테마](https://go.microsoft.com/fwlink/?LinkID=158252)합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-139">For more information, see [Default WPF Themes](https://go.microsoft.com/fwlink/?LinkID=158252).</span></span>  
  
[!INCLUDE[setting-a-visual-property](~/includes/visual-property-note.md)]  
  
## Examples  
 <span data-ttu-id="2ab17-140">다음 예제에서는 표준 창의 성은 태그를 사용 하 여 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-140">The following example shows how a standard window is defined using only markup:</span></span>  
  
 [!code-xaml[WindowSnippets#WindowMARKUPONLY](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/MarkupOnlyWindow.xaml#windowmarkuponly)]  
  
 <span data-ttu-id="2ab17-141">다음 예제에서는 표준 창을 사용 하 여 정의 하는 방법만 코드:</span><span class="sxs-lookup"><span data-stu-id="2ab17-141">The following example shows how a standard window is defined using only code:</span></span>  
  
 [!code-csharp[WindowSnippets#WindowCODEONLY](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/CodeOnlyWindow.cs#windowcodeonly)]
 [!code-vb[WindowSnippets#WindowCODEONLY](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowSnippets/visualbasic/codeonlywindow.vb#windowcodeonly)]  
  
 <span data-ttu-id="2ab17-142">다음 예제에서는 표준 창의 성은 태그 및 코드 숨김의 조합을 사용 하 여 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-142">The following example shows how a standard window is defined using a combination of markup and code-behind.</span></span>  
  
 [!code-xaml[WindowSnippets#WindowXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/MainWindow.xaml#windowxaml)]  
  
 [!code-csharp[WindowSnippets#WindowCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/MainWindow.xaml.cs#windowcodebehind)]
 [!code-vb[WindowSnippets#WindowCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowSnippets/visualbasic/mainwindow.xaml.vb#windowcodebehind)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Window.Show" />
    <altmember cref="M:System.Windows.Window.ShowDialog" />
    <altmember cref="P:System.Windows.Window.DialogResult" />
    <altmember cref="T:System.Windows.Application" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Window ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Window();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2ab17-143"><see cref="T:System.Windows.Window" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-143">Initializes a new instance of the <see cref="T:System.Windows.Window" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-144">생성자가 초기화 하는 <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.FrameworkElement.Height%2A>를 <xref:System.Windows.Window.Top%2A>, 및 <xref:System.Windows.Window.Left%2A> 속성을 기본 <xref:System.Windows.Window> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-144">The constructor initializes the <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.Window.Top%2A>, and <xref:System.Windows.Window.Left%2A> properties to their default <xref:System.Windows.Window> values.</span></span>  
  
 <span data-ttu-id="2ab17-145">창 내에서 만들어지는 경우는 <xref:System.AppDomain> 있는 <xref:System.Windows.Application> 개체를 추가 하는 생성자를 <xref:System.Windows.Window> 개체 집합에 <xref:System.Windows.Application>-를 통해 windows 관리를 <xref:System.Windows.Application.Windows%2A> 의 속성을 <xref:System.Windows.Application> 개체.</span><span class="sxs-lookup"><span data-stu-id="2ab17-145">If a window is created within an <xref:System.AppDomain> that has an <xref:System.Windows.Application> object, the constructor adds the <xref:System.Windows.Window> object to the set of <xref:System.Windows.Application>-managed windows via the <xref:System.Windows.Application.Windows%2A> property of the <xref:System.Windows.Application> object.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="2ab17-146">안전 하지 않은 네이티브 메서드를 호출 하 여이 개체에 대해 필요한 권한입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-146">for permission for this object to call unsafe native methods.</span></span> <span data-ttu-id="2ab17-147">연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="2ab17-147">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="public bool Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Activate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.Activate" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Activate();" />
      <MemberSignature Language="F#" Value="member this.Activate : unit -&gt; bool" Usage="window.Activate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2ab17-148">창을 전경으로 가져오고 활성화하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-148">Attempts to bring the window to the foreground and activates it.</span></span></summary>
        <returns><span data-ttu-id="2ab17-149"><see cref="T:System.Windows.Window" />가 활성화된 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-149"><see langword="true" /> if the <see cref="T:System.Windows.Window" /> was successfully activated; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-150">창 활성화 되는지 여부를 결정 하는 규칙에서 사용 하는 것과 동일 합니다 [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] `SetForegroundWindow` 함수 (User32.dll).</span><span class="sxs-lookup"><span data-stu-id="2ab17-150">The rules that determine whether the window is activated are the same as those used by the [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] `SetForegroundWindow` function (User32.dll).</span></span>  
  
 <span data-ttu-id="2ab17-151">창이 전경 응용 프로그램이 사용자의 Windows Presentation Foundation 응용 프로그램에서 활성화 된 경우 <xref:System.Windows.Application.Activated> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-151">If the window is activated in a Windows Presentation Foundation application that is not the user's foreground application, <xref:System.Windows.Application.Activated> event is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ab17-152">창이 브라우저에서 호스팅될 때이 메서드를 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-152">This method cannot be called when a window is hosted in a browser.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="2ab17-153">창을 활성화할 수 있는 권한입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-153">for permission to activate a window.</span></span> <span data-ttu-id="2ab17-154">연결 된 열거형: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="2ab17-154">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="E:System.Windows.Window.Activated" />
        <altmember cref="E:System.Windows.Window.Deactivated" />
        <altmember cref="P:System.Windows.Window.IsActive" />
      </Docs>
    </Member>
    <Member MemberName="Activated">
      <MemberSignature Language="C#" Value="public event EventHandler Activated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Activated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.Activated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Activated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Activated;" />
      <MemberSignature Language="F#" Value="member this.Activated : EventHandler " Usage="member this.Activated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-155">창이 전경 창이 되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-155">Occurs when a window becomes the foreground window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-156">창이 활성화 됩니다 (전경 창이 되) 때:</span><span class="sxs-lookup"><span data-stu-id="2ab17-156">A window is activated (becomes the foreground window) when:</span></span>  
  
-   <span data-ttu-id="2ab17-157">먼저 창이 열려 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-157">The window is first opened.</span></span>  
  
-   <span data-ttu-id="2ab17-158">ALT + TAB을 눌러 마우스를 사용 하 여 또는 작업 관리자에서 선택 하 여 사용자를 창으로 전환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-158">A user switches to a window by selecting it with the mouse, pressing ALT+TAB, or from Task Manager.</span></span>  
  
-   <span data-ttu-id="2ab17-159">사용자가 창의 작업 표시줄 단추를 클릭 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-159">A user clicks the window's taskbar button.</span></span>  
  
 <span data-ttu-id="2ab17-160">활성화 되는 경우를 감지 해야 하는 Windows를 처리할 수는 <xref:System.Windows.Window.Activated> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-160">Windows that need to detect when they become activate can handle the <xref:System.Windows.Window.Activated> event.</span></span>  
  
 <span data-ttu-id="2ab17-161">창이 처음 활성화 한 후 비활성화 하 고 해당 수명 동안 여러 번 다시 활성화 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-161">After a window is first activated, it may be deactivated and reactivated many times during its lifetime.</span></span> <span data-ttu-id="2ab17-162">응용 프로그램의 동작 또는 상태 정품 인증 상태에 의존 하는 경우 검사 수 <xref:System.Windows.Window.IsActive%2A> 있는 정품 인증 상태를 확인 하려면.</span><span class="sxs-lookup"><span data-stu-id="2ab17-162">If an application's behavior or state depends on its activation state, it can inspect <xref:System.Windows.Window.IsActive%2A> to determine which activation state it's in.</span></span>  
  
 <span data-ttu-id="2ab17-163">응용 프로그램 일 수도 있습니다 <xref:System.Windows.Application.Activated>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-163">An application can also be <xref:System.Windows.Application.Activated>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Window.Deactivated" />
        <altmember cref="M:System.Windows.Window.Activate" />
        <altmember cref="P:System.Windows.Window.IsActive" />
      </Docs>
    </Member>
    <Member MemberName="AllowsTransparency">
      <MemberSignature Language="C#" Value="public bool AllowsTransparency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsTransparency" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.AllowsTransparency" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowsTransparency As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowsTransparency { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowsTransparency : bool with get, set" Usage="System.Windows.Window.AllowsTransparency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-164">창의 클라이언트 영역에서 투명도를 지원하는지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-164">Gets or sets a value that indicates whether a window's client area supports transparency.</span></span></summary>
        <value><span data-ttu-id="2ab17-165">창에서 투명도를 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-165"><see langword="true" /> if the window supports transparency; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-166">경우는 <xref:System.Windows.Controls.Control.Background%2A> 창의 속성을 투명 한 색을 사용 하 여 <xref:System.Windows.Media.Brushes.Transparent%2A> 예를 들어 창을 불투명 하 게 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-166">When the <xref:System.Windows.Controls.Control.Background%2A> property of a window is set to a transparent color, using <xref:System.Windows.Media.Brushes.Transparent%2A> for example, the window remains opaque.</span></span> <span data-ttu-id="2ab17-167">즉, 데스크톱 및 "beneath" 창의 실행 중인 응용 프로그램을 볼 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-167">This means that the desktop and any running applications "beneath" the window cannot be seen.</span></span> <span data-ttu-id="2ab17-168">이 형식의 투명도 사용할 수 있도록 <xref:System.Windows.Window.AllowsTransparency%2A> 으로 설정 되어 있어야 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-168">To enable this type of transparency, <xref:System.Windows.Window.AllowsTransparency%2A> must be set to `true`.</span></span>  
  
 <span data-ttu-id="2ab17-169"><xref:System.Windows.Window.AllowsTransparency%2A> 사각형이 아닌 창 만들기를 용이 하 게 존재 때 <xref:System.Windows.Window.AllowsTransparency%2A> 로 설정 된 `true`, 창의 <xref:System.Windows.Window.WindowStyle%2A> 속성으로 설정 되어 있어야 <xref:System.Windows.WindowStyle.None>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-169"><xref:System.Windows.Window.AllowsTransparency%2A> exists to facilitate the creation of non-rectangular windows, and, consequently, when <xref:System.Windows.Window.AllowsTransparency%2A> is set to `true`, a window's <xref:System.Windows.Window.WindowStyle%2A> property must be set to <xref:System.Windows.WindowStyle.None>.</span></span>  
  
<a name="dependencyPropertyInfo_WindowAllowsTransparency"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="2ab17-170">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="2ab17-170">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2ab17-171">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="2ab17-171">Identifier field</span></span>|<xref:System.Windows.Window.AllowsTransparencyProperty>|  
|<span data-ttu-id="2ab17-172">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="2ab17-172">Metadata properties set to `true`</span></span>|<span data-ttu-id="2ab17-173">없음</span><span class="sxs-lookup"><span data-stu-id="2ab17-173">None</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ab17-174">창의 <see cref="P:System.Windows.Window.WindowStyle" /> 값이 <see cref="F:System.Windows.WindowStyle.None" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="2ab17-174">A window that has a <see cref="P:System.Windows.Window.WindowStyle" /> value of anything other than <see cref="F:System.Windows.WindowStyle.None" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AllowsTransparencyProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowsTransparencyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowsTransparencyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.AllowsTransparencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowsTransparencyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowsTransparencyProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AllowsTransparencyProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.AllowsTransparencyProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-175"><see cref="P:System.Windows.Window.AllowsTransparency" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-175">Identifies the <see cref="P:System.Windows.Window.AllowsTransparency" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrangeOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.Size ArrangeOverride (System.Windows.Size arrangeBounds);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size ArrangeOverride(valuetype System.Windows.Size arrangeBounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ArrangeOverride (arrangeBounds As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size ArrangeOverride(System::Windows::Size arrangeBounds);" />
      <MemberSignature Language="F#" Value="override this.ArrangeOverride : System.Windows.Size -&gt; System.Windows.Size" Usage="window.ArrangeOverride arrangeBounds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arrangeBounds" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="arrangeBounds"><span data-ttu-id="2ab17-176">창이 해당 창과 자식을 정렬하는 데 사용해야 하는 최종 크기를 반영하는 <see cref="T:System.Windows.Size" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-176">A <see cref="T:System.Windows.Size" /> that reflects the final size that the window should use to arrange itself and its children.</span></span></param>
        <summary><span data-ttu-id="2ab17-177">이 메서드를 재정의하여 창과 자식 요소를 정렬하고 크기를 조정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-177">Override this method to arrange and size a window and its child elements.</span></span></summary>
        <returns><span data-ttu-id="2ab17-178">사용된 실제 크기를 반영하는 <see cref="T:System.Windows.Size" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-178">A <see cref="T:System.Windows.Size" /> that reflects the actual size that was used.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-179"><xref:System.Windows.Window.ArrangeOverride%2A> 경우 라고 합니다 <xref:System.Windows.UIElement.Visibility%2A> 속성의 값이 <xref:System.Windows.Visibility.Collapsed>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-179"><xref:System.Windows.Window.ArrangeOverride%2A> is not called when the <xref:System.Windows.UIElement.Visibility%2A> property has a value of <xref:System.Windows.Visibility.Collapsed>.</span></span> <span data-ttu-id="2ab17-180">하는 경우의 값을 <xref:System.Windows.UIElement.Visibility%2A> 속성이 <xref:System.Windows.Visibility.Hidden> 또는 <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.ArrangeOverride%2A> 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-180">If the value of the <xref:System.Windows.UIElement.Visibility%2A> property is either <xref:System.Windows.Visibility.Hidden> or <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.ArrangeOverride%2A> is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ab17-181">경우 중 하나 <xref:System.Windows.Window.Show%2A> 또는 <xref:System.Windows.Window.ShowDialog%2A> 호출 되는 <xref:System.Windows.UIElement.Visibility%2A> 의 속성을 <xref:System.Windows.Window> 로 설정 된 <xref:System.Windows.Visibility.Visible>.</span><span class="sxs-lookup"><span data-stu-id="2ab17-181">When either <xref:System.Windows.Window.Show%2A> or <xref:System.Windows.Window.ShowDialog%2A> are called, the <xref:System.Windows.UIElement.Visibility%2A> property of a <xref:System.Windows.Window> is set to <xref:System.Windows.Visibility.Visible>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.Window.MeasureOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="window.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2ab17-182">수동으로 <see cref="T:System.Windows.Window" />를 닫습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-182">Manually closes a <see cref="T:System.Windows.Window" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-183"><xref:System.Windows.Window> , 여러 가지 방법 중 하나를 사용 하 여 닫아야 바 포함 하 여 제목에 있는 잘 알려진 시스템 제공 메커니즘:</span><span class="sxs-lookup"><span data-stu-id="2ab17-183">A <xref:System.Windows.Window> can be closed using one of several, well-known, system-provided mechanisms located in its title bar, including:</span></span>  
  
-   <span data-ttu-id="2ab17-184">ALT+F4입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-184">ALT+F4.</span></span>  
  
-   <span data-ttu-id="2ab17-185">시스템 메뉴 &#124; **닫습니다**합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-185">System menu &#124; **Close**.</span></span>  
  
-   <span data-ttu-id="2ab17-186">**닫기** 단추입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-186">**Close** button.</span></span>  
  
 <span data-ttu-id="2ab17-187"><xref:System.Windows.Window> 클라이언트 영역 내에서 개발자에 게 제공 되는 몇 가지 잘 알려진 메커니즘 중 하나를 사용 하 여 닫을 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-187">A <xref:System.Windows.Window> can also be closed using one of several well-known mechanisms within the client area that are provided by developers, including:</span></span>  
  
-   <span data-ttu-id="2ab17-188">**파일** &#124; **끝내기** 주 창에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-188">**File** &#124; **Exit** on a main window.</span></span>  
  
-   <span data-ttu-id="2ab17-189">**파일** &#124; **닫습니다** 또는 **닫습니다** 자식 창에는 단추입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-189">**File** &#124; **Close** or a **Close** button on a child window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ab17-190">**확인** 및 **취소** 대화 상자의 단추 개발자 제공한도 있지만 설정할 가능성이 <xref:System.Windows.Window.DialogResult%2A>를 호출 하 여 열려 있는 창을 자동으로 닫는 <xref:System.Windows.Window.ShowDialog%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-190">**OK** and **Cancel** buttons on a dialog box are also developer-provided, although will likely set <xref:System.Windows.Window.DialogResult%2A>, which automatically closes a window that was opened by calling <xref:System.Windows.Window.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="2ab17-191">이러한 메커니즘을 사용 하면 명시적으로 호출 해야 <xref:System.Windows.Window.Close%2A> 는 창을 닫습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-191">These mechanisms require you to explicitly call <xref:System.Windows.Window.Close%2A> to close a window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ab17-192">호출로 열린 창, 하는 경우 <xref:System.Windows.Window.ShowDialog%2A>, 및는 <xref:System.Windows.Controls.Button> 사용 하 여 해당 <xref:System.Windows.Controls.Button.IsCancel%2A> 단추를 클릭 하거나, 또는 esc 키를 누를 때에 자동으로 속성을 true로 설정할 닫힙니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-192">If a window, opened by calling <xref:System.Windows.Window.ShowDialog%2A>, and with a <xref:System.Windows.Controls.Button> with its <xref:System.Windows.Controls.Button.IsCancel%2A> property set to true, will automatically close when the button is either clicked, or ESC is pressed.</span></span> <span data-ttu-id="2ab17-193">창을 사용 하 여 열렸으면 <xref:System.Windows.Window.Show%2A>그러나 <xref:System.Windows.Window.Close%2A> 에서 같이 명시적으로 호출 해야 <xref:System.Windows.Controls.Primitives.ButtonBase.Click> 에 대 한 이벤트 처리기는 <xref:System.Windows.Controls.Button>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-193">If the window was opened using <xref:System.Windows.Window.Show%2A>, however, <xref:System.Windows.Window.Close%2A> must be explicitly called, such as from <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event handler for the <xref:System.Windows.Controls.Button>.</span></span>  
  
 <span data-ttu-id="2ab17-194">창을 닫으면는 <xref:System.Windows.Window.Closing> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-194">Closing a window causes the <xref:System.Windows.Window.Closing> event to be raised.</span></span> <span data-ttu-id="2ab17-195">경우는 <xref:System.Windows.Window.Closing> 이벤트 취소 하지 않으면 다음이 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-195">If the <xref:System.Windows.Window.Closing> event isn't canceled, the following occurs:</span></span>  
  
-   <span data-ttu-id="2ab17-196">합니다 <xref:System.Windows.Window> 에서 제거 됩니다 <xref:System.Windows.Application.Windows%2A?displayProperty=nameWithType> (하는 경우는 <xref:System.Windows.Application> 개체가).</span><span class="sxs-lookup"><span data-stu-id="2ab17-196">The <xref:System.Windows.Window> is removed from <xref:System.Windows.Application.Windows%2A?displayProperty=nameWithType> (if an <xref:System.Windows.Application> object exists).</span></span>  
  
-   <span data-ttu-id="2ab17-197"><xref:System.Windows.Window> 소유자에서 제거 됩니다 <xref:System.Windows.Window> 소유자 소유 관계가 설정 된 경우를 소유 하기 전에 <xref:System.Windows.Window> 표시 된 소유자 후 <xref:System.Windows.Window> 열렸습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-197">The <xref:System.Windows.Window> is removed from the owner <xref:System.Windows.Window> if the owner/owned relationship was established before the owned <xref:System.Windows.Window> was shown and after the owner <xref:System.Windows.Window> was opened.</span></span>  
  
-   <span data-ttu-id="2ab17-198"><xref:System.Windows.Window.Closed> 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-198">The <xref:System.Windows.Window.Closed> event is raised.</span></span>  
  
-   <span data-ttu-id="2ab17-199">만든 리소스를 관리 되지 않는 <xref:System.Windows.Window> 삭제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-199">Unmanaged resources created by the <xref:System.Windows.Window> are disposed.</span></span>  
  
-   <span data-ttu-id="2ab17-200">경우 <xref:System.Windows.Window.ShowDialog%2A> 표시할 호출한 합니다 <xref:System.Windows.Window>, <xref:System.Windows.Window.ShowDialog%2A> 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-200">If <xref:System.Windows.Window.ShowDialog%2A> was called to show the <xref:System.Windows.Window>, <xref:System.Windows.Window.ShowDialog%2A> returns.</span></span>  
  
 <span data-ttu-id="2ab17-201">닫기는 <xref:System.Windows.Window> 닫아야 소유 하는 모든 창이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-201">Closing a <xref:System.Windows.Window> causes any windows that it owns to be closed.</span></span> <span data-ttu-id="2ab17-202">또한 닫기는 <xref:System.Windows.Window> 방법에 따라 실행을 중지 하려면 응용 프로그램에 발생할 수 있습니다 <xref:System.Windows.Application.ShutdownMode%2A?displayProperty=nameWithType> 속성을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-202">Furthermore, closing a <xref:System.Windows.Window> may cause an application to stop running depending on how the <xref:System.Windows.Application.ShutdownMode%2A?displayProperty=nameWithType> property is set.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ab17-203">창이 브라우저에서 호스팅될 때이 메서드를 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-203">This method cannot be called when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ab17-204">에서는 다음 예제는 **파일** &#124; **종료** 명시적으로 호출 하도록 처리 되는 메뉴 <xref:System.Windows.Window.Close%2A>.</span><span class="sxs-lookup"><span data-stu-id="2ab17-204">The following example shows a **File** &#124; **Exit** menu being handled to explicitly call <xref:System.Windows.Window.Close%2A>.</span></span>  
  
 [!code-xaml[WindowCloseSnippets#WindowCloseXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowCloseSnippets/CSharp/MainWindow.xaml#windowclosexaml)]  
  
 [!code-csharp[WindowCloseSnippets#WindowCloseCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowCloseSnippets/CSharp/MainWindow.xaml.cs#windowclosecodebehind)]
 [!code-vb[WindowCloseSnippets#WindowCloseCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowCloseSnippets/visualbasic/mainwindow.xaml.vb#windowclosecodebehind)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="2ab17-205">모든 창과 사용자 입력된 이벤트를 제한 없이 사용할 수 있는 권한입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-205">for permission to use all windows and user input events without restriction.</span></span> <span data-ttu-id="2ab17-206">연결 된 열거형: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="2ab17-206">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="M:System.Windows.Window.Show" />
        <altmember cref="M:System.Windows.Window.ShowDialog" />
        <altmember cref="P:System.Windows.Window.DialogResult" />
        <altmember cref="P:System.Windows.Window.Owner" />
        <altmember cref="P:System.Windows.Window.OwnedWindows" />
      </Docs>
    </Member>
    <Member MemberName="Closed">
      <MemberSignature Language="C#" Value="public event EventHandler Closed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Closed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.Closed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Closed As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Closed;" />
      <MemberSignature Language="F#" Value="member this.Closed : EventHandler " Usage="member this.Closed : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-207">창이 닫히려고 할 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-207">Occurs when the window is about to close.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-208">이 이벤트가 발생 되 면 창 닫기를 방지할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-208">Once this event is raised, a window cannot be prevented from closing.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ab17-209">창이 닫히는 동안 <see cref="P:System.Windows.UIElement.Visibility" />, <see cref="M:System.Windows.Window.Show" /> 또는 <see cref="M:System.Windows.Window.ShowDialog" />가 호출되거나 <see cref="M:System.Windows.Window.Hide" />가 설정된 경우</span><span class="sxs-lookup"><span data-stu-id="2ab17-209"><see cref="P:System.Windows.UIElement.Visibility" /> is set, or <see cref="M:System.Windows.Window.Show" />, <see cref="M:System.Windows.Window.ShowDialog" />, or <see cref="M:System.Windows.Window.Hide" /> is called while a window is closing.</span></span></exception>
        <altmember cref="M:System.Windows.Window.Close" />
        <altmember cref="E:System.Windows.Window.Closing" />
        <altmember cref="M:System.Windows.Application.Shutdown" />
        <altmember cref="P:System.Windows.Application.ShutdownMode" />
        <altmember cref="E:System.Windows.Application.SessionEnding" />
      </Docs>
    </Member>
    <Member MemberName="Closing">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.CancelEventHandler Closing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.CancelEventHandler Closing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.Closing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Closing As CancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::CancelEventHandler ^ Closing;" />
      <MemberSignature Language="F#" Value="member this.Closing : System.ComponentModel.CancelEventHandler " Usage="member this.Closing : System.ComponentModel.CancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.CancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-210"><see cref="M:System.Windows.Window.Close" />가 호출된 직후에 발생하며 창 닫기를 취소하도록 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-210">Occurs directly after <see cref="M:System.Windows.Window.Close" /> is called, and can be handled to cancel window closure.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-211"><xref:System.Windows.Window.Closing> 창의 닫을 때를 감지 하도록 처리할 수 있습니다 (경우에 예를 들어 <xref:System.Windows.Window.Close%2A> 라고).</span><span class="sxs-lookup"><span data-stu-id="2ab17-211"><xref:System.Windows.Window.Closing> can be handled to detect when a window is being closed (for example, when <xref:System.Windows.Window.Close%2A> is called).</span></span> <span data-ttu-id="2ab17-212">또한 <xref:System.Windows.Window.Closing> 창 닫기를 방지 하기 위해 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-212">Furthermore, <xref:System.Windows.Window.Closing> can be used to prevent a window from closing.</span></span> <span data-ttu-id="2ab17-213">창 닫기를 방지 하려면 설정할 수 있습니다는 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 의 속성을 <xref:System.ComponentModel.CancelEventArgs> 인수를 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-213">To prevent a window from closing, you can set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.ComponentModel.CancelEventArgs> argument to `true`.</span></span>  
  
 <span data-ttu-id="2ab17-214">합니다 <xref:System.Windows.Window.Closing> 이벤트가 발생할 때 <xref:System.Windows.Window.Close%2A> 창 닫기 단추를 클릭 하거나 alt+f4를 누를 경우 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-214">The <xref:System.Windows.Window.Closing> event is raised when <xref:System.Windows.Window.Close%2A> is called, if a window's Close button is clicked, or if the user presses ALT+F4.</span></span>  
  
 <span data-ttu-id="2ab17-215">소유 된 창을 사용 하 여 해당 소유자 창에서 열린 경우 <xref:System.Windows.Window.Show%2A>, 소유자 및 소유한 창의 창이 닫힌 <xref:System.Windows.Window.Closing> 이벤트가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-215">If an owned window was opened by its owner window using <xref:System.Windows.Window.Show%2A>, and the owner window is closed, the owned window's <xref:System.Windows.Window.Closing> event is not raised.</span></span> <span data-ttu-id="2ab17-216">창의 소유자 닫히면 (참조 <xref:System.Windows.Window.Owner%2A>), <xref:System.Windows.Window.Closing> 소유 된 창에서 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-216">If the owner of a window is closed (see <xref:System.Windows.Window.Owner%2A>), <xref:System.Windows.Window.Closing> is not raised on the owned window.</span></span>  
  
 <span data-ttu-id="2ab17-217">하는 경우 <xref:System.Windows.Application.Shutdown%2A> 호출 되는 <xref:System.Windows.Window.Closing> 각 창에 대 한 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-217">If <xref:System.Windows.Application.Shutdown%2A> is called, the <xref:System.Windows.Window.Closing> event for each window is raised.</span></span> <span data-ttu-id="2ab17-218">그러나 경우 <xref:System.Windows.Window.Closing> 는 취소, 취소 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-218">However, if <xref:System.Windows.Window.Closing> is canceled, cancellation is ignored.</span></span>  
  
 <span data-ttu-id="2ab17-219">사용자가 로그 오프 하거나 종료 하기 때문에 세션을 종료 하는 경우 <xref:System.Windows.Window.Closing> 발생 하지 않으면 처리 <xref:System.Windows.Application.SessionEnding> 응용 프로그램을 닫지는 코드를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-219">If a session ends because a user logs off or shuts down, <xref:System.Windows.Window.Closing> is not raised; handle <xref:System.Windows.Application.SessionEnding> to implement code that cancels application closure.</span></span>  
  
 <span data-ttu-id="2ab17-220">응용 프로그램의 수명 동안 여러 번 창 숨기기 및 표시 하 고 창 될 때마다 다시 인스턴스화하는 데 않을 경우 표시할 때마다 처리할 수 있습니다 합니다 <xref:System.Windows.Window.Closing> 이벤트를 취소 하 고 호출 된 <xref:System.Windows.Window.Hide%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2ab17-220">If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to reinstantiate the window each time you show it, you can handle the <xref:System.Windows.Window.Closing> event, cancel it, and call the <xref:System.Windows.Window.Hide%2A> method.</span></span> <span data-ttu-id="2ab17-221">그런 다음 호출할 수 있습니다 <xref:System.Windows.Window.Show%2A> 닫았다가 동일한 인스턴스에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-221">Then, you can call <xref:System.Windows.Window.Show%2A> on the same instance to reopen it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ab17-222">다음 예제는 <xref:System.Windows.Window> 닫기 위해 사용자 개입이 필요한 지 여부를 결정 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-222">The following example demonstrates a <xref:System.Windows.Window> that determines whether it needs user intervention to close.</span></span>  
  
 [!code-xaml[WindowClosingSnippets#WindowClosingXAML1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowClosingSnippets/CSharp/DataWindow.xaml#windowclosingxaml1)]  
  
 [!code-csharp[WindowClosingSnippets](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowClosingSnippets/CSharp/DataWindow.xaml.cs)]
 [!code-vb[WindowClosingSnippets](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowClosingSnippets/visualbasic/datawindow.xaml.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ab17-223">창이 닫히는 동안 <see cref="P:System.Windows.UIElement.Visibility" />, <see cref="M:System.Windows.Window.Show" /> 또는 <see cref="M:System.Windows.Window.ShowDialog" />가 호출되거나 <see cref="M:System.Windows.Window.Close" />가 설정된 경우</span><span class="sxs-lookup"><span data-stu-id="2ab17-223"><see cref="P:System.Windows.UIElement.Visibility" /> is set, or <see cref="M:System.Windows.Window.Show" />, <see cref="M:System.Windows.Window.ShowDialog" />, or <see cref="M:System.Windows.Window.Close" /> is called while a window is closing.</span></span></exception>
        <altmember cref="P:System.Windows.Application.ShutdownMode" />
        <altmember cref="M:System.Windows.Window.Close" />
        <altmember cref="E:System.Windows.Window.Closed" />
      </Docs>
    </Member>
    <Member MemberName="ContentRendered">
      <MemberSignature Language="C#" Value="public event EventHandler ContentRendered;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ContentRendered" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.ContentRendered" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContentRendered As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ ContentRendered;" />
      <MemberSignature Language="F#" Value="member this.ContentRendered : EventHandler " Usage="member this.ContentRendered : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-224">창의 콘텐츠가 렌더링된 후에 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-224">Occurs after a window's content has been rendered.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-225">창에 내용이 없는 경우이 이벤트가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-225">If the window has no content, this event is not raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Controls.ContentControl.Content" />
        <altmember cref="E:System.Windows.FrameworkElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="Deactivated">
      <MemberSignature Language="C#" Value="public event EventHandler Deactivated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Deactivated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.Deactivated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deactivated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Deactivated;" />
      <MemberSignature Language="F#" Value="member this.Deactivated : EventHandler " Usage="member this.Deactivated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-226">창이 배경 창이 되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-226">Occurs when a window becomes a background window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-227">창이 비활성화 되었을 (배경 창이 되) 때:</span><span class="sxs-lookup"><span data-stu-id="2ab17-227">A window is deactivated (becomes a background window) when:</span></span>  
  
-   <span data-ttu-id="2ab17-228">사용자는 현재 응용 프로그램의 다른 창으로 전환합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-228">A user switches to another window in the current application.</span></span>  
  
-   <span data-ttu-id="2ab17-229">사용자가 ALT + TAB을 사용 하 여 또는 작업 관리자를 사용 하 여 다른 응용 프로그램의 창으로 전환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-229">A user switches to the window in another application by using ALT+TAB or by using Task Manager.</span></span>  
  
-   <span data-ttu-id="2ab17-230">사용자가 다른 응용 프로그램의 창에 대 한 작업 표시줄 단추를 클릭 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-230">A user clicks the taskbar button for a window in another application.</span></span>  
  
 <span data-ttu-id="2ab17-231">처리 하 여 비활성화 되는 경우를 감지 해야 하는 Windows를 <xref:System.Windows.Window.Deactivated> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-231">Windows that need to detect when they become deactivated by handling the <xref:System.Windows.Window.Deactivated> event.</span></span>  
  
 <span data-ttu-id="2ab17-232">창이 먼저 비활성화 되 면 다시 활성화 하 고 해당 수명 동안 여러 번 비활성화 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-232">After a window is first deactivated, it may be reactivated and deactivated many times during its lifetime.</span></span> <span data-ttu-id="2ab17-233">응용 프로그램의 동작 또는 상태 정품 인증 상태에 의존 하는 경우 검사 수 <xref:System.Windows.Window.IsActive%2A> 있는 정품 인증 상태를 확인 하려면.</span><span class="sxs-lookup"><span data-stu-id="2ab17-233">If an application's behavior or state depends on its activation state, it can inspect <xref:System.Windows.Window.IsActive%2A> to determine which activation state it's in.</span></span>  
  
 <span data-ttu-id="2ab17-234">응용 프로그램 일 수도 있습니다 <xref:System.Windows.Application.Deactivated>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-234">An application can also be <xref:System.Windows.Application.Deactivated>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Window.Activated" />
        <altmember cref="M:System.Windows.Window.Activate" />
        <altmember cref="P:System.Windows.Window.IsActive" />
      </Docs>
    </Member>
    <Member MemberName="DialogResult">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; DialogResult { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; DialogResult" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.DialogResult" />
      <MemberSignature Language="VB.NET" Value="Public Property DialogResult As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;bool&gt; DialogResult { Nullable&lt;bool&gt; get(); void set(Nullable&lt;bool&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.DialogResult : Nullable&lt;bool&gt; with get, set" Usage="System.Windows.Window.DialogResult" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.DialogResultConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-235"><see cref="M:System.Windows.Window.ShowDialog" /> 메서드에서 반환된 값인 대화 상자 결과 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-235">Gets or sets the dialog result value, which is the value that is returned from the <see cref="M:System.Windows.Window.ShowDialog" /> method.</span></span></summary>
        <value><span data-ttu-id="2ab17-236"><see cref="T:System.Nullable`1" /> 형식의 <see cref="T:System.Boolean" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-236">A <see cref="T:System.Nullable`1" /> value of type <see cref="T:System.Boolean" />.</span></span> <span data-ttu-id="2ab17-237">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-237">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-238"><xref:System.Windows.Window.DialogResult%2A> 사용자의 수락 여부를 결정 하는 대화 상자를 표시 한 코드에서 사용할 수 있습니다 (`true`) 하거나 취소 (`false`) 대화 상자.</span><span class="sxs-lookup"><span data-stu-id="2ab17-238"><xref:System.Windows.Window.DialogResult%2A> can be used from the code that showed a dialog box to determine whether a user accepted (`true`) or canceled (`false`) the dialog box.</span></span> <span data-ttu-id="2ab17-239">대화 상자를 수락 하는 경우이 사용자에 의해 수집 된 데이터를 검색 하 고 처리 하는 대화 상자를 연 코드를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-239">If a dialog box was accepted, this signifies to the code that opened the dialog box to retrieve the data that was collected by the user and process it.</span></span> <span data-ttu-id="2ab17-240">그러나 대화 상자를 취소 된 경우 것을 의미 합니다는 코드를 호출 해야 처리를 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-240">If a dialog box was canceled, however, this signifies that calling code should stop any further processing.</span></span>  
  
 <span data-ttu-id="2ab17-241">기본적으로 사용자는 다음 중 하나를 수행 하는 경우 대화 상자 취소 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-241">By default, a dialog box is canceled when a user does one of the following:</span></span>  
  
-   <span data-ttu-id="2ab17-242">PressesALT+F4.</span><span class="sxs-lookup"><span data-stu-id="2ab17-242">PressesALT+F4.</span></span>  
  
-   <span data-ttu-id="2ab17-243">클릭 합니다 **닫기** 단추입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-243">Clicks the **Close** button.</span></span>  
  
-   <span data-ttu-id="2ab17-244">선택 **닫기** 시스템 메뉴에서.</span><span class="sxs-lookup"><span data-stu-id="2ab17-244">Selects **Close** from the System menu.</span></span>  
  
 <span data-ttu-id="2ab17-245">이러한 경우 모든 <xref:System.Windows.Window.DialogResult%2A> 는 `false` 기본적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-245">In all of these cases, <xref:System.Windows.Window.DialogResult%2A> is `false` by default.</span></span>  
  
 <span data-ttu-id="2ab17-246">대화 상자에 단추가 있는 대화 상자를 취소 하는 특수 단추 일반적으로 제공 된 <xref:System.Windows.Controls.Button.IsCancel%2A> 속성이 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-246">A dialog box typically provides a special button to cancel a dialog, which is the button whose <xref:System.Windows.Controls.Button.IsCancel%2A> property is set to `true`.</span></span> <span data-ttu-id="2ab17-247">이 방식으로 구성 된 단추를 자동으로 닫힙니다 창 누를 하거나 때나 ESC 키를 누를 때.</span><span class="sxs-lookup"><span data-stu-id="2ab17-247">A button configured this way will automatically close a window when either it is pressed, or when the ESC key is pressed.</span></span> <span data-ttu-id="2ab17-248">이러한 경우 중 하나로 <xref:System.Windows.Window.DialogResult%2A> 남아 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-248">In either of these cases, <xref:System.Windows.Window.DialogResult%2A> remains `false`.</span></span>  
  
 <span data-ttu-id="2ab17-249">대화 상자에는 일반적으로 단추의 적용 단추를 제공 된 <xref:System.Windows.Controls.Button.IsDefault%2A> 속성이 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-249">A dialog box also typically provides an accept button, which is the button whose <xref:System.Windows.Controls.Button.IsDefault%2A> property is set to `true`.</span></span> <span data-ttu-id="2ab17-250">이러한 방식으로 구성 된 단추에서 발생 하는 해당 <xref:System.Windows.Controls.Primitives.ButtonBase.Click> 것 또는 ENTER 키를 누르면 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-250">A button configured this way will raise its <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event when either it or the ENTER key is pressed.</span></span> <span data-ttu-id="2ab17-251">그러나 대화 상자를 자동으로 닫히지 되거나 해당 설정이 <xref:System.Windows.Window.DialogResult%2A> 에 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-251">However, it won't automatically close the dialog box, nor will it set <xref:System.Windows.Window.DialogResult%2A> to `true`.</span></span> <span data-ttu-id="2ab17-252">수동으로이 코드에서 일반적으로 작성 해야 합니다 <xref:System.Windows.Controls.Primitives.ButtonBase.Click> 기본 단추에 대 한 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-252">You need to manually write this code, usually from the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event handler for the default button.</span></span>  
  
 <span data-ttu-id="2ab17-253"><xref:System.Windows.Window.DialogResult%2A> `null` 대화 상자를 표시 하는 경우 하지만 모두 허용 되거나 취소 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-253"><xref:System.Windows.Window.DialogResult%2A> is `null` when the dialog box is shown but neither accepted nor canceled.</span></span>  
  
 <span data-ttu-id="2ab17-254">대화 상자를 닫으면 반환 하는 값에서 대화 상자 결과 가져올 수 있습니다 <xref:System.Windows.Window.ShowDialog%2A> 메서드를 검사 하 여 또는 <xref:System.Windows.Window.DialogResult%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-254">After a dialog box closes, you can get the dialog result from the value returned by <xref:System.Windows.Window.ShowDialog%2A> method, or by inspecting the <xref:System.Windows.Window.DialogResult%2A> property.</span></span>  
  
 <span data-ttu-id="2ab17-255"><xref:System.Windows.Window.DialogResult%2A> 만 설정할 수 있습니다 시기를 <xref:System.Windows.Window> 호출 하 여 해당 <xref:System.Windows.Window.ShowDialog%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2ab17-255"><xref:System.Windows.Window.DialogResult%2A> can only be set when a <xref:System.Windows.Window> is opened by calling its <xref:System.Windows.Window.ShowDialog%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ab17-256">설정 하거나 창을 브라우저에 호스팅되는 경우이 속성을 가져올 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-256">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ab17-257">다음 예제에서는 확인 단추와 적절 한 반환할 취소 단추를 구성 하는 방법을 보여 줍니다 <xref:System.Windows.Window.DialogResult%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-257">The following example shows how to configure an OK button and a Cancel button to return the appropriate <xref:System.Windows.Window.DialogResult%2A>.</span></span>  
  
 [!code-xaml[WindowDialogResultSnippets#WindowDialogResultXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowDialogResultSnippets/CSharp/DialogBox.xaml#windowdialogresultxaml)]  
  
 [!code-csharp[WindowDialogResultSnippets#WindowDialogResultCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowDialogResultSnippets/CSharp/DialogBox.xaml.cs#windowdialogresultcodebehind)]
 [!code-vb[WindowDialogResultSnippets#WindowDialogResultCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowDialogResultSnippets/visualbasic/dialogbox.xaml.vb#windowdialogresultcodebehind)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ab17-258"><see cref="P:System.Windows.Window.DialogResult" />는 <see cref="M:System.Windows.Window.ShowDialog" />를 호출하여 창이 열리기 전에 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-258"><see cref="P:System.Windows.Window.DialogResult" /> is set before a window is opened by calling <see cref="M:System.Windows.Window.ShowDialog" />.</span></span>  
  
<span data-ttu-id="2ab17-259">또는</span><span class="sxs-lookup"><span data-stu-id="2ab17-259">-or-</span></span> 
 <span data-ttu-id="2ab17-260"><see cref="P:System.Windows.Window.DialogResult" />는 <see cref="M:System.Windows.Window.Show" />를 호출하여 창이 열릴 때 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-260"><see cref="P:System.Windows.Window.DialogResult" /> is set on a window that is opened by calling <see cref="M:System.Windows.Window.Show" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DpiChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DpiChangedEventHandler DpiChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DpiChangedEventHandler DpiChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.DpiChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DpiChanged As DpiChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DpiChangedEventHandler ^ DpiChanged;" />
      <MemberSignature Language="F#" Value="member this.DpiChanged : System.Windows.DpiChangedEventHandler " Usage="member this.DpiChanged : System.Windows.DpiChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DpiChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-261">창이 표시되는 화면 DPI가 변경된 후에 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-261">Occurs after the DPI of the screen on which the Window is displayed changes.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DpiChangedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DpiChangedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DpiChangedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.DpiChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DpiChangedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DpiChangedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DpiChangedEvent : System.Windows.RoutedEvent" Usage="System.Windows.Window.DpiChangedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-262">창의 화면 DPI가 변경 중일 때의 <see cref="T:System.Windows.RoutedEvent" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-262">A <see cref="T:System.Windows.RoutedEvent" /> for when the DPI of the screen the Window is on changes.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DragMove">
      <MemberSignature Language="C#" Value="public void DragMove ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DragMove() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.DragMove" />
      <MemberSignature Language="VB.NET" Value="Public Sub DragMove ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DragMove();" />
      <MemberSignature Language="F#" Value="member this.DragMove : unit -&gt; unit" Usage="window.DragMove " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2ab17-263">마우스 왼쪽 단추를 누른 상태로 창 클라이언트 영역의 노출된 영역에서 창을 끌 수 있게 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-263">Allows a window to be dragged by a mouse with its left button down over an exposed area of the window's client area.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-264">마우스 왼쪽된 단추를 누른 상태로 해야 <xref:System.Windows.Window.DragMove%2A> 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-264">The left mouse button must be down when <xref:System.Windows.Window.DragMove%2A> is called.</span></span> <span data-ttu-id="2ab17-265">마우스 왼쪽된 단추를 누를 때 검색 하는 한 가지 방법은 처리 하는 것은 <xref:System.Windows.UIElement.MouseLeftButtonDown> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-265">One way to detect when the left mouse button is pressed is to handle the <xref:System.Windows.UIElement.MouseLeftButtonDown> event.</span></span>  
  
 <span data-ttu-id="2ab17-266">때 <xref:System.Windows.Window.DragMove%2A> 라고, 왼쪽 마우스 단추를 누른 창의 클라이언트 영역의 노출 된 영역입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-266">When <xref:System.Windows.Window.DragMove%2A> is called, the left mouse button must be depressed over an exposed area of the window's client area.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ab17-267">창이 브라우저에서 호스팅될 때이 메서드를 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-267">This method cannot be called when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ab17-268">다음 예제에서는 재정의 하는 방법을 보여 줍니다 <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> 호출할 <xref:System.Windows.Window.DragMove%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-268">The following example shows how to override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> to call <xref:System.Windows.Window.DragMove%2A>.</span></span>  
  
 [!code-csharp[WindowDragMoveSnippets#CallWindowDragMoveCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowDragMoveSnippets/CSharp/MainWindow.xaml.cs#callwindowdragmovecodebehind)]
 [!code-vb[WindowDragMoveSnippets#CallWindowDragMoveCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowDragMoveSnippets/visualbasic/mainwindow.xaml.vb#callwindowdragmovecodebehind)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ab17-269">왼쪽 마우스 단추를 누르지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2ab17-269">The left mouse button is not down.</span></span></exception>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="2ab17-270">창을 끌 수 있는 권한입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-270">for permission to drag a window.</span></span> <span data-ttu-id="2ab17-271">연결 된 열거형: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="2ab17-271">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="E:System.Windows.Window.LocationChanged" />
      </Docs>
    </Member>
    <Member MemberName="GetWindow">
      <MemberSignature Language="C#" Value="public static System.Windows.Window GetWindow (System.Windows.DependencyObject dependencyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Window GetWindow(class System.Windows.DependencyObject dependencyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.GetWindow(System.Windows.DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Window ^ GetWindow(System::Windows::DependencyObject ^ dependencyObject);" />
      <MemberSignature Language="F#" Value="static member GetWindow : System.Windows.DependencyObject -&gt; System.Windows.Window" Usage="System.Windows.Window.GetWindow dependencyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Window</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObject" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="dependencyObject"><span data-ttu-id="2ab17-272">종속성 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-272">The dependency object.</span></span></param>
        <summary><span data-ttu-id="2ab17-273">종속성 개체가 위치한 콘텐츠 트리를 호스팅하는 <see cref="T:System.Windows.Window" /> 개체에 대한 참조를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-273">Returns a reference to the <see cref="T:System.Windows.Window" /> object that hosts the content tree within which the dependency object is located.</span></span></summary>
        <returns><span data-ttu-id="2ab17-274">호스트 창에 대한 <see cref="T:System.Windows.Window" /> 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-274">A <see cref="T:System.Windows.Window" /> reference to the host window.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2ab17-275"><paramref name="dependencyObject" />가 null입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-275"><paramref name="dependencyObject" /> is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Hide">
      <MemberSignature Language="C#" Value="public void Hide ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Hide() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.Hide" />
      <MemberSignature Language="VB.NET" Value="Public Sub Hide ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Hide();" />
      <MemberSignature Language="F#" Value="member this.Hide : unit -&gt; unit" Usage="window.Hide " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2ab17-276">창이 표시되지 않게 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-276">Makes a window invisible.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-277">를 숨긴 경우 창이 닫힐 모두를 <xref:System.Windows.Window.Closing> 나 <xref:System.Windows.Window.Closed> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-277">A window is not closed when it is hidden, and neither the <xref:System.Windows.Window.Closing> nor <xref:System.Windows.Window.Closed> event is raised.</span></span> <span data-ttu-id="2ab17-278">대신 창의 <xref:System.Windows.UIElement.Visibility%2A> 속성이 <xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-278">Instead, the window's <xref:System.Windows.UIElement.Visibility%2A> property is set to <xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="2ab17-279">창에 응용 프로그램의 경우 <xref:System.Windows.Application.MainWindow%2A> 및 응용 프로그램의 <xref:System.Windows.Application.ShutdownMode%2A> 는 <xref:System.Windows.ShutdownMode.OnMainWindowClose>, 응용 프로그램 종료 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-279">If a window is the application's <xref:System.Windows.Application.MainWindow%2A> and the application's <xref:System.Windows.Application.ShutdownMode%2A> is <xref:System.Windows.ShutdownMode.OnMainWindowClose>, the application does not shut down.</span></span> <span data-ttu-id="2ab17-280">마찬가지로, 응용 프로그램 종료 되지 않으면 창을 유일한 창이 이며 응용 프로그램의 종료 모드 경우 <xref:System.Windows.ShutdownMode.OnLastWindowClose>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-280">Likewise, the application does not shut down if a window is the only window and the application's shutdown mode is <xref:System.Windows.ShutdownMode.OnLastWindowClose>.</span></span>  
  
 <span data-ttu-id="2ab17-281">응용 프로그램의 수명 동안 여러 번 창 숨기기 및 표시 하 고 다시 창을 인스턴스화할 때마다 하지 않을 경우 표시할 때마다 처리할 수 있습니다 합니다 <xref:System.Windows.Window.Closing> 이벤트를 취소 하 고 호출 된 <xref:System.Windows.Window.Hide%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2ab17-281">If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to re-instantiate the window each time you show it, you can handle the <xref:System.Windows.Window.Closing> event, cancel it, and call the <xref:System.Windows.Window.Hide%2A> method.</span></span> <span data-ttu-id="2ab17-282">그런 다음 호출할 수 있습니다 <xref:System.Windows.Window.Show%2A> 에 다시 열고 동일한 인스턴스에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-282">Then, you can call <xref:System.Windows.Window.Show%2A> on the same instance to re-open it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ab17-283">닫히고 있는 창(<see cref="M:System.Windows.Window.Hide" />) 또는 닫힌 창(<see cref="E:System.Windows.Window.Closing" />)에서 <see cref="E:System.Windows.Window.Closed" />가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="2ab17-283"><see cref="M:System.Windows.Window.Hide" /> is called on a window that is closing (<see cref="E:System.Windows.Window.Closing" />) or has been closed (<see cref="E:System.Windows.Window.Closed" />).</span></span></exception>
        <altmember cref="M:System.Windows.Window.Show" />
        <altmember cref="M:System.Windows.Window.ShowDialog" />
        <altmember cref="M:System.Windows.Window.Close" />
      </Docs>
    </Member>
    <Member MemberName="Icon">
      <MemberSignature Language="C#" Value="public System.Windows.Media.ImageSource Icon { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.ImageSource Icon" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Icon" />
      <MemberSignature Language="VB.NET" Value="Public Property Icon As ImageSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::ImageSource ^ Icon { System::Windows::Media::ImageSource ^ get(); void set(System::Windows::Media::ImageSource ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Icon : System.Windows.Media.ImageSource with get, set" Usage="System.Windows.Window.Icon" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.ImageSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-284">창의 아이콘을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-284">Gets or sets a window's icon.</span></span></summary>
        <value><span data-ttu-id="2ab17-285">아이콘을 나타내는 <see cref="T:System.Windows.Media.ImageSource" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-285">An <see cref="T:System.Windows.Media.ImageSource" /> object that represents the icon.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-286">Windows Presentation Foundation (WPF) 독립 실행형 응용 프로그램에는 두 가지 유형의 아이콘이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-286">Windows Presentation Foundation (WPF) standalone applications have two types of icons:</span></span>  
  
-   <span data-ttu-id="2ab17-287">사용 하 여 지정 된 어셈블리 아이콘을 `<ApplicationIcon>` 응용 프로그램의 프로젝트 속성 파일을 빌드합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-287">One assembly icon, which is specified by using the `<ApplicationIcon>` property in the application's project build file.</span></span> <span data-ttu-id="2ab17-288">이 아이콘은 어셈블리에 대 한 바탕 화면 아이콘으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-288">This icon is used as the desktop icon for an assembly.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="2ab17-289">Visual Studio에서 디버깅 아이콘 호스팅 프로세스로 인해 나타나지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-289">When debugging in Visual Studio, your icon may not appear due to the hosting process.</span></span> <span data-ttu-id="2ab17-290">실행 파일을 실행 하는 경우에 아이콘이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-290">If you run the executable, the icon will appear.</span></span> <span data-ttu-id="2ab17-291">자세한 내용은 [호스팅 프로세스(vshost.exe)](https://msdn.microsoft.com/library/c6b9e2be-f18d-4d75-ac52-56d55784734b)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="2ab17-291">For more information, see [Hosting Process (vshost.exe)](https://msdn.microsoft.com/library/c6b9e2be-f18d-4d75-ac52-56d55784734b).</span></span>  
  
-   <span data-ttu-id="2ab17-292">설정 하 여 지정 된 기간당 한 아이콘만 <xref:System.Windows.Window.Icon%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-292">One icon per window that is specified by setting <xref:System.Windows.Window.Icon%2A>.</span></span> <span data-ttu-id="2ab17-293">각 창에 대 한 해당 ALT + TAB 응용 프로그램 선택 목록 항목의 작업 표시줄 단추가 제목 표시줄에이 아이콘이 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-293">For each window, this icon is used in its title bar, its task bar button, and in its ALT-TAB application selection list entry.</span></span>  
  
 <span data-ttu-id="2ab17-294">항상 WPF 창 아이콘을 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-294">A WPF window always displays an icon.</span></span> <span data-ttu-id="2ab17-295">때 설정 하 여 제공 하지 않은 <xref:System.Windows.Window.Icon%2A>, WPF는 다음 규칙을 기준으로 표시할 아이콘을 선택 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-295">When one is not provided by setting <xref:System.Windows.Window.Icon%2A>, WPF chooses an icon to display based on the following rules:</span></span>  
  
1.  <span data-ttu-id="2ab17-296">지정 된 경우에 어셈블리 아이콘을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-296">Use the assembly icon, if specified.</span></span>  
  
2.  <span data-ttu-id="2ab17-297">어셈블리 아이콘을 지정 하지 않으면 기본 Microsoft Windows 아이콘을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-297">If the assembly icon is not specified, use the default Microsoft Windows icon.</span></span>  
  
 <span data-ttu-id="2ab17-298">사용 하는 경우 <xref:System.Windows.Window.Icon%2A> 사용자 지정 창 아이콘을 지정 하려면 기본 응용 프로그램 아이콘을 설정 하 여 복원할 수 있습니다 <xref:System.Windows.Window.Icon%2A> 에 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-298">If you use <xref:System.Windows.Window.Icon%2A> to specify a custom window icon, you can restore the default application icon by setting <xref:System.Windows.Window.Icon%2A> to `null`.</span></span>  
  
 <span data-ttu-id="2ab17-299">Windows, ALT + TAB 파일 선택 목록 창의 작업 표시줄 창의 제목 표시줄에 표시 하는 등의 다양 한 아이콘을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-299">A single icon can be used in a variety of ways in Windows, including being shown in the title bar of a window, the task bar for a window, the ALT+TAB file selection list.</span></span> <span data-ttu-id="2ab17-300">이러한 각을 다른 크기로; 아이콘을 표시 ALT + TAB 파일 선택 목록에 표시 되는 32 x 32 픽셀 아이콘 동안 16 x 16 픽셀 아이콘을 작업 표시줄 및 창의 제목 표시줄에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-300">Each of these shows the icon using a different size; a 16x16 pixel icon is displayed in the title bar of a window and in the task bar, while a 32x32 pixel icon is displayed in the ALT+TAB file selection list.</span></span> <span data-ttu-id="2ab17-301">같은 일부 응용 프로그램 [!INCLUDE[TLA#tla_winexpl](~/includes/tlasharptla-winexpl-md.md)], 제공을 **보기** 보려는 원하는 아이콘의 크기를 선택할 수 있는 메뉴.</span><span class="sxs-lookup"><span data-stu-id="2ab17-301">Some applications, like [!INCLUDE[TLA#tla_winexpl](~/includes/tlasharptla-winexpl-md.md)], provide a **View** menu that allows you to choose the size of the icon you'd like to view.</span></span>  
  
 <span data-ttu-id="2ab17-302">아이콘 파일에 다양 한 디스플레이 크기에는 각각 특정 크기 및 색 농도 대상으로 하는 아이콘의 버전을 나타내는 하나 이상의 실제 아이콘으로 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-302">To cater to the various display sizes, an icon file is composed of one or more actual icons where each one represents a version of the icon that targets a specific size and color depth.</span></span> <span data-ttu-id="2ab17-303">예를 들어, 하나의 아이콘 16 색 및 256 색을 사용 하 여 32 x 32 픽셀 아이콘과 16 x 16 픽셀을 포함할 수 있습니다 다른 하는 동안에 16 색을 사용 하 여 단일 16 x 16 픽셀 아이콘이 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-303">For example, one icon may only have a single 16x16 pixel icon with 16 colors, while another may contain 16x16 pixel and 32x32 pixel icons with both 16 colors and 256 colors.</span></span>  
  
 <span data-ttu-id="2ab17-304">모든 가능한 크기 및 색에 대 한 아이콘 아이콘 파일 내에 존재 하는 경우 <xref:System.Windows.Window> 해당 아이콘을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-304">If icons for all possible sizes and color depths exist within an icon file, <xref:System.Windows.Window> will use the appropriate icon.</span></span> <span data-ttu-id="2ab17-305">아이콘 파일에 가능한 모든 아이콘의 하위 집합만 포함 되어 있으면 <xref:System.Windows.Window> 크기 및 색 농도 감소의 순서로 다음 가장 적합 한 아이콘을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-305">If an icon file contains only a subset of all the possible icons, <xref:System.Windows.Window> uses the next most appropriate icon in order of decreasing sizes and color depth.</span></span>  
  
 <span data-ttu-id="2ab17-306">결과 아이콘에서 항상 사용 됩니다 <xref:System.Windows.Window>사용 되는 아이콘 크기 및 색 깊이 필요한 대상 하지 않더라도, 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-306">The result is that an icon will always be used by <xref:System.Windows.Window>, although the icon used may not target the required size and color depth.</span></span> <span data-ttu-id="2ab17-307">예를 들어, 256 색을 사용 하 여 32 x 32 픽셀 아이콘으로 표시를 16 색 16 x 16 픽셀 아이콘을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-307">For example, a 16x16 pixel icon with 16 colors may be used for display as a 32x32 pixel icon with 256 colors.</span></span> <span data-ttu-id="2ab17-308">이 픽셀화가, 같은 바람직하지 않은 시각 효과가 발생할 수 있지만 모든 대상된 크기와 색상에 대 한 아이콘을 만들어 방지할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-308">This can cause undesirable visual effects, such as pixilation, but may be avoided by creating icons for all targeted sizes and color depths.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ab17-309">설정 하거나 창을 브라우저에 호스팅되는 경우이 속성을 가져올 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-309">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowIcon"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="2ab17-310">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="2ab17-310">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2ab17-311">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="2ab17-311">Identifier field</span></span>|<xref:System.Windows.Window.IconProperty>|  
|<span data-ttu-id="2ab17-312">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="2ab17-312">Metadata properties set to `true`</span></span>|<span data-ttu-id="2ab17-313">없음</span><span class="sxs-lookup"><span data-stu-id="2ab17-313">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2ab17-314">다음 예제에서는 창 아이콘을 설정 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-314">The following example shows how to set a window icon.</span></span>  
  
 [!code-xaml[WindowIconSnippets#WindowIconSetXAML](~/samples/snippets/xaml/VS_Snippets_Wpf/WindowIconSnippets/XAML/MainWindow.xaml#windowiconsetxaml)]  
  
 [!code-csharp[WindowIconSnippets#SetWindowIconInCode](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowIconSnippets/CSharp/MainWindow.xaml.cs#setwindowiconincode)]
 [!code-vb[WindowIconSnippets#SetWindowIconInCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowIconSnippets/visualbasic/mainwindow.xaml.vb#setwindowiconincode)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="2ab17-315">아이콘을 설정할 수 있는 권한입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-315">for permission to set the icon.</span></span> <span data-ttu-id="2ab17-316">연결 된 열거형: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="2ab17-316">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="IconProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IconProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IconProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.IconProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IconProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IconProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IconProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.IconProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-317"><see cref="P:System.Windows.Window.Icon" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-317">Identifies the <see cref="P:System.Windows.Window.Icon" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsActive">
      <MemberSignature Language="C#" Value="public bool IsActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActive" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.IsActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsActive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsActive : bool" Usage="System.Windows.Window.IsActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-318">창이 활성 상태인지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-318">Gets a value that indicates whether the window is active.</span></span></summary>
        <value><span data-ttu-id="2ab17-319">창이 활성 상태이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-319"><see langword="true" /> if the window is active; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="2ab17-320">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-320">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-321">활성화 된 창의 사용자의 현재 전경 창을 이며 포커스가 있는 제목 표시줄의 현재 모양을 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-321">An active window is the user's current foreground window and has the focus, which is signified by the active appearance of the title bar.</span></span> <span data-ttu-id="2ab17-322">활성 창도 명시적으로 설정 하지 않는 모든 최상위 창의 최상위 됩니다는 <xref:System.Windows.Window.Topmost%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-322">An active window will also be the top-most of all top-level windows that don't explicitly set the <xref:System.Windows.Window.Topmost%2A> property.</span></span>  
  
<a name="dependencyPropertyInfo_WindowIsActive"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="2ab17-323">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="2ab17-323">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2ab17-324">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="2ab17-324">Identifier field</span></span>|<xref:System.Windows.Window.IsActiveProperty>|  
|<span data-ttu-id="2ab17-325">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="2ab17-325">Metadata properties set to `true`</span></span>|<span data-ttu-id="2ab17-326">없음</span><span class="sxs-lookup"><span data-stu-id="2ab17-326">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.Activate" />
        <altmember cref="E:System.Windows.Window.Activated" />
        <altmember cref="E:System.Windows.Window.Deactivated" />
      </Docs>
    </Member>
    <Member MemberName="IsActiveProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsActiveProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsActiveProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.IsActiveProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsActiveProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsActiveProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsActiveProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.IsActiveProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-327"><see cref="P:System.Windows.Window.IsActive" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-327">Identifies the <see cref="P:System.Windows.Window.IsActive" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public double Left { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Left" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Left" />
      <MemberSignature Language="VB.NET" Value="Public Property Left As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Left { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Left : double with get, set" Usage="System.Windows.Window.Left" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.LengthConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-328">바탕 화면과 관련해서 창의 왼쪽 가장자리 위치를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-328">Gets or sets the position of the window's left edge, in relation to the desktop.</span></span></summary>
        <value><span data-ttu-id="2ab17-329">논리 단위(1인치의 1/96)로 지정된 창의 왼쪽 가장자리 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-329">The position of the window's left edge, in logical units (1/96th of an inch).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-330">경우는 <xref:System.Windows.Window> 최대화 되거나 최소화, 복원의 왼쪽된 가장자리에 대 한 지점 값 나타냅니다가는 <xref:System.Windows.Window>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-330">When the <xref:System.Windows.Window> is maximized or minimized, this value represents the left edge of the restore point for the <xref:System.Windows.Window>.</span></span>  
  
 <span data-ttu-id="2ab17-331">스타일을 통해이 속성을 설정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-331">This property cannot be set through a style.</span></span>  
  
 <span data-ttu-id="2ab17-332">값을 지정 하지 않으면 경우 <xref:System.Windows.Window.Left%2A> 시스템 기본값으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-332">If you do not specify a value, <xref:System.Windows.Window.Left%2A> is set to the system default value.</span></span> <span data-ttu-id="2ab17-333">설정 하 여 시스템 기본값을 지정할 수도 있습니다 <xref:System.Windows.Window.Left%2A> 에 <xref:System.Double.NaN>입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-333">You can also specify the system default value by setting <xref:System.Windows.Window.Left%2A> to <xref:System.Double.NaN>.</span></span> <span data-ttu-id="2ab17-334">모두 <xref:System.Double.NegativeInfinity> 나 <xref:System.Double.PositiveInfinity> 에 대 한 유효한 값인지 <xref:System.Windows.Window.Left%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-334">Neither <xref:System.Double.NegativeInfinity> nor <xref:System.Double.PositiveInfinity> is a valid value for <xref:System.Windows.Window.Left%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ab17-335">설정 하거나 창을 브라우저에 호스팅되는 경우이 속성을 가져올 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-335">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowLeft"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="2ab17-336">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="2ab17-336">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2ab17-337">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="2ab17-337">Identifier field</span></span>|<xref:System.Windows.Window.LeftProperty>|  
|<span data-ttu-id="2ab17-338">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="2ab17-338">Metadata properties set to `true`</span></span>|<span data-ttu-id="2ab17-339">없음</span><span class="sxs-lookup"><span data-stu-id="2ab17-339">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.Top" />
      </Docs>
    </Member>
    <Member MemberName="LeftProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LeftProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LeftProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.LeftProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LeftProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LeftProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable LeftProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.LeftProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-340"><see cref="P:System.Windows.Window.Left" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-340">Identifies the <see cref="P:System.Windows.Window.Left" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocationChanged">
      <MemberSignature Language="C#" Value="public event EventHandler LocationChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LocationChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.LocationChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LocationChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LocationChanged;" />
      <MemberSignature Language="F#" Value="member this.LocationChanged : EventHandler " Usage="member this.LocationChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-341">창의 위치가 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-341">Occurs when the window's location changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-342">창의 위치를 변경 하는 경우:</span><span class="sxs-lookup"><span data-stu-id="2ab17-342">A window's location changes when:</span></span>  
  
-   <span data-ttu-id="2ab17-343">사용자는 창의 제목 표시줄을 사용 하 여 끌어 창을 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-343">A user moves a window by dragging it with the window's title bar.</span></span>  
  
-   <span data-ttu-id="2ab17-344">창이 이동 하는 후 <xref:System.Windows.Window.DragMove%2A> 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-344">A window is moved after <xref:System.Windows.Window.DragMove%2A> is called.</span></span>  
  
-   <span data-ttu-id="2ab17-345">중 하나는 <xref:System.Windows.Window.Left%2A> 또는 <xref:System.Windows.Window.Top%2A> 속성을 프로그래밍 방식으로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-345">Either the <xref:System.Windows.Window.Left%2A> or <xref:System.Windows.Window.Top%2A> property is set programmatically.</span></span>  
  
-   <span data-ttu-id="2ab17-346">합니다 **이동** 창의 시스템 메뉴의 메뉴 항목을 선택 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-346">The **Move** menu item of a window's System menu is chosen.</span></span>  
  
-   <span data-ttu-id="2ab17-347"><xref:System.Windows.Window.WindowState%2A> 속성이 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-347">The <xref:System.Windows.Window.WindowState%2A> property is changed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.Left" />
        <altmember cref="P:System.Windows.Window.Top" />
        <altmember cref="P:System.Windows.Window.RestoreBounds" />
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected internal override System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.LogicalChildren" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides ReadOnly Property LogicalChildren As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property System::Collections::IEnumerator ^ LogicalChildren { System::Collections::IEnumerator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LogicalChildren : System.Collections.IEnumerator" Usage="System.Windows.Window.LogicalChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-348">창의 논리적 자식 요소에 대한 열거자를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-348">Gets an enumerator for a window's logical child elements.</span></span></summary>
        <value><span data-ttu-id="2ab17-349">창의 논리적 자식 요소에 대한 <see cref="T:System.Collections.IEnumerator" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-349">An <see cref="T:System.Collections.IEnumerator" /> a window's logical child elements.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.FrameworkElement.LogicalChildren" />
      </Docs>
    </Member>
    <Member MemberName="MeasureOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.Size MeasureOverride (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size MeasureOverride(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.MeasureOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function MeasureOverride (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size MeasureOverride(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="override this.MeasureOverride : System.Windows.Size -&gt; System.Windows.Size" Usage="window.MeasureOverride availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize"><span data-ttu-id="2ab17-350">이 창에서 자식에 사용할 수 있는 크기를 반영하는 <see cref="T:System.Windows.Size" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-350">A <see cref="T:System.Windows.Size" /> that reflects the available size that this window can give to the child.</span></span> <span data-ttu-id="2ab17-351">창의 크기를 사용할 수 있는 콘텐츠에 맞게 조정할 수 있음을 나타내려면 값을 무한대로 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-351">Infinity can be given as a value to indicate that the window will size to whatever content is available.</span></span></param>
        <summary><span data-ttu-id="2ab17-352">이 메서드를 재정의하여 창의 크기를 측정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-352">Override this method to measure the size of a window.</span></span></summary>
        <returns><span data-ttu-id="2ab17-353">이 창에서 자식의 크기 계산을 기반으로 레이아웃 중에 필요한 것으로 확인된 크기를 반영하는 <see cref="T:System.Windows.Size" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-353">A <see cref="T:System.Windows.Size" /> that reflects the size that this window determines it needs during layout, based on its calculations of children's sizes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-354"><xref:System.Windows.Window.MeasureOverride%2A> 경우 라고 합니다 <xref:System.Windows.UIElement.Visibility%2A> 속성의 값이 <xref:System.Windows.Visibility.Collapsed>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-354"><xref:System.Windows.Window.MeasureOverride%2A> is not called when the <xref:System.Windows.UIElement.Visibility%2A> property has a value of <xref:System.Windows.Visibility.Collapsed>.</span></span> <span data-ttu-id="2ab17-355">하는 경우의 값을 <xref:System.Windows.UIElement.Visibility%2A> 속성이 <xref:System.Windows.Visibility.Hidden> 또는 <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.MeasureOverride%2A> 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-355">If the value of the <xref:System.Windows.UIElement.Visibility%2A> property is either <xref:System.Windows.Visibility.Hidden> or <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.MeasureOverride%2A> is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ab17-356">경우 중 하나 <xref:System.Windows.Window.Show%2A> 또는 <xref:System.Windows.Window.ShowDialog%2A> 호출 되는 <xref:System.Windows.UIElement.Visibility%2A> 의 속성을 <xref:System.Windows.Window> 로 설정 된 <xref:System.Windows.Visibility.Visible>.</span><span class="sxs-lookup"><span data-stu-id="2ab17-356">When either <xref:System.Windows.Window.Show%2A> or <xref:System.Windows.Window.ShowDialog%2A> are called, the <xref:System.Windows.UIElement.Visibility%2A> property of a <xref:System.Windows.Window> is set to <xref:System.Windows.Visibility.Visible>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="OnActivated">
      <MemberSignature Language="C#" Value="protected virtual void OnActivated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnActivated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnActivated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnActivated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnActivated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnActivated : EventArgs -&gt; unit&#xA;override this.OnActivated : EventArgs -&gt; unit" Usage="window.OnActivated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2ab17-357">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-357">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2ab17-358"><see cref="E:System.Windows.Window.Activated" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-358">Raises the <see cref="E:System.Windows.Window.Activated" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-359"><xref:System.Windows.Window.OnActivated%2A>는 <xref:System.Windows.Window.Activated> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-359"><xref:System.Windows.Window.OnActivated%2A> raises the <xref:System.Windows.Window.Activated> event.</span></span>  
  
 <span data-ttu-id="2ab17-360">파생 되는 형식을 <xref:System.Windows.Window> 재정의할 수 있습니다 <xref:System.Windows.Window.OnActivated%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-360">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnActivated%2A>.</span></span> <span data-ttu-id="2ab17-361">재정의 된 메서드를 호출 해야 합니다 <xref:System.Windows.Window.OnActivated%2A> 기본 클래스의 경우 <xref:System.Windows.Window.Activated> 발생 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-361">The overridden method must call <xref:System.Windows.Window.OnActivated%2A> on the base class if <xref:System.Windows.Window.Activated> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.OnDeactivated(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnClosed">
      <MemberSignature Language="C#" Value="protected virtual void OnClosed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClosed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnClosed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClosed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClosed(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnClosed : EventArgs -&gt; unit&#xA;override this.OnClosed : EventArgs -&gt; unit" Usage="window.OnClosed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2ab17-362">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-362">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2ab17-363"><see cref="E:System.Windows.Window.Closed" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-363">Raises the <see cref="E:System.Windows.Window.Closed" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-364"><xref:System.Windows.Window.OnClosed%2A>는 <xref:System.Windows.Window.Closed> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-364"><xref:System.Windows.Window.OnClosed%2A> raises the <xref:System.Windows.Window.Closed> event.</span></span>  
  
 <span data-ttu-id="2ab17-365">파생 되는 형식을 <xref:System.Windows.Window> 재정의할 수 있습니다 <xref:System.Windows.Window.OnClosed%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-365">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnClosed%2A>.</span></span> <span data-ttu-id="2ab17-366">재정의 된 메서드를 호출 해야 합니다 <xref:System.Windows.Window.OnClosed%2A> 기본 클래스의 경우 <xref:System.Windows.Window.Closed> 발생 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-366">The overridden method must call <xref:System.Windows.Window.OnClosed%2A> on the base class if <xref:System.Windows.Window.Closed> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnClosing (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClosing(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClosing (e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClosing(System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnClosing : System.ComponentModel.CancelEventArgs -&gt; unit&#xA;override this.OnClosing : System.ComponentModel.CancelEventArgs -&gt; unit" Usage="window.OnClosing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2ab17-367">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.CancelEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-367">A <see cref="T:System.ComponentModel.CancelEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2ab17-368"><see cref="E:System.Windows.Window.Closing" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-368">Raises the <see cref="E:System.Windows.Window.Closing" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-369"><xref:System.Windows.Window.OnClosing%2A>는 <xref:System.Windows.Window.Closing> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-369"><xref:System.Windows.Window.OnClosing%2A> raises the <xref:System.Windows.Window.Closing> event.</span></span>  
  
 <span data-ttu-id="2ab17-370">파생 되는 형식을 <xref:System.Windows.Window> 재정의할 수 있습니다 <xref:System.Windows.Window.OnClosing%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-370">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnClosing%2A>.</span></span> <span data-ttu-id="2ab17-371">재정의 된 메서드를 호출 해야 합니다 <xref:System.Windows.Window.OnClosing%2A> 기본 클래스의 경우 <xref:System.Windows.Window.Closing> 발생 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-371">The overridden method must call <xref:System.Windows.Window.OnClosing%2A> on the base class if <xref:System.Windows.Window.Closing> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.OnClosed(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnContentChanged">
      <MemberSignature Language="C#" Value="protected override void OnContentChanged (object oldContent, object newContent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnContentChanged(object oldContent, object newContent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnContentChanged(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnContentChanged (oldContent As Object, newContent As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnContentChanged(System::Object ^ oldContent, System::Object ^ newContent);" />
      <MemberSignature Language="F#" Value="override this.OnContentChanged : obj * obj -&gt; unit" Usage="window.OnContentChanged (oldContent, newContent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldContent" Type="System.Object" />
        <Parameter Name="newContent" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="oldContent"><span data-ttu-id="2ab17-372">이전 콘텐츠 트리의 루트에 대한 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-372">A reference to the root of the old content tree.</span></span></param>
        <param name="newContent"><span data-ttu-id="2ab17-373">새 콘텐츠 트리의 루트에 대한 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-373">A reference to the root of the new content tree.</span></span></param>
        <summary><span data-ttu-id="2ab17-374"><see cref="P:System.Windows.Controls.ContentControl.Content" /> 속성이 변경되면 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-374">Called when the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property changes.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContentRendered">
      <MemberSignature Language="C#" Value="protected virtual void OnContentRendered (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContentRendered(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnContentRendered(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContentRendered (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContentRendered(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContentRendered : EventArgs -&gt; unit&#xA;override this.OnContentRendered : EventArgs -&gt; unit" Usage="window.OnContentRendered e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2ab17-375">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-375">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2ab17-376"><see cref="E:System.Windows.Window.ContentRendered" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-376">Raises the <see cref="E:System.Windows.Window.ContentRendered" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-377"><xref:System.Windows.Window.OnContentRendered%2A>는 <xref:System.Windows.Window.ContentRendered> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-377"><xref:System.Windows.Window.OnContentRendered%2A> raises the <xref:System.Windows.Window.ContentRendered> event.</span></span>  
  
 <span data-ttu-id="2ab17-378">파생 되는 형식을 <xref:System.Windows.Window> 재정의할 수 있습니다 <xref:System.Windows.Window.OnContentRendered%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-378">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnContentRendered%2A>.</span></span> <span data-ttu-id="2ab17-379">재정의 된 메서드를 호출 해야 합니다 <xref:System.Windows.Window.OnContentRendered%2A> 기본 클래스의 경우 <xref:System.Windows.Window.ContentRendered> 발생 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-379">The overridden method must call <xref:System.Windows.Window.OnContentRendered%2A> on the base class if <xref:System.Windows.Window.ContentRendered> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberSignature Language="F#" Value="override this.OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer" Usage="window.OnCreateAutomationPeer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2ab17-380">이 <see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" />에 대한 <see cref="T:System.Windows.Window" /> 개체를 만들어 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-380">Creates and returns a <see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /> object for this <see cref="T:System.Windows.Window" />.</span></span></summary>
        <returns><span data-ttu-id="2ab17-381">이 <see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" />에 대한 <see cref="T:System.Windows.Window" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-381">A <see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /> object for this <see cref="T:System.Windows.Window" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-382">이 메서드는 <xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A>를 재정의합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-382">This method overrides <xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDeactivated">
      <MemberSignature Language="C#" Value="protected virtual void OnDeactivated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDeactivated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnDeactivated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDeactivated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDeactivated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDeactivated : EventArgs -&gt; unit&#xA;override this.OnDeactivated : EventArgs -&gt; unit" Usage="window.OnDeactivated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2ab17-383">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-383">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2ab17-384"><see cref="E:System.Windows.Window.Deactivated" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-384">Raises the <see cref="E:System.Windows.Window.Deactivated" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-385"><xref:System.Windows.Window.OnDeactivated%2A>는 <xref:System.Windows.Window.Deactivated> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-385"><xref:System.Windows.Window.OnDeactivated%2A> raises the <xref:System.Windows.Window.Deactivated> event.</span></span>  
  
 <span data-ttu-id="2ab17-386">파생 되는 형식을 <xref:System.Windows.Window> 재정의할 수 있습니다 <xref:System.Windows.Window.OnDeactivated%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-386">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnDeactivated%2A>.</span></span> <span data-ttu-id="2ab17-387">재정의 된 메서드를 호출 해야 합니다 <xref:System.Windows.Window.OnDeactivated%2A> 기본 클래스의 경우 <xref:System.Windows.Window.Deactivated> 발생 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-387">The overridden method must call <xref:System.Windows.Window.OnDeactivated%2A> on the base class if <xref:System.Windows.Window.Deactivated> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.OnActivated(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnDpiChanged">
      <MemberSignature Language="C#" Value="protected override void OnDpiChanged (System.Windows.DpiScale oldDpi, System.Windows.DpiScale newDpi);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDpiChanged(valuetype System.Windows.DpiScale oldDpi, valuetype System.Windows.DpiScale newDpi) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnDpiChanged (oldDpi As DpiScale, newDpi As DpiScale)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnDpiChanged(System::Windows::DpiScale oldDpi, System::Windows::DpiScale newDpi);" />
      <MemberSignature Language="F#" Value="override this.OnDpiChanged : System.Windows.DpiScale * System.Windows.DpiScale -&gt; unit" Usage="window.OnDpiChanged (oldDpi, newDpi)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldDpi" Type="System.Windows.DpiScale" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="newDpi" Type="System.Windows.DpiScale" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="oldDpi"><span data-ttu-id="2ab17-388">이전 DPI 배율 설정입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-388">The previous DPI scale setting.</span></span></param>
        <param name="newDpi"><span data-ttu-id="2ab17-389">새 DPI 배율 설정입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-389">The new DPI scale setting.</span></span></param>
        <summary><span data-ttu-id="2ab17-390">이 창이 렌더링되는 DPI가 변경될 때 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-390">Called when the DPI at which this window is rendered changes.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnLocationChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnLocationChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLocationChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnLocationChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLocationChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLocationChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLocationChanged : EventArgs -&gt; unit&#xA;override this.OnLocationChanged : EventArgs -&gt; unit" Usage="window.OnLocationChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2ab17-391">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-391">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2ab17-392"><see cref="E:System.Windows.Window.LocationChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-392">Raises the <see cref="E:System.Windows.Window.LocationChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-393"><xref:System.Windows.Window.OnLocationChanged%2A>는 <xref:System.Windows.Window.LocationChanged> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-393"><xref:System.Windows.Window.OnLocationChanged%2A> raises the <xref:System.Windows.Window.LocationChanged> event.</span></span>  
  
 <span data-ttu-id="2ab17-394">파생 되는 형식을 <xref:System.Windows.Window> 재정의할 수 있습니다 <xref:System.Windows.Window.OnLocationChanged%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-394">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnLocationChanged%2A>.</span></span> <span data-ttu-id="2ab17-395">재정의 된 메서드를 호출 해야 합니다 <xref:System.Windows.Window.OnLocationChanged%2A> 기본 클래스의 경우 <xref:System.Windows.Window.LocationChanged> 발생 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-395">The overridden method must call <xref:System.Windows.Window.OnLocationChanged%2A> on the base class if <xref:System.Windows.Window.LocationChanged> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.Left" />
        <altmember cref="P:System.Windows.Window.Top" />
      </Docs>
    </Member>
    <Member MemberName="OnManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="protected override void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnManipulationBoundaryFeedback(class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnManipulationBoundaryFeedback (e As ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnManipulationBoundaryFeedback(System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnManipulationBoundaryFeedback : System.Windows.Input.ManipulationBoundaryFeedbackEventArgs -&gt; unit" Usage="window.OnManipulationBoundaryFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationBoundaryFeedbackEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2ab17-396">이벤트 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-396">The data for the event.</span></span></param>
        <summary><span data-ttu-id="2ab17-397"><see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> 이벤트가 발생할 때 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-397">Called when the <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> event occurs.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-398">이 구현은 처리 상태를 변경 하지 않습니다 (합니다 <xref:System.Windows.RoutedEventArgs.Handled%2A> 속성)의 <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> 이벤트 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-398">This implementation does not change the handled state (the <xref:System.Windows.RoutedEventArgs.Handled%2A> property) of the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event data.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="2ab17-399">재정의 하는 경우 <see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />, 항상 기본 구현을 호출 하면 <see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" /> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-399">If you override <see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" /> implementation.</span></span> <span data-ttu-id="2ab17-400">최종 클래스의 런타임 동작을 변경할 수는 이벤트 처리에서 기본 클래스를 방지 하는 기본 구현을 호출 하지 못했습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-400">Failure to call the base implementation prevents base classes from handling the event, which might change the run-time behavior of the final class.</span></span> <span data-ttu-id="2ab17-401">기본 구현은 앞 이나 뒤에 특수 한 처리 요구 사항에 따라 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-401">You can call the base implementation either before or after your special handling, depending on your requirements.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnSourceInitialized">
      <MemberSignature Language="C#" Value="protected virtual void OnSourceInitialized (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSourceInitialized(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnSourceInitialized(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSourceInitialized (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSourceInitialized(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSourceInitialized : EventArgs -&gt; unit&#xA;override this.OnSourceInitialized : EventArgs -&gt; unit" Usage="window.OnSourceInitialized e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2ab17-402">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-402">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2ab17-403"><see cref="E:System.Windows.Window.SourceInitialized" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-403">Raises the <see cref="E:System.Windows.Window.SourceInitialized" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-404"><xref:System.Windows.Window.OnSourceInitialized%2A>는 <xref:System.Windows.Window.SourceInitialized> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-404"><xref:System.Windows.Window.OnSourceInitialized%2A> raises the <xref:System.Windows.Window.SourceInitialized> event.</span></span>  
  
 <span data-ttu-id="2ab17-405">파생 되는 형식을 <xref:System.Windows.Window> 재정의할 수 있습니다 <xref:System.Windows.Window.OnSourceInitialized%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-405">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnSourceInitialized%2A>.</span></span> <span data-ttu-id="2ab17-406">재정의 된 메서드를 호출 해야 합니다 <xref:System.Windows.Window.OnSourceInitialized%2A> 기본 클래스의 경우 <xref:System.Windows.Window.SourceInitialized> 발생 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-406">The overridden method must call <xref:System.Windows.Window.OnSourceInitialized%2A> on the base class if <xref:System.Windows.Window.SourceInitialized> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnStateChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStateChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnStateChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStateChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStateChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStateChanged : EventArgs -&gt; unit&#xA;override this.OnStateChanged : EventArgs -&gt; unit" Usage="window.OnStateChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="2ab17-407">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-407">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="2ab17-408"><see cref="E:System.Windows.Window.StateChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-408">Raises the <see cref="E:System.Windows.Window.StateChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-409"><xref:System.Windows.Window.OnStateChanged%2A>는 <xref:System.Windows.Window.StateChanged> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-409"><xref:System.Windows.Window.OnStateChanged%2A> raises the <xref:System.Windows.Window.StateChanged> event.</span></span>  
  
 <span data-ttu-id="2ab17-410">파생 되는 형식을 <xref:System.Windows.Window> 재정의할 수 있습니다 <xref:System.Windows.Window.OnStateChanged%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-410">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnStateChanged%2A>.</span></span> <span data-ttu-id="2ab17-411">재정의 된 메서드를 호출 해야 합니다 <xref:System.Windows.Window.OnStateChanged%2A> 기본 클래스의 경우 <xref:System.Windows.Window.StateChanged> 발생 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-411">The overridden method must call <xref:System.Windows.Window.OnStateChanged%2A> on the base class if <xref:System.Windows.Window.StateChanged> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualChildrenChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualChildrenChanged (System.Windows.DependencyObject visualAdded, System.Windows.DependencyObject visualRemoved);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualChildrenChanged(class System.Windows.DependencyObject visualAdded, class System.Windows.DependencyObject visualRemoved) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualChildrenChanged (visualAdded As DependencyObject, visualRemoved As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualChildrenChanged(System::Windows::DependencyObject ^ visualAdded, System::Windows::DependencyObject ^ visualRemoved);" />
      <MemberSignature Language="F#" Value="override this.OnVisualChildrenChanged : System.Windows.DependencyObject * System.Windows.DependencyObject -&gt; unit" Usage="window.OnVisualChildrenChanged (visualAdded, visualRemoved)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visualAdded" Type="System.Windows.DependencyObject" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.8" />
        <Parameter Name="visualRemoved" Type="System.Windows.DependencyObject" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="visualAdded"><span data-ttu-id="2ab17-412">컬렉션에 추가된 <see cref="T:System.Windows.Media.Visual" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-412">The <see cref="T:System.Windows.Media.Visual" /> that was added to the collection.</span></span></param>
        <param name="visualRemoved"><span data-ttu-id="2ab17-413">컬렉션에서 제거된 <see cref="T:System.Windows.Media.Visual" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-413">The <see cref="T:System.Windows.Media.Visual" /> that was removed from the collection.</span></span></param>
        <summary><span data-ttu-id="2ab17-414">이 <see cref="T:System.Windows.Window" /> 개체의 <see cref="T:System.Windows.Media.VisualCollection" />이 수정될 때 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-414">Called when the <see cref="T:System.Windows.Media.VisualCollection" /> of this <see cref="T:System.Windows.Window" /> object is modified.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override sealed void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides NotOverridable Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberSignature Language="F#" Value="override this.OnVisualParentChanged : System.Windows.DependencyObject -&gt; unit" Usage="window.OnVisualParentChanged oldParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent"><span data-ttu-id="2ab17-415">이전 부모입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-415">The previous parent.</span></span> <span data-ttu-id="2ab17-416"><see cref="T:System.Windows.DependencyObject" />에 이전 부모가 없는 경우 null로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-416">Set to null if the <see cref="T:System.Windows.DependencyObject" /> did not have a previous parent.</span></span></param>
        <summary><span data-ttu-id="2ab17-417">창의 부모가 변경될 때 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-417">Called when the parent of the window is changed.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      </Docs>
    </Member>
    <Member MemberName="OwnedWindows">
      <MemberSignature Language="C#" Value="public System.Windows.WindowCollection OwnedWindows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.WindowCollection OwnedWindows" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.OwnedWindows" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnedWindows As WindowCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowCollection ^ OwnedWindows { System::Windows::WindowCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OwnedWindows : System.Windows.WindowCollection" Usage="System.Windows.Window.OwnedWindows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WindowCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-418">이 창이 소유자인 창의 컬렉션을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-418">Gets a collection of windows for which this window is the owner.</span></span></summary>
        <value><span data-ttu-id="2ab17-419">이 창이 소유자인 창에 대한 참조가 들어 있는 <see cref="T:System.Windows.WindowCollection" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-419">A <see cref="T:System.Windows.WindowCollection" /> that contains references to the windows for which this window is the owner.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-420">소유 된 창을 하나인 인 <xref:System.Windows.Window.Owner%2A> 소유자 창 이라고 하는 다른 창에 대 한 참조를 사용 하 여 속성을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-420">An owned window is one whose <xref:System.Windows.Window.Owner%2A> property is set with a reference to another window, which is known as the owner window.</span></span> <span data-ttu-id="2ab17-421">열거할 수는 소유자 창이 소유한 모든 windows를 찾으려면 <xref:System.Windows.WindowCollection> 에서 반환 하는 <xref:System.Windows.Window.OwnedWindows%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-421">To find all the windows that an owner window owns, you can enumerate <xref:System.Windows.WindowCollection> that is returned by the <xref:System.Windows.Window.OwnedWindows%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ab17-422">다음 예제에서는 열거 하는 방법을 보여 줍니다 <xref:System.Windows.Window.OwnedWindows%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-422">The following example shows how to enumerate <xref:System.Windows.Window.OwnedWindows%2A>.</span></span>  
  
 [!code-csharp[WindowOwnerOwnedWindowsSnippets#GetWindowOwnedWindowsCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/CSharp/MainWindow.xaml.cs#getwindowownedwindowscode)]
 [!code-vb[WindowOwnerOwnedWindowsSnippets#GetWindowOwnedWindowsCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/visualbasic/mainwindow.xaml.vb#getwindowownedwindowscode)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public System.Windows.Window Owner { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Window Owner" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Owner" />
      <MemberSignature Language="VB.NET" Value="Public Property Owner As Window" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Window ^ Owner { System::Windows::Window ^ get(); void set(System::Windows::Window ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Owner : System.Windows.Window with get, set" Usage="System.Windows.Window.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Window</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-423">이 <see cref="T:System.Windows.Window" />를 소유하는<see cref="T:System.Windows.Window" />를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-423">Gets or sets the <see cref="T:System.Windows.Window" /> that owns this <see cref="T:System.Windows.Window" />.</span></span></summary>
        <value><span data-ttu-id="2ab17-424">이 <see cref="T:System.Windows.Window" />의 소유자를 나타내는 <see cref="T:System.Windows.Window" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-424">A <see cref="T:System.Windows.Window" /> object that represents the owner of this <see cref="T:System.Windows.Window" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-425">호출 하 여 자식 창을 부모 창으로 열릴 때 <xref:System.Windows.Window.ShowDialog%2A>, 부모 및 자식 창 사이 암시적 관계가 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-425">When a child window is opened by a parent window by calling <xref:System.Windows.Window.ShowDialog%2A>, an implicit relationship is established between both parent and child window.</span></span> <span data-ttu-id="2ab17-426">이 관계는 최소화, 최대화 및 복원 관련 하 여 포함 하 여 특정 동작을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-426">This relationship enforces certain behaviors, including with respect to minimizing, maximizing, and restoring.</span></span>  
  
 <span data-ttu-id="2ab17-427">그러나 호출 하 여 자식 창을 부모 창에서 만들 때 <xref:System.Windows.Window.Show%2A>, 자식 창에는 관계가 없는 부모 창 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-427">When a child window is created by a parent window by calling <xref:System.Windows.Window.Show%2A>, however, the child window does not have a relationship with the parent window.</span></span> <span data-ttu-id="2ab17-428">이는 다음을 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-428">This means that:</span></span>  
  
-   <span data-ttu-id="2ab17-429">자식 창의 부모 창에 대 한 참조가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-429">The child window does not have a reference to the parent window.</span></span>  
  
-   <span data-ttu-id="2ab17-430">자식 창의 동작은 부모 창;의 동작에 종속 되지 않습니다. 창이 나 다른 처리할 수 있습니다 하거나 최소화, 최대화 및 서로 독립적으로 복원 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-430">The behavior of the child window is not dependent on the behavior of the parent window; either window can cover the other, or be minimized, maximized, and restored independently of the other.</span></span>  
  
 <span data-ttu-id="2ab17-431">부모 창의 자식 창 사이의 관계를 만들 수 있도록 <xref:System.Windows.Window> 소유권의 개념을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-431">To allow you to create a relationship between a child window and a parent window, <xref:System.Windows.Window> supports the notion of ownership.</span></span> <span data-ttu-id="2ab17-432">소유권이 설정 된 경우는 <xref:System.Windows.Window.Owner%2A> 다른 창 (소유자 창)에 대 한 참조를 사용 하 여 속성 창 (소유한 창)을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-432">Ownership is established when the <xref:System.Windows.Window.Owner%2A> property of a window (the owned window) is set with a reference to another window (the owner window).</span></span>  
  
 <span data-ttu-id="2ab17-433">이 관계 설정 되 면 다음 동작이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-433">Once this relationship is established, the following behaviors are exhibited:</span></span>  
  
-   <span data-ttu-id="2ab17-434">소유자 창이 최소화 되 면 모든 소유 된 창도 최소화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-434">If an owner window is minimized, all its owned windows are minimized as well.</span></span>  
  
-   <span data-ttu-id="2ab17-435">소유 된 창을 최소화 하면 소유자 최소화 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-435">If an owned window is minimized, its owner is not minimized.</span></span>  
  
-   <span data-ttu-id="2ab17-436">소유자 창 최대화 되 면 소유자 창 및 소유 된 창 복원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-436">If an owner window is maximized, both the owner window and its owned windows are restored.</span></span>  
  
-   <span data-ttu-id="2ab17-437">소유자 창은 소유 된 창은 덮을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-437">An owner window can never cover an owned window.</span></span>  
  
-   <span data-ttu-id="2ab17-438">사용 하 여 열려 있지 않은 windows 소유 <xref:System.Windows.Window.ShowDialog%2A> 는 모달 대화 상자가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-438">Owned windows that were not opened using <xref:System.Windows.Window.ShowDialog%2A> are not modal.</span></span> <span data-ttu-id="2ab17-439">여전히 사용자 소유자 창 상호 작용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-439">The user can still interact with the owner window.</span></span>  
  
-   <span data-ttu-id="2ab17-440">소유자 창을 닫은 경우 소유 된 창도 닫힙니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-440">If you close an owner window, its owned windows are also closed.</span></span>  
  
-   <span data-ttu-id="2ab17-441">소유 된 창을 사용 하 여 해당 소유자 창에서 열린 경우 <xref:System.Windows.Window.Show%2A>, 소유자 및 소유한 창의 창이 닫힌 <xref:System.Windows.Window.Closing> 이벤트가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-441">If an owned window was opened by its owner window using <xref:System.Windows.Window.Show%2A>, and the owner window is closed, the owned window's <xref:System.Windows.Window.Closing> event is not raised.</span></span>  
  
 <span data-ttu-id="2ab17-442">호출 하 여 자식 창을 열면 <xref:System.Windows.Window.ShowDialog%2A>를 설정 해야 합니다 <xref:System.Windows.Window.Owner%2A> 자식 창의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-442">When you open a child window by calling <xref:System.Windows.Window.ShowDialog%2A>, you should also set the <xref:System.Windows.Window.Owner%2A> property of the child window.</span></span> <span data-ttu-id="2ab17-443">그렇지 않으면 사용자가 작업 표시줄 단추를 눌러 자식 창 및 부모 창을 모두 복원 하는 일을 할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-443">If you don't, then your users won't be able to restore both child window and parent window by pressing the task bar button.</span></span> <span data-ttu-id="2ab17-444">대신, 작업 표시줄 단추를 누르면를 생성 하 여 select, 자식 및 부모 창 등의 windows 목록 선택한 기간에만 복원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-444">Instead, pressing the task bar button will yield a list of windows, including both child and parent window, for them to select; only the selected window is restored.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2ab17-445">설정 해야 합니다 <xref:System.Windows.Window.Owner%2A> 를 호출 하 여 열려 있는 창에 속성 <xref:System.Windows.Window.ShowDialog%2A> 올바른 동작을 보장 하려면.</span><span class="sxs-lookup"><span data-stu-id="2ab17-445">You should also set the <xref:System.Windows.Window.Owner%2A> property on a window that is opened by calling <xref:System.Windows.Window.ShowDialog%2A> to ensure correct behavior with .</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ab17-446">설정 하거나 창을 브라우저에 호스팅되는 경우이 속성을 가져올 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-446">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ab17-447">다음 예제에는 소유자 소유 관계를 설정 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-447">The following example shows how to establish the owner/owned relationship.</span></span>  
  
 [!code-csharp[WindowOwnerOwnedWindowsSnippets#SetWindowOwnerCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/CSharp/MainWindow.xaml.cs#setwindowownercode)]
 [!code-vb[WindowOwnerOwnedWindowsSnippets#SetWindowOwnerCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/visualbasic/mainwindow.xaml.vb#setwindowownercode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2ab17-448">창이 자신을 소유하려고 하는 경우</span><span class="sxs-lookup"><span data-stu-id="2ab17-448">A window tries to own itself</span></span> 
<span data-ttu-id="2ab17-449">또는</span><span class="sxs-lookup"><span data-stu-id="2ab17-449">-or-</span></span> 
<span data-ttu-id="2ab17-450">두 개의 창이 서로를 소유하려고 하는 경우</span><span class="sxs-lookup"><span data-stu-id="2ab17-450">Two windows try to own each other.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ab17-451"><see cref="P:System.Windows.Window.Owner" />를 사용하여 표시된 창에서 <see cref="M:System.Windows.Window.ShowDialog" /> 속성이 설정된 경우</span><span class="sxs-lookup"><span data-stu-id="2ab17-451">The <see cref="P:System.Windows.Window.Owner" /> property is set on a visible window shown using <see cref="M:System.Windows.Window.ShowDialog" /></span></span>  
  
<span data-ttu-id="2ab17-452">또는</span><span class="sxs-lookup"><span data-stu-id="2ab17-452">-or-</span></span> 
<span data-ttu-id="2ab17-453">이전에 표시되지 않은 창에서 <see cref="P:System.Windows.Window.Owner" /> 속성이 설정된 경우</span><span class="sxs-lookup"><span data-stu-id="2ab17-453">The <see cref="P:System.Windows.Window.Owner" /> property is set with a window that has not been previously shown.</span></span></exception>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="2ab17-454">모든 창과 사용자 입력된 이벤트를 제한 없이 사용할 수 있는 권한입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-454">for permission to use all windows and user input events without restriction.</span></span> <span data-ttu-id="2ab17-455">연결 된 열거형: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="2ab17-455">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="P:System.Windows.Window.OwnedWindows" />
      </Docs>
    </Member>
    <Member MemberName="ResizeMode">
      <MemberSignature Language="C#" Value="public System.Windows.ResizeMode ResizeMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.ResizeMode ResizeMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.ResizeMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ResizeMode As ResizeMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ResizeMode ResizeMode { System::Windows::ResizeMode get(); void set(System::Windows::ResizeMode value); };" />
      <MemberSignature Language="F#" Value="member this.ResizeMode : System.Windows.ResizeMode with get, set" Usage="System.Windows.Window.ResizeMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.ResizeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-456">크기 조정 모드를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-456">Gets or sets the resize mode.</span></span></summary>
        <value><span data-ttu-id="2ab17-457">크기 조정 모드를 지정하는 <see cref="T:System.Windows.ResizeMode" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-457">A <see cref="T:System.Windows.ResizeMode" /> value specifying the resize mode.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-458">네 가지 옵션이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-458">There are four options:</span></span>  
  
-   <span data-ttu-id="2ab17-459">**NoResize**합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-459">**NoResize**.</span></span> <span data-ttu-id="2ab17-460">사용자 창의 크기를 조정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-460">The user cannot resize the window.</span></span> <span data-ttu-id="2ab17-461">최대화, 최소화 상자 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-461">The Maximize and Minimize boxes are not shown.</span></span>  
  
-   <span data-ttu-id="2ab17-462">**CanMinimize**합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-462">**CanMinimize**.</span></span> <span data-ttu-id="2ab17-463">만 사용자 창을 최소화 하 고 작업 표시줄에서 복원할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-463">The user can only minimize the window and restore it from the taskbar.</span></span> <span data-ttu-id="2ab17-464">최소화 및 최대화 상자 모두 표시 되지만 최소화 상자만 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-464">The Minimize and Maximize boxes are both shown, but only the Minimize box is enabled.</span></span>  
  
-   <span data-ttu-id="2ab17-465">**CanResize**합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-465">**CanResize**.</span></span> <span data-ttu-id="2ab17-466">사용자가 창 주변의 최소화 및 최대화 상자 및 draggable 개요를 사용 하 여 창의 크기를 조정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-466">The user has the full ability to resize the window, using the Minimize and Maximize boxes, and a draggable outline around the window.</span></span> <span data-ttu-id="2ab17-467">최소화 및 최대화 상자를 표시 하 고 사용 하도록 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-467">The Minimize and Maximize boxes are shown and enabled.</span></span> <span data-ttu-id="2ab17-468">(기본값)입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-468">(Default).</span></span>  
  
-   <span data-ttu-id="2ab17-469">**CanResizeWithGrip**.</span><span class="sxs-lookup"><span data-stu-id="2ab17-469">**CanResizeWithGrip**.</span></span> <span data-ttu-id="2ab17-470">이 옵션은 동일한 기능을 <xref:System.Windows.ResizeMode.CanResize>, 있지만 "크기 조정 그립" 창의 오른쪽 아래 모서리에 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-470">This option has the same functionality as <xref:System.Windows.ResizeMode.CanResize>, but adds a "resize grip" to the lower right corner of the window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ab17-471">설정 하거나 창을 브라우저에 호스팅되는 경우이 속성을 가져올 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-471">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowResizeMode"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="2ab17-472">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="2ab17-472">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2ab17-473">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="2ab17-473">Identifier field</span></span>|<xref:System.Windows.Window.ResizeModeProperty>|  
|<span data-ttu-id="2ab17-474">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="2ab17-474">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.Primitives.ResizeGrip" />
      </Docs>
    </Member>
    <Member MemberName="ResizeModeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ResizeModeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ResizeModeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.ResizeModeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ResizeModeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ResizeModeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ResizeModeProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.ResizeModeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-475"><see cref="P:System.Windows.Window.ResizeMode" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-475">Identifies the <see cref="P:System.Windows.Window.ResizeMode" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreBounds">
      <MemberSignature Language="C#" Value="public System.Windows.Rect RestoreBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Rect RestoreBounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.RestoreBounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RestoreBounds As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Rect RestoreBounds { System::Windows::Rect get(); };" />
      <MemberSignature Language="F#" Value="member this.RestoreBounds : System.Windows.Rect" Usage="System.Windows.Window.RestoreBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-476">최소화 또는 최대화하기 전의 창의 크기와 위치를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-476">Gets the size and location of a window before being either minimized or maximized.</span></span></summary>
        <value><span data-ttu-id="2ab17-477">최소화 또는 최대화하기 전의 창의 크기와 위치를 지정하는 <see cref="T:System.Windows.Rect" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-477">A <see cref="T:System.Windows.Rect" /> that specifies the size and location of a window before being either minimized or maximized.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-478">복원 사각형은 최소화 또는 최대화 전에 창에서 사용 된 영역입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-478">The restore rectangle is the region occupied by the window before it was minimized or maximized.</span></span> <span data-ttu-id="2ab17-479">사용할 수 있습니다 <xref:System.Windows.Window.RestoreBounds%2A> 응용 프로그램을 닫기 전에 마지막 크기 및 창 위치를 저장 및 다음 사용자를 생략 하는 방식과 창을 복원 하려면 응용 프로그램을 시작할 때 이러한 값을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-479">You can use <xref:System.Windows.Window.RestoreBounds%2A> to save the last size and location of a window before an application is closed, and retrieve those values the next time an application starts to restore a window to the way a user left it.</span></span>  
  
 <span data-ttu-id="2ab17-480">쿼리하면 <xref:System.Windows.Window.RestoreBounds%2A> 창이 표시 된 전이나 이미 종료 된 후 <xref:System.Windows.Rect.Empty%2A> 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-480">If you query <xref:System.Windows.Window.RestoreBounds%2A> before the window has been shown or after it has been closed, <xref:System.Windows.Rect.Empty%2A> is returned.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ab17-481">창이 브라우저에 호스팅되는 경우에이 속성을 가져올 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-481">You cannot get this property when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ab17-482">다음 예제에서는 <xref:System.Windows.Window.RestoreBounds%2A> 및 격리 된 저장소 크기 및 창 위치와 동일한 것은 창이 표시 되기 이전 시간을 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-482">The following example uses <xref:System.Windows.Window.RestoreBounds%2A> and isolated storage to ensure the size and location of a window are the same as they were the previous time the window was shown.</span></span>  
  
 [!code-xaml[WindowRestoreBoundsSnippets#WindowRestoreBoundsXAML1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml#windowrestoreboundsxaml1)]  
[!code-xaml[WindowRestoreBoundsSnippets#WindowRestoreBoundsXAML2](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml#windowrestoreboundsxaml2)]  
  
 [!code-csharp[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml.cs#windowrestoreboundscodebehind1)]
 [!code-vb[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/visualbasic/mainwindow.xaml.vb#windowrestoreboundscodebehind1)]  
[!code-csharp[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND2](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml.cs#windowrestoreboundscodebehind2)]
[!code-vb[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/visualbasic/mainwindow.xaml.vb#windowrestoreboundscodebehind2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="2ab17-483">크기와 창 위치를 쿼리 하는 권한에 대 한 경계 사각형입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-483">for permission to query for the size and location of a window's bounding rectangle.</span></span> <span data-ttu-id="2ab17-484">연결 된 열거형: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="2ab17-484">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.Show" />
      <MemberSignature Language="VB.NET" Value="Public Sub Show ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Show();" />
      <MemberSignature Language="F#" Value="member this.Show : unit -&gt; unit" Usage="window.Show " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2ab17-485">창을 연 후 새로 열린 창이 닫힐 때까지 기다리지 않고 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-485">Opens a window and returns without waiting for the newly opened window to close.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-486">경우는 <xref:System.Windows.Window> 클래스가 인스턴스화되면, 기본적으로 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-486">When the <xref:System.Windows.Window> class is instantiated, it is not visible by default.</span></span> <span data-ttu-id="2ab17-487"><xref:System.Windows.Window.Show%2A> 창을 표시 하 고 창이 닫힐 때까지 기다리지 않고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-487"><xref:System.Windows.Window.Show%2A> shows a window and returns immediately, without waiting for the window to be closed.</span></span> <span data-ttu-id="2ab17-488">결과적으로 열린된 창이 사용자 응용 프로그램에서 다른 windows와 상호 작용을 방지 하지는 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-488">Consequently, the opened window does not prevent users from interacting with other windows in the application.</span></span> <span data-ttu-id="2ab17-489">이 유형의 창 호출 되는 *모덜리스* 창입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-489">This type of window is called a *modeless* window.</span></span> <span data-ttu-id="2ab17-490">모덜리스 windows의 일반적인 예에는 속성 창과 도구 상자의 색상표는 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-490">Common examples of modeless windows are properties windows, toolboxes, and palettes.</span></span> <span data-ttu-id="2ab17-491">특정 창 상호 작용 하는 사용자를 제한 하려면 창을 열어야 호출 하 여 <xref:System.Windows.Window.ShowDialog%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-491">To restrict a user to interacting with a specific window, the window must be opened by calling <xref:System.Windows.Window.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="2ab17-492">호출 하 여 열려 있는 창을 <xref:System.Windows.Window.Show%2A> 않습니다이 열려 있는 창 사용 하 여 관계가 자동으로, 특히 열린된 창 알지 창을 연 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-492">A window that is opened by calling <xref:System.Windows.Window.Show%2A> does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.</span></span> <span data-ttu-id="2ab17-493">사용 하 여이 관계를 설정할 수 있습니다는 <xref:System.Windows.Window.Owner%2A> 속성 및 관리를 사용 하는 <xref:System.Windows.Window.OwnedWindows%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-493">This relationship can be established using the <xref:System.Windows.Window.Owner%2A> property and managed using the <xref:System.Windows.Window.OwnedWindows%2A> property.</span></span>  
  
 <span data-ttu-id="2ab17-494">호출 <xref:System.Windows.Window.Show%2A> 설정으로 동일한 최종 결과 달성 <xref:System.Windows.UIElement.Visibility%2A> 의 속성을 <xref:System.Windows.Window> 개체를 <xref:System.Windows.Visibility.Visible>입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-494">Calling <xref:System.Windows.Window.Show%2A> achieves the same end result as setting <xref:System.Windows.UIElement.Visibility%2A> property of the <xref:System.Windows.Window> object to <xref:System.Windows.Visibility.Visible>.</span></span> <span data-ttu-id="2ab17-495">그러나 타이밍 관점에서 둘 간의 차이가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-495">However, there is a difference between the two from a timing perspective.</span></span>  
  
 <span data-ttu-id="2ab17-496">호출 <xref:System.Windows.Window.Show%2A> 후에 반환 하는 동기 작업이 <xref:System.Windows.FrameworkElement.Loaded> 자식 창에 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-496">Calling <xref:System.Windows.Window.Show%2A> is a synchronous operation that returns only after the <xref:System.Windows.FrameworkElement.Loaded> event on the child window has been raised:</span></span>  
  
 [!code-csharp[WindowShowTimingSnippets#ShowSync](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowTimingSnippets/CSharp/Window1.xaml.cs#showsync)]
 [!code-vb[WindowShowTimingSnippets#ShowSync](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowTimingSnippets/visualbasic/window1.xaml.vb#showsync)]  
  
 <span data-ttu-id="2ab17-497">그러나 설정 <xref:System.Windows.UIElement.Visibility%2A>,는 즉시 반환 하는 비동기 작업:</span><span class="sxs-lookup"><span data-stu-id="2ab17-497">Setting <xref:System.Windows.UIElement.Visibility%2A>, however, is an asynchronous operation that returns immediately:</span></span>  
  
 [!code-csharp[WindowShowTimingSnippets#ShowASync](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowTimingSnippets/CSharp/Window1.xaml.cs#showasync)]
 [!code-vb[WindowShowTimingSnippets#ShowASync](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowTimingSnippets/visualbasic/window1.xaml.vb#showasync)]  
  
 <span data-ttu-id="2ab17-498">설정 하는 경우 <xref:System.Windows.UIElement.Visibility%2A>를 설정 하기 전에 등록할 창 이벤트 <xref:System.Windows.UIElement.Visibility%2A> 설정 하는 방법을 수행한 후 될 때까지 발생할 수 있습니다 <xref:System.Windows.UIElement.Visibility%2A> 실행을 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-498">When setting <xref:System.Windows.UIElement.Visibility%2A>, any window events you register before you set <xref:System.Windows.UIElement.Visibility%2A> may not be raised until after the method in which you set <xref:System.Windows.UIElement.Visibility%2A> has completed execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ab17-499">다음 샘플에는 모덜리스 창을 여는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-499">The following sample demonstrates how to open a modeless window.</span></span>  
  
 [!code-csharp[WindowShowSnippets#WindowShowCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowSnippets/CSharp/MainWindow.xaml.cs#windowshowcode)]
 [!code-vb[WindowShowSnippets#WindowShowCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowSnippets/visualbasic/mainwindow.xaml.vb#windowshowcode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ab17-500">닫히고 있는 창(<see cref="M:System.Windows.Window.Show" />) 또는 닫힌 창(<see cref="E:System.Windows.Window.Closing" />)에서 <see cref="E:System.Windows.Window.Closed" />가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="2ab17-500"><see cref="M:System.Windows.Window.Show" /> is called on a window that is closing (<see cref="E:System.Windows.Window.Closing" />) or has been closed (<see cref="E:System.Windows.Window.Closed" />).</span></span></exception>
        <altmember cref="M:System.Windows.Window.Close" />
        <altmember cref="M:System.Windows.Window.Hide" />
        <altmember cref="P:System.Windows.Window.WindowState" />
      </Docs>
    </Member>
    <Member MemberName="ShowActivated">
      <MemberSignature Language="C#" Value="public bool ShowActivated { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowActivated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.ShowActivated" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowActivated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowActivated { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowActivated : bool with get, set" Usage="System.Windows.Window.ShowActivated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-501">창이 처음 표시될 때 활성화되는지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-501">Gets or sets a value that indicates whether a window is activated when first shown.</span></span></summary>
        <value><span data-ttu-id="2ab17-502">창이 처음 표시될 때 활성화되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-502"><see langword="true" /> if a window is activated when first shown; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="2ab17-503">기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-503">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-504">창을 해당 <xref:System.Windows.Window.ShowActivated%2A> 속성으로 설정 `false` 는 열린 창 활성화 되지 않았습니다 고 <xref:System.Windows.Window.Activated> 선택 하 여 창을 수동으로 활성화 될 때까지 이벤트가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-504">When a window with its <xref:System.Windows.Window.ShowActivated%2A> property set to `false` is opened, the window is not activated and its <xref:System.Windows.Window.Activated> event is not raised until a user manually activates the window by selecting it.</span></span> <span data-ttu-id="2ab17-505">창을 선택한 후 활성화 및 비활성화 하 고 일반적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-505">After the window is selected, it activates and deactivates normally.</span></span>  
  
 <span data-ttu-id="2ab17-506">창이 열릴 때 활성화 되 고 하지 못하도록 합니다 <xref:System.Windows.Window.ShowActivated%2A> 속성으로 설정 되어 있어야 `false` 창이 표시 되기 전에 (호출 하 여 <xref:System.Windows.Window.Show%2A>) 설정 <xref:System.Windows.Window.ShowActivated%2A> 를 `false` 후 영향을 주지 않습니다 창이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-506">To prevent a window from being activated when it opens, the <xref:System.Windows.Window.ShowActivated%2A> property must be set to `false` before the window is shown (by calling <xref:System.Windows.Window.Show%2A>); setting <xref:System.Windows.Window.ShowActivated%2A> to `false` after a window is shown has no effect.</span></span>  
  
 <span data-ttu-id="2ab17-507">설정 <xref:System.Windows.Window.ShowActivated%2A> 하 `false` 모달 형식으로 호출 하 여 열려 있는 창에 <xref:System.Windows.Window.ShowDialog%2A>, 실제 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-507">Setting <xref:System.Windows.Window.ShowActivated%2A> to `false` on a window that is opened modally, by calling <xref:System.Windows.Window.ShowDialog%2A>, has no real impact.</span></span> <span data-ttu-id="2ab17-508">모달 창 활성화 되지 것입니다, 하지만 모달 창 사용자가 다른 응용 프로그램 열기 창을 활성화할 수 없게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-508">Although the modal window will not be activated, the modal window will prevent the user from activating any other open application windows.</span></span>  
  
<a name="dependencyPropertyInfo_WindowShowActivated"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="2ab17-509">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="2ab17-509">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2ab17-510">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="2ab17-510">Identifier field</span></span>|<xref:System.Windows.Window.ShowActivatedProperty>|  
|<span data-ttu-id="2ab17-511">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="2ab17-511">Metadata properties set to `true`</span></span>|<span data-ttu-id="2ab17-512">없음</span><span class="sxs-lookup"><span data-stu-id="2ab17-512">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2ab17-513">다음 예제에서는 태그를 사용 하 여 창을 활성화 되지 않고 열 수를 구성 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-513">The following example shows how to use markup to configure a window to be opened without being activated.</span></span>  
  
 [!code-xaml[WindowShowActivatedSnippets#ShowUnactivatedMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowActivatedSnippets/CSharp/AWindow.xaml#showunactivatedmarkup1)]  
  
  
 [!code-csharp[WindowShowActivatedSnippets#ShowUnactivatedCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowActivatedSnippets/CSharp/AWindow.xaml.cs#showunactivatedcodebehind)]
 [!code-vb[WindowShowActivatedSnippets#ShowUnactivatedCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowActivatedSnippets/visualbasic/awindow.xaml.vb#showunactivatedcodebehind)]  
  
 <span data-ttu-id="2ab17-514">다음 예제에서는 코드를 사용 하 여 활성화 되지 않고 열려는 기간을 구성 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-514">The following example shows how to use code to configure a window to be opened without it being activated.</span></span>  
  
 [!code-csharp[WindowShowActivatedSnippets#ShowUnactivatedWindowCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowActivatedSnippets/CSharp/Window1.xaml.cs#showunactivatedwindowcode)]
 [!code-vb[WindowShowActivatedSnippets#ShowUnactivatedWindowCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowActivatedSnippets/visualbasic/window1.xaml.vb#showunactivatedwindowcode)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowActivatedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ShowActivatedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ShowActivatedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.ShowActivatedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ShowActivatedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ShowActivatedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ShowActivatedProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.ShowActivatedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-515"><see cref="P:System.Windows.Window.ShowActivated" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-515">Identifies the <see cref="P:System.Windows.Window.ShowActivated" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowDialog">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; ShowDialog ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;bool&gt; ShowDialog() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.ShowDialog" />
      <MemberSignature Language="VB.NET" Value="Public Function ShowDialog () As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Nullable&lt;bool&gt; ShowDialog();" />
      <MemberSignature Language="F#" Value="member this.ShowDialog : unit -&gt; Nullable&lt;bool&gt;" Usage="window.ShowDialog " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2ab17-516">창을 연 후 새로 열린 창이 닫힌 경우에만 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-516">Opens a window and returns only when the newly opened window is closed.</span></span></summary>
        <returns><span data-ttu-id="2ab17-517">작업이 받아들여졌는지(<see langword="true" /> 또는 취소되었는지(<see langword="false" />) 여부를 지정하는 <see cref="T:System.Nullable`1" /> 유형의 <see cref="T:System.Boolean" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-517">A <see cref="T:System.Nullable`1" /> value of type <see cref="T:System.Boolean" /> that specifies whether the activity was accepted (<see langword="true" />) or canceled (<see langword="false" />).</span></span> <span data-ttu-id="2ab17-518">반환 값은 창이 닫히기 전의 <see cref="P:System.Windows.Window.DialogResult" /> 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-518">The return value is the value of the <see cref="P:System.Windows.Window.DialogResult" /> property before a window closes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-519">경우는 <xref:System.Windows.Window> 클래스가 인스턴스화되면, 기본적으로 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-519">When a <xref:System.Windows.Window> class is instantiated, it is not visible by default.</span></span> <span data-ttu-id="2ab17-520"><xref:System.Windows.Window.ShowDialog%2A> 창을 보여 줍니다, 그리고 응용 프로그램에서 다른 모든 windows를 사용 하지 않도록 설정 하 고 창이 닫혀 있는 경우에를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-520"><xref:System.Windows.Window.ShowDialog%2A> shows the window, disables all other windows in the application, and returns only when the window is closed.</span></span> <span data-ttu-id="2ab17-521">이 유형의 창 이라고는 *모달* 창입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-521">This type of window is known as a *modal* window.</span></span>  
  
 <span data-ttu-id="2ab17-522">모달 창은 주로 대화 상자로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-522">Modal windows are primarily used as dialog boxes.</span></span> <span data-ttu-id="2ab17-523">대화 상자는 특수 한 유형의 응용 프로그램 파일을 열거나 문서 인쇄와 같은 작업을 완료 하는 사용자와 상호 작용 하는 데 사용할 수 있는 창입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-523">A dialog box is a special type of window that applications use to interact with users to complete tasks, such as opening files or printing documents.</span></span> <span data-ttu-id="2ab17-524">대화 상자에는 일반적으로 적용 하거나는 표시 된 대화 상자를 닫기 전에 작업을 취소할 수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-524">Dialog boxes commonly allow users to accept or cancel the task for which they were shown before the dialog box is closed.</span></span> <span data-ttu-id="2ab17-525"><xref:System.Windows.Window.ShowDialog%2A> 반환 된 <xref:System.Nullable%601> <xref:System.Boolean> 활동 수락 되었거나 취소 여부를 지정 하는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-525"><xref:System.Windows.Window.ShowDialog%2A> returns a <xref:System.Nullable%601><xref:System.Boolean> value that specifies whether the activity was accepted or canceled.</span></span> <span data-ttu-id="2ab17-526">반환 값은 창이 닫히기 전의 <xref:System.Windows.Window.DialogResult%2A> 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-526">The return value is the value of the <xref:System.Windows.Window.DialogResult%2A> property before a window closes.</span></span> <span data-ttu-id="2ab17-527">자세한 내용은 <xref:System.Windows.Window.DialogResult%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="2ab17-527">For more information, see <xref:System.Windows.Window.DialogResult%2A>.</span></span>  
  
 <span data-ttu-id="2ab17-528">호출 하 여 열려 있는 창을 <xref:System.Windows.Window.ShowDialog%2A> 메서드에 자동으로 열이 있는 창 사용 하 여 관계가 없는; 특히 열린된 창 알지 창을 연 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-528">A window that is opened by calling the <xref:System.Windows.Window.ShowDialog%2A> method does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.</span></span> <span data-ttu-id="2ab17-529">사용 하 여이 관계를 설정할 수 있습니다는 <xref:System.Windows.Window.Owner%2A> 속성 및 관리를 사용 하는 <xref:System.Windows.Window.OwnedWindows%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-529">This relationship can be established using the <xref:System.Windows.Window.Owner%2A> property and managed using the <xref:System.Windows.Window.OwnedWindows%2A> property.</span></span> <span data-ttu-id="2ab17-530">지원 하기 위해 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 자동화 (참조 [UI 자동화 개요](~/docs/framework/ui-automation/ui-automation-overview.md)), <xref:System.Windows.Window.Owner%2A> 호출 하 여 연 창에 대 한 설정 해야 합니다 <xref:System.Windows.Window.ShowDialog%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-530">To support [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] automation (see [UI Automation Overview](~/docs/framework/ui-automation/ui-automation-overview.md)), <xref:System.Windows.Window.Owner%2A> must be set for a window opened by calling <xref:System.Windows.Window.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="2ab17-531">모달 [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] 창 (호출로 열린 창 <xref:System.Windows.Window.ShowDialog%2A>) 닫혀 이전에 활성화 된 창이 다시 활성화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-531">When a modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window (a window opened by calling <xref:System.Windows.Window.ShowDialog%2A>) is closed, the previously activated window is reactivated.</span></span> <span data-ttu-id="2ab17-532">경우 모달 [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] 창에 소유자 (참조 <xref:System.Windows.Window.Owner%2A>), 소유자 창이 다시 활성화 될 때 모달 [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] 이전에 활성화 된 창 않은 경우 창이 닫힙니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-532">If a modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window has an owner window (see <xref:System.Windows.Window.Owner%2A>), the owner window is not reactivated when the modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window is closed unless it was the previously activated window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ab17-533">창이 브라우저에서 호스팅될 때이 메서드를 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-533">This method cannot be called when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ab17-534">다음 샘플에는 모달 창을 여는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-534">The following sample demonstrates how to open a modal window.</span></span>  
  
 [!code-csharp[WindowShowDialogSnippets#WindowShowDialogCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowDialogSnippets/CSharp/MainWindow.xaml.cs#windowshowdialogcode)]
 [!code-vb[WindowShowDialogSnippets#WindowShowDialogCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowDialogSnippets/visualbasic/mainwindow.xaml.vb#windowshowdialogcode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2ab17-535">닫히고 있는 창(<see cref="M:System.Windows.Window.ShowDialog" />) 또는 닫힌 창(<see cref="E:System.Windows.Window.Closing" />)에서 <see cref="E:System.Windows.Window.Closed" />가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="2ab17-535"><see cref="M:System.Windows.Window.ShowDialog" /> is called on a window that is closing (<see cref="E:System.Windows.Window.Closing" />) or has been closed (<see cref="E:System.Windows.Window.Closed" />).</span></span></exception>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="2ab17-536">창을 활성화할 수 있는 권한입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-536">for permission to activate a window.</span></span> <span data-ttu-id="2ab17-537">연결 된 열거형: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="2ab17-537">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="M:System.Windows.Window.Close" />
        <altmember cref="P:System.Windows.Window.WindowState" />
      </Docs>
    </Member>
    <Member MemberName="ShowInTaskbar">
      <MemberSignature Language="C#" Value="public bool ShowInTaskbar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowInTaskbar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.ShowInTaskbar" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowInTaskbar As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowInTaskbar { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowInTaskbar : bool with get, set" Usage="System.Windows.Window.ShowInTaskbar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-538">창에 작업 표시줄 단추가 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-538">Gets or sets a value that indicates whether the window has a task bar button.</span></span></summary>
        <value><span data-ttu-id="2ab17-539">창에 작업 표시줄 단추가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-539"><see langword="true" /> if the window has a task bar button; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="2ab17-540">창이 브라우저에서 호스팅될 때는 적용하지 마십시오.</span><span class="sxs-lookup"><span data-stu-id="2ab17-540">Does not apply when the window is hosted in a browser.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-541">하는 경우 <xref:System.Windows.Window.ShowInTaskbar%2A> 로 설정 된 `true`, ALT + TAB 응용 프로그램 선택 목록의 창도 나타납니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-541">If <xref:System.Windows.Window.ShowInTaskbar%2A> is set to `true`, the window will also appear in the ALT+TAB application selection list.</span></span>  
  
 <span data-ttu-id="2ab17-542">작업 표시줄 단추 및 ALT + TAB 응용 프로그램 선택 목록에 사용 되는 아이콘의 값인는 <xref:System.Windows.Window.Icon%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-542">The icon that is used for both the task bar button and the ALT+TAB application selection list is the value of the <xref:System.Windows.Window.Icon%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ab17-543">설정 하거나 창을 브라우저에 호스팅되는 경우이 속성을 가져올 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-543">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowShowInTaskbar"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="2ab17-544">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="2ab17-544">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2ab17-545">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="2ab17-545">Identifier field</span></span>|<xref:System.Windows.Window.ShowInTaskbarProperty>|  
|<span data-ttu-id="2ab17-546">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="2ab17-546">Metadata properties set to `true`</span></span>|<span data-ttu-id="2ab17-547">없음</span><span class="sxs-lookup"><span data-stu-id="2ab17-547">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowInTaskbarProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ShowInTaskbarProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ShowInTaskbarProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.ShowInTaskbarProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ShowInTaskbarProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ShowInTaskbarProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ShowInTaskbarProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.ShowInTaskbarProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-548"><see cref="P:System.Windows.Window.ShowInTaskbar" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-548">Identifies the <see cref="P:System.Windows.Window.ShowInTaskbar" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeToContent">
      <MemberSignature Language="C#" Value="public System.Windows.SizeToContent SizeToContent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.SizeToContent SizeToContent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.SizeToContent" />
      <MemberSignature Language="VB.NET" Value="Public Property SizeToContent As SizeToContent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::SizeToContent SizeToContent { System::Windows::SizeToContent get(); void set(System::Windows::SizeToContent value); };" />
      <MemberSignature Language="F#" Value="member this.SizeToContent : System.Windows.SizeToContent with get, set" Usage="System.Windows.Window.SizeToContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.SizeToContent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-549">콘텐츠 크기에 맞게 창의 크기를 자동으로 조정할지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-549">Gets or sets a value that indicates whether a window will automatically size itself to fit the size of its content.</span></span></summary>
        <value><span data-ttu-id="2ab17-550"><see cref="T:System.Windows.SizeToContent" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-550">A <see cref="T:System.Windows.SizeToContent" /> value.</span></span> <span data-ttu-id="2ab17-551">기본값은 <see cref="F:System.Windows.SizeToContent.Manual" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-551">The default is <see cref="F:System.Windows.SizeToContent.Manual" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-552">때 <xref:System.Windows.Window.SizeToContent%2A> 로 설정 된 <xref:System.Windows.SizeToContent.WidthAndHeight>를 설정 하거나 <xref:System.Windows.FrameworkElement.Height%2A> 또는 <xref:System.Windows.FrameworkElement.Width%2A> 영향을 주지 않습니다; 속성을 모두 설정할 수 있지만 사용 하 여 설정 값 창에 적용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-552">When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.WidthAndHeight>, setting either <xref:System.Windows.FrameworkElement.Height%2A> or <xref:System.Windows.FrameworkElement.Width%2A> has no effect; both properties can be set, but the values they are set with are not applied to the window.</span></span>  
  
 <span data-ttu-id="2ab17-553">때 <xref:System.Windows.Window.SizeToContent%2A> 로 설정 된 <xref:System.Windows.SizeToContent.Height>설정, <xref:System.Windows.FrameworkElement.Height%2A> 창의 높이 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-553">When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.Height>, setting <xref:System.Windows.FrameworkElement.Height%2A> does not change the height of the window.</span></span>  
  
 <span data-ttu-id="2ab17-554">때 <xref:System.Windows.Window.SizeToContent%2A> 로 설정 된 <xref:System.Windows.SizeToContent.Width>설정, <xref:System.Windows.FrameworkElement.Width%2A> 창의 너비를 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-554">When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.Width>, setting <xref:System.Windows.FrameworkElement.Width%2A> does not change the width of the window.</span></span>  
  
 <span data-ttu-id="2ab17-555">하는 경우 <xref:System.Windows.Window.SizeToContent%2A> 이외의 값을 가지 <xref:System.Windows.SizeToContent.Manual>:</span><span class="sxs-lookup"><span data-stu-id="2ab17-555">If <xref:System.Windows.Window.SizeToContent%2A> has a value other than <xref:System.Windows.SizeToContent.Manual>:</span></span>  
  
-   <span data-ttu-id="2ab17-556"><xref:System.Windows.Window.SizeToContent%2A> 자동으로 설정 됩니다 <xref:System.Windows.SizeToContent.Manual> 크기 조정 그립을 사용 하거나 테두리를 끌어 창의 크기를 조정 사용자 경우.</span><span class="sxs-lookup"><span data-stu-id="2ab17-556"><xref:System.Windows.Window.SizeToContent%2A> is automatically set to <xref:System.Windows.SizeToContent.Manual> if a user resizes the window by using the resize grip or dragging the border.</span></span>  
  
-   <span data-ttu-id="2ab17-557">창에 자체의 크기를 조정 하는 방식으로 콘텐츠의 크기를 변경할 경우 <xref:System.Windows.FrameworkElement.SizeChanged> 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-557">If the size of the content changes in a way that causes the window to resize itself, <xref:System.Windows.FrameworkElement.SizeChanged> is raised.</span></span>  
  
 <span data-ttu-id="2ab17-558">창이 투명 하 게 된 경우 (참조 <xref:System.Windows.Window.AllowsTransparency%2A>), 설정 되지 않는 것이 좋습니다 <xref:System.Windows.Window.SizeToContent%2A> 에 <xref:System.Windows.SizeToContent.WidthAndHeight> 기간은 해당 표시 콘텐츠 이하의 되도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-558">If a window is transparent (see <xref:System.Windows.Window.AllowsTransparency%2A>), you should consider setting <xref:System.Windows.Window.SizeToContent%2A> to <xref:System.Windows.SizeToContent.WidthAndHeight> to ensure the window is no larger than its visible content.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ab17-559">설정 하거나 창을 브라우저에 호스팅되는 경우이 속성을 가져올 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-559">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowSizeToContent"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="2ab17-560">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="2ab17-560">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2ab17-561">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="2ab17-561">Identifier field</span></span>|<xref:System.Windows.Window.SizeToContentProperty>|  
|<span data-ttu-id="2ab17-562">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="2ab17-562">Metadata properties set to `true`</span></span>|<span data-ttu-id="2ab17-563">없음</span><span class="sxs-lookup"><span data-stu-id="2ab17-563">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2ab17-564">다음 예제에서는 설정 하는 방법의 <xref:System.Windows.Window.SizeToContent%2A> 콘텐츠에 맞게 창의 크기 조정 하는 방법을 지정 하는 코드에서 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-564">The following example shows how to set the <xref:System.Windows.Window.SizeToContent%2A> property in code to specify how a window resizes to fit its content.</span></span>  
  
 [!code-csharp[HOWTOWindowManagementSnippets#SetWindowSizeToContentPropertyCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/HOWTOWindowManagementSnippets/CSharp/MainWindow.xaml.cs#setwindowsizetocontentpropertycode)]
 [!code-vb[HOWTOWindowManagementSnippets#SetWindowSizeToContentPropertyCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HOWTOWindowManagementSnippets/visualbasic/mainwindow.xaml.vb#setwindowsizetocontentpropertycode)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />
        <altmember cref="P:System.Windows.Window.ResizeMode" />
      </Docs>
    </Member>
    <Member MemberName="SizeToContentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SizeToContentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SizeToContentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.SizeToContentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SizeToContentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SizeToContentProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable SizeToContentProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.SizeToContentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-565"><see cref="P:System.Windows.Window.SizeToContent" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-565">Identifies the <see cref="P:System.Windows.Window.SizeToContent" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceInitialized">
      <MemberSignature Language="C#" Value="public event EventHandler SourceInitialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SourceInitialized" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.SourceInitialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SourceInitialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SourceInitialized;" />
      <MemberSignature Language="F#" Value="member this.SourceInitialized : EventHandler " Usage="member this.SourceInitialized : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-566">이 이벤트는 [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]와의 상호 운용성을 지원하기 위해 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-566">This event is raised to support interoperation with [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)].</span></span> <span data-ttu-id="2ab17-567"><see cref="T:System.Windows.Interop.HwndSource" />을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="2ab17-567">See <see cref="T:System.Windows.Interop.HwndSource" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler StateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler StateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.StateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StateChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ StateChanged;" />
      <MemberSignature Language="F#" Value="member this.StateChanged : EventHandler " Usage="member this.StateChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-568">창의 <see cref="P:System.Windows.Window.WindowState" /> 속성이 변경될 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-568">Occurs when the window's <see cref="P:System.Windows.Window.WindowState" /> property changes.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Window.WindowState" />
      </Docs>
    </Member>
    <Member MemberName="TaskbarItemInfo">
      <MemberSignature Language="C#" Value="public System.Windows.Shell.TaskbarItemInfo TaskbarItemInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Shell.TaskbarItemInfo TaskbarItemInfo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.TaskbarItemInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property TaskbarItemInfo As TaskbarItemInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Shell::TaskbarItemInfo ^ TaskbarItemInfo { System::Windows::Shell::TaskbarItemInfo ^ get(); void set(System::Windows::Shell::TaskbarItemInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TaskbarItemInfo : System.Windows.Shell.TaskbarItemInfo with get, set" Usage="System.Windows.Window.TaskbarItemInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Shell.TaskbarItemInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-569"><see cref="T:System.Windows.Window" />에 [!INCLUDE[win7](~/includes/win7-md.md)] 작업 표시줄 썸네일을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-569">Gets or sets the [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail for the <see cref="T:System.Windows.Window" />.</span></span></summary>
        <value><span data-ttu-id="2ab17-570"><see cref="T:System.Windows.Window" />의 [!INCLUDE[win7](~/includes/win7-md.md)] 작업 표시줄 축소판 그림입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-570">The [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail for the <see cref="T:System.Windows.Window" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-571">사용 하는 방법에 대 한 자세한 내용은 합니다 [!INCLUDE[win7](~/includes/win7-md.md)] 작업 표시줄 축소판 그림을 참조 하십시오는 <xref:System.Windows.Shell.TaskbarItemInfo> 클래스.</span><span class="sxs-lookup"><span data-stu-id="2ab17-571">For more information about how to use the [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail, see the <xref:System.Windows.Shell.TaskbarItemInfo> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="N:System.Windows.Shell" />
      </Docs>
    </Member>
    <Member MemberName="TaskbarItemInfoProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TaskbarItemInfoProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TaskbarItemInfoProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.TaskbarItemInfoProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TaskbarItemInfoProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TaskbarItemInfoProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TaskbarItemInfoProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.TaskbarItemInfoProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-572"><see cref="P:System.Windows.Window.TaskbarItemInfo" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-572">Identifies the <see cref="P:System.Windows.Window.TaskbarItemInfo" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Title" />
      <MemberSignature Language="VB.NET" Value="Public Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Windows.Window.Title" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IWindowService.Title</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Title)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-573">창의 제목을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-573">Gets or sets a window's title.</span></span></summary>
        <value><span data-ttu-id="2ab17-574">창의 제목이 들어 있는 <see cref="T:System.String" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-574">A <see cref="T:System.String" /> that contains the window's title.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-575">제목의 <xref:System.Windows.Window>, <xref:System.Windows.Navigation.NavigationWindow>, 또는 [!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)]를 사용 하 여 설정할 수도 있습니다 <xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-575">The title of a <xref:System.Windows.Window>, <xref:System.Windows.Navigation.NavigationWindow>, or [!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)], can also be set by using <xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=nameWithType>.</span></span>  
  
<a name="dependencyPropertyInfo_WindowTitle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="2ab17-576">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="2ab17-576">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2ab17-577">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="2ab17-577">Identifier field</span></span>|<xref:System.Windows.Window.TitleProperty>|  
|<span data-ttu-id="2ab17-578">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="2ab17-578">Metadata properties set to `true`</span></span>|<span data-ttu-id="2ab17-579">없음</span><span class="sxs-lookup"><span data-stu-id="2ab17-579">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TitleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TitleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TitleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.TitleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TitleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TitleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TitleProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.TitleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-580"><see cref="P:System.Windows.Window.Title" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-580">Identifies the <see cref="P:System.Windows.Window.Title" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public double Top { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Top" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Top" />
      <MemberSignature Language="VB.NET" Value="Public Property Top As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Top { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Top : double with get, set" Usage="System.Windows.Window.Top" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.LengthConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-581">바탕 화면과 관련해서 창의 맨 위 가장자리 위치를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-581">Gets or sets the position of the window's top edge, in relation to the desktop.</span></span></summary>
        <value><span data-ttu-id="2ab17-582">논리 단위(1/96인치)로 지정된 창의 맨 위 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-582">The position of the window's top, in logical units (1/96").</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-583">경우는 <xref:System.Windows.Window> 최대화 되거나 최소화, 복원의 위쪽 가장자리에 대 한 지점 값 나타냅니다가는 <xref:System.Windows.Window>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-583">When the <xref:System.Windows.Window> is maximized or minimized, this value represents the top edge of the restore point for the <xref:System.Windows.Window>.</span></span>  
  
 <span data-ttu-id="2ab17-584">스타일을 통해이 속성을 설정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-584">This property cannot be set through a style.</span></span>  
  
 <span data-ttu-id="2ab17-585">값을 지정 하지 않으면 경우 <xref:System.Windows.Window.Top%2A> 시스템 기본값으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-585">If you do not specify a value, <xref:System.Windows.Window.Top%2A> is set to the system default value.</span></span> <span data-ttu-id="2ab17-586">설정 하 여 시스템 기본값을 지정할 수도 있습니다 <xref:System.Windows.Window.Top%2A> 에 <xref:System.Double.NaN>입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-586">You can also specify the system default value by setting <xref:System.Windows.Window.Top%2A> to <xref:System.Double.NaN>.</span></span> <span data-ttu-id="2ab17-587">모두 <xref:System.Double.NegativeInfinity> 나 <xref:System.Double.PositiveInfinity> 에 대 한 유효한 값인지 <xref:System.Windows.Window.Top%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-587">Neither <xref:System.Double.NegativeInfinity> nor <xref:System.Double.PositiveInfinity> is a valid value for <xref:System.Windows.Window.Top%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ab17-588">설정 하거나 창을 브라우저에 호스팅되는 경우이 속성을 가져올 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-588">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowTop"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="2ab17-589">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="2ab17-589">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2ab17-590">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="2ab17-590">Identifier field</span></span>|<xref:System.Windows.Window.TopProperty>|  
|<span data-ttu-id="2ab17-591">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="2ab17-591">Metadata properties set to `true`</span></span>|<span data-ttu-id="2ab17-592">없음</span><span class="sxs-lookup"><span data-stu-id="2ab17-592">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.Left" />
      </Docs>
    </Member>
    <Member MemberName="Topmost">
      <MemberSignature Language="C#" Value="public bool Topmost { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Topmost" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Topmost" />
      <MemberSignature Language="VB.NET" Value="Public Property Topmost As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Topmost { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Topmost : bool with get, set" Usage="System.Windows.Window.Topmost" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-593">창을 맨 위 z 순서에 표시할지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-593">Gets or sets a value that indicates whether a window appears in the topmost z-order.</span></span></summary>
        <value><span data-ttu-id="2ab17-594">창이 맨 위에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-594"><see langword="true" /> if the window is topmost; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-595">창입니다 <xref:System.Windows.Window.Topmost%2A> 속성이 `true` 갖는 모든 창 위에 표시 <xref:System.Windows.Window.Topmost%2A> 속성으로 설정 됩니다 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-595">A window whose <xref:System.Windows.Window.Topmost%2A> property is set to `true` appears above all windows whose <xref:System.Windows.Window.Topmost%2A> properties are set to `false`.</span></span>  
  
 <span data-ttu-id="2ab17-596">이 있는 windows 그룹에 있는 <xref:System.Windows.Window.Topmost%2A> 속성이 `true`, 현재 활성화 되는 최상위 창입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-596">In the group of windows that have <xref:System.Windows.Window.Topmost%2A> property is set to `true`, the window that is currently activated is the topmost window.</span></span> <span data-ttu-id="2ab17-597">이 있는 windows 그룹에도 마찬가지 <xref:System.Windows.Window.Topmost%2A> 속성이 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-597">Likewise for the group of windows that have <xref:System.Windows.Window.Topmost%2A> property is set to `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ab17-598">설정 하거나 창을 브라우저에 호스팅되는 경우이 속성을 가져올 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-598">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowTopmost"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="2ab17-599">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="2ab17-599">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2ab17-600">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="2ab17-600">Identifier field</span></span>|<xref:System.Windows.Window.TopmostProperty>|  
|<span data-ttu-id="2ab17-601">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="2ab17-601">Metadata properties set to `true`</span></span>|<span data-ttu-id="2ab17-602">없음</span><span class="sxs-lookup"><span data-stu-id="2ab17-602">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Window.Activated" />
        <altmember cref="E:System.Windows.Window.Deactivated" />
      </Docs>
    </Member>
    <Member MemberName="TopmostProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TopmostProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TopmostProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.TopmostProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TopmostProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TopmostProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TopmostProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.TopmostProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-603"><see cref="P:System.Windows.Window.Topmost" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-603">Identifies the <see cref="P:System.Windows.Window.Topmost" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TopProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TopProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TopProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.TopProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TopProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TopProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TopProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.TopProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-604"><see cref="P:System.Windows.Window.Top" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-604">Identifies the <see cref="P:System.Windows.Window.Top" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowStartupLocation">
      <MemberSignature Language="C#" Value="public System.Windows.WindowStartupLocation WindowStartupLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.WindowStartupLocation WindowStartupLocation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.WindowStartupLocation" />
      <MemberSignature Language="VB.NET" Value="Public Property WindowStartupLocation As WindowStartupLocation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowStartupLocation WindowStartupLocation { System::Windows::WindowStartupLocation get(); void set(System::Windows::WindowStartupLocation value); };" />
      <MemberSignature Language="F#" Value="member this.WindowStartupLocation : System.Windows.WindowStartupLocation with get, set" Usage="System.Windows.Window.WindowStartupLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.WindowStartupLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-605">처음 표시될 때 창의 위치를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-605">Gets or sets the position of the window when first shown.</span></span></summary>
        <value><span data-ttu-id="2ab17-606">처음 표시될 때의 창의 맨 위/왼쪽 위치를 지정하는 <see cref="T:System.Windows.WindowStartupLocation" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-606">A <see cref="T:System.Windows.WindowStartupLocation" /> value that specifies the top/left position of a window when first shown.</span></span> <span data-ttu-id="2ab17-607">기본값은 <see cref="F:System.Windows.WindowStartupLocation.Manual" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-607">The default is <see cref="F:System.Windows.WindowStartupLocation.Manual" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-608">설정 합니다 `WindowStartupLocation` 속성을 <xref:System.Windows.WindowStartupLocation.Manual> 에 따라 배치 하는 창을 사용 하면 해당 <xref:System.Windows.Window.Left%2A> 및 <xref:System.Windows.Window.Top%2A> 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-608">Setting the `WindowStartupLocation` property to <xref:System.Windows.WindowStartupLocation.Manual> causes a window to be positioned according to its <xref:System.Windows.Window.Left%2A> and <xref:System.Windows.Window.Top%2A> property values.</span></span> <span data-ttu-id="2ab17-609">경우는 <xref:System.Windows.Window.Left%2A> 또는 <xref:System.Windows.Window.Top%2A> 속성을 지정 하지, 해당 값은 Windows에서 결정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-609">If either the <xref:System.Windows.Window.Left%2A> or <xref:System.Windows.Window.Top%2A> properties aren't specified, their values are determined by Windows.</span></span>  
  
 <span data-ttu-id="2ab17-610">설정 된 `WindowStartupLocation` 속성을 <xref:System.Windows.WindowStartupLocation.CenterScreen> 가 설정 된 창은 마우스 커서를 포함 하는 화면 가운데에 위치 하 게 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-610">Setting the `WindowStartupLocation` property to <xref:System.Windows.WindowStartupLocation.CenterScreen> causes a window to be positioned in the center of the screen that contains the mouse cursor.</span></span>  
  
 <span data-ttu-id="2ab17-611">설정 된 `WindowStartupLocation` 속성을 <xref:System.Windows.WindowStartupLocation.CenterOwner> 해당 소유자 창의 가운데에 위치 하 게 창 (참조 <xref:System.Windows.Window.Owner%2A?displayProperty=nameWithType>), 지정 된 경우.</span><span class="sxs-lookup"><span data-stu-id="2ab17-611">Setting the `WindowStartupLocation` property to <xref:System.Windows.WindowStartupLocation.CenterOwner> causes a window to be positioned in the center of its owner window (see <xref:System.Windows.Window.Owner%2A?displayProperty=nameWithType>), if specified.</span></span> <span data-ttu-id="2ab17-612">소유자 창에는 다른 WPF 창 또는 비 WPF 창 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-612">The owner window can be either another WPF window or a non-WPF window.</span></span>

> [!NOTE]   
>  <span data-ttu-id="2ab17-613">비 WPF windows 사용 하 여 WPF windows에 대 한 자세한 내용은 참조 하세요. [WPF 및 Win32 상호 운용성](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md) 고 <xref:System.Windows.Interop.WindowInteropHelper>입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-613">For more information about WPF windows with non-WPF windows, see [WPF and Win32 Interoperation](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md) and <xref:System.Windows.Interop.WindowInteropHelper>.</span></span> 

 <span data-ttu-id="2ab17-614">창의 위치가 동일한 방식으로 결정 됩니다 소유자 창 지정 하지 않으면 처럼를 `WindowStartupLocation` 속성이 <xref:System.Windows.WindowStartupLocation.Manual>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-614">If an owner window is not specified, the position of the window is determined in the same way as if the `WindowStartupLocation` property is set to <xref:System.Windows.WindowStartupLocation.Manual>.</span></span>

> [!NOTE]
>  <span data-ttu-id="2ab17-615">설정 하거나 창을 브라우저에 호스팅되는 경우이 속성의 값을 가져올 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-615">You cannot set or get the value of this property when a window is hosted in a browser.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowState">
      <MemberSignature Language="C#" Value="public System.Windows.WindowState WindowState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.WindowState WindowState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.WindowState" />
      <MemberSignature Language="VB.NET" Value="Public Property WindowState As WindowState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowState WindowState { System::Windows::WindowState get(); void set(System::Windows::WindowState value); };" />
      <MemberSignature Language="F#" Value="member this.WindowState : System.Windows.WindowState with get, set" Usage="System.Windows.Window.WindowState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WindowState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-616">창을 복원, 최소화 또는 최대화할지 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-616">Gets or sets a value that indicates whether a window is restored, minimized, or maximized.</span></span></summary>
        <value><span data-ttu-id="2ab17-617">창을 복원, 최소화 또는 최대화할지 결정하는 <see cref="T:System.Windows.WindowState" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-617">A <see cref="T:System.Windows.WindowState" /> that determines whether a window is restored, minimized, or maximized.</span></span> <span data-ttu-id="2ab17-618">기본값은 <see cref="F:System.Windows.WindowState.Normal" />(복원됨)입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-618">The default is <see cref="F:System.Windows.WindowState.Normal" /> (restored).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-619">크기와 위치에 저장 됩니다 창을 최소화 또는 최대화 전에 <xref:System.Windows.Window.RestoreBounds%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-619">Before a window is minimized or maximized, its size and location are stored in <xref:System.Windows.Window.RestoreBounds%2A>.</span></span> <span data-ttu-id="2ab17-620">창을 복원, 이후에 해당 크기와 위치 값의 값으로 복원 됩니다 <xref:System.Windows.Window.RestoreBounds%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-620">When a window is subsequently restored, its size and location values are restored with the values from <xref:System.Windows.Window.RestoreBounds%2A>.</span></span>  
  
 <span data-ttu-id="2ab17-621">경우는 <xref:System.Windows.Window.WindowState%2A> 속성이 변경 되 면 <xref:System.Windows.Window.StateChanged> 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-621">When the <xref:System.Windows.Window.WindowState%2A> property is changed, <xref:System.Windows.Window.StateChanged> is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ab17-622">설정 하거나 창을 브라우저에 호스팅되는 경우이 속성을 가져올 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-622">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowWindowState"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="2ab17-623">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="2ab17-623">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2ab17-624">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="2ab17-624">Identifier field</span></span>|<xref:System.Windows.Window.WindowStateProperty>|  
|<span data-ttu-id="2ab17-625">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="2ab17-625">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.RestoreBounds" />
      </Docs>
    </Member>
    <Member MemberName="WindowStateProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty WindowStateProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty WindowStateProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.WindowStateProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly WindowStateProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ WindowStateProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable WindowStateProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.WindowStateProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-626"><see cref="P:System.Windows.Window.WindowState" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-626">Identifies the <see cref="P:System.Windows.Window.WindowState" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowStyle">
      <MemberSignature Language="C#" Value="public System.Windows.WindowStyle WindowStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.WindowStyle WindowStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.WindowStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property WindowStyle As WindowStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowStyle WindowStyle { System::Windows::WindowStyle get(); void set(System::Windows::WindowStyle value); };" />
      <MemberSignature Language="F#" Value="member this.WindowStyle : System.Windows.WindowStyle with get, set" Usage="System.Windows.Window.WindowStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WindowStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-627">창의 테두리 스타일을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-627">Gets or sets a window's border style.</span></span></summary>
        <value><span data-ttu-id="2ab17-628">창의 테두리 스타일을 지정하는 <see cref="T:System.Windows.WindowStyle" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-628">A <see cref="T:System.Windows.WindowStyle" /> that specifies a window's border style.</span></span> <span data-ttu-id="2ab17-629">기본값은 <see cref="F:System.Windows.WindowStyle.SingleBorderWindow" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-629">The default is <see cref="F:System.Windows.WindowStyle.SingleBorderWindow" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ab17-630"><xref:System.Windows.Window.WindowStyle%2A> 중 하나일 수 있습니다 합니다 <xref:System.Windows.WindowStyle> 열거형 값을 포함 하 여 <xref:System.Windows.WindowStyle.None>를 <xref:System.Windows.WindowStyle.ToolWindow>를 <xref:System.Windows.WindowStyle.SingleBorderWindow> (기본값) 및 <xref:System.Windows.WindowStyle.ThreeDBorderWindow>합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-630"><xref:System.Windows.Window.WindowStyle%2A> can be one of the <xref:System.Windows.WindowStyle> enumeration values, including <xref:System.Windows.WindowStyle.None>, <xref:System.Windows.WindowStyle.ToolWindow>, <xref:System.Windows.WindowStyle.SingleBorderWindow> (default), and <xref:System.Windows.WindowStyle.ThreeDBorderWindow>.</span></span>  
  
 <span data-ttu-id="2ab17-631">다음 그림에서는 창 스타일에 [!INCLUDE[TLA#tla_longhorn](~/includes/tlasharptla-longhorn-md.md)] (사용 하도록 설정 하는 투명 효과 사용 하 여 Windows Vista Aero 테마):</span><span class="sxs-lookup"><span data-stu-id="2ab17-631">The following figure shows the window styles on [!INCLUDE[TLA#tla_longhorn](~/includes/tlasharptla-longhorn-md.md)] (Windows Vista Aero theme, with transparent glass enabled):</span></span>  
  
 <span data-ttu-id="2ab17-632">![창 스타일](~/add/media/windowoverviewfigure6.PNG "창 스타일")</span><span class="sxs-lookup"><span data-stu-id="2ab17-632">![Window styles](~/add/media/windowoverviewfigure6.PNG "Window styles")</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ab17-633">설정 하거나 창을 브라우저에 호스팅되는 경우이 속성을 가져올 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-633">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowWindowStyle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="2ab17-634">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="2ab17-634">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="2ab17-635">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="2ab17-635">Identifier field</span></span>|<xref:System.Windows.Window.WindowStyleProperty>|  
|<span data-ttu-id="2ab17-636">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="2ab17-636">Metadata properties set to `true`</span></span>|<span data-ttu-id="2ab17-637">없음</span><span class="sxs-lookup"><span data-stu-id="2ab17-637">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty WindowStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty WindowStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.WindowStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly WindowStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ WindowStyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable WindowStyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.WindowStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2ab17-638"><see cref="P:System.Windows.Window.WindowStyle" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="2ab17-638">Identifies the <see cref="P:System.Windows.Window.WindowStyle" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>