<Type Name="FrameworkElement" FullName="System.Windows.FrameworkElement">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f9436c4c983e3940bfa7043e2eac92986b636f8f" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56389357" /></Metadata><TypeSignature Language="C#" Value="public class FrameworkElement : System.Windows.UIElement, System.ComponentModel.ISupportInitialize, System.Windows.IFrameworkInputElement, System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi FrameworkElement extends System.Windows.UIElement implements class System.ComponentModel.ISupportInitialize, class System.Windows.IFrameworkInputElement, class System.Windows.IInputElement, class System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="DocId" Value="T:System.Windows.FrameworkElement" />
  <TypeSignature Language="VB.NET" Value="Public Class FrameworkElement&#xA;Inherits UIElement&#xA;Implements IFrameworkInputElement, IQueryAmbient, ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class FrameworkElement : System::Windows::UIElement, System::ComponentModel::ISupportInitialize, System::Windows::IFrameworkInputElement, System::Windows::Markup::IQueryAmbient" />
  <TypeSignature Language="F#" Value="type FrameworkElement = class&#xA;    inherit UIElement&#xA;    interface IFrameworkInputElement&#xA;    interface IInputElement&#xA;    interface ISupportInitialize&#xA;    interface IQueryAmbient" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.UIElement</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.IFrameworkInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.IQueryAmbient</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.RuntimeNameProperty("Name")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.UsableDuringInitialization(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.XmlLangProperty("Language")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.StyleTypedProperty(Property="FocusVisualStyle", StyleTargetType=typeof(System.Windows.Controls.Control))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="709be-101">WPF(Windows Presentation Foundation) 요소에 WPF 프레임워크 수준의 속성, 이벤트 및 메서드 집합을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-101">Provides a WPF framework-level set of properties, events, and methods for Windows Presentation Foundation (WPF) elements.</span></span> <span data-ttu-id="709be-102">이 클래스는 <see cref="T:System.Windows.UIElement" />에 정의된 WPF 코어 수준의 API를 기반으로 하여 제공된 WPF 프레임워크 수준의 구현을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="709be-102">This class represents the provided WPF framework-level implementation that is built on the WPF core-level APIs that are defined by <see cref="T:System.Windows.UIElement" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-103"><xref:System.Windows.FrameworkElement> WPF 프레임 워크 수준 요소 클래스와 WPF 핵심 수준 집합 간의 연결 지점이 <xref:System.Windows.UIElement> 프레젠테이션 서비스입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-103"><xref:System.Windows.FrameworkElement> is the connecting point between WPF framework-level element classes and the WPF core-level set of <xref:System.Windows.UIElement> presentation services.</span></span> <span data-ttu-id="709be-104">이러한 개념에 대 한 자세한 내용은 참조 하세요. [WPF 아키텍처](~/docs/framework/wpf/advanced/wpf-architecture.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-104">For more information about these concepts, see [WPF Architecture](~/docs/framework/wpf/advanced/wpf-architecture.md).</span></span>  
  
 <span data-ttu-id="709be-105"><xref:System.Windows.FrameworkElement> 확장 <xref:System.Windows.UIElement> 다음과 같은 기능을 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-105"><xref:System.Windows.FrameworkElement> extends <xref:System.Windows.UIElement> and adds the following capabilities:</span></span>  
  
-   <span data-ttu-id="709be-106">**레이아웃 시스템 정의**: <xref:System.Windows.FrameworkElement> 가상 멤버로 정의 된 메서드를 특정 WPF 프레임 워크 수준 구현에 대 한 특정 제공 <xref:System.Windows.UIElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-106">**Layout system definition**: <xref:System.Windows.FrameworkElement> provides specific WPF framework-level implementations for certain methods that were defined as virtual members in  <xref:System.Windows.UIElement>.</span></span> <span data-ttu-id="709be-107">가장 주목할 만한 <xref:System.Windows.FrameworkElement> 특정 WPF 핵심 수준 레이아웃 재정의가 봉인 하 고 대신 파생 클래스는 WPF 프레임 워크 수준 해당 하는 대신 재정의할를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-107">Most notably, <xref:System.Windows.FrameworkElement> seals certain WPF core-level layout overrides, and instead provides a WPF framework-level equivalent that derived classes should override instead.</span></span> <span data-ttu-id="709be-108">예를 들어 <xref:System.Windows.FrameworkElement> 봉인 <xref:System.Windows.UIElement.ArrangeCore%2A> 제공 하지만 <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-108">For example, <xref:System.Windows.FrameworkElement> seals <xref:System.Windows.UIElement.ArrangeCore%2A> but provides <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.</span></span> <span data-ttu-id="709be-109">WPF 프레임 워크 수준에는 전체 레이아웃 시스템을 하나라도 렌더링할 수 있는 위치에 이러한 변경 내용을 반영 <xref:System.Windows.FrameworkElement> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-109">These changes reflect the fact that at the WPF framework-level there is a full layout system in place that can render any <xref:System.Windows.FrameworkElement> derived class.</span></span> <span data-ttu-id="709be-110">WPF에는 일반 구조체는 멤버 수준, 특정 핵심 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 기반된 레이아웃 솔루션 이기는 하지만 실제 엔진 레이아웃 시스템에 정의 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-110">At the WPF core level, certain members that will structure a general [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] based layout solution are in place, but the actual engine of the layout system is not defined.</span></span> <span data-ttu-id="709be-111">자세한 내용은 [레이아웃](~/docs/framework/wpf/advanced/layout.md)을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="709be-111">For more information, see [Layout](~/docs/framework/wpf/advanced/layout.md).</span></span>  
  
-   <span data-ttu-id="709be-112">**논리적 트리:** 일반 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 프로그래밍 모델은 종종 요소 트리 되 측면에서 표현 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-112">**The logical tree:** The general [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] programming model is often expressed in terms of being a tree of elements.</span></span> <span data-ttu-id="709be-113">논리 트리를 요소 트리 표현 및 태그에는 트리 정의 구현에 대 한 지원이 함께 제공 되는 지원의 <xref:System.Windows.FrameworkElement> 수준입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-113">Support for expressing the tree of elements as a logical tree, and accompanying support for defining that tree in markup is implemented at the <xref:System.Windows.FrameworkElement> level.</span></span> <span data-ttu-id="709be-114">참고 하지만 <xref:System.Windows.FrameworkElement> 의도적으로 콘텐츠 모델을 정의 하지 않습니다 하 고 파생된 클래스에는 책임을 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-114">Note however that <xref:System.Windows.FrameworkElement> deliberately does not define a content model, and leaves that responsibility to derived classes.</span></span> <span data-ttu-id="709be-115">자세한 내용은 [WPF의 트리](~/docs/framework/wpf/advanced/trees-in-wpf.md)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="709be-115">For more information, see [Trees in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).</span></span>  
  
-   <span data-ttu-id="709be-116">**개체 수명 이벤트:** 요소가 초기화 될 때 알고 있어야 유용 (생성자가 호출) 요소가 처음 로드할 때 논리적 트리 또는 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-116">**Object lifetime events:** It is often useful to know when an element is initialized (the constructor is called) or when the element is first loaded into a logical tree.</span></span> <span data-ttu-id="709be-117"><xref:System.Windows.FrameworkElement> 개체 수명 관련 된 다른 자식 요소를 추가 하는 등의 요소를 포함 하는 코드 숨김 작업에 대 한 유용한 후크를 제공 하는 여러 이벤트를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-117"><xref:System.Windows.FrameworkElement> defines several events related to object lifetime that provide useful hooks for code-behind operations that involve elements, such as adding more child elements.</span></span> <span data-ttu-id="709be-118">자세한 내용은 [개체 수명 이벤트](~/docs/framework/wpf/advanced/object-lifetime-events.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-118">For more information, see [Object Lifetime Events](~/docs/framework/wpf/advanced/object-lifetime-events.md).</span></span>  
  
-   <span data-ttu-id="709be-119">**데이터 바인딩 및 동적 리소스 참조에 대 한 지원:** 데이터 바인딩 및 리소스에 대 한 속성 수준 지원에 의해 구현 됩니다는 <xref:System.Windows.DependencyProperty> 클래스 및 속성 시스템에 있지만 멤버 값을 확인 하는 기능 포함 저장 된 <xref:System.Windows.Expression> (데이터 바인딩 및 동적 리소스를 모두의 기반이 되는 프로그래밍 구문)에 의해 구현 됩니다 <xref:System.Windows.FrameworkElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-119">**Support for data binding and dynamic resource references:** The property-level support for data binding and resources is implemented by the <xref:System.Windows.DependencyProperty> class and embodied in the property system, but the ability to resolve a member value that is stored as an <xref:System.Windows.Expression> (the programming construct that underlies both data binding and dynamic resources) is implemented by <xref:System.Windows.FrameworkElement>.</span></span> <span data-ttu-id="709be-120">자세한 내용은 [데이터 바인딩 개요](~/docs/framework/wpf/data/data-binding-overview.md) 하 고 [XAML 리소스](~/docs/framework/wpf/advanced/xaml-resources.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-120">For more information, see [Data Binding Overview](~/docs/framework/wpf/data/data-binding-overview.md) and [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
-   <span data-ttu-id="709be-121">**스타일:** <xref:System.Windows.FrameworkElement> 정의 <xref:System.Windows.FrameworkElement.Style%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-121">**Styles:** <xref:System.Windows.FrameworkElement> defines the <xref:System.Windows.FrameworkElement.Style%2A> property.</span></span> <span data-ttu-id="709be-122">그러나 <xref:System.Windows.FrameworkElement> 지원 템플릿 정의 또는 데코레이터를 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-122">However, <xref:System.Windows.FrameworkElement> does not yet define support for templates, or support decorators.</span></span> <span data-ttu-id="709be-123">이러한 기능을 같은 컨트롤 클래스를 통해 도입 <xref:System.Windows.Controls.Control> 및 <xref:System.Windows.Controls.ContentControl>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-123">These features are introduced by control classes such as <xref:System.Windows.Controls.Control> and <xref:System.Windows.Controls.ContentControl>.</span></span>  
  
-   <span data-ttu-id="709be-124">**애니메이션 지원 더 보기:** 일부 애니메이션 지원을 WPF 핵심 수준에서 이미 정의 되었습니다 하지만 <xref:System.Windows.FrameworkElement> 구현 하 여이 확장 <xref:System.Windows.FrameworkElement.BeginStoryboard%2A> 및 멤버를 관련 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-124">**More animation support:** Some animation support was already defined at the WPF core level, but <xref:System.Windows.FrameworkElement> extends this by implementing <xref:System.Windows.FrameworkElement.BeginStoryboard%2A> and related members.</span></span>  
  
 <span data-ttu-id="709be-125">클래스 계층 구조에서 볼 수 있듯이 많은 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 클래스에서 파생 <xref:System.Windows.FrameworkElement>로 직접 또는 중간 기본 클래스를 통해 같은 <xref:System.Windows.Controls.Panel> 또는 <xref:System.Windows.Controls.Control>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-125">As can be seen from the class hierarchy, many [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] classes derive from <xref:System.Windows.FrameworkElement>, either directly or through intermediate base classes such as <xref:System.Windows.Controls.Panel> or <xref:System.Windows.Controls.Control>.</span></span>  
  
 <span data-ttu-id="709be-126">사용 하려는 경우 <xref:System.Windows.FrameworkElement> 를 기본 클래스로 하려는 경우 먼저 기존 파생된 클래스를 검사 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-126">If you intend to use <xref:System.Windows.FrameworkElement> as a base class, you might want to first examine the existing derived classes.</span></span> <span data-ttu-id="709be-127"><xref:System.Windows.FrameworkElement> 다양 한 기본 시나리오에 대 한 지원을 제공 하지만 또한 다양 한 기능을 만드는 데 사용할 수 있는 문서 블록의 점에서 "요소의" 바람직하지 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 에서 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-127"><xref:System.Windows.FrameworkElement> provides support for a number of basic scenarios, but also lacks a number of features that are desirable for an "element" in the sense of a building block that you use to create [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> <span data-ttu-id="709be-128">예를 들어 한 <xref:System.Windows.FrameworkElement> true 모든 콘텐츠 모델을 정의 하지 않습니다 <xref:System.Windows.FrameworkElement> 기본 클래스를 만들 수 있는 속성을 정의 하지 않습니다 하는 대로 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 자식 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-128">For instance, a <xref:System.Windows.FrameworkElement> does not define any true content model; <xref:System.Windows.FrameworkElement> as a base class does not define a property that can create [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] child elements.</span></span> <span data-ttu-id="709be-129">확인 하려는 특히 <xref:System.Windows.Controls.Control> 고 <xref:System.Windows.Controls.ContentControl>입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-129">In particular, you might want to look at <xref:System.Windows.Controls.Control> and <xref:System.Windows.Controls.ContentControl>.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyObject" />
    <altmember cref="T:System.Windows.FrameworkContentElement" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="709be-130"><see cref="T:System.Windows.FrameworkElement" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-130">Initializes a new instance of the <see cref="T:System.Windows.FrameworkElement" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualHeight">
      <MemberSignature Language="C#" Value="public double ActualHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 ActualHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ActualHeight" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActualHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double ActualHeight { double get(); };" />
      <MemberSignature Language="F#" Value="member this.ActualHeight : double" Usage="System.Windows.FrameworkElement.ActualHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-131">이 요소의 렌더링된 높이를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="709be-131">Gets the rendered height of this element.</span></span></summary>
        <value><span data-ttu-id="709be-132">요소의 높이([!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]의 값)입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-132">The element's height, as a value in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span></span> <span data-ttu-id="709be-133">기본값은 0입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-133">The default value is 0 (zero).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-134">이 속성은 다른 높이 입력 및 레이아웃 시스템에 따라 계산된 된 값입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-134">This property is a calculated value based on other height inputs, and the layout system.</span></span> <span data-ttu-id="709be-135">값을 실제 렌더링 단계에 따라 레이아웃 시스템 자체적으로 설정 되 고 같은 속성의 설정 값 뒤에 약간 지연 될 수 있습니다 <xref:System.Windows.FrameworkElement.Height%2A> 입력된 변경의 기준인 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-135">The value is set by the layout system itself, based on an actual rendering pass, and may therefore lag slightly behind the set value of properties such as <xref:System.Windows.FrameworkElement.Height%2A> that are the basis of the input change.</span></span>  
  
 <span data-ttu-id="709be-136">때문에 <xref:System.Windows.FrameworkElement.ActualHeight%2A> 은 계산된 된 값 수는 여러 개 있을 수 있습니다 또는 보고 변경 하 여 다양 한 작업의 결과로 레이아웃 시스템에서.</span><span class="sxs-lookup"><span data-stu-id="709be-136">Because <xref:System.Windows.FrameworkElement.ActualHeight%2A> is a calculated value, you should be aware that there could be multiple or incremental reported changes to it as a result of various operations by the layout system.</span></span> <span data-ttu-id="709be-137">레이아웃 시스템은 자식 요소에 필요한 측정 공간, 부모 요소에 의한 제약 조건 등을 계산할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-137">The layout system may be calculating required measure space for child elements, constraints by the parent element, and so on.</span></span>  
  
 <span data-ttu-id="709be-138">이 속성을 설정할 수 없습니다 있지만 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]를 만드는 데 사용할 수는 <xref:System.Windows.Trigger> 스타일의 값으로.</span><span class="sxs-lookup"><span data-stu-id="709be-138">Although you cannot set this property from [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], you can base a <xref:System.Windows.Trigger> upon its value in a style.</span></span>  
  
<a name="dependencyPropertyInfo_ActualHeight"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="709be-139">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="709be-139">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-140">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-140">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ActualHeightProperty>|  
|<span data-ttu-id="709be-141">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="709be-141">Metadata properties set to `true`</span></span>|<span data-ttu-id="709be-142">없음</span><span class="sxs-lookup"><span data-stu-id="709be-142">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="709be-143">다음 예제에서는 다양 한 높이 속성을 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-143">The following example displays various height properties.</span></span>  
  
 [!code-csharp[HeightMinHeightMaxHeight#3](~/samples/snippets/csharp/VS_Snippets_Wpf/HeightMinHeightMaxHeight/CSharp/Window1.xaml.cs#3)]
 [!code-vb[HeightMinHeightMaxHeight#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HeightMinHeightMaxHeight/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ActualHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ActualHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ActualHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ActualHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ActualHeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ActualHeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ActualHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-144"><see cref="P:System.Windows.FrameworkElement.ActualHeight" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-144">Identifies the <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualWidth">
      <MemberSignature Language="C#" Value="public double ActualWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 ActualWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ActualWidth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActualWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double ActualWidth { double get(); };" />
      <MemberSignature Language="F#" Value="member this.ActualWidth : double" Usage="System.Windows.FrameworkElement.ActualWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-145">이 요소의 렌더링된 너비를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="709be-145">Gets the rendered width of this element.</span></span></summary>
        <value><span data-ttu-id="709be-146">요소의 너비([!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]의 값)입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-146">The element's width, as a value in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span></span> <span data-ttu-id="709be-147">기본값은 0입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-147">The default value is 0 (zero).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-148">이 속성은 다른 너비 입력 및 레이아웃 시스템에 따라 계산된 된 값입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-148">This property is a calculated value based on other width inputs, and the layout system.</span></span> <span data-ttu-id="709be-149">값을 실제 렌더링 단계에 따라 레이아웃 시스템 자체적으로 설정 되 고 같은 속성의 설정 값 뒤에 약간 지연 될 수 있습니다 <xref:System.Windows.FrameworkElement.Width%2A> 입력된 변경의 기준인 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-149">The value is set by the layout system itself, based on an actual rendering pass, and may therefore lag slightly behind the set value of properties such as <xref:System.Windows.FrameworkElement.Width%2A> that are the basis of the input change.</span></span>  
  
 <span data-ttu-id="709be-150">때문에 <xref:System.Windows.FrameworkElement.ActualWidth%2A> 은 계산된 된 값 수는 여러 개 있을 수 있습니다 또는 보고 변경 하 여 다양 한 작업의 결과로 레이아웃 시스템에서.</span><span class="sxs-lookup"><span data-stu-id="709be-150">Because <xref:System.Windows.FrameworkElement.ActualWidth%2A> is a calculated value, you should be aware that there could be multiple or incremental reported changes to it as a result of various operations by the layout system.</span></span> <span data-ttu-id="709be-151">레이아웃 시스템은 자식 요소에 필요한 측정 공간, 부모 요소에 의한 제약 조건 등을 계산할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-151">The layout system may be calculating required measure space for child elements, constraints by the parent element, and so on.</span></span>  
  
 <span data-ttu-id="709be-152">이 속성을 설정할 수 없습니다 있지만 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]를 만드는 데 사용할 수는 <xref:System.Windows.Trigger> 스타일의 값으로.</span><span class="sxs-lookup"><span data-stu-id="709be-152">Although you cannot set this property from [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], you can base a <xref:System.Windows.Trigger> upon its value in a style.</span></span>  
  
<a name="dependencyPropertyInfo_ActualWidth"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="709be-153">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="709be-153">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-154">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-154">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ActualWidthProperty>|  
|<span data-ttu-id="709be-155">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="709be-155">Metadata properties set to `true`</span></span>|<span data-ttu-id="709be-156">없음</span><span class="sxs-lookup"><span data-stu-id="709be-156">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="709be-157">다음 예제에서는 다양 한 너비 속성을 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-157">The following example displays various width properties.</span></span>  
  
 [!code-csharp[WidthMinWidthMaxWidth#3](~/samples/snippets/csharp/VS_Snippets_Wpf/WidthMinWidthMaxWidth/CSharp/Window1.xaml.cs#3)]
 [!code-vb[WidthMinWidthMaxWidth#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WidthMinWidthMaxWidth/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ActualWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ActualWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ActualWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ActualWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ActualWidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ActualWidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ActualWidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-158"><see cref="P:System.Windows.FrameworkElement.ActualWidth" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-158">Identifies the <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLogicalChild">
      <MemberSignature Language="C#" Value="protected internal void AddLogicalChild (object child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AddLogicalChild(object child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AddLogicalChild (child As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void AddLogicalChild(System::Object ^ child);" />
      <MemberSignature Language="F#" Value="member this.AddLogicalChild : obj -&gt; unit" Usage="frameworkElement.AddLogicalChild child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="child"><span data-ttu-id="709be-159">추가할 자식 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-159">Child element to be added.</span></span></param>
        <summary><span data-ttu-id="709be-160">제공된 개체를 이 요소의 논리적 트리에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-160">Adds the provided object to the logical tree of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-161">요소의 논리적 자식 요소를 나타내는 개체에는 컬렉션의 구현에이 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-161">Use this method for the implementation of collections on objects that represent logical child elements of an element.</span></span> <span data-ttu-id="709be-162">Changed 이벤트, 생성자 또는 컬렉션 형식 자체 내에서 처리 하는 클래스 또는 속성 getter 및 setter에서 자식 요소 컬렉션에 대 한 컬렉션 유지 관리를 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-162">Collection maintenance for child element collections might be done in property getters or setters, class handling of Changed events, constructors, or within the collection types themselves.</span></span>  
  
 <span data-ttu-id="709be-163">컨트롤 작성자에 대 한이 수준에서 논리 트리를 조작 하지 않는 좋습니다를 사용할 수 있는 기본 컨트롤 클래스에 대 한 콘텐츠 모델의 제어 시나리오에 적합 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-163">For control authors, manipulating the logical tree at this level is not the recommended practice, unless none of the content models for available base control classes are appropriate for your control scenario.</span></span> <span data-ttu-id="709be-164">하위 수준 클래스는 것이 좋습니다 <xref:System.Windows.Controls.ContentControl>, <xref:System.Windows.Controls.ItemsControl>, 및 <xref:System.Windows.Controls.HeaderedItemsControl>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-164">Consider subclassing at the level of <xref:System.Windows.Controls.ContentControl>, <xref:System.Windows.Controls.ItemsControl>, and <xref:System.Windows.Controls.HeaderedItemsControl>.</span></span> <span data-ttu-id="709be-165">이러한 클래스는 전용 통해 논리적 트리에서 자식 요소의 특정 적용을 사용 하 여 콘텐츠 모델을 제공 [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]에서 일반적으로 사용 가능한 다른 기능에 대 한 지원 뿐만 아니라는 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 템플릿 통한 스타일 지정과 같은 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-165">These classes provide a content model with particular enforcement of logical tree child elements through dedicated [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], as well as support for other features typically desirable in a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] control such as styling through templates.</span></span> <span data-ttu-id="709be-166">사용 하는 방법에 대 한 자세한 내용은 <xref:System.Windows.FrameworkElement.LogicalChildren%2A> 하 고 <xref:System.Windows.FrameworkElement.AddLogicalChild%2A>를 참조 하세요 [WPF의 트리](~/docs/framework/wpf/advanced/trees-in-wpf.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-166">For more information on how to use <xref:System.Windows.FrameworkElement.LogicalChildren%2A> and <xref:System.Windows.FrameworkElement.AddLogicalChild%2A>, see [Trees in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).</span></span>  
  
 <span data-ttu-id="709be-167"><xref:System.Windows.FrameworkElement.AddLogicalChild%2A> 다른 프로세스에 의해 논리적 트리 반복 중일 때 한 번에 호출 되는 경우 예외가 throw 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-167"><xref:System.Windows.FrameworkElement.AddLogicalChild%2A> may throw an exception if called at a time when the logical tree is being iterated by another process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="709be-168">다음 예제에서는 구현 하는 `Child` 사용자 지정 속성 <xref:System.Windows.FrameworkElement> 수행 하는 자체 시각적 계층 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-168">The following example implements a `Child` property on a custom <xref:System.Windows.FrameworkElement> that does its own visual layer implementation.</span></span> <span data-ttu-id="709be-169">속성 setter는 이전 값을 논리적 트리를 뿐만 아니라 클래스 관련 시각적 컬렉션에서 제거 값이 변경 되도록 설계 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-169">The property setter is designed so that if the value changes, the old value is removed from the logical tree, as well as a class-specific visual collection.</span></span> <span data-ttu-id="709be-170">속성 값을 캐시 하 고, 논리적 트리와 시각적 사용자 지정 컬렉션에 새 값을 추가한.</span><span class="sxs-lookup"><span data-stu-id="709be-170">The property value is cached, and then the new value is added to both the logical tree and the custom visual collection.</span></span>  
  
 [!code-csharp[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/csharp/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/CSharp/ParticleEffectExamples/OverlayRenderDecorator.cs#addremovelogicalchild)]
 [!code-vb[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/visualbasic/particleeffectexamples/overlayrenderdecorator.vb#addremovelogicalchild)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ApplyTemplate">
      <MemberSignature Language="C#" Value="public bool ApplyTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ApplyTemplate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ApplyTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyTemplate () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ApplyTemplate();" />
      <MemberSignature Language="F#" Value="member this.ApplyTemplate : unit -&gt; bool" Usage="frameworkElement.ApplyTemplate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="709be-171">필요한 경우 현재 템플릿의 시각적 트리를 작성하고 시각적 트리가 이 호출로 다시 작성되었는지 여부를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-171">Builds the current template's visual tree if necessary, and returns a value that indicates whether the visual tree was rebuilt by this call.</span></span></summary>
        <returns><span data-ttu-id="709be-172">시각적 개체가 트리에 추가되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-172"><see langword="true" /> if visuals were added to the tree; returns <see langword="false" /> otherwise.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-173">애플리케이션 요소의 시각적 트리 완료 되었음을 보장 하기 위해이 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-173">Applications can call this method to guarantee that the visual tree of an element is complete.</span></span> <span data-ttu-id="709be-174">이 보장 단계는 코드는 트리의 자식 요소를 확인 해야 할 경우 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-174">This guarantee step might be necessary if code will be checking the child elements in the tree.</span></span> <span data-ttu-id="709be-175">호출 하는 애플리케이션 내에서 일반적인 요소 논리 <xref:System.Windows.FrameworkElement.ApplyTemplate%2A> 템플릿을 적용할 요소는 적절 한 시점에 수명에 자동으로 하므로, 필요 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-175">For typical element logic within applications, calling <xref:System.Windows.FrameworkElement.ApplyTemplate%2A> is not necessary, because templates will be applied to elements at an appropriate point in their lifetimes automatically.</span></span>  
  
 <span data-ttu-id="709be-176"><xref:System.Windows.FrameworkElement.ApplyTemplate%2A> 모든 측정값에 대해 호출 되는 WPF 프레임 워크 수준 레이아웃 시스템으로 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-176"><xref:System.Windows.FrameworkElement.ApplyTemplate%2A> is called on every Measure pass by the WPF framework-level layout system.</span></span>  
  
 <span data-ttu-id="709be-177"><xref:System.Windows.FrameworkElement> 파생된 클래스에서 사용할 수는 <xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> 클래스 처리기가이 메서드가 명시적으로 호출 된 경우 또는 레이아웃 시스템에서 알림을 받을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-177"><xref:System.Windows.FrameworkElement> derived classes can use the <xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> class handler to be notified of cases where this method was called explicitly, or by the layout system.</span></span> <span data-ttu-id="709be-178"><xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> 템플릿을 완전히 생성 되 고 논리 트리와 연결 된 후 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-178"><xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> is called after the template is completely generated and attached to the logical tree.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ControlTemplate" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeCore">
      <MemberSignature Language="C#" Value="protected override sealed void ArrangeCore (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ArrangeCore(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Sub ArrangeCore (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ArrangeCore(System::Windows::Rect finalRect);" />
      <MemberSignature Language="F#" Value="override this.ArrangeCore : System.Windows.Rect -&gt; unit" Usage="frameworkElement.ArrangeCore finalRect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect"><span data-ttu-id="709be-179">이 요소에서 자신과 자식을 정렬하는 데 사용해야 하는 부모 내의 마지막 영역입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-179">The final area within the parent that this element should use to arrange itself and its children.</span></span></param>
        <summary><span data-ttu-id="709be-180"><see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" />(<see cref="T:System.Windows.UIElement" />에 가상 항목으로 정의되어 있음)를 구현하고 구현을 봉인합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-180">Implements <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> (defined as virtual in <see cref="T:System.Windows.UIElement" />) and seals the implementation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-181">이 메서드를 봉인 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-181">This method is sealed.</span></span> <span data-ttu-id="709be-182">요소 레이아웃의 정렬 단계에 맞게 사용자 지정 요소에 논리를 재정의 하기 위해 프로그램 <xref:System.Windows.FrameworkElement> 파생된 클래스에서 재정의 해야 <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-182">In order to override the logic in your custom element specifically for the arrange pass of element layout, your <xref:System.Windows.FrameworkElement> derived class must override <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeOverride">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size ArrangeOverride (System.Windows.Size finalSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size ArrangeOverride(valuetype System.Windows.Size finalSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ArrangeOverride (finalSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size ArrangeOverride(System::Windows::Size finalSize);" />
      <MemberSignature Language="F#" Value="abstract member ArrangeOverride : System.Windows.Size -&gt; System.Windows.Size&#xA;override this.ArrangeOverride : System.Windows.Size -&gt; System.Windows.Size" Usage="frameworkElement.ArrangeOverride finalSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="finalSize"><span data-ttu-id="709be-183">이 요소에서 자신과 자식을 정렬하는 데 사용해야 하는 부모 내의 마지막 영역입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-183">The final area within the parent that this element should use to arrange itself and its children.</span></span></param>
        <summary><span data-ttu-id="709be-184">파생 클래스에서 재정의하는 경우 자식 요소를 배치하고 <see cref="T:System.Windows.FrameworkElement" /> 파생 클래스에 대한 크기를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-184">When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement" /> derived class.</span></span></summary>
        <returns><span data-ttu-id="709be-185">사용되는 실제 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-185">The actual size used.</span></span></returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="709be-186">레이아웃 처리의 정렬 단계를 사용자 지정 하려는 컨트롤 작성자는이 메서드를 재정의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-186">Control authors who want to customize the arrange pass of layout processing should override this method.</span></span> <span data-ttu-id="709be-187">구현 패턴을 호출 해야 합니다 <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> 각 표시 되는 자식 요소 및 원하는 최종 크기가 각 자식 요소에 대 한 패스를 <paramref name="finalRect" /> 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-187">The implementation pattern should call <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> on each visible child element, and pass the final desired size for each child element as the <paramref name="finalRect" /> parameter.</span></span> <span data-ttu-id="709be-188">부모 요소를 호출 해야 <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> 각 자식 그렇지 않은 경우 자식 요소를 렌더링 되지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-188">Parent elements should call <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> on each child, otherwise the child elements will not be rendered.</span></span>  
  
<span data-ttu-id="709be-189">대부분의 파생된 클래스는이 메서드의 구현을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-189">Many derived classes offer implementations of this method.</span></span> <span data-ttu-id="709be-190">대표적인: <see cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />하십시오 <see cref="M:System.Windows.Controls.Page.ArrangeOverride(System.Windows.Size)" /> 고 <see cref="M:System.Windows.Controls.Control.ArrangeOverride(System.Windows.Size)" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-190">Prominent ones include: <see cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />, <see cref="M:System.Windows.Controls.Page.ArrangeOverride(System.Windows.Size)" /> and <see cref="M:System.Windows.Controls.Control.ArrangeOverride(System.Windows.Size)" />.</span></span></para></block>
        <altmember cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public virtual void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="frameworkElement.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="709be-191">이 요소의 초기화 프로세스를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-191">Starts the initialization process for this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-192">노출 하거나 요소가 요소 트리에 연결 되지 않는 방식으로 조정 하는 경우 개별 요소에서이 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-192">You can call this method on individual elements if you are adjusting them in ways that do not yet expose or connect the element to any element tree.</span></span> <span data-ttu-id="709be-193">예를 들어 만들었을 수 있습니다 새 <xref:System.Windows.FrameworkElement>, 논리적 트리에 아직 연결 하지 했으며 있지만.</span><span class="sxs-lookup"><span data-stu-id="709be-193">For instance, you might have created a new <xref:System.Windows.FrameworkElement>, but have not yet attached it to any logical tree.</span></span> <span data-ttu-id="709be-194">또는 요소가 그 자식 요소를 논리적 트리 창 또는 애플리케이션 페이지에 연결 되어 있지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-194">Or, the logical tree where your element is a child element within it might not be connected to a window or page of the application.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="709be-195">요소는 요소를 로드 프로세스 중 초기화 되기 전에 발생 해야 하는 특수 한 처리를 제공 하려면이 메서드를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-195">Implement this method to provide special handling that should happen before your element is initialized during the element loading process.</span></span>  
  
<span data-ttu-id="709be-196">구현 (기본값) 기본 구현을 초기화를 추적 하기 위해 일부 내부 플래그를 설정 하기 때문에 기본 구현을 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-196">Your implementation should call the base implementation, because the base (default) implementation sets some internal flags to keep track of initialization.</span></span> <span data-ttu-id="709be-197">한 가지 구현을 후크로 생성자에 의해 이미 활성화 되지 않은 사용자 고유의 개인 클래스 초기화 루틴에이 메서드를 사용 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-197">One possible implementation is to use this method as a hook into your own private class initialization routines that are not already enabled by constructors.</span></span>  
  
<span data-ttu-id="709be-198">기본 구현 하는 경우 예외가 throw 됩니다 <see cref="M:System.Windows.FrameworkElement.BeginInit" /> 라고 여러 번 같은 요소에서 이전 <see cref="M:System.Windows.FrameworkElement.EndInit" /> 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-198">The base implementation will throw an exception if <see cref="M:System.Windows.FrameworkElement.BeginInit" /> is called more than one time on the same element prior to <see cref="M:System.Windows.FrameworkElement.EndInit" /> being called.</span></span></para></block>
        <altmember cref="M:System.Windows.FrameworkElement.EndInit" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginStoryboard">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="709be-199">제공된 Storyboard에 포함된 작업 시퀀스를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-199">Begins the sequence of actions contained in the provided storyboard.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard -&gt; unit" Usage="frameworkElement.BeginStoryboard storyboard" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
      </Parameters>
      <Docs>
        <param name="storyboard"><span data-ttu-id="709be-200">시작할 Storyboard입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-200">The storyboard to begin.</span></span></param>
        <summary><span data-ttu-id="709be-201">제공된 Storyboard에 포함된 작업 시퀀스를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-201">Begins the sequence of actions that are contained in the provided storyboard.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-202">가장 일반적인 애니메이션 시나리오에서이 메서드를 사용 하지 마십시오.</span><span class="sxs-lookup"><span data-stu-id="709be-202">Most typical animation scenarios do not use this method.</span></span> <span data-ttu-id="709be-203">일반적으로 <xref:System.Windows.Media.Animation.Storyboard> 또는 <xref:System.Windows.Media.Animation.BeginStoryboard> 태그 및 다음 요소에 배치는 <xref:System.Windows.EventTrigger> 요소 콘텐츠입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-203">Typically, you create the <xref:System.Windows.Media.Animation.Storyboard> or <xref:System.Windows.Media.Animation.BeginStoryboard> element in markup, and then you place these as the <xref:System.Windows.EventTrigger> content on an element.</span></span> <span data-ttu-id="709be-204">이벤트에 의해 트리거되면 다음 애니메이션 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-204">When triggered by the event, the animation then runs.</span></span> <span data-ttu-id="709be-205">대부분의 컨트롤 측면을 <xref:System.Windows.Media.Animation.Storyboard> 태그에서 노출 된 속성을 통해 해결할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-205">Most of the control aspects of a <xref:System.Windows.Media.Animation.Storyboard> can be addressed by properties that are exposed in markup.</span></span>  
  
 <span data-ttu-id="709be-206">사용 하지 않는 서명에 대 한 합니다 `isControllable`, 매개 변수를 해당 매개 변수를 지정 하는 경우 또는 `false`, 연결 된 애니메이션 타임 라인 시계 애니메이션 "Fill" 기간에 도달 하는 즉시 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-206">For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the "Fill" period.</span></span> <span data-ttu-id="709be-207">따라서 애니메이션을 한 번 실행 한 후에 다시 시작할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-207">Therefore the animation cannot be restarted after running once.</span></span> <span data-ttu-id="709be-208">애니메이션 제어 수도 있어야 스토리 보드를 [X:name 지시문](~/docs/framework/xaml-services/x-name-directive.md) 코드에서 참조 하 여 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-208">Controlling an animation also requires that the storyboard have an [x:Name Directive](~/docs/framework/xaml-services/x-name-directive.md) or be accessible by reference in code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="709be-209">다음 예제에서는 검색 된 <xref:System.Windows.Media.Animation.Storyboard> 리소스에서는 실행 하 고 <xref:System.Windows.Media.Animation.Storyboard> 내부 이벤트를 처리 하는 클래스를가 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="709be-209">The following example retrieves a <xref:System.Windows.Media.Animation.Storyboard> from resources, and then runs that <xref:System.Windows.Media.Animation.Storyboard> when an internal event is class handled.</span></span>  
  
 [!code-csharp[CubeAnimation#FEBeginStoryboard](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Page1.xaml.cs#febeginstoryboard)]
 [!code-vb[CubeAnimation#FEBeginStoryboard](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/page1.xaml.vb#febeginstoryboard)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="frameworkElement.BeginStoryboard (storyboard, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="storyboard"><span data-ttu-id="709be-210">시작할 Storyboard입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-210">The storyboard to begin.</span></span></param>
        <param name="handoffBehavior"><span data-ttu-id="709be-211">Storyboard에 설명되어 있는 속성에 이미 애니메이션이 적용되어 있는 경우에 사용할 동작을 설명하는 열거형의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-211">A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.</span></span></param>
        <summary><span data-ttu-id="709be-212">속성에 이미 애니메이션이 적용되어 있는 경우 수행할 작업에 대해 지정된 옵션을 사용하여 제공된 Storyboard에 포함된 작업 시퀀스를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-212">Begins the sequence of actions contained in the provided storyboard, with options specified for what should happen if the property is already animated.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-213">가장 일반적인 애니메이션 시나리오에서이 메서드를 사용 하지 마십시오.</span><span class="sxs-lookup"><span data-stu-id="709be-213">Most typical animation scenarios do not use this method.</span></span> <span data-ttu-id="709be-214">일반적으로 <xref:System.Windows.Media.Animation.Storyboard> 또는 <xref:System.Windows.Media.Animation.BeginStoryboard> 태그 및 다음 요소에 배치는 <xref:System.Windows.EventTrigger> 요소 콘텐츠입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-214">Typically, you create the <xref:System.Windows.Media.Animation.Storyboard> or <xref:System.Windows.Media.Animation.BeginStoryboard> element in markup, and then you place these as the <xref:System.Windows.EventTrigger> content on an element.</span></span> <span data-ttu-id="709be-215">이벤트에 의해 트리거되면 다음 애니메이션 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-215">When triggered by the event, the animation then runs.</span></span> <span data-ttu-id="709be-216">대부분의 컨트롤 측면을 <xref:System.Windows.Media.Animation.Storyboard> 태그에서 노출 된 속성을 통해 해결할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-216">Most of the control aspects of a <xref:System.Windows.Media.Animation.Storyboard> can be addressed by properties that are exposed in markup.</span></span>  
  
 <span data-ttu-id="709be-217">사용 하지 않는 서명에 대 한 합니다 `isControllable`, 매개 변수를 해당 매개 변수를 지정 하는 경우 또는 `false`, 연결 된 애니메이션 타임 라인 시계 애니메이션 "Fill" 기간에 도달 하는 즉시 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-217">For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the "Fill" period.</span></span> <span data-ttu-id="709be-218">따라서 애니메이션을 한 번 실행 한 후에 다시 시작할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-218">Therefore the animation cannot be restarted after running once.</span></span> <span data-ttu-id="709be-219">애니메이션 제어 수도 있어야 스토리 보드를 [X:name 지시문](~/docs/framework/xaml-services/x-name-directive.md) 코드에서 참조 하 여 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-219">Controlling an animation also requires that the storyboard have an [x:Name Directive](~/docs/framework/xaml-services/x-name-directive.md) or be accessible by reference in code.</span></span>  
  
 <span data-ttu-id="709be-220">핸드 오프 동작 특성으로 지정할 수 있습니다 <xref:System.Windows.Media.Animation.BeginStoryboard>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-220">Handoff behavior can be specified as an attribute of <xref:System.Windows.Media.Animation.BeginStoryboard>.</span></span>  
  
## <a name="using-the-compose-handoffbehavior"></a><span data-ttu-id="709be-221">사용 하 여 Compose HandoffBehavior</span><span class="sxs-lookup"><span data-stu-id="709be-221">Using the Compose HandoffBehavior</span></span>  
 <span data-ttu-id="709be-222">적용 하는 경우는 <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, 또는 <xref:System.Windows.Media.Animation.AnimationClock> 사용 하 여 속성에는 <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>모든 <xref:System.Windows.Media.Animation.Clock> 개체 속성과 연관 된 이전에 시스템 리소스를 소비 계속; 타이밍 시스템에서 시계를 자동으로 제거 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-222">When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property by using the <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system does not remove the clocks automatically.</span></span>  
  
 <span data-ttu-id="709be-223">사용 하 여 많은 수의 clock 적용 하는 경우 성능 문제를 방지 하려면 <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>를 완성 한 후 애니메이션된 속성에서 구성 중인 클록을 제거 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-223">To avoid performance issues when you apply a large number of clocks by using <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, you should remove composing clocks from the animated property after they complete.</span></span> <span data-ttu-id="709be-224">클록을 제거 하는 방법은 여러 가지가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-224">There are several ways to remove a clock:</span></span>  
  
-   <span data-ttu-id="709be-225">속성에서 모든 클록을 제거 하려면 사용 합니다 <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> 또는 <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> 애니메이션된 개체의 메서드.</span><span class="sxs-lookup"><span data-stu-id="709be-225">To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object.</span></span> <span data-ttu-id="709be-226">첫 번째 매개 변수로 애니메이션 효과가 적용 되는 속성을 지정 하 고 `null` 두 번째입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-226">Specify the property being animated as the first parameter, and `null` as the second.</span></span> <span data-ttu-id="709be-227">이 속성에서 모든 애니메이션 클록을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-227">This removes all animation clocks from the property.</span></span>  
  
-   <span data-ttu-id="709be-228">특정 제거할 <xref:System.Windows.Media.Animation.AnimationClock> 클록 목록에서 사용 하 여는 <xref:System.Windows.Media.Animation.Clock.Controller%2A> 의 속성을 <xref:System.Windows.Media.Animation.AnimationClock> 검색할를 <xref:System.Windows.Media.Animation.ClockController>, 호출를 <xref:System.Windows.Media.Animation.ClockController.Remove%2A> 메서드의 <xref:System.Windows.Media.Animation.ClockController>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-228">To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>.</span></span> <span data-ttu-id="709be-229">이 일반적으로 수행 된 <xref:System.Windows.Media.Animation.Clock.Completed> 클록에 대 한 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-229">This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock.</span></span> <span data-ttu-id="709be-230">루트 클록만 하 여 제어 될 수는 <xref:System.Windows.Media.Animation.ClockController>; <xref:System.Windows.Media.Animation.Clock.Controller%2A> 자식 클록의 속성을 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-230">Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock returns `null`.</span></span> <span data-ttu-id="709be-231">또한는 <xref:System.Windows.Media.Animation.Clock.Completed> 클록의 유효 기간 무제한 인 경우 이벤트가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-231">Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event is not raised if the effective duration of the clock is forever.</span></span>  <span data-ttu-id="709be-232">이 경우 사용자 호출 시기를 결정 해야 <xref:System.Windows.Media.Animation.ClockController.Remove%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-232">In that case, the user must determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.</span></span>  
  
 <span data-ttu-id="709be-233">이것은 주로 수명이 긴 개체에 대한 애니메이션에서 문제가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-233">This is primarily an issue for animations on objects that have a long lifetime.</span></span>  <span data-ttu-id="709be-234">개체는 가비지 수집 되 면 해당 클록도 연결이 끊어집니다 및 가비지 수집 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-234">When an object is garbage collected, its clocks are also disconnected and garbage collected.</span></span>  
  
 <span data-ttu-id="709be-235">클록 개체에 대 한 자세한 내용은 참조 하세요. [애니메이션 및 타이밍 시스템 개요](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-235">For more information about clock objects, see [Animation and Timing System Overview](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="709be-236">다음 예제에서는 검색 된 <xref:System.Windows.Media.Animation.Storyboard> 리소스에서는 실행 하 고 <xref:System.Windows.Media.Animation.Storyboard> 내부 이벤트를 처리 하는 클래스를가 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="709be-236">The following example retrieves a <xref:System.Windows.Media.Animation.Storyboard> from resources, and then runs that <xref:System.Windows.Media.Animation.Storyboard> when an internal event is class handled.</span></span>  
  
 [!code-csharp[CubeAnimation#FEBeginStoryboard](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Page1.xaml.cs#febeginstoryboard)]
 [!code-vb[CubeAnimation#FEBeginStoryboard](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/page1.xaml.vb#febeginstoryboard)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard, System::Windows::Media::Animation::HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard * System.Windows.Media.Animation.HandoffBehavior * bool -&gt; unit" Usage="frameworkElement.BeginStoryboard (storyboard, handoffBehavior, isControllable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="storyboard"><span data-ttu-id="709be-237">시작할 Storyboard입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-237">The storyboard to begin.</span></span></param>
        <param name="handoffBehavior"><span data-ttu-id="709be-238">Storyboard에 설명되어 있는 속성에 이미 애니메이션이 적용되어 있는 경우에 사용할 동작을 설명하는 열거형의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-238">A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.</span></span></param>
        <param name="isControllable"><span data-ttu-id="709be-239">애니메이션을 시작한 후 제어(일시 중지)할 수 있는지 여부를 선언합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-239">Declares whether the animation is controllable (can be paused) after it is started.</span></span></param>
        <summary><span data-ttu-id="709be-240">애니메이션이 시작된 후 제어하기 위한 지정된 상태를 사용하여 제공된 Storyboard에 포함된 작업 시퀀스를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-240">Begins the sequence of actions contained in the provided storyboard, with specified state for control of the animation after it is started.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-241">가장 일반적인 애니메이션 시나리오에서이 메서드를 사용 하지 마십시오.</span><span class="sxs-lookup"><span data-stu-id="709be-241">Most typical animation scenarios do not use this method.</span></span> <span data-ttu-id="709be-242">일반적으로 <xref:System.Windows.Media.Animation.Storyboard> 또는 <xref:System.Windows.Media.Animation.BeginStoryboard> 태그 및 다음 요소에 배치는 <xref:System.Windows.EventTrigger> 요소 콘텐츠입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-242">Typically, you create the <xref:System.Windows.Media.Animation.Storyboard> or <xref:System.Windows.Media.Animation.BeginStoryboard> element in markup, and then you place these as the <xref:System.Windows.EventTrigger> content on an element.</span></span> <span data-ttu-id="709be-243">이벤트에 의해 트리거되면 다음 애니메이션 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-243">When triggered by the event, the animation then runs.</span></span> <span data-ttu-id="709be-244">대부분의 컨트롤 측면을 <xref:System.Windows.Media.Animation.Storyboard> 태그에서 노출 된 속성을 통해 해결할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-244">Most of the control aspects of a <xref:System.Windows.Media.Animation.Storyboard> can be addressed by properties that are exposed in markup.</span></span>  
  
 <span data-ttu-id="709be-245">사용 하지 않는 서명에 대 한 합니다 `isControllable`, 매개 변수를 해당 매개 변수를 지정 하는 경우 또는 `false`, 연결 된 애니메이션 타임 라인 시계 애니메이션 "Fill" 기간에 도달 하는 즉시 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-245">For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the "Fill" period.</span></span> <span data-ttu-id="709be-246">따라서 애니메이션을 한 번 실행 한 후에 다시 시작할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-246">Therefore the animation cannot be restarted after running once.</span></span> <span data-ttu-id="709be-247">애니메이션 제어 수도 있어야 스토리 보드를 [X:name 지시문](~/docs/framework/xaml-services/x-name-directive.md) 코드에서 참조 하 여 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-247">Controlling an animation also requires that the storyboard have an [x:Name Directive](~/docs/framework/xaml-services/x-name-directive.md) or be accessible by reference in code.</span></span>  
  
 <span data-ttu-id="709be-248">핸드 오프 동작 특성으로 지정할 수 있습니다 <xref:System.Windows.Media.Animation.BeginStoryboard>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-248">Handoff behavior can be specified as an attribute of <xref:System.Windows.Media.Animation.BeginStoryboard>.</span></span>  
  
## <a name="using-the-compose-handoffbehavior"></a><span data-ttu-id="709be-249">사용 하 여 Compose HandoffBehavior</span><span class="sxs-lookup"><span data-stu-id="709be-249">Using the Compose HandoffBehavior</span></span>  
 <span data-ttu-id="709be-250">적용 하는 경우는 <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, 또는 <xref:System.Windows.Media.Animation.AnimationClock> 사용 하 여 속성에는 <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>모든 <xref:System.Windows.Media.Animation.Clock> 개체 속성과 연관 된 이전에 시스템 리소스를 소비 계속; 타이밍 시스템에서 시계를 자동으로 제거 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-250">When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property by using the <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system does not remove the clocks automatically.</span></span>  
  
 <span data-ttu-id="709be-251">사용 하 여 많은 수의 clock 적용 하는 경우 성능 문제를 방지 하려면 <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>를 완성 한 후 애니메이션된 속성에서 구성 중인 클록을 제거 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-251">To avoid performance issues when you apply a large number of clocks by using <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, you should remove composing clocks from the animated property after they complete.</span></span> <span data-ttu-id="709be-252">클록을 제거 하는 방법은 여러 가지가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-252">There are several ways to remove a clock:</span></span>  
  
-   <span data-ttu-id="709be-253">속성에서 모든 클록을 제거 하려면 사용 합니다 <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> 또는 <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> 애니메이션된 개체의 메서드.</span><span class="sxs-lookup"><span data-stu-id="709be-253">To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object.</span></span> <span data-ttu-id="709be-254">첫 번째 매개 변수로 애니메이션 효과가 적용 되는 속성을 지정 하 고 `null` 두 번째입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-254">Specify the property being animated as the first parameter, and `null` as the second.</span></span> <span data-ttu-id="709be-255">이 속성에서 모든 애니메이션 클록을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-255">This removes all animation clocks from the property.</span></span>  
  
-   <span data-ttu-id="709be-256">특정 제거할 <xref:System.Windows.Media.Animation.AnimationClock> 클록 목록에서 사용 하 여는 <xref:System.Windows.Media.Animation.Clock.Controller%2A> 의 속성을 <xref:System.Windows.Media.Animation.AnimationClock> 검색할를 <xref:System.Windows.Media.Animation.ClockController>, 호출를 <xref:System.Windows.Media.Animation.ClockController.Remove%2A> 메서드의 <xref:System.Windows.Media.Animation.ClockController>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-256">To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>.</span></span> <span data-ttu-id="709be-257">이 일반적으로 수행 된 <xref:System.Windows.Media.Animation.Clock.Completed> 클록에 대 한 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-257">This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock.</span></span> <span data-ttu-id="709be-258">루트 클록만 하 여 제어 될 수는 <xref:System.Windows.Media.Animation.ClockController>; <xref:System.Windows.Media.Animation.Clock.Controller%2A> 자식 클록의 속성을 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-258">Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock returns `null`.</span></span> <span data-ttu-id="709be-259">또한는 <xref:System.Windows.Media.Animation.Clock.Completed> 클록의 유효 기간 무제한 인 경우 이벤트가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-259">Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event is not raised if the effective duration of the clock is forever.</span></span>  <span data-ttu-id="709be-260">이 경우 사용자 호출 시기를 결정 해야 <xref:System.Windows.Media.Animation.ClockController.Remove%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-260">In that case, the user must determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.</span></span>  
  
 <span data-ttu-id="709be-261">이것은 주로 수명이 긴 개체에 대한 애니메이션에서 문제가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-261">This is primarily an issue for animations on objects that have a long lifetime.</span></span>  <span data-ttu-id="709be-262">개체는 가비지 수집 되 면 해당 클록도 연결이 끊어집니다 및 가비지 수집 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-262">When an object is garbage collected, its clocks are also disconnected and garbage collected.</span></span>  
  
 <span data-ttu-id="709be-263">클록 개체에 대 한 자세한 내용은 참조 하세요. [애니메이션 및 타이밍 시스템 개요](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-263">For more information about clock objects, see [Animation and Timing System Overview](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingGroup">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingGroup BindingGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.BindingGroup BindingGroup" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.BindingGroup" />
      <MemberSignature Language="VB.NET" Value="Public Property BindingGroup As BindingGroup" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::BindingGroup ^ BindingGroup { System::Windows::Data::BindingGroup ^ get(); void set(System::Windows::Data::BindingGroup ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BindingGroup : System.Windows.Data.BindingGroup with get, set" Usage="System.Windows.FrameworkElement.BindingGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingGroup</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-264">요소에 사용되는 <see cref="T:System.Windows.Data.BindingGroup" />을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-264">Gets or sets the <see cref="T:System.Windows.Data.BindingGroup" /> that is used for the element.</span></span></summary>
        <value><span data-ttu-id="709be-265">요소에 사용되는 <see cref="T:System.Windows.Data.BindingGroup" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-265">The <see cref="T:System.Windows.Data.BindingGroup" /> that is used for the element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-266"><xref:System.Windows.Data.BindingGroup> 개체의 여러 속성의 값 유효성 검사에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-266">A <xref:System.Windows.Data.BindingGroup> can be used to validate the values of multiple properties of an object.</span></span> <span data-ttu-id="709be-267">예를 들어 애플리케이션 주소를 입력 하 라는 메시지를 다음 형식의 개체를 채웁니다 `Address`, 속성이 있는 `Street`, `City`, `ZipCode`, 및 `Country`, 값을 사용 하는 사용자 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-267">For example, suppose that an application prompts the user to enter an address and then populates an object of type `Address`, which has the properties `Street`, `City`, `ZipCode`, and `Country`, with the values that the user provided.</span></span> <span data-ttu-id="709be-268">애플리케이션에 4 개를 포함 하는 패널 <xref:System.Windows.Controls.TextBox> 개체의 속성 중 하나에 바인딩되는 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-268">The application has a panel that contains four <xref:System.Windows.Controls.TextBox> controls, each of which is bound to one of the object's properties.</span></span> <span data-ttu-id="709be-269">사용할 수는 <xref:System.Windows.Controls.ValidationRule> 에 <xref:System.Windows.Data.BindingGroup> 유효성을 검사 하는 `Address` 개체.</span><span class="sxs-lookup"><span data-stu-id="709be-269">You can use a <xref:System.Windows.Controls.ValidationRule> in a <xref:System.Windows.Data.BindingGroup> to validate the `Address` object.</span></span> <span data-ttu-id="709be-270">예를 들어를 <xref:System.Windows.Controls.ValidationRule> 우편 주소의 국가 대 한 유효한 지 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-270">For example, the <xref:System.Windows.Controls.ValidationRule> can ensure that the zip code is valid for the country of the address.</span></span>  
  
 <span data-ttu-id="709be-271">자식 요소에서 상속 된 <xref:System.Windows.Data.BindingGroup> 다른 상속 가능한 속성에서와 마찬가지로 해당 부모 요소에서.</span><span class="sxs-lookup"><span data-stu-id="709be-271">Child elements inherit the <xref:System.Windows.Data.BindingGroup> from their parent elements, just as with any other inheritable property.</span></span>  
  
<a name="dependencyPropertyInfo_BindingGroup"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="709be-272">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="709be-272">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-273">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-273">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.BindingGroupProperty>|  
|<span data-ttu-id="709be-274">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="709be-274">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="709be-275">다음 예제는 사용자가 값과 동일 하 게 두 개체의 속성을 설정 하는지 여부를 확인 하는 애플리케이션의 일부입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-275">The following examples are part of an application that checks whether the user has set the properties of two objects to equal values.</span></span> <span data-ttu-id="709be-276">첫 번째 예제에서는 두 개의 <xref:System.Windows.Controls.TextBox> 각각 서로 다른 데이터 원본에 바인딩된 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-276">The first example creates two <xref:System.Windows.Controls.TextBox> controls, each of which is bound to a different data source.</span></span> <span data-ttu-id="709be-277"><xref:System.Windows.Controls.StackPanel> 에 <xref:System.Windows.Data.BindingGroup> 를 포함 하는 <xref:System.Windows.Controls.ValidationRule> 두 문자열이 같은지를 확인 하는.</span><span class="sxs-lookup"><span data-stu-id="709be-277">The <xref:System.Windows.Controls.StackPanel> has a <xref:System.Windows.Data.BindingGroup> that contains a <xref:System.Windows.Controls.ValidationRule> that checks that the two strings are equal.</span></span>  
  
 [!code-xaml[BindingGroupSnippets#BindingGroupComplete](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#bindinggroupcomplete)]  
  
 <span data-ttu-id="709be-278">다음 예제는 <xref:System.Windows.Controls.ValidationRule> 앞의 예제를 사용 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-278">The following example shows the <xref:System.Windows.Controls.ValidationRule> that the previous example uses.</span></span>  <span data-ttu-id="709be-279">에 <xref:System.Windows.Controls.ValidationRule.Validate%2A> 메서드 재정의 예제에서 각 원본 개체를 가져옵니다는 <xref:System.Windows.Data.BindingGroup> 개체 속성이 같은지 여부를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-279">In the <xref:System.Windows.Controls.ValidationRule.Validate%2A> method override, the example gets each source object from the <xref:System.Windows.Data.BindingGroup> and checks whether the properties of the objects are equal.</span></span>  
  
 [!code-csharp[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#bindinggroupnamevalidationrule)]
 [!code-vb[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#bindinggroupnamevalidationrule)]  
  
 <span data-ttu-id="709be-280">호출 하는 <xref:System.Windows.Controls.ValidationRule>를 호출 합니다 <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="709be-280">To invoke the <xref:System.Windows.Controls.ValidationRule>, call the <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> method.</span></span>  <span data-ttu-id="709be-281">다음 예제에서는 <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> 단추 클릭 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-281">The following example calls <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> when the click event of the button occurs.</span></span>  
  
 [!code-csharp[BindingGroupSnippets#UpdateSourcesClick](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#updatesourcesclick)]
 [!code-vb[BindingGroupSnippets#UpdateSourcesClick](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#updatesourcesclick)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingGroupProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BindingGroupProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BindingGroupProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.BindingGroupProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BindingGroupProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BindingGroupProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BindingGroupProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.BindingGroupProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-282"><see cref="P:System.Windows.FrameworkElement.BindingGroup" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-282">Identifies the <see cref="P:System.Windows.FrameworkElement.BindingGroup" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BringIntoView">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="709be-283">이 요소를 포함된 스크롤 가능한 영역 내에서 뷰에 표시하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-283">Attempts to bring this element into view, within any scrollable regions it is contained within.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public void BringIntoView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringIntoView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BringIntoView" />
      <MemberSignature Language="VB.NET" Value="Public Sub BringIntoView ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BringIntoView();" />
      <MemberSignature Language="F#" Value="member this.BringIntoView : unit -&gt; unit" Usage="frameworkElement.BringIntoView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="709be-284">이 요소를 포함된 스크롤 가능한 영역 내에서 뷰에 표시하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-284">Attempts to bring this element into view, within any scrollable regions it is contained within.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-285">이 메서드를 호출 하 여 발생을 <xref:System.Windows.FrameworkElement.RequestBringIntoView> 현재 요소에서 발생 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-285">By calling this method, you raise a <xref:System.Windows.FrameworkElement.RequestBringIntoView> event that originates from the current element.</span></span> <span data-ttu-id="709be-286">이 이벤트가 발생 하 여 처리할 수 있도록는 <xref:System.Windows.Controls.ScrollViewer>, 또는 파생 또는 유사한 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-286">This event is raised so that it can be handled by a <xref:System.Windows.Controls.ScrollViewer>, or a derived or similar class.</span></span> <span data-ttu-id="709be-287">예상 된 동작을 이벤트 데이터를 처리 됨으로 표시 부모 요소에는 이벤트를 처리 하는 이벤트의 소스에 포함 된 논리를 통해 보기에 표시 되는 <xref:System.Windows.Controls.ScrollViewer> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-287">The expected behavior is that the event is handled by the parent element, marked handled in the event data, and the source of the event is brought into view through the logic embedded in the <xref:System.Windows.Controls.ScrollViewer> control.</span></span> <span data-ttu-id="709be-288">모두를 <xref:System.Windows.FrameworkElement.RequestBringIntoView> 이벤트 또는 <xref:System.Windows.FrameworkElement.BringIntoView%2A> 방법에 대 한 성공 또는 실패를 이외의 이벤트는 일반적으로 표시 된 처리에 성공 정보를 전송 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-288">Neither the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event nor the <xref:System.Windows.FrameworkElement.BringIntoView%2A> method transmit any information about success or failure, other than that the event is typically marked handled on success.</span></span> <span data-ttu-id="709be-289">다음과 같은 오류와 같은 요소 설정의 포함할 수 있습니다 <xref:System.Windows.UIElement.Visibility%2A> 이외의 일부 값 되 <xref:System.Windows.Visibility.Visible>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-289">Reasons for failure can include the element settings, such as <xref:System.Windows.UIElement.Visibility%2A> being some value other than <xref:System.Windows.Visibility.Visible>.</span></span>  
  
 <span data-ttu-id="709be-290">지정 하지 않는 서명을 사용 하는 경우는 `targetRectangle`, 전체 요소 크기를 다음 (해당 <xref:System.Windows.UIElement.RenderSize%2A>) 볼 수 있게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-290">If you use the signature that does not specify a `targetRectangle`, then the entire element size (its <xref:System.Windows.UIElement.RenderSize%2A>) will be made visible.</span></span>  
  
 <span data-ttu-id="709be-291">이 메서드를 호출 하 여 잠재적으로 호출 <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> 요소가 포함 된 부모 스크롤 가능한 영역에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-291">By calling this method, you potentially will call <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> on any parent scrollable area that contains the element.</span></span> <span data-ttu-id="709be-292">이 요소는 스크롤 가능한 영역에 포함 되지 않은 경우는 <xref:System.Windows.FrameworkElement.RequestBringIntoView> 이벤트는 발생 하지만 이벤트 수신기를 찾지 있기 때문에 영향을 주지 않습니다 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-292">If this element is not contained in a scrollable area, the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event is still raised, but there will be no effect because there are no event listeners.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="709be-293">다음 예제에서는 때마다 응답 하는 애플리케이션 탐색 이벤트에 대 한 처리기를 구현 합니다 [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] 탐색 중인 조각에 포함 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-293">The following example implements a handler for an application navigation event that responds whenever the [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] being navigated to includes a fragment.</span></span> <span data-ttu-id="709be-294">조각에 명명 된는 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] 해시 기호 다음 (#), 구현 되는 동작으로 인해 프레임 내에서 보기로 스크롤할 요소가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-294">The fragment is named in the [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] following the hash sign (#), and the implemented behavior causes the element to scroll into view within the frame.</span></span> <span data-ttu-id="709be-295"><xref:System.Windows.FrameworkElement.BringIntoView%2A> 및 <xref:System.Windows.FrameworkElement.RequestBringIntoView> 예제에서는 스크롤 동작을 요청 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-295"><xref:System.Windows.FrameworkElement.BringIntoView%2A> and <xref:System.Windows.FrameworkElement.RequestBringIntoView> request that scrolling behavior in the example.</span></span>  
  
 [!code-csharp[FragmentNavigationSample#FEBringIntoView](~/samples/snippets/csharp/VS_Snippets_Wpf/FragmentNavigationSample/CSharp/MainWindow.xaml.cs#febringintoview)]
 [!code-vb[FragmentNavigationSample#FEBringIntoView](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FragmentNavigationSample/VisualBasic/MainWindow.xaml.vb#febringintoview)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public void BringIntoView (System.Windows.Rect targetRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringIntoView(valuetype System.Windows.Rect targetRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BringIntoView (targetRectangle As Rect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BringIntoView(System::Windows::Rect targetRectangle);" />
      <MemberSignature Language="F#" Value="member this.BringIntoView : System.Windows.Rect -&gt; unit" Usage="frameworkElement.BringIntoView targetRectangle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetRectangle" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="targetRectangle"><span data-ttu-id="709be-296">뷰에 함께 표시할 요소의 지정된 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-296">Specified size of the element that should also be brought into view.</span></span></param>
        <summary><span data-ttu-id="709be-297">이 요소의 제공된 영역 크기를 요소가 포함된 스크롤 가능 영역 내에서 뷰에 표시하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-297">Attempts to bring the provided region size of this element into view, within any scrollable regions it is contained within.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-298">이 메서드를 호출 하 여 발생을 <xref:System.Windows.FrameworkElement.RequestBringIntoView> 현재 요소에서 발생 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-298">By calling this method, you raise a <xref:System.Windows.FrameworkElement.RequestBringIntoView> event that originates from the current element.</span></span> <span data-ttu-id="709be-299">이 이벤트가 발생 하 여 처리할 수 있도록는 <xref:System.Windows.Controls.ScrollViewer>, 또는 파생 또는 유사한 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-299">This event is raised so that it can be handled by a <xref:System.Windows.Controls.ScrollViewer>, or a derived or similar class.</span></span> <span data-ttu-id="709be-300">예상 된 동작을 이벤트 데이터를 처리 됨으로 표시 부모 요소에는 이벤트를 처리 하는 이벤트의 소스에 포함 된 논리를 통해 보기에 표시 되는 <xref:System.Windows.Controls.ScrollViewer> 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-300">The expected behavior is that the event is handled by the parent element, marked handled in the event data, and the source of the event is brought into view through the logic embedded in the <xref:System.Windows.Controls.ScrollViewer> control.</span></span> <span data-ttu-id="709be-301">모두를 <xref:System.Windows.FrameworkElement.RequestBringIntoView> 이벤트 또는 <xref:System.Windows.FrameworkElement.BringIntoView%2A> 방법에 대 한 성공 또는 실패를 이외의 이벤트는 일반적으로 표시 된 처리에 성공 정보를 전송 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-301">Neither the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event nor the <xref:System.Windows.FrameworkElement.BringIntoView%2A> method transmit any information about success or failure, other than that the event is typically marked handled on success.</span></span> <span data-ttu-id="709be-302">다음과 같은 오류와 같은 요소 설정의 포함할 수 있습니다 <xref:System.Windows.UIElement.Visibility%2A> 이외의 일부 값 되 <xref:System.Windows.Visibility.Visible>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-302">Reasons for failure can include the element settings, such as <xref:System.Windows.UIElement.Visibility%2A> being some value other than <xref:System.Windows.Visibility.Visible>.</span></span>  
  
 <span data-ttu-id="709be-303">지정 하지 않는 서명을 사용 하는 경우는 `targetRectangle`, 전체 요소 크기를 다음 (해당 <xref:System.Windows.UIElement.RenderSize%2A>) 볼 수 있게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-303">If you use the signature that does not specify a `targetRectangle`, then the entire element size (its <xref:System.Windows.UIElement.RenderSize%2A>) will be made visible.</span></span>  
  
 <span data-ttu-id="709be-304">이 메서드를 호출 하 여 잠재적으로 호출 <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> 요소가 포함 된 부모 스크롤 가능한 영역에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-304">By calling this method, you potentially will call <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> on any parent scrollable area that contains the element.</span></span> <span data-ttu-id="709be-305">이 요소는 스크롤 가능한 영역에 포함 되지 않은 경우는 <xref:System.Windows.FrameworkElement.RequestBringIntoView> 이벤트는 발생 하지만 이벤트 수신기를 찾지 있기 때문에 영향을 주지 않습니다 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-305">If this element is not contained in a scrollable area, the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event is still raised, but there will be no effect because there are no event listeners.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="709be-306">다음 예제에서는 제한 된 스크롤 영역에는 큰 그래픽</span><span class="sxs-lookup"><span data-stu-id="709be-306">The following example has a large graphic in a constrained scrolling region.</span></span> <span data-ttu-id="709be-307">페이지의 단추에 큰 그래픽의 특정 영역에 뷰를 스크롤 하는 처리기.</span><span class="sxs-lookup"><span data-stu-id="709be-307">A button on the page has a handler that scrolls the view to a particular region of the large graphic.</span></span>  
  
 [!code-xaml[BaseElementsSmorgasbord#BringIntoViewRectMarkup](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml#bringintoviewrectmarkup)]  
  
 [!code-csharp[BaseElementsSmorgasbord#BringIntoViewRectCode](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#bringintoviewrectcode)]
 [!code-vb[BaseElementsSmorgasbord#BringIntoViewRectCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#bringintoviewrectcode)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.FlowDocumentScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenu">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ContextMenu ContextMenu { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.ContextMenu ContextMenu" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ContextMenu" />
      <MemberSignature Language="VB.NET" Value="Public Property ContextMenu As ContextMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::ContextMenu ^ ContextMenu { System::Windows::Controls::ContextMenu ^ get(); void set(System::Windows::Controls::ContextMenu ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextMenu : System.Windows.Controls.ContextMenu with get, set" Usage="System.Windows.FrameworkElement.ContextMenu" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenu</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-308">이 요소 내에서 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]를 통해 상황에 맞는 메뉴가 요청될 때마다 표시되는 상황에 맞는 메뉴 요소를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-308">Gets or sets the context menu element that should appear whenever the context menu is requested through [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] from within this element.</span></span></summary>
        <value><span data-ttu-id="709be-309">이 요소에 할당된 상황에 맞는 메뉴입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-309">The context menu assigned to this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-310"><xref:System.Windows.Controls.ContextMenu> 자체는 <xref:System.Windows.FrameworkElement> 파생 클래스 이므로 기술적으로 가능 <xref:System.Windows.Controls.ContextMenu> 자체에 <xref:System.Windows.FrameworkElement.ContextMenu%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-310"><xref:System.Windows.Controls.ContextMenu> itself is a <xref:System.Windows.FrameworkElement> derived class, and it is technically possible for <xref:System.Windows.Controls.ContextMenu> itself to have a <xref:System.Windows.FrameworkElement.ContextMenu%2A> property.</span></span> <span data-ttu-id="709be-311">그러나이 사용자는 혼란 스러운 상황에 맞는 메뉴 환경을 만들고이 방법은 권장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-311">However, this creates a confusing context menu experience for the user and this practice is not recommended.</span></span>  
  
<a name="dependencyPropertyInfo_ContextMenu"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="709be-312">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="709be-312">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-313">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-313">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ContextMenuProperty>|  
|<span data-ttu-id="709be-314">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="709be-314">Metadata properties set to `true`</span></span>|<span data-ttu-id="709be-315">없음</span><span class="sxs-lookup"><span data-stu-id="709be-315">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuClosing">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ContextMenuEventHandler ContextMenuClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ContextMenuEventHandler ContextMenuClosing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ContextMenuClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuClosing As ContextMenuEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ContextMenuEventHandler ^ ContextMenuClosing;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuClosing : System.Windows.Controls.ContextMenuEventHandler " Usage="member this.ContextMenuClosing : System.Windows.Controls.ContextMenuEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenuEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-316">요소의 상황에 맞는 메뉴를 닫기 직전에 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-316">Occurs just before any context menu on the element is closed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-317">닫히지 않도록 하려면 상황에 맞는 메뉴는 이벤트 처리기로 표시 해야 처리.</span><span class="sxs-lookup"><span data-stu-id="709be-317">To suppress closing context menus, handlers of the event should mark it as handled.</span></span>  
  
 <span data-ttu-id="709be-318">이 이벤트를 사용 하는 <xref:System.Windows.EventTrigger> 스타일에서 이벤트의 기본 서비스의 정의 참조 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-318">To use this event as an <xref:System.Windows.EventTrigger> in a style, you must reference the underlying service's definition of the event:</span></span>  
  
 [!code-xaml[CorePseudocode#FEContextMenuClosing](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/pseudocode.xaml#fecontextmenuclosing)]  
  
 <span data-ttu-id="709be-319">(이 사용 되므로 필요한에서 이벤트를 구현 <xref:System.Windows.FrameworkElement> 는 노출은 기본 서비스 이벤트 매핑되지 않는 경우는 <xref:System.Windows.FrameworkElement.ContextMenuClosing> 식별자를 트리거로 사용할 수 있도록).</span><span class="sxs-lookup"><span data-stu-id="709be-319">(This usage is required because the event implementation on <xref:System.Windows.FrameworkElement> that exposes the underlying service event does not map the <xref:System.Windows.FrameworkElement.ContextMenuClosing> identifier such that you can use it as a trigger).</span></span>  
  
 <span data-ttu-id="709be-320"><xref:System.Windows.Controls.ContextMenu> 자체는 <xref:System.Windows.FrameworkElement> 클래스를 파생 하지만 <xref:System.Windows.FrameworkElement.ContextMenuClosing> 이벤트 발생 하지 것입니다 상황에 맞는 메뉴에서 직접.</span><span class="sxs-lookup"><span data-stu-id="709be-320"><xref:System.Windows.Controls.ContextMenu> itself is a <xref:System.Windows.FrameworkElement> derived class, but the <xref:System.Windows.FrameworkElement.ContextMenuClosing> event will not be raised by a context menu directly.</span></span> <span data-ttu-id="709be-321">대신 속성으로 상황에 맞는 메뉴를 "소유" 하 고 사용자 UI에서 상황에 맞는 메뉴 닫기가 시도 하는 경우에 발생 하는 요소에서 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-321">Instead, the event is raised from the element that "owns" the context menu as a property and is only raised when a user attempts to close a context menu in the UI.</span></span> <span data-ttu-id="709be-322">그러나 있기 <xref:System.Windows.Controls.ContextMenu> 자체에 <xref:System.Windows.FrameworkElement.ContextMenu%2A> 속성 (중첩 된 상황에 맞는 메뉴).</span><span class="sxs-lookup"><span data-stu-id="709be-322">However it is possible for <xref:System.Windows.Controls.ContextMenu> itself to have a <xref:System.Windows.FrameworkElement.ContextMenu%2A> property (a nested context menu).</span></span> <span data-ttu-id="709be-323">이 경우에 <xref:System.Windows.Controls.ContextMenu> 실제로 소유 하 고 중첩 된 <xref:System.Windows.Controls.ContextMenu> 및 중첩 된 상황에 맞는 메뉴를 되는 이벤트의 원본과 이벤트를 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-323">In this case the <xref:System.Windows.Controls.ContextMenu> really does own the nested <xref:System.Windows.Controls.ContextMenu> and might raise the event, with the source of the event being the nested context menu.</span></span>  
  
 <span data-ttu-id="709be-324"><xref:System.Windows.Controls.ContextMenu> 클래스 자체에 비슷한 이벤트 (<xref:System.Windows.Controls.ContextMenu.Closed>) 하지만 <xref:System.Windows.Controls.ContextMenu.Closed> 이벤트 수는 없습니다 사용자 작업을 취소할 수 있는 기회입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-324">The <xref:System.Windows.Controls.ContextMenu> class itself also has a similar event (<xref:System.Windows.Controls.ContextMenu.Closed>) but the <xref:System.Windows.Controls.ContextMenu.Closed> event does not provide you the opportunity to cancel the user action.</span></span>  
  
<a name="routedEventInfo_ContextMenuClosing"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="709be-325">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="709be-325">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-326">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-326">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ContextMenuClosingEvent>|  
|<span data-ttu-id="709be-327">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="709be-327">Routing strategy</span></span>|<span data-ttu-id="709be-328">버블링</span><span class="sxs-lookup"><span data-stu-id="709be-328">Bubbling</span></span>|  
|<span data-ttu-id="709be-329">대리자</span><span class="sxs-lookup"><span data-stu-id="709be-329">Delegate</span></span>|<xref:System.Windows.Controls.ContextMenuEventHandler>|  
  
-   <span data-ttu-id="709be-330">재정의 <xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-330">Override <xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuClosingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ContextMenuClosingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ContextMenuClosingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuClosingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuClosingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ContextMenuClosingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuClosingEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ContextMenuClosingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-331"><see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-331">Identifies the <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-332">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-332">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="709be-333">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-333">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="709be-334">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-334">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="709be-335">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="709be-335">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="709be-336">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="709be-336">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuOpening">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ContextMenuEventHandler ContextMenuOpening;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ContextMenuEventHandler ContextMenuOpening" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ContextMenuOpening" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuOpening As ContextMenuEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ContextMenuEventHandler ^ ContextMenuOpening;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuOpening : System.Windows.Controls.ContextMenuEventHandler " Usage="member this.ContextMenuOpening : System.Windows.Controls.ContextMenuEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenuEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-337">요소의 상황에 맞는 메뉴를 열 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-337">Occurs when any context menu on the element is opened.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-338">상황에 맞는 메뉴를 열고 수동으로, 처리 된 것으로 이벤트 처리기 관련 이벤트를 표시 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-338">To manually open context menus, handlers of the events should mark the relevant event as handled.</span></span> <span data-ttu-id="709be-339">이 고, 그렇지의 기존 값을 <xref:System.Windows.FrameworkElement.ContextMenu%2A> 속성이 자동으로 상황에 맞는 메뉴를 열려면 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-339">Otherwise, the existing value of the <xref:System.Windows.FrameworkElement.ContextMenu%2A> property will be used to automatically open a context menu.</span></span> <span data-ttu-id="709be-340">이벤트를 처리 된 기본 작업을 효과적으로 취소 하 고 수 값을 다시 설정할 수는 <xref:System.Windows.FrameworkElement.ContextMenu%2A> 속성 연 다음 새 <xref:System.Windows.Controls.ContextMenu>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-340">Marking the event handled will effectively cancel the default action, and could be an opportunity to reset the value of the <xref:System.Windows.FrameworkElement.ContextMenu%2A> property and then open the new <xref:System.Windows.Controls.ContextMenu>.</span></span> <span data-ttu-id="709be-341">그러나 고려해 야 타이밍 문제가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-341">However, there is a timing issue you should be aware of.</span></span> <span data-ttu-id="709be-342">통해 상황에 맞는 메뉴를 완전히 바꾸기 위해는 <xref:System.Windows.FrameworkElement.ContextMenuOpening> 처리기 초기 상황에 맞는 메뉴 아니어야 null 이거나 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-342">In order to completely replace the context menu through a <xref:System.Windows.FrameworkElement.ContextMenuOpening> handler, the initial context menu must not be null / empty.</span></span> <span data-ttu-id="709be-343">또는 이벤트를 처리 하 여 수동으로 새 상황에 맞는 메뉴를 엽니다 해야 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-343">Alternatively, you might need to handle the event and then manually open a new context menu.</span></span> <span data-ttu-id="709be-344">자세한 내용은 참조 하세요 [방법: ContextMenuOpening 이벤트 처리](~/docs/framework/wpf/advanced/how-to-handle-the-contextmenuopening-event.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-344">For details, see [How to: Handle the ContextMenuOpening Event](~/docs/framework/wpf/advanced/how-to-handle-the-contextmenuopening-event.md).</span></span>  
  
 <span data-ttu-id="709be-345">이 이벤트를 사용 하는 <xref:System.Windows.EventTrigger> 스타일에서 기본 연결 된 이벤트를 참조 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-345">To use this event as an <xref:System.Windows.EventTrigger> in a style, you must reference the underlying attached event:</span></span>  
  
 [!code-xaml[CorePseudocode#FEContextMenuOpening](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/pseudocode.xaml#fecontextmenuopening)]  
  
 <span data-ttu-id="709be-346">(이 사용 되므로 필요한에서 이벤트를 구현 <xref:System.Windows.FrameworkElement> 는 노출은 기본 서비스 이벤트 매핑되지 않는 경우는 <xref:System.Windows.FrameworkElement.ContextMenuOpening> 식별자 트리거에서 사용할 수 있도록).</span><span class="sxs-lookup"><span data-stu-id="709be-346">(This usage is required because the event implementation on <xref:System.Windows.FrameworkElement> that exposes the underlying service event does not map the <xref:System.Windows.FrameworkElement.ContextMenuOpening> identifier such that you can use it in triggers).</span></span>  
  
 <span data-ttu-id="709be-347"><xref:System.Windows.Controls.ContextMenu> 자체는 <xref:System.Windows.FrameworkElement> 파생 클래스 이지만 원본으로 열려는 상황에 맞는 메뉴에서이 이벤트를 발생 하지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-347"><xref:System.Windows.Controls.ContextMenu> itself is a <xref:System.Windows.FrameworkElement> derived class, but this event will not be raised from the context menu being opened as a source.</span></span> <span data-ttu-id="709be-348">속성으로 상황에 맞는 메뉴를 "소유" 하 고 사용자 UI에서 상황에 맞는 메뉴를 열려고 할 때만 발생 하는 요소에서 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-348">The event is raised from the element that "owns" the context menu as a property and is only raised when a user attempts to open a context menu in the UI.</span></span> <span data-ttu-id="709be-349">있기 <xref:System.Windows.Controls.ContextMenu> 자체에 <xref:System.Windows.FrameworkElement.ContextMenu%2A> 속성인 있지만이 시나리오를 방지 해야 (세부 정보를 참조 하세요. <xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=nameWithType>).</span><span class="sxs-lookup"><span data-stu-id="709be-349">It is possible for <xref:System.Windows.Controls.ContextMenu> itself to have a <xref:System.Windows.FrameworkElement.ContextMenu%2A> property, but you should avoid this scenario (for details, see <xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=nameWithType>).</span></span>  
  
 <span data-ttu-id="709be-350">합니다 <xref:System.Windows.Controls.ContextMenu> 자체 클래스에 비슷한 이벤트 (<xref:System.Windows.Controls.ContextMenu.Opened>) 하지만 <xref:System.Windows.Controls.ContextMenu.Opened> 사용자 작업을 취소할 기회가 제공 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-350">The <xref:System.Windows.Controls.ContextMenu> class itself also has a similar event (<xref:System.Windows.Controls.ContextMenu.Opened>) but <xref:System.Windows.Controls.ContextMenu.Opened> does not provide you the opportunity to cancel the user action.</span></span>  
  
<a name="routedEventInfo_ContextMenuOpening"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="709be-351">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="709be-351">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-352">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-352">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ContextMenuOpeningEvent>|  
|<span data-ttu-id="709be-353">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="709be-353">Routing strategy</span></span>|<span data-ttu-id="709be-354">버블링</span><span class="sxs-lookup"><span data-stu-id="709be-354">Bubbling</span></span>|  
|<span data-ttu-id="709be-355">대리자</span><span class="sxs-lookup"><span data-stu-id="709be-355">Delegate</span></span>|<xref:System.Windows.Controls.ContextMenuEventHandler>|  
  
-   <span data-ttu-id="709be-356">재정의 <xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-356">Override <xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuOpeningEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ContextMenuOpeningEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ContextMenuOpeningEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuOpeningEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuOpeningEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ContextMenuOpeningEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuOpeningEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ContextMenuOpeningEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-357"><see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-357">Identifies the <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-358">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-358">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="709be-359">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-359">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="709be-360">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-360">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="709be-361">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="709be-361">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="709be-362">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="709be-362">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ContextMenuProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ContextMenuProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ContextMenuProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ContextMenuProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-363"><see cref="P:System.Windows.FrameworkElement.ContextMenu" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-363">Identifies the <see cref="P:System.Windows.FrameworkElement.ContextMenu" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cursor">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Cursor Cursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Cursor Cursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Cursor" />
      <MemberSignature Language="VB.NET" Value="Public Property Cursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Cursor ^ Cursor { System::Windows::Input::Cursor ^ get(); void set(System::Windows::Input::Cursor ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Cursor : System.Windows.Input.Cursor with get, set" Usage="System.Windows.FrameworkElement.Cursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-364">마우스 포인터가 이 요소 위에 있을 때 표시되는 커서를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-364">Gets or sets the cursor that displays when the mouse pointer is over this element.</span></span></summary>
        <value><span data-ttu-id="709be-365">표시할 커서입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-365">The cursor to display.</span></span> <span data-ttu-id="709be-366">기본값은 이 종속성 속성마다 <see langword="null" />로 정의됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-366">The default value is defined as <see langword="null" /> per this dependency property.</span></span> <span data-ttu-id="709be-367">그러나 런타임 시 실제 기본값은 다양한 요소에서 비롯됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-367">However, the practical default at run time will come from a variety of factors.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-368">에이 속성을 설정 하면 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]의 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 프로세서에 대 한 형식 변환에 의존 합니다 <xref:System.Windows.Input.Cursor> 문자열을 평가 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-368">When you set this property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processor relies on type conversion for the <xref:System.Windows.Input.Cursor> class to evaluate the string.</span></span> <span data-ttu-id="709be-369">제공된 된 문자열을 평가할지를 <xref:System.Windows.Input.CursorType> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-369">The provided string should evaluate to a <xref:System.Windows.Input.CursorType> value.</span></span> <span data-ttu-id="709be-370">자세한 내용은 <xref:System.Windows.Input.Cursor>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="709be-370">See <xref:System.Windows.Input.Cursor> for details.</span></span>  
  
 <span data-ttu-id="709be-371">이 속성으로 설정 된 커서는 마우스 포인터가이 요소 위에 있을 때 표시 되지 것입니다 하는지 여부의 값에 따라 달라 집니다 이기도 합니다 <xref:System.Windows.FrameworkElement.ForceCursor%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-371">Whether the cursor as established by this property will or will not display when the mouse pointer is over this element is also dependent on the value of the <xref:System.Windows.FrameworkElement.ForceCursor%2A> property.</span></span> <span data-ttu-id="709be-372">또한는 활성 끌기, 마우스 캡처, 컨트롤 및 등과 내의 텍스트 편집 모드와 같은 이벤트 관련 고려 사항을이 속성에 지정 된 값 보다 높은 우선 순위를 사용 하 여 커서를 적용도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-372">Also, event-related considerations such as an active drag, mouse capture, text editing modes within controls, and so on, will also affect the cursor with higher priority than the value you specify in this property.</span></span>  
  
 <span data-ttu-id="709be-373">로 설정, 최종 기본적으로이 속성을 설정 하는 동작으로 되돌리려면 `null` 다시 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-373">To revert the behavior of setting this property to the eventual default, set it to `null` again.</span></span>  
  
 <span data-ttu-id="709be-374">`null` 기본값인은 실제 커서 값 결정 여기 지연 되 고이 다른 곳에서 가져와야 하는 의미입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-374">The `null` default really means that determination of the practical cursor value is deferred here and should be obtained from elsewhere.</span></span> <span data-ttu-id="709be-375">제공 되지 않는 경우 소스에서 프로그래밍 방식으로 값을 기본 커서는 위에 시각적으로 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 애플리케이션 화살표를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-375">If presented without programmatic values from any source, the default cursor that is visually over a [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] application will be an arrow.</span></span> <span data-ttu-id="709be-376">그러나 일시적인 커서 변경 사항으로 설정 되어 있지는 <xref:System.Windows.FrameworkElement.Cursor%2A> 를 통해 전달 될 때 요소의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-376">However, the transient cursor changes are not set to the <xref:System.Windows.FrameworkElement.Cursor%2A> values of the elements when they are passed over.</span></span> <span data-ttu-id="709be-377"><xref:System.Windows.FrameworkElement.Cursor%2A> 속성은 유일한 보고서 null이 아닌 경우에 실제로 설정 된, 예를 들어 코드 또는 스타일을 통해 값입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-377">The <xref:System.Windows.FrameworkElement.Cursor%2A> property will only report non null values in cases where it was actually set, for instance through code or a style.</span></span> <span data-ttu-id="709be-378">위에 마우스를 움직일 때마다를 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 발생을 <xref:System.Windows.UIElement.QueryCursor> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-378">Each movement of the mouse over a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] application raises a <xref:System.Windows.UIElement.QueryCursor> event.</span></span> <span data-ttu-id="709be-379">이 이벤트는 버블링, 및 경로 따라 모든 요소는 이벤트를 처리 하 고이 이벤트의 인수를 통해 커서의 값을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-379">The event bubbles, and any element along the route has the opportunity to handle the event and to set the value of the cursor through the arguments of this event.</span></span> <span data-ttu-id="709be-380">대부분의 경우에서 명확한 시각적으로 커서를 생성 하는 메커니즘입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-380">This is the mechanism that produces the visually apparent cursor in most cases.</span></span> <span data-ttu-id="709be-381">경우는 <xref:System.Windows.UIElement.QueryCursor> 처리기는 커서 결과 반환한 다음 이벤트 처리 되 고 변경 된 값 인수에는 팩트의 값 보다 우선 합니다 <xref:System.Windows.FrameworkElement.Cursor%2A> 모든 수준에서 속성 하지 않는 한 <xref:System.Windows.FrameworkElement.ForceCursor%2A> 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-381">If a <xref:System.Windows.UIElement.QueryCursor> handler returns a cursor result, then the fact that the event is handled and has a changed value in the arguments takes precedence over the value of the <xref:System.Windows.FrameworkElement.Cursor%2A> property at any level, unless <xref:System.Windows.FrameworkElement.ForceCursor%2A> is set.</span></span>  
  
 <span data-ttu-id="709be-382">사용자 지정 커서를 만드는 경우가, 일반적으로 설정한 경우이 속성의 정적 속성 값에는 <xref:System.Windows.Input.Cursors> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-382">If not are not creating a custom cursor, you typically set this property to a static property value of the <xref:System.Windows.Input.Cursors> class.</span></span> <span data-ttu-id="709be-383">설정 <xref:System.Windows.FrameworkElement.Cursor%2A> 코드에서 다음 중 하나 필요로 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-383">Setting <xref:System.Windows.FrameworkElement.Cursor%2A> in code requires one of the following:</span></span>  
  
-   <span data-ttu-id="709be-384">호출 된 <xref:System.Windows.Input.Cursor> 을 가져올 생성자는 <xref:System.Windows.Input.Cursor> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="709be-384">Call the <xref:System.Windows.Input.Cursor> constructor to get a <xref:System.Windows.Input.Cursor> instance.</span></span> <span data-ttu-id="709be-385">두 서명을 <xref:System.Windows.Input.Cursor> 스트림이나 파일을 만들고 있는 대비 하 여 생성자가 사용 하 여는 <xref:System.Windows.Input.Cursor> 사용자 지정 커서에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-385">Both signatures of the <xref:System.Windows.Input.Cursor> constructor use streams or files, in anticipation that you are creating the <xref:System.Windows.Input.Cursor> object for a custom cursor.</span></span>  
  
-   <span data-ttu-id="709be-386">사용 하 여는 <xref:System.Windows.Input.CursorConverter> 클래스 및 해당 <xref:System.Windows.Input.CursorConverter.ConvertFrom%2A> 하 여 커서를 지정 하는 방법 <xref:System.Windows.Input.CursorType>, 또는으로 계산 되는 문자열을 <xref:System.Windows.Input.CursorType>, 캐스팅을 반환 하 고 <xref:System.Windows.Input.Cursor>.</span><span class="sxs-lookup"><span data-stu-id="709be-386">Use the <xref:System.Windows.Input.CursorConverter> class and its <xref:System.Windows.Input.CursorConverter.ConvertFrom%2A> method to specify a cursor by <xref:System.Windows.Input.CursorType>, or a string that can evaluate to a <xref:System.Windows.Input.CursorType>, and cast the return to <xref:System.Windows.Input.Cursor>.</span></span>  
  
 <span data-ttu-id="709be-387">설정 된 <xref:System.Windows.Input.Cursor> 사용자 지정 값으로 설정 되지 않은 부분 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-387">Setting the <xref:System.Windows.Input.Cursor> to a custom value is not enabled in partial trust.</span></span> <span data-ttu-id="709be-388">사용자 지정 커서에 대 한 자세한 내용은 참조 하세요. [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-388">For more information on custom cursors, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_Cursor"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="709be-389">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="709be-389">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-390">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-390">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.CursorProperty>|  
|<span data-ttu-id="709be-391">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="709be-391">Metadata properties set to `true`</span></span>|<span data-ttu-id="709be-392">없음</span><span class="sxs-lookup"><span data-stu-id="709be-392">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="709be-393">다음 예에서는 의도적으로 커서 그래픽을 설정 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="709be-393">The following example shows how to deliberately set the cursor graphic.</span></span>  
  
 [!code-csharp[cursors#ChangeCursorsSample](~/samples/snippets/csharp/VS_Snippets_Wpf/cursors/CSharp/Window1.xaml.cs#changecursorssample)]
 [!code-vb[cursors#ChangeCursorsSample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/cursors/VisualBasic/Window1.xaml.vb#changecursorssample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryCursor" />
        <altmember cref="P:System.Windows.FrameworkElement.ForceCursor" />
        <altmember cref="P:System.Windows.Input.Mouse.OverrideCursor" />
      </Docs>
    </Member>
    <Member MemberName="CursorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CursorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CursorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.CursorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CursorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CursorProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CursorProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.CursorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-394"><see cref="P:System.Windows.FrameworkElement.Cursor" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-394">Identifies the <see cref="P:System.Windows.FrameworkElement.Cursor" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContext">
      <MemberSignature Language="C#" Value="public object DataContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataContext" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.DataContext" />
      <MemberSignature Language="VB.NET" Value="Public Property DataContext As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataContext { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataContext : obj with get, set" Usage="System.Windows.FrameworkElement.DataContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-395">데이터 바인딩에 참여할 때 요소에 대한 데이터 컨텍스트를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-395">Gets or sets the data context for an element when it participates in data binding.</span></span></summary>
        <value><span data-ttu-id="709be-396">데이터 컨텍스트로 사용할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-396">The object to use as data context.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-397">*데이터 컨텍스트* 는 요소가 바인딩 뿐만 아니라 경로 같은 바인딩의 다른 특성에 사용 되는 데이터 원본에 대 한 부모 요소 로부터 정보를 상속할 수 있도록 하는 개념입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-397">*Data context* is a concept that allows elements to inherit information from their parent elements about the data source that is used for binding, as well as other characteristics of the binding, such as the path.</span></span>  
  
 <span data-ttu-id="709be-398">데이터 컨텍스트 개체의 속성 바인딩을 사용 하 여.NET 개체를 직접 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-398">Data context can be set directly to a .NET object, with the bindings evaluating to properties of that object.</span></span> <span data-ttu-id="709be-399">데이터 컨텍스트 설정할 수 있습니다 또는 한 <xref:System.Windows.Data.DataSourceProvider> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-399">Alternatively, you can set the data context to a <xref:System.Windows.Data.DataSourceProvider> object.</span></span>  
  
 <span data-ttu-id="709be-400">속성 값이 종속성 속성을 상속 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-400">This dependency property inherits property values.</span></span> <span data-ttu-id="709be-401">자식 요소에 대 한 다른 값이 없는 경우 <xref:System.Windows.FrameworkElement.DataContext%2A> 속성 시스템에는 값을 설정 하는 다음 지역 값 또는 스타일을 통해 설정 된 <xref:System.Windows.FrameworkElement.DataContext%2A> 이 값이 할당 된 가장 가까운 부모 요소의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-401">If there are child elements without other values for <xref:System.Windows.FrameworkElement.DataContext%2A> established through local values or styles, then the property system will set the value to be the <xref:System.Windows.FrameworkElement.DataContext%2A> value of the nearest parent element with this value assigned.</span></span>  
  
 <span data-ttu-id="709be-402">다음 속성 중 하나를 사용할 수는 또는 <xref:System.Windows.Data.Binding> 클래스 바인딩 소스를 명시적으로 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-402">Alternatively, you can use one of the following properties of the <xref:System.Windows.Data.Binding> class to specify the binding source explicitly:</span></span>
  
    - <span data-ttu-id="709be-403"><xref:System.Windows.Data.Binding.ElementName%2A>.</span><span class="sxs-lookup"><span data-stu-id="709be-403"><xref:System.Windows.Data.Binding.ElementName%2A>.</span></span>
    - <span data-ttu-id="709be-404"><xref:System.Windows.Data.Binding.Source%2A>.</span><span class="sxs-lookup"><span data-stu-id="709be-404"><xref:System.Windows.Data.Binding.Source%2A>.</span></span>
    - <span data-ttu-id="709be-405"><xref:System.Windows.Data.Binding.RelativeSource%2A>.</span><span class="sxs-lookup"><span data-stu-id="709be-405"><xref:System.Windows.Data.Binding.RelativeSource%2A>.</span></span> 
  
  <span data-ttu-id="709be-406">자세한 내용은 [방법: 바인딩 소스 지정](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-406">For more information, see [How to: Specify the Binding Source](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md).</span></span>  
  
 <span data-ttu-id="709be-407">XAML에 <xref:System.Windows.FrameworkElement.DataContext%2A> 가장 일반적으로는 <xref:System.Windows.Data.Binding> 선언 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-407">In XAML, <xref:System.Windows.FrameworkElement.DataContext%2A> is most typically set as a <xref:System.Windows.Data.Binding> declaration.</span></span> <span data-ttu-id="709be-408">속성 요소 구문이 나 특성 구문을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-408">You can use either property element syntax or attribute syntax.</span></span> <span data-ttu-id="709be-409">특성 구문 예제에서는이 페이지에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-409">Attribute syntax is shown in the example on this page.</span></span> <span data-ttu-id="709be-410">설정 하려면 코드를 사용할 수도 있습니다 <xref:System.Windows.FrameworkElement.DataContext%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-410">You can also use code to set <xref:System.Windows.FrameworkElement.DataContext%2A>.</span></span>  
  
 <span data-ttu-id="709be-411"><xref:System.Windows.FrameworkElement.DataContext%2A> 여기서 한 상황에 맞는 바인딩할 수 있습니다 다른 시나리오를 용이 하 게 바인딩할 수 있는 속성이입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-411"><xref:System.Windows.FrameworkElement.DataContext%2A> is a bindable property to facilitate scenarios where one context might be bound to another.</span></span> <span data-ttu-id="709be-412">그러나에 바인딩하는 경우 <xref:System.Windows.FrameworkElement.DataContext%2A>, 순환 바인딩 참조를 만들지 않도록 주의 해야 (바인딩하지 마십시오를 <xref:System.Windows.FrameworkElement.DataContext%2A> 속성 값 상속 특성으로 인해 작업을 수행 하는 것이 불가능는 자신에 게는 <xref:System.Windows.FrameworkElement.DataContext%2A> 속성).</span><span class="sxs-lookup"><span data-stu-id="709be-412">However, if you bind to <xref:System.Windows.FrameworkElement.DataContext%2A>, be careful to not create circular binding references (do not bind a <xref:System.Windows.FrameworkElement.DataContext%2A> to itself, which it is possible to do because of the property value inheritance nature of the <xref:System.Windows.FrameworkElement.DataContext%2A> property).</span></span>  
  
<a name="xamlPropertyElementUsage_DataContext"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="709be-413">XAML 속성 요소 사용</span><span class="sxs-lookup"><span data-stu-id="709be-413">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.DataContext>  
    <dataContextObject />  
  </object.DataContext>  
</object>  
```  
  
<a name="xamlAttributeUsage_DataContext"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="709be-414">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="709be-414">XAML Attribute Usage</span></span>  
  
```  
<object DataContext="bindingUsage"/>  
- or -  
<object DataContext="{resourceExtension contextResourceKey}"/>  
```  
  
<a name="xamlValues_DataContext"></a>   
## <a name="xaml-values"></a><span data-ttu-id="709be-415">XAML 값</span><span class="sxs-lookup"><span data-stu-id="709be-415">XAML Values</span></span>  
 <span data-ttu-id="709be-416">*dataContextObject*</span><span class="sxs-lookup"><span data-stu-id="709be-416">*dataContextObject*</span></span>  
 <span data-ttu-id="709be-417">부모 요소 내에서 모든 바인딩에 대 한 데이터 컨텍스트로 사용 되는 직접 포함 된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-417">A directly embedded object that serves as data context for any bindings within the parent element.</span></span> <span data-ttu-id="709be-418">이 개체는 일반적으로 <xref:System.Windows.Data.Binding> 또는 다른 <xref:System.Windows.Data.BindingBase> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-418">Typically, this object is a <xref:System.Windows.Data.Binding> or another <xref:System.Windows.Data.BindingBase> derived class.</span></span> <span data-ttu-id="709be-419">또는 원시 데이터 바인딩에 사용할 모든 개체 형식의 실제 나중에 정의 된 바인딩을 사용 하 여 여기에서 배치 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-419">Alternatively, raw data of any object type intended for binding may be placed here, with the actual bindings defined later.</span></span>  
  
 <span data-ttu-id="709be-420">*bindingUsage*</span><span class="sxs-lookup"><span data-stu-id="709be-420">*bindingUsage*</span></span>  
 <span data-ttu-id="709be-421">적절 한 데이터 컨텍스트를으로 계산 되는 바인딩 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-421">A binding usage that evaluates to an appropriate data context.</span></span> <span data-ttu-id="709be-422">자세한 내용은 [Binding 태그 확장](~/docs/framework/wpf/advanced/binding-markup-extension.md)을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="709be-422">For details, see [Binding Markup Extension](~/docs/framework/wpf/advanced/binding-markup-extension.md).</span></span>  
  
 <span data-ttu-id="709be-423">*resourceExtension*</span><span class="sxs-lookup"><span data-stu-id="709be-423">*resourceExtension*</span></span>  
 <span data-ttu-id="709be-424">다음 중 하나: [ `StaticResource` ](~/docs/framework/wpf/advanced/staticresource-markup-extension.md) 하거나 [ `DynamicResource` ](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-424">One of the following: [`StaticResource`](~/docs/framework/wpf/advanced/staticresource-markup-extension.md) or [`DynamicResource`](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md).</span></span> <span data-ttu-id="709be-425">리소스에서 사용 되는 개체로 정의 하는 원시 데이터를 참조할 때 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-425">This usage is used when referring to raw data defined as an object in resources.</span></span> <span data-ttu-id="709be-426">참조 [XAML 리소스](~/docs/framework/wpf/advanced/xaml-resources.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-426">See [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
 <span data-ttu-id="709be-427">*contextResourceKey*</span><span class="sxs-lookup"><span data-stu-id="709be-427">*contextResourceKey*</span></span>  
 <span data-ttu-id="709be-428">내에서 요청 된 개체에 대 한 키 식별자는 <xref:System.Windows.ResourceDictionary>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-428">The key identifier for the object being requested from within a <xref:System.Windows.ResourceDictionary>.</span></span>  
  
<a name="dependencyPropertyInfo_DataContext"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="709be-429">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="709be-429">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-430">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-430">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.DataContextProperty>|  
|<span data-ttu-id="709be-431">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="709be-431">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="709be-432">다음 예제에서는 데이터 컨텍스트 바인딩에 대해 작동 하는 방법을 보여 줍니다. 및 바인딩된 속성의 특정 값을 정의 하는 정보를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-432">The following example illustrates how a data context acts on a binding and provides the information that defines the specific values of bound properties.</span></span>  
  
 [!code-xaml[MasterDetail#DataContextProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty)]  
[!code-xaml[MasterDetail#DataContextProperty2](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty2)]  
[!code-xaml[MasterDetail#DataContextProperty3](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContextChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler DataContextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler DataContextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.DataContextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DataContextChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ DataContextChanged;" />
      <MemberSignature Language="F#" Value="member this.DataContextChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.DataContextChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-433">이 요소의 데이터 컨텍스트가 변경될 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-433">Occurs when the data context for this element changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-434">데이터 컨텍스트 및 데이터 바인딩에 설명은 참조 하세요. [데이터 바인딩 개요](~/docs/framework/wpf/data/data-binding-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-434">For an explanation of data contexts and data binding, see [Data Binding Overview](~/docs/framework/wpf/data/data-binding-overview.md).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="709be-435">경우는 <xref:System.Windows.FrameworkElement.DataContext%2A> 요소를 변경 하는이 요소에 모든 데이터 바인딩된 속성은 잠재적으로 영향을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-435">When the <xref:System.Windows.FrameworkElement.DataContext%2A> for an element changes, all data-bound properties on this element are potentially affected.</span></span> <span data-ttu-id="709be-436">이 데이터 컨텍스트를 상속 하는 논리 트리에서 현재 요소의 자식 요소인 모든 요소 및 현재 요소 자체에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-436">This applies to any elements that are child elements of the current element in the logical tree, which inherit the data context, and also the current element itself.</span></span> <span data-ttu-id="709be-437">이러한 모든 기존 바인딩 다시 새 해석 해야 <xref:System.Windows.FrameworkElement.DataContext%2A> 고 바인딩 결과 다시 평가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-437">All such existing bindings must re-interpret the new <xref:System.Windows.FrameworkElement.DataContext%2A> and will reevaluate the binding results.</span></span> <span data-ttu-id="709be-438">데이터 바인딩 엔진의 발생을 기준으로 이러한 재계산이의 순서는 결정적이 지 않습니다.는 <xref:System.Windows.FrameworkElement.DataContextChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-438">The data binding engine is not deterministic about the order of these reevaluations, relative to the raising of the <xref:System.Windows.FrameworkElement.DataContextChanged> event.</span></span> <span data-ttu-id="709be-439">재계산이 조합 또는 이벤트 후 이벤트 전에 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-439">The reevaluations can occur before the event, after the event, or in any mixture.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.DataContext" />
      </Docs>
    </Member>
    <Member MemberName="DataContextProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty DataContextProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty DataContextProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.DataContextProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DataContextProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ DataContextProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable DataContextProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.DataContextProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-440"><see cref="P:System.Windows.FrameworkElement.DataContext" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-440">Identifies the <see cref="P:System.Windows.FrameworkElement.DataContext" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultStyleKey">
      <MemberSignature Language="C#" Value="protected internal object DefaultStyleKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultStyleKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.DefaultStyleKey" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property DefaultStyleKey As Object" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Object ^ DefaultStyleKey { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultStyleKey : obj with get, set" Usage="System.Windows.FrameworkElement.DefaultStyleKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-441">테마 스타일을 사용하거나 정의할 때 이 컨트롤에 대한 스타일을 참조하는 데 사용할 키를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-441">Gets or sets the key to use to reference the style for this control, when theme styles are used or defined.</span></span></summary>
        <value><span data-ttu-id="709be-442">스타일 키입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-442">The style key.</span></span> <span data-ttu-id="709be-443">테마 스타일 조회의 일부로 올바르게 작동하려면 이 값은 스타일이 지정되는 컨트롤의 <see cref="T:System.Type" />이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-443">To work correctly as part of theme style lookup, this value is expected to be the <see cref="T:System.Type" /> of the control being styled.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-444">이 속성은 일반적으로 직접 속성 접근자의 통해 설정 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-444">This property is typically not set through any of its direct property accessors.</span></span> <span data-ttu-id="709be-445">새로 만들 때마다이 종속성 속성의 형식별 메타 데이터 재정의 대신 <xref:System.Windows.FrameworkElement> 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-445">Instead, you override the type-specific metadata of this dependency property every time you create a new <xref:System.Windows.FrameworkElement> derived class.</span></span> <span data-ttu-id="709be-446">컨트롤을 파생 시킬 때 호출 된 <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> 에 대해 메서드를 <xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty> 컨트롤의 정적 생성자 내에서 식별자를 파생 클래스 (또는 해당 하는 클래스 초기화).</span><span class="sxs-lookup"><span data-stu-id="709be-446">When you derive a control, call the <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> method against the <xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty> identifier, within the static constructor of the control derived class (or equivalent class initialization).</span></span>  
  
 <span data-ttu-id="709be-447">컨트롤을 일반적으로 자체 형식으로이 속성의 기본값을 재정의 하지만 일부 경우에 사용할 수도에서 테마 사전 스타일 존재 하는 기본 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-447">A control typically overrides the default value of this property to be its own type, but in some cases could also use a base type for which a style in the theme dictionaries exists.</span></span> <span data-ttu-id="709be-448">이 기본 컨트롤의 컨트롤 템플릿에 해당 파생된 컨트롤의 시각적 표시를 완전히 정의 및 파생된 형식에서 노출 하는 모든 추가 멤버 컨트롤 템플릿의 일부로 추가 요소를 필요로 하지 않는 경우에 실제.</span><span class="sxs-lookup"><span data-stu-id="709be-448">This is only practical if the control templates of the base control entirely define the visual representation of that derived control, and if whatever additional members the derived types expose do not require additional elements as part of the control template.</span></span>  
  
 <span data-ttu-id="709be-449">테마 스타일을 사용 하지 않도록 의도적으로 컨트롤을 설정 합니다 <xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A> 속성을 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-449">If you want your element or control to deliberately not use theme styles, set the <xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A> property to `true`.</span></span>  
  
<a name="dependencyPropertyInfo_DefaultStyleKey"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="709be-450">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="709be-450">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-451">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-451">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty>|  
|<span data-ttu-id="709be-452">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="709be-452">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="709be-453">다음 예제에 설명에 나와 있는 종속성 속성 메타 데이터 재정의 사용을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="709be-453">The following example illustrates the dependency property metadata override usage discussed in Remarks.</span></span> <span data-ttu-id="709be-454">이 코드는 사용자 지정 컨트롤 클래스를 정의 `NumericUpDown` 전용된 컨트롤 라이브러리 어셈블리에서 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-454">This code defines a custom control class `NumericUpDown` intended to be used from a dedicated control library assembly.</span></span> <span data-ttu-id="709be-455">그림된 정적 생성자는 일부 개인 초기화 함수를 참조, 클래스 처리기를 등록 (또 다른 일반적인 컨트롤 서브클래싱 시나리오; 참조 [라우트된 이벤트 것으로 표시를 처리 및 클래스 처리](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)) 마지막으로 재정의 된 <xref:System.Windows.FrameworkElement.DefaultStyleKey%2A> 종속성 속성 메타 데이터에는 `NumericUpDown` 클래스.</span><span class="sxs-lookup"><span data-stu-id="709be-455">The illustrated static constructor references some private initialization function, registers a class handler (another common control subclassing scenario; see [Marking Routed Events as Handled, and Class Handling](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)) and finally overrides the <xref:System.Windows.FrameworkElement.DefaultStyleKey%2A> dependency property metadata on the `NumericUpDown` class.</span></span> <span data-ttu-id="709be-456"><xref:System.Windows.FrameworkElement.DefaultStyleKey%2A> 일부 임의 스타일이 지정 되지 않은 컨트롤의 스타일을 조회 하는 테마 스타일 시스템을 사용 하는 규칙의 의도 한 키로 자체 형식이 항상 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-456"><xref:System.Windows.FrameworkElement.DefaultStyleKey%2A> always returns its own type as the intended key, which is the convention that the theme style system uses to look up the style for some arbitrary otherwise non-styled control.</span></span> <span data-ttu-id="709be-457">전체 샘플은 또한 해당 키에서 참조 되는 실제 컨트롤의 테마 스타일을 정의 참조 [테마 및 UI 자동화 지원 샘플이 있는 NumericUpDown 사용자 지정 컨트롤](https://go.microsoft.com/fwlink/?LinkID=160025)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-457">The complete sample also defines the actual control's theme style that is referenced by that key; see [NumericUpDown Custom Control with Theme and UI Automation Support Sample](https://go.microsoft.com/fwlink/?LinkID=160025).</span></span>  
  
 [!code-csharp[CustomControlNumericUpDown#StaticCtorOfCustomClassCommonTasks](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary/NumericUpDown2.cs)]
 [!code-vb[CustomControlNumericUpDown#StaticCtorOfCustomClassCommonTasks](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary/numericupdown2.vb)]  

  <span data-ttu-id="709be-458">이 예제에 대 한 전체 소스 코드는 모두 GitHub에서 사용할 수 있습니다 [ C# ](https://github.com/dotnet/samples/tree/master/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary) 하 고 [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-458">The complete source code for this example is available on GitHub for both [C#](https://github.com/dotnet/samples/tree/master/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary) and [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary).</span></span>

 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160025"><span data-ttu-id="709be-459">테마 및 UI 자동화 지원 샘플이 있는 NumericUpDown 사용자 지정 컨트롤</span><span class="sxs-lookup"><span data-stu-id="709be-459">NumericUpDown Custom Control with Theme and UI Automation Support Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DefaultStyleKeyProperty">
      <MemberSignature Language="C#" Value="protected internal static readonly System.Windows.DependencyProperty DefaultStyleKeyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly static initonly class System.Windows.DependencyProperty DefaultStyleKeyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.DefaultStyleKeyProperty" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared ReadOnly DefaultStyleKeyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="protected public: static initonly System::Windows::DependencyProperty ^ DefaultStyleKeyProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultStyleKeyProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.DefaultStyleKeyProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-460"><see cref="P:System.Windows.FrameworkElement.DefaultStyleKey" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-460">Identifies the <see cref="P:System.Windows.FrameworkElement.DefaultStyleKey" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public virtual void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="frameworkElement.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="709be-461">요소에 대한 초기화 프로세스가 완료되었음을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="709be-461">Indicates that the initialization process for the element is complete.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-462">하는 경우 <xref:System.Windows.FrameworkElement.BeginInit%2A> 이전에 호출 기본 구현 시킵니다는 <xref:System.Windows.FrameworkElement.Initialized> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-462">If <xref:System.Windows.FrameworkElement.BeginInit%2A> was previously called, the base implementation will raise the <xref:System.Windows.FrameworkElement.Initialized> event.</span></span> <span data-ttu-id="709be-463">그렇지 않은 경우, <xref:System.Windows.FrameworkElement.BeginInit%2A> 를 호출 하지 않았습니다 것일 수도 여부 결정 <xref:System.Windows.FrameworkElement.BeginInit%2A> 가 호출 되 면 <xref:System.Windows.FrameworkElement.Initialized> 발생 하지 않습니다 대신 예외가 발생 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-463">Otherwise, if <xref:System.Windows.FrameworkElement.BeginInit%2A> was not called or it could not be determined whether <xref:System.Windows.FrameworkElement.BeginInit%2A> was called, <xref:System.Windows.FrameworkElement.Initialized> is not raised and an exception is thrown instead.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="709be-464">요소에 대해 이전에 <see cref="M:System.Windows.FrameworkElement.EndInit" />를 호출하지 않고 <see cref="M:System.Windows.FrameworkElement.BeginInit" />를 호출한 경우</span><span class="sxs-lookup"><span data-stu-id="709be-464"><see cref="M:System.Windows.FrameworkElement.EndInit" /> was called without <see cref="M:System.Windows.FrameworkElement.BeginInit" /> having previously been called on the element.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="709be-465">요소를 로드 프로세스 동안 요소를 초기화할 때 발생 해야 하는 특수 한 처리를 제공 하려면이 메서드를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-465">Implement this method to provide special handling that should happen when your element is initialized during the element loading process.</span></span>  
  
<span data-ttu-id="709be-466">구현 (기본값) 기본 구현을 초기화를 추적 하기 위해 일부 내부 플래그를 설정 하기 때문에 기본 구현을 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-466">Your implementation should call the base implementation, because the base (default) implementation sets some internal flags to keep track of initialization.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="FindName">
      <MemberSignature Language="C#" Value="public object FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindName (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.FindName : string -&gt; obj" Usage="frameworkElement.FindName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="709be-467">요청한 요소의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-467">The name of the requested element.</span></span></param>
        <summary><span data-ttu-id="709be-468">제공된 식별자 이름의 요소를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-468">Finds an element that has the provided identifier name.</span></span></summary>
        <returns><span data-ttu-id="709be-469">요청한 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-469">The requested element.</span></span> <span data-ttu-id="709be-470">일치하는 요소가 없으면 <see langword="null" />일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-470">This can be <see langword="null" /> if no matching element was found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-471">요소에 자식 요소가 있으면 이러한 자식 요소는 요청 된 명명 된 요소에 대 한 모든 검색된을 재귀적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-471">If the element has child elements, these child elements are all searched recursively for the requested named element.</span></span>  
  
 <span data-ttu-id="709be-472"><xref:System.Windows.FrameworkElement.FindName%2A> 현재 요소의 네임 스페이스 내에서 작동 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-472"><xref:System.Windows.FrameworkElement.FindName%2A> operates within the current element's namescope.</span></span> <span data-ttu-id="709be-473">자세한 내용은 참조 하세요 [WPF XAML 이름 범위](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-473">For details, see [WPF XAML Namescopes](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
        <altmember cref="P:System.Windows.FrameworkElement.Name" />
        <related type="Article" href="https://msdn.microsoft.com/library/b7e61222-e8cf-48d2-acd0-6df3b7685d48"><span data-ttu-id="709be-474">X:name 특성</span><span class="sxs-lookup"><span data-stu-id="709be-474">x:Name Attribute</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FindResource">
      <MemberSignature Language="C#" Value="public object FindResource (object resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object FindResource(object resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindResource (resourceKey As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindResource(System::Object ^ resourceKey);" />
      <MemberSignature Language="F#" Value="member this.FindResource : obj -&gt; obj" Usage="frameworkElement.FindResource resourceKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resourceKey"><span data-ttu-id="709be-475">요청된 리소스의 키 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-475">The key identifier for the requested resource.</span></span></param>
        <summary><span data-ttu-id="709be-476">지정된 키를 사용하여 리소스를 검색하고 요청된 리소스가 없으면 예외를 throw합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-476">Searches for a resource with the specified key, and throws an exception if the requested resource is not found.</span></span></summary>
        <returns><span data-ttu-id="709be-477">요청된 리소스입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-477">The requested resource.</span></span> <span data-ttu-id="709be-478">제공된 키를 포함하는 리소스가 없으면 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-478">If no resource with the provided key was found, an exception is thrown.</span></span> <span data-ttu-id="709be-479">예외가 발생하면 <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> 값도 반환될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-479">An <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> value might also be returned in the exception case.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="709be-480">찾을 수 없는 키에 대 한이 메서드를 호출 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-480">If you call this method for a key that cannot be found, an exception is thrown.</span></span> <span data-ttu-id="709be-481">경우 원하지 않는 호출에서 발생 하는 예외를 처리할 <xref:System.Windows.FrameworkElement.FindResource%2A>, 호출 <xref:System.Windows.FrameworkElement.TryFindResource%2A> 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-481">If you do not want to handle exceptions that result from calling <xref:System.Windows.FrameworkElement.FindResource%2A>, call <xref:System.Windows.FrameworkElement.TryFindResource%2A> instead.</span></span> <span data-ttu-id="709be-482"><xref:System.Windows.FrameworkElement.TryFindResource%2A> 반환 `null` 요청된 된 리소스를 찾을 수 없으면 시점과 예외를 throw 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-482"><xref:System.Windows.FrameworkElement.TryFindResource%2A> returns `null` when a requested resource cannot be found, and does not throw an exception.</span></span>  
  
 <span data-ttu-id="709be-483">리소스를 호출 하는 요소에 없는 경우 검색된 다음 애플리케이션을 다음 테마 및 마지막으로 시스템 리소스를 논리적 트리에서 부모 요소는 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-483">If the resource is not found on the calling element, the parent element in the logical tree is searched next, then the application, then themes, and finally system resources.</span></span> <span data-ttu-id="709be-484">이 조회 방법론은 태그에 대 한 동적 리소스 참조 여 리소스를 요청 하는 경우 트리를 검색 하는 방법을 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-484">This lookup methodology is identical to how the tree is searched if a resource were requested by a dynamic resource reference in markup.</span></span> <span data-ttu-id="709be-485">리소스 조회에 대 한 자세한 내용은 참조 하세요. [XAML 리소스](~/docs/framework/wpf/advanced/xaml-resources.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-485">For more information about resource lookup, see [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
 <span data-ttu-id="709be-486">일반적으로 즉시 캐스팅 하는 <xref:System.Windows.FrameworkElement.FindResource%2A> 반환 값 속성의 형식에는 반환 되는 리소스 값을 사용 하 여 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-486">Typically, you immediately cast a <xref:System.Windows.FrameworkElement.FindResource%2A> return value to the type of the property that you setting with the returned resource value.</span></span>  
  
 <span data-ttu-id="709be-487">리소스 키 필요가 없는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-487">Resource keys are not necessarily strings.</span></span> <span data-ttu-id="709be-488">예를 들어 컨트롤 테마 수준으로 지정에 대 한 스타일을 <xref:System.Type> 컨트롤 및 애플리케이션 또는 페이지 스타일에 대 한 컨트롤 일반적으로 사용 하 여이 동일한 키 규칙입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-488">For instance, styles for controls at the theme level are deliberately keyed to the <xref:System.Type> of the control, and application or page styles for controls typically use this same key convention.</span></span> <span data-ttu-id="709be-489">세부 정보를 참조 하세요 [스타일 및 템플릿](~/docs/framework/wpf/controls/styling-and-templating.md) 하거나 [XAML 리소스](~/docs/framework/wpf/advanced/xaml-resources.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-489">For details, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md) or [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="709be-490">다음 예제에서는 명명 된 리소스를 가져오고 속성에 맞게 적절 한 형식으로 캐스팅 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-490">The following example obtains a named resource and casts it to an appropriate type to fill a property.</span></span>  
  
 [!code-csharp[PropertiesOvwSupport#ResourceProceduralGet](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertiesOvwSupport/CSharp/page3.xaml.cs#resourceproceduralget)]
 [!code-vb[PropertiesOvwSupport#ResourceProceduralGet](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertiesOvwSupport/visualbasic/page3.xaml.vb#resourceproceduralget)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Windows.ResourceReferenceKeyNotFoundException"><span data-ttu-id="709be-491"><paramref name="resourceKey" />가 발견되었거나 <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> 이벤트에 대한 이벤트 처리기가 존재하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-491"><paramref name="resourceKey" /> was not found and an event handler does not exist for the <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> event.</span></span>  
  
<span data-ttu-id="709be-492">또는</span><span class="sxs-lookup"><span data-stu-id="709be-492">-or-</span></span> 
 <span data-ttu-id="709be-493"><paramref name="resourceKey" />가 발견되지 않았으며 <see cref="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled" /> 이벤트에서 <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> 속성이 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-493"><paramref name="resourceKey" /> was not found and the <see cref="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled" /> property is <see langword="false" /> in the <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> event.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="709be-494"><paramref name="resourceKey" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="709be-494"><paramref name="resourceKey" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Windows.FrameworkElement.TryFindResource(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FlowDirection">
      <MemberSignature Language="C#" Value="public System.Windows.FlowDirection FlowDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.FlowDirection FlowDirection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.FlowDirection" />
      <MemberSignature Language="VB.NET" Value="Public Property FlowDirection As FlowDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::FlowDirection FlowDirection { System::Windows::FlowDirection get(); void set(System::Windows::FlowDirection value); };" />
      <MemberSignature Language="F#" Value="member this.FlowDirection : System.Windows.FlowDirection with get, set" Usage="System.Windows.FrameworkElement.FlowDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.FlowDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-495">텍스트 및 다른 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 요소가 해당 레이아웃을 제어하는 부모 요소 안에서 표시되는 방향을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-495">Gets or sets the direction that text and other [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] elements flow within any parent element that controls their layout.</span></span></summary>
        <value><span data-ttu-id="709be-496">텍스트 및 기타 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 요소가 열거형의 값으로 해당 부모 요소 안에서 표시되는 방향입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-496">The direction that text and other [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] elements flow within their parent element, as a value of the enumeration.</span></span> <span data-ttu-id="709be-497">기본값은 <see cref="F:System.Windows.FlowDirection.LeftToRight" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-497">The default value is <see cref="F:System.Windows.FlowDirection.LeftToRight" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-498">종속성 속성 사용 설정 된 <xref:System.Windows.FrameworkElement.FlowDirection%2A> 이 요소에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-498">The dependency property usage sets the <xref:System.Windows.FrameworkElement.FlowDirection%2A> on this element.</span></span> <span data-ttu-id="709be-499">속성 값 상속을 설정으로 인해 <xref:System.Windows.FrameworkElement.FlowDirection%2A> 요소에 설정 될 수 있습니다 <xref:System.Windows.FrameworkElement.FlowDirection%2A> 설정 되지 않은 모든 자식 요소 <xref:System.Windows.FrameworkElement.FlowDirection%2A> 로컬로 또는 다른 방법을 통해 스타일과 같은 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-499">Because of property value inheritance, setting <xref:System.Windows.FrameworkElement.FlowDirection%2A> on an element can potentially set <xref:System.Windows.FrameworkElement.FlowDirection%2A> on all child elements that did not set <xref:System.Windows.FrameworkElement.FlowDirection%2A> locally or though other means such as styles.</span></span>  
  
 <span data-ttu-id="709be-500">이 속성은 하지 자동 설정 모든 애플리케이션 문화권 정보의 일부로 요소는 반드시 문화권 정보에 의해 포함 된 일반 흐름 방향을 따릅니다는 콘텐츠를 포함 될 수 있으므로 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-500">This property is not automatically set as part of any application culture information, because an element might contain content that is not necessarily intended to obey the general flow direction implied by the culture information.</span></span> <span data-ttu-id="709be-501">전역화 고려 사항에 대 한 자세한 내용은 참조 하세요. [WPF의 전역화](~/docs/framework/wpf/advanced/globalization-for-wpf.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-501">For more information on globalization considerations, see [Globalization for WPF](~/docs/framework/wpf/advanced/globalization-for-wpf.md).</span></span>  
  
 <span data-ttu-id="709be-502">이 속성은 정의 된 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 접근자 속성을 종속성 속성으로 작동 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-502">This property has a defined [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] property accessor, so it functions as a dependency property.</span></span> <span data-ttu-id="709be-503">그러나도 등록 연결, 연결된 된 속성으로도 할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-503">However, it is also registered as attached, so it can also function as an attached property.</span></span> <span data-ttu-id="709be-504">연결 된 등록은 주로 속성 값 상속 지원 되지만 연결 된 속성을 true로 속성을 사용할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-504">The attached registration is mainly so that property value inheritance is supported, but the property can also be used as a true attached property.</span></span> <span data-ttu-id="709be-505">연결 된 속성은 관련 흐름 방향을 설정 하려는 개체에만 <xref:System.Windows.FrameworkElement> 부모 요소가 하면 레이아웃을 수행 하는 되지 자체는 <xref:System.Windows.FrameworkElement>, 없고 이미 정의 된 보다 직접적 `FlowDirection` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-505">The attached property usage is only relevant if the object you intend to set the flow direction on has a <xref:System.Windows.FrameworkElement> parent element that performs layout upon it, is itself not a <xref:System.Windows.FrameworkElement>, and does not already have a more directly defined `FlowDirection` property.</span></span> <span data-ttu-id="709be-506">(같은 흐름의 일부 문서 클래스 <xref:System.Windows.Documents.Block> 하 고 <xref:System.Windows.Documents.Inline> 자체 정의 `FlowDirection`,이 속성도 흐름 방향을 설정 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-506">(Some of the flow document classes such as <xref:System.Windows.Documents.Block> and <xref:System.Windows.Documents.Inline> define their own `FlowDirection`, and this property can also set the flow direction.</span></span> <span data-ttu-id="709be-507">속성 값이 다음 읽기 최종 콘텐츠 호스트에서 연결 된 속성 사용 하지 않고도.)</span><span class="sxs-lookup"><span data-stu-id="709be-507">The property value is then read by the eventual content host without requiring attached property usage.)</span></span>  
  
<a name="xamlAttributeUsage_FlowDirection"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="709be-508">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="709be-508">XAML Attribute Usage</span></span>  
 <span data-ttu-id="709be-509">\<*object* **FlowDirection**="<xref:System.Windows.FlowDirection>"/></span><span class="sxs-lookup"><span data-stu-id="709be-509">\<*object* **FlowDirection**="<xref:System.Windows.FlowDirection>"/></span></span>  
  
<a name="xamlTextUsage_FlowDirection"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="709be-510">XAML 텍스트 사용</span><span class="sxs-lookup"><span data-stu-id="709be-510">XAML Text Usage</span></span>  
 <span data-ttu-id="709be-511">되지 않는 클래스에서이 속성을 설정할 수도 있습니다 <xref:System.Windows.FrameworkElement> 파생 클래스에서 다음과 같은 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 연결 된 속성 사용:</span><span class="sxs-lookup"><span data-stu-id="709be-511">This property can also be set on classes that are not <xref:System.Windows.FrameworkElement> derived classes, by the following [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attached property usage:</span></span>  
  
 <span data-ttu-id="709be-512">`<` *object* `FrameworkElement.`**FlowDirection**="<xref:System.Windows.FlowDirection>`"/>`</span><span class="sxs-lookup"><span data-stu-id="709be-512">`<` *object* `FrameworkElement.`**FlowDirection**="<xref:System.Windows.FlowDirection>`"/>`</span></span>  
  
<a name="dependencyPropertyInfo_FlowDirection"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="709be-513">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="709be-513">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-514">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-514">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.FlowDirectionProperty>|  
|<span data-ttu-id="709be-515">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="709be-515">Metadata properties set to `true`</span></span>|<span data-ttu-id="709be-516"><xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A></span><span class="sxs-lookup"><span data-stu-id="709be-516"><xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A></span></span>|  
  
 <span data-ttu-id="709be-517">이 속성은 종속성 속성과 연결된 된 속성입니다. 설명을 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="709be-517">This property is both a dependency property and an attached property; see Remarks.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlowDirectionProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FlowDirectionProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FlowDirectionProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.FlowDirectionProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FlowDirectionProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FlowDirectionProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FlowDirectionProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.FlowDirectionProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-518"><see cref="P:System.Windows.FrameworkElement.FlowDirection" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-518">Identifies the <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusVisualStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Style FocusVisualStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style FocusVisualStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.FocusVisualStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property FocusVisualStyle As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ FocusVisualStyle { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FocusVisualStyle : System.Windows.Style with get, set" Usage="System.Windows.FrameworkElement.FocusVisualStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-519">키보드 포커스를 캡처할 때 이 요소에 적용되는 모양, 효과 또는 기타 스타일 특성을 사용자 지정할 수 있는 속성을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-519">Gets or sets a property that enables customization of appearance, effects, or other style characteristics that will apply to this element when it captures keyboard focus.</span></span></summary>
        <value><span data-ttu-id="709be-520">포커스에 적용하려는 스타일입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-520">The desired style to apply on focus.</span></span> <span data-ttu-id="709be-521">종속성 속성에 선언된 기본값은 빈 정적 <see cref="T:System.Windows.Style" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-521">The default value as declared in the dependency property is an empty static <see cref="T:System.Windows.Style" />.</span></span> <span data-ttu-id="709be-522">그러나 런타임 시 유효 값은 대체로(항상 그렇지는 않음) 컨트롤에 대한 테마 지원에서 제공되는 스타일입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-522">However, the effective value at run time is often (but not always) a style as supplied by theme support for controls.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-523">이 속성을 시각적 모양에 영향을 줍니다 하지만 나타내지 않는 <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> 메타 데이터에서입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-523">This property affects visual appearance but does not report <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> in metadata.</span></span> <span data-ttu-id="709be-524">시각적 모양 변경 이벤트 구동 모든 시간에 적용 되지 않을 수 고 따라서은 일반적으로 보고 메타 데이터의 시각적 개체 또는 레이아웃 정보가 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-524">This is because the visual appearance change is event-driven and may not apply at all times, and therefore should not generally report any visual or layout information in metadata.</span></span>  
  
 <span data-ttu-id="709be-525">개념적으로 컨트롤에 적용 되는 포커스의 시각적 동작 컨트롤 간에 일관 된 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-525">Conceptually, the visual behavior of focus applied to a control should be coherent from control to control.</span></span> <span data-ttu-id="709be-526">일관성을 적용 하는 가장 적절 한 방법은 전체 테마를 작성 하는 경우에 포커스 비주얼 스타일을 변경 하는 경우</span><span class="sxs-lookup"><span data-stu-id="709be-526">The most sensible way to enforce coherence is to only change the focus visual style if you are composing an entire theme.</span></span> <span data-ttu-id="709be-527">테마의 일부가 아니라 개별 컨트롤 스타일에서이 속성을 설정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-527">Setting this property on individual control styles and not as part of a theme is not the intended usage of this property, because it may lead to a confusing user experience regarding keyboard focus.</span></span> <span data-ttu-id="709be-528">컨트롤별 동작을 의도적으로 일관 된 테마를 하려는 경우 더 좋은 방법은 사용 하는 것 트리거 스타일의 개별 입력된 상태 속성에 대 한 같은 <xref:System.Windows.UIElement.IsFocused%2A> 또는 <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>, 하지 않는 방식으로 작업을 수행 하 고 모든 기존 포커스 비주얼 스타일을 사용 하 여 시각적 방해 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-528">If you are intending control-specific behavior that is deliberately not coherent across a theme, a much better approach is to use triggers in styles for individual input state properties, such as <xref:System.Windows.UIElement.IsFocused%2A> or <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>, and to do so in a way that does not visually interfere with any existing focus visual style.</span></span> <span data-ttu-id="709be-529">디자인 의도 대 한 자세한 내용은 <xref:System.Windows.FrameworkElement.FocusVisualStyle%2A> 및 대체 내용은 속성을 집중 [컨트롤 및 FocusVisualStyle의 포커스 스타일 지정](~/docs/framework/wpf/advanced/styling-for-focus-in-controls-and-focusvisualstyle.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-529">For more information on the design intention of <xref:System.Windows.FrameworkElement.FocusVisualStyle%2A> and alternative focus properties, see [Styling for Focus in Controls, and FocusVisualStyle](~/docs/framework/wpf/advanced/styling-for-focus-in-controls-and-focusvisualstyle.md).</span></span>  
  
<a name="xamlAttributeUsage_FocusVisualStyle"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="709be-530">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="709be-530">XAML Attribute Usage</span></span>  
  
```  
<object FocusVisualStyle="{resourceExtension styleResourceKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_FocusVisualStyle"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="709be-531">XAML 속성 요소 사용</span><span class="sxs-lookup"><span data-stu-id="709be-531">XAML Property Element Usage</span></span>  
  
<a name="xamlValues_FocusVisualStyle"></a>   
## <a name="xaml-values"></a><span data-ttu-id="709be-532">XAML 값</span><span class="sxs-lookup"><span data-stu-id="709be-532">XAML Values</span></span>  
 <span data-ttu-id="709be-533">*resourceExtension*</span><span class="sxs-lookup"><span data-stu-id="709be-533">*resourceExtension*</span></span>  
 <span data-ttu-id="709be-534">다음 중 하나:, 또는 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-534">One of the following: , or .</span></span> <span data-ttu-id="709be-535">참조 [XAML 리소스](~/docs/framework/wpf/advanced/xaml-resources.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-535">See [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
 <span data-ttu-id="709be-536">*styleResourceKey*</span><span class="sxs-lookup"><span data-stu-id="709be-536">*styleResourceKey*</span></span>  
 <span data-ttu-id="709be-537">요청 되는 스타일을 식별 하는 키입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-537">The key that identifies the style being requested.</span></span> <span data-ttu-id="709be-538">키의 기존 리소스에 참조를 <xref:System.Windows.ResourceDictionary>입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-538">The key refers to an existing resource in a <xref:System.Windows.ResourceDictionary>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="709be-539">속성 요소 구문은 기술적으로 가능 하지만 권장 하지는 않습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-539">Property element syntax is technically possible, but not recommended.</span></span> <span data-ttu-id="709be-540">참조 [인라인 스타일 및 템플릿](~/docs/framework/wpf/advanced/inline-styles-and-templates.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-540">See [Inline Styles and Templates](~/docs/framework/wpf/advanced/inline-styles-and-templates.md).</span></span> <span data-ttu-id="709be-541">사용 하 여 바인딩 참조 또는 <xref:System.Windows.Data.Binding> 가능 하지만 일반적이 지 않은 이기도 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-541">A binding reference using  or <xref:System.Windows.Data.Binding> is also possible, but uncommon.</span></span>  
  
<a name="dependencyPropertyInfo_FocusVisualStyle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="709be-542">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="709be-542">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-543">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-543">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.FocusVisualStyleProperty>|  
|<span data-ttu-id="709be-544">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="709be-544">Metadata properties set to `true`</span></span>|<span data-ttu-id="709be-545">없음</span><span class="sxs-lookup"><span data-stu-id="709be-545">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="FocusVisualStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusVisualStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusVisualStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.FocusVisualStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusVisualStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusVisualStyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FocusVisualStyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.FocusVisualStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-546"><see cref="P:System.Windows.FrameworkElement.FocusVisualStyle" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-546">Identifies the <see cref="P:System.Windows.FrameworkElement.FocusVisualStyle" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForceCursor">
      <MemberSignature Language="C#" Value="public bool ForceCursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ForceCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ForceCursor" />
      <MemberSignature Language="VB.NET" Value="Public Property ForceCursor As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ForceCursor { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ForceCursor : bool with get, set" Usage="System.Windows.FrameworkElement.ForceCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-547">이 <see cref="T:System.Windows.FrameworkElement" />가 <see cref="P:System.Windows.FrameworkElement.Cursor" /> 속성에서 선언된 커서를 렌더링하도록 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]에 명령할 것인지를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-547">Gets or sets a value that indicates whether this <see cref="T:System.Windows.FrameworkElement" /> should force the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] to render the cursor as declared by the <see cref="P:System.Windows.FrameworkElement.Cursor" /> property.</span></span></summary>
        <value><span data-ttu-id="709be-548">이 요소 위에 있을 때 커서에 대한 현재 <see cref="P:System.Windows.FrameworkElement.Cursor" /> 설정(모든 자식 요소 포함)을 사용하여 커서가 표시되도록 하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-548"><see langword="true" /> if cursor presentation while over this element is forced to use current <see cref="P:System.Windows.FrameworkElement.Cursor" /> settings for the cursor (including on all child elements); otherwise <see langword="false" />.</span></span> <span data-ttu-id="709be-549">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-549">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-550">이 속성을 설정 하는 경우 `true` 자식 요소에서 설정한의 커서 설정을 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-550">If you set this property to `true` you will override the cursor preferences established by child elements.</span></span> <span data-ttu-id="709be-551">이렇게 하면 애플리케이션에서 일반적 이므로 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 자식 요소는 커서를 지정 하려는 경우에 특히 사용자에 대해 혼동 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-551">Doing so in general application [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] might be confusing for the user, particularly if child elements are attempting to specify cursors.</span></span> <span data-ttu-id="709be-552">설정 <xref:System.Windows.FrameworkElement.ForceCursor%2A> 컨트롤 서브클래싱 또는 합성 시나리오에 더 적합 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-552">Setting <xref:System.Windows.FrameworkElement.ForceCursor%2A> is more appropriate in control subclassing or compositing scenarios.</span></span>  
  
<a name="dependencyPropertyInfo_ForceCursor"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="709be-553">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="709be-553">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-554">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-554">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ForceCursorProperty>|  
|<span data-ttu-id="709be-555">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="709be-555">Metadata properties set to `true`</span></span>|<span data-ttu-id="709be-556">없음</span><span class="sxs-lookup"><span data-stu-id="709be-556">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="709be-557">다음 예제에서는 커서 값을 강제로 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-557">The following example forces the cursor value.</span></span>  
  
 [!code-xaml[ForceCursor#ForceCursor](~/samples/snippets/csharp/VS_Snippets_Wpf/ForceCursor/CS/default.xaml#forcecursor)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="ForceCursorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ForceCursorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ForceCursorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ForceCursorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ForceCursorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ForceCursorProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ForceCursorProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ForceCursorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-558"><see cref="P:System.Windows.FrameworkElement.ForceCursor" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-558">Identifies the <see cref="P:System.Windows.FrameworkElement.ForceCursor" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBindingExpression">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpression GetBindingExpression (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpression GetBindingExpression(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBindingExpression (dp As DependencyProperty) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpression ^ GetBindingExpression(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.GetBindingExpression : System.Windows.DependencyProperty -&gt; System.Windows.Data.BindingExpression" Usage="frameworkElement.GetBindingExpression dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="709be-559">바인딩을 가져올 대상 <see cref="T:System.Windows.DependencyProperty" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-559">The target <see cref="T:System.Windows.DependencyProperty" /> to get the binding from.</span></span></param>
        <summary><span data-ttu-id="709be-560">지정된 속성의 바인딩을 나타내는 <see cref="T:System.Windows.Data.BindingExpression" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-560">Returns the <see cref="T:System.Windows.Data.BindingExpression" /> that represents the binding on the specified property.</span></span></summary>
        <returns><span data-ttu-id="709be-561">대상 속성에 활성 바인딩이 있으면 <see cref="T:System.Windows.Data.BindingExpression" />을 반환하고, 그렇지 않으면 <see langword="null" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-561">A <see cref="T:System.Windows.Data.BindingExpression" /> if the target property has an active binding; otherwise, returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-562">에 대 한 반환 값을 확인 `null` 속성에 활성 바인딩이 있는지 여부를 확인 하 여 기술입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-562">Checking the return value for `null` is a technique you can use to determine whether a property has an active binding.</span></span>  
  
 <span data-ttu-id="709be-563">이 메서드는 실제로 편리한 래퍼를 <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="709be-563">This method is really just a convenience wrapper around the <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="709be-564"><xref:System.Windows.FrameworkElement.GetBindingExpression%2A> 현재 인스턴스를 전달 하며 `dp` 매개 변수를 <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType>입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-564"><xref:System.Windows.FrameworkElement.GetBindingExpression%2A> passes the current instance and the `dp` parameter to <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.BindingOperations" />
      </Docs>
    </Member>
    <Member MemberName="GetFlowDirection">
      <MemberSignature Language="C#" Value="public static System.Windows.FlowDirection GetFlowDirection (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.FlowDirection GetFlowDirection(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFlowDirection (element As DependencyObject) As FlowDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::FlowDirection GetFlowDirection(System::Windows::DependencyObject ^ element);" />
      <MemberSignature Language="F#" Value="static member GetFlowDirection : System.Windows.DependencyObject -&gt; System.Windows.FlowDirection" Usage="System.Windows.FrameworkElement.GetFlowDirection element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.FlowDirection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="709be-565"><see cref="P:System.Windows.FrameworkElement.FlowDirection" />을 반환할 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-565">The element to return a <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> for.</span></span></param>
        <summary><span data-ttu-id="709be-566">지정된 <see cref="T:System.Windows.DependencyObject" />에 대한 <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> 연결된 속성의 값을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-566">Gets the value of the <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <returns><span data-ttu-id="709be-567">열거형 값인 요청된 흐름 방향입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-567">The requested flow direction, as a value of the enumeration.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-568">이 메서드의 주요 목적은 대 한 연결 된 속성 구문을 지원 하는 것은 <xref:System.Windows.FrameworkElement.FlowDirection%2A> 속성에서 자식 요소의 제공된 된 <xref:System.Windows.FrameworkElement> 해당 부모 요소 내에서 정렬에 대 한 흐름 방향을 지정 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-568">The main purpose of this method is to support attached property syntax for the <xref:System.Windows.FrameworkElement.FlowDirection%2A> property, therefore allowing child elements of a provided <xref:System.Windows.FrameworkElement> to specify flow direction for the arrangement within their parent element.</span></span> <span data-ttu-id="709be-569">현재 값을 검색할 <xref:System.Windows.FrameworkElement>를 직접 사용 하 여 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 접근자 <xref:System.Windows.FrameworkElement.FlowDirection%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-569">To get the value on the current <xref:System.Windows.FrameworkElement>, use the direct [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] accessor <xref:System.Windows.FrameworkElement.FlowDirection%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.FlowDirection" />
      </Docs>
    </Member>
    <Member MemberName="GetLayoutClip">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.Geometry GetLayoutClip(valuetype System.Windows.Size layoutSlotSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetLayoutClip (layoutSlotSize As Size) As Geometry" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::Geometry ^ GetLayoutClip(System::Windows::Size layoutSlotSize);" />
      <MemberSignature Language="F#" Value="override this.GetLayoutClip : System.Windows.Size -&gt; System.Windows.Media.Geometry" Usage="frameworkElement.GetLayoutClip layoutSlotSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutSlotSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="layoutSlotSize"><span data-ttu-id="709be-570">시각적 표시를 수행하는 요소 부분의 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-570">The size of the part of the element that does visual presentation.</span></span></param>
        <summary><span data-ttu-id="709be-571">클리핑 마스크의 기하 도형을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-571">Returns a geometry for a clipping mask.</span></span> <span data-ttu-id="709be-572">이 마스크는 레이아웃 시스템에서 사용 가능한 표시 공간보다 큰 요소를 정렬하려고 하면 적용됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-572">The mask applies if the layout system attempts to arrange an element that is larger than the available display space.</span></span></summary>
        <returns><span data-ttu-id="709be-573">클리핑 기하 도형입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-573">The clipping geometry.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-574">여백에서 차감 합니다 `layoutSlotSize` 레이아웃 시스템 동작의 일부로.</span><span class="sxs-lookup"><span data-stu-id="709be-574">Margins will be subtracted from the `layoutSlotSize` as part of layout system behavior.</span></span>  
  
 <span data-ttu-id="709be-575">반환 된 null 참조 클리핑은 발생을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="709be-575">A returned null reference indicates that no clipping will occur.</span></span> <span data-ttu-id="709be-576">기본 구현에서는 항상 반환 `null` 때 <xref:System.Windows.UIElement.ClipToBounds%2A> 는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-576">The default implementation always returns `null` when <xref:System.Windows.UIElement.ClipToBounds%2A> is `false`.</span></span> <span data-ttu-id="709be-577">이 메서드는 <xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=nameWithType>를 재정의합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-577">This method overrides <xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="709be-578"><xref:System.Windows.FrameworkElement> 구현을 사용 하 여 <xref:System.Windows.FrameworkElement.MaxHeight%2A> 및 <xref:System.Windows.FrameworkElement.MaxWidth%2A> 해당 계산에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-578">The <xref:System.Windows.FrameworkElement> implementation uses <xref:System.Windows.FrameworkElement.MaxHeight%2A> and <xref:System.Windows.FrameworkElement.MaxWidth%2A> in its calculations.</span></span> <span data-ttu-id="709be-579">여러 하위 클래스 <xref:System.Windows.FrameworkElement> 다시이 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-579">Several subclasses of <xref:System.Windows.FrameworkElement> override this method again.</span></span> <span data-ttu-id="709be-580"><xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=nameWithType>에서 반환을 항상 재정의 `null` 표시기 경우가 많기 때문에 의도적으로 일반적인 범위 외부에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-580"><xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=nameWithType>, overrides to always return `null` because adorners are often deliberately outside the ordinary bounds.</span></span> <span data-ttu-id="709be-581"><xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=nameWithType> 및 <xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=nameWithType> 반환 `null` 하는 경우 <xref:System.Windows.UIElement.ClipToBounds%2A> 는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-581"><xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=nameWithType> and <xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=nameWithType> return `null` if <xref:System.Windows.UIElement.ClipToBounds%2A> is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="709be-582">기본 구현에서는 항상 반환 <see langword="null" /> 때 <see cref="P:System.Windows.UIElement.ClipToBounds" /> 는 <see langword="false" />합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-582">The default implementation always returns <see langword="null" /> when <see cref="P:System.Windows.UIElement.ClipToBounds" /> is <see langword="false" />.</span></span> <span data-ttu-id="709be-583">재정의 된 관계 및 파생된 클래스 및 기본 클래스 대신 해당 레이아웃 논리의 용도 따라 예외가 있지만 일반적으로이 동작을 유지 하기 위해 예상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-583">Overrides are generally expected to preserve this behavior, although there are exceptions, depending on the relationship and purpose of the derived class and its layout logic as opposed to the base class.</span></span></para></block>
        <altmember cref="P:System.Windows.UIElement.Clip" />
        <altmember cref="P:System.Windows.UIElement.ClipToBounds" />
      </Docs>
    </Member>
    <Member MemberName="GetTemplateChild">
      <MemberSignature Language="C#" Value="protected internal System.Windows.DependencyObject GetTemplateChild (string childName);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance class System.Windows.DependencyObject GetTemplateChild(string childName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function GetTemplateChild (childName As String) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; System::Windows::DependencyObject ^ GetTemplateChild(System::String ^ childName);" />
      <MemberSignature Language="F#" Value="member this.GetTemplateChild : string -&gt; System.Windows.DependencyObject" Usage="frameworkElement.GetTemplateChild childName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="childName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="childName"><span data-ttu-id="709be-584">찾을 자식의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-584">Name of the child to find.</span></span></param>
        <summary><span data-ttu-id="709be-585">인스턴스화된 <see cref="T:System.Windows.Controls.ControlTemplate" />의 시각적 트리에서 명명된 요소를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-585">Returns the named element in the visual tree of an instantiated <see cref="T:System.Windows.Controls.ControlTemplate" />.</span></span></summary>
        <returns><span data-ttu-id="709be-586">요청한 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-586">The requested element.</span></span> <span data-ttu-id="709be-587">요청된 이름이 요소가 없으면 <see langword="null" />일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-587">May be <see langword="null" /> if no element of the requested name exists.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-588">템플릿 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 은 자체 포함 된 이름 범위에 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-588">Templates in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] have a self-contained namescope.</span></span> <span data-ttu-id="709be-589">템플릿을 다시 사용 되며 템플릿에 정의 된 이름이 없는 고유 하 게 남아 각 컨트롤의 여러 인스턴스는 해당 템플릿을 인스턴스화할 때 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-589">This is because templates are re-used, and any name defined in a template cannot remain unique when multiple instances of a control each instantiate its template.</span></span> <span data-ttu-id="709be-590">호출 된 <xref:System.Windows.FrameworkElement.GetTemplateChild%2A> 인스턴스화된 후 템플릿에서 제공 되는 개체에 대 한 참조를 반환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-590">Call the <xref:System.Windows.FrameworkElement.GetTemplateChild%2A> method to return references to objects that come from the template after it is instantiated.</span></span> <span data-ttu-id="709be-591">사용할 수 없습니다는 <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> 때문에 서식 파일에서 항목을 찾을 방법 <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> 범위 보다 일반적인에서 작동 하 고 간의 연결이 <xref:System.Windows.Controls.ControlTemplate> 클래스 자체 및 인스턴스화된 템플릿이 적용 되 면 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-591">You cannot use the <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> method to find items from templates because <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> acts in a more general scope, and there is no connection between the <xref:System.Windows.Controls.ControlTemplate> class itself and the instantiated template once it is applied.</span></span>  
  
 <span data-ttu-id="709be-592"><xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> 이 방법으로 동일한 기능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-592"><xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> supplies the same function as this method.</span></span> <span data-ttu-id="709be-593"><xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> 대신 공용 보호 되 고 사용 하 여 명명 된 항목에 찾고 요소 내에서 서식 파일에 액세스할 수 있는 올바른 이름-범위 고려 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-593"><xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> is public instead of protected, and it uses correct name-scoping considerations that allow it to access the template within an element and find named items within it.</span></span> <span data-ttu-id="709be-594">사용 하 여 <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> 해야 할 때 부모 컨트롤 외부에서 요소를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="709be-594">Use <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> when you need to get an element outside of its parent control.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkTemplate.FindName(System.String,System.Windows.FrameworkElement)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal override System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberSignature Language="F#" Value="override this.GetUIParentCore : unit -&gt; System.Windows.DependencyObject" Usage="frameworkElement.GetUIParentCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="709be-595">시각적 부모가 없는 경우 이 요소에 대한 대체 논리 부모를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-595">Returns an alternative logical parent for this element if there is no visual parent.</span></span></summary>
        <returns><span data-ttu-id="709be-596">이 메서드의 WPF 프레임워크 수준 구현에 시각적 부모가 아닌 연결이 있을 때마다 <see langword="null" /> 이외의 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-596">Returns something other than <see langword="null" /> whenever a WPF framework-level implementation of this method has a non-visual parent connection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-597">이 메서드는 <xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=nameWithType>를 재정의합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-597">This method overrides <xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="709be-598">기본값 <xref:System.Windows.FrameworkElement> 구현은 시작 하는 것과 동일한 결과 즉 예상된 단일 시각적 부모는 <xref:System.Windows.FrameworkElement.Parent%2A> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-598">The default <xref:System.Windows.FrameworkElement> implementation returns the expected single visual parent, which is the same result as getting the <xref:System.Windows.FrameworkElement.Parent%2A> value.</span></span> <span data-ttu-id="709be-599">파생된 클래스 구현을 대체 부모 관계를 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-599">Derived class implementations might return alternate parent relationships.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Parent" />
      </Docs>
    </Member>
    <Member MemberName="GetVisualChild">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.Visual GetVisualChild (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.Visual GetVisualChild(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetVisualChild (index As Integer) As Visual" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::Visual ^ GetVisualChild(int index);" />
      <MemberSignature Language="F#" Value="override this.GetVisualChild : int -&gt; System.Windows.Media.Visual" Usage="frameworkElement.GetVisualChild index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Visual</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="709be-600">컬렉션에서 요청된 자식 요소의 인덱스(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-600">The zero-based index of the requested child element in the collection.</span></span></param>
        <summary><span data-ttu-id="709be-601"><see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)" />를 재정의하며, 자식 요소 컬렉션에서 지정된 인덱스의 자식을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-601">Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)" />, and returns a child at the specified index from a collection of child elements.</span></span></summary>
        <returns><span data-ttu-id="709be-602">요청된 자식 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-602">The requested child element.</span></span> <span data-ttu-id="709be-603"><see langword="null" />을 반환하면 안 됩니다. 지정된 인덱스가 범위를 벗어난 경우 예외가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-603">This should not return <see langword="null" />; if the provided index is out of range, an exception is thrown.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-604">에 <xref:System.Windows.FrameworkElement> 구현만 유효한 인덱스는 0입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-604">In the <xref:System.Windows.FrameworkElement> implementation, the only valid index is zero.</span></span> <span data-ttu-id="709be-605">콘텐츠 모델에 <xref:System.Windows.FrameworkElement.GetVisualChild%2A> 0 개 이상의 자식 요소 컬렉션이 아닌를 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-605">The content model for <xref:System.Windows.FrameworkElement.GetVisualChild%2A> supports either zero or one child elements, not a collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="709be-606">다음 예제에서는 사용자 지정 표시기에서 선언 된 값을 사용 하는 방법을 보여 줍니다는 <xref:System.Windows.Media.VisualCollection> 여러 시각적 자식에 대 한 유지 관리 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-606">The following example shows how a custom adorner uses the values declared by a <xref:System.Windows.Media.VisualCollection> that it maintains for its multiple visual children.</span></span> <span data-ttu-id="709be-607">이러한 값의 재정의 통해 보고 됩니다 <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> 고 <xref:System.Windows.FrameworkElement.GetVisualChild%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-607">These values are reported through overrides of <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> and <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.</span></span>  
  
 [!code-csharp[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverridespre)]
 [!code-vb[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverridespre)]  
[!code-csharp[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverrides)]
[!code-vb[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverrides)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="709be-608">이 구현 시각적 자식 요소의 설명이 포함 된 컬렉션을 유지 하지 않는 요소에만 유효 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-608">This implementation is only valid for elements that do not maintain any more descriptive collection of visual child elements.</span></span> <span data-ttu-id="709be-609">이러한 컬렉션에 있는 모든 요소는이 메서드를 재정의 하 고 해당 요소에서 지원 되는 자식 요소 컬렉션에서 해당 인덱스에 인덱스를 매핑합니다 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-609">Any element that does have such a collection must override this method and map the index to an equivalent index in the child element collection that is supported by that element.</span></span> <span data-ttu-id="709be-610">범위는 0에서 인덱스 <see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /> (-1)는 유효한 요소를 반환 해야 다른 모든 인덱스는 범위를 벗어난 예외를 throw 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-610">An index in the range from zero to <see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /> (minus one) should return a valid element; any other index should throw an out-of-range exception.</span></span> <span data-ttu-id="709be-611">자식 컬렉션을에 지 및 재정의 된 요소 형식의 예로 <see cref="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" /> 둘 이상의 가능한 자식 반환 하려면 <see cref="T:System.Windows.Controls.Panel" />합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-611">An example of an element type that does support a child collection and overrides <see cref="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" /> to return more than one possible child is <see cref="T:System.Windows.Controls.Panel" />.</span></span>  
  
<span data-ttu-id="709be-612">기본 구현은 <see cref="T:System.Windows.FrameworkElement" /> visual 자식 노드가 한 개만 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-612">The default implementation in <see cref="T:System.Windows.FrameworkElement" /> presumes only one visual child.</span></span> <span data-ttu-id="709be-613">전달 된 모든 값 <paramref name="index" /> 아닌 0을 사용 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-613">Any value passed for <paramref name="index" /> other than zero causes an exception to be thrown.</span></span> <span data-ttu-id="709be-614">데코레이터, 표시기 또는 특수 한 렌더링을 사용 하 여 요소와 같은 몇 가지 공통 요소를 재정의 합니다 <see cref="T:System.Windows.FrameworkElement" /> 구현의 (중간 기본 클래스에서 구현).</span><span class="sxs-lookup"><span data-stu-id="709be-614">Several common elements, such as decorators, adorners, or elements with specialized rendering, override the <see cref="T:System.Windows.FrameworkElement" /> implementation (of the implementation from intermediate base classes).</span></span> <span data-ttu-id="709be-615">다른 컬렉션을 허용 하는 반면 일부 구현에서는 여전히 한 시각적 자식을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-615">Some implementations still enforce one visual child whereas others allow a collection.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public double Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Height" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Height" />
      <MemberSignature Language="VB.NET" Value="Public Property Height As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Height { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Height : double with get, set" Usage="System.Windows.FrameworkElement.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-616">제안된 요소 높이를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-616">Gets or sets the suggested height of the element.</span></span></summary>
        <value><span data-ttu-id="709be-617">요소의 높이([!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)])입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-617">The height of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span></span> <span data-ttu-id="709be-618">기본값은 <see cref="F:System.Double.NaN" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-618">The default value is <see cref="F:System.Double.NaN" />.</span></span> <span data-ttu-id="709be-619">이 값은 0.0보다 크거나 같아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-619">This value must be equal to or greater than 0.0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-620"><xref:System.Windows.FrameworkElement.Height%2A> 쓰기 가능한 세 가지 속성 중 하나인 <xref:System.Windows.FrameworkElement> 높이 정보를 지정 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-620"><xref:System.Windows.FrameworkElement.Height%2A> is one of three writable properties on <xref:System.Windows.FrameworkElement> that specify height information.</span></span> <span data-ttu-id="709be-621">다른 두 가지 <xref:System.Windows.FrameworkElement.MinHeight%2A> 고 <xref:System.Windows.FrameworkElement.MaxHeight%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-621">The other two are <xref:System.Windows.FrameworkElement.MinHeight%2A> and <xref:System.Windows.FrameworkElement.MaxHeight%2A>.</span></span> <span data-ttu-id="709be-622">간에 충돌이 발생 하는 경우 이러한 값을 실제 높이 결정에 대 한 애플리케이션의 순서는 첫 번째 <xref:System.Windows.FrameworkElement.MinHeight%2A> 다음을 적용할 수 해야 <xref:System.Windows.FrameworkElement.MaxHeight%2A>, 마지막으로, 범위 안에 있으면 <xref:System.Windows.FrameworkElement.Height%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-622">If there is a conflict between these values, the order of application for actual height determination is that first <xref:System.Windows.FrameworkElement.MinHeight%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxHeight%2A>, and finally, if it is within bounds, <xref:System.Windows.FrameworkElement.Height%2A>.</span></span>  
  
 <span data-ttu-id="709be-623">이 요소가 다른 요소 내에서 자식 요소 이면이 속성 값으로 설정한 실제로 제안 된 값입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-623">If this element is a child element within some other element, then setting this property to a value is really only a suggested value.</span></span> <span data-ttu-id="709be-624">레이아웃 시스템 뿐만 아니라 부모 요소의 특정 레이아웃 논리 값 입력으로 사용 된 바인딩이 아닌 레이아웃 과정입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-624">The layout system as well as the particular layout logic of the parent element will use the value as a nonbinding input during the layout process.</span></span> <span data-ttu-id="709be-625">실질적으로 <xref:System.Windows.FrameworkElement> 는 거의 항상 다른; 자식 요소가 설정 하는 경우에 합니다 <xref:System.Windows.FrameworkElement.Height%2A> 에서 <xref:System.Windows.Window>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-625">In practical terms, a <xref:System.Windows.FrameworkElement> is almost always the child element of something else; even when you set the <xref:System.Windows.FrameworkElement.Height%2A> on <xref:System.Windows.Window>.</span></span> <span data-ttu-id="709be-626">(에 대 한 <xref:System.Windows.Window>, 애플리케이션을 호스트 하는 값이 기본 애플리케이션 모델의 기본 렌더링 가정은 Hwnd를 만드는 하는 경우 사용 됩니다.)</span><span class="sxs-lookup"><span data-stu-id="709be-626">(For <xref:System.Windows.Window>, that value is used when the underlying application model establishes the basic rendering assumptions that create the Hwnd that hosts the application.)</span></span>  
  
 <span data-ttu-id="709be-627">또한 허용 가능한 <xref:System.Double> 값이이 속성 일 수도 있습니다 <xref:System.Double.NaN?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-627">In addition to acceptable <xref:System.Double> values, this property can also be <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span> <span data-ttu-id="709be-628">코드에서 자동 크기 조정 동작을 지정 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-628">This is how you specify auto sizing behavior in code.</span></span> <span data-ttu-id="709be-629">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 는 값을 설정 하면 문자열 "Auto" (대/소문자 구분) 자동 크기 조정 동작을 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-629">In [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] you set the value to the string "Auto" (case insensitive) to enable the auto sizing behavior.</span></span> <span data-ttu-id="709be-630">자동 크기 조정 동작 요소를 사용할 수 있는 높이 맞게 채워짐을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="709be-630">Auto sizing behavior implies that the element will fill the height available to it.</span></span> <span data-ttu-id="709be-631">그러나 특정 컨트롤 크기 조정 동작은 특히 다시 사용 하도록 설정 하지 않은 자동 사용 하지 않도록 설정 됩니다는 기본 테마 스타일을 통해 기본 값 제공 하는 자주 note 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-631">Note however that specific controls frequently supply default values through their default theme styles that will disable the auto sizing behavior unless it is specifically re-enabled.</span></span>  
  
 <span data-ttu-id="709be-632">이 속성의 반환 값에 설정 된 값과 항상 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-632">The return value of this property is always the same as any value that was set to it.</span></span> <span data-ttu-id="709be-633">반대로, 값은 <xref:System.Windows.FrameworkElement.ActualHeight%2A> 다를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-633">In contrast, the value of the <xref:System.Windows.FrameworkElement.ActualHeight%2A> may vary.</span></span> <span data-ttu-id="709be-634">이 발생할 수 있습니다 하거나 정적으로 몇 가지 이유로 권장 되는 크기를 거부 하는 레이아웃 또는 일시적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-634">This can happen either statically because the layout rejected the suggested size for some reason, or momentarily.</span></span> <span data-ttu-id="709be-635">속성 시스템의 집합을 기준으로 레이아웃 시스템 자체적으로 비동기적으로 작동 <xref:System.Windows.FrameworkElement.Height%2A> 한 특정 크기 조정 속성 변경 내용을 아직 처리 되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-635">The layout system itself works asynchronously relative to the property system's set of <xref:System.Windows.FrameworkElement.Height%2A> and may not have processed that particular sizing property change yet.</span></span>  
  
 <span data-ttu-id="709be-636">에 대 한 값 제한 합니다 <xref:System.Double> 값에 의해 적용 되는 <xref:System.Windows.ValidateValueCallback> 메커니즘입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-636">The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism.</span></span> <span data-ttu-id="709be-637">잘못 된 값을 설정 하려고 하면 런타임 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-637">If you attempt to set an invalid value, a run-time exception is thrown.</span></span>  
  
 <span data-ttu-id="709be-638">유효성 검사 외에도 비결 정적 상한 값에 바인딩된 <xref:System.Windows.FrameworkElement.Height%2A> 레이아웃 시스템에 적용 되는 (이 매우 큰 숫자로 보다 큰 <xref:System.Single.MaxValue?displayProperty=nameWithType> 하지만 미만의 <xref:System.Double.MaxValue?displayProperty=nameWithType>).</span><span class="sxs-lookup"><span data-stu-id="709be-638">In addition to the validation check, there is a nondeterministic upper value bound for <xref:System.Windows.FrameworkElement.Height%2A> that is enforced by the layout system (this is a very large number, larger than <xref:System.Single.MaxValue?displayProperty=nameWithType> but smaller than <xref:System.Double.MaxValue?displayProperty=nameWithType>).</span></span> <span data-ttu-id="709be-639">이 경계를 초과 하는 경우 요소는 렌더링 되지 않으며, 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-639">If you exceed this bound, the element will not render, and no exception is thrown.</span></span> <span data-ttu-id="709be-640">설정 하지 않으면 <xref:System.Windows.FrameworkElement.Height%2A> 비결 정적 상한 값이 초과 가능한 시각적 표시, 또는 사용자의 최대 크기 보다 훨씬 큰 값으로.</span><span class="sxs-lookup"><span data-stu-id="709be-640">Do not set <xref:System.Windows.FrameworkElement.Height%2A> to a value that is significantly larger than the maximum size of any possible visual display, or you may exceed this nondeterministic upper bound.</span></span>  
  
<a name="xamlAttributeUsage_Height"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="709be-641">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="709be-641">XAML Attribute Usage</span></span>  
  
```  
<object Height="double"/>  
- or -  
<object Height="qualifiedDouble"/>  
- or -  
<object Height="Auto"/>  
```  
  
<a name="xamlValues_Height"></a>   
## <a name="xaml-values"></a><span data-ttu-id="709be-642">XAML 값</span><span class="sxs-lookup"><span data-stu-id="709be-642">XAML Values</span></span>  
 <span data-ttu-id="709be-643">*double*</span><span class="sxs-lookup"><span data-stu-id="709be-643">*double*</span></span>  
 <xref:System.Double>  
  
 <span data-ttu-id="709be-644">문자열 표현 된 <xref:System.Double> 0.0 보다 크거나 같은 값입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-644">String representation of a <xref:System.Double> value equal to or greater than 0.0.</span></span> <span data-ttu-id="709be-645">상한 정보에 대한 설명을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="709be-645">See Remarks for upper bound information.</span></span> <span data-ttu-id="709be-646">이 값으로 해석 되는 [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] 측정 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-646">This value is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] measurement.</span></span> <span data-ttu-id="709be-647">문자열 소수점이 하를 명시적으로 포함 되지 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-647">Strings need not explicitly include decimal points.</span></span> <span data-ttu-id="709be-648">예를 들어 값 `1` 허용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-648">For instance a value of `1` is acceptable.</span></span>  
  
 <span data-ttu-id="709be-649">*qualifiedDouble*</span><span class="sxs-lookup"><span data-stu-id="709be-649">*qualifiedDouble*</span></span>  
 <span data-ttu-id="709be-650">A *이중* 단위 선언 문자열 중 하나에서 다음 위에서 설명한 대로 값: `px`, `in`, `cm`, `pt`합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-650">A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.</span></span>  
  
 <span data-ttu-id="709be-651">`px` (기본값) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span><span class="sxs-lookup"><span data-stu-id="709be-651">`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span></span>  
  
 <span data-ttu-id="709be-652">`in` 인치; 1에서 96px = =</span><span class="sxs-lookup"><span data-stu-id="709be-652">`in` is inches; 1in==96px</span></span>  
  
 <span data-ttu-id="709be-653">`cm` 센티미터; 1cm==(96/2.54) px</span><span class="sxs-lookup"><span data-stu-id="709be-653">`cm` is centimeters; 1cm==(96/2.54) px</span></span>  
  
 <span data-ttu-id="709be-654">`pt` 포인트; 1pt==(96/72) px</span><span class="sxs-lookup"><span data-stu-id="709be-654">`pt` is points; 1pt==(96/72) px</span></span>  
  
 <span data-ttu-id="709be-655">**자동**</span><span class="sxs-lookup"><span data-stu-id="709be-655">**Auto**</span></span>  
 <span data-ttu-id="709be-656">자동 크기 조정 동작을 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-656">Enables autosizing behavior.</span></span> <span data-ttu-id="709be-657">설명 부분을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="709be-657">See Remarks.</span></span>  
  
<a name="dependencyPropertyInfo_Height"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="709be-658">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="709be-658">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-659">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-659">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.HeightProperty>|  
|<span data-ttu-id="709be-660">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="709be-660">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.ActualHeight" />
      </Docs>
    </Member>
    <Member MemberName="HeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.HeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable HeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.HeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-661"><see cref="P:System.Windows.FrameworkElement.Height" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-661">Identifies the <see cref="P:System.Windows.FrameworkElement.Height" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.HorizontalAlignment HorizontalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.HorizontalAlignment HorizontalAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.HorizontalAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property HorizontalAlignment As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::HorizontalAlignment HorizontalAlignment { System::Windows::HorizontalAlignment get(); void set(System::Windows::HorizontalAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.HorizontalAlignment : System.Windows.HorizontalAlignment with get, set" Usage="System.Windows.FrameworkElement.HorizontalAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-662">패널 또는 항목 컨트롤 같은 부모 요소에 구성되어 있을 경우 이 요소에 적용되는 가로 맞춤 특징을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-662">Gets or sets the horizontal alignment characteristics applied to this element when it is composed within a parent element, such as a panel or items control.</span></span></summary>
        <value><span data-ttu-id="709be-663">열거형 값인 가로 맞춤 설정입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-663">A horizontal alignment setting, as a value of the enumeration.</span></span> <span data-ttu-id="709be-664">기본값은 <see cref="F:System.Windows.HorizontalAlignment.Stretch" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-664">The default is <see cref="F:System.Windows.HorizontalAlignment.Stretch" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-665">때 <xref:System.Windows.FrameworkElement.Height%2A> 하 고 <xref:System.Windows.FrameworkElement.Width%2A> 속성 요소에 명시적으로 설정 하 고 이러한 측정 레이아웃 중 더 높은 우선 일반적인 설정의 효과 취소 합니다 <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> 하려면 <xref:System.Windows.HorizontalAlignment.Stretch>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-665">When <xref:System.Windows.FrameworkElement.Height%2A> and <xref:System.Windows.FrameworkElement.Width%2A> properties are explicitly set on an element, these measurements take higher precedent during layout and will cancel the typical effects of setting <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> to <xref:System.Windows.HorizontalAlignment.Stretch>.</span></span>  
  
 <span data-ttu-id="709be-666"><xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> 가 [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] 란 실제로 종속성 속성에 대 한 속성 접근자입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-666"><xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> is the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] property accessor for what is in reality a dependency property.</span></span> <span data-ttu-id="709be-667">이 특정 종속성 속성에는 상당히 자주 해당 "기본값"이 서브클래싱된 요소, 특히 컨트롤에서에서 서로 다르게 설정 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-667">This particular dependency property quite frequently has its apparent "default" value set differently in subclassed elements, particularly controls.</span></span> <span data-ttu-id="709be-668">일반적으로이 두 가지 방법 중 하나에서 발생 합니다: 종속성 속성은 특정 서브 클래스를 하지만, 해당 기본값을 설정 하는 것에 대 한 다른 메타 데이터에 다시 등록 또는 해당 종속성 속성 값을 다르게 설정 하는 기본 스타일이 적용 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-668">This generally occurs in one of two ways: the dependency property is re-registered to a particular subclass, but with different metadata for setting its defaults; or there is a default style being applied that sets that dependency property value differently.</span></span> <span data-ttu-id="709be-669">예를 들어, 명백한 "기본값인" <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> 에 대 한는 <xref:System.Windows.Controls.Label> 컨트롤이 <xref:System.Windows.HorizontalAlignment.Left>경우에 <xref:System.Windows.Controls.Label> 상속 <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> 에서 직접 <xref:System.Windows.FrameworkElement>입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-669">For example, the apparent "default" of <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> for a <xref:System.Windows.Controls.Label> control will be <xref:System.Windows.HorizontalAlignment.Left>, even though <xref:System.Windows.Controls.Label> inherits <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> direct from <xref:System.Windows.FrameworkElement>.</span></span> <span data-ttu-id="709be-670">기본 스타일 내에서 다시 설정 된 값 때문에 이것이 <xref:System.Windows.Controls.Label>, 스타일의 컨트롤 템플릿 내에서.</span><span class="sxs-lookup"><span data-stu-id="709be-670">This is because that value was reset within the default style of <xref:System.Windows.Controls.Label>, within the style's control template.</span></span>  
  
 <span data-ttu-id="709be-671"><xref:System.Windows.Controls.Canvas> 사용 하지 않습니다 <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> 때문에 레이아웃을 구성할 때 <xref:System.Windows.Controls.Canvas> 절대 위치 설정을 기반으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-671"><xref:System.Windows.Controls.Canvas> does not use <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> when composing layout, because <xref:System.Windows.Controls.Canvas> is based on absolute positioning.</span></span>  
  
 <span data-ttu-id="709be-672">상속 되는 경우 <xref:System.Windows.Controls.Label> 또는 파생 클래스 <xref:System.Windows.Controls.Label> 되도록이 종속성 속성의 기본값을 재정의 <xref:System.Windows.HorizontalAlignment.Left>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-672">When inherited by <xref:System.Windows.Controls.Label> or derived classes, <xref:System.Windows.Controls.Label> redefines the default value of this dependency property to be <xref:System.Windows.HorizontalAlignment.Left>.</span></span>  
  
<a name="dependencyPropertyInfo_HorizontalAlignment"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="709be-673">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="709be-673">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-674">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-674">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.HorizontalAlignmentProperty>|  
|<span data-ttu-id="709be-675">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="709be-675">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlignmentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HorizontalAlignmentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HorizontalAlignmentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.HorizontalAlignmentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HorizontalAlignmentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HorizontalAlignmentProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable HorizontalAlignmentProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.HorizontalAlignmentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-676"><see cref="P:System.Windows.FrameworkElement.HorizontalAlignment" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-676">Identifies the <see cref="P:System.Windows.FrameworkElement.HorizontalAlignment" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InheritanceBehavior">
      <MemberSignature Language="C#" Value="protected internal System.Windows.InheritanceBehavior InheritanceBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.InheritanceBehavior InheritanceBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.InheritanceBehavior" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property InheritanceBehavior As InheritanceBehavior" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Windows::InheritanceBehavior InheritanceBehavior { System::Windows::InheritanceBehavior get(); void set(System::Windows::InheritanceBehavior value); };" />
      <MemberSignature Language="F#" Value="member this.InheritanceBehavior : System.Windows.InheritanceBehavior with get, set" Usage="System.Windows.FrameworkElement.InheritanceBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.InheritanceBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-677">속성 값 상속, 리소스 키 조회 및 RelativeSource FindAncestor 조회를 위한 범위 제한을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-677">Gets or sets the scope limits for property value inheritance, resource key lookup, and RelativeSource FindAncestor lookup.</span></span></summary>
        <value><span data-ttu-id="709be-678">열거형 값입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-678">A value of the enumeration.</span></span> <span data-ttu-id="709be-679">기본값은 <see cref="F:System.Windows.InheritanceBehavior.Default" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-679">The default is <see cref="F:System.Windows.InheritanceBehavior.Default" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-680">요소에 특정 경계 집합 트리 <xref:System.Windows.FrameworkElement.InheritanceBehavior%2A> 의도적으로 애플리케이션 리소스를 확인 하거나 현재 요소를 쿼리에서 RelativeSource FindAncestor 조회를 방지 하기 위해 force 리소스 조회에 상속 동작의 범위를 제한 하려면 또는 더 이상입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-680">Certain boundaries in the element tree set <xref:System.Windows.FrameworkElement.InheritanceBehavior%2A> to deliberately limit the scope of inheritance behavior, to a force resource lookup to check the application resources, or to prevent a RelativeSource FindAncestor lookup from querying the current element or any further.</span></span> <span data-ttu-id="709be-681">RelativeSource FindAncestor 조회 바인딩을 사용 하는 경우 발생을 <xref:System.Windows.Data.RelativeSource> 있는 해당 <xref:System.Windows.Data.RelativeSource.Mode%2A> 속성이로 설정 된 <xref:System.Windows.Data.RelativeSourceMode.FindAncestor?displayProperty=nameWithType> 값.</span><span class="sxs-lookup"><span data-stu-id="709be-681">RelativeSource FindAncestor lookup occurs when a binding uses a <xref:System.Windows.Data.RelativeSource> that has its <xref:System.Windows.Data.RelativeSource.Mode%2A> property set to the <xref:System.Windows.Data.RelativeSourceMode.FindAncestor?displayProperty=nameWithType> value.</span></span>  
  
 <span data-ttu-id="709be-682">이 속성을 설정 하려면 파생된 클래스를 사용 하도록 하려는 경우 이렇게 해야 정적 생성자 내에서 또는 다른 초기화 루틴입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-682">If you want your derived class to set this property, you should do so within the static constructor or in other initialization routines.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.Frame" />
      </Docs>
    </Member>
    <Member MemberName="Initialized">
      <MemberSignature Language="C#" Value="public event EventHandler Initialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Initialized" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Initialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Initialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Initialized;" />
      <MemberSignature Language="F#" Value="member this.Initialized : EventHandler " Usage="member this.Initialized : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-683">이 <see cref="T:System.Windows.FrameworkElement" />가 초기화될 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-683">Occurs when this <see cref="T:System.Windows.FrameworkElement" /> is initialized.</span></span> <span data-ttu-id="709be-684">이 이벤트는 <see cref="P:System.Windows.FrameworkElement.IsInitialized" /> 속성의 값이 <see langword="false" />(정의되지 않음)에서 <see langword="true" />로 변경되는 경우와 일치합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-684">This event coincides with cases where the value of the <see cref="P:System.Windows.FrameworkElement.IsInitialized" /> property changes from <see langword="false" /> (or undefined) to <see langword="true" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-685">이 이벤트 됩니다 될 때마다 발생 합니다 <xref:System.Windows.FrameworkElement.EndInit%2A> 또는 <xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A> 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-685">This event will be raised whenever the <xref:System.Windows.FrameworkElement.EndInit%2A> or <xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A> methods are called.</span></span> <span data-ttu-id="709be-686">두 방법 중 하나에 대 한 호출 또는 애플리케이션 코드에서 나올 수는 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 프로세서 동작 때를 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 페이지를 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-686">Calls to either method could have come from application code, or through the [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] processor behavior when a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] page is processed.</span></span>  
  
 <span data-ttu-id="709be-687">처리 하도록 선택 했는지 여부 <xref:System.Windows.FrameworkElement.Loaded> 또는 <xref:System.Windows.FrameworkElement.Initialized> 요구 사항에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="709be-687">Whether you choose to handle <xref:System.Windows.FrameworkElement.Loaded> or <xref:System.Windows.FrameworkElement.Initialized> depends on your requirements.</span></span> <span data-ttu-id="709be-688">요소 속성을 읽이 필요가 없습니다, 하는 경우 속성을 다시 설정 하려고 하 고 모든 레이아웃 정보가 필요 하지 않은 <xref:System.Windows.FrameworkElement.Initialized> 더 나은 이벤트 동작을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-688">If you do not need to read element properties, intend to reset properties, and do not need any layout information, <xref:System.Windows.FrameworkElement.Initialized> might be the better event to act upon.</span></span> <span data-ttu-id="709be-689">가능 요소의 모든 속성이 필요 하 고 레이아웃을 다시 설정할 수 있는 속성을 설정 하는 경우 <xref:System.Windows.FrameworkElement.Loaded> 더 나은 이벤트 동작을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-689">If you need all properties of the element to be available, and you will be setting properties that are likely to reset the layout, <xref:System.Windows.FrameworkElement.Loaded> might be the better event to act upon.</span></span> <span data-ttu-id="709be-690">처리기에 필요한 새로운 레이아웃 전달을는 레이아웃 시스템에서 해석 되는 모든 속성이 다시 설정 하는 경우 재입력 주의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-690">Be careful of reentrancy if your handler resets any properties that are interpreted by the layout system to mean that a new layout pass is required.</span></span> <span data-ttu-id="709be-691">(확인 해야 하는 <xref:System.Windows.FrameworkPropertyMetadata> 속성에는 새 레이아웃을 요구할 수의 확실 하지 않은 경우에 속성 값 변경 된 경우에 전달 합니다.)</span><span class="sxs-lookup"><span data-stu-id="709be-691">(You might need to check the <xref:System.Windows.FrameworkPropertyMetadata> values on the property if you are unsure of which properties can require a new layout pass if they are changed.)</span></span>  
  
 <span data-ttu-id="709be-692">개체에 대 한 이벤트 시퀀스에 대 한 자세한 내용은 <xref:System.Windows.FrameworkElement>에 여러 개의 관련 애플리케이션 및 요소 클래스를 참조 하 고 [개체 수명 이벤트](~/docs/framework/wpf/advanced/object-lifetime-events.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-692">For more information about the sequence of object events for a <xref:System.Windows.FrameworkElement>, and also for several related application and element classes, see [Object Lifetime Events](~/docs/framework/wpf/advanced/object-lifetime-events.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="InputScope">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputScope InputScope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputScope InputScope" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.InputScope" />
      <MemberSignature Language="VB.NET" Value="Public Property InputScope As InputScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputScope ^ InputScope { System::Windows::Input::InputScope ^ get(); void set(System::Windows::Input::InputScope ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InputScope : System.Windows.Input.InputScope with get, set" Usage="System.Windows.FrameworkElement.InputScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-693">이 <see cref="T:System.Windows.FrameworkElement" />에서 사용되는 입력에 대한 컨텍스트를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-693">Gets or sets the context for input used by this <see cref="T:System.Windows.FrameworkElement" />.</span></span></summary>
        <value><span data-ttu-id="709be-694">대체 입력 메서드에서 입력이 해석되는 방법을 수정하는 입력 범위입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-694">The input scope, which modifies how input from alternative input methods is interpreted.</span></span> <span data-ttu-id="709be-695">기본값은 <see langword="null" />(명령의 기본 처리 결과)입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-695">The default value is <see langword="null" /> (which results in a default handling of commands).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-696">속성 값이 종속성 속성을 상속 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-696">This dependency property inherits property values.</span></span> <span data-ttu-id="709be-697">자식 요소에 대 한 다른 값이 없는 경우 <xref:System.Windows.FrameworkElement.InputScope%2A> 속성 시스템에는 값을 설정 하는 다음 지역 값 또는 스타일을 통해 설정 된 <xref:System.Windows.FrameworkElement.InputScope%2A> 이 값이 할당 된 가장 가까운 상위 요소의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-697">If there are child elements without other values for <xref:System.Windows.FrameworkElement.InputScope%2A> established through local values or styles, then the property system will set the value to be the <xref:System.Windows.FrameworkElement.InputScope%2A> value of the nearest ancestor element with this value assigned.</span></span>  
  
 <span data-ttu-id="709be-698">하지만 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 구문 사용은 나열 되 고 구문적으로,이 속성 설정 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 흔하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-698">Although a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax usage is listed and is syntactically allowed, setting this property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] is not common.</span></span>  
  
<a name="dependencyPropertyInfo_InputScope"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="709be-699">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="709be-699">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-700">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-700">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.InputScopeProperty>|  
|<span data-ttu-id="709be-701">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="709be-701">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.InputScope" />
        <altmember cref="T:System.Windows.IInputElement" />
      </Docs>
    </Member>
    <Member MemberName="InputScopeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty InputScopeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty InputScopeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.InputScopeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InputScopeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ InputScopeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable InputScopeProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.InputScopeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-702"><see cref="P:System.Windows.FrameworkElement.InputScope" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-702">Identifies the <see cref="P:System.Windows.FrameworkElement.InputScope" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitialized">
      <MemberSignature Language="C#" Value="public bool IsInitialized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitialized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.IsInitialized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitialized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitialized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInitialized : bool" Usage="System.Windows.FrameworkElement.IsInitialized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-703">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 프로세서에서 처리하는 동안 또는 해당 <see cref="M:System.Windows.FrameworkElement.EndInit" /> 메서드를 명시적으로 호출하여 이 요소가 초기화되었는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="709be-703">Gets a value that indicates whether this element has been initialized, either during processing by a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processor, or by explicitly having its <see cref="M:System.Windows.FrameworkElement.EndInit" /> method called.</span></span></summary>
        <value><span data-ttu-id="709be-704">요소가 앞서 언급한 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 처리 또는 메서드 호출마다 초기화되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-704"><see langword="true" /> if the element is initialized per the aforementioned [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processing or method calls; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-705">이 속성 수도 `true` 경우이 요소에 옮겨졌습니다 논리 트리 내에서 새 부모 요소에 있고 따라서 요소가 다시 로드 되도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-705">This property may also be `true` if this element has been moved within the logical tree such that it has a new parent element, and therefore becomes reloaded again.</span></span>  
  
 <span data-ttu-id="709be-706">이 속성은 또한 사용 중인 경우에 유용 <xref:System.Windows.FrameworkElement.BeginInit%2A> 고 <xref:System.Windows.FrameworkElement.EndInit%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-706">This property is useful if you also are using <xref:System.Windows.FrameworkElement.BeginInit%2A> and <xref:System.Windows.FrameworkElement.EndInit%2A>.</span></span> <span data-ttu-id="709be-707">로드 하는 논리 트리의 요소를 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 프로세서 초기화할 보장 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-707">Elements in the logical tree that is loaded by a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processor are assured to be initialized.</span></span> <span data-ttu-id="709be-708">논리 트리에 없는 요소 초기화 되 면 <xref:System.Windows.FrameworkElement.EndInit%2A> 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-708">Elements not in the logical tree are initialized when <xref:System.Windows.FrameworkElement.EndInit%2A> is called.</span></span> <span data-ttu-id="709be-709">모든 특수 처리 없을 경우에서 <xref:System.Windows.FrameworkElement.BeginInit%2A> 및 <xref:System.Windows.FrameworkElement.EndInit%2A>,이 생성자는 초기화 된 결과 반환 하는 즉시 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-709">In absence of any specific handling of <xref:System.Windows.FrameworkElement.BeginInit%2A> and <xref:System.Windows.FrameworkElement.EndInit%2A>, this will happen as soon as the constructor returns the initialized result.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLoaded">
      <MemberSignature Language="C#" Value="public bool IsLoaded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoaded" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.IsLoaded" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLoaded As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLoaded { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLoaded : bool" Usage="System.Windows.FrameworkElement.IsLoaded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-710">표시를 위해 이 요소를 로드했는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="709be-710">Gets a value that indicates whether this element has been loaded for presentation.</span></span></summary>
        <value><span data-ttu-id="709be-711">현재 요소가 요소 트리에 연결되어 있으면 <see langword="true" />이고, 요소가 로드된 요소 트리에 연결되지 않았으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-711"><see langword="true" /> if the current element is attached to an element tree; <see langword="false" /> if the element has never been attached to a loaded element tree.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-712">새로 생성 된 <xref:System.Windows.FrameworkElement>,이 속성이 시작 `false`를 그대로 유지 됩니다 `true` 로 설정 된 후 `true`요소는 이후에 코드에서 연결 된 논리 트리에서 제거 되는 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-712">From a newly constructed <xref:System.Windows.FrameworkElement>, this property starts off `false`, and remains `true` after it is set to `true`, even if the element is subsequently removed from a connected logical tree by code.</span></span> <span data-ttu-id="709be-713">`true` 요소 프레젠테이션 엔진에 로드 될 때 상태는 일반 프레젠테이션 논리에 의해 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-713">`true` state is set by the general presentation logic when elements are loaded into the presentation engine.</span></span>  
  
 <span data-ttu-id="709be-714">일반적으로 로드 된 요소는 렌더링 전부는 아니지만 <xref:System.Windows.FrameworkElement> 파생된 클래스에는 프레젠테이션 및와 같은 다른 속성 <xref:System.Windows.UIElement.Visibility%2A> 프레젠테이션에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-714">Typically, loaded elements are rendered, but not all <xref:System.Windows.FrameworkElement> derived classes have a presentation, and other properties such as <xref:System.Windows.UIElement.Visibility%2A> can influence presentation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="709be-715">다음 예제에서는 두 명의 처리기를 구현: 처리 하는 하나는 <xref:System.Windows.FrameworkElement.Loaded> 이므로 페이지 루트 요소를 로드 이벤트의 의미 이기 때문에 특정 루트 요소의 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-715">The following example implements two handlers: one is handling the <xref:System.Windows.FrameworkElement.Loaded> event of the root element, so it is certain that the page root element is loaded because that is the significance of the event.</span></span> <span data-ttu-id="709be-716">사용자 정의 컨트롤을 호출 하는 다른 처리기 후크된 <xref:System.Windows.FrameworkElement.IsLoaded%2A> 보증할 루트 요소에 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-716">The other handler is hooked to a user control, and calls <xref:System.Windows.FrameworkElement.IsLoaded%2A> to assure that the root element is loaded completely.</span></span> <span data-ttu-id="709be-717">처리기 모두 자식 요소를 새 데이터로 채울 (표시 되지 않음) 동일한 함수를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-717">Both handlers call the same function (not shown) that will populate child elements with fresh data.</span></span>  
  
 [!code-csharp[GroupBoxExample#FEIsLoaded](~/samples/snippets/csharp/VS_Snippets_Wpf/GroupBoxExample/CSharp/Page1.xaml.cs#feisloaded)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public System.Windows.Markup.XmlLanguage Language { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Markup.XmlLanguage Language" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Language" />
      <MemberSignature Language="VB.NET" Value="Public Property Language As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Markup::XmlLanguage ^ Language { System::Windows::Markup::XmlLanguage ^ get(); void set(System::Windows::Markup::XmlLanguage ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Language : System.Windows.Markup.XmlLanguage with get, set" Usage="System.Windows.FrameworkElement.Language" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-718">요소에 적용되는 지역화/세계화 언어 정보를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-718">Gets or sets localization/globalization language information that applies to an element.</span></span></summary>
        <value><span data-ttu-id="709be-719">이 요소에 대한 언어 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-719">The language information for this element.</span></span> <span data-ttu-id="709be-720">기본값은 해당 <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> 값이 문자열 "en-US"로 설정된 <see cref="T:System.Windows.Markup.XmlLanguage" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-720">The default value is an <see cref="T:System.Windows.Markup.XmlLanguage" /> with its <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> value set to the string "en-US".</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-721">RFC 3066 표준을 수행 하는 문자열 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-721">The string formats follow the RFC 3066 standard.</span></span> <span data-ttu-id="709be-722">예를 들어, 미국 영어는 "EN-US"입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-722">For example, U.S. English is "en-US".</span></span> <span data-ttu-id="709be-723">값 및 형식에 대 한 자세한 내용은 참조 하세요. <xref:System.Windows.Markup.XmlLanguage>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-723">For more information on the values and format, see <xref:System.Windows.Markup.XmlLanguage>.</span></span>  
  
 <span data-ttu-id="709be-724">속성 값이 종속성 속성을 상속 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-724">This dependency property inherits property values.</span></span> <span data-ttu-id="709be-725">자식 요소에 대 한 다른 값이 없는 경우 <xref:System.Windows.FrameworkElement.Language%2A> 를 통해 로컬 값 또는 스타일 설정 속성 시스템은 값을 설정할 수는 <xref:System.Windows.FrameworkElement.Language%2A> 이 값이 할당 된 가장 가까운 상위 요소의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-725">If there are child elements without other values for <xref:System.Windows.FrameworkElement.Language%2A> established through local values or styles, the property system will set the value to be the <xref:System.Windows.FrameworkElement.Language%2A> value of the nearest ancestor element with this value assigned.</span></span>  
  
 [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] <span data-ttu-id="709be-726">일반적인 의미를 정의 합니다 `xml:lang` 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-726">defines the general meaning of the `xml:lang` attribute.</span></span> <span data-ttu-id="709be-727"><xref:System.Windows.FrameworkElement.Language%2A> 기본적으로 종속성 속성으로이 특성의 의미를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-727"><xref:System.Windows.FrameworkElement.Language%2A> essentially exposes the meaning of this attribute as a dependency property.</span></span> <span data-ttu-id="709be-728"><xref:System.Windows.FrameworkElement.Language%2A> 프로그래밍 방식으로 조정할 수 있습니다 하 고 대응 하는 방식으로 속성 시스템 값 상속에 참여할 수 있습니다 하는 방법을 `xml:lang` 특성의 자식 요소 범위를 상속할 수 [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-728"><xref:System.Windows.FrameworkElement.Language%2A> can be adjusted programmatically, and can participate in property system value inheritance in a way that parallels how the `xml:lang` attribute can inherit to child element scope in [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)].</span></span> <span data-ttu-id="709be-729">설정 하는 경우 <xref:System.Windows.FrameworkElement.Language%2A>, 해당 값이 적용 됩니다는 `xml:lang` 이전 값을 덮어씁니다.</span><span class="sxs-lookup"><span data-stu-id="709be-729">If you set <xref:System.Windows.FrameworkElement.Language%2A>, that value becomes the `xml:lang` and overwrites any previous value.</span></span> <span data-ttu-id="709be-730">자세한 내용은 [xml: lang XAML 처리](~/docs/framework/xaml-services/xml-lang-handling-in-xaml.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-730">For more information, see [xml:lang Handling in XAML](~/docs/framework/xaml-services/xml-lang-handling-in-xaml.md).</span></span>  
  
<a name="dependencyPropertyInfo_CultureInfo"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="709be-731">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="709be-731">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-732">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-732">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.LanguageProperty>|  
|<span data-ttu-id="709be-733">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="709be-733">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LanguageProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LanguageProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LanguageProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LanguageProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LanguageProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LanguageProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable LanguageProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.LanguageProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-734"><see cref="P:System.Windows.FrameworkElement.Language" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-734">Identifies the <see cref="P:System.Windows.FrameworkElement.Language" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutTransform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Transform LayoutTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Transform LayoutTransform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.LayoutTransform" />
      <MemberSignature Language="VB.NET" Value="Public Property LayoutTransform As Transform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Transform ^ LayoutTransform { System::Windows::Media::Transform ^ get(); void set(System::Windows::Media::Transform ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LayoutTransform : System.Windows.Media.Transform with get, set" Usage="System.Windows.FrameworkElement.LayoutTransform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Transform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-735">레이아웃을 수행할 때 이 요소에 적용해야 하는 그래픽 변환을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-735">Gets or sets a graphics transformation that should apply to this element when  layout is performed.</span></span></summary>
        <value><span data-ttu-id="709be-736">이 요소가 사용해야 하는 변환입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-736">The transform this element should use.</span></span> <span data-ttu-id="709be-737">기본값은 <see cref="P:System.Windows.Media.Transform.Identity" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-737">The default is <see cref="P:System.Windows.Media.Transform.Identity" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-738">와 달리 <xref:System.Windows.UIElement.RenderTransform%2A>, <xref:System.Windows.FrameworkElement.LayoutTransform%2A> 레이아웃의 결과는 영향이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-738">In contrast to <xref:System.Windows.UIElement.RenderTransform%2A>, <xref:System.Windows.FrameworkElement.LayoutTransform%2A> will affect results of layout.</span></span>  
  
 <span data-ttu-id="709be-739">변환 설정 크기 조정 및 회전의 강력한 기능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-739">Setting a transform provides powerful capabilities of scaling and rotating.</span></span> <span data-ttu-id="709be-740">그러나 <xref:System.Windows.FrameworkElement.LayoutTransform%2A> 무시 <xref:System.Windows.Media.TranslateTransform> 작업 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-740">However, <xref:System.Windows.FrameworkElement.LayoutTransform%2A> ignores <xref:System.Windows.Media.TranslateTransform> operations.</span></span> <span data-ttu-id="709be-741">왜냐하면 자식 요소에 대 한 레이아웃 시스템 동작을 <xref:System.Windows.FrameworkElement> 레이아웃에 확장 또는 회전 요소의 위치와 부모 요소의 좌표 시스템에 있는 오프셋을 자동으로 수정 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-741">This is because the layout system behavior for child elements of a <xref:System.Windows.FrameworkElement> auto-corrects any offsets to the position of a scaled or rotated element into the layout and coordinate system of the parent element.</span></span>  
  
 <span data-ttu-id="709be-742"><xref:System.Windows.FrameworkElement.LayoutTransform%2A> 레이아웃 시스템 전체 패스를 필요 하지 않은 시나리오에서 호출 하면 애플리케이션 성능 저하 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-742"><xref:System.Windows.FrameworkElement.LayoutTransform%2A> can lead to poor application performance if you invoke it in a scenario that does not require a full pass by the layout system.</span></span> <span data-ttu-id="709be-743">적용 하는 경우를 <xref:System.Windows.FrameworkElement.LayoutTransform%2A> 에 <xref:System.Windows.Controls.Panel.Children%2A> 의 컬렉션을 <xref:System.Windows.Controls.Panel>레이아웃 시스템에 의해 새로운 단계가 트리거하는, 및 모든 화면 트리거되고 되어 다시 정렬 개체가.</span><span class="sxs-lookup"><span data-stu-id="709be-743">When you apply a <xref:System.Windows.FrameworkElement.LayoutTransform%2A> to the <xref:System.Windows.Controls.Panel.Children%2A> collection of the <xref:System.Windows.Controls.Panel>, it triggers a new pass by the layout system and forces all on-screen objects to be remeasured and rearranged.</span></span> <span data-ttu-id="709be-744">전체 애플리케이션을 업데이트 하는 경우 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)],이 기능은 수 있습니다 정확 하 게 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-744">If you are updating the complete application [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)], this functionality might be exactly what you need.</span></span> <span data-ttu-id="709be-745">그러나 전체 레이아웃 단계에 필요 하지 않은 경우 사용 하 여는 <xref:System.Windows.UIElement.RenderTransform%2A> 속성 레이아웃 시스템을 호출 하지 않습니다 하 고, 되므로 일반적으로이 시나리오에 더 적합 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-745">However, if you do not need a full layout pass, use the <xref:System.Windows.UIElement.RenderTransform%2A> property, which does not invoke the layout system, and therefore, is typically a better choice for this scenario.</span></span>  
  
 <span data-ttu-id="709be-746">예제 시나리오는 <xref:System.Windows.FrameworkElement.LayoutTransform%2A> 유용한 포함: 포커스를 편집 동작 등을 제공 (확대) 요소 크기를 조정 하는 가로에서 세로로 또는 반대로 메뉴 구성 요소 같은 요소를 회전 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-746">Example scenarios where <xref:System.Windows.FrameworkElement.LayoutTransform%2A> would be useful include: rotating elements such as menu components from horizontal to vertical or vice versa, scaling elements (zooming in) on focus, providing editing behavior, etc.</span></span>  
  
<a name="dependencyPropertyInfo_LayoutTransform"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="709be-747">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="709be-747">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-748">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-748">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.LayoutTransformProperty>|  
|<span data-ttu-id="709be-749">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="709be-749">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="709be-750">다음 예제에 적용 하는 방법을 보여 줍니다는 <xref:System.Windows.FrameworkElement.LayoutTransform%2A> 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-750">The following example shows how to apply a <xref:System.Windows.FrameworkElement.LayoutTransform%2A> to an element.</span></span> <span data-ttu-id="709be-751">이 예에서는 인스턴스를 만듭니다 <xref:System.Windows.Controls.Button> 부모 내에서 호스트 및 <xref:System.Windows.Controls.Grid>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-751">The example creates an instance of <xref:System.Windows.Controls.Button> and hosts it within a parent <xref:System.Windows.Controls.Grid>.</span></span> <span data-ttu-id="709be-752">또한 사용 하 여는 <xref:System.Windows.FrameworkElement.LayoutTransform%2A> 적용할 속성을 <xref:System.Windows.Media.RotateTransform> 에 <xref:System.Windows.Controls.Button>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-752">It also uses the <xref:System.Windows.FrameworkElement.LayoutTransform%2A> property to apply a <xref:System.Windows.Media.RotateTransform> to the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-cpp[LayoutTransform#1](~/samples/snippets/cpp/VS_Snippets_Wpf/LayoutTransform/CPP/LayoutTransform.cpp#1)]
 [!code-csharp[LayoutTransform#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LayoutTransform/CSharp/LayoutTransform.cs#1)]
 [!code-vb[LayoutTransform#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/LayoutTransform/VisualBasic/LayoutTransform.vb#1)]
 [!code-xaml[LayoutTransform#1](~/samples/snippets/xaml/VS_Snippets_Wpf/LayoutTransform/XAML/default.xaml#1)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=158252"><span data-ttu-id="709be-753">2 차원 변환 샘플</span><span class="sxs-lookup"><span data-stu-id="709be-753">2-D Transforms Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LayoutTransformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LayoutTransformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LayoutTransformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LayoutTransformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LayoutTransformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LayoutTransformProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable LayoutTransformProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.LayoutTransformProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-754"><see cref="P:System.Windows.FrameworkElement.LayoutTransform" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-754">Identifies the <see cref="P:System.Windows.FrameworkElement.LayoutTransform" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Loaded">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Loaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Loaded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Loaded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Loaded As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Loaded;" />
      <MemberSignature Language="F#" Value="member this.Loaded : System.Windows.RoutedEventHandler " Usage="member this.Loaded : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-755">요소를 배치하고 렌더링하여 상호 작용할 준비가 되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-755">Occurs when the element is laid out, rendered, and ready for interaction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-756"><xref:System.Windows.FrameworkElement.Loaded> 일반적으로 마지막 이벤트에서에서 발생 요소 초기화 시퀀스입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-756"><xref:System.Windows.FrameworkElement.Loaded> is usually the last event raised in an element initialization sequence.</span></span> <span data-ttu-id="709be-757">후에 항상 발생 됩니다 <xref:System.Windows.FrameworkElement.Initialized>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-757">It will always be raised after <xref:System.Windows.FrameworkElement.Initialized>.</span></span> <span data-ttu-id="709be-758">처리 하도록 선택 했는지 여부 <xref:System.Windows.FrameworkElement.Loaded> 또는 <xref:System.Windows.FrameworkElement.Initialized> 요구 사항에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="709be-758">Whether you choose to handle <xref:System.Windows.FrameworkElement.Loaded> or <xref:System.Windows.FrameworkElement.Initialized> depends on your requirements.</span></span> <span data-ttu-id="709be-759">요소 속성을 읽이 필요가 없습니다, 하는 경우 속성을 다시 설정 하려고 하 고 모든 레이아웃 정보가 필요 하지 않은 <xref:System.Windows.FrameworkElement.Initialized> 더 나은 이벤트 동작을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-759">If you do not need to read element properties, intend to reset properties, and do not need any layout information, <xref:System.Windows.FrameworkElement.Initialized> might be the better event to act upon.</span></span> <span data-ttu-id="709be-760">가능 요소의 모든 속성이 필요 하 고 레이아웃을 다시 설정할 수 있는 속성을 설정 하는 경우 <xref:System.Windows.FrameworkElement.Loaded> 더 나은 이벤트 동작을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-760">If you need all properties of the element to be available, and you will be setting properties that are likely to reset the layout, <xref:System.Windows.FrameworkElement.Loaded> might be the better event to act upon.</span></span> <span data-ttu-id="709be-761">처리기에 필요한 새로운 레이아웃 전달을는 레이아웃 시스템에서 해석 되는 모든 속성이 다시 설정 하는 경우 재입력 주의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-761">Be careful of reentrancy if your handler resets any properties that are interpreted by the layout system to mean that a new layout pass is required.</span></span> <span data-ttu-id="709be-762">(확인 해야 하는 <xref:System.Windows.FrameworkPropertyMetadata> 속성에는 새 레이아웃을 요구할 수의 확실 하지 않은 경우에 속성 값 변경 된 경우에 전달 합니다.)</span><span class="sxs-lookup"><span data-stu-id="709be-762">(You might need to check the <xref:System.Windows.FrameworkPropertyMetadata> values on the property if you are unsure of which properties can require a new layout pass if they are changed.)</span></span>  
  
 <span data-ttu-id="709be-763">개체에 대 한 이벤트 시퀀스에 대 한 자세한 내용은 <xref:System.Windows.FrameworkElement>에 여러 개의 관련 애플리케이션 및 요소 클래스를 참조 하 고 [개체 수명 이벤트](~/docs/framework/wpf/advanced/object-lifetime-events.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-763">For more information about the sequence of object events for a <xref:System.Windows.FrameworkElement>, and also for several related application and element classes, see [Object Lifetime Events](~/docs/framework/wpf/advanced/object-lifetime-events.md).</span></span>  
  
 <span data-ttu-id="709be-764">직접 라우트된 이벤트에 대 한 경로 따르지, 발생 하는 동일한 요소 내 에서만 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-764">Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</span></span> <span data-ttu-id="709be-765">라우트된 이벤트는 라우트된 이벤트 동작은 다른 지원지 않습니다 직접: 액세스할 수 있는 처리기 컬렉션을 지원 하며으로 사용할 수는 <xref:System.Windows.EventTrigger> 스타일에서입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-765">Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <xref:System.Windows.EventTrigger> in a style.</span></span>  
  
 <span data-ttu-id="709be-766"><xref:System.Windows.FrameworkElement.Loaded> 및 <xref:System.Windows.FrameworkElement.Unloaded> 시스템 사용자가 시작한 테마 변경으로 인해 컨트롤에서 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-766"><xref:System.Windows.FrameworkElement.Loaded> and <xref:System.Windows.FrameworkElement.Unloaded> might both be raised on controls as a result of user-initiated system theme changes.</span></span> <span data-ttu-id="709be-767">테마를 변경 하면 컨트롤 템플릿 및 차례로 언로드하고 다시 로드 하기 위해 전체 컨트롤이 포함 된 시각적 트리를 무효화 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-767">A theme change causes an invalidation of the control template and the contained visual tree, which in turn causes the entire control to unload and reload.</span></span> <span data-ttu-id="709be-768">따라서 <xref:System.Windows.FrameworkElement.Loaded> 만 페이지를 처음 로드할 때 페이지 탐색을 통해 되려면 가정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-768">Therefore <xref:System.Windows.FrameworkElement.Loaded> cannot be assumed to occur only when a page is first loaded through navigation to the page.</span></span>  
  
<a name="routedEventInfo_Loaded"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="709be-769">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="709be-769">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-770">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-770">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.LoadedEvent>|  
|<span data-ttu-id="709be-771">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="709be-771">Routing strategy</span></span>|<span data-ttu-id="709be-772">직접</span><span class="sxs-lookup"><span data-stu-id="709be-772">Direct</span></span>|  
|<span data-ttu-id="709be-773">대리자</span><span class="sxs-lookup"><span data-stu-id="709be-773">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      </Docs>
    </Member>
    <Member MemberName="LoadedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LoadedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LoadedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LoadedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LoadedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LoadedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LoadedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.LoadedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-774"><see cref="E:System.Windows.FrameworkElement.Loaded" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-774">Identifies the <see cref="E:System.Windows.FrameworkElement.Loaded" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-775">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-775">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="709be-776">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-776">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="709be-777">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-777">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="709be-778">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="709be-778">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="709be-779">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="709be-779">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected internal virtual System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.LogicalChildren" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property LogicalChildren As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property System::Collections::IEnumerator ^ LogicalChildren { System::Collections::IEnumerator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LogicalChildren : System.Collections.IEnumerator" Usage="System.Windows.FrameworkElement.LogicalChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-780">이 요소의 논리적 자식 요소에 대한 열거자를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="709be-780">Gets an enumerator for logical child elements of this element.</span></span></summary>
        <value><span data-ttu-id="709be-781">이 요소의 논리적 자식 요소에 대한 열거자입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-781">An enumerator for logical child elements of this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-782"><xref:System.Windows.FrameworkElement.LogicalChildren%2A> 자식 요소를 반복할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-782"><xref:System.Windows.FrameworkElement.LogicalChildren%2A> allows you to iterate over child elements.</span></span> <span data-ttu-id="709be-783">이 정의 된 전용된 컬렉션을 필요는 없지만 여전히 특히 둘 이상의 자식 요소가 포함 될 수 있는 요소에 대 한 유용한 <xref:System.Windows.FrameworkContentElement> 자식 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-783">This is useful for elements that may not have a defined, dedicated collection but still contain more than one child element, particularly <xref:System.Windows.FrameworkContentElement> child elements.</span></span>  
  
 <span data-ttu-id="709be-784">사용 하는 방법에 대 한 자세한 내용은 <xref:System.Windows.FrameworkElement.LogicalChildren%2A> 하 고 <xref:System.Windows.FrameworkElement.AddLogicalChild%2A>를 참조 하세요 [WPF의 트리](~/docs/framework/wpf/advanced/trees-in-wpf.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-784">For more information on how to use <xref:System.Windows.FrameworkElement.LogicalChildren%2A> and <xref:System.Windows.FrameworkElement.AddLogicalChild%2A>, see [Trees in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c5358e14-d24c-44c7-b5eb-6062a4fd981c"><span data-ttu-id="709be-785">x:Array 태그 확장명</span><span class="sxs-lookup"><span data-stu-id="709be-785">x:Array Markup Extension</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Margin">
      <MemberSignature Language="C#" Value="public System.Windows.Thickness Margin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Thickness Margin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Margin" />
      <MemberSignature Language="VB.NET" Value="Public Property Margin As Thickness" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Thickness Margin { System::Windows::Thickness get(); void set(System::Windows::Thickness value); };" />
      <MemberSignature Language="F#" Value="member this.Margin : System.Windows.Thickness with get, set" Usage="System.Windows.FrameworkElement.Margin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Thickness</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-786">요소의 바깥쪽 여백을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-786">Gets or sets the outer margin of an element.</span></span></summary>
        <value><span data-ttu-id="709be-787">요소에 대한 여백 값을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-787">Provides margin values for the element.</span></span> <span data-ttu-id="709be-788">기본값은 모든 속성이 0과 같은 <see cref="T:System.Windows.Thickness" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-788">The default value is a <see cref="T:System.Windows.Thickness" /> with all properties equal to 0 (zero).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-789">여백은이 요소와 레이아웃을 만드는 경우 인접 하는 다른 요소 사이의 간격을 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-789">The margin is the space between this element and other elements that will be adjacent when layout creates the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span> <span data-ttu-id="709be-790">공유 요소 (예: 다른 요소는 공통 부모 컨트롤의 컬렉션에 있는) 피어 요소 수 또는이 요소의 부모를 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-790">Shared elements might be peer elements (such as other elements in the collection of a common parent control), or might also be this element's parent.</span></span>  
  
 <span data-ttu-id="709be-791"><xref:System.Windows.FrameworkElement.Margin%2A> 으로 설정 됩니다는 <xref:System.Windows.Thickness> 구조 아니라 숫자로 여백을 비대칭으로 설정할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-791"><xref:System.Windows.FrameworkElement.Margin%2A> is set as a <xref:System.Windows.Thickness> structure rather than as a number so that the margin can be set asymmetrically.</span></span> <span data-ttu-id="709be-792">합니다 <xref:System.Windows.Thickness> 구조체 자체 비대칭 지정할 수 있도록 문자열 형식 변환을 지원 <xref:System.Windows.FrameworkElement.Margin%2A> 에서 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 특성도 구문.</span><span class="sxs-lookup"><span data-stu-id="709be-792">The <xref:System.Windows.Thickness> structure itself supports string type conversion so that you can specify an asymmetric <xref:System.Windows.FrameworkElement.Margin%2A> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute syntax also.</span></span>  
  
 <span data-ttu-id="709be-793">0이 아닌 여백은 요소 레이아웃의 바깥쪽에 공간 <xref:System.Windows.FrameworkElement.ActualWidth%2A> 고 <xref:System.Windows.FrameworkElement.ActualHeight%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-793">A non-zero margin applies space outside the element layout's <xref:System.Windows.FrameworkElement.ActualWidth%2A> and <xref:System.Windows.FrameworkElement.ActualHeight%2A>.</span></span>  
  
 <span data-ttu-id="709be-794">여백은 레이아웃; 형제 요소에 대 한 추가 예를 들어 인접 가장자리 30 여백을 모두 설정 하는 인접 요소 두 개는 60 사이 공백 것입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-794">Margins are additive for sibling elements in a layout; for example, two adjacent elements both with a margin of 30 set on the adjoining edge would have 60 units of space between them.</span></span>  
  
 <span data-ttu-id="709be-795">여백이 설정 되어 있는 요소는 일반적으로 지정 된 크기를 제한 하지 <xref:System.Windows.FrameworkElement.Margin%2A> 경우 할당 된 사각형 공간 크기가 작아 여백 및 요소 콘텐츠 영역에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-795">Elements that have margins set will not typically constrain the size of the specified <xref:System.Windows.FrameworkElement.Margin%2A> if the allotted rectangle space is not large enough for the margin plus the element content area.</span></span> <span data-ttu-id="709be-796">대신 레이아웃을 계산할 때 요소의 콘텐츠 영역에 제한이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-796">The element content area will be constrained instead when layout is calculated.</span></span> <span data-ttu-id="709be-797">여백 제한이 적용 되는 유일한 경우 0으로 이미 제한 된 콘텐츠는 이기도 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-797">The only case where margins would be constrained also is if the content is already constrained all the way to zero.</span></span>  
  
<a name="xamlAttributeUsage_Margin"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="709be-798">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="709be-798">XAML Attribute Usage</span></span>  
  
```  
<object Margin="left,top,right,bottom"/>  
- or -  
<object Margin="left,top"/>  
- or -  
<object Margin="thicknessReference"/>  
```  
  
<a name="xamlPropertyElementUsage_Margin"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="709be-799">XAML 속성 요소 사용</span><span class="sxs-lookup"><span data-stu-id="709be-799">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.Margin>  
    <Thickness Left="left" Top="top" Right="right" Bottom="bottom"/>  
  </object.Margin>  
</object>  
```  
  
<a name="xamlValues_Margin"></a>   
## <a name="xaml-values"></a><span data-ttu-id="709be-800">XAML 값</span><span class="sxs-lookup"><span data-stu-id="709be-800">XAML Values</span></span>  
 <span data-ttu-id="709be-801">*left, top, right, bottom*</span><span class="sxs-lookup"><span data-stu-id="709be-801">*left, top, right, bottom*</span></span>  
 <span data-ttu-id="709be-802">0 사이의 숫자 값 및 <xref:System.Double.PositiveInfinity> 의 네 가지 가능한 차원 속성을 지정 하는 한 <xref:System.Windows.Thickness> 구조입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-802">Number values between 0 and <xref:System.Double.PositiveInfinity> that specify the four possible dimension properties of a <xref:System.Windows.Thickness> structure.</span></span>  
  
 <span data-ttu-id="709be-803">특성을 사용 대칭적 및 논리적으로 제공 된 순서에 적용 되는 약어 값을 수락도 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-803">The attribute usage will also accept abbreviated values that apply in the order provided, symmetrically and logically.</span></span> <span data-ttu-id="709be-804">예를 들어 `Margin="20"` 의미로 해석 됩니다는 <xref:System.Windows.Thickness> 20으로 설정 하는 모든 속성을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-804">For instance, `Margin="20"` will be interpreted to mean a <xref:System.Windows.Thickness> with all properties set to 20.</span></span> <span data-ttu-id="709be-805">`Margin="20,50"` 의미로 해석 됩니다는 <xref:System.Windows.Thickness> 사용 하 여 <xref:System.Windows.Thickness.Left%2A> 및 <xref:System.Windows.Thickness.Right%2A> 을 20으로 설정 하 고 <xref:System.Windows.Thickness.Top%2A> 및 <xref:System.Windows.Thickness.Bottom%2A> 50으로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-805">`Margin="20,50"` will be interpreted to mean a <xref:System.Windows.Thickness> with <xref:System.Windows.Thickness.Left%2A> and <xref:System.Windows.Thickness.Right%2A> set to 20, and <xref:System.Windows.Thickness.Top%2A> and <xref:System.Windows.Thickness.Bottom%2A> set to 50.</span></span>  
  
 <span data-ttu-id="709be-806">기본 단위를 <xref:System.Windows.Thickness> 측정값은 [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-806">The default unit for a <xref:System.Windows.Thickness> measure is [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)].</span></span> <span data-ttu-id="709be-807">단위 형식 문자열을 추가 하 여 다른 단위를 지정할 수도 있습니다 `cm`, `in`, 또는 `pt` 모든 측정 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-807">You can also specify other units by appending the unit type strings `cm`, `in`, or `pt` to any measure.</span></span>  
  
 <span data-ttu-id="709be-808">숫자 값으로 제공 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 특성 지정할 필요는 없습니다 소수점이 하 (0 허용 되는, 0.0으로 지정할 필요가 없습니다.).</span><span class="sxs-lookup"><span data-stu-id="709be-808">Number values provided as [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attributes need not specify decimal points (0 is acceptable, does not have to be provided as 0.0).</span></span> <span data-ttu-id="709be-809">에 대 한 자세한 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 사용량 참조 <xref:System.Windows.Thickness>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-809">For more information on [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] usage, see <xref:System.Windows.Thickness>.</span></span>  
  
 <span data-ttu-id="709be-810">*thicknessReference*</span><span class="sxs-lookup"><span data-stu-id="709be-810">*thicknessReference*</span></span>  
 <span data-ttu-id="709be-811">기존 개체 참조가 <xref:System.Windows.Thickness>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-811">An object reference to an existing <xref:System.Windows.Thickness>.</span></span> <span data-ttu-id="709be-812">이 수는 `}`, a 또는 `}` 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-812">This might be a `}`, a , or `}` reference.</span></span> <span data-ttu-id="709be-813">에 대 한 자세한 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 사용량 참조 <xref:System.Windows.Thickness>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-813">For more information on [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] usage, see <xref:System.Windows.Thickness>.</span></span>  
  
<a name="dependencyPropertyInfo_Margin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="709be-814">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="709be-814">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-815">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-815">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.MarginProperty>|  
|<span data-ttu-id="709be-816">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="709be-816">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Thickness" />
      </Docs>
    </Member>
    <Member MemberName="MarginProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MarginProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MarginProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MarginProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MarginProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MarginProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MarginProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MarginProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-817"><see cref="P:System.Windows.FrameworkElement.Margin" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-817">Identifies the <see cref="P:System.Windows.FrameworkElement.Margin" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHeight">
      <MemberSignature Language="C#" Value="public double MaxHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MaxHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MaxHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MaxHeight { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MaxHeight : double with get, set" Usage="System.Windows.FrameworkElement.MaxHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-818">요소의 최대 높이 제약 조건을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-818">Gets or sets the maximum height constraint of the element.</span></span></summary>
        <value><span data-ttu-id="709be-819">요소의 최고 높이([!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)])입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-819">The maximum height of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span></span> <span data-ttu-id="709be-820">기본값은 <see cref="F:System.Double.PositiveInfinity" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-820">The default value is <see cref="F:System.Double.PositiveInfinity" />.</span></span> <span data-ttu-id="709be-821">이 값은 0.0보다 크거나 같은 임의의 값일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-821">This value can be any value equal to or greater than 0.0.</span></span> <span data-ttu-id="709be-822"><see cref="F:System.Double.PositiveInfinity" />도 유효합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-822"><see cref="F:System.Double.PositiveInfinity" /> is also valid.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-823">이 세 가지 속성 중 하나에 <xref:System.Windows.FrameworkElement> 높이 정보를 지정 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-823">This is one of three properties on <xref:System.Windows.FrameworkElement> that specify height information.</span></span> <span data-ttu-id="709be-824">다른 두 가지 <xref:System.Windows.FrameworkElement.MinHeight%2A> 고 <xref:System.Windows.FrameworkElement.Height%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-824">The other two are <xref:System.Windows.FrameworkElement.MinHeight%2A> and <xref:System.Windows.FrameworkElement.Height%2A>.</span></span>  <span data-ttu-id="709be-825">이러한 값 간에 충돌이 발생 하는 경우를 실제 높이 결정에 대 한 애플리케이션의 순서 <xref:System.Windows.FrameworkElement.MinHeight%2A> 다음을 적용할 수 있어야 <xref:System.Windows.FrameworkElement.MaxHeight%2A>, 마지막으로 범위 내에 있는 이러한 각 경우 <xref:System.Windows.FrameworkElement.Height%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-825">If there is a conflict between these values, the order of application for actual height determination is first <xref:System.Windows.FrameworkElement.MinHeight%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxHeight%2A>, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Height%2A>.</span></span>  
  
 <span data-ttu-id="709be-826">에 대 한 값 제한 합니다 <xref:System.Double> 값에 의해 적용 되는 <xref:System.Windows.ValidateValueCallback> 메커니즘입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-826">The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism.</span></span> <span data-ttu-id="709be-827">잘못 된 값을 설정 하려고 하면 런타임 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-827">If you attempt to set an invalid value a run-time exception is thrown.</span></span>  
  
<a name="xamlAttributeUsage_MaxHeight"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="709be-828">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="709be-828">XAML Attribute Usage</span></span>  
  
```  
<object MaxHeight="double"/>  
- or -  
<object MaxHeight ="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MaxHeight"></a>   
## <a name="xaml-values"></a><span data-ttu-id="709be-829">XAML 값</span><span class="sxs-lookup"><span data-stu-id="709be-829">XAML Values</span></span>  
 <span data-ttu-id="709be-830">*double*</span><span class="sxs-lookup"><span data-stu-id="709be-830">*double*</span></span>  
 <xref:System.Double>  
  
 <span data-ttu-id="709be-831">문자열 표현 된 <xref:System.Double> 0.0 보다 크거나 같은 값입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-831">String representation of a <xref:System.Double> value equal to or greater than 0.0.</span></span> <span data-ttu-id="709be-832">이것은 [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] 측정 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-832">This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] measurement.</span></span> <span data-ttu-id="709be-833">문자열 소수점이 하를 명시적으로 포함 되지 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-833">Strings need not explicitly include decimal points.</span></span> <span data-ttu-id="709be-834">예를 들어 값 `1` 허용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-834">For instance a value of `1` is acceptable.</span></span>  
  
 <span data-ttu-id="709be-835">동일한 <xref:System.Double> 적용을 사용 해야 한다는 점을 제외 하 고 속성 값 섹션에서 설명한 대로 제한 된 범위 [X:static 태그 확장명](~/docs/framework/xaml-services/x-static-markup-extension.md) 값을 명시적으로 설정 해야 하는 경우 <xref:System.Double.PositiveInfinity>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-835">The same <xref:System.Double> range restrictions as mentioned in the Property Value section apply, except that you must use [x:Static Markup Extension](~/docs/framework/xaml-services/x-static-markup-extension.md) if you need to explicitly set the value to be <xref:System.Double.PositiveInfinity>.</span></span>  
  
 <span data-ttu-id="709be-836">*qualifiedDouble*</span><span class="sxs-lookup"><span data-stu-id="709be-836">*qualifiedDouble*</span></span>  
 <span data-ttu-id="709be-837">A *이중* 단위 선언 문자열 중 하나에서 다음 위에서 설명한 대로 값: `px`, `in`, `cm`, `pt`합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-837">A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.</span></span>  
  
 <span data-ttu-id="709be-838">`px` (기본값) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span><span class="sxs-lookup"><span data-stu-id="709be-838">`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span></span>  
  
 <span data-ttu-id="709be-839">`in` 인치; 1에서 96px = =</span><span class="sxs-lookup"><span data-stu-id="709be-839">`in` is inches; 1in==96px</span></span>  
  
 <span data-ttu-id="709be-840">`cm` 센티미터; 1cm==(96/2.54) px</span><span class="sxs-lookup"><span data-stu-id="709be-840">`cm` is centimeters; 1cm==(96/2.54) px</span></span>  
  
 <span data-ttu-id="709be-841">`pt` 포인트; 1pt==(96/72) px</span><span class="sxs-lookup"><span data-stu-id="709be-841">`pt` is points; 1pt==(96/72) px</span></span>  
  
<a name="dependencyPropertyInfo_MaxHeight"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="709be-842">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="709be-842">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-843">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-843">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.MaxHeightProperty>|  
|<span data-ttu-id="709be-844">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="709be-844">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MaxHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MaxHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MaxHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MaxHeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxHeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MaxHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-845"><see cref="P:System.Windows.FrameworkElement.MaxHeight" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-845">Identifies the <see cref="P:System.Windows.FrameworkElement.MaxHeight" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWidth">
      <MemberSignature Language="C#" Value="public double MaxWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MaxWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MaxWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MaxWidth { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MaxWidth : double with get, set" Usage="System.Windows.FrameworkElement.MaxWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-846">요소의 최대 너비 제약 조건을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-846">Gets or sets the maximum width constraint of the element.</span></span></summary>
        <value><span data-ttu-id="709be-847">요소의 최대 너비([!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)])입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-847">The maximum width of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span></span> <span data-ttu-id="709be-848">기본값은 <see cref="F:System.Double.PositiveInfinity" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-848">The default value is <see cref="F:System.Double.PositiveInfinity" />.</span></span> <span data-ttu-id="709be-849">이 값은 0.0보다 크거나 같은 임의의 값일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-849">This value can be any value equal to or greater than 0.0.</span></span> <span data-ttu-id="709be-850"><see cref="F:System.Double.PositiveInfinity" />도 유효합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-850"><see cref="F:System.Double.PositiveInfinity" /> is also valid.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-851">이 세 가지 속성 중 하나에 <xref:System.Windows.FrameworkElement> 너비 정보를 지정 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-851">This is one of three properties on <xref:System.Windows.FrameworkElement> that specify width information.</span></span> <span data-ttu-id="709be-852">다른 두 가지 <xref:System.Windows.FrameworkElement.MinWidth%2A> 고 <xref:System.Windows.FrameworkElement.Width%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-852">The other two are <xref:System.Windows.FrameworkElement.MinWidth%2A> and <xref:System.Windows.FrameworkElement.Width%2A>.</span></span> <span data-ttu-id="709be-853">이러한 값 간에 충돌이 발생 하는 경우를 실제 너비가 결정에 대 한 애플리케이션의 순서 <xref:System.Windows.FrameworkElement.MinWidth%2A> 다음을 적용할 수 있어야 <xref:System.Windows.FrameworkElement.MaxWidth%2A>, 마지막으로 범위 내에 있는 이러한 각 경우 <xref:System.Windows.FrameworkElement.Width%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-853">If there is a conflict between these values, the order of application for actual width determination is first <xref:System.Windows.FrameworkElement.MinWidth%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxWidth%2A>, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Width%2A>.</span></span>  
  
 <span data-ttu-id="709be-854">에 대 한 값 제한 합니다 <xref:System.Double> 값에 의해 적용 되는 <xref:System.Windows.ValidateValueCallback> 메커니즘입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-854">The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism.</span></span> <span data-ttu-id="709be-855">잘못 된 값을 설정 하려고 하면 런타임 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-855">If you attempt to set an invalid value, a run-time exception is thrown.</span></span>  
  
<a name="xamlAttributeUsage_MaxWidth"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="709be-856">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="709be-856">XAML Attribute Usage</span></span>  
  
```  
<object MaxWidth="double"/>  
- or -  
<object MaxWidth="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MaxWidth"></a>   
## <a name="xaml-values"></a><span data-ttu-id="709be-857">XAML 값</span><span class="sxs-lookup"><span data-stu-id="709be-857">XAML Values</span></span>  
 <span data-ttu-id="709be-858">*double*</span><span class="sxs-lookup"><span data-stu-id="709be-858">*double*</span></span>  
 <xref:System.Double>  
  
 <span data-ttu-id="709be-859">문자열 표현 된 <xref:System.Double> 0.0 보다 크거나 같은 값입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-859">String representation of a <xref:System.Double> value equal to or greater than 0.0.</span></span> <span data-ttu-id="709be-860">이것은 [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] 측정 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-860">This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] measurement.</span></span> <span data-ttu-id="709be-861">문자열 소수점이 하를 명시적으로 포함 되지 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-861">Strings need not explicitly include decimal points.</span></span> <span data-ttu-id="709be-862">예를 들어 값 `1` 허용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-862">For instance a value of `1` is acceptable.</span></span>  
  
 <span data-ttu-id="709be-863">동일 <xref:System.Double> 적용을 사용 해야 한다는 점을 제외 하 고 속성 값 섹션에서 설명한 대로 제한 된 범위 [X:static 태그 확장](~/docs/framework/xaml-services/x-static-markup-extension.md) 값을 설정 하려면 <xref:System.Double.PositiveInfinity>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-863">The same <xref:System.Double> range restrictions as mentioned in the Property Value section apply, except that you must use [x:Static Markup Extension](~/docs/framework/xaml-services/x-static-markup-extension.md) to set the value to be <xref:System.Double.PositiveInfinity>.</span></span>  
  
 <span data-ttu-id="709be-864">*qualifiedDouble*</span><span class="sxs-lookup"><span data-stu-id="709be-864">*qualifiedDouble*</span></span>  
 <span data-ttu-id="709be-865">A *이중* 단위 선언 문자열 중 하나에서 다음 위에서 설명한 대로 값: `px`, `in`, `cm`, `pt`합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-865">A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.</span></span>  
  
 <span data-ttu-id="709be-866">`px` (기본값) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span><span class="sxs-lookup"><span data-stu-id="709be-866">`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span></span>  
  
 <span data-ttu-id="709be-867">`in` 인치; 1에서 96px = =</span><span class="sxs-lookup"><span data-stu-id="709be-867">`in` is inches; 1in==96px</span></span>  
  
 <span data-ttu-id="709be-868">`cm` 센티미터; 1cm==(96/2.54) px</span><span class="sxs-lookup"><span data-stu-id="709be-868">`cm` is centimeters; 1cm==(96/2.54) px</span></span>  
  
 <span data-ttu-id="709be-869">`pt` 포인트; 1pt==(96/72) px</span><span class="sxs-lookup"><span data-stu-id="709be-869">`pt` is points; 1pt==(96/72) px</span></span>  
  
<a name="dependencyPropertyInfo_MaxWidth"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="709be-870">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="709be-870">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-871">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-871">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.MaxWidthProperty>|  
|<span data-ttu-id="709be-872">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="709be-872">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MaxWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MaxWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MaxWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MaxWidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxWidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MaxWidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-873"><see cref="P:System.Windows.FrameworkElement.MaxWidth" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-873">Identifies the <see cref="P:System.Windows.FrameworkElement.MaxWidth" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCore">
      <MemberSignature Language="C#" Value="protected override sealed System.Windows.Size MeasureCore (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size MeasureCore(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Function MeasureCore (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size MeasureCore(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="override this.MeasureCore : System.Windows.Size -&gt; System.Windows.Size" Usage="frameworkElement.MeasureCore availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize"><span data-ttu-id="709be-874">부모 요소가 자식 요소에 제공할 수 있는 사용 가능한 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-874">The available size that the parent element can give to the child elements.</span></span></param>
        <summary><span data-ttu-id="709be-875"><see cref="T:System.Windows.FrameworkElement" />에 대한 기본 측정 단계 레이아웃 시스템 동작을 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-875">Implements basic measure-pass layout system behavior for <see cref="T:System.Windows.FrameworkElement" />.</span></span></summary>
        <returns><span data-ttu-id="709be-876">레이아웃에서 이 요소에 필요한 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-876">The desired size of this element in layout.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-877">이 메서드를 재정의 <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType> WPF 핵심 수준 및 WPF 프레임 워크 수준 레이아웃 측정 구현을 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-877">This method overrides <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType> to connect the  WPF core-level and WPF framework-level layout measure implementations.</span></span> <span data-ttu-id="709be-878"><xref:System.Windows.FrameworkElement> 구현 메서드를 봉인 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-878">The <xref:System.Windows.FrameworkElement> implementation seals the method.</span></span> <span data-ttu-id="709be-879">WPF 프레임 워크 수준에서 작성 하는 모든 요소의 측정값 전달 레이아웃 동작을 조정 하려면 재정의 <xref:System.Windows.FrameworkElement.MeasureOverride%2A> 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-879">To adjust the measure pass layout behavior of any element that builds on the WPF framework-level, override <xref:System.Windows.FrameworkElement.MeasureOverride%2A> instead.</span></span> <span data-ttu-id="709be-880">조정 측정 처리 단계에서 의도적으로 나 있지 않은 WPF 프레임 워크 수준에서 사용 하 여 요소의 레이아웃 동작 <xref:System.Windows.FrameworkElement>를 재정의 <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-880">To adjust the measure pass layout behavior of an element that deliberately does not build on the WPF framework-level or use <xref:System.Windows.FrameworkElement>, override <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureOverride">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size MeasureOverride (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size MeasureOverride(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MeasureOverride (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size MeasureOverride(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="abstract member MeasureOverride : System.Windows.Size -&gt; System.Windows.Size&#xA;override this.MeasureOverride : System.Windows.Size -&gt; System.Windows.Size" Usage="frameworkElement.MeasureOverride availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize"><span data-ttu-id="709be-881">이 요소가 자식 요소에 제공할 수 있는 사용 가능한 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-881">The available size that this element can give to child elements.</span></span> <span data-ttu-id="709be-882">값으로 무한대를 지정하면 사용할 수 있는 콘텐츠에 따라 요소 크기가 지정됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-882">Infinity can be specified as a value to indicate that the element will size to whatever content is available.</span></span></param>
        <summary><span data-ttu-id="709be-883">파생 클래스에서 재정의된 경우 자식 요소에 필요한 레이아웃의 크기를 측정하고 <see cref="T:System.Windows.FrameworkElement" /> 파생 클래스의 크기를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-883">When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement" />-derived class.</span></span></summary>
        <returns><span data-ttu-id="709be-884">이 요소에서 자식 요소 크기 계산에 따라 레이아웃 중에 필요하다고 결정하는 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-884">The size that this element determines it needs during layout, based on its calculations of child element sizes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-885">재정의 <xref:System.Windows.FrameworkElement.MeasureOverride%2A> 에 참여 하는 대로 요소에 대 한 사용자 지정 레이아웃 크기 조정 동작을 구현 하는 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 레이아웃 시스템입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-885">Override <xref:System.Windows.FrameworkElement.MeasureOverride%2A> to implement custom layout sizing behavior for your element as it participates in the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] layout system.</span></span> <span data-ttu-id="709be-886">구현을 다음을 수행 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-886">Your implementation should do the following:</span></span>  
  
1.  <span data-ttu-id="709be-887">요소의 특정 레이아웃, 호출의 일부인 자식 컬렉션을 반복 <xref:System.Windows.UIElement.Measure%2A> 각 자식 요소에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-887">Iterate your element's particular collection of children that are part of layout, call <xref:System.Windows.UIElement.Measure%2A> on each child element.</span></span>  
  
2.  <span data-ttu-id="709be-888">즉시 <xref:System.Windows.UIElement.DesiredSize%2A> 자식 (후 속성으로 설정 됩니다 <xref:System.Windows.UIElement.Measure%2A> 라고).</span><span class="sxs-lookup"><span data-stu-id="709be-888">Immediately get <xref:System.Windows.UIElement.DesiredSize%2A> on the child (this is set as a property after <xref:System.Windows.UIElement.Measure%2A> is called).</span></span>  
  
3.  <span data-ttu-id="709be-889">자식 요소의 측정값에 따라 부모 net 원하는 크기를 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-889">Compute the net desired size of the parent based upon the measurement of the child elements.</span></span>  
  
 <span data-ttu-id="709be-890">반환 값 <xref:System.Windows.FrameworkElement.MeasureOverride%2A> 다음 현재 요소의 부모 요소에 대 한 입력 측정 되는 요소 자체의 원하는 크기 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-890">The return value of <xref:System.Windows.FrameworkElement.MeasureOverride%2A> should be the element's own desired size, which then becomes the measure input for the parent element of the current element.</span></span> <span data-ttu-id="709be-891">페이지의 루트 요소에 도달할 때까지 레이아웃 시스템을 통해 이와 동일한 프로세스가 계속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-891">This same process continues through the layout system until the root element of the page is reached.</span></span>  
  
 <span data-ttu-id="709be-892">이 과정에서 자식 요소를 반환할 수 있습니다 더 큰 <xref:System.Windows.UIElement.DesiredSize%2A> 초기 보다 크기가 `availableSize` 자식 요소가 더 많은 공간을 원한다는 것을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="709be-892">During this process, child elements might return a larger <xref:System.Windows.UIElement.DesiredSize%2A> size than the initial `availableSize` to indicate that the child element wants more space.</span></span> <span data-ttu-id="709be-893">이 누적 주문의 특정 방식으로 또는 임의 개수의 측정 또는 콘텐츠 정렬에 대 한 솔루션을 설정 하 여 부모 컨트롤 크기를 조정 하 여 스크롤 가능한 영역을 도입 하 여 개발자 고유의 구현에서 처리 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-893">This might be handled in your own implementation by introducing a scrollable region, by resizing the parent control, by establishing some manner of stacked order, or any number of solutions for measuring or arranging content.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="709be-894">요소를 호출 해야 <xref:System.Windows.UIElement.Measure%2A> 이 프로세스 중 각 자식에 그렇지 않으면 자식 요소를 됩니다 하지 수 올바르게 크기 또는 정렬 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-894">Elements should call <xref:System.Windows.UIElement.Measure%2A> on each child during this process, otherwise the child elements will not be correctly sized or arranged.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="709be-895">다음 비 컴파일 코드는이 구현 패턴을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="709be-895">The following non-compiling code shows this implementation pattern.</span></span>  <span data-ttu-id="709be-896"><c>원하는</c> 고유한 요소를 정의 해야 하는 자식 항목의 열거 가능한 컬렉션 속성을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="709be-896"><c>VisualChildren</c> represents an enumerable collection property of children that your own element should define.</span></span> <span data-ttu-id="709be-897">속성을 원하는 이름을 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-897">The property can be named anything.</span></span> <span data-ttu-id="709be-898"><c>원하는</c> 이 예제의 목적에 대 한 자리 표시자 이름인 <c>원하는</c> 아닙니다는 [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] 제공한 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 명명 패턴의 전체 또는 일부입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-898"><c>VisualChildren</c> is a placeholder name for purposes of this example, <c>VisualChildren</c> is not an [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] as provided by [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] or a part of a naming pattern.</span></span> 
  
<span data-ttu-id="709be-899">[! 코드 csharp[CorePseudocode #FEMeasureOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#femeasureoverride)] [! 코드 vb[CorePseudocode #FEMeasureOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#femeasureoverride)]</span><span class="sxs-lookup"><span data-stu-id="709be-899">[!code-csharp[CorePseudocode#FEMeasureOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#femeasureoverride)] [!code-vb[CorePseudocode#FEMeasureOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#femeasureoverride)]</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="MinHeight">
      <MemberSignature Language="C#" Value="public double MinHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MinHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MinHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property MinHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MinHeight { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MinHeight : double with get, set" Usage="System.Windows.FrameworkElement.MinHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-900">요소의 최소 높이 제약 조건을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-900">Gets or sets the minimum height constraint of the element.</span></span></summary>
        <value><span data-ttu-id="709be-901">요소의 최소 높이([!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)])입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-901">The minimum height of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span></span> <span data-ttu-id="709be-902">기본값은 0.0입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-902">The default value is 0.0.</span></span> <span data-ttu-id="709be-903">이 값은 0.0보다 크거나 같은 임의의 값일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-903">This value can be any value equal to or greater than 0.0.</span></span> <span data-ttu-id="709be-904">그러나 <see cref="F:System.Double.PositiveInfinity" /> 및 <see cref="F:System.Double.NaN" />은 올바르지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-904">However, <see cref="F:System.Double.PositiveInfinity" /> is NOT valid, nor is <see cref="F:System.Double.NaN" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-905">이 세 가지 속성 중 하나에 <xref:System.Windows.FrameworkElement> 높이 정보를 지정 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-905">This is one of three properties on <xref:System.Windows.FrameworkElement> that specify height information.</span></span>  <span data-ttu-id="709be-906">다른 두 가지 <xref:System.Windows.FrameworkElement.Height%2A> 고 <xref:System.Windows.FrameworkElement.MaxHeight%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-906">The other two are <xref:System.Windows.FrameworkElement.Height%2A> and <xref:System.Windows.FrameworkElement.MaxHeight%2A>.</span></span> <span data-ttu-id="709be-907">이러한 값 간에 충돌이 발생 하는 경우를 실제 높이 결정에 대 한 애플리케이션의 순서 <xref:System.Windows.FrameworkElement.MinHeight%2A> 다음을 적용할 수 있어야 <xref:System.Windows.FrameworkElement.MaxHeight%2A>, 마지막으로 범위 내에 있는 이러한 각 경우 <xref:System.Windows.FrameworkElement.Height%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-907">If there is a conflict between these values, the order of application for actual height determination is first <xref:System.Windows.FrameworkElement.MinHeight%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxHeight%2A>, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Height%2A>.</span></span>  
  
 <span data-ttu-id="709be-908">에 대 한 값 제한 합니다 <xref:System.Double> 값에 의해 적용 되는 <xref:System.Windows.ValidateValueCallback> 메커니즘입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-908">The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism.</span></span> <span data-ttu-id="709be-909">잘못 된 값을 설정 하려고 하면 런타임 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-909">If you attempt to set an invalid value, a run-time exception is thrown.</span></span>  
  
<a name="xamlAttributeUsage_MinHeight"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="709be-910">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="709be-910">XAML Attribute Usage</span></span>  
  
```  
<object MinHeight="double"/>  
- or -  
<object MinHeight="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MinHeight"></a>   
## <a name="xaml-values"></a><span data-ttu-id="709be-911">XAML 값</span><span class="sxs-lookup"><span data-stu-id="709be-911">XAML Values</span></span>  
 <span data-ttu-id="709be-912">*double*</span><span class="sxs-lookup"><span data-stu-id="709be-912">*double*</span></span>  
 <xref:System.Double>  
  
 <span data-ttu-id="709be-913">문자열 표현 된 <xref:System.Double> 0.0 보다 크거나 같은 값입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-913">String representation of a <xref:System.Double> value equal to or greater than 0.0.</span></span> <span data-ttu-id="709be-914">이것은 [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] 측정 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-914">This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] measurement.</span></span> <span data-ttu-id="709be-915">문자열 소수점이 하를 명시적으로 포함 되지 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-915">Strings need not explicitly include decimal points.</span></span> <span data-ttu-id="709be-916">예를 들어 값 `1` 허용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-916">For instance a value of `1` is acceptable.</span></span>  
  
 <span data-ttu-id="709be-917">동일한 <xref:System.Double> 속성 값 섹션에서 설명한 것 처럼 범위 제한 사항이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-917">The same <xref:System.Double> range restrictions as mentioned in the Property Value section apply.</span></span>  
  
 <span data-ttu-id="709be-918">*qualifiedDouble*</span><span class="sxs-lookup"><span data-stu-id="709be-918">*qualifiedDouble*</span></span>  
 <span data-ttu-id="709be-919">A *이중* 단위 선언 문자열 중 하나에서 다음 위에서 설명한 대로 값: `px`, `in`, `cm`, `pt`합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-919">A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.</span></span>  
  
 <span data-ttu-id="709be-920">`px` (기본값) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span><span class="sxs-lookup"><span data-stu-id="709be-920">`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span></span>  
  
 <span data-ttu-id="709be-921">`in` 인치; 1에서 96px = =</span><span class="sxs-lookup"><span data-stu-id="709be-921">`in` is inches; 1in==96px</span></span>  
  
 <span data-ttu-id="709be-922">`cm` 센티미터; 1cm==(96/2.54) px</span><span class="sxs-lookup"><span data-stu-id="709be-922">`cm` is centimeters; 1cm==(96/2.54) px</span></span>  
  
 <span data-ttu-id="709be-923">`pt` 포인트; 1pt==(96/72) px</span><span class="sxs-lookup"><span data-stu-id="709be-923">`pt` is points; 1pt==(96/72) px</span></span>  
  
<a name="dependencyPropertyInfo_MinHeight"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="709be-924">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="709be-924">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-925">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-925">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.MinHeightProperty>|  
|<span data-ttu-id="709be-926">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="709be-926">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MinHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MinHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MinHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MinHeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinHeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MinHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-927"><see cref="P:System.Windows.FrameworkElement.MinHeight" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-927">Identifies the <see cref="P:System.Windows.FrameworkElement.MinHeight" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWidth">
      <MemberSignature Language="C#" Value="public double MinWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MinWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MinWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property MinWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MinWidth { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MinWidth : double with get, set" Usage="System.Windows.FrameworkElement.MinWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-928">요소의 최소 너비 제약 조건을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-928">Gets or sets the minimum width constraint of the element.</span></span></summary>
        <value><span data-ttu-id="709be-929">요소의 최소 너비([!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)])입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-929">The minimum width of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span></span> <span data-ttu-id="709be-930">기본값은 0.0입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-930">The default value is 0.0.</span></span> <span data-ttu-id="709be-931">이 값은 0.0보다 크거나 같은 임의의 값일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-931">This value can be any value equal to or greater than 0.0.</span></span> <span data-ttu-id="709be-932">그러나 <see cref="F:System.Double.PositiveInfinity" /> 및 <see cref="F:System.Double.NaN" />은 올바르지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-932">However, <see cref="F:System.Double.PositiveInfinity" /> is not valid, nor is <see cref="F:System.Double.NaN" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-933">이 세 가지 속성 중 하나에 <xref:System.Windows.FrameworkElement> 너비 정보를 지정 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-933">This is one of three properties on <xref:System.Windows.FrameworkElement> that specify width information.</span></span>  <span data-ttu-id="709be-934">다른 두 가지 <xref:System.Windows.FrameworkElement.Width%2A> 고 <xref:System.Windows.FrameworkElement.MaxWidth%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-934">The other two are <xref:System.Windows.FrameworkElement.Width%2A> and <xref:System.Windows.FrameworkElement.MaxWidth%2A>.</span></span>  <span data-ttu-id="709be-935">이러한 값 간에 충돌이 발생 하는 경우를 실제 너비가 결정에 대 한 애플리케이션의 순서 <xref:System.Windows.FrameworkElement.MinWidth%2A> 다음을 적용할 수 있어야 <xref:System.Windows.FrameworkElement.MaxWidth%2A>, 마지막으로 범위 내에 있는 이러한 각 경우 <xref:System.Windows.FrameworkElement.Width%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-935">If there is a conflict between these values, the order of application for actual width determination is first <xref:System.Windows.FrameworkElement.MinWidth%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxWidth%2A>, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Width%2A>.</span></span>  
  
 <span data-ttu-id="709be-936">에 대 한 값 제한 합니다 <xref:System.Double> 값에 의해 적용 되는 <xref:System.Windows.ValidateValueCallback> 메커니즘입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-936">The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism.</span></span> <span data-ttu-id="709be-937">잘못 된 값을 설정 하려고 하면 런타임 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-937">If you attempt to set an invalid value, a run-time exception is thrown.</span></span>  
  
<a name="xamlAttributeUsage_MinWidth"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="709be-938">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="709be-938">XAML Attribute Usage</span></span>  
  
```  
<object MinWidth="double"/>  
- or -  
<object MinWidth="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MinWidth"></a>   
## <a name="xaml-values"></a><span data-ttu-id="709be-939">XAML 값</span><span class="sxs-lookup"><span data-stu-id="709be-939">XAML Values</span></span>  
 <span data-ttu-id="709be-940">*double*</span><span class="sxs-lookup"><span data-stu-id="709be-940">*double*</span></span>  
 <xref:System.Double>  
  
 <span data-ttu-id="709be-941">문자열 표현 된 <xref:System.Double> 0.0 보다 크거나 같은 값입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-941">String representation of a <xref:System.Double> value equal to or greater than 0.0.</span></span> <span data-ttu-id="709be-942">이것은 [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] 측정 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-942">This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] measurement.</span></span> <span data-ttu-id="709be-943">문자열 소수점이 하를 명시적으로 포함 되지 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-943">Strings need not explicitly include decimal points.</span></span> <span data-ttu-id="709be-944">예를 들어 값 `1` 허용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-944">For instance a value of `1` is acceptable.</span></span>  
  
 <span data-ttu-id="709be-945">동일한 <xref:System.Double> 속성 값 섹션에서 설명한 것 처럼 범위 제한 사항이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-945">The same <xref:System.Double> range restrictions as mentioned in the Property Value section apply.</span></span>  
  
 <span data-ttu-id="709be-946">*qualifiedDouble*</span><span class="sxs-lookup"><span data-stu-id="709be-946">*qualifiedDouble*</span></span>  
 <span data-ttu-id="709be-947">A *이중* 단위 선언 문자열 중 하나에서 다음 위에서 설명한 대로 값: `px`, `in`, `cm`, `pt`합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-947">A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.</span></span>  
  
 <span data-ttu-id="709be-948">`px` (기본값) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span><span class="sxs-lookup"><span data-stu-id="709be-948">`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span></span>  
  
 <span data-ttu-id="709be-949">`in` 인치; 1에서 96px = =</span><span class="sxs-lookup"><span data-stu-id="709be-949">`in` is inches; 1in==96px</span></span>  
  
 <span data-ttu-id="709be-950">`cm` 센티미터; 1cm==(96/2.54) px</span><span class="sxs-lookup"><span data-stu-id="709be-950">`cm` is centimeters; 1cm==(96/2.54) px</span></span>  
  
 <span data-ttu-id="709be-951">`pt` 포인트; 1pt==(96/72) px</span><span class="sxs-lookup"><span data-stu-id="709be-951">`pt` is points; 1pt==(96/72) px</span></span>  
  
<a name="dependencyPropertyInfo_MinWidth"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="709be-952">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="709be-952">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-953">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-953">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.MinWidthProperty>|  
|<span data-ttu-id="709be-954">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="709be-954">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MinWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MinWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MinWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MinWidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinWidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MinWidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-955"><see cref="P:System.Windows.FrameworkElement.MinWidth" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-955">Identifies the <see cref="P:System.Windows.FrameworkElement.MinWidth" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public override sealed bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberSignature Language="F#" Value="override this.MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool" Usage="frameworkElement.MoveFocus request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="709be-956">포커스를 이동할 방향(열거형의 값)입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-956">The direction that focus is to be moved, as a value of the enumeration.</span></span></param>
        <summary><span data-ttu-id="709be-957">키보드 포커스를 이 요소 반대쪽에 있는 다른 요소를 향해 제공된 이동 방향으로 이동합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-957">Moves the keyboard focus away from this element and to another element in a provided traversal direction.</span></span></summary>
        <returns><span data-ttu-id="709be-958">포커스가 이동되었으면 <see langword="true" />를 반환하고, 지정된 방향에 대상 요소가 없거나 대상 요소에 키보드 포커스를 설정할 수 없으면 <see langword="false" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-958">Returns <see langword="true" /> if focus is moved successfully; <see langword="false" /> if the target element in direction as specified does not exist or could not be keyboard focused.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-959">이 구현을 재정의 <xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=nameWithType> 메서드를 봉인 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-959">This implementation overrides <xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=nameWithType> and seals the method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="709be-960">다음 예제에서는 몇 가지 가능한 단추 입력을 처리 하는 처리기를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-960">The following example implements a handler that handles several possible button inputs.</span></span> <span data-ttu-id="709be-961">각 단추 나타냅니다 가능한 <xref:System.Windows.Input.FocusNavigationDirection>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-961">Each button represents a possible <xref:System.Windows.Input.FocusNavigationDirection>.</span></span> <span data-ttu-id="709be-962">처리기를 호출 하 고 현재 키보드 포커스가 있는 요소를 추적 <xref:System.Windows.FrameworkElement.MoveFocus%2A> 적절 한을 지정 하 여 해당 요소에 대 <xref:System.Windows.Input.FocusNavigationDirection> 에 대 한 초기화로는 <xref:System.Windows.Input.TraversalRequest> 제공 하는 매개 변수를 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-962">The handler tracks the element with current keyboard focus, and calls <xref:System.Windows.FrameworkElement.MoveFocus%2A> on that element, by specifying the appropriate <xref:System.Windows.Input.FocusNavigationDirection> as initialization for the <xref:System.Windows.Input.TraversalRequest> type parameter provided.</span></span>  
  
 [!code-csharp[FocusSample#FocusSampleMoveFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#focussamplemovefocus)]
 [!code-vb[FocusSample#FocusSampleMoveFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#focussamplemovefocus)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.FrameworkElement.Name" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IFrameworkInputElement.Name</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Markup.DesignerSerializationOptions(System.Windows.Markup.DesignerSerializationOptions.SerializeAsAttribute)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0">
          <AttributeName>System.Windows.Markup.DesignerSerializationOptions</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-963">요소를 식별하는 이름을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-963">Gets or sets the identifying name of the element.</span></span> <span data-ttu-id="709be-964">이 이름은 생성된 후 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 프로세서에서 처리하는 동안 이벤트 처리기 코드 등의 코드 숨김에서 태그 요소를 참조할 수 있도록 참조를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-964">The name provides a reference so that code-behind, such as event handler code, can refer to a markup element after it is constructed during processing by a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processor.</span></span></summary>
        <value><span data-ttu-id="709be-965">요소의 이름을 나타내며</span><span class="sxs-lookup"><span data-stu-id="709be-965">The name of the element.</span></span> <span data-ttu-id="709be-966">기본값은 빈 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-966">The default is an empty string.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-967">이 속성의 가장 일반적인 사용법을 지정 하는 것을 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 태그 특성으로 요소 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-967">The most common usage of this property is to specify a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] element name as an attribute in markup.</span></span>  
  
 <span data-ttu-id="709be-968">이 속성은 기본적으로 설정 하는 WPF 프레임 워크 수준 편의 속성을 제공 합니다 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] [X:name 지시문](~/docs/framework/xaml-services/x-name-directive.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-968">This property essentially provides a WPF framework-level convenience property to set the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] [x:Name Directive](~/docs/framework/xaml-services/x-name-directive.md).</span></span>  
  
 <span data-ttu-id="709be-969">이름은 이름 범위 내에서 고유 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-969">Names must be unique within a namescope.</span></span> <span data-ttu-id="709be-970">자세한 내용은 [WPF XAML 이름 범위](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-970">For more information, see [WPF XAML Namescopes](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).</span></span>  
  
 <span data-ttu-id="709be-971">가져오기는 <xref:System.Windows.FrameworkElement.Name%2A> 코드에서 요소를 만드는 경우 일반적인 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="709be-971">Getting a <xref:System.Windows.FrameworkElement.Name%2A> if you are creating elements in code is not common.</span></span> <span data-ttu-id="709be-972">코드에 적절 한 참조가 이미 있는 경우 메서드를 호출 하기만 하면 및 요소에서 속성 참조는 일반적으로 필요 하지는 <xref:System.Windows.FrameworkElement.Name%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-972">If you have the appropriate reference in code already, you can just call methods and properties on the element reference and will not generally need the <xref:System.Windows.FrameworkElement.Name%2A>.</span></span> <span data-ttu-id="709be-973">이 예외는 경우는 <xref:System.Windows.FrameworkElement.Name%2A> 문자열에 일부 오버 로드 된 즉, 예를 들어에서 해당 이름을 표시 하는 데 유용 하 고 있으면 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-973">An exception to this is if the <xref:System.Windows.FrameworkElement.Name%2A> string has some overloaded meaning, for instance if it is useful to display that name in [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].</span></span> <span data-ttu-id="709be-974">설정 된 <xref:System.Windows.FrameworkElement.Name%2A> 코드 숨김 파일에서 경우 원래 <xref:System.Windows.FrameworkElement.Name%2A> 태그에서 설정 된도 권장 되지 않습니다 하 고 로드 한 후 속성을 변경를 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 원래 개체 참조를 변경 되지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-974">Setting a <xref:System.Windows.FrameworkElement.Name%2A> from code-behind if the original <xref:System.Windows.FrameworkElement.Name%2A> was set from markup is also not recommended, and changing the property after loading the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] will not change the original object reference.</span></span> <span data-ttu-id="709be-975">개체 참조를 구문 분석 중에 기본 이름 범위를 명시적으로 만든 경우에 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-975">The object references are created only when the underlying namescopes are explicitly created during parsing.</span></span> <span data-ttu-id="709be-976">명시적으로 호출 해야 합니다 <xref:System.Windows.FrameworkElement.RegisterName%2A> 에 대 한 효과적인 변경 되도록는 <xref:System.Windows.FrameworkElement.Name%2A> 이미 로드 된 요소의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-976">You must specifically call <xref:System.Windows.FrameworkElement.RegisterName%2A> to make an effective change to the <xref:System.Windows.FrameworkElement.Name%2A> property of an already loaded element.</span></span>  
  
 <span data-ttu-id="709be-977">하나 주목할 만한에서는 설정 경우 <xref:System.Windows.FrameworkElement.Name%2A> 코드에서 런타임 시 참조할 수 있도록 요소는 스토리 보드를 실행에 대 한 이름을 등록할 때입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-977">One notable case where setting <xref:System.Windows.FrameworkElement.Name%2A> from code is important is when registering names for elements that storyboards will run against, so that they can be referenced at run time.</span></span> <span data-ttu-id="709be-978">이름을 등록할 수 있습니다, 전에를 인스턴스화할 때 할당 해야 할 수는 <xref:System.Windows.NameScope> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="709be-978">Before you can register a name, might also need to instantiate and assign a <xref:System.Windows.NameScope> instance.</span></span> <span data-ttu-id="709be-979">예제 섹션을 참조 하거나 [스토리 보드 개요](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-979">See the Example section, or [Storyboards Overview](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).</span></span>  
  
 <span data-ttu-id="709be-980">설정 <xref:System.Windows.FrameworkElement.Name%2A> 코드에서 제한적으로 애플리케이션을 하지만 여는 요소 가져오기 <xref:System.Windows.FrameworkElement.Name%2A> 더 일반적입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-980">Setting <xref:System.Windows.FrameworkElement.Name%2A> from code has limited applications, but getting an element by <xref:System.Windows.FrameworkElement.Name%2A> is more common.</span></span> <span data-ttu-id="709be-981">하나의 특정 시나리오는 애플리케이션 페이지가 애플리케이션을 다시 로드 런타임 코드는 반드시 코드 숨김 페이지에 대해 정의 되지 않았고 탐색 모델을 지 원하는 경우입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-981">One particular scenario is if your application supports a navigation model where pages reload into the application, and the run time code is not necessarily code-behind defined for that page.</span></span> <span data-ttu-id="709be-982">유틸리티 메서드 <xref:System.Windows.FrameworkElement.FindName%2A>에서 사용할 수 있는 <xref:System.Windows.FrameworkElement>, 모든 요소를 찾을 수 있습니다 <xref:System.Windows.FrameworkElement.Name%2A> 해당 요소에 대 한 논리 트리에서 필요에 따라는 트리를 재귀적으로 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-982">The utility method <xref:System.Windows.FrameworkElement.FindName%2A>, which is available from any <xref:System.Windows.FrameworkElement>, can find any element by <xref:System.Windows.FrameworkElement.Name%2A> in the logical tree for that element, searching the tree recursively as necessary.</span></span> <span data-ttu-id="709be-983">사용할 수 있습니다는 <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> 의 정적 메서드 <xref:System.Windows.LogicalTreeHelper>도 적용 되는 <xref:System.Windows.FrameworkElement.Name%2A> 인수로 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-983">Or you can use the <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> static method of <xref:System.Windows.LogicalTreeHelper>, which also takes a <xref:System.Windows.FrameworkElement.Name%2A> string as an argument.</span></span>  
  
 <span data-ttu-id="709be-984">일반적으로 사용 되는 루트 요소 (<xref:System.Windows.Window>하십시오 <xref:System.Windows.Controls.Page> 예를 들어) 인터페이스를 구현 <xref:System.Windows.Markup.INameScope>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-984">Typically used root elements (<xref:System.Windows.Window>, <xref:System.Windows.Controls.Page> for example) implement the interface <xref:System.Windows.Markup.INameScope>.</span></span> <span data-ttu-id="709be-985">이 인터페이스의 구현은 이름이 해당 범위 내에서 명확 해야 하는 적용 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-985">Implementations of this interface are expected to enforce that names be unambiguous within their scope.</span></span> <span data-ttu-id="709be-986">이 인터페이스를 정의 하는 루트 요소에는 모든 네임 스페이스 동작 경계를 정의할 수도 관련 [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-986">The root elements that define this interface also define the namescope behavior boundaries for all the related [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)].</span></span>  
  
 <span data-ttu-id="709be-987"><xref:System.Windows.FrameworkElement.Name%2A> 속성이 다른 프로세스에 대 한 식별자로도 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-987">The <xref:System.Windows.FrameworkElement.Name%2A> property also serves as an identifier for other processes.</span></span> <span data-ttu-id="709be-988">예를 들어 합니다 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 자동화 모델에서 사용할 <xref:System.Windows.FrameworkElement.Name%2A> 클라이언트 및 공급자에 대 한 AutomationId로 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-988">For instance, the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] automation model will use <xref:System.Windows.FrameworkElement.Name%2A> as the AutomationId for clients and providers.</span></span>  
  
 <span data-ttu-id="709be-989">사용 되는 문자열 값 <xref:System.Windows.FrameworkElement.Name%2A> 내부에서 부여 된 몇 가지 제한이 [X:name 지시문](~/docs/framework/xaml-services/x-name-directive.md) 정의한는 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 사양입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-989">The string values used for <xref:System.Windows.FrameworkElement.Name%2A> have some restrictions, as imposed by the underlying [x:Name Directive](~/docs/framework/xaml-services/x-name-directive.md) defined by the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] specification.</span></span> <span data-ttu-id="709be-990">가장 주목할 만한를 <xref:System.Windows.FrameworkElement.Name%2A> 문자 또는 밑줄 (_)를 시작 해야 하며 문자, 숫자 또는 밑줄만 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-990">Most notably, a <xref:System.Windows.FrameworkElement.Name%2A> must start with a letter or the underscore character (_), and must contain only letters, digits, or underscores.</span></span> <span data-ttu-id="709be-991">자세한 내용은 [WPF XAML 이름 범위](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-991">For more information, see [WPF XAML Namescopes](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).</span></span>  
  
 <span data-ttu-id="709be-992"><xref:System.Windows.FrameworkElement.Name%2A> 애니메이션을 적용할 수 있는 거의 종속성 속성 중 하나입니다 (<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> 는 `true` 메타 데이터에서) 이름 자체를 애니메이션 대상으로 하는 것에 대 한 중요 한 이기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-992"><xref:System.Windows.FrameworkElement.Name%2A> is one of the very few dependency properties that cannot be animated (<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> is `true` in metadata), because the name itself is vital for targeting an animation.</span></span> <span data-ttu-id="709be-993">데이터 바인딩을 <xref:System.Windows.FrameworkElement.Name%2A> 기술적으로 가능 하기 때문에 매우 드문 경우 이지만 데이터 바인딩된 <xref:System.Windows.FrameworkElement.Name%2A> 속성의 기본 의도 한 목적으로 사용 될 수 없습니다: 코드 숨김에 대 한 식별자 연결점을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-993">Data binding a <xref:System.Windows.FrameworkElement.Name%2A> is technically possible, but is an extremely uncommon scenario because a data-bound <xref:System.Windows.FrameworkElement.Name%2A> cannot serve the main intended purpose of the property: to provide an identifier connection point for code-behind.</span></span>  
  
<a name="dependencyPropertyInfo_Name"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="709be-994">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="709be-994">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-995">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-995">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.NameProperty>|  
|<span data-ttu-id="709be-996">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="709be-996">Metadata properties set to `true`</span></span>|<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="709be-997">다음 예제에서는 합니다 <xref:System.Windows.FrameworkElement.Name%2A> 코드에서 속성 다음 이름을 새로 만든에 등록 <xref:System.Windows.NameScope> 를 호출 하 여 <xref:System.Windows.FrameworkElement.RegisterName%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-997">The following example sets the <xref:System.Windows.FrameworkElement.Name%2A> property in code, and then registers the name into the newly created <xref:System.Windows.NameScope> by calling <xref:System.Windows.FrameworkElement.RegisterName%2A>.</span></span> <span data-ttu-id="709be-998">여기서 설명 하는 기술을 요구 사항 스토리 보드를 사용 하 여 애니메이션 효과 적용 하 여 대상으로 하는 스토리 보드 필요 하기 때문에 <xref:System.Windows.FrameworkElement.Name%2A>, 및 개체 참조에 의해 대상으로 지정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-998">The technique illustrated here is a requirement for animating with storyboards, because storyboards require targeting by the <xref:System.Windows.FrameworkElement.Name%2A>, and cannot be targeted by object reference.</span></span>  
  
 [!code-csharp[animateHeight_procedural#FEName](~/samples/snippets/csharp/VS_Snippets_Wpf/animateHeight_procedural/CSharp/AnimatedHeightExample.cs#fename)]
 [!code-vb[animateHeight_procedural#FEName](~/samples/snippets/visualbasic/VS_Snippets_Wpf/animateHeight_procedural/visualbasic/animatedheightexample.vb#fename)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NameProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty NameProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty NameProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.NameProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly NameProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ NameProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable NameProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.NameProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-999"><see cref="P:System.Windows.FrameworkElement.Name" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-999">Identifies the <see cref="P:System.Windows.FrameworkElement.Name" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnApplyTemplate">
      <MemberSignature Language="C#" Value="public virtual void OnApplyTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnApplyTemplate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnApplyTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnApplyTemplate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnApplyTemplate();" />
      <MemberSignature Language="F#" Value="abstract member OnApplyTemplate : unit -&gt; unit&#xA;override this.OnApplyTemplate : unit -&gt; unit" Usage="frameworkElement.OnApplyTemplate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="709be-1000">파생 클래스에서 재정의된 경우 애플리케이션 코드 또는 내부 프로세스에서 <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />을 호출할 때마다 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1000">When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1001">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1001">This method has no default implementation.</span></span>  
  
 <span data-ttu-id="709be-1002">템플릿은 요소의 완성 된 시각적 트리의 Template 속성에서 제공 되는 섹션을 <xref:System.Windows.Style> 요소에 적용 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1002">Templates are the section of an element's completed visual tree that comes from the Template property of a <xref:System.Windows.Style> that is applied for the element.</span></span> <span data-ttu-id="709be-1003">자세한 내용은 [스타일 지정 및 템플릿](~/docs/framework/wpf/controls/styling-and-templating.md)을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="709be-1003">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="709be-1004">파생 클래스의 <see cref="T:System.Windows.FrameworkElement" /> 여러 가지 가능한 시나리오에 대 한 알림으로이 메서드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1004">Derived classes of <see cref="T:System.Windows.FrameworkElement" /> can use this method as a notification for a variety of possible scenarios:</span></span> 
<span data-ttu-id="709be-1005">-시각적 요소 트리로의 나머지 부분을 작성 하는 코드의 고유한 구현을 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1005">-   You can call your own implementation of code that builds the remainder of an element visual tree.</span></span>  
  
<span data-ttu-id="709be-1006">-템플릿에서 제공 되는 명명 된 요소에 대 한 참조를 가져오는 것과 같은 적용 된 템플릿의 시각적 트리에 의존 하는 코드를 실행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1006">-   You can run code that relies on the visual tree from templates having been applied, such as obtaining references to named elements that came from a template.</span></span>  
  
<span data-ttu-id="709be-1007">-템플릿의 시각적 트리 완료 된 후에 의미가 있는 서비스를 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1007">-   You can introduce services that only make sense to exist after the visual tree from templates is complete.</span></span>  
  
<span data-ttu-id="709be-1008">-상태 및 기타 요인에 종속 되어 있는 템플릿 내에서 요소의 속성을 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1008">-   You can set states and properties of elements within the template that are dependent on other factors.</span></span> <span data-ttu-id="709be-1009">예를 들어 속성 값은 부모 요소를 파악 하 여만 검색할 수 있습니다 또는 클래스에 공통 된 템플릿을 사용 하 여 특정 파생 된 경우.</span><span class="sxs-lookup"><span data-stu-id="709be-1009">For instance, property values might only be discoverable by knowing the parent element, or when a specific derived class uses a common template.</span></span>  
  
<span data-ttu-id="709be-1010">구현자는 고유한 구현 하기 전에 기본 구현을 호출 항상 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1010">Implementers should always call the base implementation before their own implementation.</span></span> <span data-ttu-id="709be-1011"><see cref="T:System.Windows.FrameworkElement" /> 자체 기본값이 없는 구현이 아니라 중간 클래스 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1011"><see cref="T:System.Windows.FrameworkElement" /> itself has no default implementation, but intervening classes might.</span></span>  
  
 <span data-ttu-id="709be-1012"><see cref="T:System.Windows.Controls.Control" /> 재정의 유사한 제공 <see cref="M:System.Windows.Controls.Control.OnTemplateChanged(System.Windows.Controls.ControlTemplate,System.Windows.Controls.ControlTemplate)" />합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1012"><see cref="T:System.Windows.Controls.Control" /> offers a similar override, <see cref="M:System.Windows.Controls.Control.OnTemplateChanged(System.Windows.Controls.ControlTemplate,System.Windows.Controls.ControlTemplate)" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuClosing (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuClosing(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuClosing (e As ContextMenuEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuClosing(System::Windows::Controls::ContextMenuEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuClosing : System.Windows.Controls.ContextMenuEventArgs -&gt; unit&#xA;override this.OnContextMenuClosing : System.Windows.Controls.ContextMenuEventArgs -&gt; unit" Usage="frameworkElement.OnContextMenuClosing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="709be-1013">이벤트에 대한 데이터를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1013">Provides data about the event.</span></span></param>
        <summary><span data-ttu-id="709be-1014">처리되지 않은 <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /> 라우트된 이벤트가 해당 경로에서 이 클래스에 도달할 때마다 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1014">Invoked whenever an unhandled <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /> routed event reaches this class in its route.</span></span> <span data-ttu-id="709be-1015">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1015">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1016">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1016">This method has no default implementation.</span></span> <span data-ttu-id="709be-1017">이 메서드를 구현 하는 중간 클래스에서 상속 하는 경우에 기본 구현을 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1017">You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.</span></span>  
  
 <span data-ttu-id="709be-1018">이 메서드는 다소 비슷합니다 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드: 파생 된 클래스는 인스턴스 처리기 대신 클래스 처리기를 사용 하 여 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1018">The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</span></span> <span data-ttu-id="709be-1019">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1019">In this case the matching event is a routed event.</span></span> <span data-ttu-id="709be-1020">이벤트 인수를 원본 되려면 구현 해야 하므로 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 했을 수 있으므로 On \* 메서드는 구현 패턴은 라우트된 이벤트에 대 한 다른 계정에는 속성 (및 대부분의 경우에서에서는 이벤트가 다시 발생 하지 않아야).</span><span class="sxs-lookup"><span data-stu-id="709be-1020">The implementation pattern of the On\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</span></span> <span data-ttu-id="709be-1021">서브 클래스 <xref:System.Windows.FrameworkElement> 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1021">Subclasses of <xref:System.Windows.FrameworkElement> could choose to call private class handler methods when the event is received along the route.</span></span> <span data-ttu-id="709be-1022">잠재적 시나리오 중 하나는 이벤트의 인수를 의도적으로 처리 된 것으로 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1022">One potential scenario is to take the arguments of the event and deliberately mark the event as handled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuOpening">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuOpening (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuOpening(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuOpening (e As ContextMenuEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuOpening(System::Windows::Controls::ContextMenuEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuOpening : System.Windows.Controls.ContextMenuEventArgs -&gt; unit&#xA;override this.OnContextMenuOpening : System.Windows.Controls.ContextMenuEventArgs -&gt; unit" Usage="frameworkElement.OnContextMenuOpening e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="709be-1023">이벤트 데이터를 포함하는 <see cref="T:System.Windows.RoutedEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1023">The <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="709be-1024">처리되지 않은 <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /> 라우트된 이벤트가 해당 경로에서 이 클래스에 도달할 때마다 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1024">Invoked whenever an unhandled <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /> routed event reaches this class in its route.</span></span> <span data-ttu-id="709be-1025">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1025">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1026">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1026">This method has no default implementation.</span></span> <span data-ttu-id="709be-1027">이 메서드를 구현 하는 중간 클래스에서 상속 하는 경우에 기본 구현을 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1027">You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.</span></span>  
  
 <span data-ttu-id="709be-1028">이 메서드는 다소 비슷합니다 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드: 파생 된 클래스는 인스턴스 처리기 대신 클래스 처리기를 사용 하 여 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1028">The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</span></span> <span data-ttu-id="709be-1029">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1029">In this case the matching event is a routed event.</span></span> <span data-ttu-id="709be-1030">이벤트 인수를 원본 되려면 구현 해야 하므로 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 했을 수 있으므로 On \* 메서드는 구현 패턴은 라우트된 이벤트에 대 한 다른 계정에는 속성 (및 대부분의 경우에서에서는 이벤트가 다시 발생 하지 않아야).</span><span class="sxs-lookup"><span data-stu-id="709be-1030">The implementation pattern of the On\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</span></span> <span data-ttu-id="709be-1031">서브 클래스 <xref:System.Windows.FrameworkElement> 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1031">Subclasses of <xref:System.Windows.FrameworkElement> could choose to call private class handler methods when the event is received along the route.</span></span> <span data-ttu-id="709be-1032">잠재적 시나리오 중 하나는 이벤트의 인수를 의도적으로 처리 된 것으로 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1032">One potential scenario is to take the arguments of the event and deliberately mark the event as handled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected override void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="frameworkElement.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="709be-1033">이벤트 데이터를 포함하는 <see cref="T:System.Windows.RoutedEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1033">The <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="709be-1034">처리되지 않은 <see cref="E:System.Windows.UIElement.GotFocus" /> 이벤트가 해당 경로에서 이 요소에 도달할 때마다 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1034">Invoked whenever an unhandled <see cref="E:System.Windows.UIElement.GotFocus" /> event reaches this element in its route.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1035">일부 다른 달리 \* 기본 요소에 의해 노출 되는 메서드 <xref:System.Windows.FrameworkElement.OnGotFocus%2A> 기본 구현이 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1035">Unlike some other On\* methods exposed by the base elements, <xref:System.Windows.FrameworkElement.OnGotFocus%2A> does have a default implementation.</span></span> <span data-ttu-id="709be-1036">특히, 기본 요소의 다음 수준에서 null 구현을 재정의 하는 구현에 해당 <xref:System.Windows.UIElement.OnGotFocus%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1036">Specifically, it has an implementation that overrides the null implementation in the next level of base element down, <xref:System.Windows.UIElement.OnGotFocus%2A>.</span></span> <span data-ttu-id="709be-1037">를 호출 하면 <xref:System.Windows.FrameworkElement.OnGotFocus%2A> 키보드 포커스로 인해 현재 요소에서 이벤트 발생 하는 경우에서이 요소에 적절 한 포커스 동작을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1037">When invoked, <xref:System.Windows.FrameworkElement.OnGotFocus%2A> sets appropriate focus behavior on this element in cases where the event originated from the current element due to keyboard focus.</span></span> <span data-ttu-id="709be-1038"><xref:System.Windows.FrameworkElement.OnGotFocus%2A> 처리기 이벤트 인수를 처리, 포커스가 현재 요소에 설정 된 경우에 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1038">The <xref:System.Windows.FrameworkElement.OnGotFocus%2A> handler does not mark the event arguments as handled, even when focus is set to the current element.</span></span> <span data-ttu-id="709be-1039">이벤트의 소스는 현재 요소가 아닌 트리의 다른 요소를 처리기는 일어나지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1039">If the event's source was another element in the tree (not the current element), the handler does nothing.</span></span>  
  
 <span data-ttu-id="709be-1040">프로그램 요소에 대 한 기본 포커스 동작을 변경 하지만 이러한 방식으로 포커스 동작을 변경 수행할 수 있습니다 더 잘 전혀 포커스 가능 요소를 허용 하지 않도록 하려면이 메서드를 재정의할 수 있습니다 (참조 <xref:System.Windows.UIElement.Focusable%2A>).</span><span class="sxs-lookup"><span data-stu-id="709be-1040">You can override this method in order to change the default focus behavior on your element, but be aware that changing focus behavior in this way might be better accomplished by not allowing the element to be focusable at all (see <xref:System.Windows.UIElement.Focusable%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="709be-1041">인수에서 처리 하는 이벤트를 표시 하려는 경우에 요소 트리의 다른 부모 요소에서 이벤트 처리에 대 한 영향을 인식 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1041">If you intend to mark the event handled in the arguments, you should be aware of consequences on event handling in other parent elements in the element tree.</span></span> <span data-ttu-id="709be-1042">이 처리기는 버블링 라우팅을 사용 하는 이벤트에 역할을 하므로 현재 포커스를 설정 <paramref name="sender" /> 는 이벤트당 인수 적합 하지 는지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1042">Because this handler acts on an event with a bubbling routing, setting the focus to the current <paramref name="sender" /> per the event arguments may not be appropriate.</span></span> <span data-ttu-id="709be-1043">포커스 또는 부모 요소에 특정 컨트롤 합치기에 따라 복합 자식 요소를 이동 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1043">Focus might need to go to either a composite child element or to a parent element, depending on the compositing of certain controls.</span></span> <span data-ttu-id="709be-1044">처리 된 것으로 포커스 이벤트를 표시 하므로 전체 이벤트 라우트되는 시각적 트리를 작성 하는 컨트롤의 합치기의 일부인 경우만 권장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1044">Therefore marking a focus event as handled is only recommended if the entirety of the visual tree that the event is routing through is part of compositing of a control that you authored.</span></span></para></block>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="OnInitialized">
      <MemberSignature Language="C#" Value="protected virtual void OnInitialized (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInitialized(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInitialized (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInitialized(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnInitialized : EventArgs -&gt; unit&#xA;override this.OnInitialized : EventArgs -&gt; unit" Usage="frameworkElement.OnInitialized e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="709be-1045">이벤트 데이터를 포함하는 <see cref="T:System.Windows.RoutedEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1045">The <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="709be-1046"><see cref="E:System.Windows.FrameworkElement.Initialized" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1046">Raises the <see cref="E:System.Windows.FrameworkElement.Initialized" /> event.</span></span> <span data-ttu-id="709be-1047">이 메서드는 내부적으로 <see cref="P:System.Windows.FrameworkElement.IsInitialized" />가 <see langword="true" />로 설정될 때마다 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1047">This method is invoked whenever <see cref="P:System.Windows.FrameworkElement.IsInitialized" /> is set to <see langword="true" /> internally.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1048">이 특정 \* 메서드는 클래스 처리기 후크를 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1048">This particular On\* method is not a class handler hook.</span></span> <span data-ttu-id="709be-1049">따르지도 않습니다 정확 하 게 설정 된 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 에 \* 메서드 규칙이이 메서드를 재정의 하 고 기본 구현을 호출 하지 일치 하는 이벤트를 표시 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1049">Nor does it exactly follow the established [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] On\* method convention that the matching event could be suppressed by overriding this method and not calling the base implementation.</span></span>  
  
 <span data-ttu-id="709be-1050"><xref:System.Windows.FrameworkElement.IsInitialized%2A> 속성은 읽기 전용으로 설정할 수 없습니다 때문 <xref:System.Windows.FrameworkElement.IsInitialized%2A> 초기화 동작을 강제 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1050">Note that the <xref:System.Windows.FrameworkElement.IsInitialized%2A> property is read-only, so you cannot set <xref:System.Windows.FrameworkElement.IsInitialized%2A> to force initialization behavior.</span></span> <span data-ttu-id="709be-1051">초기화 상태 설정은 에서만 수행할 수는 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 프레임 워크입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1051">Setting the initialization state is intended to be done only by the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] framework.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="709be-1052">이 가상 메서드를 기본 구현하면 위에서 설명한 것처럼 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1052">The default implementation of this virtual method raises the event as described above.</span></span> <span data-ttu-id="709be-1053">이 동작을 유지하려면 재정의 과정에서 기본 구현을 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1053">Overrides should call the base implementation to preserve this behavior.</span></span> <span data-ttu-id="709be-1054">기본 구현을 호출 하지 않으면 뿐만 아니라 발생 하지 않을 합니다 <see cref="E:System.Windows.FrameworkElement.Initialized" /> 예상 되는 일반적으로 이벤트를 <see cref="T:System.Windows.FrameworkElement" /> 파생 클래스 이지만 두 가지 중요 한 스타일 및 테마 스타일 초기화 작업을 표시 하지 않을 수도 됩니다 이 기본 구현에 의해 구현 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1054">If you fail to call the base implementation, not only will you not raise the <see cref="E:System.Windows.FrameworkElement.Initialized" /> event as is generally expected of a <see cref="T:System.Windows.FrameworkElement" /> derived class, but you will also suppress two important style and theme style initialization operations that are implemented by this base implementation.</span></span></para></block>
        <altmember cref="M:System.Windows.FrameworkElement.OnApplyTemplate" />
        <altmember cref="E:System.Windows.FrameworkElement.Initialized" />
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected override void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPropertyChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPropertyChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="override this.OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="frameworkElement.OnPropertyChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="709be-1055">기존 값과 새 값 그리고 변경된 속성을 설명하는 이벤트 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1055">The event data that describes the property that changed, as well as old and new values.</span></span></param>
        <summary><span data-ttu-id="709be-1056">이 <see cref="T:System.Windows.FrameworkElement" />에서 종속성 속성의 유효 값이 업데이트될 때마다 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1056">Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkElement" /> has been updated.</span></span> <span data-ttu-id="709be-1057">변경된 특정 종속성 속성이 인수 매개 변수에서 보고됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1057">The specific dependency property that changed is reported in the arguments parameter.</span></span> <span data-ttu-id="709be-1058"><see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />를 재정의합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1058">Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1059">일반적으로 속성 변경 내용 또는 무효화를 검색 하려면이 메서드를 사용 하는 것이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1059">This method is not intended to generally detect property changes or invalidations.</span></span> <span data-ttu-id="709be-1060">대신 것은 일반적인 무효화 패턴의 수정에 대 한 속성의 광범위 한 분류에 대 한 특정 정보가 알려져 있는 경우.</span><span class="sxs-lookup"><span data-stu-id="709be-1060">It is instead intended for modifications of the general invalidation pattern if certain information is known about wide classifications of properties.</span></span>  
  
 <span data-ttu-id="709be-1061">이 메서드 개체의 수명 동안 여러 번 호출 될 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1061">This method is potentially invoked many times during the life of an object.</span></span> <span data-ttu-id="709be-1062">따라서 특정 속성의 메타 데이터를 무시 하 고 다음 연결 성능을 높일 수 있습니다 <xref:System.Windows.CoerceValueCallback> 또는 <xref:System.Windows.PropertyChangedCallback> 개별 속성에 대 한 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1062">Therefore, you can achieve better performance if you override the metadata of specific properties and then attach <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions for individual properties.</span></span> <span data-ttu-id="709be-1063">하지만 경우이 메서드를 사용 하는를 <xref:System.Windows.FrameworkElement> 많은 값을 상호 연관 된 종속성 속성을 포함 하는 렌더링 동작을 다시 실행 해야 다양 한 관련 속성 무효화의 경우와 같은 논리를 포함 하는 경우 또는 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1063">However, you would use this method if a <xref:System.Windows.FrameworkElement> includes a significant number of value-interrelated dependency properties, or if it includes logic such as rendering behavior that must be rerun for several related cases of property invalidations.</span></span>  
  
 <span data-ttu-id="709be-1064">점이 동일 하 게 명명 된 `OnPropertyChanged` 다른 시그니처가 있는 메서드 (매개 변수 형식은 <xref:System.ComponentModel.PropertyChangedEventArgs>)는 다양 한 클래스에 나타날 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1064">Note that there is an identically named `OnPropertyChanged` method with a different signature (the parameter type is <xref:System.ComponentModel.PropertyChangedEventArgs>) that can appear on a number of classes.</span></span> <span data-ttu-id="709be-1065">있는지 `OnPropertyChanged` 데이터 개체 알림에 사용 되 고 계약의 일부인 <xref:System.ComponentModel.INotifyPropertyChanged>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1065">That `OnPropertyChanged` is used for data object notifications, and is part of the contract for <xref:System.ComponentModel.INotifyPropertyChanged>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="709be-1066">구현에서 첫 번째 작업으로 기본 구현에서는 항상 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1066">Always call the base implementation, as the first operation in your implementation.</span></span> <span data-ttu-id="709be-1067">이렇게 하지 않으면 전체 없게 되므로 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 속성 시스템에 잘못 된 값을 보고 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1067">Failure to do this will significantly disable the entire [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system, which causes incorrect values to be reported.</span></span> <span data-ttu-id="709be-1068">특정 <see cref="T:System.Windows.FrameworkElement" /> 구현은 다양 한 표시 되는 사용자 인터페이스에 영향을 주는 속성에 대 한 적절 한 상태를 유지 관리를 담당 이기도 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1068">The specific <see cref="T:System.Windows.FrameworkElement" /> implementation is also responsible for maintaining proper state for a variety of properties that affect the visible user interface.</span></span> <span data-ttu-id="709be-1069">여기에 적절 한 시간에 스타일을 지정 하는 변경 내용에 따라 시각적 트리를 무효화 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1069">These include invalidating the visual tree based on changes to style at appropriate times.</span></span></para></block>
        <altmember cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
        <altmember cref="T:System.Windows.PropertyChangedCallback" />
      </Docs>
    </Member>
    <Member MemberName="OnRenderSizeChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnRenderSizeChanged (System.Windows.SizeChangedInfo sizeInfo);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnRenderSizeChanged(class System.Windows.SizeChangedInfo sizeInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnRenderSizeChanged (sizeInfo As SizeChangedInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnRenderSizeChanged(System::Windows::SizeChangedInfo ^ sizeInfo);" />
      <MemberSignature Language="F#" Value="override this.OnRenderSizeChanged : System.Windows.SizeChangedInfo -&gt; unit" Usage="frameworkElement.OnRenderSizeChanged sizeInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sizeInfo" Type="System.Windows.SizeChangedInfo" />
      </Parameters>
      <Docs>
        <param name="sizeInfo"><span data-ttu-id="709be-1070">변경과 관련한 이전 크기와 새 크기의 세부 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1070">Details of the old and new size involved in the change.</span></span></param>
        <summary><span data-ttu-id="709be-1071">지정된 정보를 최종적인 이벤트 데이터의 일부로 사용하여 <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1071">Raises the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> event, using the specified information as part of the eventual event data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1072">이 메서드는 <xref:System.Windows.UIElement.OnRenderSizeChanged%2A>를 재정의합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1072">This method overrides <xref:System.Windows.UIElement.OnRenderSizeChanged%2A>.</span></span> <span data-ttu-id="709be-1073">다시 설정 되며이 메서드를 호출 하는 경우는 <xref:System.Windows.FrameworkElement.ActualWidth%2A> 속성을 <xref:System.Windows.FrameworkElement.ActualHeight%2A> 속성 중 하나 또는 모두로 지정 된 내용에 따라 제공 된 인수를 변경 하 고는 하면 항상 이벤트를 발생 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1073">If you call this method you will reset the <xref:System.Windows.FrameworkElement.ActualWidth%2A> property, the <xref:System.Windows.FrameworkElement.ActualHeight%2A> property, or both, depending on what is specified as changed in the supplied arguments, and will you always raise the event.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="709be-1074">일반적인 레이아웃 시나리오에 대 한이 메서드를 재정의 하지 마십시오.</span><span class="sxs-lookup"><span data-stu-id="709be-1074">Do not override this method for typical layout scenarios.</span></span> <span data-ttu-id="709be-1075">레이아웃 시스템은 가능한 모든 레이아웃 정렬에 대 한 측정 사례를 고려 하 여 의도적으로 비동기 방식으로 작동 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1075">The layout system operates in a deliberately asynchronous way to assure that all possible layout arrange and measure cases are accounted for.</span></span> <span data-ttu-id="709be-1076">메서드를 재정의 하는 레이아웃 시스템 <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /> 고 <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> 필요한 레이아웃 사용자 지정에 대 한 일반적으로 충분 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1076">The layout system override methods <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /> and <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> are usually sufficient for any required layout customization.</span></span> <span data-ttu-id="709be-1077"><see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /> 가상으로 노출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1077"><see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /> is exposed as a virtual.</span></span> <span data-ttu-id="709be-1078">재정의할 수 있습니다 <see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /> 재 컴퍼지션에 대 한 응답에서 런타임 동작 변경 입력 컨트롤과 결합 하는 이벤트에 관련 된 예외적인 경우에 대 한 수정 하려면 정확 하지 않은 레이아웃 정보를 제공 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1078">You can override <see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /> to correct for exceptional cases where a run-time behavioral change related to input events combined with control recomposition in response might give inaccurate layout information.</span></span>  
  
<span data-ttu-id="709be-1079">파생된 클래스 (보호 되지만 선택 되지 않았습니다)에서이 메서드를 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1079">You may still override this method in derived classes (it is protected but not sealed).</span></span> <span data-ttu-id="709be-1080">항상 기본 WPF 프레임 워크 수준 렌더링 동작을 사용 하지 않도록 설정 하는 매우 구체적인 이유가 없으면 위에서 언급 한 동작을 유지 하는 기본 구현을 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1080">Always call the base implementation to preserve the behavior mentioned above, unless you have very specific reasons for disabling default WPF framework-level rendering behavior.</span></span> <span data-ttu-id="709be-1081">실패를 발생 시키려면는 <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> 이벤트 비표준 레이아웃 동작 표준 WPF 프레임 워크 수준 레이아웃 시스템 구현을 사용 하는 경우 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1081">Failing to raise the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> event will cause non-standard layout behavior if using the standard WPF framework-level layout system implementation.</span></span></para></block>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleChanged">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStyleChanged (System.Windows.Style oldStyle, System.Windows.Style newStyle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStyleChanged(class System.Windows.Style oldStyle, class System.Windows.Style newStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStyleChanged (oldStyle As Style, newStyle As Style)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStyleChanged(System::Windows::Style ^ oldStyle, System::Windows::Style ^ newStyle);" />
      <MemberSignature Language="F#" Value="abstract member OnStyleChanged : System.Windows.Style * System.Windows.Style -&gt; unit&#xA;override this.OnStyleChanged : System.Windows.Style * System.Windows.Style -&gt; unit" Usage="frameworkElement.OnStyleChanged (oldStyle, newStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldStyle" Type="System.Windows.Style" />
        <Parameter Name="newStyle" Type="System.Windows.Style" />
      </Parameters>
      <Docs>
        <param name="oldStyle"><span data-ttu-id="709be-1082">이전 스타일입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1082">The old style.</span></span></param>
        <param name="newStyle"><span data-ttu-id="709be-1083">새 스타일입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1083">The new style.</span></span></param>
        <summary><span data-ttu-id="709be-1084">이 요소에 사용하는 스타일이 변경되어 레이아웃이 무효화되면 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1084">Invoked when the style in use on this element changes, which will invalidate the layout.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1085">이 메서드는 스타일 변경 조건 정보는 내부 플래그를 설정 하는 기본 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1085">This method has a default implementation that sets an internal flag that notes the style changed condition.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="709be-1086">일반적으로이 메서드를 재정의할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1086">You should not typically have to override this method.</span></span> <span data-ttu-id="709be-1087">측정값을 포함 하는 스타일을 변경 또는 변경 구현 하는 일반적인 가정 하 고, 다른 렌더링 주기를 트리거할지 이미 정렬 <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />  /  <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />, 또는 기본값입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1087">Any change to a style that involves a measure or arrange change would already trigger another render cycle, assuming a typical implementation of <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> / <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />, or the defaults.</span></span> <span data-ttu-id="709be-1088">재정의 <see cref="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" /> 적합할 경우에 <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />  /  <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /> 구현 된 최적화 하거나 부분 업데이트를 지 원하는 있지만 보다 직접적 스타일에 변경 내용을 적용 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1088">Overrides of <see cref="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" /> might be appropriate if your <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> / <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /> implementations were deliberately optimizing or supporting partial updates, but still wanted to apply changes to styles more directly.</span></span> <span data-ttu-id="709be-1089">(부분 업데이트에 대 한 증분 여러 호출을 방지 하기 위해 것 <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /> 고 <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> 모든 자식 요소에 대해).</span><span class="sxs-lookup"><span data-stu-id="709be-1089">(The partial updates would be an attempt to avoid multiple incremental calls to <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /> and <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> on any child elements).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnToolTipClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnToolTipClosing (System.Windows.Controls.ToolTipEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnToolTipClosing(class System.Windows.Controls.ToolTipEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnToolTipClosing (e As ToolTipEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnToolTipClosing(System::Windows::Controls::ToolTipEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnToolTipClosing : System.Windows.Controls.ToolTipEventArgs -&gt; unit&#xA;override this.OnToolTipClosing : System.Windows.Controls.ToolTipEventArgs -&gt; unit" Usage="frameworkElement.OnToolTipClosing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ToolTipEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="709be-1090">이벤트에 대한 데이터를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1090">Provides data about the event.</span></span></param>
        <summary><span data-ttu-id="709be-1091">처리되지 않은 <see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /> 라우트된 이벤트가 해당 경로에서 이 클래스에 도달할 때마다 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1091">Invoked whenever an unhandled <see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /> routed event reaches this class in its route.</span></span> <span data-ttu-id="709be-1092">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1092">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1093">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1093">This method has no default implementation.</span></span> <span data-ttu-id="709be-1094">이 메서드를 구현 하는 중간 클래스에서 상속 하는 경우에 기본 구현을 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1094">You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.</span></span>  
  
 <span data-ttu-id="709be-1095">이 메서드는 다소 비슷합니다 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드: 파생 된 클래스는 인스턴스 처리기 대신 클래스 처리기를 사용 하 여 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1095">The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</span></span> <span data-ttu-id="709be-1096">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1096">In this case the matching event is a routed event.</span></span> <span data-ttu-id="709be-1097">이벤트 인수를 원본 되려면 구현 해야 하므로 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 했을 수 있으므로 On \* 메서드는 구현 패턴은 라우트된 이벤트에 대 한 다른 계정에는 속성 (및 대부분의 경우에서에서는 이벤트가 다시 발생 하지 않아야).</span><span class="sxs-lookup"><span data-stu-id="709be-1097">The implementation pattern of the On\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</span></span> <span data-ttu-id="709be-1098">서브 클래스 <xref:System.Windows.FrameworkElement> 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1098">Subclasses of <xref:System.Windows.FrameworkElement> could choose to call private class handler methods when the event is received along the route.</span></span> <span data-ttu-id="709be-1099">잠재적 시나리오 중 하나는 이벤트의 인수를 의도적으로 처리 된 것으로 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1099">One potential scenario is to take the arguments of the event and deliberately mark the event as handled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnToolTipOpening">
      <MemberSignature Language="C#" Value="protected virtual void OnToolTipOpening (System.Windows.Controls.ToolTipEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnToolTipOpening(class System.Windows.Controls.ToolTipEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnToolTipOpening (e As ToolTipEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnToolTipOpening(System::Windows::Controls::ToolTipEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnToolTipOpening : System.Windows.Controls.ToolTipEventArgs -&gt; unit&#xA;override this.OnToolTipOpening : System.Windows.Controls.ToolTipEventArgs -&gt; unit" Usage="frameworkElement.OnToolTipOpening e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ToolTipEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="709be-1100">이벤트에 대한 데이터를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1100">Provides data about the event.</span></span></param>
        <summary><span data-ttu-id="709be-1101"><see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /> 라우트된 이벤트가 해당 경로에서 이 클래스에 도달할 때마다 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1101">Invoked whenever the <see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /> routed event reaches this class in its route.</span></span> <span data-ttu-id="709be-1102">이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1102">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1103">이 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1103">This method has no default implementation.</span></span> <span data-ttu-id="709be-1104">이 메서드를 구현 하는 중간 클래스에서 상속 하는 경우에 기본 구현을 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1104">You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.</span></span>  
  
 <span data-ttu-id="709be-1105">이 메서드는 다소 비슷합니다 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 \* 메서드: 파생 된 클래스는 인스턴스 처리기 대신 클래스 처리기를 사용 하 여 일치 하는 이벤트를 처리 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1105">The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</span></span> <span data-ttu-id="709be-1106">이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1106">In this case the matching event is a routed event.</span></span> <span data-ttu-id="709be-1107">이벤트 인수를 원본 되려면 구현 해야 하므로 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 했을 수 있으므로 On \* 메서드는 구현 패턴은 라우트된 이벤트에 대 한 다른 계정에는 속성 (및 대부분의 경우에서에서는 이벤트가 다시 발생 하지 않아야).</span><span class="sxs-lookup"><span data-stu-id="709be-1107">The implementation pattern of the On\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</span></span> <span data-ttu-id="709be-1108">서브 클래스 <xref:System.Windows.FrameworkElement> 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1108">Subclasses of <xref:System.Windows.FrameworkElement> could choose to call private class handler methods when the event is received along the route.</span></span> <span data-ttu-id="709be-1109">하나의 잠재적인 시나리오는 이벤트의 인수를 사용 하 고 경로 줄이기 위해 처리 된 것으로 의도적으로 이벤트를 표시 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1109">One potential scenario is to take the arguments of the event and deliberately mark the event as handled to shorten the route.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberSignature Language="F#" Value="override this.OnVisualParentChanged : System.Windows.DependencyObject -&gt; unit" Usage="frameworkElement.OnVisualParentChanged oldParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent"><span data-ttu-id="709be-1110">이전 부모 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1110">The old parent element.</span></span> <span data-ttu-id="709be-1111">요소가 이전에 시각적 부모를 포함하지 않았음을 나타내기 위해 <see langword="null" />이 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1111">May be <see langword="null" /> to indicate that the element did not have a visual parent previously.</span></span></param>
        <summary><span data-ttu-id="709be-1112">시각적 트리에서 이 요소의 부모가 변경될 때 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1112">Invoked when the parent of this element in the visual tree is changed.</span></span> <span data-ttu-id="709be-1113"><see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />를 재정의합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1113">Overrides <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1114">시각적 트리는 컬렉션과 같은 시각적으로 렌더링 되지 않는 요소를 생략 하기 때문에 잠재적으로 다른 논리적 트리는 하 고 해당 테마 및 스타일 합치기를 기준으로 일부 요소를 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1114">The visual tree is potentially different from the logical tree because it omits elements that do not render visually, such as collections, and expands some elements on the basis of their theme and style compositing.</span></span> <span data-ttu-id="709be-1115">자세한 내용은 [WPF의 트리](~/docs/framework/wpf/advanced/trees-in-wpf.md)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="709be-1115">For more information, see [Trees in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="709be-1116">새 부모에 대 한 쿼리, 다양 한 초기화 이벤트를 발생 시키는 및 초기화 상태에 대 한 내부 플래그를 설정 합니다.이 가상 메서드의 기본 구현 된 <see cref="T:System.Windows.FrameworkElement" /> 적절 하 게 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1116">The default implementation of this virtual method queries for the new parent, raises various initialization events, and sets internal flags about initialization state of the <see cref="T:System.Windows.FrameworkElement" /> as appropriate.</span></span> <span data-ttu-id="709be-1117">마지막으로으로 선언 된 연속적인 기본 구현을 호출 <see cref="T:System.Windows.UIElement" />를 차례로 호출 하는 기준 <see cref="T:System.Windows.Media.Visual" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1117">Finally, it calls the successive base implementations as declared by <see cref="T:System.Windows.UIElement" />, which in turn calls its base in <see cref="T:System.Windows.Media.Visual" />.</span></span> <span data-ttu-id="709be-1118">항상이 동작을 유지 하는 기본 구현을 호출, 그렇지 않으면 다른 요소의 자식으로 선언 하는 경우이 요소에 대 한 요소 트리 동작 하지 않을 예상 대로입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1118">Always call the base implementation to preserve this behavior, otherwise the element tree behavior for this element when declared as a child of another element may not be as expected.</span></span>  
  
<span data-ttu-id="709be-1119">몇 가지 기존 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 클래스 예를 들어이 메서드를 재정의 합니다. <see cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />, <see cref="M:System.Windows.Controls.ListBoxItem.OnVisualParentChanged(System.Windows.DependencyObject)" />합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1119">A few existing [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] classes override this method, for example: <see cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />, <see cref="M:System.Windows.Controls.ListBoxItem.OnVisualParentChanged(System.Windows.DependencyObject)" />.</span></span> <span data-ttu-id="709be-1120">가장 일반적인 시나리오 새 부모 특정 형식 되도록 적용 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1120">The most common scenario is to enforce that the new parent must be a particular type.</span></span> <span data-ttu-id="709be-1121">새 부모 형식 테스트를 통과 하지 못하면 예외를 throw 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1121">This might involve throwing an exception if the new parent failed some manner of type test.</span></span> <span data-ttu-id="709be-1122">이 시나리오의 특수 버전 목록 항목 및 메뉴 항목에 사용할 수 없는 부모 외부 visual 저장 하기에 적절 한 컬렉션을 소유 하는 구현에 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1122">A specialized version of this scenario exists in implementations for list items and menu items, which do not make any sense outside a parent visual that owns an appropriate collection to store them in.</span></span> <span data-ttu-id="709be-1123">Note "일반" 마이그레이션된다 하지 않고 일시적으로 요소를 부모 재지정에 의존 하는 디자이너 시나리오 수 있으므로 이러한 경우 반드시 예외를 발생 하 고 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1123">Note that these cases do not necessarily raise exceptions, because there might be designer scenarios that rely on reparenting elements that are momentarily without their "regular" parents.</span></span>  
  
<span data-ttu-id="709be-1124">일반적으로 루트 요소와 같은 특정 요소에서이 메서드를 재정의 <see cref="T:System.Windows.Window" />합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1124">This method is also overridden in certain elements that are typically the root element, such as  <see cref="T:System.Windows.Window" />.</span></span> <span data-ttu-id="709be-1125">또 다른 경우에는 있지만 태그에서는 루트 요소는 요소는 자동 생성 컴파일된 논리 트리의 큰 인프라 (같은 <see cref="T:System.Windows.Controls.Page" />).</span><span class="sxs-lookup"><span data-stu-id="709be-1125">Another case is elements that are the apparent root element in markup but which autogenerate a greater infrastructure in a compiled logical tree (such as <see cref="T:System.Windows.Controls.Page" />).</span></span> <span data-ttu-id="709be-1126">합니다 <see cref="T:System.Windows.Window" /> 고 <see cref="T:System.Windows.Controls.Page" /> 구현에서는 메서드가 봉인 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1126">The <see cref="T:System.Windows.Window" /> and <see cref="T:System.Windows.Controls.Page" /> implementations deliberately seal the method.</span></span></para></block>
        <altmember cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />
      </Docs>
    </Member>
    <Member MemberName="OverridesDefaultStyle">
      <MemberSignature Language="C#" Value="public bool OverridesDefaultStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OverridesDefaultStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property OverridesDefaultStyle As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OverridesDefaultStyle { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OverridesDefaultStyle : bool with get, set" Usage="System.Windows.FrameworkElement.OverridesDefaultStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-1127">이 요소가 테마 스타일의 스타일 속성을 포함할지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1127">Gets or sets a value that indicates whether this element incorporates style properties from theme styles.</span></span></summary>
        <value><span data-ttu-id="709be-1128">이 요소가 테마 스타일 속성을 사용하지 않으면 <see langword="true" />입니다. 이 경우 스타일에서 생성되는 모든 속성은 로컬 애플리케이션 스타일에서 가져오며, 테마 스타일 속성은 적용되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1128"><see langword="true" /> if this element does not use theme style properties; all style-originating properties come from local application styles, and theme style properties do not apply.</span></span> <span data-ttu-id="709be-1129">애플리케이션 스타일이 먼저 적용된 다음 애플리케이션 스타일에 구체적으로 설정되어 있지 않은 속성에 대해 테마 스타일이 적용되면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1129"><see langword="false" /> if application styles apply first, and then theme styles apply for properties that were not specifically set in application styles.</span></span> <span data-ttu-id="709be-1130">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1130">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1131">이 속성의 가장 일반적인 사용법은 테마가 지정 된 스타일을 제공 하는 스타일의 setter 내에서 간접적으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1131">The most common usage of this property is an indirect usage within the setter of a style that is supplying a themed style.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="709be-1132">설정 하는 경우 <xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A> 에 `true` 컨트롤에 표시 되지 것입니다 테마 스타일에 의해 제공 된 기본 컨트롤 템플릿이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1132">If you set <xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A> to `true` on a control, you will be suppressing the default control template supplied by the theme styles.</span></span> <span data-ttu-id="709be-1133">콘텐츠 프레 젠 터와 기본 제공 하는 다른 복합 요소를 일반적으로 컨트롤 템플릿에 포함 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 기능 및 컨트롤에 대 한 시각화 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1133">That control template typically includes the content presenter and other composited elements that provide basic [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] functionality and visualization for the control.</span></span> <span data-ttu-id="709be-1134">기본 테마 스타일과 동일한 기능을 지원 하려면 컨트롤을 원한다 면 동일한 구조를 복제 하는 컨트롤 템플릿 사용 하 여 대체 스타일을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1134">If you want the control to continue to support the same features as the default theme styles, you must supply an alternate style with a control template that replicates the same structure.</span></span> <span data-ttu-id="709be-1135">자세한 내용은 [컨트롤 제작 개요](~/docs/framework/wpf/controls/control-authoring-overview.md)를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="709be-1135">For more information, see [Control Authoring Overview](~/docs/framework/wpf/controls/control-authoring-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_OverridesDefaultStyle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="709be-1136">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="709be-1136">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-1137">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-1137">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.OverridesDefaultStyleProperty>|  
|<span data-ttu-id="709be-1138">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="709be-1138">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverridesDefaultStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OverridesDefaultStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OverridesDefaultStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.OverridesDefaultStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OverridesDefaultStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OverridesDefaultStyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable OverridesDefaultStyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.OverridesDefaultStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-1139"><see cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1139">Identifies the <see cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ Parent { System::Windows::DependencyObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.DependencyObject" Usage="System.Windows.FrameworkElement.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-1140">이 요소의 논리적 부모 요소를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1140">Gets the logical parent  element of this element.</span></span></summary>
        <value><span data-ttu-id="709be-1141">이 요소의 논리적 부모입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1141">This element's logical parent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1142"><xref:System.Windows.FrameworkElement.Parent%2A> 않을 `null` 요소 인스턴스화 되었지만 하지만 결국 페이지 루트 수준 요소 또는 애플리케이션 개체에 연결 되는 모든 논리적 트리에 연결 되지 않은 경우에서.</span><span class="sxs-lookup"><span data-stu-id="709be-1142"><xref:System.Windows.FrameworkElement.Parent%2A> may be `null` in cases where an element was instantiated, but is not attached to any logical tree that eventually connects to the page level root element, or the application object.</span></span>  
  
 <span data-ttu-id="709be-1143">요소의 논리적 부모 애플리케이션의 기능에 따라 변경 될 수 있습니다 하 고이 속성의 값을 유지 하면 해당 변경 내용이 반영 되지 note 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1143">Note that the logical parent of an element can potentially change depending on your application's functionality, and keeping the value of this property will not reflect that change.</span></span> <span data-ttu-id="709be-1144">필요한 직전에 일반적으로 값을 가져옵니다 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1144">You typically should get the value immediately before you need it.</span></span>  
  
 <span data-ttu-id="709be-1145">참조 [WPF의 트리](~/docs/framework/wpf/advanced/trees-in-wpf.md) 논리 트리 순회에 대 한 자세한 내용 및 시나리오에 대 한 위치를 사용 하 여 <xref:System.Windows.FrameworkElement.Parent%2A> 부모 요소의 기술로 검색 적합 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1145">See [Trees in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md) for more information about logical tree  traversal, and the scenarios where using  <xref:System.Windows.FrameworkElement.Parent%2A> as a technique of parent element discovery is appropriate.</span></span>  
  
 <span data-ttu-id="709be-1146">속성 엔진은 잠재적으로 다시 계산 요소의 모든 속성 값 부모가 때 일부 속성 논리 트리를 통해 값을 상속 하기 때문에 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1146">The property engine will potentially recalculate all property values of an element when it is reparented, because some properties inherit values through the logical tree.</span></span> <span data-ttu-id="709be-1147"><xref:System.Windows.FrameworkElement.DataContext%2A> 적용 되는 바인딩 요소는 부모를 재지정할 경우 변경할 수도 있습니다에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1147">The <xref:System.Windows.FrameworkElement.DataContext%2A> that applies for bindings can also change when elements are reparented.</span></span>  
  
 <span data-ttu-id="709be-1148">요소의 부모는 일반적으로을 통해 변경할 컬렉션 조작, 전용을 사용 하 여 추가 또는 제거 메서드 또는 요소의 콘텐츠 속성을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1148">Changing an element's parent is typically only done through manipulation of collections, by using dedicated add or remove methods, or through setting content properties of elements.</span></span>  
  
 <span data-ttu-id="709be-1149">사용에 대 한 가장 일반적인 시나리오는 <xref:System.Windows.FrameworkElement.Parent%2A> 참조를 가져온 다음 가져온 후 다양 한 속성이 <xref:System.Windows.FrameworkElement> 부모 개체에서 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1149">The most typical scenario for using the <xref:System.Windows.FrameworkElement.Parent%2A> property is to obtain a reference and then get various <xref:System.Windows.FrameworkElement> property values from the parent.</span></span> <span data-ttu-id="709be-1150">템플릿에 대해서는 <xref:System.Windows.FrameworkElement.Parent%2A> 템플릿의 결국 됩니다 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1150">For templates, the <xref:System.Windows.FrameworkElement.Parent%2A> of the template eventually will be `null`.</span></span> <span data-ttu-id="709be-1151">이 지점을 벗어나 템플릿을 실제로 적용 되는 논리 트리로 확장을 사용 하 여 <xref:System.Windows.FrameworkElement.TemplatedParent%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1151">To get past this point and extend into the logical tree where the template is actually applied, use <xref:System.Windows.FrameworkElement.TemplatedParent%2A>.</span></span>  
  
 <span data-ttu-id="709be-1152">이 속성은 논리적 트리 부모와에서 다른 경우의 시각적 트리 부모를 보고 하지 note 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1152">Note that this property does not report visual tree parents in cases where these vary from the logical tree parents.</span></span> <span data-ttu-id="709be-1153">시각적 트리 부모 일반 애플리케이션의 경우 일반적으로 중요 되지 않지만 특정 시각적 수준 사례에 대 한 원하는 부모 요소가 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1153">Visual tree parents are not typically important for general application cases but may be the desired parent elements for certain visual level cases.</span></span> <span data-ttu-id="709be-1154"><xref:System.Windows.Media.VisualTreeHelper>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="709be-1154">See <xref:System.Windows.Media.VisualTreeHelper>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="709be-1155">다음 예제에서는 요소의 부모를 확인 하 고 다음 부모 개체에서 속성 값을 사용 하 여 일치 하 고 자식 요소의 속성을 설정 하는 코드를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1155">The following example shows code that checks for an element's parent, and then uses property values from the parent to set properties on the child element to match.</span></span> <span data-ttu-id="709be-1156">이 경우 이들은 렌더링 크기에 영향을 주는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1156">In this case these are properties that affect the rendering size.</span></span>  
  
 [!code-csharp[GeometryDesigner#FEParentProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometryDesigner/CSharp/Window1.xaml.cs#feparentproperty)]
 [!code-vb[GeometryDesigner#FEParentProperty](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometryDesigner/visualbasic/window1.xaml.vb#feparentproperty)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.TemplatedParent" />
        <altmember cref="T:System.Windows.LogicalTreeHelper" />
      </Docs>
    </Member>
    <Member MemberName="ParentLayoutInvalidated">
      <MemberSignature Language="C#" Value="protected internal virtual void ParentLayoutInvalidated (System.Windows.UIElement child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void ParentLayoutInvalidated(class System.Windows.UIElement child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub ParentLayoutInvalidated (child As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void ParentLayoutInvalidated(System::Windows::UIElement ^ child);" />
      <MemberSignature Language="F#" Value="abstract member ParentLayoutInvalidated : System.Windows.UIElement -&gt; unit&#xA;override this.ParentLayoutInvalidated : System.Windows.UIElement -&gt; unit" Usage="frameworkElement.ParentLayoutInvalidated child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="child"><span data-ttu-id="709be-1157">변경을 보고하는 자식 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1157">The child element reporting the change.</span></span></param>
        <summary><span data-ttu-id="709be-1158"><see cref="T:System.Windows.FrameworkElement" />의 특수화된 하위 클래스에서 증분 레이아웃 구현을 지원합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1158">Supports incremental layout implementations in specialized subclasses of <see cref="T:System.Windows.FrameworkElement" />.</span></span> <span data-ttu-id="709be-1159">레이아웃 중 자식 요소에서 부모의 측정 또는 정렬 전달에 영향을 미치는 것으로 표시된 메타데이터의 속성을 무효화한 경우 <see cref="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" />가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1159"><see cref="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" /> is invoked when a child element has invalidated a property that is marked in metadata as affecting the parent's measure or arrange passes during layout.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1160">이 요소에 자식 요소는 일부 속성 무효화 및 속성으로 표시 되어 있으면 <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> 또는 <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> 등록 하는 동안 속성 메타 데이터에이 메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1160">If this element has a child element on which some property was invalidated and the property was marked as <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> or <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> in property metadata during registration, this method is invoked.</span></span> <span data-ttu-id="709be-1161">메서드 호출에는이 요소 레이아웃의 부분 (증분) 업데이트를 지 원하는 경우 특정 자식 요소에 다시 측정 해야 부모 요소를 알립니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1161">The method invocation notifies the parent element which particular child element must be re-measured if this element supports partial (incremental) update of layout.</span></span>  
  
 <span data-ttu-id="709be-1162">기본적으로 <xref:System.Windows.FrameworkElement> 증분 레이아웃을 지원 하지 않습니다 고는 <xref:System.Windows.FrameworkElement> 이 클래스 메서드는 기본 구현이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1162">By default, <xref:System.Windows.FrameworkElement> does not support incremental layout, and in the <xref:System.Windows.FrameworkElement> class this method has no default implementation.</span></span> <span data-ttu-id="709be-1163">시나리오는이 메서드를 재정의 해야 하지만 기본 레이아웃 시스템 동작을 수정 해야 하기 때문에 일반적이 지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1163">The scenario where overriding this method would be necessary is not common, because it requires you to modify the default layout system behavior.</span></span>  
  
 <span data-ttu-id="709be-1164">WPF 프레임 워크 수준 레이아웃 시스템 보다 더 제한적인 가능한 자식 요소에 대 한 형식 제한을 클래스의 경우에 이러한 구현 방식을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1164">An example implementation scenario might be if a class had type limitations for possible child elements that are significantly more restrictive than the WPF framework-level layout system.</span></span> <span data-ttu-id="709be-1165">이러한 사용자 지정 요소, 특성으로 인해 속성 변경 내용은 지연 시킬 수 의도적으로 일부 사용자 지정 레이아웃 동작을 구현 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="709be-1165">Because of the nature of these custom elements, property changes could be deliberately deferred when you implement some custom layout behavior.</span></span> <span data-ttu-id="709be-1166">예를 들어 특정 종류의 변경은 일반적으로 다른 레이아웃이 전달 될 수 패스 렌더링 되는 자식 요소를 최적화 하려고 하는 측정값/정렬 메서드 재정의 지연 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1166">For instance, measure/arrange method overrides, which try to optimize the child element render pass, could be deferred for certain types of changes that would ordinarily result in another layout pass.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public override sealed System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberSignature Language="F#" Value="override this.PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject" Usage="frameworkElement.PredictFocus direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction"><span data-ttu-id="709be-1167">예상 포커스 변경을 결정할 방향입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1167">The direction for which a prospective focus change should be determined.</span></span></param>
        <summary><span data-ttu-id="709be-1168">제공된 포커스 이동 방향에 대해 이 요소를 기준으로 포커스를 받을 다음 요소를 결정하며 실제로 포커스를 이동하지는 않습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1168">Determines the next element that would receive focus relative to this element for a provided focus movement direction, but does not actually move the focus.</span></span></summary>
        <returns><span data-ttu-id="709be-1169">포커스를 실제로 이동하면 포커스가 이동할 다음 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1169">The next element that focus would move to if focus were actually traversed.</span></span> <span data-ttu-id="709be-1170">제공된 방향에 대해 이 요소를 기준으로 포커스를 이동할 수 없는 경우 <see langword="null" />이 반환될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1170">May return <see langword="null" /> if focus cannot be moved relative to this element for the provided direction.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1171"><xref:System.Windows.FrameworkElement.MoveFocus%2A> 실제로 포커스를 이동 하는 관련된 방법이입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1171"><xref:System.Windows.FrameworkElement.MoveFocus%2A> is the related method that actually does move focus.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="709be-1172">다음 예제에서는 몇 가지 가능한 단추 입력 가능한 나타내는 각 단추를 처리 하는 처리기 구현 <xref:System.Windows.Input.FocusNavigationDirection>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1172">The following example implements a handler that handles several possible button inputs, each button representing a possible <xref:System.Windows.Input.FocusNavigationDirection>.</span></span> <span data-ttu-id="709be-1173">처리기를 호출 하 고 현재 키보드 포커스가 있는 요소를 추적 <xref:System.Windows.FrameworkElement.PredictFocus%2A> 해당 요소에 적절 한 지정 <xref:System.Windows.Input.FocusNavigationDirection> 에 대 한 초기화로는 <xref:System.Windows.Input.TraversalRequest> 제공 하는 매개 변수를 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1173">The handler tracks the element with current keyboard focus, and calls <xref:System.Windows.FrameworkElement.PredictFocus%2A> on that element, and specifies the appropriate <xref:System.Windows.Input.FocusNavigationDirection> as initialization for the <xref:System.Windows.Input.TraversalRequest> type parameter provided.</span></span> <span data-ttu-id="709be-1174">해당 요소를 이동 하는 대신 <xref:System.Windows.FrameworkElement.MoveFocus%2A> 것, 처리기 시각화를 위해 예측된 포커스 대상의 실제 크기를 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1174">Instead of moving to that element as <xref:System.Windows.FrameworkElement.MoveFocus%2A> would do, the handler changes the physical dimensions of the predicted focus destination for visualization purposes.</span></span>  
  
 [!code-csharp[FocusSample#FEPredictFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#fepredictfocus)]
 [!code-vb[FocusSample#FEPredictFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#fepredictfocus)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="709be-1175"><see cref="T:System.Windows.Input.TraversalRequest" />에서 <see cref="F:System.Windows.Input.FocusNavigationDirection.Next" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Previous" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.First" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Last" /> 중 한 방향을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1175">Specified one of the following directions in the <see cref="T:System.Windows.Input.TraversalRequest" />: <see cref="F:System.Windows.Input.FocusNavigationDirection.Next" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Previous" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.First" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Last" />.</span></span> <span data-ttu-id="709be-1176">이러한 방향은 <see cref="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />에 사용할 수 없지만 <see cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />에는 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1176">These directions are not legal for <see cref="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" /> (but they are legal for <see cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />).</span></span></exception>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberSignature Language="F#" Value="member this.RegisterName : string * obj -&gt; unit" Usage="frameworkElement.RegisterName (name, scopedElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="709be-1177">지정된 이름-개체 매핑에 사용할 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1177">Name to use for the specified name-object mapping.</span></span></param>
        <param name="scopedElement"><span data-ttu-id="709be-1178">매핑을 위한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1178">Object for the mapping.</span></span></param>
        <summary><span data-ttu-id="709be-1179"><see cref="T:System.Windows.NameScope" /> 등록 메서드에 대한 액세스를 간소화하는 접근자를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1179">Provides an accessor that simplifies access to the <see cref="T:System.Windows.NameScope" /> registration method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1180">이 메서드는 호출에 대 한 편의 메서드 <xref:System.Windows.NameScope.RegisterName%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1180">This method is a convenience method for calling <xref:System.Windows.NameScope.RegisterName%2A>.</span></span> <span data-ttu-id="709be-1181">구현은 해당 발견할 때까지 부모 요소로 라우트됩니다 확인 됩니다 <xref:System.Windows.NameScope> 를 구현 하는 요소를 검색 하 여 액세스할 수 있는 구현 <xref:System.Windows.Markup.INameScope>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1181">The implementation will check successive parent elements until it finds the applicable <xref:System.Windows.NameScope> implementation, which is found by finding an element that implements <xref:System.Windows.Markup.INameScope>.</span></span> <span data-ttu-id="709be-1182">이름 범위에 대 한 자세한 내용은 참조 하세요. [WPF XAML 이름 범위](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1182">For more information about namescopes, see [WPF XAML Namescopes](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).</span></span>  
  
 <span data-ttu-id="709be-1183">호출 <xref:System.Windows.FrameworkElement.RegisterName%2A> 코드에서 만들 때 애플리케이션에 대 한 애니메이션 스토리 보드를 올바르게 연결 하기 위해 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1183">Calling <xref:System.Windows.FrameworkElement.RegisterName%2A> is necessary in order to correctly hook up animation storyboards for applications when created in code.</span></span> <span data-ttu-id="709be-1184">Storyboard 속성 키 중 하나 이므로 <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>, 런타임 이름 조회를 사용 하 여 대상 요소에 대 한 참조를 수행할 수 있게 되는 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1184">This is because one of the key storyboard properties, <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>, uses a run-time name lookup instead of being able to take a reference to a target element.</span></span> <span data-ttu-id="709be-1185">해당 요소는 코드에서 참조 하 여 액세스할 수 있는 경우에 마찬가지입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1185">This is true even if that element is accessible by reference from the code.</span></span> <span data-ttu-id="709be-1186">스토리 보드 대상에 대 한 이름을 등록 해야 하는 이유는 무엇에 대 한 자세한 내용은 참조 하세요. [스토리 보드 개요](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1186">For more information on why you need to register names for storyboard targets, see [Storyboards Overview](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).</span></span>  
  
   
  
## Examples  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#NameScopeExample](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/ScopeExample.cs#namescopeexample)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#NameScopeExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/scopeexample.vb#namescopeexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.NameScope.RegisterName(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveLogicalChild">
      <MemberSignature Language="C#" Value="protected internal void RemoveLogicalChild (object child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RemoveLogicalChild(object child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub RemoveLogicalChild (child As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void RemoveLogicalChild(System::Object ^ child);" />
      <MemberSignature Language="F#" Value="member this.RemoveLogicalChild : obj -&gt; unit" Usage="frameworkElement.RemoveLogicalChild child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="child"><span data-ttu-id="709be-1187">제거할 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1187">The element to remove.</span></span></param>
        <summary><span data-ttu-id="709be-1188">이 요소의 논리적 트리에서 제공된 개체를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1188">Removes the provided object from this element's logical tree.</span></span> <span data-ttu-id="709be-1189">이 삭제 작업과 동기화된 상태를 유지하기 위해 <see cref="T:System.Windows.FrameworkElement" />가 영향을 받는 논리적 트리 부모 포인터를 업데이트합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1189"><see cref="T:System.Windows.FrameworkElement" /> updates the affected logical tree parent pointers to keep in sync with this deletion.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1190">요소의 논리적 자식을 나타내는 개체에는 컬렉션의 구현에이 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1190">Use this method for the implementation of collections on objects that represent logical children of an element.</span></span> <span data-ttu-id="709be-1191">속성 getter 또는 setter의 클래스 처리기에서이 작업을 수행할 수 있습니다 `Changed` 이벤트, 생성자 컬렉션 내에서 형식 자체 또는 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1191">This might be done in property getters or setters, class handlers of `Changed` events, constructors, or within the collection types themselves.</span></span>  
  
 <span data-ttu-id="709be-1192">컨트롤 작성자에 대 한이 수준에서 논리 트리를 조작 하지 않는 좋습니다, 제공 된 기본 컨트롤 클래스의 정적 콘텐츠 모델이 모두 적절 한.</span><span class="sxs-lookup"><span data-stu-id="709be-1192">For control authors, manipulating the logical tree at this level is not the recommended practice, unless none of the provided base control class' content models are appropriate.</span></span> <span data-ttu-id="709be-1193">하위 수준 클래스는 것이 좋습니다 <xref:System.Windows.Controls.ContentControl>, <xref:System.Windows.Controls.ItemsControl>, 및 <xref:System.Windows.Controls.HeaderedItemsControl>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1193">Consider subclassing at the level of <xref:System.Windows.Controls.ContentControl>, <xref:System.Windows.Controls.ItemsControl>, and <xref:System.Windows.Controls.HeaderedItemsControl>.</span></span> <span data-ttu-id="709be-1194">이러한 클래스는 전용 통해 논리적 자식의 특정 적용을 사용 하 여 콘텐츠 모델을 제공 [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]에서 일반적으로 사용 가능한 다른 기능에 대 한 지원 뿐만 아니라는 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 템플릿 통한 스타일 지정과 같은 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1194">These classes provide a content model with particular enforcement of logical children through dedicated [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], as well as support for other features typically desirable in a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] control such as styling through templates.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="709be-1195">다음 예제에서는 구현 하는 `Child` 사용자 지정 속성 <xref:System.Windows.FrameworkElement> 수행 하는 자체 시각적 계층 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1195">The following example implements a `Child` property on a custom <xref:System.Windows.FrameworkElement> that does its own visual layer implementation.</span></span> <span data-ttu-id="709be-1196">속성의 setter는 이전 값을 논리적 트리를 뿐만 아니라 클래스 관련 시각적 컬렉션에서 제거 값이 변경 되도록 설계 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1196">The property's setter is designed so that if the value changes, the old value is removed from the logical tree, as well as a class-specific visual collection.</span></span> <span data-ttu-id="709be-1197">값은 캐시 및 한 새 값을 표준 WPF 프레임 워크 수준 논리적 트리 및 사용자 지정 시각적 컬렉션에 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1197">The values are cached, and then the new value is added to both the standard WPF framework level logical tree and the custom visual collection.</span></span>  
  
 [!code-csharp[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/csharp/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/CSharp/ParticleEffectExamples/OverlayRenderDecorator.cs#addremovelogicalchild)]
 [!code-vb[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/visualbasic/particleeffectexamples/overlayrenderdecorator.vb#addremovelogicalchild)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RequestBringIntoView">
      <MemberSignature Language="C#" Value="public event System.Windows.RequestBringIntoViewEventHandler RequestBringIntoView;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RequestBringIntoViewEventHandler RequestBringIntoView" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.RequestBringIntoView" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RequestBringIntoView As RequestBringIntoViewEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RequestBringIntoViewEventHandler ^ RequestBringIntoView;" />
      <MemberSignature Language="F#" Value="member this.RequestBringIntoView : System.Windows.RequestBringIntoViewEventHandler " Usage="member this.RequestBringIntoView : System.Windows.RequestBringIntoViewEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RequestBringIntoViewEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-1198"><see cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" />가 이 요소에 대해 호출될 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1198">Occurs when <see cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" /> is called on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1199">이 이벤트는 부모 나타냅니다 <xref:System.Windows.Controls.ScrollViewer> (또는 파생 클래스) 발생 하는 요소는 <xref:System.Windows.FrameworkElement.RequestBringIntoView> 이벤트 표시할 스크롤할 수 있는 지역 내에서.</span><span class="sxs-lookup"><span data-stu-id="709be-1199">This event indicates to a parent <xref:System.Windows.Controls.ScrollViewer> (or derived class) that the element that raises the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event should be made visible within the scrollable region.</span></span> <span data-ttu-id="709be-1200">합니다 <xref:System.Windows.Controls.ScrollViewer> 표시는 <xref:System.Windows.FrameworkElement.RequestBringIntoView> 이벤트를 처리 하는 이벤트의 클래스 처리를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1200">The <xref:System.Windows.Controls.ScrollViewer> will then mark the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event as handled, by using class handling of the event.</span></span> <span data-ttu-id="709be-1201">일반적 <xref:System.Windows.FrameworkElement.RequestBringIntoView> 데이터가 표시 되지 않아야 스크롤 영역을 제어 하는 클래스에 의해으로 처리 하는 이벤트 인스턴스 처리기를 호출 하는 요소의 원하는 목표를 방해 이렇게 <xref:System.Windows.FrameworkElement.BringIntoView%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1201">In general <xref:System.Windows.FrameworkElement.RequestBringIntoView> event data should not be marked handled by any class that does control a scrolling region, or by any instance handler, because doing so would interfere with the intended goal of the element that called <xref:System.Windows.FrameworkElement.BringIntoView%2A>.</span></span>  
  
<a name="routedEventInfo_RequestBringIntoView"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="709be-1202">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="709be-1202">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-1203">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-1203">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.RequestBringIntoViewEvent>|  
|<span data-ttu-id="709be-1204">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="709be-1204">Routing strategy</span></span>|<span data-ttu-id="709be-1205">버블링</span><span class="sxs-lookup"><span data-stu-id="709be-1205">Bubbling</span></span>|  
|<span data-ttu-id="709be-1206">대리자</span><span class="sxs-lookup"><span data-stu-id="709be-1206">Delegate</span></span>|<xref:System.Windows.RequestBringIntoViewEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" />
        <altmember cref="T:System.Windows.Controls.ScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="RequestBringIntoViewEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent RequestBringIntoViewEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent RequestBringIntoViewEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.RequestBringIntoViewEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RequestBringIntoViewEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ RequestBringIntoViewEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable RequestBringIntoViewEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.RequestBringIntoViewEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-1207"><see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1207">Identifies the <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resources">
      <MemberSignature Language="C#" Value="public System.Windows.ResourceDictionary Resources { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ResourceDictionary Resources" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Resources" />
      <MemberSignature Language="VB.NET" Value="Public Property Resources As ResourceDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ResourceDictionary ^ Resources { System::Windows::ResourceDictionary ^ get(); void set(System::Windows::ResourceDictionary ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Resources : System.Windows.ResourceDictionary with get, set" Usage="System.Windows.FrameworkElement.Resources" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Markup.IHaveResources.Resources</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.ResourceDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-1208">로컬로 정의된 리소스 사전을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1208">Gets or sets the locally-defined resource dictionary.</span></span></summary>
        <value><span data-ttu-id="709be-1209">현재 로컬로 정의된 리소스의 사전입니다. 각 리소스에는 키로 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1209">The current locally-defined dictionary of resources, where each resource can be accessed by key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1210">완전히 또는 부분적으로 정의할 수 있는 리소스가 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 속성 요소로 일반적으로 생성 되 고 개별 페이지 또는 애플리케이션의 루트 요소에는 일반적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1210">Resource dictionaries that can be defined completely or partially in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] are typically created as a property element, and are typically on the root element for any individual page or for the application.</span></span> <span data-ttu-id="709be-1211">이 수준에서 리소스 사전 배치 쉽게 페이지의 개별 자식 요소 (또는 애플리케이션의 경우에는 페이지)를 찾을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1211">Placing the resource dictionary at this level makes it easier to find from individual child elements in the page (or from any page, in the application case).</span></span> <span data-ttu-id="709be-1212">대부분의 애플리케이션 시나리오에서 스타일 리소스 사전 내의 개체 요소로 정의 되어 권장 또는 전체 스타일 리소스는 자체 포함 될 수 있도록 외부 리소스로 정의 됩니다 (이 통해 별도 디자이너 책임을 편집 해야 하는 물리적 파일을 구분 하 여 개발자의 책임).</span><span class="sxs-lookup"><span data-stu-id="709be-1212">In most application scenarios, we recommend that styles be defined as object elements within a resource dictionary, or be defined as external resources so that the entire style resource can be self-contained (this approach helps separate designer responsibilities from developer responsibilities by separating the physical files that need to be edited).</span></span>  
  
 <span data-ttu-id="709be-1213">이 속성 요소 내에서 직접 선언 된 리소스 사전만 반환 하는 참고 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1213">Note that this property returns only the resource dictionary declared directly within that element.</span></span> <span data-ttu-id="709be-1214">이 자식 요소를 위쪽으로 재귀적으로 검색 각 부모 요소에 정의 된 리소스를 액세스할 수 있는 실제 리소스 조회 프로세스와 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1214">This is different than the actual resource lookup process, where a child element can access any of the resources defined in each parent element, searching recursively upwards.</span></span>  
  
 <span data-ttu-id="709be-1215">리소스의 리소스 만들어졌는지 수 있지만 컬렉션 내에서 코드에 의해 참조 될 수도 있습니다 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 확실 하 게 액세스할 수 없게 됩니다까지 후 <xref:System.Windows.FrameworkElement.Loaded> 사전을 선언 하는 요소에 의해 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1215">Resources can also be referenced by code from within the collection, but be aware that resources created in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] will definitely not be accessible until after <xref:System.Windows.FrameworkElement.Loaded> is raised by the element that declares the dictionary.</span></span> <span data-ttu-id="709be-1216">리소스 아니라 비동기적으로 구문 분석은 실제로 <xref:System.Windows.FrameworkElement.Loaded> 이벤트는 참조할 수 있는 보증을 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 리소스를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1216">In fact, resources are parsed asynchronously and not even the <xref:System.Windows.FrameworkElement.Loaded> event is an assurance that you can reference a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] defined resource.</span></span> <span data-ttu-id="709be-1217">따라서 일반적으로 액세스 해야 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 정의의 일부로 런타임 코드 또는 다른 리소스 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 스타일 또는 특성 값에 대 한 리소스 확장 참조와 같은 기술입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1217">For this reason you should generally only access [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] defined resources as part of run-time code, or through other [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] techniques such as styles or resource extension references for attribute values.</span></span> <span data-ttu-id="709be-1218">코드를 통해 리소스에 액세스 하는 경우 기본적으로 한 것과 동일에서 수행 하는 참조 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1218">When you access resources through code, it is essentially equivalent to a  reference made from [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 <span data-ttu-id="709be-1219">기본 <xref:System.Windows.ResourceDictionary> 추가, 제거 또는 코드를 사용 하 여 컬렉션 내에서 리소스를 쿼리 하는 데 필요한 메서드를 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1219">The underlying <xref:System.Windows.ResourceDictionary> supports the methods required to add, remove or query resources from within the collection by using code.</span></span> <span data-ttu-id="709be-1220">합니다 <xref:System.Windows.FrameworkElement.Resources%2A> 속성을 완전히 새로운 또는 다른 요소의 리소스 컬렉션을 교체 하는 시나리오를 지원 하기 위해 설정할 수 <xref:System.Windows.ResourceDictionary>입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1220">The <xref:System.Windows.FrameworkElement.Resources%2A> property is settable to support the scenario of completely replacing the resources collection of an element to be a new or different <xref:System.Windows.ResourceDictionary>.</span></span>  
  
 <span data-ttu-id="709be-1221">에 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 표시 된 구문에 대 한 요소가 포함 되지 않습니다는 <xref:System.Windows.ResourceDictionary>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1221">Notice that the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax shown does not include an element for the <xref:System.Windows.ResourceDictionary>.</span></span> <span data-ttu-id="709be-1222">이 한 예로 암시적 컬렉션 구문을 사용 합니다. 컬렉션 요소를 나타내는 태그를 생략할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1222">This is an example of implicit collection syntax; a tag representing the collection element can be omitted.</span></span> <span data-ttu-id="709be-1223">항목 컬렉션에 추가 된 요소 대신 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1223">The elements that are added as items to the collection are specified instead.</span></span> <span data-ttu-id="709be-1224">암시적 컬렉션에 대 한 자세한 내용은 및 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]를 참조 하세요 [XAML 구문 정보](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1224">For more information about implicit collections and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], see [XAML Syntax In Detail](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).</span></span> <span data-ttu-id="709be-1225">한 가지 경우 위치는 <xref:System.Windows.ResourceDictionary> 병합된 된 사전을 도입 하는 경우에서 많은 경우 일반적으로는 자식 요소가 없는 요소는 명시적으로 지정 되어 <xref:System.Windows.ResourceDictionary>입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1225">One case where a <xref:System.Windows.ResourceDictionary> is still specified explicitly as an element is if you are introducing a merged dictionary, in which case there are typically no child elements for that <xref:System.Windows.ResourceDictionary>.</span></span> <span data-ttu-id="709be-1226">자세한 내용은 참조 하세요 [리소스 사전을 병합](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md)입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1226">For details, see [Merged Resource Dictionaries](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md).</span></span>  
  
<a name="xamlPropertyElementUsage_Resources"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="709be-1227">XAML 속성 요소 사용</span><span class="sxs-lookup"><span data-stu-id="709be-1227">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.Resources>  
    oneOrMoreResourceElements  
  </object.Resources>  
</object>  
```  
  
<a name="xamlValues_Resources"></a>   
## <a name="xaml-values"></a><span data-ttu-id="709be-1228">XAML 값</span><span class="sxs-lookup"><span data-stu-id="709be-1228">XAML Values</span></span>  
 <span data-ttu-id="709be-1229">*oneOrMoreResourceElements*</span><span class="sxs-lookup"><span data-stu-id="709be-1229">*oneOrMoreResourceElements*</span></span>  
 <span data-ttu-id="709be-1230">하나 이상의 개체 요소를 각각 정의 하는 리소스입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1230">One or more object elements, each of which defines a resource.</span></span> <span data-ttu-id="709be-1231">각 리소스 속성 요소에서 각 <xref:System.Windows.ResourceDictionary> 에 대 한 고유한 값을 가져야 합니다는 [X:key 지시문](~/docs/framework/xaml-services/x-key-directive.md)에서 값을 검색할 때 고유 키로 사용 되는 <xref:System.Windows.ResourceDictionary>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1231">Each resource property element within each <xref:System.Windows.ResourceDictionary> must have a unique value for the [x:Key Directive](~/docs/framework/xaml-services/x-key-directive.md), which serves as the unique key when values are retrieved from the <xref:System.Windows.ResourceDictionary>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Application.Resources" />
        <related type="Article" href="https://msdn.microsoft.com/library/1985cd45-f197-42d5-b75e-886add64b248"><span data-ttu-id="709be-1232">X:key 특성</span><span class="sxs-lookup"><span data-stu-id="709be-1232">x:Key Attribute</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetBinding">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="709be-1233">지정된 종속성 속성에 대해 이 요소에 바인딩을 연결합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1233">Attaches a binding to this element for the specified dependency property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpression SetBinding (System.Windows.DependencyProperty dp, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpression SetBinding(class System.Windows.DependencyProperty dp, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetBinding (dp As DependencyProperty, path As String) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpression ^ SetBinding(System::Windows::DependencyProperty ^ dp, System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetBinding : System.Windows.DependencyProperty * string -&gt; System.Windows.Data.BindingExpression" Usage="frameworkElement.SetBinding (dp, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="709be-1234">바인딩을 설정할 대상 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1234">Identifies the destination property where the binding should be established.</span></span></param>
        <param name="path"><span data-ttu-id="709be-1235">바인딩에 사용할 소스 속성 이름 또는 속성의 경로입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1235">The source property name or the path to the property used for the binding.</span></span></param>
        <summary><span data-ttu-id="709be-1236">데이터 소스에 대한 경로 정규화로 제공된 소스 속성 이름을 기반으로 이 요소에 바인딩을 연결합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1236">Attaches a binding to this element, based on the provided source property name as a path qualification to the data source.</span></span></summary>
        <returns><span data-ttu-id="709be-1237">바인딩 상태를 기록합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1237">Records the conditions of the binding.</span></span> <span data-ttu-id="709be-1238">이 반환 값은 오류 검사에 유용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1238">This return value can be useful for error checking.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1239">이 메서드는 호출에 대 한 편의 메서드 <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>는 현재 인스턴스를 전달 하는 합니다 <xref:System.Windows.DependencyObject>, 새 만들고 <xref:System.Windows.Data.Binding> 제공 된 기준 `path` 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="709be-1239">This method is a convenience method for calling <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>, which passes the current instance as the <xref:System.Windows.DependencyObject>, and creates a new <xref:System.Windows.Data.Binding> based on the provided `path` parameter.</span></span> <span data-ttu-id="709be-1240">이 서명은 간단한 기본 바인딩을 설정 하는 경우에 편리 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1240">This signature is more convenient if you are establishing a simple default binding.</span></span> <span data-ttu-id="709be-1241">기본이 아닌 조건에 대 한 바인딩 속성을 지정 하거나 사용 하는 경우는 <xref:System.Windows.Data.MultiBinding> 또는 <xref:System.Windows.Data.PriorityBinding>를 사용 해야는 <xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29> 서명 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1241">If you need to specify any binding properties to non-default conditions, or want to use a <xref:System.Windows.Data.MultiBinding> or <xref:System.Windows.Data.PriorityBinding>,you should use the <xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29> signature.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="709be-1242">다음 예제에서는 특정 경로 사용 하 여 바인딩을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1242">The following example sets a binding using a specific path.</span></span>  
  
 [!code-csharp[BaseElementsSmorgasbord#SetBindingPath](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#setbindingpath)]
 [!code-vb[BaseElementsSmorgasbord#SetBindingPath](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#setbindingpath)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpressionBase SetBinding (System.Windows.DependencyProperty dp, System.Windows.Data.BindingBase binding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpressionBase SetBinding(class System.Windows.DependencyProperty dp, class System.Windows.Data.BindingBase binding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetBinding (dp As DependencyProperty, binding As BindingBase) As BindingExpressionBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpressionBase ^ SetBinding(System::Windows::DependencyProperty ^ dp, System::Windows::Data::BindingBase ^ binding);" />
      <MemberSignature Language="F#" Value="member this.SetBinding : System.Windows.DependencyProperty * System.Windows.Data.BindingBase -&gt; System.Windows.Data.BindingExpressionBase" Usage="frameworkElement.SetBinding (dp, binding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="binding" Type="System.Windows.Data.BindingBase" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="709be-1243">바인딩을 설정해야 하는 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1243">Identifies the property where the binding should be established.</span></span></param>
        <param name="binding"><span data-ttu-id="709be-1244">데이터 바인딩의 고유 정보를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1244">Represents the specifics of the data binding.</span></span></param>
        <summary><span data-ttu-id="709be-1245">제공된 바인딩 개체를 기반으로 하여 이 요소에 바인딩을 연결합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1245">Attaches a binding to this element, based on the provided binding object.</span></span></summary>
        <returns><span data-ttu-id="709be-1246">바인딩 상태를 기록합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1246">Records the conditions of the binding.</span></span> <span data-ttu-id="709be-1247">이 반환 값은 오류 검사에 유용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1247">This return value can be useful for error checking.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1248">이 메서드는 호출에 대 한 편의 메서드 <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>는 현재 인스턴스를 전달 하는 <xref:System.Windows.DependencyObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1248">This method is a convenience method for calling <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>, which passes the current instance as the <xref:System.Windows.DependencyObject>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFlowDirection">
      <MemberSignature Language="C#" Value="public static void SetFlowDirection (System.Windows.DependencyObject element, System.Windows.FlowDirection value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetFlowDirection(class System.Windows.DependencyObject element, valuetype System.Windows.FlowDirection value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetFlowDirection (element As DependencyObject, value As FlowDirection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetFlowDirection(System::Windows::DependencyObject ^ element, System::Windows::FlowDirection value);" />
      <MemberSignature Language="F#" Value="static member SetFlowDirection : System.Windows.DependencyObject * System.Windows.FlowDirection -&gt; unit" Usage="System.Windows.FrameworkElement.SetFlowDirection (element, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="value" Type="System.Windows.FlowDirection" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="709be-1249">흐름 방향을 지정하는 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1249">The element that specifies a flow direction.</span></span></param>
        <param name="value"><span data-ttu-id="709be-1250">방향을 지정하는 열거형 값입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1250">A value of the enumeration, specifying the direction.</span></span></param>
        <summary><span data-ttu-id="709be-1251">제공된 요소에 대한 <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> 연결된 속성의 값을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1251">Sets the value of the <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> attached property for the provided element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1252">이 메서드는 연결 된 속성 구문을 지원 합니다 <xref:System.Windows.FrameworkElement.FlowDirection%2A> 속성에서 자식 요소의 제공된 된 <xref:System.Windows.FrameworkElement> 해당 부모 요소 내에서 정렬에 대 한 흐름 방향을 지정 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1252">This method supports attached property syntax for the <xref:System.Windows.FrameworkElement.FlowDirection%2A> property, therefore allowing child elements of a provided <xref:System.Windows.FrameworkElement> to specify flow direction for the arrangement within their parent element.</span></span> <span data-ttu-id="709be-1253">현재 값을 설정 하려면 <xref:System.Windows.FrameworkElement>를 직접 사용 하 여 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 접근자 <xref:System.Windows.FrameworkElement.FlowDirection%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1253">To set the value on the current <xref:System.Windows.FrameworkElement>, use the direct [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] accessor <xref:System.Windows.FrameworkElement.FlowDirection%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.FlowDirection" />
      </Docs>
    </Member>
    <Member MemberName="SetResourceReference">
      <MemberSignature Language="C#" Value="public void SetResourceReference (System.Windows.DependencyProperty dp, object name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetResourceReference(class System.Windows.DependencyProperty dp, object name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetResourceReference (dp As DependencyProperty, name As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetResourceReference(System::Windows::DependencyProperty ^ dp, System::Object ^ name);" />
      <MemberSignature Language="F#" Value="member this.SetResourceReference : System.Windows.DependencyProperty * obj -&gt; unit" Usage="frameworkElement.SetResourceReference (dp, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="name" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="709be-1254">리소스가 바인딩될 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1254">The property to which the resource is bound.</span></span></param>
        <param name="name"><span data-ttu-id="709be-1255">리소스의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1255">The name of the resource.</span></span></param>
        <summary><span data-ttu-id="709be-1256">지정된 이름으로 리소스를 검색하고 지정된 속성에 대해 해당 리소스에 리소스 참조를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1256">Searches for a resource with the specified name and sets up a resource reference to it for the specified property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1257">리소스 참조를 사용 하 여 비슷합니다는 [DynamicResource 태그 확장](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md) 태그에서입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1257">A resource reference is similar to the use of a [DynamicResource Markup Extension](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md) in markup.</span></span> <span data-ttu-id="709be-1258">리소스 참조를 런타임에 지연 기준으로 지정된 된 속성의 값을 제공 하는 내부 식을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1258">The resource reference creates an internal expression that supplies the value of the specified property on a run-time deferred basis.</span></span> <span data-ttu-id="709be-1259">리소스 사전 내부 이벤트를 통해 변경 된 값을 나타냅니다 때마다 또는 현재 요소의 부모를 재지정할 때마다 식을 다시 계산 됩니다 (부모 변경 사전 조회 경로 변경 됩니다).</span><span class="sxs-lookup"><span data-stu-id="709be-1259">The expression will be re-evaluated whenever the resource dictionary indicates a changed value through internal events, or whenever the current element is reparented (a parent change would change the dictionary lookup path).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
        <altmember cref="P:System.Windows.Application.Resources" />
        <altmember cref="P:System.Windows.FrameworkElement.Resources" />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeResources">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeResources ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeResources() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeResources" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeResources () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeResources();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeResources : unit -&gt; bool" Usage="frameworkElement.ShouldSerializeResources " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="709be-1260">serialization 프로세스에서 <see cref="P:System.Windows.FrameworkElement.Resources" /> 속성의 콘텐츠를 serialize해야 하는지 여부를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1260">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.FrameworkElement.Resources" /> property.</span></span></summary>
        <returns><span data-ttu-id="709be-1261"><see cref="P:System.Windows.FrameworkElement.Resources" /> 속성 값을 serialize해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1261"><see langword="true" /> if the <see cref="P:System.Windows.FrameworkElement.Resources" /> property value should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1262">돌아갑니다 `true` 로컬에 하나 이상의 키가 지정 된 리소스와 <xref:System.Windows.FrameworkElement.Resources%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1262">This will return `true` as long as there is at least one keyed resource in the local <xref:System.Windows.FrameworkElement.Resources%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeStyle">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeStyle" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeStyle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeStyle();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeStyle : unit -&gt; bool" Usage="frameworkElement.ShouldSerializeStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="709be-1263">serialization 프로세스에서 <see cref="P:System.Windows.FrameworkElement.Style" /> 속성의 콘텐츠를 serialize해야 하는지 여부를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1263">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.FrameworkElement.Style" /> property.</span></span></summary>
        <returns><span data-ttu-id="709be-1264"><see cref="P:System.Windows.FrameworkElement.Style" /> 속성 값을 serialize해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1264"><see langword="true" /> if the <see cref="P:System.Windows.FrameworkElement.Style" /> property value should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1265">돌아갑니다 `true` 경우는 <xref:System.Windows.Style> 로컬로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1265">This will return `true` if the <xref:System.Windows.Style> is locally set.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeTriggers">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeTriggers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeTriggers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeTriggers" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeTriggers () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeTriggers();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeTriggers : unit -&gt; bool" Usage="frameworkElement.ShouldSerializeTriggers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="709be-1266">serialization 프로세스에서 <see cref="P:System.Windows.FrameworkElement.Triggers" /> 속성의 콘텐츠를 serialize해야 하는지 여부를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1266">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.FrameworkElement.Triggers" /> property.</span></span></summary>
        <returns><span data-ttu-id="709be-1267"><see cref="P:System.Windows.FrameworkElement.Triggers" /> 속성 값을 serialize해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1267"><see langword="true" /> if the <see cref="P:System.Windows.FrameworkElement.Triggers" /> property value should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1268">이 메서드는 반환 `true` 경우는 <xref:System.Windows.FrameworkElement.Triggers%2A> 속성은 로컬로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1268">This method returns `true` if the <xref:System.Windows.FrameworkElement.Triggers%2A> property is locally set.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.SizeChangedEventHandler SizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.SizeChangedEventHandler SizeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.SizeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SizeChanged As SizeChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::SizeChangedEventHandler ^ SizeChanged;" />
      <MemberSignature Language="F#" Value="member this.SizeChanged : System.Windows.SizeChangedEventHandler " Usage="member this.SizeChanged : System.Windows.SizeChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.SizeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-1269">이 요소의 <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> 또는 <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> 속성 값을 변경할 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1269">Occurs when either the <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> or the <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> properties change value on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1270">직접 라우트된 이벤트에 대 한 경로 따르지, 발생 하는 동일한 요소 내 에서만 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1270">Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</span></span> <span data-ttu-id="709be-1271">라우트된 이벤트는 라우트된 이벤트 동작은 다른 지원지 않습니다 직접: 액세스할 수 있는 처리기 컬렉션을 지원 하며으로 사용할 수는 <xref:System.Windows.EventTrigger> 스타일에서입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1271">Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <xref:System.Windows.EventTrigger> in a style.</span></span>  
  
 <span data-ttu-id="709be-1272">레이아웃 시스템 내에서 속성을 읽는 <xref:System.Windows.SizeChangedEventArgs> 를 고려할지 여부를 보고 크기 변화를 중요 한 결정이 이벤트의 인수 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1272">The layout system reads properties within the <xref:System.Windows.SizeChangedEventArgs> argument class of this event, to  determine whether the reported size changes should be considered significant.</span></span> <span data-ttu-id="709be-1273">이 레이아웃 시스템 또는 이전 및 새 높이 또는 너비 값 간의 않는 시각적으로 차이로 인해 레이아웃 변경을 적용 하지 않으려면 컨트롤별 레이아웃 구현을 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1273">This allows the layout system or your control-specific layout implementations to avoid forcing a layout change due to visually imperceptible differences between old and new height or width values.</span></span> <span data-ttu-id="709be-1274">차이로 반올림 또는 동일한 결과 부동 소수점 데이터 형식 계산 때문일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1274">The imperceptible differences might be due to rounding or same-result calculations of a floating-point data types.</span></span>  
  
<a name="routedEventInfo_SizeChanged"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="709be-1275">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="709be-1275">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-1276">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-1276">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.SizeChangedEvent>|  
|<span data-ttu-id="709be-1277">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="709be-1277">Routing strategy</span></span>|<span data-ttu-id="709be-1278">직접</span><span class="sxs-lookup"><span data-stu-id="709be-1278">Direct</span></span>|  
|<span data-ttu-id="709be-1279">대리자</span><span class="sxs-lookup"><span data-stu-id="709be-1279">Delegate</span></span>|<xref:System.Windows.SizeChangedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Height" />
        <altmember cref="P:System.Windows.FrameworkElement.Width" />
      </Docs>
    </Member>
    <Member MemberName="SizeChangedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent SizeChangedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent SizeChangedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.SizeChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SizeChangedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ SizeChangedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable SizeChangedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.SizeChangedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-1280"><see cref="E:System.Windows.FrameworkElement.SizeChanged" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1280">Identifies the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1281">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1281">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="709be-1282">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1282">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="709be-1283">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1283">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="709be-1284">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="709be-1284">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="709be-1285">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="709be-1285">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; SourceUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; SourceUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.SourceUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SourceUpdated As EventHandler(Of DataTransferEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ SourceUpdated;" />
      <MemberSignature Language="F#" Value="member this.SourceUpdated : EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " Usage="member this.SourceUpdated : System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-1286">이 요소의 기존 속성 바인딩에 대해 소스 값이 변경될 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1286">Occurs when the source value changes for any existing property binding on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1287">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Data.Binding.SourceUpdated> 이벤트에 의해 발생 하는 <xref:System.Windows.Data.Binding> 이 요소와 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1287">This event creates an alias for the <xref:System.Windows.Data.Binding.SourceUpdated> event that is raised by any <xref:System.Windows.Data.Binding> associated with this element.</span></span>  
  
<a name="xamlAttributeUsage_SourceUpdated"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="709be-1288">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="709be-1288">XAML Attribute Usage</span></span>  
  
```  
<object SourceUpdated="eventHandler"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Data.Binding.SourceUpdated" />
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public System.Windows.Style Style { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style Style" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Style" />
      <MemberSignature Language="VB.NET" Value="Public Property Style As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ Style { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Style : System.Windows.Style with get, set" Usage="System.Windows.FrameworkElement.Style" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-1289">렌더링될 때 이 요소에서 사용할 스타일을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1289">Gets or sets the style used by this element when it is rendered.</span></span></summary>
        <value><span data-ttu-id="709be-1290">있는 경우 요소에 대해 적용된 기본값이 아닌 스타일입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1290">The applied, nondefault style for the element, if present.</span></span> <span data-ttu-id="709be-1291">그렇지 않으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1291">Otherwise, <see langword="null" />.</span></span> <span data-ttu-id="709be-1292">기본 생성된 <see cref="T:System.Windows.FrameworkElement" />의 기본값은 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1292">The default for a default-constructed <see cref="T:System.Windows.FrameworkElement" /> is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1293">컨트롤에 대 한 현재 스타일은 종종 컨트롤 테마에서 기본 스타일을 제공한 또는 스타일에서 리소스가 페이지나 애플리케이션 수준 (암시적 스타일)에서 일반적으로 컨트롤 형식에 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1293">For controls, the current style is often provided by a default style from control theming, or from styles generally applied to controls of that type by resources at page or application level (an implicit style).</span></span> <span data-ttu-id="709be-1294">이 속성은 설정 하거나 반환 하지 기본 (테마) 스타일 않지만 암시적 스타일 또는 요소에 역할을 하는 명시적 스타일을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1294">This property does not set or return default (theme) styles, but it does return either an implicit style or an explicit style that is acting on the element.</span></span> <span data-ttu-id="709be-1295">암시적 또는 명시적 스타일의 경우 중요 하지 않습니다 스타일은 지정 된 이름이 든 리소스로 로컬로 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1295">In the case of implicit or explicit styles, it does not matter whether the style is specified as a resource or defined locally.</span></span>  
  
 <span data-ttu-id="709be-1296">스타일 정의는 몇 가지 제한 사항이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1296">Setting the styles has some restrictions.</span></span> <span data-ttu-id="709be-1297">전체를 다시 설정할 수 있습니다 <xref:System.Windows.FrameworkElement.Style%2A> 속성을 새 <xref:System.Windows.Style> 언제 든 지는 이렇게 하면 레이아웃이 다시 강제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1297">You can reset the entire <xref:System.Windows.FrameworkElement.Style%2A> property to a new <xref:System.Windows.Style> at any time, which will force a layout recomposition.</span></span> <span data-ttu-id="709be-1298">그러나 가능한 한 즉시 로드 된 요소에 의해 해당 스타일 사용 하 게 되는 <xref:System.Windows.Style> 고려해 야 봉인 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1298">However, as soon as that style is placed in use by a loaded element, the <xref:System.Windows.Style> should be considered sealed.</span></span> <span data-ttu-id="709be-1299">사용 중인 스타일의 개별 속성을 변경 하는 동안 (컬렉션 내에서 아무 것도 같은 <xref:System.Windows.Style.Setters%2A>) 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1299">Attempting to make a change to any individual property of an in-use style (such as anything within the collection of <xref:System.Windows.Style.Setters%2A>) causes an exception to be thrown.</span></span> <span data-ttu-id="709be-1300">태그에 정의 된 스타일 (리소스)에 대 한 리소스 사전에서 로드 된 또는 인라인 스타일) (에 포함 된 페이지가 로드 되는 즉시 사용 중인 것으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1300">A style that is defined in markup is considered to be in use as soon as it is loaded from a resource dictionary (for resources), or the page it is contained within is loaded (for inline styles).</span></span>  
  
 <span data-ttu-id="709be-1301"><xref:System.Windows.FrameworkElement.Style%2A> 특별 한 우선 순위를 사용 하 여 종속성 속성이입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1301"><xref:System.Windows.FrameworkElement.Style%2A> is a dependency property with special precedence.</span></span> <span data-ttu-id="709be-1302">로컬에서 설정 스타일은 일반적으로 가장 높은 우선 순위로 속성 시스템으로 작동 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1302">The locally set style generally operates at the highest precedence in the property system.</span></span> <span data-ttu-id="709be-1303">경우는 <xref:System.Windows.FrameworkElement.Style%2A> 이 시점에서 해당 형식을 지정 하는 로컬 또는 애플리케이션 리소스에서 암시적 스타일에 대 한 속성 시스템이 확인 하는 로드 하는 동안 null입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1303">If the <xref:System.Windows.FrameworkElement.Style%2A> is null at this point, during loading the property system checks for implicit styles in local or application resources that specify that type.</span></span> <span data-ttu-id="709be-1304">이 단계를 수행 하면 스타일은 여전히 null을 프레젠테이션 용도로 동작 스타일을 일반적으로 전환 되는 경우 기본 (테마) 스타일의 기본 스타일에 반환 되지 않습니다는 <xref:System.Windows.FrameworkElement.Style%2A> 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1304">If the style is still null after this step, then the acting style for presentation purposes generally comes from the default (theme) style, but the default style is not returned in the <xref:System.Windows.FrameworkElement.Style%2A> property value.</span></span> <span data-ttu-id="709be-1305">참조 [종속성 속성 값 우선 순위](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md) 하거나 [스타일 및 템플릿](~/docs/framework/wpf/controls/styling-and-templating.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1305">See [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md) or [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
<a name="xamlAttributeUsage_Style"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="709be-1306">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="709be-1306">XAML Attribute Usage</span></span>  
  
```  
<object Style="{resourceExtension styleResourceKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_Style"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="709be-1307">XAML 속성 요소 사용</span><span class="sxs-lookup"><span data-stu-id="709be-1307">XAML Property Element Usage</span></span>  
  
<a name="xamlValues_Style"></a>   
## <a name="xaml-values"></a><span data-ttu-id="709be-1308">XAML 값</span><span class="sxs-lookup"><span data-stu-id="709be-1308">XAML Values</span></span>  
 <span data-ttu-id="709be-1309">*resourceExtension*</span><span class="sxs-lookup"><span data-stu-id="709be-1309">*resourceExtension*</span></span>  
 <span data-ttu-id="709be-1310">다음 중 하나:, 또는 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1310">One of the following: , or .</span></span> <span data-ttu-id="709be-1311">참조 [XAML 리소스](~/docs/framework/wpf/advanced/xaml-resources.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1311">See [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
 <span data-ttu-id="709be-1312">*styleResourceKey*</span><span class="sxs-lookup"><span data-stu-id="709be-1312">*styleResourceKey*</span></span>  
 <span data-ttu-id="709be-1313">요청 되는 스타일을 식별 하는 키입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1313">The key that identifies the style being requested.</span></span> <span data-ttu-id="709be-1314">키의 기존 리소스에 참조를 <xref:System.Windows.ResourceDictionary>입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1314">The key refers to an existing resource in a <xref:System.Windows.ResourceDictionary>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="709be-1315">속성 요소 구문은 기술적으로 가능 하지만 대부분의 스타일에 대 한 권장 하지는 않습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1315">Property element syntax is technically possible, but not recommended for most style scenarios.</span></span> <span data-ttu-id="709be-1316">참조 [인라인 스타일 및 템플릿](~/docs/framework/wpf/advanced/inline-styles-and-templates.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1316">See [Inline Styles and Templates](~/docs/framework/wpf/advanced/inline-styles-and-templates.md).</span></span> <span data-ttu-id="709be-1317">사용 하 여 바인딩 참조 또는 <xref:System.Windows.Data.Binding> 가능 하지만 일반적이 지 않은 이기도 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1317">A binding reference using  or <xref:System.Windows.Data.Binding> is also possible, but uncommon.</span></span>  
  
<a name="dependencyPropertyInfo_Style"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="709be-1318">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="709be-1318">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-1319">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-1319">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.StyleProperty>|  
|<span data-ttu-id="709be-1320">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="709be-1320">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="709be-1321">다음 예제에서는 리소스 사전에 스타일을 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1321">The following example defines a style in a resource dictionary.</span></span>  
  
 [!code-xaml[FEResource#StyleProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty)]  
[!code-xaml[FEResource#StyleProperty2](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty2)]  
[!code-xaml[FEResource#StyleProperty3](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty3)]  
[!code-xaml[FEResource#StyleProperty4](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty StyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty StyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.StyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ StyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable StyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.StyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-1322"><see cref="P:System.Windows.FrameworkElement.Style" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1322">Identifies the <see cref="P:System.Windows.FrameworkElement.Style" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable">
      <MemberSignature Language="C#" Value="bool IQueryAmbient.IsAmbientPropertyAvailable (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function IsAmbientPropertyAvailable (propertyName As String) As Boolean Implements IQueryAmbient.IsAmbientPropertyAvailable" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System::String ^ propertyName) = System::Windows::Markup::IQueryAmbient::IsAmbientPropertyAvailable;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="709be-1323">요청된 앰비언트 속성의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1323">The name of the requested ambient property.</span></span></param>
        <summary><span data-ttu-id="709be-1324">이 멤버에 대한 설명을 보려면 <see cref="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" /> 메서드를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="709be-1324">For a description of this member, see the <see cref="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" /> method.</span></span></summary>
        <returns><span data-ttu-id="709be-1325"><paramref name="propertyName" />을 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1325"><see langword="true" /> if <paramref name="propertyName" /> is available; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1326">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="709be-1326">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="709be-1327"><xref:System.Windows.FrameworkElement> 인스턴스가 <xref:System.Windows.Markup.IQueryAmbient> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1327">It can be used only when the <xref:System.Windows.FrameworkElement> instance is cast to an <xref:System.Windows.Markup.IQueryAmbient> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.FrameworkElement.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-1328">이 요소에 대한 사용자 지정 정보를 저장하는 데 사용할 수 있는 임의의 개체 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1328">Gets or sets an arbitrary object value that can be used to store custom information about this element.</span></span></summary>
        <value><span data-ttu-id="709be-1329">원하는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1329">The intended value.</span></span> <span data-ttu-id="709be-1330">이 속성에는 기본값이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1330">This property has no default value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1331">이 속성은 다른 Microsoft 프로그래밍 모델에서 애플리케이션 또는 Windows Forms에 대 한 Visual Basic과 같은 태그 속성과 비슷합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1331">This property is analogous to Tag properties in other Microsoft programming models, such as Visual Basic for Applications or Windows Forms.</span></span> <span data-ttu-id="709be-1332"><xref:System.Windows.FrameworkElement.Tag%2A> 에 대 한 일부 기본 사용자 지정 정보를 저장할 수 있는 기존 속성 위치를 제공 하려는 <xref:System.Windows.FrameworkElement> 하지 않고도 하위 요소.</span><span class="sxs-lookup"><span data-stu-id="709be-1332"><xref:System.Windows.FrameworkElement.Tag%2A> is intended to provide a pre-existing property location where you can store some basic custom information about any <xref:System.Windows.FrameworkElement> without requiring you to subclass an element.</span></span>  
  
 <span data-ttu-id="709be-1333">속성 요소 사용 설정 하기 위해 사용 해야 하는 개체를 사용 하는이 속성을 하기 때문에 <xref:System.Windows.FrameworkElement.Tag%2A> , 문자열 등의 알려진된 기본 제공 형식 변환기를 사용 하 여 개체 이외의 값으로 XAML의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1333">Because this property takes an object, you need to use the property element usage in order to set the <xref:System.Windows.FrameworkElement.Tag%2A> property in XAML to anything other than an object with a known and built-in type converter, such as a string.</span></span> <span data-ttu-id="709be-1334">이 방식으로 사용 되는 개체 일반적으로 표준 WPF 네임 스페이스에 포함 되지 않은 하 고 따라서 XAML 요소로 소개 하기 위해 외부 네임 스페이스에 네임 스페이스 매핑을 필요할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1334">Objects used in this manner are typically not within the standard WPF namespaces and therefore may require namespace mapping to the external namespace in order to be introduced as XAML elements.</span></span> <span data-ttu-id="709be-1335">세부 정보를 참조 하세요. [XAML 네임 스페이스 및 WPF XAML에 대 한 매핑 Namespace](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md) 하 고 [XAML 및 WPF에 대 한 사용자 지정 클래스](~/docs/framework/wpf/advanced/xaml-and-custom-classes-for-wpf.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1335">For details, see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md) and [XAML and Custom Classes for WPF](~/docs/framework/wpf/advanced/xaml-and-custom-classes-for-wpf.md).</span></span>  
  
<a name="dependencyPropertyInfo_Tag"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="709be-1336">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="709be-1336">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-1337">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-1337">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.TagProperty>|  
|<span data-ttu-id="709be-1338">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="709be-1338">Metadata properties set to `true`</span></span>|<span data-ttu-id="709be-1339">없음</span><span class="sxs-lookup"><span data-stu-id="709be-1339">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Name" />
      </Docs>
    </Member>
    <Member MemberName="TagProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TagProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TagProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.TagProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TagProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TagProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TagProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.TagProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-1340"><see cref="P:System.Windows.FrameworkElement.Tag" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1340">Identifies the <see cref="P:System.Windows.FrameworkElement.Tag" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; TargetUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; TargetUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.TargetUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TargetUpdated As EventHandler(Of DataTransferEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ TargetUpdated;" />
      <MemberSignature Language="F#" Value="member this.TargetUpdated : EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " Usage="member this.TargetUpdated : System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-1341">이 요소의 속성 바인딩에 대한 대상 값이 변경되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1341">Occurs when the target value changes for any property binding on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1342">이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Data.Binding.TargetUpdated> 이벤트에 의해 발생 하는 <xref:System.Windows.Data.Binding> 이 요소와 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1342">This event creates an alias for the <xref:System.Windows.Data.Binding.TargetUpdated> event that is raised by any <xref:System.Windows.Data.Binding> associated with this element.</span></span> <span data-ttu-id="709be-1343">이 일반적으로 해당 바인딩이 양방향 바인딩으로 바인딩된 종속성 속성은는 이전 속성 값이 이제 유효성 검사 또는 속성 또는 데이터 원본을 지 원하는 캐싱 구성표에 따라 유효한 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1343">This usually means that the binding in question is a two-way binding, and that the bound  dependency property affirms that the previous property value is now invalid according to any validation or caching scheme that the property or the data source support.</span></span>  
  
 <span data-ttu-id="709be-1344">이벤트 데이터를 사용 합니다 <xref:System.Windows.FrameworkElement.TargetUpdated> 대상 값이 업데이트를 보고 하는 특정 속성을 결정 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1344">Use the event data of the <xref:System.Windows.FrameworkElement.TargetUpdated> event to determine the specific property that is reporting the target value update.</span></span>  
  
<a name="xamlAttributeUsage_TargetUpdated"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="709be-1345">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="709be-1345">XAML Attribute Usage</span></span>  
  
```  
<object TargetUpdated="eventHandler"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Data.Binding.TargetUpdated" />
      </Docs>
    </Member>
    <Member MemberName="TemplatedParent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject TemplatedParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject TemplatedParent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.TemplatedParent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TemplatedParent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ TemplatedParent { System::Windows::DependencyObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TemplatedParent : System.Windows.DependencyObject" Usage="System.Windows.FrameworkElement.TemplatedParent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-1346">이 요소의 템플릿 부모에 대한 참조를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1346">Gets a reference to the template parent of this element.</span></span> <span data-ttu-id="709be-1347">요소가 템플릿을 통해 만들어지지 않은 경우에는 이 속성이 관련이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1347">This property is not relevant if the element was not created through a template.</span></span></summary>
        <value><span data-ttu-id="709be-1348">요소입니다 <see cref="T:System.Windows.FrameworkTemplate" /> <see cref="P:System.Windows.FrameworkTemplate.VisualTree" /> 이 요소를 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1348">The element whose <see cref="T:System.Windows.FrameworkTemplate" /><see cref="P:System.Windows.FrameworkTemplate.VisualTree" /> caused this element to be created.</span></span> <span data-ttu-id="709be-1349">이 값은 대개 <see langword="null" />합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1349">This value is frequently <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1350"><xref:System.Windows.FrameworkElement.TemplatedParent%2A> 대개 `null` 애플리케이션 태그 또는 코드에서 생성 된 개체에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1350"><xref:System.Windows.FrameworkElement.TemplatedParent%2A> is frequently `null` for objects that are created in your application markup or code.</span></span> <span data-ttu-id="709be-1351">템플릿을 통해 직접 해당 개체를 만들기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1351">This is because you create those objects directly, not via a template.</span></span> <span data-ttu-id="709be-1352">루트, 논리적 트리를 탐색 하 여 가져온 개체 참조 또는 일반적인 이름으로 참조 템플릿에서 제공 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1352">Object references obtained by walking the logical tree from the root, or by typical name references, do not come from a template.</span></span>  
  
 <span data-ttu-id="709be-1353">인 사례 <xref:System.Windows.FrameworkElement.TemplatedParent%2A> 아닐 `null` 사용 하 여 시각적 트리를 탐색 하기 낮은 수준의 특정 입력 이벤트 적중 테스트, 이벤트 처리 등의 작업을 포함 <xref:System.Windows.Media.VisualTreeHelper>, 또는 열거자를 사용 하 여 작업에 제공 된 요소를 반환 하는 템플릿에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1353">Cases where <xref:System.Windows.FrameworkElement.TemplatedParent%2A> might not be `null` include operations such as hit-testing, event handling for certain low-level input events, walking the visual tree with <xref:System.Windows.Media.VisualTreeHelper>, or working with enumerators, which might return elements that came from templates.</span></span> <span data-ttu-id="709be-1354">또 다른 경우는 명시적으로 호출 하는 경우 <xref:System.Windows.FrameworkTemplate.FindName%2A> 기존에 대해 <xref:System.Windows.FrameworkTemplate> 되며 반환된 된 개체를 사용 하 여 작업 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1354">Another case is if you specifically call <xref:System.Windows.FrameworkTemplate.FindName%2A> against an existing <xref:System.Windows.FrameworkTemplate> and are work with the returned object.</span></span>  
  
 <span data-ttu-id="709be-1355">템플릿은 실제로 공유 개체를 서식 파일의 내용을 한 번만 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1355">Templates are actually shared objects, where the contents of the template are created only once.</span></span> <span data-ttu-id="709be-1356">따라서 템플릿에서 생성 된 요소에 대 한 개체 참조를 가져온 경우 명확한 논리 트리의 페이지 루트까지 도달 하지 않습니다를 알 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1356">Therefore, if you obtain an object reference to an element that came from a template, you may find that the apparent logical tree does not reach to the page root.</span></span> <span data-ttu-id="709be-1357">이러한 템플릿 참조 페이지의 논리 트리에 연결 하려면 가져와야는 <xref:System.Windows.FrameworkElement.TemplatedParent%2A> 값 및 계속를 원하는 대로 해당 요소 트리를 탐색 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1357">In order to connect such a template reference to the page's logical tree, you should get the <xref:System.Windows.FrameworkElement.TemplatedParent%2A> value and continue to navigate that element tree as desired.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTip">
      <MemberSignature Language="C#" Value="public object ToolTip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ToolTip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ToolTip" />
      <MemberSignature Language="VB.NET" Value="Public Property ToolTip As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ToolTip { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ToolTip : obj with get, set" Usage="System.Windows.FrameworkElement.ToolTip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.ToolTip)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-1358">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]에서 이 요소에 대해 표시되는 도구 설명 개체를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1358">Gets or sets the tool-tip object that is displayed for this element in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span></summary>
        <value><span data-ttu-id="709be-1359">도구 설명 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1359">The tooltip object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1360">이 속성의 값 형식인 경우 <xref:System.Windows.Controls.ToolTip>, 해당 값은에서 사용할 도구 설명의 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1360">If the value of this property is of type <xref:System.Windows.Controls.ToolTip>, then that value is the tool-tip that will be used in the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].</span></span>  <span data-ttu-id="709be-1361">다른 형식의 값이 있으면 해당 값으로 사용할 합니다 *콘텐츠* 에 대 한는 <xref:System.Windows.Controls.ToolTip> 제공 (생성 된) 시스템에서.</span><span class="sxs-lookup"><span data-stu-id="709be-1361">If the value is of any other type, then that value will be used as the *content* for a <xref:System.Windows.Controls.ToolTip> provided (constructed) by the system.</span></span> <span data-ttu-id="709be-1362">자세한 내용은 <xref:System.Windows.Controls.ToolTipService>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="709be-1362">For more information, see <xref:System.Windows.Controls.ToolTipService>.</span></span> <span data-ttu-id="709be-1363">추가적으로 사용자 지정할 수 있는 연결 된 속성을 제공 하는 서비스 클래스는 <xref:System.Windows.Controls.ToolTip>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1363">The service class provides attached properties that can be used to further customize a <xref:System.Windows.Controls.ToolTip>.</span></span>  
  
<a name="xamlAttributeUsage_ToolTip"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="709be-1364">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="709be-1364">XAML Attribute Usage</span></span>  
  
```  
<object ToolTip="toolTipContent"/>  
```  
  
<a name="xamlPropertyElementUsage_ToolTip"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="709be-1365">XAML 속성 요소 사용</span><span class="sxs-lookup"><span data-stu-id="709be-1365">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.ToolTip>  
    <ToolTip .../>  
  </object.ToolTip>  
</object>  
- or -  
<object>  
  <object.ToolTip>  
    toolTipObjectContent  
  </object.ToolTip>  
</object>  
```  
  
<a name="xamlValues_ToolTip"></a>   
## <a name="xaml-values"></a><span data-ttu-id="709be-1366">XAML 값</span><span class="sxs-lookup"><span data-stu-id="709be-1366">XAML Values</span></span>  
 <span data-ttu-id="709be-1367">*toolTipContent*</span><span class="sxs-lookup"><span data-stu-id="709be-1367">*toolTipContent*</span></span>  
 <span data-ttu-id="709be-1368">에 대 한 표시 텍스트를가 하는 문자열을 <xref:System.Windows.FrameworkElement.ToolTip%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1368">A string that becomes the display text for the <xref:System.Windows.FrameworkElement.ToolTip%2A>.</span></span>  
  
 <span data-ttu-id="709be-1369">*toolTipObjectContent*</span><span class="sxs-lookup"><span data-stu-id="709be-1369">*toolTipObjectContent*</span></span>  
 <span data-ttu-id="709be-1370">에 대 한 내용으로 사용 해야 하는 개체 요소 형식에 제공 된 일부 개체는 <xref:System.Windows.FrameworkElement> 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1370">Some object, provided in object element form, that should be used as the content for the <xref:System.Windows.FrameworkElement> .</span></span> <span data-ttu-id="709be-1371">일반적을 <xref:System.Windows.FrameworkElement> 또는 다른 요소에 대 한 레이아웃 합성을 만드는 <xref:System.Windows.FrameworkElement.ToolTip%2A>, 최종적으로 합치기 내에 텍스트 콘텐츠를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1371">Typically this would be a <xref:System.Windows.FrameworkElement> or some other element that creates layout compositing for the <xref:System.Windows.FrameworkElement.ToolTip%2A>, eventually containing text content within the compositing.</span></span> <span data-ttu-id="709be-1372">이 사용법에서 합니다 <xref:System.Windows.Controls.ToolTip> 요소가 만들어집니다 구문 분석 된에서 암시적으로 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], 및 *toolTipObjectContent* 내용으로 설정 되어 해당 <xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=nameWithType> 속성.</span><span class="sxs-lookup"><span data-stu-id="709be-1372">In this usage, the <xref:System.Windows.Controls.ToolTip> element is created implicitly from the parsed [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], and the *toolTipObjectContent* content is set as its <xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="709be-1373"><`ToolTip` .../></span><span class="sxs-lookup"><span data-stu-id="709be-1373"><`ToolTip` .../></span></span>  
 <span data-ttu-id="709be-1374"><xref:System.Windows.Controls.ToolTip>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="709be-1374">See <xref:System.Windows.Controls.ToolTip>.</span></span>  
  
<a name="dependencyPropertyInfo_ToolTip"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="709be-1375">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="709be-1375">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-1376">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-1376">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ToolTipProperty>|  
|<span data-ttu-id="709be-1377">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="709be-1377">Metadata properties set to `true`</span></span>|<span data-ttu-id="709be-1378">없음</span><span class="sxs-lookup"><span data-stu-id="709be-1378">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="709be-1379">다음 예제에서는 <xref:System.Windows.Controls.ToolTip> 코드 및 집합에는 <xref:System.Windows.FrameworkElement.ToolTip%2A> 속성을를 <xref:System.Windows.Controls.Primitives.StatusBar> 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1379">The following example creates a <xref:System.Windows.Controls.ToolTip> in code and then sets the <xref:System.Windows.FrameworkElement.ToolTip%2A> property on a <xref:System.Windows.Controls.Primitives.StatusBar> control.</span></span>  
  
 [!code-csharp[StatusBar#MakeProgressBar](~/samples/snippets/csharp/VS_Snippets_Wpf/StatusBar/CSharp/Window1.xaml.cs#makeprogressbar)]
 [!code-vb[StatusBar#MakeProgressBar](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StatusBar/visualbasic/window1.xaml.vb#makeprogressbar)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipClosing">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ToolTipEventHandler ToolTipClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ToolTipEventHandler ToolTipClosing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ToolTipClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ToolTipClosing As ToolTipEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ToolTipEventHandler ^ ToolTipClosing;" />
      <MemberSignature Language="F#" Value="member this.ToolTipClosing : System.Windows.Controls.ToolTipEventHandler " Usage="member this.ToolTipClosing : System.Windows.Controls.ToolTipEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ToolTipEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-1380">요소의 도구 설명을 닫기 직전에 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1380">Occurs just before any tooltip on the element is closed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1381">표시 된 <xref:System.Windows.FrameworkElement.ToolTipClosing> 이벤트를 처리 됨으로 도구 설명 닫기 취소 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1381">Marking the <xref:System.Windows.FrameworkElement.ToolTipClosing> event as handled does not cancel closing the tooltip.</span></span> <span data-ttu-id="709be-1382">도구 설명이 표시 되 면 도구 설명 닫기 에서만 수행 됩니다 UI 사용 하 여 사용자 상호 작용에 응답 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1382">Once the tooltip is displayed, closing the tooltip is done only in response to user interaction with the UI.</span></span>  
  
 <span data-ttu-id="709be-1383">이 이벤트는 <xref:System.Windows.EventTrigger> 스타일에서입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1383">This event cannot be an <xref:System.Windows.EventTrigger> in a style.</span></span> <span data-ttu-id="709be-1384">이 이벤트의 식별자 필드 다시 사용 하 여 서비스 수준 이벤트에 대 한 추가/제거 이벤트 메서드를 노출 하지 않는 서비스에서 구현 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1384">This is because the identifier field of this event re-uses an implementation from a service that does not expose add/remove event methods for the service-level event.</span></span>  
  
<a name="routedEventInfo_ToolTipClosing"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="709be-1385">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="709be-1385">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-1386">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-1386">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ToolTipClosingEvent>|  
|<span data-ttu-id="709be-1387">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="709be-1387">Routing strategy</span></span>|<span data-ttu-id="709be-1388">직접</span><span class="sxs-lookup"><span data-stu-id="709be-1388">Direct</span></span>|  
|<span data-ttu-id="709be-1389">대리자</span><span class="sxs-lookup"><span data-stu-id="709be-1389">Delegate</span></span>|<xref:System.Windows.Controls.ToolTipEventHandler>|  
  
-   <span data-ttu-id="709be-1390">재정의 <xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1390">Override <xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ToolTip" />
      </Docs>
    </Member>
    <Member MemberName="ToolTipClosingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ToolTipClosingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ToolTipClosingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipClosingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipClosingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ToolTipClosingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipClosingEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ToolTipClosingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-1391"><see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1391">Identifies the <see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1392">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1392">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="709be-1393">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1393">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="709be-1394">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1394">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="709be-1395">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="709be-1395">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="709be-1396">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="709be-1396">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipOpening">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ToolTipEventHandler ToolTipOpening;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ToolTipEventHandler ToolTipOpening" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ToolTipOpening" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ToolTipOpening As ToolTipEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ToolTipEventHandler ^ ToolTipOpening;" />
      <MemberSignature Language="F#" Value="member this.ToolTipOpening : System.Windows.Controls.ToolTipEventHandler " Usage="member this.ToolTipOpening : System.Windows.Controls.ToolTipEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ToolTipEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-1397">요소의 도구 설명이 열리면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1397">Occurs when any tooltip on the element is opened.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1398">Ui에서 처리기에 대 한 도구 설명이 표시 되지 않게 <xref:System.Windows.FrameworkElement.ToolTipOpening> 표시할 수는 <xref:System.Windows.Controls.ToolTipEventArgs> 이벤트 데이터를 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1398">To prevent a tooltip from appearing in the UI, your handler for <xref:System.Windows.FrameworkElement.ToolTipOpening> can mark the <xref:System.Windows.Controls.ToolTipEventArgs> event data handled.</span></span> <span data-ttu-id="709be-1399">그렇지 않은 경우는 도구 설명이 표시 됩니다, 값을 사용 하 여 <xref:System.Windows.FrameworkElement.ToolTip%2A> 도구 설명 콘텐츠로 속성.</span><span class="sxs-lookup"><span data-stu-id="709be-1399">Otherwise, the tooltip is displayed, using the value of the <xref:System.Windows.FrameworkElement.ToolTip%2A> property as the tooltip content.</span></span> <span data-ttu-id="709be-1400">다른 가능한 시나리오는 값을 다시 설정 하는 처리기를 작성할 수 있습니다는 <xref:System.Windows.FrameworkElement.ToolTip%2A> 도구 설명이 표시 되는 바로 전에 이벤트 원본에 있는 요소에 대 한 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1400">Another possible scenario is that you could write a handler that resets the value of the <xref:System.Windows.FrameworkElement.ToolTip%2A> property for the element that is the event source, just before the tooltip is displayed.</span></span>  
  
 <span data-ttu-id="709be-1401"><xref:System.Windows.FrameworkElement.ToolTipOpening> 경우 발생 하지 것입니다 값 <xref:System.Windows.FrameworkElement.ToolTip%2A> 는 `null` 또는 기타 수단을 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1401"><xref:System.Windows.FrameworkElement.ToolTipOpening> will not be raised if the value of <xref:System.Windows.FrameworkElement.ToolTip%2A> is `null` or otherwise unset.</span></span> <span data-ttu-id="709be-1402">의도적으로 설정 하지 마세요 <xref:System.Windows.FrameworkElement.ToolTip%2A> 에 `null` 도구 설명이 열려 또는;이 도구 설명 닫기의 결과 없습니다 열고 UI에는 원하지 않는 시각적 요소가 만들어집니다 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1402">Do not deliberately set <xref:System.Windows.FrameworkElement.ToolTip%2A> to `null` while a tooltip is open or opening; this will not have the effect of closing the tooltip, and will instead create an undesirable visual artifact in the UI.</span></span>  
  
 <span data-ttu-id="709be-1403">합니다 <xref:System.Windows.FrameworkElement.ToolTipOpening> 이벤트 일 수 없습니다는 <xref:System.Windows.EventTrigger> 스타일에서입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1403">The <xref:System.Windows.FrameworkElement.ToolTipOpening> event cannot be an <xref:System.Windows.EventTrigger> in a style.</span></span> <span data-ttu-id="709be-1404">이 이벤트의 식별자 필드 다시 사용 하 여 서비스 수준 이벤트에 대 한 추가/제거 이벤트 메서드를 노출 하지 않는 서비스에서 구현 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1404">This is because the identifier field of this event re-uses an implementation from a service that does not expose add/remove event methods for the service-level event.</span></span>  
  
<a name="routedEventInfo_ToolTipOpening"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="709be-1405">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="709be-1405">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-1406">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-1406">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ToolTipOpeningEvent>|  
|<span data-ttu-id="709be-1407">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="709be-1407">Routing strategy</span></span>|<span data-ttu-id="709be-1408">직접</span><span class="sxs-lookup"><span data-stu-id="709be-1408">Direct</span></span>|  
|<span data-ttu-id="709be-1409">대리자</span><span class="sxs-lookup"><span data-stu-id="709be-1409">Delegate</span></span>|<xref:System.Windows.Controls.ToolTipEventHandler>|  
  
-   <span data-ttu-id="709be-1410">재정의 <xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1410">Override <xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ToolTip" />
      </Docs>
    </Member>
    <Member MemberName="ToolTipOpeningEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ToolTipOpeningEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ToolTipOpeningEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipOpeningEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipOpeningEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ToolTipOpeningEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipOpeningEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ToolTipOpeningEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-1411"><see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1411">Identifies the <see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1412">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1412">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="709be-1413">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1413">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="709be-1414">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1414">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="709be-1415">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="709be-1415">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="709be-1416">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="709be-1416">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ToolTipProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ToolTipProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ToolTipProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ToolTipProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-1417"><see cref="P:System.Windows.FrameworkElement.ToolTip" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1417">Identifies the <see cref="P:System.Windows.FrameworkElement.ToolTip" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Triggers : System.Windows.TriggerCollection" Usage="System.Windows.FrameworkElement.Triggers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-1418">이 요소에 직접 설정되거나 자식 요소에 설정된 트리거의 컬렉션을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1418">Gets the collection of triggers established directly on this element, or in child elements.</span></span></summary>
        <value><span data-ttu-id="709be-1419"><see cref="T:System.Windows.Trigger" /> 개체의 강력한 형식의 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1419">A strongly typed collection of <see cref="T:System.Windows.Trigger" /> objects.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="709be-1420">이 속성 설정할 수 있습니다 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 컬렉션 개체에 액세스 하 고 추가 등의 다양 한 메서드를 사용 하 여 또는 컬렉션 구문을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1420">This property can only be set in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] through the collection syntax shown, or by accessing the collection object and using its various methods such as Add.</span></span> <span data-ttu-id="709be-1421">컬렉션 개체 자체를 액세스 하는 속성은 읽기 전용, 컬렉션 자체는 읽기 / 쓰기입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1421">The property to access the collection object itself is read-only, the collection itself is read-write.</span></span> <span data-ttu-id="709be-1422">속성이 루트 요소에만 있습니다. 찾거나 다른 곳에서 설정 하려고 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1422">The property only exists on root elements; attempting to find it or set it elsewhere will cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="709be-1423">이 속성은이 요소에서 사용에서 하는 스타일의 일부로 존재 하는 트리거를 검사할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1423">This property does not enable you to examine triggers that exist as part of styles in use on this element.</span></span> <span data-ttu-id="709be-1424">만 문자 그대로 태그 또는 코드에서 컬렉션에 추가 된 트리거의 컬렉션을 보고 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1424">It only reports the collection of triggers that are literally added to the collection, either in markup or code.</span></span> <span data-ttu-id="709be-1425">요소 일반적으로 이러한 요소가 없는 기본적으로 기존 (템플릿을 통해 예를 들어); 대신 스타일에서 설정 컨트롤 합치기에서 제공 하는 트리거에 대 한 보다 일반적인 것입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1425">Elements do not typically have such elements existing by default (through a template for instance); it is more common for triggers that come from control compositing to be established in styles instead.</span></span>  
  
 <span data-ttu-id="709be-1426">동작 측면에서 (선언 된 요소에서 생성 되는 효과 설정 하려는 시도 <xref:System.Windows.FrameworkElement.Triggers%2A> 컬렉션), 트리거 조건 및 트리거 영향이이 요소에 있을 수 있습니다 또는 논리적 트리에서 자식 요소에 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1426">In terms of behavior (and trying to establish which effect came from which element's declared <xref:System.Windows.FrameworkElement.Triggers%2A> collection), both the triggering condition and the trigger effect might be on this element, or might be on its child elements in the logical tree.</span></span> <span data-ttu-id="709be-1427">와 같은 수명 이벤트를 사용 하는 경우 <xref:System.Windows.FrameworkElement.Loaded> 이 컬렉션을 가져오려면 자식 요소의 트리거 아직 없을 수 있습니다 완전히 로드 및 컬렉션은 런타임 시 실제로 것 보다 더 작은 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1427">Note that if you use lifetime events such as <xref:System.Windows.FrameworkElement.Loaded> to get this collection, the child element's triggers might not yet be fully loaded, and the collection will be smaller than it would truly be at run time.</span></span>  
  
 <span data-ttu-id="709be-1428">요소에 설정 된 트리거의 컬렉션만 지원 합니다. 이때 <xref:System.Windows.EventTrigger>에서 속성 트리거는 없습니다 (<xref:System.Windows.Trigger>).</span><span class="sxs-lookup"><span data-stu-id="709be-1428">Note that the collection of triggers established on an element only supports <xref:System.Windows.EventTrigger>, not property triggers (<xref:System.Windows.Trigger>).</span></span> <span data-ttu-id="709be-1429">속성 트리거를 필요로 하는 경우 스타일 또는 템플릿 내에 배치한 하며 그런 다음 해당 스타일 또는 템플릿 요소에 할당 하거나 통해 직접는 <xref:System.Windows.FrameworkElement.Style%2A> 속성 또는 암시적 스타일 참조를 통해 간접적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1429">If you require property triggers, you must place these within a style or template and then assign that style or template to the element either directly through the <xref:System.Windows.FrameworkElement.Style%2A> property, or indirectly through an implicit style reference.</span></span>  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="709be-1430">XAML 속성 요소 사용</span><span class="sxs-lookup"><span data-stu-id="709be-1430">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.Triggers>  
    oneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a><span data-ttu-id="709be-1431">XAML 값</span><span class="sxs-lookup"><span data-stu-id="709be-1431">XAML Values</span></span>  
 <span data-ttu-id="709be-1432">*oneOrMoreTriggers*</span><span class="sxs-lookup"><span data-stu-id="709be-1432">*oneOrMoreTriggers*</span></span>  
 <span data-ttu-id="709be-1433">하나 이상의 정의 <xref:System.Windows.EventTrigger> 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1433">One or more defined <xref:System.Windows.EventTrigger> elements.</span></span> <span data-ttu-id="709be-1434">이러한 각 트리거는 올바른 스토리 보드 작업 및 참조를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1434">Each such trigger is expected to contain valid storyboard actions and references.</span></span> <span data-ttu-id="709be-1435">참고가이 컬렉션 페이지의 루트 요소에만 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1435">Note that this collection can only be established on the root element of a page.</span></span> <span data-ttu-id="709be-1436">자세한 내용은 [스토리보드 개요](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="709be-1436">For more information, see [Storyboards Overview](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.EventTrigger" />
      </Docs>
    </Member>
    <Member MemberName="TryFindResource">
      <MemberSignature Language="C#" Value="public object TryFindResource (object resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object TryFindResource(object resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.TryFindResource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFindResource (resourceKey As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ TryFindResource(System::Object ^ resourceKey);" />
      <MemberSignature Language="F#" Value="member this.TryFindResource : obj -&gt; obj" Usage="frameworkElement.TryFindResource resourceKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resourceKey"><span data-ttu-id="709be-1437">찾을 리소스의 키 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1437">The key identifier of the resource to be found.</span></span></param>
        <summary><span data-ttu-id="709be-1438">지정된 키를 사용하여 리소스를 검색하고 해당 리소스를 반환합니다(있는 경우).</span><span class="sxs-lookup"><span data-stu-id="709be-1438">Searches for a resource with the specified key, and returns that resource if found.</span></span></summary>
        <returns><span data-ttu-id="709be-1439">찾은 리소스이거나, 제공된 <paramref name="key" />에 리소스가 없으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1439">The found resource, or <see langword="null" /> if no resource with the provided <paramref name="key" /> is found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1440">리소스를 호출 하는 요소에 없는 경우 논리 트리를 통해 부모 리소스 트리를 위쪽으로 검색, 트리는 동일한 방식에서 리소스 검색된 경우 요청한 키 런타임 시.</span><span class="sxs-lookup"><span data-stu-id="709be-1440">If the resource is not found on the calling element, the parent resource tree is searched upward through the logical tree, in the same way that the tree would be searched if a resource were requested by key at run time.</span></span> <span data-ttu-id="709be-1441">메서드는 반환 `null` 시 트리의 기존 조건 당 리소스 트리의 해당 키의 리소스가 존재 했던 경우에 있는 <xref:System.Windows.FrameworkElement.TryFindResource%2A> 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1441">The method returns `null` only if no resource of that key existed anywhere in the resource tree, per the existing conditions of the tree at the time that <xref:System.Windows.FrameworkElement.TryFindResource%2A> is called.</span></span>  
  
 <span data-ttu-id="709be-1442">일반적으로 즉시 캐스팅 반환 되는 리소스 값으로 설정 하 려 했던는 속성의 형식으로 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1442">Typically you would immediately cast the return value to the type of the property that you were attempting to set with the returned resource value.</span></span>  
  
 <span data-ttu-id="709be-1443"><xref:System.Windows.FrameworkElement.FindResource%2A> 메서드가 비슷한 동작을 제외 하 고 제공 된 키를 포함 하는 리소스가 반환 된 경우 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1443">The <xref:System.Windows.FrameworkElement.FindResource%2A> method has similar behavior, except that it throws an exception if no resource with the provided key was returned.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="709be-1444">다음 예제에서는 집합 클릭 되는 단추 리소스 정의 브러시로 배경이 구할 수 있는 호출 하 여는 단추 처리기로 구현 됩니다 <xref:System.Windows.FrameworkElement.TryFindResource%2A> 자체입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1444">The following example is implemented as a button handler, where the button being clicked sets its background to a resource-defined brush obtained by calling <xref:System.Windows.FrameworkElement.TryFindResource%2A> on itself.</span></span> <span data-ttu-id="709be-1445">이 구현에서는 요소 트리 및 리소스를 찾습니다 (리소스 자체에 정의 된 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 이며 표시 되지 않습니다).</span><span class="sxs-lookup"><span data-stu-id="709be-1445">This walks the element tree and finds the resource (the resource itself is defined in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and is not shown).</span></span>  
  
 [!code-csharp[BaseElementsSmorgasbord#FETryFindResource](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#fetryfindresource)]
 [!code-vb[BaseElementsSmorgasbord#FETryFindResource](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#fetryfindresource)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Unloaded">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Unloaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Unloaded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Unloaded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Unloaded As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Unloaded;" />
      <MemberSignature Language="F#" Value="member this.Unloaded : System.Windows.RoutedEventHandler " Usage="member this.Unloaded : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-1446">로드된 요소의 요소 트리에서 요소를 제거할 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1446">Occurs when the element is removed from within an element tree of loaded elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1447">직접 라우트된 이벤트에 대 한 경로 따르지, 발생 하는 동일한 요소 내 에서만 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1447">Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</span></span> <span data-ttu-id="709be-1448">라우트된 이벤트는 라우트된 이벤트 동작은 다른 지원지 않습니다 직접: 액세스할 수 있는 처리기 컬렉션을 지원 하며으로 사용할 수는 <xref:System.Windows.EventTrigger> 스타일에서입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1448">Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <xref:System.Windows.EventTrigger> in a style.</span></span>  
  
 <span data-ttu-id="709be-1449"><xref:System.Windows.FrameworkElement.Loaded> 및 <xref:System.Windows.FrameworkElement.Unloaded> 시스템 사용자가 시작한 테마 변경으로 인해 컨트롤에서 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1449"><xref:System.Windows.FrameworkElement.Loaded> and <xref:System.Windows.FrameworkElement.Unloaded> might both be raised on controls as a result of user-initiated system theme changes.</span></span> <span data-ttu-id="709be-1450">테마를 변경 하면 컨트롤 템플릿 및 차례로 언로드하고 다시 로드 하기 위해 전체 컨트롤이 포함 된 시각적 트리를 무효화 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1450">A theme change causes an invalidation of the control template and the contained visual tree, which in turn causes the entire control to unload and reload.</span></span> <span data-ttu-id="709be-1451">따라서 <xref:System.Windows.FrameworkElement.Unloaded> 페이지 외부로 탐색에만 발생 하도록 가정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1451">Therefore <xref:System.Windows.FrameworkElement.Unloaded> cannot be assumed to occur only on navigation away from the page.</span></span>  
  
 <span data-ttu-id="709be-1452"><xref:System.Windows.FrameworkElement.Unloaded> 애플리케이션 종료를 시작한 후에 이벤트가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1452">Note that the <xref:System.Windows.FrameworkElement.Unloaded> event is not raised after an application begins shutting down.</span></span> <span data-ttu-id="709be-1453">조건을 정의한 경우 애플리케이션이 종료 된 <xref:System.Windows.Application.ShutdownMode%2A> 속성 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1453">Application shutdown occurs when the condition defined by the <xref:System.Windows.Application.ShutdownMode%2A> property occurs.</span></span> <span data-ttu-id="709be-1454">에 대 한 처리기 내에서 정리 코드를 배치 하는 경우는 <xref:System.Windows.FrameworkElement.Unloaded> 과 같은 이벤트를 <xref:System.Windows.Window> 또는 <xref:System.Windows.Controls.UserControl>, 것을 호출할 수 없습니다 예상 대로입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1454">If you place cleanup code within a handler for the <xref:System.Windows.FrameworkElement.Unloaded> event, such as for a <xref:System.Windows.Window> or a <xref:System.Windows.Controls.UserControl>, it may not be called as expected.</span></span>  
  
<a name="routedEventInfo_Unloaded"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="709be-1455">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="709be-1455">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-1456">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-1456">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.UnloadedEvent>|  
|<span data-ttu-id="709be-1457">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="709be-1457">Routing strategy</span></span>|<span data-ttu-id="709be-1458">직접</span><span class="sxs-lookup"><span data-stu-id="709be-1458">Direct</span></span>|  
|<span data-ttu-id="709be-1459">대리자</span><span class="sxs-lookup"><span data-stu-id="709be-1459">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="UnloadedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent UnloadedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent UnloadedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.UnloadedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnloadedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ UnloadedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnloadedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.UnloadedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-1460"><see cref="E:System.Windows.FrameworkElement.Unloaded" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1460">Identifies the <see cref="E:System.Windows.FrameworkElement.Unloaded" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1461">라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1461">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="709be-1462">이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1462">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="709be-1463">이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1463">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="709be-1464">라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="709be-1464">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="709be-1465">라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="709be-1465">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.UnregisterName : string -&gt; unit" Usage="frameworkElement.UnregisterName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="709be-1466">현재 범위에서 제거할 이름-개체 쌍의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1466">Name of the name-object pair to remove from the current scope.</span></span></param>
        <summary><span data-ttu-id="709be-1467"><see cref="T:System.Windows.NameScope" /> 등록 취소 메서드에 대한 액세스를 간소화합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1467">Simplifies access to the <see cref="T:System.Windows.NameScope" /> de-registration method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1468">만 하면 등록을 취소할 이름을 다시 동일한 이름 가진 다른 요소를 등록 하려는 경우.</span><span class="sxs-lookup"><span data-stu-id="709be-1468">You only need to un-register names if you intend to re-register another element with that same name.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)" />
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="UpdateDefaultStyle">
      <MemberSignature Language="C#" Value="public void UpdateDefaultStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateDefaultStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.UpdateDefaultStyle" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateDefaultStyle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateDefaultStyle();" />
      <MemberSignature Language="F#" Value="member this.UpdateDefaultStyle : unit -&gt; unit" Usage="frameworkElement.UpdateDefaultStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="709be-1469">기본 스타일을 현재 <see cref="T:System.Windows.FrameworkElement" />에 다시 적용합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1469">Reapplies the default style to the current <see cref="T:System.Windows.FrameworkElement" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLayoutRounding">
      <MemberSignature Language="C#" Value="public bool UseLayoutRounding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseLayoutRounding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.UseLayoutRounding" />
      <MemberSignature Language="VB.NET" Value="Public Property UseLayoutRounding As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseLayoutRounding { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseLayoutRounding : bool with get, set" Usage="System.Windows.FrameworkElement.UseLayoutRounding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-1470">레이아웃 중에 이 요소의 크기와 위치에 레이아웃 반올림을 적용해야 하는지를 표시하는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1470">Gets or sets a value that indicates whether layout rounding should be applied to this element's size and position during layout.</span></span></summary>
        <value><span data-ttu-id="709be-1471">레이아웃 반올림이 적용되는 경우 <see langword="true" />이고, 그렇지 않은 경우 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1471"><see langword="true" /> if layout rounding is applied; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="709be-1472">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1472">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1473">경우는 <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> 요소에 대 한 속성은 `true`, 하는 동안 계산 되는 모든 비정 수 픽셀 값을 <xref:System.Windows.UIElement.Measure%2A> 및 <xref:System.Windows.UIElement.Arrange%2A> 전달 전체 픽셀 값으로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1473">When the <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> property for an element is `true`, all non-integral pixel values that are calculated during the <xref:System.Windows.UIElement.Measure%2A> and <xref:System.Windows.UIElement.Arrange%2A> passes are rounded to whole pixel values.</span></span>  
  
 <span data-ttu-id="709be-1474">이 속성은 자식 요소에 의해 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1474">This property is inherited by child elements.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="709be-1475">설정 해야 <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> 에 `true` 루트 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1475">You should set <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> to `true` on the root element.</span></span> <span data-ttu-id="709be-1476">부모 좌표로; 자식 좌표를 추가 하는 레이아웃 시스템 따라서 부모 좌표를 픽셀 경계에 없는 경우 자식 좌표가 픽셀 경계에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1476">The layout system adds child coordinates to the parent coordinates; therefore, if the parent coordinates are not on a pixel boundary, the child coordinates are also not on a pixel boundary.</span></span> <span data-ttu-id="709be-1477">경우 <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> 루트에 설정, 설정할 수 없습니다. <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> 자식에 원하는 효과 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1477">If <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> cannot be set at the root, set <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> on the child to obtain the effect that you want.</span></span>  
  
 <span data-ttu-id="709be-1478">픽셀 경계에 개체를 그리기는 지 디바이스 픽셀 가운데 떨어질 때 앤티 앨리어싱으로 인해 생성 되는 반투명 가장자리를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1478">Drawing objects on pixel boundaries eliminates the semi-transparent edges that are produced by anti-aliasing, when an edge falls in the middle of a device pixel.</span></span> <span data-ttu-id="709be-1479">다음 그림에서는 디바이스 픽셀 가운데에 있는 단일 픽셀 너비 줄의 출력을 보여줍니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1479">The following illustration shows the output of a single pixel-width line that falls in the middle of a device pixel.</span></span> <span data-ttu-id="709be-1480">왼쪽에 있는 줄 레이아웃 반올림을 사용 하지 않는 이며 앤티 앨리어싱된 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1480">The line on the left does not use layout rounding and is anti-aliased.</span></span> <span data-ttu-id="709be-1481">오른쪽의 선 레이아웃 반올림을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1481">The line on the right uses layout rounding.</span></span>  
  
 <span data-ttu-id="709be-1482">![방지&#45;단일 픽셀 선에 비교한 앨리어싱된 선입니다. ] (~/add/media/pixelsnaplinecompare.PNG "단일 픽셀 선에 비교한 앤티 앨리어싱된 선입니다.")</span><span class="sxs-lookup"><span data-stu-id="709be-1482">![Anti&#45;aliased line compared to single pixel line.](~/add/media/pixelsnaplinecompare.PNG "Anti-aliased line compared to single pixel line.")</span></span>  
  
 <span data-ttu-id="709be-1483">레이아웃 반올림을 사용 하는 경우 및 <xref:System.Windows.GridUnitType.Star> 크기 조정, 레이아웃 시스템 사소한 차이에 만듭니다 하위 픽셀 렌더링 하지 않으려면 열 또는 행 측정 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1483">When you use layout rounding and <xref:System.Windows.GridUnitType.Star> sizing, the layout system creates small variations in the column or row measurements to avoid subpixel rendering.</span></span> <span data-ttu-id="709be-1484">예를 들어 눈금 크기의 3 개의 열을 사용 하 여 100의 전체 너비에 <xref:System.Windows.GridUnitType.Star>된 33.3의 같은 너비는 세 개의 열을 만드는 대신, 레이아웃 시스템 33 및 너비는 34는 너비가 있는 2 열을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1484">For example, if a grid has a total width of 100 with 3 columns each of size <xref:System.Windows.GridUnitType.Star>, instead of creating three columns that have an equal width of 33.3, the layout system creates 2 columns that have a width of 33 and one that has a width of 34.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="709be-1485">.NET 4.6에서 테두리가 있는 컨트롤에 클리핑 인스턴스를 줄이기 위해 반올림 하는 레이아웃으로 변경 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1485">In .NET 4.6 changes were made to layout rounding to reduce instances of clipping in controls with borders.</span></span> <span data-ttu-id="709be-1486">기본적으로이 기능에는 대상 프레임 워크가.NET Framework 4.6 이상이 경우 활성화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1486">By default, this feature is enabled if your Target Framework is .NET Framework 4.6 or higher.</span></span> <span data-ttu-id="709be-1487">이전 버전의 framework 대상으로 하는 애플리케이션 app.config 파일에 다음 설정을 추가 하 여를 새 동작을 옵트인 수: `<runtime><AppContextSwitchOverrides value="Switch.MS.Internal.DoNotApplyLayoutRoundingToMarginsAndBorderThickness=false"/></runtime>` 애플리케이션은.NET Framework 4.6에서 실행 중일 때만 하면 설정이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1487">Applications that target earlier versions of the framework can opt in into the new behavior by adding the following setting to an app.config file: `<runtime><AppContextSwitchOverrides value="Switch.MS.Internal.DoNotApplyLayoutRoundingToMarginsAndBorderThickness=false"/></runtime>` The setting only takes effect when the application is running on the .NET Framework 4.6.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="709be-1488">다음 예제에서는 효과 보여 줍니다.는 <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> 속성이 단일 픽셀 너비 줄에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1488">The following example demonstrates the effect that the <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> property has on a single pixel-width line.</span></span> <span data-ttu-id="709be-1489">왼쪽에 있는 줄 레이아웃 반올림을 사용 하지 않으며 오른쪽에 있는 줄 레이아웃 반올림을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1489">The line on the left does not use layout rounding and the line on the right uses layout rounding.</span></span> <span data-ttu-id="709be-1490">창 크기를 느리게 조정 하는 경우 해당 레이아웃 반올림이 적용 차이 볼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1490">If you slowly resize the window, you can see the difference that layout rounding makes.</span></span>  
  
```xaml  
  
<Page x:Class="LayoutRounding.Lines"  
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"  
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"  
    Title="Lines" Name="linesPage"  
    >  
  <StackPanel Width="150"  Margin="7" Orientation="Horizontal">  
    <!-- Single pixel line with layout rounding turned OFF.-->  
    <Rectangle UseLayoutRounding="False"  
       Width="45.5" Margin="10" Height="1" Fill="Red"/>  
    <!-- Single pixel line with layout rounding turned ON.-->  
    <Rectangle UseLayoutRounding="True"  
      Width="45.5" Margin="10" Height="1" Fill="Red"/>  
  </StackPanel>  
  <!-- Background Grid -->  
  <Page.Background>  
    <DrawingBrush  Viewport="0,0,10,10" ViewportUnits="Absolute" TileMode="Tile">  
      <DrawingBrush.Drawing>  
        <DrawingGroup>  
          <GeometryDrawing Brush="White">  
            <GeometryDrawing.Geometry>  
              <RectangleGeometry Rect="0,0,1,1" />  
            </GeometryDrawing.Geometry>  
          </GeometryDrawing>  
          <GeometryDrawing Geometry="M0,0 L1,0 1,0.1, 0,0.1Z " Brush="#CCCCFF" />  
          <GeometryDrawing Geometry="M0,0 L0,1 0.1,1, 0.1,0Z" Brush="#CCCCFF" />  
        </DrawingGroup>  
      </DrawingBrush.Drawing>  
    </DrawingBrush>  
  </Page.Background>  
</Page>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLayoutRoundingProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty UseLayoutRoundingProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty UseLayoutRoundingProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.UseLayoutRoundingProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UseLayoutRoundingProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ UseLayoutRoundingProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable UseLayoutRoundingProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.UseLayoutRoundingProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-1491"><see cref="P:System.Windows.FrameworkElement.UseLayoutRounding" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1491">Identifies the <see cref="P:System.Windows.FrameworkElement.UseLayoutRounding" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.VerticalAlignment VerticalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.VerticalAlignment VerticalAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.VerticalAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property VerticalAlignment As VerticalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::VerticalAlignment VerticalAlignment { System::Windows::VerticalAlignment get(); void set(System::Windows::VerticalAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.VerticalAlignment : System.Windows.VerticalAlignment with get, set" Usage="System.Windows.FrameworkElement.VerticalAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.VerticalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-1492">패널 또는 항목 컨트롤 같은 부모 요소에 구성되어 있을 경우 이 요소에 적용되는 세로 맞춤 특징을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1492">Gets or sets the vertical alignment characteristics applied to this element when it is composed within a parent element such as a panel or items control.</span></span></summary>
        <value><span data-ttu-id="709be-1493">세로 맞춤 설정입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1493">A vertical alignment setting.</span></span> <span data-ttu-id="709be-1494">기본값은 <see cref="F:System.Windows.VerticalAlignment.Stretch" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1494">The default is <see cref="F:System.Windows.VerticalAlignment.Stretch" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1495">때 <xref:System.Windows.FrameworkElement.Height%2A> 하 고 <xref:System.Windows.FrameworkElement.Width%2A> 속성 요소에 명시적으로 설정 하 고 이러한 측정 레이아웃 우선이 속성을 설정 하 여 일반적인 효과 취소 <xref:System.Windows.VerticalAlignment.Stretch>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1495">When <xref:System.Windows.FrameworkElement.Height%2A> and <xref:System.Windows.FrameworkElement.Width%2A> properties are explicitly set on an element, these measurements take layout precedent and cancel the regular effects of setting this property to <xref:System.Windows.VerticalAlignment.Stretch>.</span></span>  
  
 <span data-ttu-id="709be-1496"><xref:System.Windows.FrameworkElement.VerticalAlignment%2A> 가 [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] 란 실제로 종속성 속성에 대 한 속성 접근자입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1496"><xref:System.Windows.FrameworkElement.VerticalAlignment%2A> is the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] property accessor for what is in reality a dependency property.</span></span> <span data-ttu-id="709be-1497">이 특정 종속성 속성에는 상당히 자주 해당 "기본값"이 파생 된 요소 클래스, 특히 컨트롤에서에서 서로 다르게 설정에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1497">This particular dependency property quite frequently has its apparent "default" value set differently in derived element classes, particularly controls.</span></span> <span data-ttu-id="709be-1498">일반적으로이 두 가지 방법 중 하나에서 발생 합니다: 특정 파생 클래스 이지만, 해당 기본값을 설정 하는 것에 대 한 메타 데이터는 다른 종속성 속성이 다시 등록 또는 해당 종속성 속성 값을 다르게 설정 하는 기본 스타일이 적용 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1498">This generally occurs in one of two ways: the dependency property is re-registered to a particular  derived class, but with different metadata for setting its defaults; or there is a default style being applied that sets that dependency property value differently.</span></span> <span data-ttu-id="709be-1499">예를 들어, 명백한 "기본값인" <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> 에 대 한는 <xref:System.Windows.Controls.ComboBoxItem> 컨트롤이 <xref:System.Windows.VerticalAlignment.Center>경우에 <xref:System.Windows.Controls.ComboBoxItem> 상속 <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> 에서 직접 <xref:System.Windows.FrameworkElement>입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1499">For example, the apparent "default" of <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> for a <xref:System.Windows.Controls.ComboBoxItem> control will be <xref:System.Windows.VerticalAlignment.Center>, even though <xref:System.Windows.Controls.ComboBoxItem> inherits <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> direct from <xref:System.Windows.FrameworkElement>.</span></span> <span data-ttu-id="709be-1500">기본 스타일 내에서 다시 설정 된 값 때문에 이것이 <xref:System.Windows.Controls.ComboBoxItem>, 스타일의 컨트롤 템플릿 내에서.</span><span class="sxs-lookup"><span data-stu-id="709be-1500">This is because that value was reset within the default style of <xref:System.Windows.Controls.ComboBoxItem>, within the style's control template.</span></span>  
  
 <span data-ttu-id="709be-1501"><xref:System.Windows.Controls.Canvas> 사용 하지 않습니다 <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> 때문에 레이아웃을 구성할 때 <xref:System.Windows.Controls.Canvas> 절대 위치 설정을 기반으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1501"><xref:System.Windows.Controls.Canvas> does not use <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> when composing layout, because <xref:System.Windows.Controls.Canvas> is based on absolute positioning.</span></span>  
  
 <span data-ttu-id="709be-1502">상속 되는 경우 <xref:System.Windows.Controls.ComboBoxItem> 파생 클래스 또는 <xref:System.Windows.Controls.ComboBoxItem> 되도록이 속성의 기본값을 재정의 <xref:System.Windows.VerticalAlignment.Center>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1502">When inherited by <xref:System.Windows.Controls.ComboBoxItem> or any derived classes, <xref:System.Windows.Controls.ComboBoxItem> redefines the default value of this property to be <xref:System.Windows.VerticalAlignment.Center>.</span></span>  
  
<a name="dependencyPropertyInfo_VerticalAlignment"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="709be-1503">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="709be-1503">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-1504">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-1504">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.VerticalAlignmentProperty>|  
|<span data-ttu-id="709be-1505">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="709be-1505">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalAlignmentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VerticalAlignmentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VerticalAlignmentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.VerticalAlignmentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VerticalAlignmentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VerticalAlignmentProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable VerticalAlignmentProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.VerticalAlignmentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-1506"><see cref="P:System.Windows.FrameworkElement.VerticalAlignment" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1506">Identifies the <see cref="P:System.Windows.FrameworkElement.VerticalAlignment" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualChildrenCount">
      <MemberSignature Language="C#" Value="protected override int VisualChildrenCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VisualChildrenCount" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.VisualChildrenCount" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property VisualChildrenCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property int VisualChildrenCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.VisualChildrenCount : int" Usage="System.Windows.FrameworkElement.VisualChildrenCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-1507">이 요소 내 시각적 자식 요소의 수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1507">Gets the number of visual child elements within this element.</span></span></summary>
        <value><span data-ttu-id="709be-1508">이 요소에 대한 시각적 자식 요소의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1508">The number of visual child elements for this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1509">합니다 <xref:System.Windows.FrameworkElement> 구현의 <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> 항상 하나 또는 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1509">The <xref:System.Windows.FrameworkElement> implementation of <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> always returns either zero or one.</span></span> <span data-ttu-id="709be-1510">하나를 초과할 수 있는 시각적 자식 컬렉션을 유지 관리 하는 클래스는 모두이 속성을 재정의 해야 하 고 <xref:System.Windows.FrameworkElement.GetVisualChild%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1510">Classes that maintain a visual child collection that might exceed one must override both this property and <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.</span></span>  
  
 <span data-ttu-id="709be-1511">이 속성은 레이아웃 재정의 구현 하는 목적에 대 한 현재 자식 컬렉션의 상한값을 확인 하려면 일반적으로 사용 됩니다 (<xref:System.Windows.FrameworkElement.MeasureOverride%2A>, <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>).</span><span class="sxs-lookup"><span data-stu-id="709be-1511">This property is generally used to determine the upper bounds of the current child collection for purposes of implementing the layout overrides (<xref:System.Windows.FrameworkElement.MeasureOverride%2A>, <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="709be-1512">다음 예제에서는 사용자 지정 표시기에서 선언 된 값을 사용 하는 방법을 보여 줍니다.는 <xref:System.Windows.Media.VisualCollection> 의 재정의 통해 여러 시각적 자식에 대 한 유지 관리 하 고 이러한 보고서에 값 <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> 및 <xref:System.Windows.FrameworkElement.GetVisualChild%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1512">The following example shows how a custom adorner uses the values declared by a <xref:System.Windows.Media.VisualCollection> that it maintains for its multiple visual children and reports these values through overrides of <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> and <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.</span></span>  
  
 [!code-csharp[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverridespre)]
 [!code-vb[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverridespre)]  
[!code-csharp[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverrides)]
[!code-vb[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverrides)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="709be-1513">클래스를 지 원하는 경우 둘 이상의 시각적 자식 자식 요소 컬렉션에서 해당 컬렉션의 요소 수를 반환 하도록이 속성을 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1513">If your class supports more than one visual child in a child element collection, override this property to return the count of elements in that collection.</span></span> <span data-ttu-id="709be-1514">컬렉션 개체 자체를 반환 하는 경우에이 작업을 수행 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1514">You must do this even if the collection object itself returns a count.</span></span> <span data-ttu-id="709be-1515">WPF 프레임 워크 수준의 요소 레이아웃 논리 가정 모든 요소를 통해 올바른 개수가 반환 하도록 해당 <see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1515">Element layout logic at the WPF framework level presumes that all elements will return a valid count through their <see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /> property.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public double Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Width" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Width" />
      <MemberSignature Language="VB.NET" Value="Public Property Width As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Width { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Width : double with get, set" Usage="System.Windows.FrameworkElement.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-1516">요소의 너비를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1516">Gets or sets the width of the element.</span></span></summary>
        <value><span data-ttu-id="709be-1517">요소의 너비([!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)])입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1517">The width of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span></span> <span data-ttu-id="709be-1518">기본값은 <see cref="F:System.Double.NaN" />입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1518">The default value is <see cref="F:System.Double.NaN" />.</span></span> <span data-ttu-id="709be-1519">이 값은 0.0보다 크거나 같아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1519">This value must be equal to or greater than 0.0.</span></span> <span data-ttu-id="709be-1520">상한 정보에 대한 설명을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="709be-1520">See Remarks for upper bound information.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="709be-1521">이 세 가지 속성 중 하나에 <xref:System.Windows.FrameworkElement> 너비 정보를 지정 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1521">This is one of three properties on <xref:System.Windows.FrameworkElement> that specify width information.</span></span>  <span data-ttu-id="709be-1522">다른 두 가지 <xref:System.Windows.FrameworkElement.MinWidth%2A> 고 <xref:System.Windows.FrameworkElement.MaxWidth%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1522">The other two are <xref:System.Windows.FrameworkElement.MinWidth%2A> and <xref:System.Windows.FrameworkElement.MaxWidth%2A>.</span></span>  <span data-ttu-id="709be-1523">이러한 값 간에 충돌이 발생 하는 경우를 실제 너비가 결정에 대 한 애플리케이션의 순서 <xref:System.Windows.FrameworkElement.MinWidth%2A> 다음을 적용할 수 있어야 <xref:System.Windows.FrameworkElement.MaxWidth%2A>, 마지막으로 범위 내에 있는 이러한 각 경우 <xref:System.Windows.FrameworkElement.Width%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1523">If there is a conflict between these values, the order of application for actual width determination is first <xref:System.Windows.FrameworkElement.MinWidth%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxWidth%2A>, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Width%2A>.</span></span>  
  
 <span data-ttu-id="709be-1524">이 속성의 반환 값에 설정 된 값과 항상 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1524">The return value of this property is always the same as any value that was set to it.</span></span> <span data-ttu-id="709be-1525">반대로, 값은 <xref:System.Windows.FrameworkElement.ActualWidth%2A> 다를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1525">In contrast, the value of the <xref:System.Windows.FrameworkElement.ActualWidth%2A> may vary.</span></span> <span data-ttu-id="709be-1526">레이아웃은 어떤 이유로 권장 되는 크기를 거부 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1526">The layout may have rejected the suggested size for some reason.</span></span> <span data-ttu-id="709be-1527">레이아웃 시스템 자체적으로 비동기적으로 작동 하는 속성 시스템 집합을 기준으로 또한 <xref:System.Windows.FrameworkElement.Width%2A> 한 특정 크기 조정 속성 변경 내용을 아직 처리 되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1527">Also, the layout system itself works asynchronously relative to the property system set of <xref:System.Windows.FrameworkElement.Width%2A> and may not have processed that particular sizing property change yet.</span></span>  
  
 <span data-ttu-id="709be-1528">또한 허용 가능한 <xref:System.Double> 값이이 속성 일 수도 있습니다 <xref:System.Double.NaN?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1528">In addition to acceptable <xref:System.Double> values, this property can also be <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span> <span data-ttu-id="709be-1529">자동 크기 조정 동작을 지정 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1529">This is how you specify auto sizing behavior.</span></span> <span data-ttu-id="709be-1530">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 는 값을 설정 하면 문자열 "Auto" (대/소문자 구분) 자동 크기 조정 동작을 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1530">In [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] you set the value to the string "Auto" (case insensitive) to enable the auto sizing behavior.</span></span> <span data-ttu-id="709be-1531">자동 크기 조정 동작 요소를 사용할 수 있는 너비 맞게 채워짐을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1531">Auto sizing behavior implies that the element will fill the width available to it.</span></span> <span data-ttu-id="709be-1532">그러나 특정 컨트롤 자동 크기 조정 동작은 특히 다시 사용 하도록 설정 하지 않은 수 없게 하는 기본 스타일의 기본 값 제공 하는 자주 note 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1532">Note however that specific controls frequently supply default values in their default styles that will disable the auto sizing behavior unless it is specifically re-enabled.</span></span>  
  
 <span data-ttu-id="709be-1533">유효성 검사 외에도 비결 정적 상한 값에 바인딩된 <xref:System.Windows.FrameworkElement.Width%2A> 레이아웃 시스템에 적용 되는 (이 매우 큰 숫자로 보다 큰 <xref:System.Single.MaxValue?displayProperty=nameWithType> 하지만 미만의 <xref:System.Double.MaxValue?displayProperty=nameWithType>).</span><span class="sxs-lookup"><span data-stu-id="709be-1533">In addition to the validation check, there is a nondeterministic upper value bound for <xref:System.Windows.FrameworkElement.Width%2A> that is enforced by the layout system (this is a very large number, larger than <xref:System.Single.MaxValue?displayProperty=nameWithType> but smaller than <xref:System.Double.MaxValue?displayProperty=nameWithType>).</span></span> <span data-ttu-id="709be-1534">이 경계를 초과 하는 경우 요소는 렌더링 되지 않으며, 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1534">If you exceed this bound, the element will not render, and no exception is thrown.</span></span> <span data-ttu-id="709be-1535">설정 하지 않으면 <xref:System.Windows.FrameworkElement.Width%2A> 비결 정적 상한 값이 초과 가능한 시각적 표시, 또는 사용자의 최대 크기 보다 훨씬 큰 값으로.</span><span class="sxs-lookup"><span data-stu-id="709be-1535">Do not set <xref:System.Windows.FrameworkElement.Width%2A> to a value that is significantly larger than the maximum size of any possible visual display, or you may exceed this nondeterministic upper bound.</span></span>  
  
<a name="xamlAttributeUsage_Width"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="709be-1536">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="709be-1536">XAML Attribute Usage</span></span>  
  
```  
<object Width="double"/>  
- or -  
<object Width ="qualifiedDouble"/>  
- or -  
<object Width ="Auto"/>  
```  
  
<a name="xamlValues_Width"></a>   
## <a name="xaml-values"></a><span data-ttu-id="709be-1537">XAML 값</span><span class="sxs-lookup"><span data-stu-id="709be-1537">XAML Values</span></span>  
 <span data-ttu-id="709be-1538">*double*</span><span class="sxs-lookup"><span data-stu-id="709be-1538">*double*</span></span>  
 <xref:System.Double>  
  
 <span data-ttu-id="709be-1539">문자열 표현 된 <xref:System.Double> 0.0 보다 크거나 같은 값입니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1539">String representation of a <xref:System.Double> value equal to or greater than 0.0.</span></span> <span data-ttu-id="709be-1540">상한 정보에 대한 설명을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="709be-1540">See Remarks for upper bound information.</span></span> <span data-ttu-id="709be-1541">이 값으로 해석 되는 [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] 측정 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1541">This value is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] measurement.</span></span> <span data-ttu-id="709be-1542">문자열 소수점이 하를 명시적으로 포함 되지 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1542">Strings need not explicitly include decimal points.</span></span> <span data-ttu-id="709be-1543">예를 들어 값 `1` 허용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1543">For instance a value of `1` is acceptable.</span></span>  
  
 <span data-ttu-id="709be-1544">*qualifiedDouble*</span><span class="sxs-lookup"><span data-stu-id="709be-1544">*qualifiedDouble*</span></span>  
 <span data-ttu-id="709be-1545">A *이중* 단위 선언 문자열 중 하나에서 다음 위에서 설명한 대로 값: `px`, `in`, `cm`, `pt`합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1545">A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.</span></span>  
  
 <span data-ttu-id="709be-1546">`px` (기본값) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span><span class="sxs-lookup"><span data-stu-id="709be-1546">`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span></span>  
  
 <span data-ttu-id="709be-1547">`in` 인치; 1에서 96px = =</span><span class="sxs-lookup"><span data-stu-id="709be-1547">`in` is inches; 1in==96px</span></span>  
  
 <span data-ttu-id="709be-1548">`cm` 센티미터; 1cm==(96/2.54) px</span><span class="sxs-lookup"><span data-stu-id="709be-1548">`cm` is centimeters; 1cm==(96/2.54) px</span></span>  
  
 <span data-ttu-id="709be-1549">`pt` 포인트; 1pt==(96/72) px</span><span class="sxs-lookup"><span data-stu-id="709be-1549">`pt` is points; 1pt==(96/72) px</span></span>  
  
 `Auto`  
 <span data-ttu-id="709be-1550">자동 크기 조정 동작을 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1550">Enables autosizing behavior.</span></span> <span data-ttu-id="709be-1551">설명 부분을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="709be-1551">See Remarks.</span></span>  
  
<a name="dependencyPropertyInfo_Width"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="709be-1552">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="709be-1552">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="709be-1553">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="709be-1553">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.WidthProperty>|  
|<span data-ttu-id="709be-1554">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="709be-1554">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty WidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty WidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.WidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly WidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ WidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable WidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.WidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="709be-1555"><see cref="P:System.Windows.FrameworkElement.Width" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="709be-1555">Identifies the <see cref="P:System.Windows.FrameworkElement.Width" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>