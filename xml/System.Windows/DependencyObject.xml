<Type Name="DependencyObject" FullName="System.Windows.DependencyObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e1c50a8a6bf5de1650ec4db222d0e7fe52ea28ad" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57915453" /></Metadata><TypeSignature Language="C#" Value="public class DependencyObject : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DependencyObject extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyObject" />
  <TypeSignature Language="VB.NET" Value="Public Class DependencyObject&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyObject : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type DependencyObject = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeDescriptionProvider(typeof(MS.Internal.ComponentModel.DependencyObjectProvider))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Markup.NameScopeProperty("NameScope", typeof(System.Windows.NameScope))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="a8a83-101">종속성 속성 시스템에 참가하는 개체를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-101">Represents an object that participates in the dependency property system.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8a83-102">합니다 <xref:System.Windows.DependencyObject> 수 있도록 클래스 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 많은 파생된 클래스에서 속성 시스템 서비스입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-102">The <xref:System.Windows.DependencyObject> class enables [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] property system services on its many derived classes.</span></span>  
  
 <span data-ttu-id="a8a83-103">속성 시스템의 기본 기능은 속성의 값을 계산 하 고 변경 된 값에 대 한 시스템 알림을 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-103">The property system's primary function is to compute the values of properties, and to provide system notification about values that have changed.</span></span> <span data-ttu-id="a8a83-104">속성 시스템에 참여 하는 다른 핵심 클래스는 <xref:System.Windows.DependencyProperty>합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-104">Another key class that participates in the property system is <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="a8a83-105"><xref:System.Windows.DependencyProperty> 속성 시스템에 종속성 속성의 등록을 사용 하도록 설정 하 고 반면 식별 및 각 종속성 속성에 대 한 정보를 제공 <xref:System.Windows.DependencyObject> 기본 클래스 종속성 속성을 사용 하는 개체 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-105"><xref:System.Windows.DependencyProperty> enables the registration of dependency properties into the property system, and provides identification and information about each dependency property, whereas <xref:System.Windows.DependencyObject> as a base class enables objects to use the dependency properties.</span></span>  
  
 <span data-ttu-id="a8a83-106"><xref:System.Windows.DependencyObject> 서비스 및 특성에는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-106"><xref:System.Windows.DependencyObject> services and characteristics include the following:</span></span>  
  
-   <span data-ttu-id="a8a83-107">종속성 속성은 호스팅 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-107">Dependency property hosting support.</span></span> <span data-ttu-id="a8a83-108">호출 하 여 종속성 속성 등록은 <xref:System.Windows.DependencyProperty.Register%2A> 메서드 및 클래스의 공용 정적 필드로 메서드의 반환 값을 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-108">You register a dependency property by calling the <xref:System.Windows.DependencyProperty.Register%2A> method, and storing the method's return value as a public static field in your class.</span></span>  
  
-   <span data-ttu-id="a8a83-109">호스팅 지원 연결 된 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-109">Attached property hosting support.</span></span> <span data-ttu-id="a8a83-110">호출 하 여 연결된 된 속성을 등록 합니다 <xref:System.Windows.DependencyProperty.RegisterAttached%2A> 메서드 및 공용 정적 필드로 읽기 전용 클래스에서 메서드의 반환 값을 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-110">You register an attached property by calling the <xref:System.Windows.DependencyProperty.RegisterAttached%2A> method, and storing the method's return value as a public static read-only field in your class.</span></span> <span data-ttu-id="a8a83-111">(추가 멤버 요구 사항도 있습니다;이 한 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 연결 된 속성에 대 한 특정 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-111">(There are also additional member requirements; note that this represents a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] specific implementation for attached properties.</span></span> <span data-ttu-id="a8a83-112">자세한 내용은 참조 하세요 [연결 된 속성 개요](~/docs/framework/wpf/advanced/attached-properties-overview.md).) 연결 된 속성에서 파생 되는 임의의 클래스에 설정할 수 있습니다 <xref:System.Windows.DependencyObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-112">For details, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).) Your attached property can then be set on any class that derives from <xref:System.Windows.DependencyObject>.</span></span>  
  
-   <span data-ttu-id="a8a83-113">Get, set 및에 존재 하는 종속성 속성의 값에 대 한 유틸리티 메서드를 선택 취소 된 <xref:System.Windows.DependencyObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-113">Get, set, and clear utility methods for values of any dependency properties that exist on the <xref:System.Windows.DependencyObject>.</span></span>  
  
-   <span data-ttu-id="a8a83-114">메타 데이터 값 지원, 속성 변경 알림 및 종속성 속성에 대 한 재정의 콜백을 강제 변환 또는 연결 된 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-114">Metadata, coerce value support, property changed notification, and override callbacks for  dependency properties or attached properties.</span></span> <span data-ttu-id="a8a83-115">또한는 <xref:System.Windows.DependencyObject> 클래스는 종속성 속성에 대 한 소유자 당 속성 메타 데이터를 용이 하 게 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-115">Also, the <xref:System.Windows.DependencyObject> class facilitates the per-owner property metadata for a dependency property.</span></span>  
  
-   <span data-ttu-id="a8a83-116">파생 된 클래스에 대 한 공통 기본 클래스 <xref:System.Windows.ContentElement>, <xref:System.Windows.Freezable>, 또는 <xref:System.Windows.Media.Visual>합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-116">A common base class for classes derived from <xref:System.Windows.ContentElement>, <xref:System.Windows.Freezable>, or <xref:System.Windows.Media.Visual>.</span></span> <span data-ttu-id="a8a83-117">(<xref:System.Windows.UIElement>, 다른 기본 요소 클래스를 포함 하는 클래스 계층 구조가 <xref:System.Windows.Media.Visual>.)</span><span class="sxs-lookup"><span data-stu-id="a8a83-117">(<xref:System.Windows.UIElement>, another base element class, has a class hierarchy that includes <xref:System.Windows.Media.Visual>.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a8a83-118">파생 되는 다음 예제에서는 <xref:System.Windows.DependencyObject> 새 추상 클래스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-118">The following example derives from <xref:System.Windows.DependencyObject> to create a new abstract class.</span></span> <span data-ttu-id="a8a83-119">다음 클래스는 연결된 된 속성을 등록 하 고 해당 연결 된 속성에 대 한 지원 멤버를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-119">The class then registers an attached property and includes support members for that attached property.</span></span>  
  
 [!code-csharp[WPFAquariumSln#DOMain](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#domain)]
 [!code-vb[WPFAquariumSln#DOMain](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#domain)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DependencyObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DependencyObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a8a83-120"><see cref="T:System.Windows.DependencyObject" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-120">Initializes a new instance of the <see cref="T:System.Windows.DependencyObject" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ClearValue">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a8a83-121">속성의 로컬 값을 지웁니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-121">Clears the local value of a property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ClearValue">
      <MemberSignature Language="C#" Value="public void ClearValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearValue (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.ClearValue : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.ClearValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="a8a83-122"><see cref="T:System.Windows.DependencyProperty" /> 개체 참조로 식별되는 지울 종속성 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-122">The dependency property to be cleared, identified by a <see cref="T:System.Windows.DependencyProperty" /> object reference.</span></span></param>
        <summary><span data-ttu-id="a8a83-123">속성의 로컬 값을 지웁니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-123">Clears the local value of a property.</span></span> <span data-ttu-id="a8a83-124">지울 속성이 <see cref="T:System.Windows.DependencyProperty" /> 식별자에서 지정됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-124">The property to be cleared is specified by a <see cref="T:System.Windows.DependencyProperty" /> identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8a83-125">호출 하 여 속성 값을 지우면 <xref:System.Windows.DependencyObject.ClearValue%2A> 반드시 종속성 속성을 종속성 속성 메타 데이터에 지정 된 기본값을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-125">Clearing the property value by calling <xref:System.Windows.DependencyObject.ClearValue%2A> does not necessarily give a dependency property the default value that is specified in the dependency property metadata.</span></span> <span data-ttu-id="a8a83-126">만 속성을 지우면 적용 된 모든 로컬 값을 지웁니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-126">Clearing the property only specifically clears whatever local value may have been applied.</span></span> <span data-ttu-id="a8a83-127">자세한 내용은 [종속성 속성 값 우선 순위](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="a8a83-127">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a8a83-128">다음 예제에서는 개체에 설정 된 로컬 값을 갖는 모든 속성 반복 호출 <xref:System.Windows.DependencyObject.ClearValue%2A> 이러한 각 속성의 값을 선택 취소 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-128">The following example iterates all properties that have local values set on an object, then calls <xref:System.Windows.DependencyObject.ClearValue%2A> to clear the values of each such property.</span></span>  
  
 [!code-csharp[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/csharp/VS_Snippets_Wpf/DPClearValue/CSharp/default.xaml.cs#iteratelocalvaluesandclear)]
 [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPClearValue/VisualBasic/default.xaml.vb#iteratelocalvaluesandclear)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a8a83-129">봉인된 <see cref="T:System.Windows.DependencyObject" />에서 <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />를 호출하려고 시도했습니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-129">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> on a sealed <see cref="T:System.Windows.DependencyObject" />.</span></span></exception>
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
        <altmember cref="P:System.Windows.DependencyObject.IsSealed" />
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="ClearValue">
      <MemberSignature Language="C#" Value="public void ClearValue (System.Windows.DependencyPropertyKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearValue(class System.Windows.DependencyPropertyKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearValue (key As DependencyPropertyKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearValue(System::Windows::DependencyPropertyKey ^ key);" />
      <MemberSignature Language="F#" Value="member this.ClearValue : System.Windows.DependencyPropertyKey -&gt; unit" Usage="dependencyObject.ClearValue key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="a8a83-130">지울 종속성 속성의 키입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-130">The key for the dependency property to be cleared.</span></span></param>
        <summary><span data-ttu-id="a8a83-131">읽기 전용 속성의 로컬 값을 지웁니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-131">Clears the local value of a read-only property.</span></span> <span data-ttu-id="a8a83-132">선언할 속성이 <see cref="T:System.Windows.DependencyPropertyKey" />에서 지정됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-132">The property to be cleared is specified by a <see cref="T:System.Windows.DependencyPropertyKey" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8a83-133"><xref:System.Windows.DependencyPropertyKey> 속성 시스템 작업에 대 한 읽기 전용 종속성 속성을 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-133">A <xref:System.Windows.DependencyPropertyKey> identifies a read-only dependency property for property system operations.</span></span> <span data-ttu-id="a8a83-134">읽기 전용 종속성 속성을 정의 하는 클래스는 공용 액세스를 사용 하 여이 키를 노출 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-134">Classes that define read-only dependency properties should not expose this key with public access.</span></span> <span data-ttu-id="a8a83-135">공개적으로 노출 된 키 속성의 읽기 전용 문자를 부정 하는 공용 코드 경로 경우 제공와 같은 메서드와 <xref:System.Windows.DependencyObject.ClearValue%2A> 또는 <xref:System.Windows.DependencyObject.SetValue%2A> 클래스 또는 키를 참조 하는 어셈블리 외부에서 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-135">A publicly exposed key would provide a public code pathway that negated the read-only character of the property, if methods such as <xref:System.Windows.DependencyObject.ClearValue%2A> or <xref:System.Windows.DependencyObject.SetValue%2A> could be called outside the class or assembly, referencing the key.</span></span>  
  
 <span data-ttu-id="a8a83-136">호출 하 여 속성 값을 지우면 <xref:System.Windows.DependencyObject.ClearValue%2A> 반드시 종속성 속성을 종속성 속성 메타 데이터에 지정 된 기본값을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-136">Clearing the property value by calling <xref:System.Windows.DependencyObject.ClearValue%2A> does not necessarily give a dependency property the default value that is specified in the dependency property metadata.</span></span> <span data-ttu-id="a8a83-137">만 값을 지우면 적용 된 모든 로컬 값을 지웁니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-137">Clearing the value only specifically clears whatever local value may have been applied.</span></span> <span data-ttu-id="a8a83-138">자세한 내용은 [종속성 속성 값 우선 순위](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="a8a83-138">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a8a83-139">봉인된 <see cref="T:System.Windows.DependencyObject" />에서 <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />를 호출하려고 시도했습니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-139">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> on a sealed <see cref="T:System.Windows.DependencyObject" />.</span></span></exception>
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
        <altmember cref="T:System.Windows.DependencyPropertyKey" />
      </Docs>
    </Member>
    <Member MemberName="CoerceValue">
      <MemberSignature Language="C#" Value="public void CoerceValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CoerceValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CoerceValue (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CoerceValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.CoerceValue : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.CoerceValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="a8a83-140">강제 변환할 종속성 속성의 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-140">The identifier for the dependency property to coerce.</span></span></param>
        <summary><span data-ttu-id="a8a83-141">지정된 종속성 속성의 값을 강제 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-141">Coerces the value of the specified dependency property.</span></span> <span data-ttu-id="a8a83-142">호출하는 <see cref="T:System.Windows.DependencyObject" />에 있으므로 이 작업은 종속성 속성의 속성 메타데이터에 지정된 <see cref="T:System.Windows.CoerceValueCallback" /> 함수를 호출하여 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-142">This is accomplished by invoking any <see cref="T:System.Windows.CoerceValueCallback" /> function specified in property metadata for the dependency property as it exists on the calling <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8a83-143">호출을 통해 명시적으로 호출 되는 것 외에도 <xref:System.Windows.DependencyObject.CoerceValue%2A>서 <xref:System.Windows.CoerceValueCallback> 종속성에 대 한 속성 또한 내부적으로 될 때마다 호출 되는 종속성 속성 값 다시 평가 하는 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 속성 시스템입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-143">In addition to being explicitly invoked through calling <xref:System.Windows.DependencyObject.CoerceValue%2A>, the <xref:System.Windows.CoerceValueCallback> for a dependency property is also invoked internally whenever the dependency property value is being re-evaluated by the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</span></span>  
  
 <span data-ttu-id="a8a83-144">호출 하는 경우는 <xref:System.Windows.DependencyObject.CoerceValue%2A> 메서드를 호출 하는 궁극적으로 지정 하는 속성에 대 한 강제 값 콜백 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-144">When you invoke the <xref:System.Windows.DependencyObject.CoerceValue%2A> method, you are ultimately invoking the coerce value callback for the property that you specify.</span></span> <span data-ttu-id="a8a83-145">일반적으로 호출 됩니다 <xref:System.Windows.DependencyObject.CoerceValue%2A> 강제 값 콜백이 있는지 알고 있는 경우 및 강제 변환에 대 한 조건을 알고 있는 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-145">Typically you will invoke <xref:System.Windows.DependencyObject.CoerceValue%2A> only if you know that a coerce value callback exists, and if you know the callback's criteria for coercion.</span></span>  
  
 <span data-ttu-id="a8a83-146">호출에 대 한 가장 일반적인 시나리오 <xref:System.Windows.DependencyObject.CoerceValue%2A> 서로의 값 종속 방식에서에 영향을 주는 관련된 속성의 클래스 처리 하거나 속성 변경 콜백을 내입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-146">The most common scenario for calling <xref:System.Windows.DependencyObject.CoerceValue%2A> is within class handling or property change callbacks of related properties that influence each other's values in a dependent way.</span></span> <span data-ttu-id="a8a83-147">자세한 내용은 [종속성 속성 콜백 및 유효성 검사](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="a8a83-147">For more information, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a8a83-148">다음 예제에서는 <xref:System.Windows.DependencyObject.CoerceValue%2A> 내에서 한 <xref:System.Windows.PropertyChangedCallback> 구현으로 사용 되는 <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> 같은 클래스에는 서로 다른 종속성 속성에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-148">The following example calls <xref:System.Windows.DependencyObject.CoerceValue%2A> within a <xref:System.Windows.PropertyChangedCallback> implementation that is used as the <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> for a different dependency properties on the same class.</span></span> <span data-ttu-id="a8a83-149">종속성 속성 간에 종속성 true 값을 소개 하는 것에 대 한 일반적인 패턴입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-149">This is a common pattern for introducing true value dependencies between dependency properties.</span></span>  
  
 [!code-csharp[DPCallbackOverride#OnPCCurrent](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCallbackOverride/CSharp/SDKSampleLibrary/class1.cs#onpccurrent)]
 [!code-vb[DPCallbackOverride#OnPCCurrent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCallbackOverride/visualbasic/sdksamplelibrary/class1.vb#onpccurrent)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a8a83-150">지정된 <paramref name="dp" /> 또는 해당 값이 잘못되었거나 존재하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-150">The specified <paramref name="dp" /> or its value were invalid or do not exist.</span></span></exception>
        <altmember cref="T:System.Windows.CoerceValueCallback" />
        <altmember cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DependencyObjectType">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObjectType DependencyObjectType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObjectType DependencyObjectType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyObject.DependencyObjectType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyObjectType As DependencyObjectType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObjectType ^ DependencyObjectType { System::Windows::DependencyObjectType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyObjectType : System.Windows.DependencyObjectType" Usage="System.Windows.DependencyObject.DependencyObjectType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObjectType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a8a83-151">이 인스턴스의 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 형식을 래핑하는 <see cref="T:System.Windows.DependencyObjectType" />을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-151">Gets the <see cref="T:System.Windows.DependencyObjectType" /> that wraps the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type of this instance.</span></span></summary>
        <value><span data-ttu-id="a8a83-152">이 인스턴스의 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 형식을 래핑하는 <see cref="T:System.Windows.DependencyObjectType" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-152">A <see cref="T:System.Windows.DependencyObjectType" /> that wraps the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type of this instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8a83-153">메서드에서 반환 되는 개체의 반환 값 형식이 있으면이 속성이 유용 <xref:System.Windows.DependencyObject> 속성 시스템 관련 작업에서 해당 유형에 따라 수행 하려는 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-153">This property is useful if an object that is returned from a method has a return value type of <xref:System.Windows.DependencyObject> and you want to perform property system specific operations on it depending on its type.</span></span> <span data-ttu-id="a8a83-154">예를 들어 것이 효율적으로 호출할 <xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29> 를 사용 하 여는 <xref:System.Windows.DependencyObjectType> 대신 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-154">For example it is more efficient to call <xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29> using the <xref:System.Windows.DependencyObjectType> rather than the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type.</span></span> <span data-ttu-id="a8a83-155"><xref:System.Windows.DependencyObjectType> 빠른 조회를 지원합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-155"><xref:System.Windows.DependencyObjectType> facilitates faster lookup.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a8a83-156">다음 의사 코드 예제에서 `MySubClass` 추가 파생된 클래스의 기본 값을 변경 될 수는 예상 된 `MyCustom` 종속성 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-156">In the following pseudocode example, `MySubClass` anticipates that additional derived classes might change the default value of the `MyCustom` dependency property.</span></span> <span data-ttu-id="a8a83-157">클래스의 다형성을 활용 하 여 실제 파생된 클래스를 결정할 수 있는 기본 생성자를 구현 하는 <xref:System.Windows.DependencyObjectType> 생성자는 파생된 클래스 인스턴스도 사용 될 때마다 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-157">The class implements a default constructor that can determine the actual derived class by taking advantage of polymorphism on the <xref:System.Windows.DependencyObjectType> value whenever that constructor is used as a derived class instantiator.</span></span>  
  
 `public DOClass() : base()`  
  
 `{`  
  
 `__customPropertyCache = (CustomDP)`  
  
 `CustomDPProperty.GetMetadata(DependencyObjectType).DefaultValue;`  
  
 `}`  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" />
        <altmember cref="T:System.Windows.DependencyObjectType" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override sealed bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dependencyObject.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="a8a83-158">현재 인스턴스와 비교할 <see cref="T:System.Windows.DependencyObject" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-158">The <see cref="T:System.Windows.DependencyObject" /> to compare to the current instance.</span></span></param>
        <summary><span data-ttu-id="a8a83-159">제공된 <see cref="T:System.Windows.DependencyObject" />가 현재 <see cref="T:System.Windows.DependencyObject" />에 해당하는지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-159">Determines whether a provided <see cref="T:System.Windows.DependencyObject" /> is equivalent to the current <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <returns><span data-ttu-id="a8a83-160">두 인스턴스가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-160"><see langword="true" /> if the two instances are the same; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8a83-161">이 구현만 참조 같음 인 및 포함된 된 속성의 값이 같은지를 평가 하려고 시도 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-161">This implementation is reference equality only, and does not attempt to evaluate value equality of the contained properties.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a8a83-162">
            <see cref="T:System.Windows.DependencyObject" /> 재정의 한 다음 두 개의 기본 봉인 <see cref="T:System.Object" /> 메서드: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> 고 <see cref="M:System.Windows.DependencyObject.GetHashCode" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-162">
            <see cref="T:System.Windows.DependencyObject" /> overrides and then seals two basic <see cref="T:System.Object" /> methods: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> and <see cref="M:System.Windows.DependencyObject.GetHashCode" />.</span></span> <span data-ttu-id="a8a83-163">재정의 호출 합니다 <see cref="T:System.Object" /> 개체 같음 동작을 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-163">The overrides call the <see cref="T:System.Object" /> implementations, resulting in an object equality behavior.</span></span> <span data-ttu-id="a8a83-164">파생된 클래스에 대 한 값이 같음을 정의 하려고 하지 못하도록 의도적으로 이러한 재정의의 목적은 <see cref="T:System.Windows.DependencyObject" />합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-164">The purpose of these deliberate overrides is to prevent derived classes from trying to define a value equality for a <see cref="T:System.Windows.DependencyObject" />.</span></span> <span data-ttu-id="a8a83-165">값이 같은지 여부 <see cref="T:System.Windows.DependencyObject" /> 타고 속성 값 변경 기능으로 인해 정확한 안 됩니다는 <see cref="T:System.Windows.DependencyObject" /> 및 해당 종속성 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-165">Value equalities for <see cref="T:System.Windows.DependencyObject" /> will never be accurate because of the innate property value-changing capabilities of a <see cref="T:System.Windows.DependencyObject" /> and its dependency properties.</span></span> <span data-ttu-id="a8a83-166">여기에 기본적인 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 데이터 바인딩과 같은 기능 및 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 속성 시스템입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-166">This includes fundamental [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features such as data binding and the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override sealed int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dependencyObject.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a8a83-167">이 <see cref="T:System.Windows.DependencyObject" />의 해시 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-167">Gets a hash code for this <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <returns><span data-ttu-id="a8a83-168">부호 있는 32비트 정수 해시 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-168">A signed 32-bit integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a8a83-169">
            <see cref="T:System.Windows.DependencyObject" /> 재정의 한 다음 두 봉인 <see cref="T:System.Object" /> 메서드: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> 고 <see cref="M:System.Windows.DependencyObject.GetHashCode" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-169">
            <see cref="T:System.Windows.DependencyObject" /> overrides and then seals two <see cref="T:System.Object" /> methods: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> and <see cref="M:System.Windows.DependencyObject.GetHashCode" />.</span></span> <span data-ttu-id="a8a83-170">재정의 호출 합니다 <see cref="T:System.Object" /> 개체 같음 동작을 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-170">The overrides call the <see cref="T:System.Object" /> implementations, resulting in an object equality behavior.</span></span> <span data-ttu-id="a8a83-171">파생된 클래스에 대 한 값이 같음을 정의 하려고 하지 못하도록 의도적으로 이러한 재정의의 목적은 <see cref="T:System.Windows.DependencyObject" />합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-171">The purpose of these deliberate overrides is to prevent derived classes from trying to define a value equality for a <see cref="T:System.Windows.DependencyObject" />.</span></span> <span data-ttu-id="a8a83-172">값이 같은지 여부 <see cref="T:System.Windows.DependencyObject" /> 타고 속성 값 변경 기능으로 인해 정확한 안 됩니다는 <see cref="T:System.Windows.DependencyObject" /> 및 해당 종속성 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-172">Value equalities for <see cref="T:System.Windows.DependencyObject" /> will never be accurate because of the innate property value-changing capabilities of a <see cref="T:System.Windows.DependencyObject" /> and its dependency properties.</span></span> <span data-ttu-id="a8a83-173">여기에 기본적인 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 데이터 바인딩과 같은 기능 및 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 속성 시스템입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-173">This includes fundamental [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features such as data binding and the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetLocalValueEnumerator">
      <MemberSignature Language="C#" Value="public System.Windows.LocalValueEnumerator GetLocalValueEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.LocalValueEnumerator GetLocalValueEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetLocalValueEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLocalValueEnumerator () As LocalValueEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::LocalValueEnumerator GetLocalValueEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetLocalValueEnumerator : unit -&gt; System.Windows.LocalValueEnumerator" Usage="dependencyObject.GetLocalValueEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.LocalValueEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a8a83-174">이 <see cref="T:System.Windows.DependencyObject" />에 대해 로컬로 값을 설정한 종속성 속성을 확인하기 위한 특수 열거자를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-174">Creates a specialized enumerator for determining which dependency properties have locally set values on this <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <returns><span data-ttu-id="a8a83-175">특수 로컬 값 열거자입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-175">A specialized local value enumerator.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8a83-176">A *로컬 값* 의해 설정 된 종속성 속성 값이 <xref:System.Windows.DependencyObject.SetValue%2A>속성 시스템의 다른 측면을 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-176">A *local value* is any dependency property value that was set by <xref:System.Windows.DependencyObject.SetValue%2A>, as opposed to other aspects of the property system.</span></span>  
  
 <span data-ttu-id="a8a83-177"><xref:System.Windows.LocalValueEnumerator> 를 호출 하 여 얻은 <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> 로컬로 설정 된 속성을 열거할 수 값을 <xref:System.Windows.DependencyObject> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="a8a83-177">The <xref:System.Windows.LocalValueEnumerator> obtained by calling <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> can be used to enumerate properties that have a locally set value on a <xref:System.Windows.DependencyObject> instance.</span></span> <span data-ttu-id="a8a83-178">이러한 각 속성에서 열거자에 표시 됩니다는 <xref:System.Windows.LocalValueEntry> 특정 참조 하는 속성이 있는 개체 <xref:System.Windows.DependencyProperty> 및 해당 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-178">Each such property is represented in the enumerator by a <xref:System.Windows.LocalValueEntry> object, which has properties that reference the specific <xref:System.Windows.DependencyProperty> and its values.</span></span> <span data-ttu-id="a8a83-179">이 기술은 로컬에서 설정한 열거의 값 수 또는 다른 로컬 값을 처리 최적화에 대 한 같은 속성 값을 확인 한 <xref:System.Windows.DependencyObject> 된 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-179">This technique of enumerating over the locally set values can be used for optimization or for other handling of local values, such as to determine which property values of a <xref:System.Windows.DependencyObject> would change if they were cleared.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a8a83-180">반환 된 <xref:System.Windows.LocalValueEnumerator> 있을 <xref:System.Windows.LocalValueEntry> 은 읽기 전용 종속성 속성 또는 값이 계산 되는 속성 시스템에서 종속성 속성에 대 한 레코드입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-180">The returned <xref:System.Windows.LocalValueEnumerator> might contain <xref:System.Windows.LocalValueEntry> records for dependency properties that are read-only, or dependency properties where values are calculated by the property system.</span></span> <span data-ttu-id="a8a83-181">레이아웃을 통해 설정 된 너비가 visual 프레임 워크 요소는 로컬 값을 보고 하는 예를 들어 <xref:System.Windows.FrameworkElement.ActualWidth%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-181">For example, a visual framework element that has an established width through layout will report a local value for <xref:System.Windows.FrameworkElement.ActualWidth%2A>.</span></span> <span data-ttu-id="a8a83-182">다시 설정 하기 위해 로컬 값을 얻는 경우를 확인 합니다 <xref:System.Windows.DependencyProperty.ReadOnly%2A> 의 각 속성 식별자의 값 <xref:System.Windows.LocalValueEntry> 되었는지 확인 하는 <xref:System.Windows.DependencyProperty> 문제의 읽기 전용이 아닌지.</span><span class="sxs-lookup"><span data-stu-id="a8a83-182">If you are getting local values in order to reset them, check the <xref:System.Windows.DependencyProperty.ReadOnly%2A> value on the property identifier of each <xref:System.Windows.LocalValueEntry> to verify that the <xref:System.Windows.DependencyProperty> in question is not read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a8a83-183">다음 예제에서는 개체에 설정 된 로컬 값을 갖는 모든 속성 반복 호출 <xref:System.Windows.DependencyObject.ClearValue%2A> 이러한 각 속성의 값을 선택 취소 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-183">The following example iterates all properties that have local values set on an object, then calls <xref:System.Windows.DependencyObject.ClearValue%2A> to clear the values of each such property.</span></span>  
  
 [!code-csharp[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/csharp/VS_Snippets_Wpf/DPClearValue/CSharp/default.xaml.cs#iteratelocalvaluesandclear)]
 [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPClearValue/VisualBasic/default.xaml.vb#iteratelocalvaluesandclear)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.LocalValueEntry" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.GetValue : System.Windows.DependencyProperty -&gt; obj" Usage="dependencyObject.GetValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="a8a83-184">값을 검색할 속성의 <see cref="T:System.Windows.DependencyProperty" /> 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-184">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</span></span></param>
        <summary><span data-ttu-id="a8a83-185">이 <see cref="T:System.Windows.DependencyObject" />의 인스턴스에서 종속성 속성의 현재 유효 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-185">Returns the current effective value of a dependency property on this instance of a <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <returns><span data-ttu-id="a8a83-186">현재 유효 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-186">Returns the current effective value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8a83-187">합니다 *유효 값* 속성 시스템에서 값을 요청 하는 모든 호출자에 게 반환 되는 속성의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-187">The *effective value* is the value of the property that is returned by the property system to any caller that is requesting the value.</span></span> <span data-ttu-id="a8a83-188">유효한 값은 속성 시스템 값 우선 순위에 참여 하는 가능한 모든 입력을 계산 하는 속성 시스템의 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-188">The effective value is the result of the property system having evaluated all the possible inputs that participate in the property system value precedence.</span></span> <span data-ttu-id="a8a83-189">강제 변환 및 애니메이션 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-189">This includes coercion and animation.</span></span> <span data-ttu-id="a8a83-190">자세한 내용은 [종속성 속성 값 우선 순위](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="a8a83-190">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="a8a83-191">이 메서드는 반환 되지 <xref:System.Windows.DependencyProperty.UnsetValue>합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-191">This method will never return <xref:System.Windows.DependencyProperty.UnsetValue>.</span></span> <span data-ttu-id="a8a83-192"><xref:System.Windows.DependencyProperty.UnsetValue> sentinel 값 강제 변환 콜백을 통해 내부적으로, 그리고 간혹도 노출 하는 다양 한 기능에 사용 되는 속성 시스템입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-192">The <xref:System.Windows.DependencyProperty.UnsetValue> is a sentinel value for the property system that is used in various capacities internally and occasionally also exposed through coercion callbacks.</span></span>  
  
 <span data-ttu-id="a8a83-193">속성의 형식이 확실 하지 않은 경우 보다 구체적인 되는지 확인 하려면 요청 된 종속성 속성의 식별자를 쿼리할 수 있습니다 <xref:System.Windows.DependencyProperty.PropertyType%2A> 반환 값을 변환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-193">If you are not sure what the property's type should be, you can query the identifier of the requested dependency property to determine whether there is a more specific <xref:System.Windows.DependencyProperty.PropertyType%2A> that the return value can be converted to.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a8a83-194">지정된 <paramref name="dp" /> 또는 해당 값이 잘못되었거나 지정된 <paramref name="dp" />가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="a8a83-194">The specified <paramref name="dp" /> or its value was invalid, or the specified <paramref name="dp" /> does not exist.</span></span></exception>
        <altmember cref="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateProperty">
      <MemberSignature Language="C#" Value="public void InvalidateProperty (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateProperty(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateProperty (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateProperty(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.InvalidateProperty : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.InvalidateProperty dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="a8a83-195">무효화할 속성의 <see cref="T:System.Windows.DependencyProperty" /> 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-195">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to invalidate.</span></span></param>
        <summary><span data-ttu-id="a8a83-196">지정된 종속성 속성의 유효 값을 다시 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-196">Re-evaluates the effective value for the specified dependency property</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8a83-197">호출 하는 경우 <xref:System.Windows.DependencyObject.InvalidateProperty%2A>, 모든 연결 및 해당 <xref:System.Windows.CoerceValueCallback> 또는 <xref:System.Windows.PropertyChangedCallback> 등록 된 함수에는 종속성 속성을 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-197">When you call <xref:System.Windows.DependencyObject.InvalidateProperty%2A>, any associated and applicable <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions registered for that dependency property might be invoked.</span></span>  
  
 <span data-ttu-id="a8a83-198">호출 <xref:System.Windows.DependencyObject.InvalidateProperty%2A> 로컬 값이 설정 되어 있는 속성에는 되므로 효과가 없습니다, 로컬 값을 속성 시스템의 입력에 다른 애니메이션 제외 보다 우선 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-198">Calling <xref:System.Windows.DependencyObject.InvalidateProperty%2A> on a property that has its local value set will have no effect, because the local value takes precedence over other property system inputs, except for animations.</span></span> <span data-ttu-id="a8a83-199">호출할 수 있습니다 <xref:System.Windows.DependencyObject.ClearValue%2A>, 다음 호출 <xref:System.Windows.DependencyObject.InvalidateProperty%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-199">However, you could call <xref:System.Windows.DependencyObject.ClearValue%2A>, then call <xref:System.Windows.DependencyObject.InvalidateProperty%2A>.</span></span> <span data-ttu-id="a8a83-200">자세한 내용은 [종속성 속성 값 우선 순위](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="a8a83-200">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="a8a83-201">호출 <xref:System.Windows.DependencyObject.InvalidateProperty%2A> 대부분 종속성 속성 시나리오에 반드시 적용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-201">Calling <xref:System.Windows.DependencyObject.InvalidateProperty%2A> is not necessarily applicable for many dependency property scenarios.</span></span> <span data-ttu-id="a8a83-202">종속성 속성에 다른 구성 요소의 값이 변경으로 인해 무효화 되 면 속성 시스템 무효화 하 고 자동으로 종속성 속성을 다시 평가 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-202">If a dependency property becomes invalidated because of value changes in any of the constituents, the property system invalidates and re-evaluates the dependency property automatically.</span></span> <span data-ttu-id="a8a83-203">그러나 여전히 몇 가지 적절 한 시나리오가 있는 <xref:System.Windows.DependencyObject.InvalidateProperty%2A> 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-203">However, there are still some appropriate scenarios where <xref:System.Windows.DependencyObject.InvalidateProperty%2A> is useful.</span></span> <span data-ttu-id="a8a83-204">사용할 수는 특히 <xref:System.Windows.DependencyObject.InvalidateProperty%2A> 강제 값 또는 속성 내에서 다른 종속성 속성에 대 한 콜백을 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-204">In particular, you can use <xref:System.Windows.DependencyObject.InvalidateProperty%2A> inside the coerce value or property changed callback for a different dependency property.</span></span> <span data-ttu-id="a8a83-205">사용할 수도 있습니다 <xref:System.Windows.DependencyObject.InvalidateProperty%2A> 재평가 권장 구현할 수 없는 데이터 원본에 대해 바인딩을 적용할 <xref:System.ComponentModel.INotifyPropertyChanged> 알림 메커니즘 (아마도 데이터 클래스에서 파생 될 수 없습니다 또는 정적 데이터를 사용 하는 경우 멤버)입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-205">You can also use <xref:System.Windows.DependencyObject.InvalidateProperty%2A> to force re-evaluation of a binding against a data source that is not able to implement the recommended <xref:System.ComponentModel.INotifyPropertyChanged> notification mechanism (perhaps if consuming data classes that cannot be derived from, or where the data is a static member).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a8a83-206">다음 예제에서는 <xref:System.Windows.DependencyObject.InvalidateProperty%2A> 무효화 된 속성의 계산에 포함 되는 속성이 변경 될 때마다 사용자 지정 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-206">The following example calls <xref:System.Windows.DependencyObject.InvalidateProperty%2A> on a custom property, whenever properties that are involved in the invalidated property's calculations change.</span></span> <span data-ttu-id="a8a83-207">이 호출 하는 대체 기술을 합니다 <xref:System.Windows.DependencyObject.CoerceValue%2A> 메서드, 속성 무효화는 또한를 호출 하므로 모든 등록 <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-207">This is an alternative technique to calling the <xref:System.Windows.DependencyObject.CoerceValue%2A> method, because invalidating the property will also call any registered <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#InvalidateProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/SDKSampleLibrary/class1.cs#invalidateproperty)]
 [!code-vb[PropertySystemEsoterics#InvalidateProperty](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/sdksamplelibrary/class1.vb#invalidateproperty)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Windows.DependencyProperty.UnsetValue" />
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyObject.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Windows.DependencyObject.IsSealed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a8a83-208">이 인스턴스가 현재 봉인되어 있는지(읽기 전용인지) 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-208">Gets a value that indicates whether this instance is currently sealed (read-only).</span></span></summary>
        <value><span data-ttu-id="a8a83-209">이 인스턴스가 봉인되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-209"><see langword="true" /> if this instance is sealed; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8a83-210">이 값은 내부적으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-210">This value is set internally.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.FrameworkElementFactory" />
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="dependencyObject.OnPropertyChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a8a83-211">해당하는 종속성 속성 식별자, 해당 형식의 속성 메타데이터 및 이전 값과 새 값이 포함될 이벤트 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-211">Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.</span></span></param>
        <summary><span data-ttu-id="a8a83-212">이 <see cref="T:System.Windows.DependencyObject" />에서 종속성 속성의 유효 값이 업데이트될 때마다 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-212">Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.DependencyObject" /> has been updated.</span></span> <span data-ttu-id="a8a83-213">변경된 특정 종속성 속성은 이벤트 데이터에서 보고됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-213">The specific dependency property that changed is reported in the event data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8a83-214">일반적으로 개별 속성 변경 내용을 검색 하 고 속성 무효화 사례 당 단위로 수행이 메서드를 사용 하는 것이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-214">This method is not intended to generally detect individual property changes or perform invalidations of properties on a per-case basis.</span></span> <span data-ttu-id="a8a83-215"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> 대신 것 일반 무효화 패턴의 수정에 대 한 속성의 광범위 한 분류에 대 한 특정 정보가 알려져 있는 경우입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-215"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> is instead intended for modifications of the general invalidation pattern, if certain information is known about wide classifications of properties.</span></span> <span data-ttu-id="a8a83-216">예를 들어 변경를 <xref:System.Windows.Freezable> 의 값 형식에는 변경 될 수는 <xref:System.Windows.Freezable>, 다른 내에 있는 변경 내용을 하위 속성을 일 수 또는 <xref:System.Windows.Freezable> 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-216">For example, changes in a <xref:System.Windows.Freezable> might be changes in the value types of the <xref:System.Windows.Freezable>, or might be subproperties, where the changes are within other <xref:System.Windows.Freezable> references.</span></span> <span data-ttu-id="a8a83-217">합니다 <xref:System.Windows.Freezable> 의 구현을 재정의 <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> 내부 정보를 사용 하 여 속성 하위 속성에는 있고 두 경우 모두에 대 한 적절 한 기본 클래스는 논리를 제공 하는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-217">The <xref:System.Windows.Freezable> override implementation of <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> uses internal information to determine whether the properties are subproperties, and provides appropriate base class logic for either case.</span></span>  
  
 <span data-ttu-id="a8a83-218"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> 개체의 수명 동안 여러 번 호출 될 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-218"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> is potentially invoked many times during the life of an object.</span></span> <span data-ttu-id="a8a83-219">따라서 특정 속성의 메타 데이터를 무시 하 고 다음 연결 전체 속성 시스템에 대 한 성능을 높일 수 있습니다 <xref:System.Windows.CoerceValueCallback> 또는 <xref:System.Windows.PropertyChangedCallback> 개별 속성에 대 한 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-219">Therefore, you can achieve better performance for the overall property system if you override the metadata of specific properties and then attach <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions for individual properties.</span></span> <span data-ttu-id="a8a83-220">하지만 경우이 메서드를 사용 하는를 <xref:System.Windows.DependencyObject> 많은 값을 상호 연관 된 종속성 속성을 포함 하는 렌더링 동작을 다시 실행 해야 다양 한 관련 속성 무효화의 경우와 같은 논리를 포함 하는 경우 또는 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-220">However, you would use this method if a <xref:System.Windows.DependencyObject> includes a significant number of value-interrelated dependency properties, or if it includes logic such as rendering behavior that must be rerun for several related cases of property invalidations.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a8a83-221">항상 기본 구현을 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-221">Always call the base implementation.</span></span> <span data-ttu-id="a8a83-222">이렇게 하지 않으면 전체 없게 되므로 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 속성 시스템에 잘못 된 값이 보고 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-222">Failure to do this will significantly disable the entire [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system, causing incorrect values to be reported.</span></span></para></block>
        <altmember cref="T:System.Windows.FrameworkElement" />
      </Docs>
    </Member>
    <Member MemberName="ReadLocalValue">
      <MemberSignature Language="C#" Value="public object ReadLocalValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ReadLocalValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLocalValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ReadLocalValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.ReadLocalValue : System.Windows.DependencyProperty -&gt; obj" Usage="dependencyObject.ReadLocalValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="a8a83-223">값을 검색할 속성의 <see cref="T:System.Windows.DependencyProperty" /> 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-223">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</span></span></param>
        <summary><span data-ttu-id="a8a83-224">종속성 속성의 로컬 값을 반환합니다(있는 경우).</span><span class="sxs-lookup"><span data-stu-id="a8a83-224">Returns the local value of a dependency property, if it exists.</span></span></summary>
        <returns><span data-ttu-id="a8a83-225">로컬 값을 반환하거나 로컬 값이 설정되어 있지 않은 경우 센티널 값인 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-225">Returns the local value, or returns the sentinel value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> if no local value is set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8a83-226">사용 해야 <xref:System.Windows.DependencyObject.GetValue%2A> 종속성 속성에 대 한 가장 일반적인 "get" 작업에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-226">You should use <xref:System.Windows.DependencyObject.GetValue%2A> for most typical "get" operations for a dependency property.</span></span> <span data-ttu-id="a8a83-227"><xref:System.Windows.DependencyObject.ReadLocalValue%2A> 여기서는 값은 로컬로 설정 되지 다양 한 상황에 대 한 유효한 값을 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-227"><xref:System.Windows.DependencyObject.ReadLocalValue%2A> does not return the effective value for a variety of circumstances where the value was not locally set.</span></span>  
  
 <span data-ttu-id="a8a83-228">스타일, 테마, 서식 파일에서 설정한 값을 메타 데이터 또는 속성 값 상속에서 기본값을 로컬 값으로 간주 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-228">Values that are set by styles, themes, templates, the default value from metadata, or property value inheritance are not considered to be local values.</span></span> <span data-ttu-id="a8a83-229">그러나 바인딩 및 기타 식 계산 된 후 로컬 값으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-229">However, bindings and other expressions are considered to be local values, after they have been evaluated.</span></span>  
  
 <span data-ttu-id="a8a83-230">이 메서드가 반환 하는 로컬 값을 설정 하면 <xref:System.Windows.DependencyProperty.UnsetValue>합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-230">When no local value is set, this method returns <xref:System.Windows.DependencyProperty.UnsetValue>.</span></span>  
  
 <span data-ttu-id="a8a83-231">반환 된 값이 아닌 다른 <xref:System.Windows.DependencyProperty.UnsetValue>를 더 구체적인 형식 반환 값을 변환할 수 있는지 여부를 확인 하려면 요청 된 종속성 속성의 메타 데이터를 쿼리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-231">If the returned value is other than <xref:System.Windows.DependencyProperty.UnsetValue>, you can query the metadata of the requested dependency property to determine whether there is a more specific type that the return value can be converted to.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetLocalValueEnumerator" />
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentValue">
      <MemberSignature Language="C#" Value="public void SetCurrentValue (System.Windows.DependencyProperty dp, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCurrentValue(class System.Windows.DependencyProperty dp, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCurrentValue (dp As DependencyProperty, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCurrentValue(System::Windows::DependencyProperty ^ dp, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetCurrentValue : System.Windows.DependencyProperty * obj -&gt; unit" Usage="dependencyObject.SetCurrentValue (dp, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="a8a83-232">설정할 종속성 속성의 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-232">The identifier of the dependency property to set.</span></span></param>
        <param name="value"><span data-ttu-id="a8a83-233">새 로컬 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-233">The new local value.</span></span></param>
        <summary><span data-ttu-id="a8a83-234">해당 값 소스를 변경하지 않고 종속성 속성의 값을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-234">Sets the value of a dependency property without changing its value source.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8a83-235">이 메서드는 프로그래밍 방식으로 응용 프로그램의 선언 된 속성 사용을 사용 하지 않도록 설정 하지 않고 자체 속성 중 하나의 값을 설정 하는 구성 요소에 의해 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-235">This method is used by a component that programmatically sets the value of one of its own properties without disabling an application's declared use of the property.</span></span> <span data-ttu-id="a8a83-236"><xref:System.Windows.DependencyObject.SetCurrentValue%2A> 속성이 아니라 기존 트리거, 데이터 바인딩 중 유효 값을 변경 하는 메서드 및 스타일은 계속 작동 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-236">The <xref:System.Windows.DependencyObject.SetCurrentValue%2A> method changes the effective value of the property, but existing triggers, data bindings, and styles will continue to work.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a8a83-237">읽기 전용 종속성 속성 또는 봉인된 <see cref="T:System.Windows.DependencyObject" />의 속성을 수정하려고 한 경우</span><span class="sxs-lookup"><span data-stu-id="a8a83-237">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a8a83-238"><paramref name="value" />가 <paramref name="dp" /> 속성에 대해 등록된 올바른 형식이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="a8a83-238"><paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetValue">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a8a83-239">종속성 속성의 로컬 값을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-239">Sets the local value of a dependency property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (System.Windows.DependencyProperty dp, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class System.Windows.DependencyProperty dp, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (dp As DependencyProperty, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Windows::DependencyProperty ^ dp, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : System.Windows.DependencyProperty * obj -&gt; unit" Usage="dependencyObject.SetValue (dp, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="a8a83-240">설정할 종속성 속성의 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-240">The identifier of the dependency property to set.</span></span></param>
        <param name="value"><span data-ttu-id="a8a83-241">새 로컬 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-241">The new local value.</span></span></param>
        <summary><span data-ttu-id="a8a83-242">지정된 종속성 속성 식별자를 가진 종속성 속성의 로컬 값을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-242">Sets the local value of a dependency property, specified by its dependency property identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8a83-243">제공된 된 형식에는 처음에 등록 된 종속성 속성의 선언 된 형식을 일치 하지 않으면, 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-243">If the provided type does not match the type that is declared for the dependency property as it was originally registered, an exception is thrown.</span></span> <span data-ttu-id="a8a83-244">`value` 매개 변수는 항상 적절 한 형식으로 제공 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-244">The `value` parameter should always be provided as the appropriate type.</span></span>  
  
 <span data-ttu-id="a8a83-245">예외 조건에 잠재적으로 영향을 받지는 <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> 설정 되는 종속성 속성의 종속성 속성 식별자에 있는 콜백 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-245">The exception conditions are potentially influenced by the <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> callback that exists on the dependency property identifier of the dependency property being set.</span></span> <span data-ttu-id="a8a83-246">그렇지 않으면 제공 된 값에는 일반 형식 검사 조건 (예: 네이티브 형식이 Double 인 경우 문자열을 전달) 실패할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-246">Otherwise, the value provided might be failing general type-checking conditions (for example, passing a string when the native type is Double).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a8a83-247">읽기 전용 종속성 속성 또는 봉인된 <see cref="T:System.Windows.DependencyObject" />의 속성을 수정하려고 한 경우</span><span class="sxs-lookup"><span data-stu-id="a8a83-247">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a8a83-248"><paramref name="value" />가 <paramref name="dp" /> 속성에 대해 등록된 올바른 형식이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="a8a83-248"><paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (System.Windows.DependencyPropertyKey key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class System.Windows.DependencyPropertyKey key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (key As DependencyPropertyKey, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Windows::DependencyPropertyKey ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : System.Windows.DependencyPropertyKey * obj -&gt; unit" Usage="dependencyObject.SetValue (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="a8a83-249">설정할 속성의 <see cref="T:System.Windows.DependencyPropertyKey" /> 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-249">The <see cref="T:System.Windows.DependencyPropertyKey" /> identifier of the property to set.</span></span></param>
        <param name="value"><span data-ttu-id="a8a83-250">새 로컬 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-250">The new local value.</span></span></param>
        <summary><span data-ttu-id="a8a83-251">종속성 속성의 <see cref="T:System.Windows.DependencyPropertyKey" /> 식별자에 의해 지정된 읽기 전용 종속성 속성의 로컬 값을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-251">Sets the local value of a read-only dependency property, specified by the <see cref="T:System.Windows.DependencyPropertyKey" /> identifier of the dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8a83-252">사용자 지정 클래스에서 정의 된 읽기 전용 종속성 속성에 대 한 값을 설정할 때 일반적으로이 서명이 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-252">This signature is generally used when you set values for read-only dependency properties that are defined by your custom classes.</span></span> <span data-ttu-id="a8a83-253">일반적으로 <xref:System.Windows.DependencyObject.SetValue%2A> 종속성 속성에 대해 결정된 된 값을 제공 하는 내부 논리를 구현 하는 종속성 속성에 등록 하는 형식 에서만에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-253">Generally, <xref:System.Windows.DependencyObject.SetValue%2A> is called only from the type that registered that dependency property, which implements the internal logic that provides the determined value for the dependency property.</span></span> <span data-ttu-id="a8a83-254">자세한 내용은 [읽기 전용 종속성 속성](~/docs/framework/wpf/advanced/read-only-dependency-properties.md)을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="a8a83-254">For more information, see [Read-Only Dependency Properties](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span></span>  
  
 <span data-ttu-id="a8a83-255">제공된 된 형식에는 처음에 등록 된 종속성 속성의 선언 된 형식을 일치 하지 않으면, 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-255">If the provided type does not match the type that is declared for the dependency property as it was originally registered, an exception is thrown.</span></span> <span data-ttu-id="a8a83-256">`value` 매개 변수는 항상 적절 한 형식으로 제공 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-256">The `value` parameter should always be provided as the appropriate type.</span></span> <span data-ttu-id="a8a83-257">예외 조건에 잠재적으로 영향을 받지는 <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> 설정 되는 종속성 속성의 종속성 속성 식별자에 있는 콜백 합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-257">The exception conditions are potentially influenced by the <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> callback that exists on the dependency property identifier of the dependency property being set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a8a83-258">다음 예제와 함께 읽기 전용 종속성 속성을 정의 `public static readonly` <xref:System.Windows.DependencyProperty> 필요한 읽기 전용으로 노출 속성 소비자에 대 한 get 접근자를 제공 하는 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 래퍼입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-258">The following example defines a read-only dependency property, along with a `public static readonly` <xref:System.Windows.DependencyProperty> that provides necessary read-only exposure to property consumers, and the get accessor for the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrapper.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeProperty">
      <MemberSignature Language="C#" Value="protected internal virtual bool ShouldSerializeProperty (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ShouldSerializeProperty(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ShouldSerializeProperty (dp As DependencyProperty) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ShouldSerializeProperty(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member ShouldSerializeProperty : System.Windows.DependencyProperty -&gt; bool&#xA;override this.ShouldSerializeProperty : System.Windows.DependencyProperty -&gt; bool" Usage="dependencyObject.ShouldSerializeProperty dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="a8a83-259">serialize해야 하는 종속성 속성의 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-259">The identifier for the dependency property that should be serialized.</span></span></param>
        <summary><span data-ttu-id="a8a83-260">serialization 프로세스에서 지정된 종속성 속성의 값을 직렬화해야 하는지 여부를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-260">Returns a value that indicates whether serialization processes should serialize the value for the provided dependency property.</span></span></summary>
        <returns><span data-ttu-id="a8a83-261">제공되는 종속성 속성의 값을 serialize해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-261"><see langword="true" /> if the dependency property that is supplied should be value-serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a8a83-262">기본 구현은 반환 `true` 는 종속성 속성에 설정 된 로컬 값이 있었습니다. 모든 경우에는 <xref:System.Windows.DependencyObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-262">The default implementation returns `true` for all cases in which a dependency property had a local value established on the <xref:System.Windows.DependencyObject>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a8a83-263">이 메서드에 대 한 재정의 특정 종속성 속성을 다르게 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a8a83-263">Overrides for this method might handle specific dependency properties differently.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>