<Type Name="TypeDescriptionProvider" FullName="System.ComponentModel.TypeDescriptionProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b88ec9c085b8e59f0db7b40277a6be8ed9929825" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58717041" /></Metadata><TypeSignature Language="C#" Value="public abstract class TypeDescriptionProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TypeDescriptionProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.TypeDescriptionProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TypeDescriptionProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeDescriptionProvider abstract" />
  <TypeSignature Language="F#" Value="type TypeDescriptionProvider = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="eda83-101"><see cref="T:System.ComponentModel.TypeDescriptor" />에 추가 메타데이터를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-101">Provides supplemental metadata to the <see cref="T:System.ComponentModel.TypeDescriptor" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eda83-102"><xref:System.ComponentModel.TypeDescriptionProvider> 추가, 수정 하거나 특성, 속성 및 이벤트 등의 특성을 숨겨서 형식 또는 개체와 연결 된 형식 정보를 동적으로 확장 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-102">The <xref:System.ComponentModel.TypeDescriptionProvider> class dynamically extends the type information associated with a type or object by adding, modifying, or hiding characteristics such as attributes, properties, and events.</span></span> <span data-ttu-id="eda83-103">단일 메타 데이터를 제공 하는 여러 형식 설명 공급자 클래스가 있을 수 있습니다 <xref:System.ComponentModel.TypeDescriptor>합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-103">There can be multiple type description provider classes that offer metadata to a single <xref:System.ComponentModel.TypeDescriptor>.</span></span>  
  
 <span data-ttu-id="eda83-104">두 가지 방법으로 연결 하는 <xref:System.ComponentModel.TypeDescriptionProvider> 사용 하 여를 <xref:System.ComponentModel.TypeDescriptor>:</span><span class="sxs-lookup"><span data-stu-id="eda83-104">There are two ways to associate a <xref:System.ComponentModel.TypeDescriptionProvider> with a <xref:System.ComponentModel.TypeDescriptor>:</span></span>  
  
-   <span data-ttu-id="eda83-105">경우 대상 클래스를 지정할 수 있는 적절 한 디자인 타임에 <xref:System.ComponentModel.TypeDescriptionProviderAttribute> 태그입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-105">At design time, when the target class can be assigned the appropriate <xref:System.ComponentModel.TypeDescriptionProviderAttribute> tag.</span></span>  
  
-   <span data-ttu-id="eda83-106">런타임 시 경우의 합니다 <xref:System.ComponentModel.TypeDescriptor.AddProvider%2A> 의 메서드는 <xref:System.ComponentModel.TypeDescriptor> 클래스를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-106">At run time, when one of the <xref:System.ComponentModel.TypeDescriptor.AddProvider%2A> methods of the <xref:System.ComponentModel.TypeDescriptor> class can be called.</span></span> <span data-ttu-id="eda83-107">이러한 오버 로드 된 메서드는 대상 개체 또는 클래스 형식이 필요합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-107">These overloaded methods require either the target object or its class type.</span></span>  
  
 <span data-ttu-id="eda83-108"><xref:System.ComponentModel.TypeDescriptionProvider> 클래스가 생성 하는 동안 제공 된 동일한 형식의 부모 개체를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-108">The <xref:System.ComponentModel.TypeDescriptionProvider> class relies on a parent object of the same type, supplied during construction.</span></span> <span data-ttu-id="eda83-109">파생 된 클래스를 사용 하면이 <xref:System.ComponentModel.CustomTypeDescriptor> 를 선택적으로 메서드를 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-109">This allows classes that derive from <xref:System.ComponentModel.CustomTypeDescriptor> to selectively override methods.</span></span>  
  
 <span data-ttu-id="eda83-110">인스턴스의 <xref:System.ComponentModel.TypeDescriptionProvider> 만 필요한 경우 사용자 지정 형식 정보가 성능에 미치는 영향이 최소화에 빌드됩니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-110">Instances of <xref:System.ComponentModel.TypeDescriptionProvider> are only built upon demand, minimizing the impact of custom type information on performance.</span></span>  
  
 <span data-ttu-id="eda83-111">이 클래스는 상속될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-111">This class cannot be inherited.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="eda83-112">파생된 형식으로 표시 될 수 있습니다 <see langword="internal" /> 또는 <see langword="private" />를 사용 하 여 형식의 인스턴스를 만들 수 있습니다 하지만 <see cref="T:System.ComponentModel.TypeDescriptor" /> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-112">Your derived type might be marked as <see langword="internal" /> or <see langword="private" />, but an instance of your type can be created with the <see cref="T:System.ComponentModel.TypeDescriptor" /> class.</span></span> <span data-ttu-id="eda83-113">호출자를 가정 하 여 안전 하지 않은 코드는 신뢰할 수 있는 기록 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-113">Do not write insecure code by assuming the caller is trusted.</span></span> <span data-ttu-id="eda83-114">대신, 호출자가 부분 신뢰에서 형식의 인스턴스를 만들 수 있다고 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-114">Assume instead that callers might create instances of your type in partial trust.</span></span></para></block>
    <altmember cref="Overload:System.ComponentModel.TypeDescriptor.AddProvider" />
    <altmember cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" />
    <altmember cref="T:System.ComponentModel.ICustomTypeDescriptor" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="eda83-115"><see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-115">Initializes a new instance of the <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TypeDescriptionProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TypeDescriptionProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="eda83-116"><see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-116">Initializes a new instance of the <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eda83-117">이 생성자는 다른 것 <xref:System.ComponentModel.TypeDescriptionProvider.%23ctor%28System.ComponentModel.TypeDescriptionProvider%29> 매개 변수 값을 사용 하 여 생성자 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-117">This constructor is equivalent to calling the other <xref:System.ComponentModel.TypeDescriptionProvider.%23ctor%28System.ComponentModel.TypeDescriptionProvider%29> constructor with a parameter value that is `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TypeDescriptionProvider (System.ComponentModel.TypeDescriptionProvider parent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.TypeDescriptionProvider parent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (parent As TypeDescriptionProvider)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TypeDescriptionProvider(System::ComponentModel::TypeDescriptionProvider ^ parent);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.TypeDescriptionProvider : System.ComponentModel.TypeDescriptionProvider -&gt; System.ComponentModel.TypeDescriptionProvider" Usage="new System.ComponentModel.TypeDescriptionProvider parent" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="parent" Type="System.ComponentModel.TypeDescriptionProvider" />
      </Parameters>
      <Docs>
        <param name="parent"><span data-ttu-id="eda83-118">부모 형식 설명 공급자입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-118">The parent type description provider.</span></span></param>
        <summary><span data-ttu-id="eda83-119">부모 형식 설명 공급자를 사용하여 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-119">Initializes a new instance of the <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> class using a parent type description provider.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eda83-120">경우는 `parent` 매개 변수가 `null`모든 <xref:System.ComponentModel.TypeDescriptionProvider> 메서드는 기본 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-120">If the `parent` parameter is `null`, all <xref:System.ComponentModel.TypeDescriptionProvider> methods will return default values.</span></span> <span data-ttu-id="eda83-121">그렇지 않은 경우 모든 <xref:System.ComponentModel.TypeDescriptionProvider> 메서드는의 메서드에 위임 `parent`합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-121">Otherwise, all <xref:System.ComponentModel.TypeDescriptionProvider> methods will delegate to the methods of `parent`.</span></span>  
  
 <span data-ttu-id="eda83-122">다음 테이블에 대 한 기본 반환 값이 나와 <xref:System.ComponentModel.TypeDescriptionProvider> 메서드.</span><span class="sxs-lookup"><span data-stu-id="eda83-122">The following table shows the default return values for <xref:System.ComponentModel.TypeDescriptionProvider> methods.</span></span>  
  
|<span data-ttu-id="eda83-123">메서드</span><span class="sxs-lookup"><span data-stu-id="eda83-123">Method</span></span>|<span data-ttu-id="eda83-124">기본 반환 값</span><span class="sxs-lookup"><span data-stu-id="eda83-124">Default return value</span></span>|  
|------------|--------------------------|  
|<xref:System.ComponentModel.TypeDescriptionProvider.GetCache%2A>|`null`|  
|<xref:System.ComponentModel.TypeDescriptionProvider.CreateInstance%2A>|<span data-ttu-id="eda83-125">호출 하 여 새로 만든된 개체는 <xref:System.Activator.CreateInstance%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="eda83-125">A newly created object through a call to the <xref:System.Activator.CreateInstance%2A> method.</span></span>|  
|<xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A>|<span data-ttu-id="eda83-126">기본 인스턴스는 <xref:System.ComponentModel.CustomTypeDescriptor> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-126">A default instance of a <xref:System.ComponentModel.CustomTypeDescriptor> class.</span></span>|  
|<xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>|<span data-ttu-id="eda83-127">기본 인스턴스는 <xref:System.ComponentModel.CustomTypeDescriptor> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-127">A default instance of a <xref:System.ComponentModel.CustomTypeDescriptor> class.</span></span>|  
|<xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>|<span data-ttu-id="eda83-128">`objectType` 첫 번째 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-128">The `objectType` first parameter.</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.CustomTypeDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual object CreateInstance (IServiceProvider provider, Type objectType, Type[] argTypes, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateInstance(class System.IServiceProvider provider, class System.Type objectType, class System.Type[] argTypes, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateInstance (provider As IServiceProvider, objectType As Type, argTypes As Type(), args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ CreateInstance(IServiceProvider ^ provider, Type ^ objectType, cli::array &lt;Type ^&gt; ^ argTypes, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : IServiceProvider * Type * Type[] * obj[] -&gt; obj&#xA;override this.CreateInstance : IServiceProvider * Type * Type[] * obj[] -&gt; obj" Usage="typeDescriptionProvider.CreateInstance (provider, objectType, argTypes, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IServiceProvider" />
        <Parameter Name="objectType" Type="System.Type" />
        <Parameter Name="argTypes" Type="System.Type[]" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="eda83-129">선택적인 서비스 공급자입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-129">An optional service provider.</span></span></param>
        <param name="objectType"><span data-ttu-id="eda83-130">만들 개체의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-130">The type of object to create.</span></span> <span data-ttu-id="eda83-131">이 매개 변수는 <see langword="null" />이 될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-131">This parameter is never <see langword="null" />.</span></span></param>
        <param name="argTypes"><span data-ttu-id="eda83-132">개체의 생성자에 전달할 매개 변수 형식을 나타내는 형식의 선택적 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-132">An optional array of types that represent the parameter types to be passed to the object's constructor.</span></span> <span data-ttu-id="eda83-133">이 배열은 <see langword="null" />이거나 길이가 0일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-133">This array can be <see langword="null" /> or of zero length.</span></span></param>
        <param name="args"><span data-ttu-id="eda83-134">개체의 생성자에 전달할 매개 변수 값의 선택적 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-134">An optional array of parameter values to pass to the object's constructor.</span></span></param>
        <summary><span data-ttu-id="eda83-135">다른 데이터 형식 대신 사용할 수 있는 개체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-135">Creates an object that can substitute for another data type.</span></span></summary>
        <returns><span data-ttu-id="eda83-136">대체 <see cref="T:System.Object" />입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-136">The substitute <see cref="T:System.Object" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eda83-137"><xref:System.IServiceProvider> 에 지정 된 합니다 `provider` 매개 변수에 의해 전달 되는 <xref:System.ComponentModel.TypeDescriptor.CreateInstance%2A?displayProperty=nameWithType> 메서드의 <xref:System.ComponentModel.TypeDescriptor> 클래스.</span><span class="sxs-lookup"><span data-stu-id="eda83-137">The <xref:System.IServiceProvider> specified by the `provider` parameter is passed in by the <xref:System.ComponentModel.TypeDescriptor.CreateInstance%2A?displayProperty=nameWithType> method of the <xref:System.ComponentModel.TypeDescriptor> class.</span></span> <span data-ttu-id="eda83-138">경우 `provider` 아닙니다 `null`에 만들기 호출에 대 한 추가 컨텍스트를 가져올 형식 설명 공급자에서 사용할 수 있습니다 서비스 공급자입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-138">If `provider` is not `null`, the service provider can be used by the type description provider to obtain additional context about the creation call.</span></span>  
  
 <span data-ttu-id="eda83-139"><xref:System.ComponentModel.TypeDescriptionProvider.CreateInstance%2A> 메서드는 `virtual` 기본적으로 결과 반환 하는 고는 <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> 메서드 경우 `provider` 는 `null`.</span><span class="sxs-lookup"><span data-stu-id="eda83-139">The <xref:System.ComponentModel.TypeDescriptionProvider.CreateInstance%2A> method is `virtual` and, by default, returns the result of the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method if `provider` is `null`.</span></span> <span data-ttu-id="eda83-140">경우 `provider` 됩니다 `null`,이 메서드는 호출을 <xref:System.ComponentModel.TypeDescriptionProvider.CreateInstance%2A> 부모 공급자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-140">If `provider` is `null`, this method will invoke the <xref:System.ComponentModel.TypeDescriptionProvider.CreateInstance%2A> method of the parent provider.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="eda83-141">파생된 클래스는 대체 인스턴스를 제공 하에 관심이 있는 경우 바로 기본 구현을 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-141">If the derived class is not interested in providing a substitute instance, it should just call the base implementation.</span></span></para></block>
        <altmember cref="M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="GetCache">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IDictionary GetCache (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionary GetCache(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCache (instance As Object) As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionary ^ GetCache(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member GetCache : obj -&gt; System.Collections.IDictionary&#xA;override this.GetCache : obj -&gt; System.Collections.IDictionary" Usage="typeDescriptionProvider.GetCache instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="eda83-142">캐시를 가져올 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-142">The object for which to get the cache.</span></span></param>
        <summary><span data-ttu-id="eda83-143">키/값 쌍의 <see cref="T:System.Collections.IDictionary" />로 액세스되는 개체별 캐시를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-143">Gets a per-object cache, accessed as an <see cref="T:System.Collections.IDictionary" /> of key/value pairs.</span></span></summary>
        <returns><span data-ttu-id="eda83-144">제공된 개체에서 캐싱을 지원하면 <see cref="T:System.Collections.IDictionary" />이고, 그렇지 않으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-144">An <see cref="T:System.Collections.IDictionary" /> if the provided object supports caching; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eda83-145"><xref:System.ComponentModel.TypeDescriptor> 컬렉션 메타 데이터에 대해 복잡 한 작업을 수행 해야 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-145">A <xref:System.ComponentModel.TypeDescriptor> may need to perform complex operations on collections of metadata.</span></span> <span data-ttu-id="eda83-146">형식 도메인의 수명 동안 언로드할 수 없기 때문에 <xref:System.ComponentModel.TypeDescriptor> 클래스 형식에 따라 이러한 작업의 결과 자동으로 캐시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-146">Because types are not unloaded for the life of a domain, the <xref:System.ComponentModel.TypeDescriptor> class will automatically cache the results of these operations based on type.</span></span> <span data-ttu-id="eda83-147">그러나 일부 작업 라이브 개체 인스턴스를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-147">However, some operations use live object instances.</span></span> <span data-ttu-id="eda83-148">이러한 작업 내에서 캐시할 수 없습니다는 <xref:System.ComponentModel.TypeDescriptor> 인해 캐시 하는 개체가 가비지 수집 되지 않도록 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-148">These operations cannot be cached within the <xref:System.ComponentModel.TypeDescriptor> class because caching them would prevent the object from being garbage collected.</span></span> <span data-ttu-id="eda83-149">대신 합니다 <xref:System.ComponentModel.TypeDescriptor> 로 액세스는 개체별 캐시에 대 한 클래스를 사용 하면는 <xref:System.Collections.IDictionary> 개체에 있는 키/값 쌍의 합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-149">Instead, the <xref:System.ComponentModel.TypeDescriptor> class allows for a per-object cache, accessed as an <xref:System.Collections.IDictionary> of key/value pairs, to exist on an object.</span></span> <span data-ttu-id="eda83-150"><xref:System.ComponentModel.TypeDescriptionProvider.GetCache%2A> 메서드가이 캐시의 인스턴스를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-150">The <xref:System.ComponentModel.TypeDescriptionProvider.GetCache%2A> method returns an instance of this cache.</span></span> <span data-ttu-id="eda83-151"><xref:System.ComponentModel.TypeDescriptionProvider.GetCache%2A> 메서드는 반환 `null` 경우 개체에 대해 지원 되는 캐시가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-151">The <xref:System.ComponentModel.TypeDescriptionProvider.GetCache%2A> method will return `null` if there is no supported cache for an object.</span></span>  
  
 <span data-ttu-id="eda83-152">기본값 <xref:System.ComponentModel.TypeDescriptionProvider> 사용한 <xref:System.ComponentModel.TypeDescriptor> 구현 하는 설치 되는 구성 인지 확인 하는 개체를 검사 하는 <xref:System.ComponentModel.Design.IDictionaryService> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-152">The default <xref:System.ComponentModel.TypeDescriptionProvider> used by <xref:System.ComponentModel.TypeDescriptor> examines the object to see if it is a sited component that implements the <xref:System.ComponentModel.Design.IDictionaryService> interface.</span></span> <span data-ttu-id="eda83-153">개체가 있으면 개체의 캐시를 저장할 사전을 서비스를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-153">If the object is, it uses the dictionary service to store the object's cache.</span></span> <span data-ttu-id="eda83-154">개체는 변수가 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-154">Otherwise, the object it returns `null`.</span></span> <span data-ttu-id="eda83-155">다른 형식 설명 공급자에는 여기에 자체 구현을 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-155">Other type description providers may provide their own implementation here.</span></span> <span data-ttu-id="eda83-156">예를 들어 종속성 개체 수 속성을 연결할 형식의 <xref:System.Collections.IDictionary>합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-156">For example, dependency objects can just attach a property of type <xref:System.Collections.IDictionary>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.ComponentModel.Design.IDictionaryService" />
      </Docs>
    </Member>
    <Member MemberName="GetExtendedTypeDescriptor">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.ICustomTypeDescriptor GetExtendedTypeDescriptor (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.ICustomTypeDescriptor GetExtendedTypeDescriptor(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExtendedTypeDescriptor (instance As Object) As ICustomTypeDescriptor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ComponentModel::ICustomTypeDescriptor ^ GetExtendedTypeDescriptor(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member GetExtendedTypeDescriptor : obj -&gt; System.ComponentModel.ICustomTypeDescriptor&#xA;override this.GetExtendedTypeDescriptor : obj -&gt; System.ComponentModel.ICustomTypeDescriptor" Usage="typeDescriptionProvider.GetExtendedTypeDescriptor instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ICustomTypeDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="eda83-157">확장 형식 설명자를 가져올 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-157">The object for which to get the extended type descriptor.</span></span></param>
        <summary><span data-ttu-id="eda83-158">지정된 개체에 대한 확장 사용자 지정 형식 설명자를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-158">Gets an extended custom type descriptor for the given object.</span></span></summary>
        <returns><span data-ttu-id="eda83-159">개체에 대한 확장 메타데이터를 제공할 수 있는 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-159">An <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> that can provide extended metadata for the object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eda83-160">확장된 형식 설명자가 실제로 개체에 정의 된 다른 개체를이 개체는 추가 속성은 제공 하는 사용자 지정 형식 설명자입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-160">An extended type descriptor is a custom type descriptor that offers properties that other objects have added to this object, but that are not actually defined on the object.</span></span> <span data-ttu-id="eda83-161">예를 들어 합니다 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 구성 요소 모델을 구현 하는 개체는 <xref:System.ComponentModel.IExtenderProvider> 인터페이스는 동일한 논리적 컨테이너에 있는 다른 개체에 속성을 연결할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-161">For example, in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] component model, objects that implement the <xref:System.ComponentModel.IExtenderProvider> interface can attach properties to other objects that reside in the same logical container.</span></span> <span data-ttu-id="eda83-162">오버 로드 된 <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> 메서드는 이러한 추가 확장된 속성을 제공 하는 형식 설명자를 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-162">The overloaded <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> methods do not return a type descriptor that provides these extra extended properties.</span></span> <span data-ttu-id="eda83-163"><xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A> 메서드 확장 속성의 집합을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-163">The <xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A> method returns the set of these extended properties.</span></span> <span data-ttu-id="eda83-164"><xref:System.ComponentModel.TypeDescriptor> 이러한 두 속성 컬렉션의 결과 자동으로 병합 됩니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-164">The <xref:System.ComponentModel.TypeDescriptor> will automatically merge the results of these two property collections.</span></span> <span data-ttu-id="eda83-165">하지만 합니다 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 확장 속성, 구성 요소 모델 지원 <xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A> 형식 설명 공급자를 지 원하는 경우 이벤트 뿐만 아니라 확장 된 특성에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-165">While the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] component model supports only extended properties, <xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A> can be used for extended attributes as well as events, if the type description provider supports it.</span></span>  
  
 <span data-ttu-id="eda83-166"><xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A> `virtual` 및 기본적으로 부모 공급자가 없습니다 전달 된 경우 빈 결과 반환 하는 사용자 지정 형식 설명자를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-166"><xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A> is `virtual` and, by default, returns a custom type descriptor that returns empty results if no parent provider was passed.</span></span> <span data-ttu-id="eda83-167">이 메서드는 부모 공급자의 부모 공급자를 전달 된 경우 호출 <xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="eda83-167">If a parent provider was passed, this method will invoke the parent provider's <xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.TypeDescriptor" />
        <altmember cref="Overload:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="GetExtenderProviders">
      <MemberSignature Language="C#" Value="protected internal virtual System.ComponentModel.IExtenderProvider[] GetExtenderProviders (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.ComponentModel.IExtenderProvider[] GetExtenderProviders(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetExtenderProviders (instance As Object) As IExtenderProvider()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual cli::array &lt;System::ComponentModel::IExtenderProvider ^&gt; ^ GetExtenderProviders(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member GetExtenderProviders : obj -&gt; System.ComponentModel.IExtenderProvider[]&#xA;override this.GetExtenderProviders : obj -&gt; System.ComponentModel.IExtenderProvider[]" Usage="typeDescriptionProvider.GetExtenderProviders instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IExtenderProvider[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="eda83-168">관련된 Extender 공급자를 가져올 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-168">The object to get extender providers for.</span></span></param>
        <summary><span data-ttu-id="eda83-169">지정된 개체에 대한 Extender 공급자를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-169">Gets the extender providers for the specified object.</span></span></summary>
        <returns><span data-ttu-id="eda83-170"><paramref name="instance" />에 대한 Extender 공급자의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-170">An array of extender providers for <paramref name="instance" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eda83-171"><paramref name="instance" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-171"><paramref name="instance" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetFullComponentName">
      <MemberSignature Language="C#" Value="public virtual string GetFullComponentName (object component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetFullComponentName(object component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFullComponentName (component As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetFullComponentName(System::Object ^ component);" />
      <MemberSignature Language="F#" Value="abstract member GetFullComponentName : obj -&gt; string&#xA;override this.GetFullComponentName : obj -&gt; string" Usage="typeDescriptionProvider.GetFullComponentName component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="component"><span data-ttu-id="eda83-172">지정된 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-172">The specified component.</span></span></param>
        <summary><span data-ttu-id="eda83-173">지정된 구성 요소의 이름을 가져옵니다. 구성 요소에 이름이 없으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-173">Gets the name of the specified component, or <see langword="null" /> if the component has no name.</span></span></summary>
        <returns><span data-ttu-id="eda83-174">지정된 구성 요소의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-174">The name of the specified component.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eda83-175"><paramref name="component" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-175"><paramref name="component" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetReflectionType">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="eda83-176">개체에 대해 일반 리플렉션을 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-176">Performs normal reflection against an object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetReflectionType">
      <MemberSignature Language="C#" Value="public Type GetReflectionType (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetReflectionType(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetReflectionType (instance As Object) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetReflectionType(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="member this.GetReflectionType : obj -&gt; Type" Usage="typeDescriptionProvider.GetReflectionType instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="eda83-177">형식의 인스턴스로, <see langword="null" />이 아니어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-177">An instance of the type (should not be <see langword="null" />).</span></span></param>
        <summary><span data-ttu-id="eda83-178">지정된 개체에 대해 일반 리플렉션을 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-178">Performs normal reflection against the given object.</span></span></summary>
        <returns><span data-ttu-id="eda83-179">이 <paramref name="instance" />의 리플렉션 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-179">The type of reflection for this <paramref name="instance" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eda83-180">합니다 <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> 메서드는 하위 수준 버전의는 <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="eda83-180">The <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> method is a lower-level version of the <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> method.</span></span> <span data-ttu-id="eda83-181">사용자 지정 형식 설명자가 없는 개체를 찾을 수 없으면 <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> 호출 되어 개체에 대해 일반 리플렉션을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-181">If no custom type descriptor can be located for an object, <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> is called to perform normal reflection against the object.</span></span>  
  
 <span data-ttu-id="eda83-182">형식 대신 인스턴스를 사용 하는 형식 설명자 멤버를 호출 하는 경우이 메서드 오버 로드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-182">Use this method overload if you have called a type descriptor member that uses an instance instead of a type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eda83-183"><paramref name="instance" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-183"><paramref name="instance" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="Overload:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="GetReflectionType">
      <MemberSignature Language="C#" Value="public Type GetReflectionType (Type objectType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetReflectionType(class System.Type objectType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetReflectionType (objectType As Type) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetReflectionType(Type ^ objectType);" />
      <MemberSignature Language="F#" Value="member this.GetReflectionType : Type -&gt; Type" Usage="typeDescriptionProvider.GetReflectionType objectType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="objectType"><span data-ttu-id="eda83-184"><see cref="T:System.Reflection.IReflect" />를 검색할 개체의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-184">The type of object for which to retrieve the <see cref="T:System.Reflection.IReflect" />.</span></span></param>
        <summary><span data-ttu-id="eda83-185">형식에 대해 일반 리플렉션을 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-185">Performs normal reflection against a type.</span></span></summary>
        <returns><span data-ttu-id="eda83-186">이 <paramref name="objectType" />의 리플렉션 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-186">The type of reflection for this <paramref name="objectType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eda83-187">합니다 <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> 메서드는 하위 수준 버전의는 <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="eda83-187">The <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> method is a lower-level version of the <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> method.</span></span> <span data-ttu-id="eda83-188">사용자 지정 형식 설명자가 없는 개체를 찾을 수 없으면 <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> 호출 되어 개체에 대해 일반 리플렉션을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-188">If no custom type descriptor can be located for an object, <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> is called to perform normal reflection against the object.</span></span>  
  
 <span data-ttu-id="eda83-189">인스턴스 대신 형식을 사용 하는 형식 설명자 멤버를 호출 하는 경우이 메서드 오버 로드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-189">Use this method overload if you have called a type descriptor member that uses a type instead of an instance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eda83-190"><paramref name="objectType" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-190"><paramref name="objectType" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="Overload:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="GetReflectionType">
      <MemberSignature Language="C#" Value="public virtual Type GetReflectionType (Type objectType, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetReflectionType(class System.Type objectType, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetReflectionType (objectType As Type, instance As Object) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetReflectionType(Type ^ objectType, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member GetReflectionType : Type * obj -&gt; Type&#xA;override this.GetReflectionType : Type * obj -&gt; Type" Usage="typeDescriptionProvider.GetReflectionType (objectType, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectType" Type="System.Type" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="objectType"><span data-ttu-id="eda83-191"><see cref="T:System.Reflection.IReflect" />를 검색할 개체의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-191">The type of object for which to retrieve the <see cref="T:System.Reflection.IReflect" />.</span></span></param>
        <param name="instance"><span data-ttu-id="eda83-192">형식의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-192">An instance of the type.</span></span> <span data-ttu-id="eda83-193"><see langword="null" />일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-193">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="eda83-194">주어진 형식의 지정된 개체에 대해 일반 리플렉션을 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-194">Performs normal reflection against the given object with the given type.</span></span></summary>
        <returns><span data-ttu-id="eda83-195">이 <paramref name="objectType" />의 리플렉션 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-195">The type of reflection for this <paramref name="objectType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eda83-196">합니다 <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> 메서드는 하위 수준 버전의는 <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="eda83-196">The <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> method is a lower-level version of the <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> method.</span></span> <span data-ttu-id="eda83-197">사용자 지정 형식 설명자가 없는 개체를 찾을 수 없으면 <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> 호출 되어 개체에 대해 일반 리플렉션을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-197">If no custom type descriptor can be located for an object, <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> is called to perform normal reflection against the object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="eda83-198">이 메서드는로 프로토타입화 <see langword="virtual" />, 기본 반환 하 고 <paramref name="objectType" /> 없습니다 부모 공급자가 전달 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="eda83-198">This method is prototyped as <see langword="virtual" />, and by default returns <paramref name="objectType" /> if no parent provider was passed.</span></span> <span data-ttu-id="eda83-199">이 메서드는 부모 공급자의 부모 공급자를 전달 된 경우 호출 <see cref="Overload:System.ComponentModel.TypeDescriptionProvider.GetReflectionType" /> 메서드.</span><span class="sxs-lookup"><span data-stu-id="eda83-199">If a parent provider was passed, this method will invoke the parent provider's <see cref="Overload:System.ComponentModel.TypeDescriptionProvider.GetReflectionType" /> method.</span></span></para></block>
        <altmember cref="Overload:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="GetRuntimeType">
      <MemberSignature Language="C#" Value="public virtual Type GetRuntimeType (Type reflectionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetRuntimeType(class System.Type reflectionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRuntimeType (reflectionType As Type) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetRuntimeType(Type ^ reflectionType);" />
      <MemberSignature Language="F#" Value="abstract member GetRuntimeType : Type -&gt; Type&#xA;override this.GetRuntimeType : Type -&gt; Type" Usage="typeDescriptionProvider.GetRuntimeType reflectionType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reflectionType" Type="System.Type" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reflectionType"><span data-ttu-id="eda83-200">해당되는 런타임 형식으로 변환할 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-200">The type to convert to its runtime equivalent.</span></span></param>
        <summary><span data-ttu-id="eda83-201">리플렉션 형식을 런타임 형식으로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-201">Converts a reflection type into a runtime type.</span></span></summary>
        <returns><span data-ttu-id="eda83-202"><paramref name="reflectionType" />의 런타임 형식을 나타내는 <see cref="T:System.Type" />입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-202">A <see cref="T:System.Type" /> that represents the runtime equivalent of <paramref name="reflectionType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eda83-203">합니다 <xref:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType%2A> 메서드와 반대로 <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> 런타임 형식으로 다시 리플렉션 형식을 변환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-203">The <xref:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType%2A> method reverses the <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> method to convert a reflection type back into a runtime type.</span></span> <span data-ttu-id="eda83-204">사용 하 여 합니다 <xref:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType%2A> 메서드는 사용 하 여 기본는 <xref:System.Type.UnderlyingSystemType%2A> 이전 버전의 런타임 형식을 반환 하는 데 사용 된 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-204">Using the <xref:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType%2A> method is preferred over using the <xref:System.Type.UnderlyingSystemType%2A> property, which was used in earlier versions to return the runtime type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eda83-205"><paramref name="reflectionType" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-205"><paramref name="reflectionType" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTypeDescriptor">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="eda83-206">지정된 형식이나 개체의 사용자 지정 형식 설명자를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-206">Gets a custom type descriptor for the given type or object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTypeDescriptor">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeDescriptor (instance As Object) As ICustomTypeDescriptor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::ICustomTypeDescriptor ^ GetTypeDescriptor(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="member this.GetTypeDescriptor : obj -&gt; System.ComponentModel.ICustomTypeDescriptor" Usage="typeDescriptionProvider.GetTypeDescriptor instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ICustomTypeDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="eda83-207">형식의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-207">An instance of the type.</span></span> <span data-ttu-id="eda83-208">인스턴스가 <see cref="T:System.ComponentModel.TypeDescriptor" />에 전달되지 않았으면 <see langword="null" />일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-208">Can be <see langword="null" /> if no instance was passed to the <see cref="T:System.ComponentModel.TypeDescriptor" />.</span></span></param>
        <summary><span data-ttu-id="eda83-209">지정된 개체의 사용자 지정 형식 설명자를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-209">Gets a custom type descriptor for the given object.</span></span></summary>
        <returns><span data-ttu-id="eda83-210">형식에 대한 메타데이터를 제공할 수 있는 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-210">An <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> that can provide metadata for the type.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eda83-211"><paramref name="instance" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-211"><paramref name="instance" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeDescriptor">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor (Type objectType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor(class System.Type objectType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeDescriptor (objectType As Type) As ICustomTypeDescriptor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::ICustomTypeDescriptor ^ GetTypeDescriptor(Type ^ objectType);" />
      <MemberSignature Language="F#" Value="member this.GetTypeDescriptor : Type -&gt; System.ComponentModel.ICustomTypeDescriptor" Usage="typeDescriptionProvider.GetTypeDescriptor objectType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ICustomTypeDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="objectType"><span data-ttu-id="eda83-212">형식 설명자를 검색할 개체의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-212">The type of object for which to retrieve the type descriptor.</span></span></param>
        <summary><span data-ttu-id="eda83-213">지정된 형식의 사용자 지정 형식 설명자를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-213">Gets a custom type descriptor for the given type.</span></span></summary>
        <returns><span data-ttu-id="eda83-214">형식에 대한 메타데이터를 제공할 수 있는 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-214">An <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> that can provide metadata for the type.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeDescriptor">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor (Type objectType, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor(class System.Type objectType, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypeDescriptor (objectType As Type, instance As Object) As ICustomTypeDescriptor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ComponentModel::ICustomTypeDescriptor ^ GetTypeDescriptor(Type ^ objectType, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member GetTypeDescriptor : Type * obj -&gt; System.ComponentModel.ICustomTypeDescriptor&#xA;override this.GetTypeDescriptor : Type * obj -&gt; System.ComponentModel.ICustomTypeDescriptor" Usage="typeDescriptionProvider.GetTypeDescriptor (objectType, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ICustomTypeDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectType" Type="System.Type" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="objectType"><span data-ttu-id="eda83-215">형식 설명자를 검색할 개체의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-215">The type of object for which to retrieve the type descriptor.</span></span></param>
        <param name="instance"><span data-ttu-id="eda83-216">형식의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-216">An instance of the type.</span></span> <span data-ttu-id="eda83-217">인스턴스가 <see cref="T:System.ComponentModel.TypeDescriptor" />에 전달되지 않았으면 <see langword="null" />일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-217">Can be <see langword="null" /> if no instance was passed to the <see cref="T:System.ComponentModel.TypeDescriptor" />.</span></span></param>
        <summary><span data-ttu-id="eda83-218">지정된 형식과 개체의 사용자 지정 형식 설명자를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-218">Gets a custom type descriptor for the given type and object.</span></span></summary>
        <returns><span data-ttu-id="eda83-219">형식에 대한 메타데이터를 제공할 수 있는 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-219">An <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> that can provide metadata for the type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eda83-220">이 메서드는로 프로토타입화 `virtual` 및 부모 공급자가 없습니다 전달 된 경우 기본적으로 빈 설명자를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-220">This method is prototyped as `virtual` and, by default, returns an empty descriptor if no parent provider was passed.</span></span> <span data-ttu-id="eda83-221">이 메서드는 부모 공급자의 부모 공급자를 전달 된 경우 호출 <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="eda83-221">If a parent provider was passed, this method will invoke the parent provider's <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="eda83-222"><see cref="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)" /> 메서드는 개체에 대 한 사용자 지정 형식 설명자를 반환 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-222">The <see cref="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)" /> method should return a custom type descriptor for the object.</span></span> <span data-ttu-id="eda83-223">반환 해야 하는 경우 메서드는 개체에 대 한 형식 정보를 제공 하지 않습니다, <see langword="null" />합니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-223">If the method does not provide type information for the object, it should return <see langword="null" />.</span></span></para></block>
        <altmember cref="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsSupportedType">
      <MemberSignature Language="C#" Value="public virtual bool IsSupportedType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSupportedType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSupportedType(Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member IsSupportedType : Type -&gt; bool&#xA;override this.IsSupportedType : Type -&gt; bool" Usage="typeDescriptionProvider.IsSupportedType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="eda83-224">호환성을 테스트할 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-224">The type to test for compatibility.</span></span></param>
        <summary><span data-ttu-id="eda83-225">지정된 형식이 형식 설명 및 형식 설명 공급자의 체인과 호환되는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-225">Gets a value that indicates whether the specified type is compatible with the type description and its chain of type description providers.</span></span></summary>
        <returns><span data-ttu-id="eda83-226"><paramref name="type" />이 형식 설명 및 형식 설명 공급자의 체인과 호환되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-226"><see langword="true" /> if <paramref name="type" /> is compatible with the type description and its chain of type description providers; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="eda83-227"><paramref name="type" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="eda83-227"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>