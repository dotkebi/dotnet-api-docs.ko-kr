<Type Name="AsyncOperationManager" FullName="System.ComponentModel.AsyncOperationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3f474ecdee2a97c14c094c467c2c99713e70b1fe" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56348282" /></Metadata><TypeSignature Language="C#" Value="public static class AsyncOperationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AsyncOperationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class AsyncOperationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperationManager abstract sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperationManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="c8ff3-101">비동기 메서드 호출을 지원하는 클래스에 대한 동시성 관리 기능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-101">Provides concurrency management for classes that support asynchronous method calls.</span></span> <span data-ttu-id="c8ff3-102">이 클래스는 상속될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8ff3-103">클래스에 따라 비동기 동작을 제공 해야 하는지 여부를 [이벤트 기반 비동기 패턴 개요](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), 동시성 관리 문제가 많이 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-103">If your class needs to provide asynchronous behavior according to the [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), you will encounter a number of concurrency management issues.</span></span> <span data-ttu-id="c8ff3-104">이 중 한 스레드나 애플리케이션 모델에 대 한 적절 한 상황에 맞는 이벤트 처리기가 호출 되도록 하는 요구 사항이 됩니다 (예를 들어, Windows Forms 애플리케이션 [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] 애플리케이션, 콘솔 애플리케이션 및 등).</span><span class="sxs-lookup"><span data-stu-id="c8ff3-104">Among these is the requirement to ensure that event handlers are called on a thread or context that is appropriate for the application model (for example, Windows Forms applications, [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] applications, console applications, and so on).</span></span> <span data-ttu-id="c8ff3-105">합니다 <xref:System.ComponentModel.AsyncOperationManager> 에서 지 원하는 모든 애플리케이션 모델에서 제대로 실행 되는 클래스를 만드는 편리한 방법을 제공 합니다 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-105">The <xref:System.ComponentModel.AsyncOperationManager> provides a convenient way to create a class that runs properly under all application models supported by the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].</span></span>  
  
 <span data-ttu-id="c8ff3-106">합니다 <xref:System.ComponentModel.AsyncOperationManager> 클래스에 메서드 하나가 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>를 반환 하는 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 특정 비동기 작업의 기간을 추적에 사용할 수 있는 합니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-106">The <xref:System.ComponentModel.AsyncOperationManager> class has one method, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>, which returns an <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> that can be used to track the duration of a particular asynchronous task.</span></span> <span data-ttu-id="c8ff3-107"><xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 태스크는 작업이 완료 되 면 경고 클라이언트로 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-107">The <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> for a task can be used to alert clients when a task completes.</span></span> <span data-ttu-id="c8ff3-108">작업을 종료 하지 않고 진행률 업데이트 및 증분 결과 게시할 데도 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-108">It can also be used to post progress updates and incremental results without terminating the operation.</span></span>  
  
 <span data-ttu-id="c8ff3-109">비동기 클래스를 구현 하는 방법에 대 한 자세한 내용은 참조 하세요. [이벤트 기반 비동기 패턴 구현](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-109">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c8ff3-110">다음 코드 예제는 <xref:System.ComponentModel.AsyncOperationManager> 모든 애플리케이션 모델에 대 한 비동기 작업을 지 원하는 클래스를 만드는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-110">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperationManager> class to create a class that supports asynchronous operations for any application model.</span></span> <span data-ttu-id="c8ff3-111">테스트 숫자가 소수 인지 여부를 결정할 수 있는 클래스를 구현 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-111">It shows how to implement a class that tests a number to determine whether it is prime.</span></span> <span data-ttu-id="c8ff3-112">이 계산 시간이 오래 걸릴 수 있으므로 별도 스레드에서 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-112">This calculation can be time consuming, so it is done on a separate thread.</span></span> <span data-ttu-id="c8ff3-113">진행률 보고서, 증분 결과 및 완료 알림을에서 처리 되는 <xref:System.ComponentModel.AsyncOperation> 클래스는 적절 한 스레드 또는 컨텍스트에서 클라이언트의 이벤트 처리기가 호출 되도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-113">Progress reports, incremental results, and completion notifications are handled by the <xref:System.ComponentModel.AsyncOperation> class, which ensures that the client's event handlers are called on the proper thread or context.</span></span>  
  
 <span data-ttu-id="c8ff3-114">전체 코드 목록을 참조 하세요. [방법: 이벤트 기반 비동기 패턴을 지 원하는 구성 요소 구현](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-114">For a full code listing, see [How to: Implement a Component That Supports the Event-based Asynchronous Pattern](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf).</span></span> <span data-ttu-id="c8ff3-115">클라이언트의 전체 코드 목록은 참조 하세요. [방법: 이벤트 기반 비동기 패턴의 클라이언트 구현](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-115">For a full code listing of a client form, see [How to: Implement a Client of the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.AsyncOperation" />
    <related type="Article" href="https://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa"><span data-ttu-id="c8ff3-116">이벤트 기반 비동기 패턴 구현</span><span class="sxs-lookup"><span data-stu-id="c8ff3-116">Implementing the Event-based Asynchronous Pattern</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557"><span data-ttu-id="c8ff3-117">관리되는 스레딩을 구현하는 최선의 방법</span><span class="sxs-lookup"><span data-stu-id="c8ff3-117">Managed Threading Best Practices</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="CreateOperation">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.AsyncOperation CreateOperation (object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.AsyncOperation CreateOperation(object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateOperation (userSuppliedState As Object) As AsyncOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::AsyncOperation ^ CreateOperation(System::Object ^ userSuppliedState);" />
      <MemberSignature Language="F#" Value="static member CreateOperation : obj -&gt; System.ComponentModel.AsyncOperation" Usage="System.ComponentModel.AsyncOperationManager.CreateOperation userSuppliedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userSuppliedState"><span data-ttu-id="c8ff3-118">작업 ID와 같은 클라이언트 상태 정보와 특정 비동기 작업을 연결하는 데 사용되는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-118">An object used to associate a piece of client state, such as a task ID, with a particular asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="c8ff3-119">특정 비동기 작업의 기간을 추적하기 위한 <see cref="T:System.ComponentModel.AsyncOperation" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-119">Returns an <see cref="T:System.ComponentModel.AsyncOperation" /> for tracking the duration of a particular asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="c8ff3-120">비동기 메서드 호출의 기간을 추적하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.AsyncOperation" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-120">An <see cref="T:System.ComponentModel.AsyncOperation" /> that you can use to track the duration of an asynchronous method invocation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8ff3-121">합니다 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> 메서드가 반환 되는 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 특정 비동기 작업의 기간을 추적 하 고 애플리케이션 모델은 작업이 완료 될 때 경고를 사용할 수 있는 합니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-121">The <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> method returns an <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> that you can use to track the duration of a particular asynchronous operation and to alert the application model when the operation completes.</span></span> <span data-ttu-id="c8ff3-122">작업을 종료 하지 않고 진행률 업데이트 및 증분 결과 게시 하려면 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-122">You can also use it to post progress updates and incremental results without terminating the operation.</span></span> <span data-ttu-id="c8ff3-123"><xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 이러한 호출을 적절 한 스레드 또는 애플리케이션 모델에 대 한 상황에 맞는 올바르게 마샬링해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-123">The <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> will correctly marshal these calls to the appropriate thread or context for the application model.</span></span>  
  
 <span data-ttu-id="c8ff3-124">이벤트 기반 비동기 패턴을 지 원하는 클래스를 구현 하는 경우 클래스를 호출 해야 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> 때마다 하 *MethodName* `Async` 메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-124">If you implement a class that supports the Event-based Asynchronous Pattern, your class should call <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> each time your *MethodName*`Async` method is called.</span></span> <span data-ttu-id="c8ff3-125">메서드를 호출 하는 클라이언트 애플리케이션에서 사용할 수는 `userSuppliedState` 매개 변수를 각 호출을 비동기 작업을 실행 하는 동안 발생 하는 이벤트를 구분할를 고유 하 게 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-125">The client application that makes calls to the method can use the `userSuppliedState` parameter to uniquely identify each invocation, so as to distinguish events raised during the execution of the asynchronous operation.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="c8ff3-126">클라이언트 코드에 대 한 고유한 값을 제공 해야 합니다는 `userSuppliedState` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-126">Client code must provide a unique value for the `userSuppliedState` parameter.</span></span> <span data-ttu-id="c8ff3-127">고유 하지 않은 작업 Id는 진행률 및 기타 이벤트를 올바르게 보고 구현을 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-127">Non-unique task IDs may cause your implementation to report progress and other events incorrectly.</span></span> <span data-ttu-id="c8ff3-128">코드는 고유 하지 않은 작업 ID를 확인 하 고 throw는 <xref:System.ArgumentException?displayProperty=nameWithType> 감지 된 경우.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-128">Your code should check for a non-unique task ID and throw an <xref:System.ArgumentException?displayProperty=nameWithType> if one is detected.</span></span>  
  
 <span data-ttu-id="c8ff3-129">코드를 추적 해야 모든 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 반환한 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> 해당 기본 비동기 작업에서 개체를 사용 하 여 업데이트를 게시 하 고 작업을 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-129">Your code should track every <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> returned by <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> and use the object in the corresponding underlying asynchronous operation to post updates and terminate the operation.</span></span> <span data-ttu-id="c8ff3-130">이 추적 전달 처럼 간단할 수는 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 대리자 간에 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-130">This tracking can be as simple as passing the <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> as a parameter among delegates.</span></span> <span data-ttu-id="c8ff3-131">보다 정교한 디자인의 경우 클래스의 컬렉션을 유지할 수 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 개체, 작업은 시작 하는 경우 개체를 추가 하 고 작업을 완료 하거나 취소 하는 경우 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-131">In more sophisticated designs, your class can maintain a collection of <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> objects, adding objects when tasks are started and removing them when tasks are completed or canceled.</span></span> <span data-ttu-id="c8ff3-132">이 접근 방식을 사용 하면 확인 하려면 고유한 `userSuppliedState` 매개 변수 값 이며 여러 동시 호출을 지 원하는 클래스를 사용 하 여 작업할 때 사용 해야 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-132">This approach allows you to check for unique `userSuppliedState` parameter values, and is the method you should use when working with classes that support multiple concurrent invocations.</span></span>  
  
 <span data-ttu-id="c8ff3-133">비동기 클래스를 구현 하는 방법에 대 한 자세한 내용은 참조 하세요. [이벤트 기반 비동기 패턴 구현](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-133">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c8ff3-134">다음 코드 예제는 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> 메서드를는 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 비동기 작업의 기간을 추적 하는 것에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-134">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> method to create an <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> for tracking the duration of asynchronous operations.</span></span> <span data-ttu-id="c8ff3-135">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.ComponentModel.AsyncOperationManager> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-135">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager> class.</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
        <related type="Article" href="https://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa"><span data-ttu-id="c8ff3-136">이벤트 기반 비동기 패턴 구현</span><span class="sxs-lookup"><span data-stu-id="c8ff3-136">Implementing the Event-based Asynchronous Pattern</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557"><span data-ttu-id="c8ff3-137">관리되는 스레딩을 구현하는 최선의 방법</span><span class="sxs-lookup"><span data-stu-id="c8ff3-137">Managed Threading Best Practices</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public static System.Threading.SynchronizationContext SynchronizationContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); void set(System::Threading::SynchronizationContext ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext with get, set" Usage="System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c8ff3-138">비동기 작업의 동기화 컨텍스트를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-138">Gets or sets the synchronization context for the asynchronous operation.</span></span></summary>
        <value><span data-ttu-id="c8ff3-139">비동기 작업의 동기화 컨텍스트입니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-139">The synchronization context for the asynchronous operation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8ff3-140">기본 구현은 자유 스레드된 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-140">The default implementation is the free-threaded implementation.</span></span>  
  
 <span data-ttu-id="c8ff3-141">스레드 설정 해야 합니다 <xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A> 속성을 `null` 해당 팩터리를 삭제 하지 것입니다. 그렇지 않으면 완료 되 면 자유 스레드된 팩터리를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-141">A thread should set the <xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A> property to `null` to release the free-threaded factory when it is done, or else its factory will never be disposed.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.NamedPermissionSet"><span data-ttu-id="c8ff3-142">동기화 컨텍스트를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-142">for setting the synchronization context.</span></span> <span data-ttu-id="c8ff3-143">요청 값: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다.</span><span class="sxs-lookup"><span data-stu-id="c8ff3-143">Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="c8ff3-144">연결 된 상태:</span><span class="sxs-lookup"><span data-stu-id="c8ff3-144">Associated state:</span></span></permission>
      </Docs>
    </Member>
  </Members>
</Type>