<Type Name="Process" FullName="System.Diagnostics.Process">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4b6bf6f299cf0346642cea501b760e0bcc0f3a76" /><Meta Name="ms.sourcegitcommit" Value="c181255cb311fdd498458b3f12418f773c97254a" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/21/2019" /><Meta Name="ms.locfileid" Value="58320852" /></Metadata><TypeSignature Language="C#" Value="public class Process : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Process extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Process" />
  <TypeSignature Language="VB.NET" Value="Public Class Process&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class Process : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type Process = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Process</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces></Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.ComponentModel.DefaultEvent("Exited")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.ComponentModel.DefaultProperty("StartInfo")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Diagnostics.Design.ProcessDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.MonitoringDescription("Provides access to local and remote processes, enabling starting and stopping of local processes.")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Designer("System.Diagnostics.Design.ProcessDesigner, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Diagnostics.Design.ProcessDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Diagnostics.MonitoringDescription("ProcessDesc")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.ComponentModel.Designer("System.Diagnostics.Design.ProcessDesigner, System.Design, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="67157-101">로컬 및 원격 프로세스에 대한 액세스를 제공하고 로컬 시스템 프로세스를 시작하고 중지할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-101">Provides access to local and remote processes and enables you to start and stop local system processes.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-102"><xref:System.Diagnostics.Process> 구성 요소는 컴퓨터에서 실행 중인 프로세스에 대 한 액세스를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-102">A <xref:System.Diagnostics.Process> component provides access to a process that is running on a computer.</span></span> <span data-ttu-id="67157-103">프로세스를 간단히 말해에서는 실행 중인 앱입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-103">A process, in the simplest terms, is a running app.</span></span> <span data-ttu-id="67157-104">스레드는 운영 체제는 프로세서 시간을 할당 하는 기본 단위입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-104">A thread is the basic unit to which the operating system allocates processor time.</span></span> <span data-ttu-id="67157-105">스레드가 다른 스레드에 의해 현재 실행 중인 부분을 포함 하 여 프로세스의 코드의 일부를 실행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-105">A thread can execute any part of the code of the process, including parts currently being executed by another thread.</span></span>  
  
 <span data-ttu-id="67157-106"><xref:System.Diagnostics.Process> 구성 요소는 시작, 중지, 제어 및 앱 모니터링을 위한 유용한 도구입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-106">The <xref:System.Diagnostics.Process> component is a useful tool for starting, stopping, controlling, and monitoring apps.</span></span> <span data-ttu-id="67157-107">사용할 수는 <xref:System.Diagnostics.Process> 구성 요소를 실행 중인 프로세스 목록을 가져올 수 있거나 새 프로세스를 시작할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-107">You can use the <xref:System.Diagnostics.Process> component, to obtain a list of the processes that are running, or you can start a new process.</span></span> <span data-ttu-id="67157-108"><xref:System.Diagnostics.Process> 시스템 프로세스 액세스 구성 요소를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-108">A <xref:System.Diagnostics.Process> component is used to access system processes.</span></span> <span data-ttu-id="67157-109">이후에 <xref:System.Diagnostics.Process> 구성 요소가 초기화 되었는지, 실행 중인 프로세스에 대 한 정보를 가져오기 위해 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-109">After a <xref:System.Diagnostics.Process> component has been initialized, it can be used to obtain information about the running process.</span></span> <span data-ttu-id="67157-110">이러한 정보는 스레드 로드 된 모듈 (.dll 및.exe 파일)의 집합을 포함 하 고 프로세스 메모리 양 등 성능 정보를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-110">Such information includes the set of threads, the loaded modules (.dll and .exe files), and performance information such as the amount of memory the process is using.</span></span>  
  
 <span data-ttu-id="67157-111">이 형식이 구현 하는 <xref:System.IDisposable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-111">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="67157-112">형식을 사용 하 여 마쳤으면 직접 또는 간접적으로의 삭제 해야 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-112">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="67157-113">직접 형식의 dispose 호출 해당 <xref:System.IDisposable.Dispose%2A> 의 메서드를 `try` / `finally` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-113">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`finally` block.</span></span> <span data-ttu-id="67157-114">삭제 하지 직접, 언어 구문 같은 사용 `using` (C#에서) 또는 `Using` (Visual Basic에서는).</span><span class="sxs-lookup"><span data-stu-id="67157-114">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="67157-115">자세한 내용은 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하세요.를 <xref:System.IDisposable> 인터페이스 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-115">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-116">32 비트 프로세스는 64 비트 프로세스의 모듈에 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-116">32-bit processes cannot access the modules of a 64-bit process.</span></span> <span data-ttu-id="67157-117">32 비트 프로세스에서 64 비트 프로세스에 대 한 정보를 가져오려고 하는 경우는 <xref:System.ComponentModel.Win32Exception> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-117">If you try to get information about a 64-bit process from a 32-bit process, you will get a <xref:System.ComponentModel.Win32Exception> exception.</span></span> <span data-ttu-id="67157-118">다른 한편으로 64 비트 프로세스를 32 비트 프로세스의 모듈을 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-118">A 64-bit process, on the other hand, can access the modules of a 32-bit process.</span></span>  
  
 <span data-ttu-id="67157-119">프로세스 구성 요소 속성의 그룹에 대 한 정보를 한 번에 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-119">The process component obtains information about a group of properties all at once.</span></span> <span data-ttu-id="67157-120">후 합니다 <xref:System.Diagnostics.Process> 구성 요소 그룹의 한 멤버에 대 한 정보 획득, 해당 그룹의 다른 속성에 대 한 값을 캐시 하 고 호출할 때까지 그룹의 다른 멤버에 대 한 새 정보를 가져올는 <xref:System.Diagnostics.Process.Refresh%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="67157-120">After the <xref:System.Diagnostics.Process> component has obtained information about one member of any group, it will cache the values for the other properties in that group and not obtain new information about the other members of the group until you call the <xref:System.Diagnostics.Process.Refresh%2A> method.</span></span> <span data-ttu-id="67157-121">따라서 속성 값에 대 한 마지막 호출 이후의 모든 되도록 보장 되지 않습니다는 <xref:System.Diagnostics.Process.Refresh%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="67157-121">Therefore, a property value is not guaranteed to be any newer than the last call to the <xref:System.Diagnostics.Process.Refresh%2A> method.</span></span> <span data-ttu-id="67157-122">그룹 분석은 운영 체제에 종속적입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-122">The group breakdowns are operating-system dependent.</span></span>  
  
 <span data-ttu-id="67157-123">경로 변수를 선언한 따옴표를 사용 하 여 시스템의 경우 정규화 해야 해당 경로 위치에 있는 프로세스를 시작 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="67157-123">If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location.</span></span> <span data-ttu-id="67157-124">그렇지 않으면 시스템 경로 찾지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-124">Otherwise, the system will not find the path.</span></span> <span data-ttu-id="67157-125">예를 들어 경우 `c:\mypath` path에 없는 따옴표를 사용 하 여 추가한: `path = %path%;"c:\mypath"`에서 모든 프로세스를 정규화 해야 `c:\mypath` 시작할 때.</span><span class="sxs-lookup"><span data-stu-id="67157-125">For example, if `c:\mypath` is not in your path, and you add it using quotation marks: `path = %path%;"c:\mypath"`, you must fully qualify any process in `c:\mypath` when starting it.</span></span>  
  
 <span data-ttu-id="67157-126">시스템 프로세스를 고유 하 게 시스템에서 해당 프로세스 id로 식별 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-126">A system process is uniquely identified on the system by its process identifier.</span></span> <span data-ttu-id="67157-127">많은 Windows 리소스와 마찬가지로 프로세스 또한 컴퓨터의 고유 하지 않을 해당 핸들로 식별 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-127">Like many Windows resources, a process is also identified by its handle, which might not be unique on the computer.</span></span> <span data-ttu-id="67157-128">핸들은 리소스의 식별자에 대 한 일반 용어입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-128">A handle is the generic term for an identifier of a resource.</span></span> <span data-ttu-id="67157-129">운영 체제를 통해 액세스할 수 있는 프로세스 핸들을 유지 합니다 <xref:System.Diagnostics.Process.Handle%2A> 의 속성을 <xref:System.Diagnostics.Process> 된 프로세스가 종료 된 경우에 구성 요소.</span><span class="sxs-lookup"><span data-stu-id="67157-129">The operating system persists the process handle, which is accessed through the <xref:System.Diagnostics.Process.Handle%2A> property of the <xref:System.Diagnostics.Process> component, even when the process has exited.</span></span> <span data-ttu-id="67157-130">와 같은 프로세스의 관리 정보를 가져올 수는 따라서 합니다 <xref:System.Diagnostics.Process.ExitCode%2A> (일반적으로 하거나 0의 성공 또는 0이 아닌 오류 코드) 및 <xref:System.Diagnostics.Process.ExitTime%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-130">Thus, you can get the process's administrative information, such as the <xref:System.Diagnostics.Process.ExitCode%2A> (usually either zero for success or a nonzero error code) and the <xref:System.Diagnostics.Process.ExitTime%2A>.</span></span> <span data-ttu-id="67157-131">처리는 매우 중요 한 리소스 되므로 핸들 누수가 발생 하는 것은 메모리 누수 보다 더 심각 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-131">Handles are an extremely valuable resource, so leaking handles is more virulent than leaking memory.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-132">이 클래스는 모든 멤버에 적용 되는 클래스 수준에서 상속 요청과 링크 요청을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-132">This class contains a link demand and an inheritance demand at the class level that applies to all members.</span></span> <span data-ttu-id="67157-133"><xref:System.Security.SecurityException> 직접 실행 호출자 또는 파생된 클래스에 완전 신뢰 권한이 없는 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-133">A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have full-trust permission.</span></span> <span data-ttu-id="67157-134">보안 요청에 대 한 자세한 내용은 참조 하세요 [링크 요구가](~/docs/framework/misc/link-demands.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-134">For details about security demands, see [Link Demands](~/docs/framework/misc/link-demands.md).</span></span>  
  
<a name="Core"></a>   
## <a name="includenetcoreincludesnet-core-mdmd-notes"></a>[!INCLUDE[net_core](~/includes/net-core-md.md)] <span data-ttu-id="67157-135">참고 사항</span><span class="sxs-lookup"><span data-stu-id="67157-135">Notes</span></span>  
 <span data-ttu-id="67157-136">.NET Framework에는 <xref:System.Diagnostics.Process> 기본적으로 클래스 <xref:System.Console> 인코딩 되는 코드 페이지 인코딩을 입력, 출력 및 오류 스트림에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-136">In the .NET Framework, the <xref:System.Diagnostics.Process> class by default uses <xref:System.Console> encodings, which are typically code page encodings, for the input, output, and error streams.</span></span> <span data-ttu-id="67157-137">예를 들어 코드는 문화권이 영어 (미국) 인 시스템에서 코드 페이지 437의 기본 인코딩는 <xref:System.Console> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-137">For example code, on systems whose culture is English (United States), code page 437 is the default encoding for the <xref:System.Console> class.</span></span> <span data-ttu-id="67157-138">그러나 [!INCLUDE[net_core](~/includes/net-core-md.md)] 이러한 인코딩의 제한 된 하위 집합만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-138">However, [!INCLUDE[net_core](~/includes/net-core-md.md)] may make only a limited subset of these encodings available.</span></span> <span data-ttu-id="67157-139">이 경우 사용 하 여 <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> 기본 인코딩.</span><span class="sxs-lookup"><span data-stu-id="67157-139">If this is the case, it uses <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> as the default encoding.</span></span>  
  
 <span data-ttu-id="67157-140">경우는 <xref:System.Diagnostics.Process> 개체에서 특정 코드 페이지 인코딩에 따라 달라 집니다, 있습니다 수 여전히 사용할 수 있도록 다음을 수행 하 여 *하기 전에* 호출할 있습니다 <xref:System.Diagnostics.Process> 메서드:</span><span class="sxs-lookup"><span data-stu-id="67157-140">If a <xref:System.Diagnostics.Process> object depends on specific code page encodings, you can still make them available by doing the following *before* you call any <xref:System.Diagnostics.Process> methods:</span></span>  
  
1.  <span data-ttu-id="67157-141">프로젝트에 System.Text.Encoding.CodePages.dll 어셈블리에 대 한 참조를 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-141">Add a reference to the System.Text.Encoding.CodePages.dll assembly to your project.</span></span>  
  
2.  <span data-ttu-id="67157-142">검색 된 <xref:System.Text.EncodingProvider> 에서 개체를 <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-142">Retrieve the <xref:System.Text.EncodingProvider> object from the <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType> property.</span></span>  
  
3.  <span data-ttu-id="67157-143">전달 된 <xref:System.Text.EncodingProvider> 개체를 <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType> 메서드를 사용할 수 있는 인코딩 공급자가 지 원하는 추가 인코딩.</span><span class="sxs-lookup"><span data-stu-id="67157-143">Pass the <xref:System.Text.EncodingProvider> object to the <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType> method to make the additional encodings supported by the encoding provider available.</span></span>  
  
 <span data-ttu-id="67157-144">합니다 <xref:System.Diagnostics.Process> 클래스 자동으로 사용 하 여 기본 시스템 인코딩이 UTF8 대신 호출 하기 전에 인코딩 공급자를 등록 된 <xref:System.Diagnostics.Process> 메서드.</span><span class="sxs-lookup"><span data-stu-id="67157-144">The <xref:System.Diagnostics.Process> class will then automatically use the default system encoding rather than UTF8, provided that you have registered the encoding provider before calling any <xref:System.Diagnostics.Process> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-145">다음 예에서는 인스턴스의 <xref:System.Diagnostics.Process> 클래스는 프로세스를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-145">The following example uses an instance of the <xref:System.Diagnostics.Process> class to start a process.</span></span>  
  
 [!code-cpp[Process.Start_instance#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.Start_instance/CPP/processstart.cpp#1)]
 [!code-csharp[Process.Start_instance#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.Start_instance/CS/processstart.cs#1)]
 [!code-vb[Process.Start_instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.Start_instance/VB/processstart.vb#1)]  
  
 <span data-ttu-id="67157-146">다음 예제에서는 합니다 <xref:System.Diagnostics.Process> 자체와 정적 클래스 <xref:System.Diagnostics.Process.Start%2A> 프로세스를 시작 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-146">The following example uses the <xref:System.Diagnostics.Process> class itself and a static <xref:System.Diagnostics.Process.Start%2A> method to start a process.</span></span>  
  
 [!code-cpp[Process.Start_static#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.Start_static/CPP/processstartstatic.cpp#1)]
 [!code-csharp[Process.Start_static#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.Start_static/CS/processstartstatic.cs#1)]
 [!code-vb[Process.Start_static#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.Start_static/VB/processstartstatic.vb#1)]  
  
 <span data-ttu-id="67157-147">다음 F# 예제에서는 정의 `runProc` 함수는 프로세스를 시작 하는 모든 출력 및 오류 정보를 캡처하고 프로세스를 실행 한 시간 (밀리초)의 수를 기록 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-147">The following F# example defines a `runProc` function that starts a process, captures all output and error information, and records the number of milliseconds that the process has run.</span></span>  <span data-ttu-id="67157-148">`runProc` 함수에 세 개의 매개 변수가: 응용 프로그램을 시작 디렉터리를 제공 하는 인수를 시작 하려면 응용 프로그램의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-148">The `runProc` function has three parameters: the name of application to launch, the arguments to supply to the application, and the starting directory.</span></span>  
  
 [!code-fsharp[System.Diagnostics.Process#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.diagnostics.process/fs/Start1.fs#1)]  
  
 <span data-ttu-id="67157-149">에 대 한 코드를 `runProc` 함수를 통해 작성 했습니다 [ImaginaryDevelopment](http://fssnip.net/authors/ImaginaryDevelopment) 에서 사용할 수는 [Microsoft Public License](https://opensource.org/licenses/ms-pl)합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-149">The code for the `runProc` function was written by [ImaginaryDevelopment](http://fssnip.net/authors/ImaginaryDevelopment) and is available under the [Microsoft Public License](https://opensource.org/licenses/ms-pl).</span></span>  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-150">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-150">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-151">이 클래스는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-151">This class cannot be used by partially trusted code.</span></span></permission>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="67157-152">상속자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-152">for full trust for inheritors.</span></span> <span data-ttu-id="67157-153">부분적으로 신뢰할 수 있는 코드에서이 클래스를 상속할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-153">This class cannot be inherited by partially trusted code.</span></span></permission>
    <altmember cref="M:System.Diagnostics.Process.Start" />
    <altmember cref="T:System.Diagnostics.ProcessStartInfo" />
    <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
    <altmember cref="M:System.Diagnostics.Process.Kill" />
    <altmember cref="T:System.Diagnostics.ProcessThread" />
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/windowsdesktop/Using-the-NET-Process-Class-d70597ef"><span data-ttu-id="67157-154">.NET Process 클래스를 사용 하 여</span><span class="sxs-lookup"><span data-stu-id="67157-154">Using the .NET Process Class</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Process ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Process();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="67157-155"><see cref="T:System.Diagnostics.Process" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-155">Initializes a new instance of the <see cref="T:System.Diagnostics.Process" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-156">지정 하지 않으면 경우는 <xref:System.Diagnostics.Process.MachineName%2A> 속성 기본값은 로컬 컴퓨터 (".").</span><span class="sxs-lookup"><span data-stu-id="67157-156">If you do not specify the <xref:System.Diagnostics.Process.MachineName%2A> property, the default is the local computer, (".").</span></span>  
  
 <span data-ttu-id="67157-157">새 연결에 대 한 두 가지 옵션이 있습니다 <xref:System.Diagnostics.Process> 컴퓨터의 프로세스를 사용 하 여 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-157">You have two options for associating a new <xref:System.Diagnostics.Process> component with a process on the computer.</span></span> <span data-ttu-id="67157-158">만들려면 생성자를 사용 하는 첫 번째 옵션은는 <xref:System.Diagnostics.Process> 의 적절 한 멤버를 설정 하는 구성 요소를 <xref:System.Diagnostics.Process.StartInfo%2A> 속성과 호출 <xref:System.Diagnostics.Process.Start%2A> 연결할는 <xref:System.Diagnostics.Process> 새 시스템 프로세스를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-158">The first option is to use the constructor to create the <xref:System.Diagnostics.Process> component, set the appropriate members of the <xref:System.Diagnostics.Process.StartInfo%2A> property and call <xref:System.Diagnostics.Process.Start%2A> to associate the <xref:System.Diagnostics.Process> with a new system process.</span></span> <span data-ttu-id="67157-159">두 번째 옵션은 연결 합니다 <xref:System.Diagnostics.Process> 를 사용 하 여 실행 중인 시스템 프로세스를 사용 하 여 <xref:System.Diagnostics.Process.GetProcessById%2A> 또는 중 하나는 <xref:System.Diagnostics.Process.GetProcesses%2A> 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-159">The second option is to associate the <xref:System.Diagnostics.Process> with a running system process by using <xref:System.Diagnostics.Process.GetProcessById%2A> or one of the <xref:System.Diagnostics.Process.GetProcesses%2A> return values.</span></span>  
  
 <span data-ttu-id="67157-160">사용 하는 경우는 `static` 오버 로드는 <xref:System.Diagnostics.Process.Start%2A> 메서드는 새 시스템 프로세스를 시작 하는 메서드를 만듭니다 <xref:System.Diagnostics.Process> 구성 요소 프로세스에 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-160">If you use a `static` overload of the <xref:System.Diagnostics.Process.Start%2A> method to start a new system process, the method creates a new <xref:System.Diagnostics.Process> component and associates it with the process.</span></span>  
  
 <span data-ttu-id="67157-161">경우는 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType> 속성이 해당 기본값으로 `true`를 사용 하 여 유사한 방식으로 응용 프로그램 및 문서를 시작할 수 있습니다는 `Run` 는 Windows 대화 상자 `Start` 메뉴.</span><span class="sxs-lookup"><span data-stu-id="67157-161">When the <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType> property is set to its default value, `true`, you can start applications and documents in a way that is similar to using the `Run` dialog box of the Windows `Start` menu.</span></span> <span data-ttu-id="67157-162">때 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType> 는 `false`에 실행을 시작할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-162">When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType> is `false`, you can start only executables.</span></span>  
  
 <span data-ttu-id="67157-163">명령줄에서 호출할 수 있는 모든 실행 파일을 두 가지 방법 중 하나로 시작할 수 있습니다:의 적절 한 멤버를 설정 하 여 합니다 <xref:System.Diagnostics.Process.StartInfo%2A> 속성을 호출 합니다 <xref:System.Diagnostics.Process.Start%2A> 메서드 매개 변수 없이 또는 적절 한 매개 변수를 전달 하 여는 `static` <xref:System.Diagnostics.Process.Start%2A> 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-163">Any executable file that you can call from the command line can be started in one of two ways: by setting the appropriate members of the <xref:System.Diagnostics.Process.StartInfo%2A> property and calling the <xref:System.Diagnostics.Process.Start%2A> method with no parameters, or by passing the appropriate parameter to the `static`<xref:System.Diagnostics.Process.Start%2A> member.</span></span>  
  
 <span data-ttu-id="67157-164">만들 수 있습니다는 <xref:System.Diagnostics.Process> 생성자는 정적 중 하나를 사용 하 여 구성 요소 <xref:System.Diagnostics.Process.Start%2A> 오버 로드 또는 합니다 <xref:System.Diagnostics.Process.GetProcessById%2A>를 <xref:System.Diagnostics.Process.GetProcesses%2A>, 또는 <xref:System.Diagnostics.Process.GetProcessesByName%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="67157-164">You can create a <xref:System.Diagnostics.Process> component by using the constructor, one of the static <xref:System.Diagnostics.Process.Start%2A> overloads, or any of the <xref:System.Diagnostics.Process.GetProcessById%2A>, <xref:System.Diagnostics.Process.GetProcesses%2A>, or <xref:System.Diagnostics.Process.GetProcessesByName%2A> methods.</span></span> <span data-ttu-id="67157-165">이 작업을 수행한 후 연결된 된 프로세스를 볼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-165">After you have done so, you have a view into the associated process.</span></span> <span data-ttu-id="67157-166">프로세스 속성은 메모리에 변경 될 때 자동으로 업데이트 하는 동적인 보기 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="67157-166">This is not a dynamic view that updates itself automatically when the process properties have changed in memory.</span></span> <span data-ttu-id="67157-167">대신 호출 해야 합니다 <xref:System.Diagnostics.Process.Refresh%2A> 업데이트에 따라 구성 된 <xref:System.Diagnostics.Process> 응용 프로그램에서 속성 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-167">Instead, you must call <xref:System.Diagnostics.Process.Refresh%2A> for the component to update the <xref:System.Diagnostics.Process> property information in your application.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-168">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-168">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-169">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-169">This member cannot be used by partially trusted code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="BasePriority">
      <MemberSignature Language="C#" Value="public int BasePriority { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BasePriority" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.BasePriority" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BasePriority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BasePriority { int get(); };" />
      <MemberSignature Language="F#" Value="member this.BasePriority : int" Usage="System.Diagnostics.Process.BasePriority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("Base process priority.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessBasePriority")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-170">연결된 프로세스의 기본 우선 순위를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-170">Gets the base priority of the associated process.</span></span></summary>
        <value><span data-ttu-id="67157-171">연결된 프로세스의 <see cref="P:System.Diagnostics.Process.PriorityClass" />에서 계산되는 기본 우선 순위입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-171">The base priority, which is computed from the <see cref="P:System.Diagnostics.Process.PriorityClass" /> of the associated process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-172"><xref:System.Diagnostics.Process.BasePriority%2A> 프로세스는 연결된 된 프로세스 내에서 생성 된 스레드의 우선 순위를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-172">The <xref:System.Diagnostics.Process.BasePriority%2A> of the process is the starting priority for threads created within the associated process.</span></span> <span data-ttu-id="67157-173">시스템 모니터의 기본 우선 순위 카운터를 통해 기본 우선 순위에 대 한 정보를 볼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-173">You can view information about the base priority through the System Monitor's Priority Base counter.</span></span>  
  
 <span data-ttu-id="67157-174">시간을 기준으로 경과 된 또는 기타 상승이, 운영 체제 프로세스를 다른 사용자가 앞에 배치 되어야 하는 경우 기본 우선 순위를 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-174">Based on the time elapsed or other boosts, the operating system can change the base priority when a process should be placed ahead of others.</span></span>  
  
 <span data-ttu-id="67157-175"><xref:System.Diagnostics.Process.BasePriority%2A> 속성을 사용 하면 프로세스에 할당 된 우선 순위를 볼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-175">The <xref:System.Diagnostics.Process.BasePriority%2A> property lets you view the starting priority assigned to a process.</span></span> <span data-ttu-id="67157-176">그러나 읽기 전용 이므로 사용할 수 없습니다는 <xref:System.Diagnostics.Process.BasePriority%2A> 프로세스의 우선 순위를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-176">However, because it is read-only, you cannot use the <xref:System.Diagnostics.Process.BasePriority%2A> to set the priority of the process.</span></span> <span data-ttu-id="67157-177">우선 순위를 변경 하려면 사용 된 <xref:System.Diagnostics.Process.PriorityClass%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-177">To change the priority, use the <xref:System.Diagnostics.Process.PriorityClass%2A> property.</span></span> <span data-ttu-id="67157-178"><xref:System.Diagnostics.Process.BasePriority%2A> 을 볼 수 있습니다 하지만 시스템 모니터를 사용 하는 <xref:System.Diagnostics.Process.PriorityClass%2A> 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="67157-178">The <xref:System.Diagnostics.Process.BasePriority%2A> is viewable using the System Monitor, while the <xref:System.Diagnostics.Process.PriorityClass%2A> is not.</span></span> <span data-ttu-id="67157-179">모두를 <xref:System.Diagnostics.Process.BasePriority%2A> 하며 <xref:System.Diagnostics.Process.PriorityClass%2A> 프로그래밍 방식으로 볼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-179">Both the <xref:System.Diagnostics.Process.BasePriority%2A> and the <xref:System.Diagnostics.Process.PriorityClass%2A> can be viewed programmatically.</span></span> <span data-ttu-id="67157-180">다음 표에서 간의 관계를 보여 줍니다 <xref:System.Diagnostics.Process.BasePriority%2A> 값 및 <xref:System.Diagnostics.Process.PriorityClass%2A> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-180">The following table shows the relationship between <xref:System.Diagnostics.Process.BasePriority%2A> values and <xref:System.Diagnostics.Process.PriorityClass%2A> values.</span></span>  
  
|<span data-ttu-id="67157-181">BasePriority</span><span class="sxs-lookup"><span data-stu-id="67157-181">BasePriority</span></span>|<span data-ttu-id="67157-182">PriorityClass</span><span class="sxs-lookup"><span data-stu-id="67157-182">PriorityClass</span></span>|  
|------------------|-------------------|  
|<span data-ttu-id="67157-183">4</span><span class="sxs-lookup"><span data-stu-id="67157-183">4</span></span>|<xref:System.Diagnostics.ProcessPriorityClass.Idle>|  
|<span data-ttu-id="67157-184">8</span><span class="sxs-lookup"><span data-stu-id="67157-184">8</span></span>|<xref:System.Diagnostics.ProcessPriorityClass.Normal>|  
|<span data-ttu-id="67157-185">13</span><span class="sxs-lookup"><span data-stu-id="67157-185">13</span></span>|<xref:System.Diagnostics.ProcessPriorityClass.High>|  
|<span data-ttu-id="67157-186">24</span><span class="sxs-lookup"><span data-stu-id="67157-186">24</span></span>|<xref:System.Diagnostics.ProcessPriorityClass.RealTime>|  
  
   
  
## Examples  
 <span data-ttu-id="67157-187">다음 예제에서는 메모장의 인스턴스를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-187">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="67157-188">그런 다음 예제에서는 검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-188">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="67157-189">이 예제에서는 프로세스가 종료 하는 경우를 검색 합니다. 프로세스의 종료 코드를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-189">The example detects when the process exits, and displays the process's exit code.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-190">플랫폼이 Windows 98 또는 Windows Millennium Edition(Windows Me)입니다. Windows 98 및 Windows Me에서 이 속성에 액세스하려면 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 속성을 <see langword="false" />로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-190">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set the <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> property to <see langword="false" /> to access this property on Windows 98 and Windows Me.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-191">프로세스가 종료된 경우</span><span class="sxs-lookup"><span data-stu-id="67157-191">The process has exited.</span></span>  
  
<span data-ttu-id="67157-192">또는</span><span class="sxs-lookup"><span data-stu-id="67157-192">-or-</span></span> 
<span data-ttu-id="67157-193">프로세스가 시작되지 않아 프로세스 ID가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-193">The process has not started, so there is no process ID.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-194">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-194">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-195">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-195">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.PriorityClass" />
        <altmember cref="T:System.Diagnostics.ProcessPriorityClass" />
        <altmember cref="T:System.Diagnostics.ThreadPriorityLevel" />
      </Docs>
    </Member>
    <Member MemberName="BeginErrorReadLine">
      <MemberSignature Language="C#" Value="public void BeginErrorReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginErrorReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.BeginErrorReadLine" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginErrorReadLine ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginErrorReadLine();" />
      <MemberSignature Language="F#" Value="member this.BeginErrorReadLine : unit -&gt; unit" Usage="process.BeginErrorReadLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="67157-196">응용 프로그램의 리디렉션된 <see cref="P:System.Diagnostics.Process.StandardError" /> 스트림에 대해 비동기 읽기 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-196">Begins asynchronous read operations on the redirected <see cref="P:System.Diagnostics.Process.StandardError" /> stream of the application.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-197"><xref:System.Diagnostics.Process.StandardError%2A> 동기적 또는 비동기적으로 스트림을 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-197">The <xref:System.Diagnostics.Process.StandardError%2A> stream can be read synchronously or asynchronously.</span></span> <span data-ttu-id="67157-198">와 같은 메서드와 <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>, 및 <xref:System.IO.StreamReader.ReadToEnd%2A> 프로세스의 오류 출력 스트림에서 동기 읽기 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-198">Methods such as <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>, and <xref:System.IO.StreamReader.ReadToEnd%2A> perform synchronous read operations on the error output stream of the process.</span></span> <span data-ttu-id="67157-199">이들 동기 읽기 작업이 연결 될 때까지 완료 되지 않고 <xref:System.Diagnostics.Process> 쓸 해당 <xref:System.Diagnostics.Process.StandardError%2A> 스트리밍하거나 스트림을 닫습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-199">These synchronous read operations do not complete until the associated <xref:System.Diagnostics.Process> writes to its <xref:System.Diagnostics.Process.StandardError%2A> stream, or closes the stream.</span></span>  
  
 <span data-ttu-id="67157-200">반대로 <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> 시작 비동기 읽기 작업에는 <xref:System.Diagnostics.Process.StandardError%2A> 스트림 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-200">In contrast, <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> starts asynchronous read operations on the <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span> <span data-ttu-id="67157-201">이 메서드 스트림 출력에 대 한 지정 된 이벤트 처리기를 사용 하도록 설정 하 고 이벤트 처리기에 스트림을 출력 하는 동안 다른 작업을 수행할 수 있는 호출자에 게 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-201">This method enables the designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.</span></span>  
  
 <span data-ttu-id="67157-202">비동기 읽기 작업을 수행 하려면 다음이 단계를 따릅니다 <xref:System.Diagnostics.Process.StandardError%2A> 에 대 한는 <xref:System.Diagnostics.Process> :</span><span class="sxs-lookup"><span data-stu-id="67157-202">Follow these steps to perform asynchronous read operations on <xref:System.Diagnostics.Process.StandardError%2A> for a <xref:System.Diagnostics.Process> :</span></span>  
  
1.  <span data-ttu-id="67157-203"><xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>를 `false`로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-203">Set <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> to `false`.</span></span>  
  
2.  <span data-ttu-id="67157-204"><xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A>를 `true`로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-204">Set <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A> to `true`.</span></span>  
  
3.  <span data-ttu-id="67157-205">이벤트 처리기를 추가 합니다 <xref:System.Diagnostics.Process.ErrorDataReceived> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-205">Add your event handler to the <xref:System.Diagnostics.Process.ErrorDataReceived> event.</span></span> <span data-ttu-id="67157-206">이벤트 처리기가 일치 해야 합니다 <xref:System.Diagnostics.DataReceivedEventHandler?displayProperty=nameWithType> 대리자 시그니처입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-206">The event handler must match the <xref:System.Diagnostics.DataReceivedEventHandler?displayProperty=nameWithType> delegate signature.</span></span>  
  
4.  <span data-ttu-id="67157-207">시작 된 <xref:System.Diagnostics.Process>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-207">Start the <xref:System.Diagnostics.Process>.</span></span>  
  
5.  <span data-ttu-id="67157-208">호출 <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> 에 대 한는 <xref:System.Diagnostics.Process>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-208">Call <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> for the <xref:System.Diagnostics.Process>.</span></span> <span data-ttu-id="67157-209">이 호출에 비동기 읽기 작업을 시작 <xref:System.Diagnostics.Process.StandardError%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-209">This call starts asynchronous read operations on <xref:System.Diagnostics.Process.StandardError%2A>.</span></span>  
  
 <span data-ttu-id="67157-210">때마다 연결 된 비동기 읽기 작업 시작, 이벤트 처리기가 호출 될 때 <xref:System.Diagnostics.Process> 텍스트 줄을 쓰는 해당 <xref:System.Diagnostics.Process.StandardError%2A> 스트림 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-210">When asynchronous read operations start, the event handler is called each time the associated <xref:System.Diagnostics.Process> writes a line of text to its <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span>  
  
 <span data-ttu-id="67157-211">비동기 읽기 작업을 호출 하 여 취소할 수 있습니다 <xref:System.Diagnostics.Process.CancelErrorRead%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-211">You can cancel an asynchronous read operation by calling <xref:System.Diagnostics.Process.CancelErrorRead%2A>.</span></span> <span data-ttu-id="67157-212">이벤트 처리기 또는 호출자가 읽기 작업을 취소할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-212">The read operation can be canceled by the caller or by the event handler.</span></span> <span data-ttu-id="67157-213">취소 후 호출할 수 있습니다 <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> 비동기 읽기 작업을 다시 시작을 다시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-213">After canceling, you can call <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> again to resume asynchronous read operations.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-214">리디렉션된 스트림에서 동기 및 비동기 읽기 작업을 혼합할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-214">You cannot mix asynchronous and synchronous read operations on a redirected stream.</span></span> <span data-ttu-id="67157-215">한 번 리디렉션된 스트림을 <xref:System.Diagnostics.Process> 열려 비동기 또는 동기 모드에서 모든 이후 읽기 동일한 모드에서 해당 스트림의 작업 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-215">Once the redirected stream of a <xref:System.Diagnostics.Process> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</span></span> <span data-ttu-id="67157-216">예를 들어 따르지 <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> 에 대 한 호출을 사용 하 여 <xref:System.IO.StreamReader.ReadLine%2A> 에 <xref:System.Diagnostics.Process.StandardError%2A> 스트림 또는 그 반대로 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-216">For example, do not follow <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> with a call to <xref:System.IO.StreamReader.ReadLine%2A> on the <xref:System.Diagnostics.Process.StandardError%2A> stream, or vice versa.</span></span> <span data-ttu-id="67157-217">그러나 서로 다른 모드에 두 개의 스트림을 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-217">However, you can read two different streams in different modes.</span></span> <span data-ttu-id="67157-218">예를 들어, 호출할 수 있습니다 <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> 호출 <xref:System.IO.StreamReader.ReadLine%2A> 에 대 한는 <xref:System.Diagnostics.Process.StandardOutput%2A> 스트림 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-218">For example, you can call <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> and then call <xref:System.IO.StreamReader.ReadLine%2A> for the <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-219">다음 예제에서는 `net view` 명령은 원격 컴퓨터에서 사용 가능한 네트워크 리소스를 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-219">The following example uses the `net view` command to list the available network resources on a remote computer.</span></span> <span data-ttu-id="67157-220">사용자를 명령줄 인수 형태로 대상 컴퓨터 이름을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-220">The user supplies the target computer name as a command-line argument.</span></span> <span data-ttu-id="67157-221">사용자 오류 출력에 대 한 파일 이름을 제공할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-221">The user can also supply a file name for error output.</span></span> <span data-ttu-id="67157-222">이 예제에서는 net 명령, 그 다음으로 프로세스가 끝날 때까지 쓰기 출력 결과 콘솔에 대 한 대기 작업의 출력을 수집 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-222">The example collects the output of the net command, waits for the process to finish, and then writes the output results to the console.</span></span> <span data-ttu-id="67157-223">사용자가 선택적 오류 파일을 제공 하는 경우이 예제에서는 파일에 오류를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="67157-223">If the user supplies the optional error file, the example writes errors to the file.</span></span>  
  
 [!code-cpp[Process_AsyncStreams#2](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/net_async.cpp#2)]
 [!code-csharp[Process_AsyncStreams#2](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/net_async.cs#2)]
 [!code-vb[Process_AsyncStreams#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/net_async.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-224"><see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> 속성이 <see langword="false" />일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="67157-224">The <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> property is <see langword="false" />.</span></span>  
  
<span data-ttu-id="67157-225">또는</span><span class="sxs-lookup"><span data-stu-id="67157-225">-or-</span></span> 
<span data-ttu-id="67157-226"><see cref="P:System.Diagnostics.Process.StandardError" /> 스트림에서 비동기 읽기 작업이 이미 진행 중인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-226">An asynchronous read operation is already in progress on the <see cref="P:System.Diagnostics.Process.StandardError" /> stream.</span></span>  
  
<span data-ttu-id="67157-227">또는</span><span class="sxs-lookup"><span data-stu-id="67157-227">-or-</span></span> 
<span data-ttu-id="67157-228"><see cref="P:System.Diagnostics.Process.StandardError" /> 스트림을 동기 읽기 작업에서 사용하는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-228">The <see cref="P:System.Diagnostics.Process.StandardError" /> stream has been used by a synchronous read operation.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-229">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-229">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-230">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-230">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" />
        <altmember cref="P:System.Diagnostics.Process.StandardError" />
        <altmember cref="E:System.Diagnostics.Process.ErrorDataReceived" />
        <altmember cref="T:System.Diagnostics.DataReceivedEventHandler" />
        <altmember cref="M:System.Diagnostics.Process.CancelErrorRead" />
      </Docs>
    </Member>
    <Member MemberName="BeginOutputReadLine">
      <MemberSignature Language="C#" Value="public void BeginOutputReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginOutputReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.BeginOutputReadLine" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginOutputReadLine ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginOutputReadLine();" />
      <MemberSignature Language="F#" Value="member this.BeginOutputReadLine : unit -&gt; unit" Usage="process.BeginOutputReadLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="67157-231">응용 프로그램의 리디렉션된 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 스트림에 대해 비동기 읽기 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-231">Begins asynchronous read operations on the redirected <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream of the application.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-232"><xref:System.Diagnostics.Process.StandardOutput%2A> 동기적 또는 비동기적으로 스트림을 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-232">The <xref:System.Diagnostics.Process.StandardOutput%2A> stream can be read synchronously or asynchronously.</span></span> <span data-ttu-id="67157-233">와 같은 메서드와 <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>, 및 <xref:System.IO.StreamReader.ReadToEnd%2A> 프로세스의 출력 스트림에서 동기 읽기 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-233">Methods such as <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>, and <xref:System.IO.StreamReader.ReadToEnd%2A> perform synchronous read operations on the output stream of the process.</span></span> <span data-ttu-id="67157-234">이들 동기 읽기 작업이 연결 될 때까지 완료 되지 않고 <xref:System.Diagnostics.Process> 쓸 해당 <xref:System.Diagnostics.Process.StandardOutput%2A> 스트리밍하거나 스트림을 닫습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-234">These synchronous read operations do not complete until the associated <xref:System.Diagnostics.Process> writes to its <xref:System.Diagnostics.Process.StandardOutput%2A> stream, or closes the stream.</span></span>  
  
 <span data-ttu-id="67157-235">반대로 <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> 시작 비동기 읽기 작업에는 <xref:System.Diagnostics.Process.StandardOutput%2A> 스트림 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-235">In contrast, <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> starts asynchronous read operations on the <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span> <span data-ttu-id="67157-236">이 메서드는 지정 된 이벤트 처리기가 스트림 출력 하 고 이벤트 처리기에 스트림을 출력 하는 동안 다른 작업을 수행할 수 있는 호출자에 게 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-236">This method enables a designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.</span></span>  
  
 <span data-ttu-id="67157-237">비동기 읽기 작업을 수행 하려면 다음이 단계를 따릅니다 <xref:System.Diagnostics.Process.StandardOutput%2A> 에 대 한는 <xref:System.Diagnostics.Process> :</span><span class="sxs-lookup"><span data-stu-id="67157-237">Follow these steps to perform asynchronous read operations on <xref:System.Diagnostics.Process.StandardOutput%2A> for a <xref:System.Diagnostics.Process> :</span></span>  
  
1.  <span data-ttu-id="67157-238"><xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>를 `false`로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-238">Set <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> to `false`.</span></span>  
  
2.  <span data-ttu-id="67157-239"><xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A>를 `true`로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-239">Set <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A> to `true`.</span></span>  
  
3.  <span data-ttu-id="67157-240">이벤트 처리기를 추가 합니다 <xref:System.Diagnostics.Process.OutputDataReceived> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-240">Add your event handler to the <xref:System.Diagnostics.Process.OutputDataReceived> event.</span></span> <span data-ttu-id="67157-241">이벤트 처리기가 일치 해야 합니다 <xref:System.Diagnostics.DataReceivedEventHandler?displayProperty=nameWithType> 대리자 시그니처입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-241">The event handler must match the <xref:System.Diagnostics.DataReceivedEventHandler?displayProperty=nameWithType> delegate signature.</span></span>  
  
4.  <span data-ttu-id="67157-242">시작 된 <xref:System.Diagnostics.Process>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-242">Start the <xref:System.Diagnostics.Process>.</span></span>  
  
5.  <span data-ttu-id="67157-243">호출 <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> 에 대 한는 <xref:System.Diagnostics.Process>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-243">Call <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> for the <xref:System.Diagnostics.Process>.</span></span> <span data-ttu-id="67157-244">이 호출에 비동기 읽기 작업을 시작 <xref:System.Diagnostics.Process.StandardOutput%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-244">This call starts asynchronous read operations on <xref:System.Diagnostics.Process.StandardOutput%2A>.</span></span>  
  
 <span data-ttu-id="67157-245">때마다 연결 된 비동기 읽기 작업 시작, 이벤트 처리기가 호출 될 때 <xref:System.Diagnostics.Process> 텍스트 줄을 쓰는 해당 <xref:System.Diagnostics.Process.StandardOutput%2A> 스트림 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-245">When asynchronous read operations start, the event handler is called each time the associated <xref:System.Diagnostics.Process> writes a line of text to its <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span>  
  
 <span data-ttu-id="67157-246">비동기 읽기 작업을 호출 하 여 취소할 수 있습니다 <xref:System.Diagnostics.Process.CancelOutputRead%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-246">You can cancel an asynchronous read operation by calling <xref:System.Diagnostics.Process.CancelOutputRead%2A>.</span></span> <span data-ttu-id="67157-247">이벤트 처리기 또는 호출자가 읽기 작업을 취소할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-247">The read operation can be canceled by the caller or by the event handler.</span></span> <span data-ttu-id="67157-248">취소 후 호출할 수 있습니다 <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> 비동기 읽기 작업을 다시 시작을 다시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-248">After canceling, you can call <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> again to resume asynchronous read operations.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-249">리디렉션된 스트림에서 동기 및 비동기 읽기 작업을 혼합할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-249">You cannot mix asynchronous and synchronous read operations on a redirected stream.</span></span> <span data-ttu-id="67157-250">한 번 리디렉션된 스트림을 <xref:System.Diagnostics.Process> 열려 비동기 또는 동기 모드에서 모든 이후 읽기 동일한 모드에서 해당 스트림의 작업 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-250">Once the redirected stream of a <xref:System.Diagnostics.Process> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</span></span> <span data-ttu-id="67157-251">예를 들어 따르지 <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> 에 대 한 호출을 사용 하 여 <xref:System.IO.StreamReader.ReadLine%2A> 에 <xref:System.Diagnostics.Process.StandardOutput%2A> 스트림 또는 그 반대로 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-251">For example, do not follow <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> with a call to <xref:System.IO.StreamReader.ReadLine%2A> on the <xref:System.Diagnostics.Process.StandardOutput%2A> stream, or vice versa.</span></span> <span data-ttu-id="67157-252">그러나 서로 다른 모드에 두 개의 스트림을 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-252">However, you can read two different streams in different modes.</span></span> <span data-ttu-id="67157-253">예를 들어, 호출할 수 있습니다 <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> 호출 <xref:System.IO.StreamReader.ReadLine%2A> 에 대 한는 <xref:System.Diagnostics.Process.StandardError%2A> 스트림 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-253">For example, you can call <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> and then call <xref:System.IO.StreamReader.ReadLine%2A> for the <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-254">다음 예제에서는 리디렉션된에 대해 비동기 읽기 작업을 수행 하는 방법을 보여 줍니다 <xref:System.Diagnostics.Process.StandardOutput%2A> 스트림의 `sort` 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-254">The following example illustrates how to perform asynchronous read operations on the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream of the `sort` command.</span></span> <span data-ttu-id="67157-255">`sort` 명령 읽고 텍스트 입력을 정렬 하는 콘솔 응용 프로그램입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-255">The `sort` command is a console application that reads and sorts text input.</span></span>  
  
 <span data-ttu-id="67157-256">예제에 대 한 이벤트 대리자를 만듭니다는 `SortOutputHandler` 이벤트 처리기에 연결 된 <xref:System.Diagnostics.Process.OutputDataReceived> 이벤트.</span><span class="sxs-lookup"><span data-stu-id="67157-256">The example creates an event delegate for the `SortOutputHandler` event handler and associates it with the <xref:System.Diagnostics.Process.OutputDataReceived> event.</span></span> <span data-ttu-id="67157-257">이벤트 처리기에서 리디렉션된 텍스트 줄을 받아서 <xref:System.Diagnostics.Process.StandardOutput%2A> 스트림에 텍스트의 서식을 지정 하 고 화면에 텍스트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="67157-257">The event handler receives text lines from the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream, formats the text, and writes the text to the screen.</span></span>  
  
 [!code-cpp[Process_AsyncStreams#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/sort_async.cpp#1)]
 [!code-csharp[Process_AsyncStreams#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/sort_async.cs#1)]
 [!code-vb[Process_AsyncStreams#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/sort_async.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-258"><see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /> 속성이 <see langword="false" />일 경우(이 속성은</span><span class="sxs-lookup"><span data-stu-id="67157-258">The <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /> property is <see langword="false" />.</span></span>  
  
<span data-ttu-id="67157-259">또는</span><span class="sxs-lookup"><span data-stu-id="67157-259">-or-</span></span> 
<span data-ttu-id="67157-260"><see cref="P:System.Diagnostics.Process.StandardOutput" /> 스트림에서 비동기 읽기 작업이 이미 진행 중인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-260">An asynchronous read operation is already in progress on the <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream.</span></span>  
  
<span data-ttu-id="67157-261">또는</span><span class="sxs-lookup"><span data-stu-id="67157-261">-or-</span></span> 
<span data-ttu-id="67157-262"><see cref="P:System.Diagnostics.Process.StandardOutput" /> 스트림을 동기 읽기 작업에서 사용하는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-262">The <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream has been used by a synchronous read operation.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-263">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-263">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-264">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-264">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" />
        <altmember cref="P:System.Diagnostics.Process.StandardOutput" />
        <altmember cref="E:System.Diagnostics.Process.OutputDataReceived" />
        <altmember cref="T:System.Diagnostics.DataReceivedEventHandler" />
        <altmember cref="M:System.Diagnostics.Process.CancelOutputRead" />
      </Docs>
    </Member>
    <Member MemberName="CancelErrorRead">
      <MemberSignature Language="C#" Value="public void CancelErrorRead ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelErrorRead() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.CancelErrorRead" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelErrorRead ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelErrorRead();" />
      <MemberSignature Language="F#" Value="member this.CancelErrorRead : unit -&gt; unit" Usage="process.CancelErrorRead " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="67157-265">응용 프로그램의 리디렉션된 <see cref="P:System.Diagnostics.Process.StandardError" /> 스트림에 대해 비동기 읽기 작업을 취소합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-265">Cancels the asynchronous read operation on the redirected <see cref="P:System.Diagnostics.Process.StandardError" /> stream of an application.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-266"><xref:System.Diagnostics.Process.BeginErrorReadLine%2A> 비동기 읽기 작업이 시작 된 <xref:System.Diagnostics.Process.StandardError%2A> 스트림 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-266"><xref:System.Diagnostics.Process.BeginErrorReadLine%2A> starts an asynchronous read operation on the <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span> <span data-ttu-id="67157-267"><xref:System.Diagnostics.Process.CancelErrorRead%2A> end 비동기 읽기 작업.</span><span class="sxs-lookup"><span data-stu-id="67157-267"><xref:System.Diagnostics.Process.CancelErrorRead%2A> ends the asynchronous read operation.</span></span>  
  
 <span data-ttu-id="67157-268">취소 후 호출 하 여 비동기 읽기 작업을 재개할 수 있습니다 <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> 다시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-268">After canceling, you can resume the asynchronous read operation by calling <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> again.</span></span>  
  
 <span data-ttu-id="67157-269">호출 하는 경우 <xref:System.Diagnostics.Process.CancelErrorRead%2A>모든 진행 중인 읽기 작업에 대 한 <xref:System.Diagnostics.Process.StandardError%2A> 완료 된 다음 이벤트 처리기에는 사용할 수 없게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-269">When you call <xref:System.Diagnostics.Process.CancelErrorRead%2A>, all in-progress read operations for <xref:System.Diagnostics.Process.StandardError%2A> are completed and then the event handler is disabled.</span></span> <span data-ttu-id="67157-270">모든 추가 리디렉션된 출력 <xref:System.Diagnostics.Process.StandardError%2A> 손실 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-270">All further redirected output to <xref:System.Diagnostics.Process.StandardError%2A> will be lost.</span></span> <span data-ttu-id="67157-271">호출 하 여 이벤트 처리기를 다시 사용 하는 경우 <xref:System.Diagnostics.Process.BeginErrorReadLine%2A>비동기 읽기 작업이 다시 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-271">If you re-enable the event handler with a call to <xref:System.Diagnostics.Process.BeginErrorReadLine%2A>, asynchronous read operations resume.</span></span> <span data-ttu-id="67157-272">비동기 읽기 작업을 다시 시작 하기 전에 이벤트 처리기를 변경 하려는 경우에 새 이벤트 처리기를 추가 하기 전에 기존 이벤트 처리기를 제거 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-272">If you want to change the event handler before resuming asynchronous read operations, you must remove the existing event handler before adding the new event handler:</span></span>  
  
```csharp  
// At this point the DataReceivedEventHandler(ErrorHandler1)   
// has executed a CancelErrorRead.  
  
// Remove the prior event handler.  
process.ErrorDataReceived -=   
    new DataReceivedEventHandler(ErrorHandler1);  
  
// Register a new event handler.  
process.ErrorDataReceived +=   
    new DataReceivedEventHandler(ErrorHandler2);  
  
// Call the corresponding BeginErrorReadLine.  
process.BeginErrorReadLine();  
```  
  
> [!NOTE]
>  <span data-ttu-id="67157-273">리디렉션된에서 비동기 및 동기 읽기 작업을 혼합할 수 없습니다 <xref:System.Diagnostics.Process.StandardError%2A> 스트림 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-273">You cannot mix asynchronous and synchronous read operations on the redirected <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span> <span data-ttu-id="67157-274">한 번 리디렉션된 스트림을 <xref:System.Diagnostics.Process> 열려 비동기 또는 동기 모드에서 모든 이후 읽기 동일한 모드에서 해당 스트림의 작업 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-274">Once the redirected stream of a <xref:System.Diagnostics.Process> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</span></span> <span data-ttu-id="67157-275">취소 하면 비동기 읽기 작업에서 <xref:System.Diagnostics.Process.StandardError%2A> 를 사용 해야 다시 스트림에서 읽을 필요가 <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> 비동기 읽기 작업을 재개 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-275">If you cancel an asynchronous read operation on <xref:System.Diagnostics.Process.StandardError%2A> and then need to read from the stream again, you must use <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> to resume asynchronous read operations.</span></span> <span data-ttu-id="67157-276">따르지 <xref:System.Diagnostics.Process.CancelErrorRead%2A> 동기 호출의 메서드를 읽을 <xref:System.Diagnostics.Process.StandardError%2A> 와 같은 <xref:System.IO.StreamReader.Read%2A>를 <xref:System.IO.StreamReader.ReadLine%2A>, 또는 <xref:System.IO.StreamReader.ReadToEnd%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-276">Do not follow <xref:System.Diagnostics.Process.CancelErrorRead%2A> with a call to the synchronous read methods of <xref:System.Diagnostics.Process.StandardError%2A> such as <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>, or <xref:System.IO.StreamReader.ReadToEnd%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-277">다음 예에서는 시작을 `nmake` 사용자를 사용 하 여 명령 인수를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-277">The following example starts the `nmake` command with user supplied arguments.</span></span> <span data-ttu-id="67157-278">오류 및 출력 스트림은 읽기가 비동기적으로; 수집 된 텍스트 줄은 콘솔에 표시 뿐만 아니라 로그 파일에 기록 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-278">The error and output streams are read asynchronously; the collected text lines are displayed to the console as well as written to a log file.</span></span> <span data-ttu-id="67157-279">명령 출력은 지정 된 개수의 줄을 초과 하는 경우 비동기 읽기 작업이 취소 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-279">If the command output exceeds a specified number of lines, the asynchronous read operations are canceled.</span></span>  
  
 [!code-cpp[Process_AsyncStreams#3](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/nmake_async.cpp#3)]
 [!code-csharp[Process_AsyncStreams#3](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/nmake_async.cs#3)]
 [!code-vb[Process_AsyncStreams#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/nmake_async.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-280"><see cref="P:System.Diagnostics.Process.StandardError" /> 스트림이 비동기 읽기 작업에 대해 사용되지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-280">The <see cref="P:System.Diagnostics.Process.StandardError" /> stream is not enabled for asynchronous read operations.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-281">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-281">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-282">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-282">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.Diagnostics.Process.BeginErrorReadLine" />
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" />
        <altmember cref="P:System.Diagnostics.Process.StandardError" />
        <altmember cref="E:System.Diagnostics.Process.ErrorDataReceived" />
        <altmember cref="T:System.Diagnostics.DataReceivedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="CancelOutputRead">
      <MemberSignature Language="C#" Value="public void CancelOutputRead ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelOutputRead() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.CancelOutputRead" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelOutputRead ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelOutputRead();" />
      <MemberSignature Language="F#" Value="member this.CancelOutputRead : unit -&gt; unit" Usage="process.CancelOutputRead " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="67157-283">응용 프로그램의 리디렉션된 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 스트림에 대해 비동기 읽기 작업을 취소합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-283">Cancels the asynchronous read operation on the redirected <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream of an application.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-284"><xref:System.Diagnostics.Process.BeginOutputReadLine%2A> 비동기 읽기 작업이 시작 된 <xref:System.Diagnostics.Process.StandardOutput%2A> 스트림 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-284"><xref:System.Diagnostics.Process.BeginOutputReadLine%2A> starts an asynchronous read operation on the <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span> <span data-ttu-id="67157-285"><xref:System.Diagnostics.Process.CancelOutputRead%2A> end 비동기 읽기 작업.</span><span class="sxs-lookup"><span data-stu-id="67157-285"><xref:System.Diagnostics.Process.CancelOutputRead%2A> ends the asynchronous read operation.</span></span>  
  
 <span data-ttu-id="67157-286">취소 후 다시 시작할 수 있습니다 비동기 읽기 작업을 호출 하 여 <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> 다시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-286">After canceling, you can resume asynchronous read operations by calling <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> again.</span></span>  
  
 <span data-ttu-id="67157-287">호출 하는 경우 <xref:System.Diagnostics.Process.CancelOutputRead%2A>모든 진행 중인 읽기 작업에 대 한 <xref:System.Diagnostics.Process.StandardOutput%2A> 완료 된 다음 이벤트 처리기에는 사용할 수 없게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-287">When you call <xref:System.Diagnostics.Process.CancelOutputRead%2A>, all in-progress read operations for <xref:System.Diagnostics.Process.StandardOutput%2A> are completed and then the event handler is disabled.</span></span> <span data-ttu-id="67157-288">모든 추가 리디렉션된 출력 <xref:System.Diagnostics.Process.StandardOutput%2A> 버퍼에 저장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-288">All further redirected output to <xref:System.Diagnostics.Process.StandardOutput%2A> is saved in a buffer.</span></span> <span data-ttu-id="67157-289">호출 하 여 이벤트 처리기를 다시 사용 하는 경우 <xref:System.Diagnostics.Process.BeginOutputReadLine%2A>, 저장 된 출력은 이벤트 처리기로 전송 및 비동기 읽기 작업을 다시 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-289">If you re-enable the event handler with a call to <xref:System.Diagnostics.Process.BeginOutputReadLine%2A>, the saved output is sent to the event handler and asynchronous read operations resume.</span></span> <span data-ttu-id="67157-290">비동기 읽기 작업을 다시 시작 하기 전에 이벤트 처리기를 변경 하려는 경우에 새 이벤트 처리기를 추가 하기 전에 기존 이벤트 처리기를 제거 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-290">If you want to change the event handler before resuming asynchronous read operations, you must remove the existing event handler before adding the new event handler:</span></span>  
  
```csharp  
// At this point the DataReceivedEventHandler(OutputHandler1)   
// has executed a CancelOutputRead.  
  
// Remove the prior event handler.  
process.OutputDataReceived -=   
    new DataReceivedEventHandler(OutputHandler1);  
  
// Register a new event handler.  
process.OutputDataReceived +=   
    new DataReceivedEventHandler(OutputHandler2);  
  
// Call the corresponding BeginOutputReadLine.  
process.BeginOutputReadLine();  
```  
  
> [!NOTE]
>  <span data-ttu-id="67157-291">리디렉션된에서 비동기 및 동기 읽기 작업을 혼합할 수 없습니다 <xref:System.Diagnostics.Process.StandardOutput%2A> 스트림 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-291">You cannot mix asynchronous and synchronous read operations on the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span> <span data-ttu-id="67157-292">한 번 리디렉션된 스트림을 <xref:System.Diagnostics.Process> 열려 비동기 또는 동기 모드에서 모든 이후 읽기 동일한 모드에서 해당 스트림의 작업 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-292">Once the redirected stream of a <xref:System.Diagnostics.Process> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</span></span> <span data-ttu-id="67157-293">취소 하면 비동기 읽기 작업에서 <xref:System.Diagnostics.Process.StandardOutput%2A> 를 사용 해야 다시 스트림에서 읽을 필요가 <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> 비동기 읽기 작업을 재개 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-293">If you cancel an asynchronous read operation on <xref:System.Diagnostics.Process.StandardOutput%2A> and then need to read from the stream again, you must use <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> to resume asynchronous read operations.</span></span> <span data-ttu-id="67157-294">따르지 <xref:System.Diagnostics.Process.CancelOutputRead%2A> 동기 호출의 메서드를 읽을 <xref:System.Diagnostics.Process.StandardOutput%2A> 와 같은 <xref:System.IO.StreamReader.Read%2A>를 <xref:System.IO.StreamReader.ReadLine%2A>, 또는 <xref:System.IO.StreamReader.ReadToEnd%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-294">Do not follow <xref:System.Diagnostics.Process.CancelOutputRead%2A> with a call to the synchronous read methods of <xref:System.Diagnostics.Process.StandardOutput%2A> such as <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>, or <xref:System.IO.StreamReader.ReadToEnd%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-295">다음 예에서는 시작을 `nmake` 사용자를 사용 하 여 명령 인수를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-295">The following example starts the `nmake` command with user supplied arguments.</span></span> <span data-ttu-id="67157-296">오류 및 출력 스트림은 읽기가 비동기적으로; 수집 된 텍스트 줄은 콘솔에 표시 뿐만 아니라 로그 파일에 기록 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-296">The error and output streams are read asynchronously; the collected text lines are displayed to the console as well as written to a log file.</span></span> <span data-ttu-id="67157-297">명령 출력은 지정 된 개수의 줄을 초과 하는 경우 비동기 읽기 작업이 취소 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-297">If the command output exceeds a specified number of lines, the asynchronous read operations are canceled.</span></span>  
  
 [!code-cpp[Process_AsyncStreams#3](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/nmake_async.cpp#3)]
 [!code-csharp[Process_AsyncStreams#3](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/nmake_async.cs#3)]
 [!code-vb[Process_AsyncStreams#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/nmake_async.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-298"><see cref="P:System.Diagnostics.Process.StandardOutput" /> 스트림이 비동기 읽기 작업에 대해 사용되지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-298">The <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream is not enabled for asynchronous read operations.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-299">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-299">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-300">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-300">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.Diagnostics.Process.BeginOutputReadLine" />
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" />
        <altmember cref="P:System.Diagnostics.Process.StandardOutput" />
        <altmember cref="E:System.Diagnostics.Process.OutputDataReceived" />
        <altmember cref="T:System.Diagnostics.DataReceivedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="process.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="67157-301">해당 구성 요소에 연결된 리소스를 모두 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-301">Frees all the resources that are associated with this component.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-302"><xref:System.Diagnostics.Process.Close%2A> 메서드 exit, 대기 프로세스 핸들을 닫고 및 프로세스 관련 속성을 지웁니다에 대 한 대기를 중지 하는 프로세스를 사용 하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-302">The <xref:System.Diagnostics.Process.Close%2A> method causes the process to stop waiting for exit if it was waiting, closes the process handle, and clears process-specific properties.</span></span> <span data-ttu-id="67157-303"><xref:System.Diagnostics.Process.Close%2A> 닫지 않습니다 표준 출력과 입력 오류 판독기 및 작성기 외부에서 참조 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="67157-303"><xref:System.Diagnostics.Process.Close%2A> does not close the standard output, input, and error readers and writers in case they are being referenced externally.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-304"><xref:System.Diagnostics.Process.Dispose%2A> 메서드는 <xref:System.Diagnostics.Process.Close%2A>를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-304">The <xref:System.Diagnostics.Process.Dispose%2A> method calls <xref:System.Diagnostics.Process.Close%2A>.</span></span> <span data-ttu-id="67157-305">배치 된 <xref:System.Diagnostics.Process> 개체를 `using` 블록 호출 하지 않고도 리소스를 삭제 <xref:System.Diagnostics.Process.Close%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-305">Placing the <xref:System.Diagnostics.Process> object in a `using` block disposes of resources without the need to call <xref:System.Diagnostics.Process.Close%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-306">다음 예제에서는 메모장의 인스턴스를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-306">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="67157-307">그런 다음 10 초 동안 최대 2 초 간격으로 연결된 된 프로세스의 실제 메모리 사용량을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-307">It then retrieves the physical memory usage of the associated process at 2-second intervals for a maximum of 10 seconds.</span></span> <span data-ttu-id="67157-308">이 예제에서는 10 초 경과 되기 전에 프로세스가 종료 여부를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-308">The example detects whether the process exits before 10 seconds have elapsed.</span></span> <span data-ttu-id="67157-309">이 예제에서는 10 초 후 실행 중인 경우 프로세스를 닫습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-309">The example closes the process if it is still running after 10 seconds.</span></span>  
  
 [!code-cpp[process_refresh#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_refresh/CPP/process_refresh.cpp#1)]
 [!code-csharp[process_refresh#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_refresh/CS/process_refresh.cs#1)]
 [!code-vb[process_refresh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_refresh/VB/process_refresh.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-310">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-310">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-311">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-311">This member cannot be used by partially trusted code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CloseMainWindow">
      <MemberSignature Language="C#" Value="public bool CloseMainWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CloseMainWindow() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.CloseMainWindow" />
      <MemberSignature Language="VB.NET" Value="Public Function CloseMainWindow () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CloseMainWindow();" />
      <MemberSignature Language="F#" Value="member this.CloseMainWindow : unit -&gt; bool" Usage="process.CloseMainWindow " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="67157-312">주 창에 닫기 메시지를 보내 사용자 인터페이스가 있는 프로세스를 닫습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-312">Closes a process that has a user interface by sending a close message to its main window.</span></span></summary>
        <returns><span data-ttu-id="67157-313">닫기 메시지를 성공적으로 보낸 경우에는 <see langword="true" />이고 연결된 프로세스에 주 창이 없거나 모달 대화 상자가 표시된 때 같이 주 창을 사용할 수 없는 경우에는 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-313"><see langword="true" /> if the close message was successfully sent; <see langword="false" /> if the associated process does not have a main window or if the main window is disabled (for example if a modal dialog is being shown).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-314">프로세스를 실행할 때 해당 메시지 루프는 대기 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-314">When a process is executing, its message loop is in a wait state.</span></span> <span data-ttu-id="67157-315">운영 체제에서 프로세스에 Windows 메시지를 보낼 때마다 메시지 루프를 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-315">The message loop executes every time a Windows message is sent to the process by the operating system.</span></span> <span data-ttu-id="67157-316">호출 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 는 잘 구성 된 응용 프로그램에서 자식 창을 닫고 응용 프로그램에 대 한 실행 중인 모든 메시지 루프를 취소 주 창에 가까운 요청을 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="67157-316">Calling <xref:System.Diagnostics.Process.CloseMainWindow%2A> sends a request to close to the main window, which, in a well-formed application, closes child windows and revokes all running message loops for the application.</span></span> <span data-ttu-id="67157-317">호출 하 여 프로세스를 종료 하는 요청 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 종료 하도록 응용 프로그램을 강제 적용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-317">The request to exit the process by calling <xref:System.Diagnostics.Process.CloseMainWindow%2A> does not force the application to quit.</span></span> <span data-ttu-id="67157-318">응용 프로그램을 끝내기 전에 사용자 확인 요청 또는 종료를 거부할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-318">The application can ask for user verification before quitting, or it can refuse to quit.</span></span> <span data-ttu-id="67157-319">종료 하도록 응용 프로그램을 강제로 사용 하 여를 <xref:System.Diagnostics.Process.Kill%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="67157-319">To force the application to quit, use the <xref:System.Diagnostics.Process.Kill%2A> method.</span></span> <span data-ttu-id="67157-320">동작 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 시스템 메뉴를 사용 하 여 응용 프로그램의 주 창을 닫으면 사용자와 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-320">The behavior of <xref:System.Diagnostics.Process.CloseMainWindow%2A> is identical to that of a user closing an application's main window using the system menu.</span></span> <span data-ttu-id="67157-321">따라서 주 창을 닫으면 프로세스를 종료 하는 요청은 즉시 취소 하려면 응용 프로그램을 강제로 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-321">Therefore, the request to exit the process by closing the main window does not force the application to quit immediately.</span></span>  
  
 <span data-ttu-id="67157-322">프로세스에 의해 편집 하는 데이터 또는 프로세스에 할당 된 리소스 손실 될 수 있습니다를 호출 하면 <xref:System.Diagnostics.Process.Kill%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-322">Data edited by the process or resources allocated to the process can be lost if you call <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="67157-323"><xref:System.Diagnostics.Process.Kill%2A> 비정상적인 프로세스 종료를 사용 하면 필요한 경우에 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-323"><xref:System.Diagnostics.Process.Kill%2A> causes an abnormal process termination, and should be used only when necessary.</span></span> <span data-ttu-id="67157-324"><xref:System.Diagnostics.Process.CloseMainWindow%2A> 과정을 순서 대로 종료 있으며 인터페이스를 사용 하 여 응용 프로그램에 대 한 것이 좋습니다 이므로 모든 창을 닫습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-324"><xref:System.Diagnostics.Process.CloseMainWindow%2A> enables an orderly termination of the process and closes all windows, so it is preferable for applications with an interface.</span></span> <span data-ttu-id="67157-325">하는 경우 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 사용할 수 있습니다 실패 <xref:System.Diagnostics.Process.Kill%2A> 프로세스를 종료 하려면.</span><span class="sxs-lookup"><span data-stu-id="67157-325">If <xref:System.Diagnostics.Process.CloseMainWindow%2A> fails, you can use <xref:System.Diagnostics.Process.Kill%2A> to terminate the process.</span></span> <span data-ttu-id="67157-326"><xref:System.Diagnostics.Process.Kill%2A> 그래픽 인터페이스를 갖지 않는 프로세스를 종료 하는 유일한 방법이입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-326"><xref:System.Diagnostics.Process.Kill%2A> is the only way to terminate processes that do not have graphical interfaces.</span></span>  
  
 <span data-ttu-id="67157-327">호출할 수 있습니다 <xref:System.Diagnostics.Process.Kill%2A> 고 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 로컬 컴퓨터에서 실행 중인 프로세스에 대해서만 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-327">You can call <xref:System.Diagnostics.Process.Kill%2A> and <xref:System.Diagnostics.Process.CloseMainWindow%2A> only for processes that are running on the local computer.</span></span> <span data-ttu-id="67157-328">종료 하려면 원격 컴퓨터에서 프로세스 할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-328">You cannot cause processes on remote computers to exit.</span></span> <span data-ttu-id="67157-329">원격 컴퓨터에서 실행 중인 프로세스에 대 한 정보를 보기만 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-329">You can only view information for processes running on remote computers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-330">다음 예제에서는 메모장의 인스턴스를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-330">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="67157-331">그런 다음 10 초 동안 최대 2 초 간격 연결된 된 프로세스의 실제 메모리 사용량을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-331">It then retrieves the physical memory usage of the associated process at 2 second intervals for a maximum of 10 seconds.</span></span> <span data-ttu-id="67157-332">이 예제에서는 10 초 경과 되기 전에 프로세스가 종료 여부를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-332">The example detects whether the process exits before 10 seconds have elapsed.</span></span> <span data-ttu-id="67157-333">이 예제에서는 10 초 후 실행 중인 경우 프로세스를 닫습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-333">The example closes the process if it is still running after 10 seconds.</span></span>  
  
 [!code-cpp[process_refresh#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_refresh/CPP/process_refresh.cpp#1)]
 [!code-csharp[process_refresh#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_refresh/CS/process_refresh.cs#1)]
 [!code-vb[process_refresh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_refresh/VB/process_refresh.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-334">플랫폼이 Windows 98 또는 Windows Millennium Edition(Windows Me)입니다. Windows 98 및 Windows Me에서 이 속성에 액세스하려면 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 속성을 <see langword="false" />로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-334">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set the <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> property to <see langword="false" /> to access this property on Windows 98 and Windows Me.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-335">프로세스가 이미 종료되었습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-335">The process has already exited.</span></span>  
  
<span data-ttu-id="67157-336">또는</span><span class="sxs-lookup"><span data-stu-id="67157-336">-or-</span></span> 
<span data-ttu-id="67157-337">이 <see cref="T:System.Diagnostics.Process" /> 개체에 연결된 프로세스가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-337">No process is associated with this <see cref="T:System.Diagnostics.Process" /> object.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-338">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-338">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-339">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-339">This member cannot be used by partially trusted code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="process.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="process.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="67157-340">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-340"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="67157-341">해당 프로세스에서 사용하는 리소스를 모두 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-341">Release all resources used by this process.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableRaisingEvents">
      <MemberSignature Language="C#" Value="public bool EnableRaisingEvents { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableRaisingEvents" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.EnableRaisingEvents" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableRaisingEvents As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableRaisingEvents { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableRaisingEvents : bool with get, set" Usage="System.Diagnostics.Process.EnableRaisingEvents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("Whether the process component should watch for the associated process to exit, and raise the Exited event.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessEnableRaisingEvents")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-342">프로세스가 종료될 때 <see cref="E:System.Diagnostics.Process.Exited" /> 이벤트를 발생시켜야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-342">Gets or sets whether the <see cref="E:System.Diagnostics.Process.Exited" /> event should be raised when the process terminates.</span></span></summary>
        <value><span data-ttu-id="67157-343">종료 명령 또는 <see cref="E:System.Diagnostics.Process.Exited" /> 호출을 통해 연결된 프로세스가 종료될 때 <see cref="M:System.Diagnostics.Process.Kill" /> 이벤트가 발생해야 한다면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-343"><see langword="true" /> if the <see cref="E:System.Diagnostics.Process.Exited" /> event should be raised when the associated process is terminated (through either an exit or a call to <see cref="M:System.Diagnostics.Process.Kill" />); otherwise, <see langword="false" />.</span></span> <span data-ttu-id="67157-344">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-344">The default is <see langword="false" />.</span></span> <span data-ttu-id="67157-345"><see cref="E:System.Diagnostics.Process.Exited" /> 이벤트는 경우에 값 <see cref="P:System.Diagnostics.Process.EnableRaisingEvents" /> 는 <see langword="false" /> 중 프로세스가 종료 될 때 또는 사용자가 연산을 수행 하기 전에 <see cref="P:System.Diagnostics.Process.HasExited" /> 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-345">Note that the <see cref="E:System.Diagnostics.Process.Exited" /> event is raised even if the value of <see cref="P:System.Diagnostics.Process.EnableRaisingEvents" /> is <see langword="false" /> when the process exits during or before the user performs a <see cref="P:System.Diagnostics.Process.HasExited" /> check.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="67157-346"><xref:System.Diagnostics.Process.EnableRaisingEvents%2A> 속성 운영 체제 프로세스를 종료 하는 경우 구성 요소 알림을 받을지 여부를 제안 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-346">The <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> property suggests whether the component should be notified when the operating system has shut down a process.</span></span> <span data-ttu-id="67157-347"><xref:System.Diagnostics.Process.EnableRaisingEvents%2A> 프로세스를 종료 하는 응용 프로그램에 알리기 위해 속성은 비동기 처리에 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-347">The <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> property is used in asynchronous processing to notify your application that a process has exited.</span></span> <span data-ttu-id="67157-348">강제 종료 이벤트 (종료 이벤트가 발생 될 때까지 응용 프로그램의 프로세스를 중단)에 대 한 동기적으로 대기 하는 응용 프로그램을 사용 하는 <xref:System.Diagnostics.Process.WaitForExit%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="67157-348">To force your application to synchronously wait for an exit event (which interrupts processing of the application until the exit event has occurred), use the <xref:System.Diagnostics.Process.WaitForExit%2A> method.</span></span>

> [!NOTE]
> <span data-ttu-id="67157-349">Visual Studio를 사용 중이 고 두 번 클릭 하는 경우는 <xref:System.Diagnostics.Process> 프로젝트에서 구성 요소는 <xref:System.Diagnostics.Process.Exited> 이벤트 대리자 및 이벤트 처리기는 자동으로 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-349">If you're using Visual Studio and double-click a <xref:System.Diagnostics.Process> component in your project, an <xref:System.Diagnostics.Process.Exited> event delegate and event handler are automatically generated.</span></span> <span data-ttu-id="67157-350">추가 코드 집합을 <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> 속성을 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-350">Additional code sets the <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> property to `false`.</span></span> <span data-ttu-id="67157-351">이 속성을 변경 해야 `true` 때 실행할 이벤트 처리기에 대 한 연결된 된 프로세스가 종료 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-351">You must change this property to `true` for your event handler to execute when the associated process exits.</span></span>

<span data-ttu-id="67157-352">경우 구성 요소의 <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> 값이 `true`, 때나 <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> 됩니다 `false` 및 <xref:System.Diagnostics.Process.HasExited%2A> 검사 구성 요소에 의해 호출 되 면 구성 요소는 상태로 남아 있는 연결된 된 프로세스에 대 한 관리 정보에 액세스할 수 운영 체제에 의해 저장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-352">If the component's <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> value is `true`, or when <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> is `false` and a <xref:System.Diagnostics.Process.HasExited%2A> check is invoked by the component, the component can access the administrative information for the associated process, which remains stored by the operating system.</span></span> <span data-ttu-id="67157-353">이러한 정보를 포함 합니다 <xref:System.Diagnostics.Process.ExitTime%2A> 및 <xref:System.Diagnostics.Process.ExitCode%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-353">Such information includes the <xref:System.Diagnostics.Process.ExitTime%2A> and the <xref:System.Diagnostics.Process.ExitCode%2A>.</span></span>

<span data-ttu-id="67157-354">연결 된 프로세스가 종료 된 후, <xref:System.Diagnostics.Process.Handle%2A> 요소의 더 이상 기존 프로세스 리소스를 가리킵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-354">After the associated process exits, the <xref:System.Diagnostics.Process.Handle%2A> of the component no longer points to an existing process resource.</span></span> <span data-ttu-id="67157-355">대신,만 사용할 수 프로세스 리소스에 대 한 운영 체제의 정보에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-355">Instead, it can only be used to access the operating system's information about the process resource.</span></span> <span data-ttu-id="67157-356">운영 체제가 있다는 사실을 인식 하 여 릴리스된 아직 종료 된 프로세스에 대 한 핸들 <xref:System.Diagnostics.Process> 구성 요소를 유지할 수 있도록 합니다 <xref:System.Diagnostics.Process.ExitTime%2A> 및 <xref:System.Diagnostics.Process.Handle%2A> 메모리에 대 한 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-356">The operating system is aware that there are handles to exited processes that haven't been released by <xref:System.Diagnostics.Process> components, so it keeps the <xref:System.Diagnostics.Process.ExitTime%2A> and <xref:System.Diagnostics.Process.Handle%2A> information in memory.</span></span>

<span data-ttu-id="67157-357">종료 하는 프로세스에 대 한 감시 하는 비용이 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-357">There's a cost associated with watching for a process to exit.</span></span> <span data-ttu-id="67157-358">하는 경우 <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> 됩니다 `true`는 <xref:System.Diagnostics.Process.Exited> 연결된 된 프로세스가 종료 될 때 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-358">If <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> is `true`, the <xref:System.Diagnostics.Process.Exited> event is raised when the associated process terminates.</span></span> <span data-ttu-id="67157-359">에 대 한 프로시저는 <xref:System.Diagnostics.Process.Exited> 해당 시간에 실행 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-359">Your procedures for the <xref:System.Diagnostics.Process.Exited> event run at that time.</span></span>

<span data-ttu-id="67157-360">경우에 따라 응용 프로그램 프로세스를 시작 하지만 종료 되는 알림이 필요 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-360">Sometimes, your application starts a process but doesn't require notification of its closure.</span></span> <span data-ttu-id="67157-361">예를 들어, 응용 프로그램 사용자가 텍스트 편집을 수행 하지만 더 이상 하 게 메모장 응용 프로그램을 사용 하도록 허용 하려면 메모장을 시작 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-361">For example, your application can start Notepad to allow the user to perform text editing but make no further use of the Notepad application.</span></span> <span data-ttu-id="67157-362">응용 프로그램의 지속적인된 작업에 관련 되지 않기 때문에 프로세스가 종료 될 때 알림을 방지할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-362">You can choose to avoid notification when the process exits because it's not relevant to the continued operation of your application.</span></span> <span data-ttu-id="67157-363">설정 <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> 에 `false` 시스템 리소스를 저장할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-363">Setting <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> to `false` can save system resources.</span></span>

## Examples  
<span data-ttu-id="67157-364">다음 코드 예제에서는 파일을 인쇄 하는 프로세스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="67157-364">The following code example creates a process that prints a file.</span></span> <span data-ttu-id="67157-365">설정 합니다 <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> 속성을 발생 시키는 프로세스를 <xref:System.Diagnostics.Process.Exited> 이 종료 될 때 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-365">It sets the <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> property to cause the process to raise the <xref:System.Diagnostics.Process.Exited> event when it exits.</span></span> <span data-ttu-id="67157-366"><xref:System.Diagnostics.Process.Exited> 프로세스 정보를 표시 하는 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-366">The <xref:System.Diagnostics.Process.Exited> event handler displays process information.</span></span>

[!code-csharp[System.Diagnostics.Process.EnableExited#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Process.EnableExited/CS/processexitedevent.cs#1)]   
[!code-vb[System.Diagnostics.Process.EnableExited#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Process.EnableExited/VB/processexitedevent.vb#1)]   
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-367">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-367">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-368">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-368">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.Diagnostics.Process.WaitForExit(System.Int32)" />
        <altmember cref="E:System.Diagnostics.Process.Exited" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
        <altmember cref="P:System.Diagnostics.Process.Handle" />
        <altmember cref="P:System.Diagnostics.Process.ExitTime" />
        <altmember cref="P:System.Diagnostics.Process.HasExited" />
      </Docs>
    </Member>
    <Member MemberName="EnterDebugMode">
      <MemberSignature Language="C#" Value="public static void EnterDebugMode ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnterDebugMode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.EnterDebugMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EnterDebugMode ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EnterDebugMode();" />
      <MemberSignature Language="F#" Value="static member EnterDebugMode : unit -&gt; unit" Usage="System.Diagnostics.Process.EnterDebugMode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="67157-369">현재 스레드에서 네이티브 속성 <see langword="SeDebugPrivilege" />를 활성화하여 <see cref="T:System.Diagnostics.Process" /> 구성 요소를 특수 모드에서 실행되는 운영 체제 프로세스와 상호 작용하는 상태로 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="67157-369">Puts a <see cref="T:System.Diagnostics.Process" /> component in state to interact with operating system processes that run in a special mode by enabling the native property <see langword="SeDebugPrivilege" /> on the current thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-370">일부 운영 체제 프로세스를 특수 모드에서 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-370">Some operating system processes run in a special mode.</span></span> <span data-ttu-id="67157-371">속성을 읽거나 이러한 프로세스에 연결 하려고 하지 않는 가능한 호출한 <xref:System.Diagnostics.Process.EnterDebugMode%2A> 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-371">Attempting to read properties of or attach to these processes is not possible unless you have called <xref:System.Diagnostics.Process.EnterDebugMode%2A> on the component.</span></span> <span data-ttu-id="67157-372">호출 <xref:System.Diagnostics.Process.LeaveDebugMode%2A> 특수 모드에서 실행 되는 이러한 프로세스에 대 한 액세스를 더 이상 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-372">Call <xref:System.Diagnostics.Process.LeaveDebugMode%2A> when you no longer need access to these processes that run in special mode.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-373">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-373">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-374">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-374">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.Diagnostics.Process.LeaveDebugMode" />
      </Docs>
    </Member>
    <Member MemberName="ErrorDataReceived">
      <MemberSignature Language="C#" Value="public event System.Diagnostics.DataReceivedEventHandler ErrorDataReceived;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Diagnostics.DataReceivedEventHandler ErrorDataReceived" />
      <MemberSignature Language="DocId" Value="E:System.Diagnostics.Process.ErrorDataReceived" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ErrorDataReceived As DataReceivedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Diagnostics::DataReceivedEventHandler ^ ErrorDataReceived;" />
      <MemberSignature Language="F#" Value="member this.ErrorDataReceived : System.Diagnostics.DataReceivedEventHandler " Usage="member this.ErrorDataReceived : System.Diagnostics.DataReceivedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("Indicates if the process component is associated with a real process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessAssociated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.DataReceivedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-375">응용 프로그램이 리디렉션된 <see cref="P:System.Diagnostics.Process.StandardError" /> 스트림에 쓸 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-375">Occurs when an application writes to its redirected <see cref="P:System.Diagnostics.Process.StandardError" /> stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-376">합니다 <xref:System.Diagnostics.Process.ErrorDataReceived> 이벤트는 연결된 된 프로세스에 쓸 리디렉션된 나타냅니다 <xref:System.Diagnostics.Process.StandardError%2A> 스트림 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-376">The <xref:System.Diagnostics.Process.ErrorDataReceived> event indicates that the associated process has written to its redirected <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span>  
  
 <span data-ttu-id="67157-377">이벤트는 런타임에만 발생 비동기 읽기 작업 중에 <xref:System.Diagnostics.Process.StandardError%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-377">The event only occurs during asynchronous read operations on <xref:System.Diagnostics.Process.StandardError%2A>.</span></span> <span data-ttu-id="67157-378">비동기 읽기 작업을 시작 하려면 리디렉션해야 합니다 <xref:System.Diagnostics.Process.StandardError%2A> 스트림의 <xref:System.Diagnostics.Process>, 이벤트 처리기를 추가 합니다 <xref:System.Diagnostics.Process.ErrorDataReceived> 이벤트 및 호출 <xref:System.Diagnostics.Process.BeginErrorReadLine%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-378">To start asynchronous read operations, you must redirect the <xref:System.Diagnostics.Process.StandardError%2A> stream of a <xref:System.Diagnostics.Process>, add your event handler to the <xref:System.Diagnostics.Process.ErrorDataReceived> event, and call <xref:System.Diagnostics.Process.BeginErrorReadLine%2A>.</span></span> <span data-ttu-id="67157-379">그 후는 <xref:System.Diagnostics.Process.ErrorDataReceived> 프로세스에서는 리디렉션된 줄 기록 될 때마다 이벤트 신호 <xref:System.Diagnostics.Process.StandardError%2A> 스트림, 프로세스 종료 되거나 호출할 때까지 <xref:System.Diagnostics.Process.CancelErrorRead%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-379">Thereafter, the <xref:System.Diagnostics.Process.ErrorDataReceived> event signals each time the process writes a line to the redirected <xref:System.Diagnostics.Process.StandardError%2A> stream, until the process exits or calls <xref:System.Diagnostics.Process.CancelErrorRead%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-380">비동기 출력을 처리 하는 응용 프로그램을 호출 해야 합니다 <xref:System.Diagnostics.Process.WaitForExit> 메서드를 출력 버퍼를 플러시 했습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-380">The application that is processing the asynchronous output should call the <xref:System.Diagnostics.Process.WaitForExit> method to ensure that the output buffer has been flushed.</span></span> <span data-ttu-id="67157-381">지정 하면 제한 시간을 사용 하 여는 <xref:System.Diagnostics.Process.WaitForExit(System.Int32)> 오버 로드 않습니다 *하지* 출력 버퍼 플러시 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-381">Note that specifying a timeout by using the <xref:System.Diagnostics.Process.WaitForExit(System.Int32)> overload does *not* ensure the output buffer has been flushed.</span></span>
  
   
  
## Examples  
 <span data-ttu-id="67157-382">다음 예제에서는 `net view` 명령은 원격 컴퓨터에서 사용 가능한 네트워크 리소스를 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-382">The following example uses the `net view` command to list the available network resources on a remote computer.</span></span> <span data-ttu-id="67157-383">사용자를 명령줄 인수 형태로 대상 컴퓨터 이름을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-383">The user supplies the target computer name as a command-line argument.</span></span> <span data-ttu-id="67157-384">사용자 오류 출력에 대 한 파일 이름을 제공할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-384">The user can also supply a file name for error output.</span></span> <span data-ttu-id="67157-385">이 예제에서는 net 명령, 그 다음으로 프로세스가 끝날 때까지 쓰기 출력 결과 콘솔에 대 한 대기 작업의 출력을 수집 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-385">The example collects the output of the net command, waits for the process to finish, and then writes the output results to the console.</span></span> <span data-ttu-id="67157-386">사용자가 선택적 오류 파일을 제공 하는 경우이 예제에서는 파일에 오류를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="67157-386">If the user supplies the optional error file, the example writes errors to the file.</span></span>  
  
 [!code-cpp[Process_AsyncStreams#2](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/net_async.cpp#2)]
 [!code-csharp[Process_AsyncStreams#2](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/net_async.cs#2)]
 [!code-vb[Process_AsyncStreams#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/net_async.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-387">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-387">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-388">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-388">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" />
        <altmember cref="P:System.Diagnostics.Process.StandardError" />
        <altmember cref="M:System.Diagnostics.Process.BeginErrorReadLine" />
        <altmember cref="M:System.Diagnostics.Process.CancelErrorRead" />
        <altmember cref="T:System.Diagnostics.DataReceivedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="ExitCode">
      <MemberSignature Language="C#" Value="public int ExitCode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ExitCode" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.ExitCode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExitCode As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ExitCode { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ExitCode : int" Usage="System.Diagnostics.Process.ExitCode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The value returned from the associated process when it terminated.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessExitCode")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-389">연결된 프로세스가 종료될 때 연결된 프로세스에서 지정한 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-389">Gets the value that the associated process specified when it terminated.</span></span></summary>
        <value><span data-ttu-id="67157-390">연결된 프로세스가 종료될 때 연결된 프로세스에서 지정한 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-390">The code that the associated process specified when it terminated.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-391">사용 하 여 <xref:System.Diagnostics.Process.ExitCode%2A> 시스템 프로세스 종료 될 때 반환 되는 상태를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-391">Use <xref:System.Diagnostics.Process.ExitCode%2A> to get the status that the system process returned when it exited.</span></span> <span data-ttu-id="67157-392">정수 값을 반환 하는 등의 종료 코드를 훨씬 사용할 수 있습니다는 `main()` 프로시저입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-392">You can use the exit code much like an integer return value from a `main()` procedure.</span></span>  
  
 <span data-ttu-id="67157-393"><xref:System.Diagnostics.Process.ExitCode%2A> 해당 프로세스에 대 한 응용 프로그램 개발자가 구현한 특정 규칙을 반영 하는 프로세스에 대 한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-393">The <xref:System.Diagnostics.Process.ExitCode%2A> value for a process reflects the specific convention implemented by the application developer for that process.</span></span> <span data-ttu-id="67157-394">종료 코드 값을 사용 하 여 코드에서 결정을 내릴 수 하는 경우 응용 프로그램 프로세스에서 사용 하는 종료 코드 규칙을 알고 있다고 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-394">If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process.</span></span>  
  
 <span data-ttu-id="67157-395">개발자는 일반적으로 성공적으로 종료 나타냅니다는 <xref:System.Diagnostics.Process.ExitCode%2A> 호출 메서드가 않은 비정상적인 프로세스가 종료의 원인을 식별 하는 데 사용할 수 있는 0이 아닌 값으로 0을 지정 하는 오류 값입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-395">Developers usually indicate a successful exit by an <xref:System.Diagnostics.Process.ExitCode%2A> value of zero, and designate errors by nonzero values that the calling method can use to identify the cause of an abnormal process termination.</span></span> <span data-ttu-id="67157-396">다음이 지침을 따라야 필요는 없습니다 되지만 규칙.</span><span class="sxs-lookup"><span data-stu-id="67157-396">It is not necessary to follow these guidelines, but they are the convention.</span></span>  
  
 <span data-ttu-id="67157-397">가져오려고 시도 하는 경우는 <xref:System.Diagnostics.Process.ExitCode%2A> 예외가 throw 전에 프로세스가 종료 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-397">If you try to get the <xref:System.Diagnostics.Process.ExitCode%2A> before the process has exited, the attempt throws an exception.</span></span> <span data-ttu-id="67157-398">검사는 <xref:System.Diagnostics.Process.HasExited%2A> 연결 된 프로세스가 종료 여부를 확인 하려면 먼저 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-398">Examine the <xref:System.Diagnostics.Process.HasExited%2A> property first to verify whether the associated process has terminated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-399">비동기 이벤트 처리기에 표준 출력이 리디렉션 되었는지 경우에 출력 처리 완료 되지 않을 때 가능한 <xref:System.Diagnostics.Process.HasExited%2A> 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-399">When standard output has been redirected to asynchronous event handlers, it is possible that output processing will not have completed when <xref:System.Diagnostics.Process.HasExited%2A> returns `true`.</span></span> <span data-ttu-id="67157-400">비동기 이벤트 처리 완료 되었다는 것을 보장 하려면 호출을 <xref:System.Diagnostics.Process.WaitForExit> 체크 인하기 전에 매개 변수가 없는 오버 로드 <xref:System.Diagnostics.Process.HasExited%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-400">To ensure that asynchronous event handling has been completed, call the <xref:System.Diagnostics.Process.WaitForExit> overload that takes no parameter before checking <xref:System.Diagnostics.Process.HasExited%2A>.</span></span>  
  
 <span data-ttu-id="67157-401">사용할 수는 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 또는 <xref:System.Diagnostics.Process.Kill%2A> 연결 된 프로세스를 종료 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-401">You can use the <xref:System.Diagnostics.Process.CloseMainWindow%2A> or the <xref:System.Diagnostics.Process.Kill%2A> method to cause an associated process to exit.</span></span>  
  
 <span data-ttu-id="67157-402">연결된 된 프로세스가 종료 될 때 알림을 보내는 두 가지 방법이 있습니다: 동기적 및 비동기적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-402">There are two ways of being notified when the associated process exits: synchronously and asynchronously.</span></span> <span data-ttu-id="67157-403">동기 알림 호출에 의존 합니다 <xref:System.Diagnostics.Process.WaitForExit%2A> 연결된 구성 요소가 종료 될 때까지 응용 프로그램의 처리를 일시 중지 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-403">Synchronous notification relies on calling the <xref:System.Diagnostics.Process.WaitForExit%2A> method to pause the processing of your application until the associated component exits.</span></span> <span data-ttu-id="67157-404">비동기 알림 의존 합니다 <xref:System.Diagnostics.Process.Exited> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-404">Asynchronous notification relies on the <xref:System.Diagnostics.Process.Exited> event.</span></span> <span data-ttu-id="67157-405">비동기 알림을 사용 하는 경우 <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> 으로 설정 되어 있어야 `true` 에 대 한는 <xref:System.Diagnostics.Process> 프로세스 종료 되었다는 알림을 수신 하도록 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-405">When using asynchronous notification, <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> must be set to `true` for the <xref:System.Diagnostics.Process> component to receive notification that the process has exited.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-406">다음 예제에서는 메모장의 인스턴스를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-406">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="67157-407">그런 다음 예제에서는 검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-407">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="67157-408">이 예제에서는 프로세스가 종료 하는 경우를 검색 합니다. 프로세스의 종료 코드를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-408">The example detects when the process exits, and displays the process's exit code.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-409">프로세스가 종료되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="67157-409">The process has not exited.</span></span>  
  
<span data-ttu-id="67157-410">또는</span><span class="sxs-lookup"><span data-stu-id="67157-410">-or-</span></span> 
<span data-ttu-id="67157-411">프로세스 <see cref="P:System.Diagnostics.Process.Handle" />이 유효하지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="67157-411">The process <see cref="P:System.Diagnostics.Process.Handle" /> is not valid.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="67157-412">원격 컴퓨터에서 실행 중인 프로세스의 <see cref="P:System.Diagnostics.Process.ExitCode" /> 속성에 액세스한 경우.</span><span class="sxs-lookup"><span data-stu-id="67157-412">You are trying to access the <see cref="P:System.Diagnostics.Process.ExitCode" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="67157-413">이 속성은 로컬 컴퓨터에서 실행 중인 프로세스에 대해서만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-413">This property is available only for processes that are running on the local computer.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-414">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-414">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-415">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-415">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.HasExited" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
        <altmember cref="M:System.Diagnostics.Process.WaitForExit(System.Int32)" />
        <altmember cref="P:System.Diagnostics.Process.EnableRaisingEvents" />
      </Docs>
    </Member>
    <Member MemberName="Exited">
      <MemberSignature Language="C#" Value="public event EventHandler Exited;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Exited" />
      <MemberSignature Language="DocId" Value="E:System.Diagnostics.Process.Exited" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Exited As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Exited;" />
      <MemberSignature Language="F#" Value="member this.Exited : EventHandler " Usage="member this.Exited : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("If the WatchForExit property is set to true, then this event is raised when the associated process exits.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessExited")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-416">프로세스가 종료될 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-416">Occurs when a process exits.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-417"><xref:System.Diagnostics.Process.Exited> 이벤트는 연결된 된 프로세스가 종료 되었음을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="67157-417">The <xref:System.Diagnostics.Process.Exited> event indicates that the associated process exited.</span></span> <span data-ttu-id="67157-418">이 나타나는 것을 의미 하는 프로세스 종료 (중단) 또는 종결 했습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-418">This occurrence means either that the process terminated (aborted) or successfully closed.</span></span> <span data-ttu-id="67157-419">경우에이 이벤트는 발생의 값을 <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> 속성은 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-419">This event can occur only if the value of the <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="67157-420">연결된 된 프로세스가 종료 될 때 알림을 보내는 두 가지 방법이 있습니다: 동기적 및 비동기적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-420">There are two ways of being notified when the associated process exits: synchronously and asynchronously.</span></span> <span data-ttu-id="67157-421">동기 알림 호출을 의미 합니다 <xref:System.Diagnostics.Process.WaitForExit%2A> 프로세스가 종료 될 때까지 현재 스레드를 차단 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-421">Synchronous notification means calling the <xref:System.Diagnostics.Process.WaitForExit%2A> method to block the current thread until the process exits.</span></span> <span data-ttu-id="67157-422">비동기 알림이 사용 하 여 <xref:System.Diagnostics.Process.Exited> 그동안 실행을 계속 호출 스레드를 허용 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="67157-422">Asynchronous notification uses the <xref:System.Diagnostics.Process.Exited> event, which allows the calling thread to continue execution in the meantime.</span></span> <span data-ttu-id="67157-423">후자의 경우 <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> 로 설정 되어야 합니다 `true` 호출 응용 프로그램이 종료 되었습니다. 이벤트를 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-423">In the latter case, <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> must be set to `true` for the calling application to receive the Exited event.</span></span>  
  
 <span data-ttu-id="67157-424">운영 체제 프로세스를 종료할 때 종료 되었습니다. 이벤트 처리기를 등록 하는 다른 모든 프로세스를 알립니다.</span><span class="sxs-lookup"><span data-stu-id="67157-424">When the operating system shuts down a process, it notifies all other processes that have registered handlers for the Exited event.</span></span> <span data-ttu-id="67157-425">이번에 종료 하는 프로세스의 핸들을 사용할 수와 같은 일부 속성에 액세스 하려면 <xref:System.Diagnostics.Process.ExitTime%2A> 및 <xref:System.Diagnostics.Process.HasExited%2A> 해당 핸들을 완전히 해제 될 때까지 운영 체제에서 유지 관리는 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-425">At this time, the handle of the process that just exited can be used to access some properties such as  <xref:System.Diagnostics.Process.ExitTime%2A> and <xref:System.Diagnostics.Process.HasExited%2A> that the operating system maintains until it releases that handle completely.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-426">호출할 수 없습니다 종료 된 프로세스에 대 한 핸들에 있는 경우에 <xref:System.Diagnostics.Process.Start%2A> 다시 동일한 프로세스에 연결 하려면.</span><span class="sxs-lookup"><span data-stu-id="67157-426">Even if you have a handle to an exited process, you cannot call <xref:System.Diagnostics.Process.Start%2A> again to reconnect to the same process.</span></span> <span data-ttu-id="67157-427">호출 <xref:System.Diagnostics.Process.Start%2A> 자동으로 연결된 된 프로세스를 해제 하 고 동일한 파일이 있지만 완전히 새로운 프로세스에 연결 <xref:System.Diagnostics.Process.Handle%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-427">Calling <xref:System.Diagnostics.Process.Start%2A> automatically releases the associated process and connects to a process with the same file but an entirely new <xref:System.Diagnostics.Process.Handle%2A>.</span></span>  
  
 <span data-ttu-id="67157-428">사용에 대 한 자세한 합니다 <xref:System.Diagnostics.Process.Exited> Windows Forms 응용 프로그램에서 이벤트 참조를 <xref:System.Diagnostics.Process.SynchronizingObject%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-428">For more information about the use of the <xref:System.Diagnostics.Process.Exited> event in Windows Forms applications, see the <xref:System.Diagnostics.Process.SynchronizingObject%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-429">다음 코드 예제에서는 파일을 인쇄 하는 프로세스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="67157-429">The following code example creates a process that prints a file.</span></span> <span data-ttu-id="67157-430">발생 시킵니다 합니다 <xref:System.Diagnostics.Process.Exited> 때문에 프로세스가 종료 될 때 이벤트를 <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> 프로세스를 만들 때 설정 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-430">It raises the <xref:System.Diagnostics.Process.Exited> event when the process exits because the <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> property was set when the process was created.</span></span> <span data-ttu-id="67157-431"><xref:System.Diagnostics.Process.Exited> 프로세스 정보를 표시 하는 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-431">The <xref:System.Diagnostics.Process.Exited> event handler displays process information.</span></span>  
  
 [!code-csharp[System.Diagnostics.Process.EnableExited#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Process.EnableExited/CS/processexitedevent.cs#1)]
 [!code-vb[System.Diagnostics.Process.EnableExited#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Process.EnableExited/VB/processexitedevent.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-432">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-432">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-433">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-433">This member cannot be used by partially trusted code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ExitTime">
      <MemberSignature Language="C#" Value="public DateTime ExitTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime ExitTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.ExitTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExitTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime ExitTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.ExitTime : DateTime" Usage="System.Diagnostics.Process.ExitTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The time that the associated process exited.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessExitTime")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-434">연결된 프로세스가 종료된 시간을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-434">Gets the time that the associated process exited.</span></span></summary>
        <value><span data-ttu-id="67157-435">연결된 프로세스가 종료된 시간을 나타내는 <see cref="T:System.DateTime" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-435">A <see cref="T:System.DateTime" /> that indicates when the associated process was terminated.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-436">프로세스 종료 되지 않은 경우 검색을 시도 하는 <xref:System.Diagnostics.Process.ExitTime%2A> 속성 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-436">If the process has not terminated, attempting to retrieve the <xref:System.Diagnostics.Process.ExitTime%2A> property throws an exception.</span></span> <span data-ttu-id="67157-437">사용 하 여 <xref:System.Diagnostics.Process.HasExited%2A> 시작 하기 전에 <xref:System.Diagnostics.Process.ExitTime%2A> 연결 된 프로세스가 종료 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-437">Use <xref:System.Diagnostics.Process.HasExited%2A> before getting the <xref:System.Diagnostics.Process.ExitTime%2A> property to determine whether the associated process has terminated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-438">다음 코드 예제에서는 파일을 인쇄 하는 프로세스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="67157-438">The following code example creates a process that prints a file.</span></span> <span data-ttu-id="67157-439">프로세스가 발생 시키는 합니다 <xref:System.Diagnostics.Process.Exited> 이 종료 될 때 이벤트 및 이벤트 처리기 표시를 <xref:System.Diagnostics.Process.ExitTime%2A> 속성 및 기타 정보를 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-439">The process raises the <xref:System.Diagnostics.Process.Exited> event when it exits, and the event handler displays the <xref:System.Diagnostics.Process.ExitTime%2A> property and other process information.</span></span>  
  
 [!code-csharp[System.Diagnostics.Process.EnableExited#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Process.EnableExited/CS/processexitedevent.cs#1)]
 [!code-vb[System.Diagnostics.Process.EnableExited#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Process.EnableExited/VB/processexitedevent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-440">플랫폼이 이 속성을 지원하지 않는 Windows 98 또는 Windows Millennium Edition(Windows Me)인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-440">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="67157-441">원격 컴퓨터에서 실행 중인 프로세스의 <see cref="P:System.Diagnostics.Process.ExitTime" /> 속성에 액세스한 경우.</span><span class="sxs-lookup"><span data-stu-id="67157-441">You are trying to access the <see cref="P:System.Diagnostics.Process.ExitTime" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="67157-442">이 속성은 로컬 컴퓨터에서 실행 중인 프로세스에 대해서만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-442">This property is available only for processes that are running on the local computer.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-443">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-443">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-444">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-444">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.Handle" />
        <altmember cref="P:System.Diagnostics.Process.ExitCode" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentProcess">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process GetCurrentProcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process GetCurrentProcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.GetCurrentProcess" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCurrentProcess () As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Process ^ GetCurrentProcess();" />
      <MemberSignature Language="F#" Value="static member GetCurrentProcess : unit -&gt; System.Diagnostics.Process" Usage="System.Diagnostics.Process.GetCurrentProcess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="67157-445">새 <see cref="T:System.Diagnostics.Process" /> 구성 요소를 가져온 후 현재 활성화되어 있는 프로세스에 연결합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-445">Gets a new <see cref="T:System.Diagnostics.Process" /> component and associates it with the currently active process.</span></span></summary>
        <returns><span data-ttu-id="67157-446">호출하는 응용 프로그램에서 실행 중인 프로세스 리소스에 연결된 새 <see cref="T:System.Diagnostics.Process" /> 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-446">A new <see cref="T:System.Diagnostics.Process" /> component associated with the process resource that is running the calling application.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-447">이 메서드를 사용 하 여 새 <xref:System.Diagnostics.Process> 인스턴스 및 로컬 컴퓨터의 프로세스 리소스를 사용 하 여 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-447">Use this method to create a new <xref:System.Diagnostics.Process> instance and associate it with the process resource on the local computer.</span></span>  
  
 <span data-ttu-id="67157-448">마찬가지로 <xref:System.Diagnostics.Process.GetProcessById%2A>, <xref:System.Diagnostics.Process.GetProcessesByName%2A>, 및 <xref:System.Diagnostics.Process.GetProcesses%2A> 메서드 <xref:System.Diagnostics.Process.GetCurrentProcess%2A> 기존 리소스를 새 연결 <xref:System.Diagnostics.Process> 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-448">Like the similar <xref:System.Diagnostics.Process.GetProcessById%2A>, <xref:System.Diagnostics.Process.GetProcessesByName%2A>, and <xref:System.Diagnostics.Process.GetProcesses%2A> methods, <xref:System.Diagnostics.Process.GetCurrentProcess%2A> associates an existing resource with a new <xref:System.Diagnostics.Process> component.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-449">다음 예제에서는 로컬 컴퓨터 및 로컬 컴퓨터의 특정 프로세스에서 실행 중인 메모장의 모든 인스턴스는 로컬 컴퓨터에서 실행 중인 프로세스가 현재 프로세스의 정보를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-449">The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</span></span> <span data-ttu-id="67157-450">다음 원격 컴퓨터에서 동일한 프로세스에 대 한 정보를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-450">It then retrieves information for the same processes on a remote computer.</span></span>  
  
 [!code-cpp[Process.GetProcesses_noexception#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.GetProcesses_noexception/CPP/processstaticget.cpp#1)]
 [!code-csharp[Process.GetProcesses_noexception#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.GetProcesses_noexception/CS/processstaticget.cs#1)]
 [!code-vb[Process.GetProcesses_noexception#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.GetProcesses_noexception/VB/processstaticget.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-451">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-451">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-452">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-452">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessesByName(System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcesses" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProcessById">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="67157-453">새 <see cref="T:System.Diagnostics.Process" /> 구성 요소를 만들어 사용자가 지정한 기존 프로세스 리소스에 연결합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-453">Creates a new <see cref="T:System.Diagnostics.Process" /> component, and associates it with the existing process resource that you specify.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProcessById">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process GetProcessById (int processId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process GetProcessById(int32 processId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.GetProcessById(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetProcessById (processId As Integer) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Process ^ GetProcessById(int processId);" />
      <MemberSignature Language="F#" Value="static member GetProcessById : int -&gt; System.Diagnostics.Process" Usage="System.Diagnostics.Process.GetProcessById processId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="processId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="processId"><span data-ttu-id="67157-454">프로세스 리소스의 시스템 고유 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-454">The system-unique identifier of a process resource.</span></span></param>
        <summary><span data-ttu-id="67157-455">로컬 컴퓨터의 프로세서에 대한 식별자가 주어지면 새 <see cref="T:System.Diagnostics.Process" /> 구성 요소를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-455">Returns a new <see cref="T:System.Diagnostics.Process" /> component, given the identifier of a process on the local computer.</span></span></summary>
        <returns><span data-ttu-id="67157-456"><paramref name="processId" /> 매개 변수에 의해 확인되는 로컬 프로세스 리소스에 연결된 <see cref="T:System.Diagnostics.Process" /> 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-456">A <see cref="T:System.Diagnostics.Process" /> component that is associated with the local process resource identified by the <paramref name="processId" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-457">이 메서드를 사용 하 여 새 <xref:System.Diagnostics.Process> 구성 요소와 로컬 컴퓨터의 프로세스 리소스를 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-457">Use this method to create a new <xref:System.Diagnostics.Process> component and associate it with a process resource on the local computer.</span></span> <span data-ttu-id="67157-458">때문에 컴퓨터의 프로세스 리소스 이미 존재 해야 합니다 <xref:System.Diagnostics.Process.GetProcessById%28System.Int32%29> 시스템 리소스를 만들지는 않지만 대신 응용 프로그램에서 생성 된 리소스를 연결 <xref:System.Diagnostics.Process> 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-458">The process resource must already exist on the computer, because <xref:System.Diagnostics.Process.GetProcessById%28System.Int32%29> does not create a system resource, but rather associates a resource with an application-generated <xref:System.Diagnostics.Process> component.</span></span> <span data-ttu-id="67157-459">프로세스 <xref:System.Diagnostics.Process.Id%2A> 컴퓨터의 현재 실행 중인 프로세스에만 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-459">A process <xref:System.Diagnostics.Process.Id%2A> can be retrieved only for a process that is currently running on the computer.</span></span> <span data-ttu-id="67157-460">프로세스가 종료 된 후 <xref:System.Diagnostics.Process.GetProcessById%28System.Int32%29> 만료 된 식별자를 전달 하는 경우 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-460">After the process terminates, <xref:System.Diagnostics.Process.GetProcessById%28System.Int32%29> throws an exception if you pass it an expired identifier.</span></span>  
  
 <span data-ttu-id="67157-461">특정 컴퓨터에는 프로세스의 식별자는 고유 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-461">On any particular computer, the identifier of a process is unique.</span></span> <span data-ttu-id="67157-462"><xref:System.Diagnostics.Process.GetProcessById%28System.Int32%29> 최대 하나의 프로세스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-462"><xref:System.Diagnostics.Process.GetProcessById%28System.Int32%29> returns one process at most.</span></span> <span data-ttu-id="67157-463">특정 응용 프로그램을 사용 하 여 실행 중인 모든 프로세스를 가져오려는 경우 <xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-463">If you want to get all the processes running a particular application, use <xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29>.</span></span> <span data-ttu-id="67157-464">지정된 된 응용 프로그램을 실행 하는 컴퓨터에 여러 프로세스가 있는 경우 <xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29> 연결 된 모든 프로세스를 포함 하는 배열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-464">If multiple processes exist on the computer running the specified application, <xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29> returns an array containing all the associated processes.</span></span> <span data-ttu-id="67157-465">이러한 각 프로세스에서 해당 식별자에 대 한를 쿼리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-465">You can query each of these processes in turn for its identifier.</span></span> <span data-ttu-id="67157-466">프로세스 식별자를 볼 수 있습니다는 `Processes` Windows 작업 관리자의 창.</span><span class="sxs-lookup"><span data-stu-id="67157-466">The process identifier can be viewed in the `Processes` panel of the Windows Task Manager.</span></span> <span data-ttu-id="67157-467">`PID` 열 프로세스에 할당 되는 프로세스 식별자를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-467">The `PID` column displays the process identifier that is assigned to a process.</span></span>  
  
 <span data-ttu-id="67157-468">합니다 `processId` 매개 변수는는 <xref:System.Int32> (32 비트 부호 있는 정수), 기본 Windows API를 사용 하지만 `DWORD` (부호 없는 32 비트 정수) 비슷한 Api에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-468">The `processId` parameter is an <xref:System.Int32> (a 32-bit signed integer), although the underlying Windows API uses a `DWORD` (an unsigned 32-bit integer) for similar APIs.</span></span> <span data-ttu-id="67157-469">이 이유 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-469">This is for historical reasons.</span></span>
  
## Examples  
 <span data-ttu-id="67157-470">다음 예제에서는 로컬 컴퓨터 및 로컬 컴퓨터의 특정 프로세스에서 실행 중인 메모장의 모든 인스턴스는 로컬 컴퓨터에서 실행 중인 프로세스가 현재 프로세스의 정보를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-470">The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</span></span> <span data-ttu-id="67157-471">다음 원격 컴퓨터에서 동일한 프로세스에 대 한 정보를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-471">It then retrieves information for the same processes on a remote computer.</span></span>  
  
 [!code-cpp[Process.GetProcesses_noexception#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.GetProcesses_noexception/CPP/processstaticget.cpp#1)]
 [!code-csharp[Process.GetProcesses_noexception#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.GetProcesses_noexception/CS/processstaticget.cs#1)]
 [!code-vb[Process.GetProcesses_noexception#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.GetProcesses_noexception/VB/processstaticget.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="67157-472"><paramref name="processId" /> 매개 변수에서 지정한 프로세스가 실행되지 않는 경우.</span><span class="sxs-lookup"><span data-stu-id="67157-472">The process specified by the <paramref name="processId" /> parameter is not running.</span></span> <span data-ttu-id="67157-473">식별자가 만료되었을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-473">The identifier might be expired.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-474">프로세스는 이 개체에 의해 시작되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-474">The process was not started by this object.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-475">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-475">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-476">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-476">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.Id" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessesByName(System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcesses" />
        <altmember cref="M:System.Diagnostics.Process.GetCurrentProcess" />
      </Docs>
    </Member>
    <Member MemberName="GetProcessById">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process GetProcessById (int processId, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process GetProcessById(int32 processId, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetProcessById (processId As Integer, machineName As String) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Process ^ GetProcessById(int processId, System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="static member GetProcessById : int * string -&gt; System.Diagnostics.Process" Usage="System.Diagnostics.Process.GetProcessById (processId, machineName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO("There is no support for retrieving process information from a remote machine")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="processId" Type="System.Int32" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="processId"><span data-ttu-id="67157-477">프로세스 리소스의 시스템 고유 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-477">The system-unique identifier of a process resource.</span></span></param>
        <param name="machineName"><span data-ttu-id="67157-478">네트워크에 있는 컴퓨터 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-478">The name of a computer on the network.</span></span></param>
        <summary><span data-ttu-id="67157-479">프로세스 식별자 및 네트워크에 있는 컴퓨터의 이름이 주어지면 새 <see cref="T:System.Diagnostics.Process" /> 구성 요소를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-479">Returns a new <see cref="T:System.Diagnostics.Process" /> component, given a process identifier and the name of a computer on the network.</span></span></summary>
        <returns><span data-ttu-id="67157-480"><paramref name="processId" /> 매개 변수에 의해 확인되는 원격 프로세스 리소스에 연결된 <see cref="T:System.Diagnostics.Process" /> 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-480">A <see cref="T:System.Diagnostics.Process" /> component that is associated with a remote process resource identified by the <paramref name="processId" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-481">이 메서드를 사용 하 여 새 <xref:System.Diagnostics.Process> 구성 요소와 네트워크의 원격 컴퓨터에서 프로세스 리소스를 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-481">Use this method to create a new <xref:System.Diagnostics.Process> component and associate it with a process resource on a remote computer on the network.</span></span> <span data-ttu-id="67157-482">때문에 지정한 컴퓨터의 프로세스 리소스 이미 존재 해야 합니다 <xref:System.Diagnostics.Process.GetProcessById%28System.Int32%2CSystem.String%29> 시스템 리소스를 만들지는 않지만 대신 응용 프로그램에서 생성 된 리소스를 연결 <xref:System.Diagnostics.Process> 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-482">The process resource must already exist on the specified computer, because <xref:System.Diagnostics.Process.GetProcessById%28System.Int32%2CSystem.String%29> does not create a system resource, but rather associates a resource with an application-generated <xref:System.Diagnostics.Process> component.</span></span> <span data-ttu-id="67157-483">프로세스 <xref:System.Diagnostics.Process.Id%2A> 컴퓨터의 현재 실행 중인 프로세스에만 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-483">A process <xref:System.Diagnostics.Process.Id%2A> can be retrieved only for a process that is currently running on the computer.</span></span> <span data-ttu-id="67157-484">프로세스가 종료 된 후 <xref:System.Diagnostics.Process.GetProcessById%28System.Int32%2CSystem.String%29> 만료 된 식별자를 전달 하는 경우 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-484">After the process terminates, <xref:System.Diagnostics.Process.GetProcessById%28System.Int32%2CSystem.String%29> throws an exception if you pass it an expired identifier.</span></span>  
  
 <span data-ttu-id="67157-485">특정 컴퓨터에는 프로세스의 식별자는 고유 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-485">On any particular computer, the identifier of a process is unique.</span></span> <span data-ttu-id="67157-486"><xref:System.Diagnostics.Process.GetProcessById%28System.Int32%2CSystem.String%29> 최대 하나의 프로세스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-486"><xref:System.Diagnostics.Process.GetProcessById%28System.Int32%2CSystem.String%29> returns one process at most.</span></span> <span data-ttu-id="67157-487">특정 응용 프로그램을 사용 하 여 실행 중인 모든 프로세스를 가져오려는 경우 <xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-487">If you want to get all the processes running a particular application, use <xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29>.</span></span> <span data-ttu-id="67157-488">지정된 된 응용 프로그램을 실행 하는 컴퓨터에 여러 프로세스가 있는 경우 <xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29> 연결 된 모든 프로세스를 포함 하는 배열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-488">If multiple processes exist on the computer running the specified application, <xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29> returns an array containing all the associated processes.</span></span> <span data-ttu-id="67157-489">이러한 각 프로세스에서 해당 식별자에 대 한를 쿼리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-489">You can query each of these processes in turn for its identifier.</span></span> <span data-ttu-id="67157-490">프로세스 식별자를 볼 수 있습니다는 `Processes` Windows 작업 관리자의 창.</span><span class="sxs-lookup"><span data-stu-id="67157-490">The process identifier can be viewed in the `Processes` panel of the Windows Task Manager.</span></span> <span data-ttu-id="67157-491">`PID` 열 프로세스에 할당 되는 프로세스 식별자를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-491">The `PID` column displays the process identifier that is assigned to a process.</span></span>  
  
 <span data-ttu-id="67157-492">지정 하지 않으면 경우는 `machineName`, 로컬 컴퓨터가 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-492">If you do not specify a `machineName`, the local computer is used.</span></span> <span data-ttu-id="67157-493">또는 설정 하 여 로컬 컴퓨터를 지정할 수 있습니다 `machineName` 값으로 "." 또는 빈 문자열 ("").</span><span class="sxs-lookup"><span data-stu-id="67157-493">Alternatively, you can specify the local computer by setting `machineName` to the value "." or to an empty string ("").</span></span>  
  
 <span data-ttu-id="67157-494">합니다 `processId` 매개 변수는는 <xref:System.Int32> (32 비트 부호 있는 정수), 기본 Windows API를 사용 하지만 `DWORD` (부호 없는 32 비트 정수) 비슷한 Api에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-494">The `processId` parameter is an <xref:System.Int32> (a 32-bit signed integer), although the underlying Windows API uses a `DWORD` (an unsigned 32-bit integer) for similar APIs.</span></span> <span data-ttu-id="67157-495">이 이유 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-495">This is for historical reasons.</span></span>   
  
## Examples  
 <span data-ttu-id="67157-496">다음 예제에서는 로컬 컴퓨터 및 로컬 컴퓨터의 특정 프로세스에서 실행 중인 메모장의 모든 인스턴스는 로컬 컴퓨터에서 실행 중인 프로세스가 현재 프로세스의 정보를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-496">The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</span></span> <span data-ttu-id="67157-497">다음 원격 컴퓨터에서 동일한 프로세스에 대 한 정보를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-497">It then retrieves information for the same processes on a remote computer.</span></span>  
  
 [!code-cpp[Process.GetProcesses_noexception#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.GetProcesses_noexception/CPP/processstaticget.cpp#1)]
 [!code-csharp[Process.GetProcesses_noexception#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.GetProcesses_noexception/CS/processstaticget.cs#1)]
 [!code-vb[Process.GetProcesses_noexception#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.GetProcesses_noexception/VB/processstaticget.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="67157-498"><paramref name="processId" /> 매개 변수에서 지정한 프로세스가 실행되지 않는 경우.</span><span class="sxs-lookup"><span data-stu-id="67157-498">The process specified by the <paramref name="processId" /> parameter is not running.</span></span> <span data-ttu-id="67157-499">식별자가 만료되었을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-499">The identifier might be expired.</span></span>  
  
<span data-ttu-id="67157-500">또는</span><span class="sxs-lookup"><span data-stu-id="67157-500">-or-</span></span> 
<span data-ttu-id="67157-501"><paramref name="machineName" /> 매개 변수 구문이 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="67157-501">The <paramref name="machineName" /> parameter syntax is invalid.</span></span> <span data-ttu-id="67157-502">이름의 길이가 0일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-502">The name might have length zero (0).</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="67157-503"><paramref name="machineName" /> 매개 변수가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-503">The <paramref name="machineName" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-504">프로세스는 이 개체에 의해 시작되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-504">The process was not started by this object.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-505">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-505">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-506">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-506">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.Id" />
        <altmember cref="P:System.Diagnostics.Process.MachineName" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessesByName(System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcesses" />
        <altmember cref="M:System.Diagnostics.Process.GetCurrentProcess" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProcesses">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="67157-507">새 <see cref="T:System.Diagnostics.Process" /> 구성 요소로 이루어진 배열을 만들어 기존 프로세스 리소스에 연결합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-507">Creates an array of new <see cref="T:System.Diagnostics.Process" /> components and associates them with existing process resources.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProcesses">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process[] GetProcesses ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process[] GetProcesses() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.GetProcesses" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetProcesses () As Process()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Diagnostics::Process ^&gt; ^ GetProcesses();" />
      <MemberSignature Language="F#" Value="static member GetProcesses : unit -&gt; System.Diagnostics.Process[]" Usage="System.Diagnostics.Process.GetProcesses " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="67157-508">로컬 컴퓨터의 각 프로세스 리소스에 대해 새 <see cref="T:System.Diagnostics.Process" /> 구성 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="67157-508">Creates a new <see cref="T:System.Diagnostics.Process" /> component for each process resource on the local computer.</span></span></summary>
        <returns><span data-ttu-id="67157-509">로컬 컴퓨터에서 실행 중인 모든 프로세스 리소스를 나타내는 <see cref="T:System.Diagnostics.Process" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-509">An array of type <see cref="T:System.Diagnostics.Process" /> that represents all the process resources running on the local computer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-510">이 메서드를 사용 하 여 새 배열을 만들려면 <xref:System.Diagnostics.Process> 구성 요소와 로컬 컴퓨터의 모든 프로세스 리소스를 사용 하 여 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-510">Use this method to create an array of new <xref:System.Diagnostics.Process> components and associate them with all the process resources on the local computer.</span></span> <span data-ttu-id="67157-511">때문에 로컬 컴퓨터의 프로세스 리소스에 이미 존재 해야 합니다 <xref:System.Diagnostics.Process.GetProcesses%2A> 시스템 리소스를 만들지는 않지만 대신 응용 프로그램에서 생성 된 리소스를 연결 <xref:System.Diagnostics.Process> 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-511">The process resources must already exist on the local computer, because <xref:System.Diagnostics.Process.GetProcesses%2A> does not create system resources but rather associates resources with application-generated <xref:System.Diagnostics.Process> components.</span></span> <span data-ttu-id="67157-512">운영 체제 자체 백그라운드 프로세스를 실행 중 이므로이 배열은 비어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-512">Because the operating system itself is running background processes, this array is never empty.</span></span>  
  
 <span data-ttu-id="67157-513">모든 컴퓨터에서 실행 중인 프로세스를 검색 하려면 사용 하 여 해당 수를 제한할 수 있습니다 합니다 <xref:System.Diagnostics.Process.GetProcessById%2A> 또는 <xref:System.Diagnostics.Process.GetProcessesByName%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="67157-513">If you do not want to retrieve all the processes running on the computer, you can restrict their number by using the <xref:System.Diagnostics.Process.GetProcessById%2A> or <xref:System.Diagnostics.Process.GetProcessesByName%2A> method.</span></span> <span data-ttu-id="67157-514"><xref:System.Diagnostics.Process.GetProcessById%2A> 만듭니다는 <xref:System.Diagnostics.Process> 메서드에 전달 하는 프로세스 식별자 시스템에서 식별 하는 프로세스와 관련 된 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-514"><xref:System.Diagnostics.Process.GetProcessById%2A> creates a <xref:System.Diagnostics.Process> component that is associated with the process identified on the system by the process identifier that you pass to the method.</span></span> <span data-ttu-id="67157-515"><xref:System.Diagnostics.Process.GetProcessesByName%2A> 배열을 만들고 <xref:System.Diagnostics.Process> 메서드에 전달 하면 해당 연결 된 프로세스 리소스에서 실행 파일을 공유 하는 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-515"><xref:System.Diagnostics.Process.GetProcessesByName%2A> creates an array of <xref:System.Diagnostics.Process> components whose associated process resources share the executable file you pass to the method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-516">서비스 호스트 프로세스 (svchost.exe)의 동일한 인스턴스 내에서 여러 Windows 서비스를 로드할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-516">Multiple Windows services can be loaded within the same instance of the Service Host process (svchost.exe).</span></span> <span data-ttu-id="67157-517">GetProcesses 개별 서비스를 식별 하지 않습니다. 참조 하세요 <xref:System.ServiceProcess.ServiceController.GetServices%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-517">GetProcesses does not identify those individual services; for that, see <xref:System.ServiceProcess.ServiceController.GetServices%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-518">다음 예제에서는 로컬 컴퓨터 및 로컬 컴퓨터의 특정 프로세스에서 실행 중인 메모장의 모든 인스턴스는 로컬 컴퓨터에서 실행 중인 프로세스가 현재 프로세스의 정보를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-518">The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</span></span> <span data-ttu-id="67157-519">다음 원격 컴퓨터에서 동일한 프로세스에 대 한 정보를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-519">It then retrieves information for the same processes on a remote computer.</span></span>  
  
 [!code-cpp[Process.GetProcesses_noexception#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.GetProcesses_noexception/CPP/processstaticget.cpp#1)]
 [!code-csharp[Process.GetProcesses_noexception#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.GetProcesses_noexception/CS/processstaticget.cs#1)]
 [!code-vb[Process.GetProcesses_noexception#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.GetProcesses_noexception/VB/processstaticget.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-520">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-520">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-521">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-521">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.MachineName" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessesByName(System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetCurrentProcess" />
      </Docs>
    </Member>
    <Member MemberName="GetProcesses">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process[] GetProcesses (string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process[] GetProcesses(string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.GetProcesses(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetProcesses (machineName As String) As Process()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Diagnostics::Process ^&gt; ^ GetProcesses(System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="static member GetProcesses : string -&gt; System.Diagnostics.Process[]" Usage="System.Diagnostics.Process.GetProcesses machineName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO("There is no support for retrieving process information from a remote machine")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="machineName"><span data-ttu-id="67157-522">프로세스 목록을 읽어 올 컴퓨터입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-522">The computer from which to read the list of processes.</span></span></param>
        <summary><span data-ttu-id="67157-523">지정한 컴퓨터의 각 프로세스 리소스에 대해 새 <see cref="T:System.Diagnostics.Process" /> 구성 요소를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="67157-523">Creates a new <see cref="T:System.Diagnostics.Process" /> component for each process resource on the specified computer.</span></span></summary>
        <returns><span data-ttu-id="67157-524">지정된 컴퓨터에서 실행 중인 모든 프로세스 리소스를 나타내는 <see cref="T:System.Diagnostics.Process" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-524">An array of type <see cref="T:System.Diagnostics.Process" /> that represents all the process resources running on the specified computer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-525">이 메서드를 사용 하 여 새 배열을 만들려면 <xref:System.Diagnostics.Process> 구성 요소와 지정된 된 (일반적으로 원격) 컴퓨터에 있는 모든 프로세스 리소스를 사용 하 여 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-525">Use this method to create an array of new <xref:System.Diagnostics.Process> components and associate them with all the process resources on the specified (usually remote) computer.</span></span> <span data-ttu-id="67157-526">때문에 로컬 컴퓨터의 프로세스 리소스에 이미 존재 해야 합니다 <xref:System.Diagnostics.Process.GetProcesses%2A> 시스템 리소스를 만들지는 않지만 대신 응용 프로그램에서 생성 된 리소스를 연결 <xref:System.Diagnostics.Process> 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-526">The process resources must already exist on the local computer, because <xref:System.Diagnostics.Process.GetProcesses%2A> does not create system resources but rather associates resources with application-generated <xref:System.Diagnostics.Process> components.</span></span> <span data-ttu-id="67157-527">운영 체제 자체 백그라운드 프로세스를 실행 중 이므로이 배열은 비어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-527">Because the operating system itself is running background processes, this array is never empty.</span></span>  
  
 <span data-ttu-id="67157-528">모든 컴퓨터에서 실행 중인 프로세스를 검색 하려면 사용 하 여 해당 수를 제한할 수 있습니다 합니다 <xref:System.Diagnostics.Process.GetProcessById%2A> 또는 <xref:System.Diagnostics.Process.GetProcessesByName%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="67157-528">If you do not want to retrieve all the processes running on the computer, you can restrict their number by using the <xref:System.Diagnostics.Process.GetProcessById%2A> or <xref:System.Diagnostics.Process.GetProcessesByName%2A> method.</span></span> <span data-ttu-id="67157-529"><xref:System.Diagnostics.Process.GetProcessById%2A> 만듭니다는 <xref:System.Diagnostics.Process> 메서드에 전달 하는 프로세스 식별자 시스템에서 식별 하는 프로세스와 관련 된 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-529"><xref:System.Diagnostics.Process.GetProcessById%2A> creates a <xref:System.Diagnostics.Process> component that is associated with the process identified on the system by the process identifier that you pass to the method.</span></span> <span data-ttu-id="67157-530"><xref:System.Diagnostics.Process.GetProcessesByName%2A> 배열을 만들고 <xref:System.Diagnostics.Process> 메서드에 전달 하면 해당 연결 된 프로세스 리소스에서 실행 파일을 공유 하는 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-530"><xref:System.Diagnostics.Process.GetProcessesByName%2A> creates an array of <xref:System.Diagnostics.Process> components whose associated process resources share the executable file you pass to the method.</span></span>  
  
 <span data-ttu-id="67157-531">이 오버 로드는 <xref:System.Diagnostics.Process.GetProcesses%2A> 메서드는 네트워크에서 원격 컴퓨터에서 실행 중인 프로세스 리소스의 목록을 검색 하려면 일반적으로 사용 되지만 전달 하 여 로컬 컴퓨터를 지정할 수 있습니다 "."입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-531">This overload of the <xref:System.Diagnostics.Process.GetProcesses%2A> method is generally used to retrieve the list of process resources running on a remote computer on the network, but you can specify the local computer by passing ".".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-532">서비스 호스트 프로세스 (svchost.exe)의 동일한 인스턴스 내에서 여러 Windows 서비스를 로드할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-532">Multiple Windows services can be loaded within the same instance of the Service Host process (svchost.exe).</span></span> <span data-ttu-id="67157-533">GetProcesses 개별 서비스를 식별 하지 않습니다. 참조 하세요 <xref:System.ServiceProcess.ServiceController.GetServices%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-533">GetProcesses does not identify those individual services; for that, see <xref:System.ServiceProcess.ServiceController.GetServices%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-534">다음 예제에서는 로컬 컴퓨터 및 로컬 컴퓨터의 특정 프로세스에서 실행 중인 메모장의 모든 인스턴스는 로컬 컴퓨터에서 실행 중인 프로세스가 현재 프로세스의 정보를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-534">The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</span></span> <span data-ttu-id="67157-535">다음 원격 컴퓨터에서 동일한 프로세스에 대 한 정보를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-535">It then retrieves information for the same processes on a remote computer.</span></span>  
  
 [!code-cpp[Process.GetProcesses_noexception#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.GetProcesses_noexception/CPP/processstaticget.cpp#1)]
 [!code-csharp[Process.GetProcesses_noexception#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.GetProcesses_noexception/CS/processstaticget.cs#1)]
 [!code-vb[Process.GetProcesses_noexception#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.GetProcesses_noexception/VB/processstaticget.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="67157-536"><paramref name="machineName" /> 매개 변수 구문이 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="67157-536">The <paramref name="machineName" /> parameter syntax is invalid.</span></span> <span data-ttu-id="67157-537">길이가 0일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-537">It might have length zero (0).</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="67157-538"><paramref name="machineName" /> 매개 변수가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-538">The <paramref name="machineName" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-539">운영 체제 플랫폼이 원격 컴퓨터에서 이 작업을 지원하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-539">The operating system platform does not support this operation on remote computers.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-540">프로세스 정보를 얻는 데 사용되는 성능 카운터 API에 액세스하는 데 문제가 있는 경우.</span><span class="sxs-lookup"><span data-stu-id="67157-540">There are problems accessing the performance counter API's used to get process information.</span></span> <span data-ttu-id="67157-541">이 예외는 Windows NT, Windows 2000 및 Windows XP에만 존재합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-541">This exception is specific to Windows NT, Windows 2000, and Windows XP.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="67157-542">내부 시스템 API에 액세스하는 데 문제가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="67157-542">A problem occurred accessing an underlying system API.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-543">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-543">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-544">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-544">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.MachineName" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessesByName(System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetCurrentProcess" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProcessesByName">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="67157-545"><see cref="T:System.Diagnostics.Process" /> 구성 요소로 이루어진 새 배열을 만들어 지정한 프로세스 이름을 공유하는 모든 기존 프로세스 리소스에 연결합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-545">Creates an array of new <see cref="T:System.Diagnostics.Process" /> components and associates them with the existing process resources that all share the specified process name.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProcessesByName">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process[] GetProcessesByName (string processName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process[] GetProcessesByName(string processName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.GetProcessesByName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetProcessesByName (processName As String) As Process()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Diagnostics::Process ^&gt; ^ GetProcessesByName(System::String ^ processName);" />
      <MemberSignature Language="F#" Value="static member GetProcessesByName : string -&gt; System.Diagnostics.Process[]" Usage="System.Diagnostics.Process.GetProcessesByName processName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="processName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="processName"><span data-ttu-id="67157-546">프로세스의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-546">The friendly name of the process.</span></span></param>
        <summary><span data-ttu-id="67157-547"><see cref="T:System.Diagnostics.Process" /> 구성 요소로 이루어진 새 배열을 만들어 지정한 프로세스 이름을 공유하는 로컬 컴퓨터의 모든 프로세스 리소스에 연결합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-547">Creates an array of new <see cref="T:System.Diagnostics.Process" /> components and associates them with all the process resources on the local computer that share the specified process name.</span></span></summary>
        <returns><span data-ttu-id="67157-548">지정한 응용 프로그램 또는 파일을 실행 중인 프로세스 리소스를 나타내는 <see cref="T:System.Diagnostics.Process" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-548">An array of type <see cref="T:System.Diagnostics.Process" /> that represents the process resources running the specified application or file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-549">이 메서드를 사용 하 여 새 배열을 만들려면 <xref:System.Diagnostics.Process> 구성 요소와 로컬 컴퓨터의 동일한 실행 파일을 실행 하는 모든 프로세스 리소스를 사용 하 여 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-549">Use this method to create an array of new <xref:System.Diagnostics.Process> components and associate them with all the process resources that are running the same executable file on the local computer.</span></span> <span data-ttu-id="67157-550">때문에 컴퓨터의 프로세스 리소스에 이미 존재 해야 합니다 <xref:System.Diagnostics.Process.GetProcessesByName%2A> 시스템 리소스를 만들지는 않지만 대신 응용 프로그램에서 생성 된 연결 <xref:System.Diagnostics.Process> 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-550">The process resources must already exist on the computer, because <xref:System.Diagnostics.Process.GetProcessesByName%2A> does not create system resources but rather associates them with application-generated <xref:System.Diagnostics.Process> components.</span></span> <span data-ttu-id="67157-551">`processName` 메서드 배열이 비어 있을 수 있으므로 로컬 컴퓨터의 현재 실행 하지 않는 실행 파일에 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-551">A `processName` can be specified for an executable file that is not currently running on the local computer, so the array the method returns can be empty.</span></span>  
  
 <span data-ttu-id="67157-552">프로세스 이름은.exe 확장명 또는 경로 포함 하지 않는 Outlook 같은 프로세스에 대 한 친숙 한 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-552">The process name is a friendly name for the process, such as Outlook, that does not include the .exe extension or the path.</span></span> <span data-ttu-id="67157-553"><xref:System.Diagnostics.Process.GetProcessesByName%2A> 가져오기 및 동일한 실행 파일을 사용 하 여 연결 된 모든 프로세스를 조작 하는 데 도움이 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-553"><xref:System.Diagnostics.Process.GetProcessesByName%2A> is helpful for getting and manipulating all the processes that are associated with the same executable file.</span></span> <span data-ttu-id="67157-554">예를 들어 실행 파일 이름으로 전달할 수 있습니다는 `processName` 매개 변수는 실행 파일의 모든 실행 중인 인스턴스를 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-554">For example, you can pass an executable file name as the `processName` parameter, in order to shut down all the running instances of that executable file.</span></span>  
  
 <span data-ttu-id="67157-555">하지만 프로세스 <xref:System.Diagnostics.Process.Id%2A> 은 시스템에서 단일 프로세스 리소스에 고유한 로컬 컴퓨터의 여러 프로세스 실행 될 수 있습니다 지정 된 응용 프로그램과 `processName` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-555">Although a process <xref:System.Diagnostics.Process.Id%2A> is unique to a single process resource on the system, multiple processes on the local computer can be running the application specified by the `processName` parameter.</span></span> <span data-ttu-id="67157-556">따라서 <xref:System.Diagnostics.Process.GetProcessById%2A> 최소한 하나의 프로세스를 반환 하지만 <xref:System.Diagnostics.Process.GetProcessesByName%2A> 연결 된 모든 프로세스를 포함 하는 배열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-556">Therefore, <xref:System.Diagnostics.Process.GetProcessById%2A> returns one process at most, but <xref:System.Diagnostics.Process.GetProcessesByName%2A> returns an array containing all the associated processes.</span></span> <span data-ttu-id="67157-557">표준 API 호출을 사용 하는 프로세스를 조작 하는 경우 해당 식별자에서 이러한 프로세스 모두를 쿼리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-557">If you need to manipulate the process using standard API calls, you can query each of these processes in turn for its identifier.</span></span> <span data-ttu-id="67157-558">단독 프로세스 이름을 통해 하지만의 배열을 검색 한 후 프로세스 리소스에 액세스할 수 없는 <xref:System.Diagnostics.Process> 연관 된 구성 요소 프로세스 리소스를 사용 하 여 조작할 수 있습니다 시작, 종료 하 고, 그렇지 않으면 시스템 리소스입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-558">You cannot access process resources through the process name alone but, once you have retrieved an array of <xref:System.Diagnostics.Process> components that have been associated with the process resources, you can start, terminate, and otherwise manipulate the system resources.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-559">다음 예제에서는 로컬 컴퓨터 및 로컬 컴퓨터의 특정 프로세스에서 실행 중인 메모장의 모든 인스턴스는 로컬 컴퓨터에서 실행 중인 프로세스가 현재 프로세스의 정보를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-559">The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</span></span> <span data-ttu-id="67157-560">다음 원격 컴퓨터에서 동일한 프로세스에 대 한 정보를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-560">It then retrieves information for the same processes on a remote computer.</span></span>  
  
 [!code-cpp[Process.GetProcesses_noexception#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.GetProcesses_noexception/CPP/processstaticget.cpp#1)]
 [!code-csharp[Process.GetProcesses_noexception#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.GetProcesses_noexception/CS/processstaticget.cs#1)]
 [!code-vb[Process.GetProcesses_noexception#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.GetProcesses_noexception/VB/processstaticget.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-561">프로세스 정보를 얻는 데 사용되는 성능 카운터 API에 액세스하는 데 문제가 있는 경우.</span><span class="sxs-lookup"><span data-stu-id="67157-561">There are problems accessing the performance counter API's used to get process information.</span></span> <span data-ttu-id="67157-562">이 예외는 Windows NT, Windows 2000 및 Windows XP에만 존재합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-562">This exception is specific to Windows NT, Windows 2000, and Windows XP.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-563">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-563">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-564">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-564">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.ProcessName" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcesses" />
        <altmember cref="M:System.Diagnostics.Process.GetCurrentProcess" />
      </Docs>
    </Member>
    <Member MemberName="GetProcessesByName">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process[] GetProcessesByName (string processName, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process[] GetProcessesByName(string processName, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetProcessesByName (processName As String, machineName As String) As Process()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Diagnostics::Process ^&gt; ^ GetProcessesByName(System::String ^ processName, System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="static member GetProcessesByName : string * string -&gt; System.Diagnostics.Process[]" Usage="System.Diagnostics.Process.GetProcessesByName (processName, machineName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="processName" Type="System.String" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="processName"><span data-ttu-id="67157-565">프로세스의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-565">The friendly name of the process.</span></span></param>
        <param name="machineName"><span data-ttu-id="67157-566">네트워크에 있는 컴퓨터 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-566">The name of a computer on the network.</span></span></param>
        <summary><span data-ttu-id="67157-567"><see cref="T:System.Diagnostics.Process" /> 구성 요소로 이루어진 새 배열을 만들어 지정한 프로세스 이름을 공유하는 원격 컴퓨터에 있는 모든 프로세스 리소스에 연결합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-567">Creates an array of new <see cref="T:System.Diagnostics.Process" /> components and associates them with all the process resources on a remote computer that share the specified process name.</span></span></summary>
        <returns><span data-ttu-id="67157-568">지정한 응용 프로그램 또는 파일을 실행 중인 프로세스 리소스를 나타내는 <see cref="T:System.Diagnostics.Process" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-568">An array of type <see cref="T:System.Diagnostics.Process" /> that represents the process resources running the specified application or file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-569">이 메서드를 사용 하 여 새 배열을 만들려면 <xref:System.Diagnostics.Process> 구성 요소와 지정된 된 컴퓨터에서 동일한 실행 파일을 실행 하는 모든 프로세스 리소스를 사용 하 여 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-569">Use this method to create an array of new <xref:System.Diagnostics.Process> components and associate them with all the process resources that are running the same executable file on the specified computer.</span></span> <span data-ttu-id="67157-570">때문에 컴퓨터의 프로세스 리소스에 이미 존재 해야 합니다 <xref:System.Diagnostics.Process.GetProcessesByName%2A> 시스템 리소스를 만들지는 않지만 대신 응용 프로그램에서 생성 된 연결 <xref:System.Diagnostics.Process> 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-570">The process resources must already exist on the computer, because <xref:System.Diagnostics.Process.GetProcessesByName%2A> does not create system resources but rather associates them with application-generated <xref:System.Diagnostics.Process> components.</span></span> <span data-ttu-id="67157-571">`processName` 메서드 배열이 비어 있을 수 있으므로 로컬 컴퓨터의 현재 실행 하지 않는 실행 파일에 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-571">A `processName` can be specified for an executable file that is not currently running on the local computer, so the array the method returns can be empty.</span></span>  
  
 <span data-ttu-id="67157-572">프로세스 이름은.exe 확장명 또는 경로 포함 하지 않는 Outlook 같은 프로세스에 대 한 친숙 한 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-572">The process name is a friendly name for the process, such as Outlook, that does not include the .exe extension or the path.</span></span> <span data-ttu-id="67157-573"><xref:System.Diagnostics.Process.GetProcessesByName%2A> 가져오기 및 동일한 실행 파일을 사용 하 여 연결 된 모든 프로세스를 조작 하는 데 도움이 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-573"><xref:System.Diagnostics.Process.GetProcessesByName%2A> is helpful for getting and manipulating all the processes that are associated with the same executable file.</span></span> <span data-ttu-id="67157-574">예를 들어 실행 파일 이름으로 전달할 수 있습니다는 `processName` 매개 변수는 실행 파일의 모든 실행 중인 인스턴스를 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-574">For example, you can pass an executable file name as the `processName` parameter, in order to shut down all the running instances of that executable file.</span></span>  
  
 <span data-ttu-id="67157-575">하지만 프로세스 <xref:System.Diagnostics.Process.Id%2A> 은 시스템에서 단일 프로세스 리소스에 고유한 로컬 컴퓨터의 여러 프로세스 실행 될 수 있습니다 지정 된 응용 프로그램과 `processName` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-575">Although a process <xref:System.Diagnostics.Process.Id%2A> is unique to a single process resource on the system, multiple processes on the local computer can be running the application specified by the `processName` parameter.</span></span> <span data-ttu-id="67157-576">따라서 <xref:System.Diagnostics.Process.GetProcessById%2A> 최소한 하나의 프로세스를 반환 하지만 <xref:System.Diagnostics.Process.GetProcessesByName%2A> 연결 된 모든 프로세스를 포함 하는 배열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-576">Therefore, <xref:System.Diagnostics.Process.GetProcessById%2A> returns one process at most, but <xref:System.Diagnostics.Process.GetProcessesByName%2A> returns an array containing all the associated processes.</span></span> <span data-ttu-id="67157-577">표준 API 호출을 사용 하는 프로세스를 조작 하는 경우 해당 식별자에서 이러한 프로세스 모두를 쿼리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-577">If you need to manipulate the process using standard API calls, you can query each of these processes in turn for its identifier.</span></span> <span data-ttu-id="67157-578">단독 프로세스 이름을 통해 하지만의 배열을 검색 한 후 프로세스 리소스에 액세스할 수 없는 <xref:System.Diagnostics.Process> 연관 된 구성 요소 프로세스 리소스를 사용 하 여 조작할 수 있습니다 시작, 종료 하 고, 그렇지 않으면 시스템 리소스입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-578">You cannot access process resources through the process name alone but, once you have retrieved an array of <xref:System.Diagnostics.Process> components that have been associated with the process resources, you can start, terminate, and otherwise manipulate the system resources.</span></span>  
  
 <span data-ttu-id="67157-579">원격 컴퓨터 에서도 로컬 컴퓨터의 프로세스를 가져오려면이 오버 로드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-579">You can use this overload to get processes on the local computer as well as on a remote computer.</span></span> <span data-ttu-id="67157-580">사용 하 여 "." 로컬 컴퓨터를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-580">Use "." to specify the local computer.</span></span> <span data-ttu-id="67157-581">기본적으로 로컬 컴퓨터를 사용 하 여 다른 오버 로드가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-581">Another overload exists that uses the local computer by default.</span></span>  
  
 <span data-ttu-id="67157-582">프로세스 통계와 같은 프로세스에 대 한 정보를 보기에 원격 컴퓨터에서 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-582">You can access processes on remote computers only to view information, such as statistics, about the processes.</span></span> <span data-ttu-id="67157-583">종료를 닫고 수 없습니다 (사용 하 여 <xref:System.Diagnostics.Process.Kill%2A>), 또는 원격 컴퓨터에서 프로세스를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-583">You cannot close, terminate (using <xref:System.Diagnostics.Process.Kill%2A>), or start processes on remote computers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-584">다음 예제에서는 로컬 컴퓨터 및 로컬 컴퓨터의 특정 프로세스에서 실행 중인 메모장의 모든 인스턴스는 로컬 컴퓨터에서 실행 중인 프로세스가 현재 프로세스의 정보를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-584">The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</span></span> <span data-ttu-id="67157-585">다음 원격 컴퓨터에서 동일한 프로세스에 대 한 정보를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-585">It then retrieves information for the same processes on a remote computer.</span></span>  
  
 [!code-cpp[Process.GetProcesses_noexception#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.GetProcesses_noexception/CPP/processstaticget.cpp#1)]
 [!code-csharp[Process.GetProcesses_noexception#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.GetProcesses_noexception/CS/processstaticget.cs#1)]
 [!code-vb[Process.GetProcesses_noexception#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.GetProcesses_noexception/VB/processstaticget.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="67157-586"><paramref name="machineName" /> 매개 변수 구문이 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="67157-586">The <paramref name="machineName" /> parameter syntax is invalid.</span></span> <span data-ttu-id="67157-587">길이가 0일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-587">It might have length zero (0).</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="67157-588"><paramref name="machineName" /> 매개 변수가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-588">The <paramref name="machineName" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-589">운영 체제 플랫폼이 원격 컴퓨터에서 이 작업을 지원하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-589">The operating system platform does not support this operation on remote computers.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-590"><paramref name="machineName" />에 연결하려는 시도가 실패했습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-590">The attempt to connect to <paramref name="machineName" /> has failed.</span></span>

<span data-ttu-id="67157-591">또는</span><span class="sxs-lookup"><span data-stu-id="67157-591">-or-</span></span> 
<span data-ttu-id="67157-592">프로세스 정보를 얻는 데 사용되는 성능 카운터 API에 액세스하는 데 문제가 있는 경우.</span><span class="sxs-lookup"><span data-stu-id="67157-592">There are problems accessing the performance counter API's used to get process information.</span></span> <span data-ttu-id="67157-593">이 예외는 Windows NT, Windows 2000 및 Windows XP에만 존재합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-593">This exception is specific to Windows NT, Windows 2000, and Windows XP.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="67157-594">내부 시스템 API에 액세스하는 데 문제가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="67157-594">A problem occurred accessing an underlying system API.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-595">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-595">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-596">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-596">This member cannot be used by partially trusted code.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="67157-597">비관리 코드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-597">to call unmanaged code.</span></span> <span data-ttu-id="67157-598">연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="67157-598">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.ProcessName" />
        <altmember cref="P:System.Diagnostics.Process.MachineName" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcesses" />
        <altmember cref="M:System.Diagnostics.Process.GetCurrentProcess" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Diagnostics.Process.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("Returns the native handle for this process.   The handle is only available if the process was started using this component.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessHandle")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-599">연결된 프로세스의 기본 핸들을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-599">Gets the native handle of the associated process.</span></span></summary>
        <value><span data-ttu-id="67157-600">연결된 프로세스가 시작될 때 운영 체제에서 해당 프로세스에 할당한 핸들입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-600">The handle that the operating system assigned to the associated process when the process was started.</span></span> <span data-ttu-id="67157-601">시스템에서는 이 핸들을 사용하여 프로세스 특성을 추적합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-601">The system uses this handle to keep track of process attributes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-602">응용 프로그램에는 여러 프로세스 정보 및 제어 함수를 매개 변수로 사용할 수 있는 프로세스에 핸들을 가져올 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-602">An application can obtain a handle to a process that can be used as a parameter to many process-information and control functions.</span></span> <span data-ttu-id="67157-603">이 핸들을 사용 하 여 초기화를 <xref:System.Threading.WaitHandle> 하거나 호출 플랫폼과 네이티브 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-603">You can use this handle to initialize a <xref:System.Threading.WaitHandle> or to call native methods with platform invoke.</span></span>  
  
 <span data-ttu-id="67157-604">이 프로세스 핸들은 전용 응용 프로그램 즉, 핸들을 공유할 수 없는 프로세스입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-604">This process handle is private to an application--in other words, process handles cannot be shared.</span></span> <span data-ttu-id="67157-605">프로세스에는 또한 프로세스에 <xref:System.Diagnostics.Process.Id%2A> 는 달리는 <xref:System.Diagnostics.Process.Handle%2A>, 고유한 이며, 따라서 시스템 전체에서 유효 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-605">A process also has a process <xref:System.Diagnostics.Process.Id%2A> which, unlike the <xref:System.Diagnostics.Process.Handle%2A>, is unique and, therefore, valid throughout the system.</span></span>  
  
 <span data-ttu-id="67157-606">호출을 통해 시작 프로세스만 <xref:System.Diagnostics.Process.Start%2A> 설정 합니다 <xref:System.Diagnostics.Process.Handle%2A> 해당 속성 <xref:System.Diagnostics.Process> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="67157-606">Only processes started through a call to <xref:System.Diagnostics.Process.Start%2A> set the <xref:System.Diagnostics.Process.Handle%2A> property of the corresponding <xref:System.Diagnostics.Process> instances.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-607">프로세스가 시작되지 않았거나 종료되었습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-607">The process has not been started or has exited.</span></span> <span data-ttu-id="67157-608">이 <see cref="P:System.Diagnostics.Process.Handle" /> 인스턴스에 연결된 프로세스가 없으므로 <see cref="T:System.Diagnostics.Process" /> 속성을 읽을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-608">The <see cref="P:System.Diagnostics.Process.Handle" /> property cannot be read because there is no process associated with this <see cref="T:System.Diagnostics.Process" /> instance.</span></span>  
  
<span data-ttu-id="67157-609">또는</span><span class="sxs-lookup"><span data-stu-id="67157-609">-or-</span></span> 
<span data-ttu-id="67157-610"><see cref="T:System.Diagnostics.Process" /> 인스턴스가 실행 프로세스에 연결되었지만 모든 액세스 권한을 가진 핸들을 가져오는 데 필요한 사용 권한이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-610">The <see cref="T:System.Diagnostics.Process" /> instance has been attached to a running process but you do not have the necessary permissions to get a handle with full access rights.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="67157-611">원격 컴퓨터에서 실행 중인 프로세스의 <see cref="P:System.Diagnostics.Process.Handle" /> 속성에 액세스한 경우.</span><span class="sxs-lookup"><span data-stu-id="67157-611">You are trying to access the <see cref="P:System.Diagnostics.Process.Handle" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="67157-612">이 속성은 로컬 컴퓨터에서 실행 중인 프로세스에 대해서만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-612">This property is available only for processes that are running on the local computer.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-613">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-613">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-614">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-614">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.Id" />
        <altmember cref="P:System.Diagnostics.Process.ExitCode" />
        <altmember cref="P:System.Diagnostics.Process.ExitTime" />
        <altmember cref="P:System.Diagnostics.Process.HandleCount" />
        <altmember cref="M:System.Diagnostics.Process.Start" />
        <altmember cref="M:System.Diagnostics.Process.Refresh" />
      </Docs>
    </Member>
    <Member MemberName="HandleCount">
      <MemberSignature Language="C#" Value="public int HandleCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HandleCount" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.HandleCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HandleCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HandleCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.HandleCount : int" Usage="System.Diagnostics.Process.HandleCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("Handles for this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessHandleCount")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-615">프로세스에서 연 핸들 수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-615">Gets the number of handles opened by the process.</span></span></summary>
        <value><span data-ttu-id="67157-616">프로세스에서 연 운영 체제 핸들 수입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-616">The number of operating system handles the process has opened.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-617">핸들 개체를 참조 하는 프로세스에 대해 알아볼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-617">Handles provide a way for a process to refer to objects.</span></span> <span data-ttu-id="67157-618">프로세스는 파일, 리소스, 메시지 큐 및 기타 여러 운영 체제 개체에 대 한 핸들을 가져올 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-618">A process can obtain handles to files, resources, message queues, and many other operating system objects.</span></span> <span data-ttu-id="67157-619">운영 체제 핸들 수가 0 일 경우에 프로세스와 연결 된 메모리를 회수 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-619">The operating system reclaims the memory associated with the process only when the handle count is zero.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-620">플랫폼이 Windows 98 또는 Windows Millennium Edition(Windows Me)입니다. Windows 98 및 Windows Me에서 이 속성에 액세스하려면 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 속성을 <see langword="false" />로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-620">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set the <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> property to <see langword="false" /> to access this property on Windows 98 and Windows Me.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-621">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-621">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-622">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-622">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.Handle" />
        <altmember cref="M:System.Diagnostics.Process.Start" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
      </Docs>
    </Member>
    <Member MemberName="HasExited">
      <MemberSignature Language="C#" Value="public bool HasExited { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasExited" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.HasExited" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasExited As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasExited { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasExited : bool" Usage="System.Diagnostics.Process.HasExited" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("Indicates if the associated process has been terminated.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessTerminated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-623">연결된 프로세스가 종료되었는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-623">Gets a value indicating whether the associated process has been terminated.</span></span></summary>
        <value><span data-ttu-id="67157-624"><see cref="T:System.Diagnostics.Process" /> 구성 요소가 참조하는 운영 체제 프로세스가 종료되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-624"><see langword="true" /> if the operating system process referenced by the <see cref="T:System.Diagnostics.Process" /> component has terminated; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-625">값이 `true` 에 대 한 <xref:System.Diagnostics.Process.HasExited%2A> 정상 또는 비정상으로 연결된 된 프로세스는 종료를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="67157-625">A value of `true` for <xref:System.Diagnostics.Process.HasExited%2A> indicates that the associated process has terminated, either normally or abnormally.</span></span> <span data-ttu-id="67157-626">요청 하거나 연결된 된 프로세스가 종료를 호출 하 여 강제로 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 또는 <xref:System.Diagnostics.Process.Kill%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-626">You can request or force the associated process to exit by calling <xref:System.Diagnostics.Process.CloseMainWindow%2A> or <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="67157-627">핸들을 프로세스에 열려 있으면 프로세스 작업이 종료 하지만 핸들, 종료 코드 및 종료 시간과 같은 프로세스에 대 한 관리 정보는 유지 하는 경우 운영 체제는 프로세스 메모리를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-627">If a handle is open to the process, the operating system releases the process memory when the process has exited, but retains administrative information about the process, such as the handle, exit code, and exit time.</span></span> <span data-ttu-id="67157-628">이 정보를 얻으려면 사용할 수 있습니다 합니다 <xref:System.Diagnostics.Process.ExitCode%2A> 고 <xref:System.Diagnostics.Process.ExitTime%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-628">To get this information, you can use the <xref:System.Diagnostics.Process.ExitCode%2A> and <xref:System.Diagnostics.Process.ExitTime%2A> properties.</span></span> <span data-ttu-id="67157-629">이러한 속성은이 구성 요소에서 시작 된 프로세스에 대 한 자동으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="67157-629">These properties are populated automatically for processes that were started by this component.</span></span> <span data-ttu-id="67157-630">관리 정보를 놓을 때 모든는 <xref:System.Diagnostics.Process> 시스템 프로세스와 연관 된 구성 요소 제거 되 고 종료 된 프로세스에 핸들이 더 이상 없을 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-630">The administrative information is released when all the <xref:System.Diagnostics.Process> components that are associated with the system process are destroyed and hold no more handles to the exited process.</span></span>  
  
 <span data-ttu-id="67157-631">코드와 독립적으로 프로세스를 종료할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-631">A process can terminate independently of your code.</span></span> <span data-ttu-id="67157-632">시스템 업데이트의 값이 구성이 요소를 사용 하는 프로세스를 시작한 경우 <xref:System.Diagnostics.Process.HasExited%2A> 자동으로 연결된 된 프로세스가 종료 하지 독립적으로 하는 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-632">If you started the process using this component, the system updates the value of <xref:System.Diagnostics.Process.HasExited%2A> automatically, even if the associated process exits independently.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-633">비동기 이벤트 처리기에 표준 출력이 리디렉션 되었는지 하는 경우는 출력 처리 완료 되지 않을 때이 속성은 반환 수 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-633">When standard output has been redirected to asynchronous event handlers, it is possible that output processing will not have completed when this property returns `true`.</span></span> <span data-ttu-id="67157-634">비동기 이벤트 처리 완료 되었다는 것을 보장 하려면 호출을 <xref:System.Diagnostics.Process.WaitForExit> 체크 인하기 전에 매개 변수가 없는 오버 로드 <xref:System.Diagnostics.Process.HasExited%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-634">To ensure that asynchronous event handling has been completed, call the <xref:System.Diagnostics.Process.WaitForExit> overload that takes no parameter before checking <xref:System.Diagnostics.Process.HasExited%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-635">다음 예제에서는 메모장의 인스턴스를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-635">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="67157-636">그런 다음 10 초 동안 최대 2 초 간격 연결된 된 프로세스의 실제 메모리 사용량을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-636">It then retrieves the physical memory usage of the associated process at 2 second intervals for a maximum of 10 seconds.</span></span> <span data-ttu-id="67157-637">이 예제에서는 10 초 경과 되기 전에 프로세스가 종료 여부를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-637">The example detects whether the process exits before 10 seconds have elapsed.</span></span> <span data-ttu-id="67157-638">이 예제에서는 10 초 후 실행 중인 경우 프로세스를 닫습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-638">The example closes the process if it is still running after 10 seconds.</span></span>  
  
 [!code-cpp[process_refresh#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_refresh/CPP/process_refresh.cpp#1)]
 [!code-csharp[process_refresh#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_refresh/CS/process_refresh.cs#1)]
 [!code-vb[process_refresh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_refresh/VB/process_refresh.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-639">이 개체에 연결된 프로세스가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-639">There is no process associated with the object.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="67157-640">프로세스의 종료 코드를 검색할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-640">The exit code for the process could not be retrieved.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="67157-641">원격 컴퓨터에서 실행 중인 프로세스의 <see cref="P:System.Diagnostics.Process.HasExited" /> 속성에 액세스한 경우.</span><span class="sxs-lookup"><span data-stu-id="67157-641">You are trying to access the <see cref="P:System.Diagnostics.Process.HasExited" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="67157-642">이 속성은 로컬 컴퓨터에서 실행 중인 프로세스에 대해서만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-642">This property is available only for processes that are running on the local computer.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-643">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-643">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-644">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-644">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.ExitCode" />
        <altmember cref="P:System.Diagnostics.Process.ExitTime" />
        <altmember cref="M:System.Diagnostics.Process.WaitForExit(System.Int32)" />
        <altmember cref="P:System.Diagnostics.Process.EnableRaisingEvents" />
        <altmember cref="M:System.Diagnostics.Process.OnExited" />
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public int Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Id" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Id { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : int" Usage="System.Diagnostics.Process.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The unique identifier for the process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessId")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-645">연결된 프로세스의 고유 식별자를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-645">Gets the unique identifier for the associated process.</span></span></summary>
        <value><span data-ttu-id="67157-646">이 <see cref="T:System.Diagnostics.Process" /> 인스턴스에서 참조하는 프로세스의 고유 식별자입니다. 이 식별자는 시스템에서 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-646">The system-generated unique identifier of the process that is referenced by this <see cref="T:System.Diagnostics.Process" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-647">프로세스 <xref:System.Diagnostics.Process.Id%2A> 연결된 된 프로세스를 실행 하지 않는 경우에 올바르지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-647">The process <xref:System.Diagnostics.Process.Id%2A> is not valid if the associated process is not running.</span></span> <span data-ttu-id="67157-648">프로세스를 검색 하기 전에 실행 되 고 있는지 확인 해야 하므로 <xref:System.Diagnostics.Process.Id%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-648">Therefore, you should ensure that the process is running before attempting to retrieve the <xref:System.Diagnostics.Process.Id%2A> property.</span></span> <span data-ttu-id="67157-649">프로세스가 종료 될 때까지 프로세스 식별자입니다. 시스템 전체에서 프로세스를 고유 하 게 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-649">Until the process terminates, the process identifier uniquely identifies the process throughout the system.</span></span>  
  
 <span data-ttu-id="67157-650">새 로컬 또는 원격 컴퓨터에서 실행 중인 프로세스에 연결할 수 있습니다 <xref:System.Diagnostics.Process> 프로세스 식별자를 전달 하 여 인스턴스를 <xref:System.Diagnostics.Process.GetProcessById%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="67157-650">You can connect a process that is running on a local or remote computer to a new <xref:System.Diagnostics.Process> instance by passing the process identifier to the <xref:System.Diagnostics.Process.GetProcessById%2A> method.</span></span> <span data-ttu-id="67157-651"><xref:System.Diagnostics.Process.GetProcessById%2A> `static` 새 구성 요소를 만드는 메서드를 가져오거나 설정 합니다 <xref:System.Diagnostics.Process.Id%2A> 새 속성 <xref:System.Diagnostics.Process> 자동으로 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="67157-651"><xref:System.Diagnostics.Process.GetProcessById%2A> is a `static` method that creates a new component and sets the <xref:System.Diagnostics.Process.Id%2A> property for the new <xref:System.Diagnostics.Process> instance automatically.</span></span>  
  
 <span data-ttu-id="67157-652">시스템에서 프로세스 식별자를 재사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-652">Process identifiers can be reused by the system.</span></span> <span data-ttu-id="67157-653"><xref:System.Diagnostics.Process.Id%2A> 연결된 된 프로세스가 실행 되는 동안에 속성 값은 고유 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-653">The <xref:System.Diagnostics.Process.Id%2A> property value is unique only while the associated process is running.</span></span> <span data-ttu-id="67157-654">시스템 프로세스 종료 한 후 다시 사용할 수는 <xref:System.Diagnostics.Process.Id%2A> 는 관련 되지 않은 프로세스에 대 한 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-654">After the process has terminated, the system can reuse the <xref:System.Diagnostics.Process.Id%2A> property value for an unrelated process.</span></span>  
  
 <span data-ttu-id="67157-655">시스템에서 고유 식별자 이므로 전달할 수 있습니다 다른 스레드에 전달 하는 대신 한 <xref:System.Diagnostics.Process> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="67157-655">Because the identifier is unique on the system, you can pass it to other threads as an alternative to passing a <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="67157-656">이 작업은 시스템 리소스를 저장 하면서 프로세스는 올바르게 식별할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-656">This action can save system resources yet guarantee that the process is correctly identified.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-657">다음 예제에서는 가져오는 방법을 보여 줍니다는 <xref:System.Diagnostics.Process.Id%2A> 모든 응용 프로그램의 인스턴스를 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-657">The following example demonstrates how to obtain the <xref:System.Diagnostics.Process.Id%2A> for all running instances of an application.</span></span> <span data-ttu-id="67157-658">메모장의 새 인스턴스를 만듭니다, 메모장의 인스턴스를 모두 나열 및 입력을 사용 하면 다음 코드는 <xref:System.Diagnostics.Process.Id%2A> 특정 인스턴스를 제거할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-658">The code creates a new instance of Notepad, lists all the instances of Notepad, and then allows the user to enter the <xref:System.Diagnostics.Process.Id%2A> number to remove a specific instance.</span></span>  
  
 [!code-csharp[System.Diagnostics.Process.Id#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Process.Id/CS/program.cs#1)]
 [!code-vb[System.Diagnostics.Process.Id#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Process.Id/VB/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-659">프로세스의 <see cref="P:System.Diagnostics.Process.Id" /> 속성이 설정되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="67157-659">The process's <see cref="P:System.Diagnostics.Process.Id" /> property has not been set.</span></span>  
  
<span data-ttu-id="67157-660">또는</span><span class="sxs-lookup"><span data-stu-id="67157-660">-or-</span></span> 
<span data-ttu-id="67157-661">이 <see cref="T:System.Diagnostics.Process" /> 개체에 연결된 프로세스가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-661">There is no process associated with this <see cref="T:System.Diagnostics.Process" /> object.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-662">플랫폼이 Windows 98 또는 Windows Millennium Edition(Windows Me)입니다. Windows 98 및 Windows Me에서 이 속성에 액세스하려면 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 속성을 <see langword="false" />로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-662">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set the <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> property to <see langword="false" /> to access this property on Windows 98 and Windows Me.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-663">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-663">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-664">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-664">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.Handle" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public void Kill ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Kill() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Kill" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Kill();" />
      <MemberSignature Language="F#" Value="member this.Kill : unit -&gt; unit" Usage="process.Kill " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="67157-665">연결된 프로세스를 즉시 중지합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-665">Immediately stops the associated process.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-666"><xref:System.Diagnostics.Process.Kill%2A> 프로세스의 종료를 강제로 수행 하는 동안 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 만 종료를 요청 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-666"><xref:System.Diagnostics.Process.Kill%2A> forces a termination of the process, while <xref:System.Diagnostics.Process.CloseMainWindow%2A> only requests a termination.</span></span> <span data-ttu-id="67157-667">그래픽 인터페이스를 사용 하 여 프로세스를 실행할 때 해당 메시지 루프는 대기 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-667">When a process with a graphical interface is executing, its message loop is in a wait state.</span></span> <span data-ttu-id="67157-668">운영 체제에서 프로세스에 Windows 메시지를 보낼 때마다 메시지 루프를 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-668">The message loop executes every time a Windows message is sent to the process by the operating system.</span></span> <span data-ttu-id="67157-669">호출 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 는 잘 구성 된 응용 프로그램에서 자식 창을 닫고 응용 프로그램에 대 한 실행 중인 모든 메시지 루프를 취소 주 창에 가까운 요청을 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="67157-669">Calling <xref:System.Diagnostics.Process.CloseMainWindow%2A> sends a request to close to the main window, which, in a well-formed application, closes child windows and revokes all running message loops for the application.</span></span> <span data-ttu-id="67157-670">호출 하 여 프로세스를 종료 하는 요청 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 종료 하도록 응용 프로그램을 강제 적용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-670">The request to exit the process by calling <xref:System.Diagnostics.Process.CloseMainWindow%2A> does not force the application to quit.</span></span> <span data-ttu-id="67157-671">응용 프로그램을 끝내기 전에 사용자 확인 요청 또는 종료를 거부할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-671">The application can ask for user verification before quitting, or it can refuse to quit.</span></span> <span data-ttu-id="67157-672">종료 하도록 응용 프로그램을 강제로 사용 하 여를 <xref:System.Diagnostics.Process.Kill%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="67157-672">To force the application to quit, use the <xref:System.Diagnostics.Process.Kill%2A> method.</span></span> <span data-ttu-id="67157-673">동작 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 시스템 메뉴를 사용 하 여 응용 프로그램의 주 창을 닫으면 사용자와 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-673">The behavior of <xref:System.Diagnostics.Process.CloseMainWindow%2A> is identical to that of a user closing an application's main window using the system menu.</span></span> <span data-ttu-id="67157-674">따라서 주 창을 닫으면 프로세스를 종료 하는 요청은 즉시 취소 하려면 응용 프로그램을 강제로 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-674">Therefore, the request to exit the process by closing the main window does not force the application to quit immediately.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-675"><xref:System.Diagnostics.Process.Kill%2A> 메서드를 비동기적으로 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-675">The <xref:System.Diagnostics.Process.Kill%2A> method executes asynchronously.</span></span> <span data-ttu-id="67157-676">호출한 후는 <xref:System.Diagnostics.Process.Kill%2A> 메서드를 호출 합니다 <xref:System.Diagnostics.Process.WaitForExit%2A> 메서드를 종료 하거나 확인 하는 프로세스에 대 한 대기를 <xref:System.Diagnostics.Process.HasExited%2A> 된 프로세스가 종료 된 경우를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-676">After calling the <xref:System.Diagnostics.Process.Kill%2A> method, call the <xref:System.Diagnostics.Process.WaitForExit%2A> method to wait for the process to exit, or check the <xref:System.Diagnostics.Process.HasExited%2A> property to determine if the process has exited.</span></span>  
  
 <span data-ttu-id="67157-677">프로세스에 의해 편집 하는 데이터 또는 프로세스에 할당 된 리소스 손실 될 수 있습니다를 호출 하면 <xref:System.Diagnostics.Process.Kill%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-677">Data edited by the process or resources allocated to the process can be lost if you call <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="67157-678"><xref:System.Diagnostics.Process.Kill%2A> 비정상적인 프로세스 종료를 사용 하면 필요한 경우에 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-678"><xref:System.Diagnostics.Process.Kill%2A> causes an abnormal process termination and should be used only when necessary.</span></span> <span data-ttu-id="67157-679"><xref:System.Diagnostics.Process.CloseMainWindow%2A> 과정을 순서 대로 종료 있으며 인터페이스를 사용 하 여 응용 프로그램에 대 한 것이 좋습니다 이므로 모든 창을 닫습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-679"><xref:System.Diagnostics.Process.CloseMainWindow%2A> enables an orderly termination of the process and closes all windows, so it is preferable for applications with an interface.</span></span> <span data-ttu-id="67157-680">하는 경우 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 사용할 수 있습니다 실패 <xref:System.Diagnostics.Process.Kill%2A> 프로세스를 종료 하려면.</span><span class="sxs-lookup"><span data-stu-id="67157-680">If <xref:System.Diagnostics.Process.CloseMainWindow%2A> fails, you can use <xref:System.Diagnostics.Process.Kill%2A> to terminate the process.</span></span> <span data-ttu-id="67157-681"><xref:System.Diagnostics.Process.Kill%2A> 그래픽 인터페이스를 갖지 않는 프로세스를 종료 하는 유일한 방법이입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-681"><xref:System.Diagnostics.Process.Kill%2A> is the only way to terminate processes that do not have graphical interfaces.</span></span>  
  
 <span data-ttu-id="67157-682">호출할 수 있습니다 <xref:System.Diagnostics.Process.Kill%2A> 고 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 로컬 컴퓨터에서 실행 중인 프로세스에 대해서만 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-682">You can call <xref:System.Diagnostics.Process.Kill%2A> and <xref:System.Diagnostics.Process.CloseMainWindow%2A> only for processes that are running on the local computer.</span></span> <span data-ttu-id="67157-683">종료 하려면 원격 컴퓨터에서 프로세스 할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-683">You cannot cause processes on remote computers to exit.</span></span> <span data-ttu-id="67157-684">원격 컴퓨터에서 실행 중인 프로세스에 대 한 정보를 보기만 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-684">You can only view information for processes running on remote computers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-685">경우에 대 한 호출을 <xref:System.Diagnostics.Process.Kill%2A> 메서드는 프로세스를 종료 하는 동안 만들어집니다는 <xref:System.ComponentModel.Win32Exception> 액세스가 거부에 대해 throw 되 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-685">If the call to the <xref:System.Diagnostics.Process.Kill%2A> method is made while the process is currently terminating, a <xref:System.ComponentModel.Win32Exception> is thrown for Access Denied.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="67157-686">연결된 프로세스를 종료할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-686">The associated process could not be terminated.</span></span>  
  
<span data-ttu-id="67157-687">또는</span><span class="sxs-lookup"><span data-stu-id="67157-687">-or-</span></span> 
<span data-ttu-id="67157-688">프로세스가 종료된 경우</span><span class="sxs-lookup"><span data-stu-id="67157-688">The process is terminating.</span></span>  
  
<span data-ttu-id="67157-689">또는</span><span class="sxs-lookup"><span data-stu-id="67157-689">-or-</span></span> 
<span data-ttu-id="67157-690">연결된 프로세스가 Win16 실행 파일인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-690">The associated process is a Win16 executable.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="67157-691">원격 컴퓨터에서 실행 중인 프로세스의 <see cref="M:System.Diagnostics.Process.Kill" />에 대해 호출을 시도했지만</span><span class="sxs-lookup"><span data-stu-id="67157-691">You are attempting to call <see cref="M:System.Diagnostics.Process.Kill" /> for a process that is running on a remote computer.</span></span> <span data-ttu-id="67157-692">로컬 컴퓨터에서 실행 중인 프로세스에 대해서만 해당 메서드를 사용할 수 있는 경우.</span><span class="sxs-lookup"><span data-stu-id="67157-692">The method is available only for processes running on the local computer.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-693">프로세스가 이미 종료된 경우</span><span class="sxs-lookup"><span data-stu-id="67157-693">The process has already exited.</span></span>  
  
<span data-ttu-id="67157-694">또는</span><span class="sxs-lookup"><span data-stu-id="67157-694">-or-</span></span> 
<span data-ttu-id="67157-695">이 <see cref="T:System.Diagnostics.Process" /> 개체에 연결된 프로세스가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-695">There is no process associated with this <see cref="T:System.Diagnostics.Process" /> object.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-696">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-696">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-697">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-697">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.Environment.Exit(System.Int32)" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Start" />
      </Docs>
    </Member>
    <Member MemberName="LeaveDebugMode">
      <MemberSignature Language="C#" Value="public static void LeaveDebugMode ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LeaveDebugMode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.LeaveDebugMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub LeaveDebugMode ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void LeaveDebugMode();" />
      <MemberSignature Language="F#" Value="static member LeaveDebugMode : unit -&gt; unit" Usage="System.Diagnostics.Process.LeaveDebugMode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="67157-698"><see cref="T:System.Diagnostics.Process" /> 구성 요소를 특수 모드에서 실행되는 운영 체제 프로세스와 상호 작용할 수 없는 상태로 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="67157-698">Takes a <see cref="T:System.Diagnostics.Process" /> component out of the state that lets it interact with operating system processes that run in a special mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-699">일부 운영 체제 프로세스를 특수 모드에서 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-699">Some operating system processes run in a special mode.</span></span> <span data-ttu-id="67157-700">속성을 읽거나 이러한 프로세스에 연결 하려고 하지 않는 가능한 호출한 <xref:System.Diagnostics.Process.EnterDebugMode%2A> 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-700">Attempting to read properties of or attach to these processes is not possible unless you have called <xref:System.Diagnostics.Process.EnterDebugMode%2A> on the component.</span></span> <span data-ttu-id="67157-701">호출 <xref:System.Diagnostics.Process.LeaveDebugMode%2A> 특수 모드에서 실행 되는 이러한 프로세스에 대 한 액세스를 더 이상 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-701">Call <xref:System.Diagnostics.Process.LeaveDebugMode%2A> when you no longer need access to these processes that run in special mode.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-702">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-702">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-703">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-703">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.Diagnostics.Process.EnterDebugMode" />
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MachineName : string" Usage="System.Diagnostics.Process.MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The name of the machine the running the process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessMachineName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-704">연결된 프로세스가 실행 중인 컴퓨터 이름을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-704">Gets the name of the computer the associated process is running on.</span></span></summary>
        <value><span data-ttu-id="67157-705">연결된 프로세스가 실행 중인 컴퓨터 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-705">The name of the computer that the associated process is running on.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-706">하지만 원격 컴퓨터에서 실행 중인 프로세스에 대 한 프로세스 정보를 호출할 수 없습니다 및 통계 데이터를 볼 수 있습니다 <xref:System.Diagnostics.Process.Start%2A>, <xref:System.Diagnostics.Process.CloseMainWindow%2A>, 또는 <xref:System.Diagnostics.Process.Kill%2A> 원격 컴퓨터.</span><span class="sxs-lookup"><span data-stu-id="67157-706">You can view statistical data and process information for processes running on remote computers but you cannot call <xref:System.Diagnostics.Process.Start%2A>, <xref:System.Diagnostics.Process.CloseMainWindow%2A>, or <xref:System.Diagnostics.Process.Kill%2A> on remote computers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-707">연결된 된 프로세스를 로컬 컴퓨터에서 실행 하는 경우 기간을 반환 (".")는 컴퓨터 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-707">When the associated process is executing on the local machine, this property returns a period (".") for the machine name.</span></span> <span data-ttu-id="67157-708">기능을 사용할지는 <xref:System.Environment.MachineName%2A?displayProperty=nameWithType> 올바른 컴퓨터 이름을 가져올 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-708">You should use the <xref:System.Environment.MachineName%2A?displayProperty=nameWithType> property to get the correct machine name.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-709">사용 하려면 먼저 다음 예제에서는 원격 컴퓨터에서 메모장의 인스턴스를 하나 이상를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-709">To use the following example you must first start at least one instance of Notepad on a remote computer.</span></span> <span data-ttu-id="67157-710">이 예제에서는 요청 메모장 실행 되 고 각각을 표시 하는 원격 컴퓨터의 이름을 <xref:System.Diagnostics.Process.ProcessName%2A>, <xref:System.Diagnostics.Process.Id%2A>, 및 <xref:System.Diagnostics.Process.MachineName%2A> 각 인스턴스에 대 한 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-710">The example requests the name of the remote computer on which Notepad is running, and then displays the respective <xref:System.Diagnostics.Process.ProcessName%2A>, <xref:System.Diagnostics.Process.Id%2A>, and <xref:System.Diagnostics.Process.MachineName%2A> properties for each instance.</span></span>  
  
 [!code-csharp[process_GetProcessesByName2_2#2](~/samples/snippets/csharp/VS_Snippets_CLR/Process_GetProcessesByName2_2/CS/process_getprocessesbyname2_2.cs#2)]
 [!code-vb[process_GetProcessesByName2_2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process_GetProcessesByName2_2/VB/process_getprocessesbyname2_2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-711">이 <see cref="T:System.Diagnostics.Process" /> 개체에 연결된 프로세스가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-711">There is no process associated with this <see cref="T:System.Diagnostics.Process" /> object.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-712">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-712">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-713">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-713">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.Diagnostics.Process.GetProcesses" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessesByName(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MainModule">
      <MemberSignature Language="C#" Value="public System.Diagnostics.ProcessModule MainModule { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.ProcessModule MainModule" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.MainModule" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MainModule As ProcessModule" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::ProcessModule ^ MainModule { System::Diagnostics::ProcessModule ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MainModule : System.Diagnostics.ProcessModule" Usage="System.Diagnostics.Process.MainModule" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The main module of the process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessMainModule")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ProcessModule</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-714">연결된 프로세스의 주 모듈을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-714">Gets the main module for the associated process.</span></span></summary>
        <value><span data-ttu-id="67157-715">프로세스를 시작하는 데 사용된 <see cref="T:System.Diagnostics.ProcessModule" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-715">The <see cref="T:System.Diagnostics.ProcessModule" /> that was used to start the process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-716">프로세스 모듈 특정 프로세스에 로드 되는.dll 또는.exe 파일을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="67157-716">A process module represents a.dll or .exe file that is loaded into a particular process.</span></span> <span data-ttu-id="67157-717"><xref:System.Diagnostics.Process.MainModule%2A> 속성을 통해 모듈 이름, 파일 이름 및 모듈 메모리 세부 정보를 포함 하 여 프로세스를 시작 하는 데 사용 하는 실행 파일에 대 한 정보를 볼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-717">The <xref:System.Diagnostics.Process.MainModule%2A> property lets you view information about the executable used to start the process, including the module name, file name, and module memory details.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="67157-718">원격 컴퓨터에서 실행 중인 프로세스의 <see cref="P:System.Diagnostics.Process.MainModule" /> 속성에 액세스한 경우.</span><span class="sxs-lookup"><span data-stu-id="67157-718">You are trying to access the <see cref="P:System.Diagnostics.Process.MainModule" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="67157-719">이 속성은 로컬 컴퓨터에서 실행 중인 프로세스에 대해서만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-719">This property is available only for processes that are running on the local computer.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="67157-720">32비트 프로세스에서 64비트 프로세스의 모듈에 액세스하려고 시도하는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-720">A 32-bit process is trying to access the modules of a 64-bit process.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-721">플랫폼이 Windows 98 또는 Windows Millennium Edition(Me)입니다. Windows 98 및 Windows Me에서 이 속성에 액세스하려면 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" />를 <see langword="false" />로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-721">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> to <see langword="false" /> to access this property on Windows 98 and Windows Me.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-722">프로세스 <see cref="P:System.Diagnostics.Process.Id" />를 사용할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-722">The process <see cref="P:System.Diagnostics.Process.Id" /> is not available.</span></span>  
  
<span data-ttu-id="67157-723">또는</span><span class="sxs-lookup"><span data-stu-id="67157-723">-or-</span></span> 
<span data-ttu-id="67157-724">프로세스가 종료된 경우</span><span class="sxs-lookup"><span data-stu-id="67157-724">The process has exited.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-725">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-725">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-726">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-726">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.Modules" />
      </Docs>
    </Member>
    <Member MemberName="MainWindowHandle">
      <MemberSignature Language="C#" Value="public IntPtr MainWindowHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int MainWindowHandle" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.MainWindowHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MainWindowHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr MainWindowHandle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.MainWindowHandle : nativeint" Usage="System.Diagnostics.Process.MainWindowHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The handle of the main window of the process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessMainWindowHandle")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-727">연결된 프로세스의 주 창에 대한 창 핸들을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-727">Gets the window handle of the main window of the associated process.</span></span></summary>
        <value><span data-ttu-id="67157-728">연결된 프로세스의 주 창에 대한 창 핸들입니다. 이 창 핸들은 시스템에서 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-728">The system-generated window handle of the main window of the associated process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-729">기본 기간은 현재 포커스를가지고 하는 프로세스에 의해 열린 창을 (의 <xref:System.Windows.Forms.Form.TopLevel%2A> 양식).</span><span class="sxs-lookup"><span data-stu-id="67157-729">The main window is the window opened by the process that currently has the focus (the <xref:System.Windows.Forms.Form.TopLevel%2A> form).</span></span> <span data-ttu-id="67157-730">사용 해야 합니다는 <xref:System.Diagnostics.Process.Refresh%2A> 새로 고침 하는 방법의 <xref:System.Diagnostics.Process> 변경 된 경우 현재 주 창 핸들을 가져올 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-730">You must use the <xref:System.Diagnostics.Process.Refresh%2A> method to refresh the <xref:System.Diagnostics.Process> object to get the current main window handle if it has changed.</span></span> <span data-ttu-id="67157-731">창 핸들을 캐시 되므로 일반적으로 사용 <xref:System.Diagnostics.Process.Refresh%2A> 현재 핸들을 검색할 수 있다고 보장 하기 위해 미리 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-731">In general, because the window handle is cached, use <xref:System.Diagnostics.Process.Refresh%2A> beforehand to guarantee that you'll retrieve the current handle.</span></span>  
  
 <span data-ttu-id="67157-732">가져올 수 있습니다는 <xref:System.Diagnostics.Process.MainWindowHandle%2A> 로컬 컴퓨터에서 실행 중인 프로세스에 대해서만 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-732">You can get the <xref:System.Diagnostics.Process.MainWindowHandle%2A> property only for processes that are running on the local computer.</span></span> <span data-ttu-id="67157-733"><xref:System.Diagnostics.Process.MainWindowHandle%2A> 속성이 프로세스와 관련 된 창을 고유 하 게 식별 하는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-733">The <xref:System.Diagnostics.Process.MainWindowHandle%2A> property is a value that uniquely identifies the window that is associated with the process.</span></span>  
  
 <span data-ttu-id="67157-734">프로세스에 프로세스 그래픽 인터페이스가 하는 경우에 연결 된 주 창이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-734">A process has a main window associated with it only if the process has a graphical interface.</span></span> <span data-ttu-id="67157-735">연결된 된 프로세스에 주 창이 없는 경우는 <xref:System.Diagnostics.Process.MainWindowHandle%2A> 값은 0입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-735">If the associated process does not have a main window, the <xref:System.Diagnostics.Process.MainWindowHandle%2A> value is zero.</span></span> <span data-ttu-id="67157-736">값 0 숨겨져 있는 경우는 프로세스, 작업 표시줄에 표시 되지 않는 처리 이기도 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-736">The value is also zero for processes that have been hidden, that is, processes that are not visible in the taskbar.</span></span> <span data-ttu-id="67157-737">이 작업 표시줄의 맨 오른쪽 알림 영역에서 아이콘으로 표시 되는 프로세스에 대 한 사례 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-737">This can be the case for processes that appear as icons in the notification area, at the far right of the taskbar.</span></span>  
  
 <span data-ttu-id="67157-738">프로세스를 방금 시작한 경우의 주 창 핸들을 사용 하려면 사용을 고려 합니다 <xref:System.Diagnostics.Process.WaitForInputIdle%2A> 주 창 핸들이 만들어졌는지 확인 시작이 완료 하는 프로세스를 허용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-738">If you have just started a process and want to use its main window handle, consider using the <xref:System.Diagnostics.Process.WaitForInputIdle%2A> method to allow the process to finish starting, ensuring that the main window handle has been created.</span></span> <span data-ttu-id="67157-739">그렇지 않으면 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-739">Otherwise, an exception will be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-740">프로세스가 종료되어 <see cref="P:System.Diagnostics.Process.MainWindowHandle" />이 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="67157-740">The <see cref="P:System.Diagnostics.Process.MainWindowHandle" /> is not defined because the process has exited.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="67157-741">원격 컴퓨터에서 실행 중인 프로세스의 <see cref="P:System.Diagnostics.Process.MainWindowHandle" /> 속성에 액세스한 경우.</span><span class="sxs-lookup"><span data-stu-id="67157-741">You are trying to access the <see cref="P:System.Diagnostics.Process.MainWindowHandle" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="67157-742">이 속성은 로컬 컴퓨터에서 실행 중인 프로세스에 대해서만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-742">This property is available only for processes that are running on the local computer.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-743">플랫폼이 Windows 98 또는 Windows Millennium Edition(Me)입니다. Windows 98 및 Windows Me에서 이 속성에 액세스하려면 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" />를 <see langword="false" />로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-743">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> to <see langword="false" /> to access this property on Windows 98 and Windows Me.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-744">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-744">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-745">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-745">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.MainWindowTitle" />
        <altmember cref="P:System.Diagnostics.Process.MainModule" />
      </Docs>
    </Member>
    <Member MemberName="MainWindowTitle">
      <MemberSignature Language="C#" Value="public string MainWindowTitle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MainWindowTitle" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.MainWindowTitle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MainWindowTitle As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MainWindowTitle { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MainWindowTitle : string" Usage="System.Diagnostics.Process.MainWindowTitle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The title of the main window of the process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessMainWindowTitle")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-746">프로세스의 주 창에 대한 캡션을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-746">Gets the caption of the main window of the process.</span></span></summary>
        <value><span data-ttu-id="67157-747">프로세스의 주 창 제목입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-747">The main window title of the process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-748">프로세스에 프로세스 그래픽 인터페이스가 하는 경우에 연결 된 주 창이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-748">A process has a main window associated with it only if the process has a graphical interface.</span></span> <span data-ttu-id="67157-749">연결된 된 프로세스에 주 창이 없으면 (되도록 <xref:System.Diagnostics.Process.MainWindowHandle%2A> 가 0), <xref:System.Diagnostics.Process.MainWindowTitle%2A> 은 빈 문자열 ("").</span><span class="sxs-lookup"><span data-stu-id="67157-749">If the associated process does not have a main window (so that <xref:System.Diagnostics.Process.MainWindowHandle%2A> is zero), <xref:System.Diagnostics.Process.MainWindowTitle%2A> is an empty string ("").</span></span> <span data-ttu-id="67157-750">프로세스를 방금 시작한 하 고 주 창 제목을 사용 하려고 할 경우 사용을 고려 합니다 <xref:System.Diagnostics.Process.WaitForInputIdle%2A> 주 창 핸들이 만들어졌는지 확인 시작이 완료 하는 프로세스를 허용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-750">If you have just started a process and want to use its main window title, consider using the <xref:System.Diagnostics.Process.WaitForInputIdle%2A> method to allow the process to finish starting, ensuring that the main window handle has been created.</span></span> <span data-ttu-id="67157-751">그렇지 않으면 시스템에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-751">Otherwise, the system throws an exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-752">현재 포커스가 있는; 창인지 주 창 프로세스에 대 한 기본 창 되지 않을 수 있습니다이 note 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-752">The main window is the window that currently has the focus; note that this might not be the primary window for the process.</span></span> <span data-ttu-id="67157-753">사용 해야 합니다는 <xref:System.Diagnostics.Process.Refresh%2A> 새로 고침 하는 방법의 <xref:System.Diagnostics.Process> 변경 된 경우 현재 주 창 핸들을 가져올 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-753">You must use the <xref:System.Diagnostics.Process.Refresh%2A> method to refresh the <xref:System.Diagnostics.Process> object to get the current main window handle if it has changed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-754">다음 예제에서는 메모장의 인스턴스를 시작한 프로세스의 주 창의 캡션을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-754">The following example starts an instance of Notepad and retrieves the caption of the main window of the process.</span></span>  
  
 [!code-cpp[process_MainWindowTitle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process_MainWindowTitle/CPP/process_mainwindowtitle.cpp#1)]
 [!code-csharp[process_MainWindowTitle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process_MainWindowTitle/CS/process_mainwindowtitle.cs#1)]
 [!code-vb[process_MainWindowTitle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process_MainWindowTitle/VB/process_mainwindowtitle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-755">프로세스가 종료되어 <see cref="P:System.Diagnostics.Process.MainWindowTitle" /> 속성이 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="67157-755">The <see cref="P:System.Diagnostics.Process.MainWindowTitle" /> property is not defined because the process has exited.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="67157-756">원격 컴퓨터에서 실행 중인 프로세스의 <see cref="P:System.Diagnostics.Process.MainWindowTitle" /> 속성에 액세스한 경우.</span><span class="sxs-lookup"><span data-stu-id="67157-756">You are trying to access the <see cref="P:System.Diagnostics.Process.MainWindowTitle" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="67157-757">이 속성은 로컬 컴퓨터에서 실행 중인 프로세스에 대해서만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-757">This property is available only for processes that are running on the local computer.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-758">플랫폼이 Windows 98 또는 Windows Millennium Edition(Me)입니다. Windows 98 및 Windows Me에서 이 속성에 액세스하려면 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" />를 <see langword="false" />로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-758">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> to <see langword="false" /> to access this property on Windows 98 and Windows Me.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-759">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-759">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-760">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-760">This member cannot be used by partially trusted code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="MaxWorkingSet">
      <MemberSignature Language="C#" Value="public IntPtr MaxWorkingSet { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int MaxWorkingSet" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.MaxWorkingSet" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxWorkingSet As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr MaxWorkingSet { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.MaxWorkingSet : nativeint with get, set" Usage="System.Diagnostics.Process.MaxWorkingSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The maximum amount of physical memory the process has required since it was started.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessMaxWorkingSet")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-761">연결된 프로세스에 대한 최대 허용 작업 집합 크기(바이트)를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-761">Gets or sets the maximum allowable working set size, in bytes, for the associated process.</span></span></summary>
        <value><span data-ttu-id="67157-762">프로세스에 대해 메모리에서 허용된 작업 집합의 최대 크기(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-762">The maximum working set size that is allowed in memory for the process, in bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-763">프로세스의 작업 집합은 실제 RAM 메모리의 프로세스에 현재 표시 된 메모리 페이지의 집합.</span><span class="sxs-lookup"><span data-stu-id="67157-763">The working set of a process is the set of memory pages currently visible to the process in physical RAM memory.</span></span> <span data-ttu-id="67157-764">이러한 페이지는 상주 하며 페이지 오류를 일으키지 않고 응용 프로그램에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-764">These pages are resident and available for an application to use without triggering a page fault.</span></span>  
  
 <span data-ttu-id="67157-765">작업 집합에는 공유 및 개인 데이터가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-765">The working set includes both shared and private data.</span></span> <span data-ttu-id="67157-766">공유 데이터에는 system.dll 파일과.dll 파일에서 페이지를 포함 하 여 응용 프로그램을 실행 하는 모든 지침을 포함 하는 페이지를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-766">The shared data includes the pages that contain all the instructions that your application executes, including the pages in your .dll files and the system.dll files.</span></span> <span data-ttu-id="67157-767">작업 집합 크기 증가, 메모리 수요가 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-767">As the working set size increases, memory demand increases.</span></span>  
  
 <span data-ttu-id="67157-768">프로세스에 최소 및 최대 작업 집합 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-768">A process has minimum and maximum working set sizes.</span></span> <span data-ttu-id="67157-769">프로세스 리소스를 만들 때마다 시스템의 작업 집합 크기를 프로세스에 대 한 최소 같음 메모리 용량을 예약 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-769">Each time a process resource is created, the system reserves an amount of memory equal to the minimum working set size for the process.</span></span> <span data-ttu-id="67157-770">가상 메모리 관리자를 유지 하려고 적어도 최소 메모리 양을 상주 때 프로세스가 활성 상태 이지만 최대 크기 이상 유지 하지는 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-770">The virtual memory manager attempts to keep at least the minimum amount of memory resident when the process is active, but it never keeps more than the maximum size.</span></span>  
  
 <span data-ttu-id="67157-771">시스템 기본 작업 집합 크기를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-771">The system sets the default working set sizes.</span></span> <span data-ttu-id="67157-772">사용 하 여 이러한 크기를 수정할 수는 <xref:System.Diagnostics.Process.MaxWorkingSet%2A> 및 <xref:System.Diagnostics.Process.MinWorkingSet%2A> 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-772">You can modify these sizes using the <xref:System.Diagnostics.Process.MaxWorkingSet%2A> and <xref:System.Diagnostics.Process.MinWorkingSet%2A> members.</span></span> <span data-ttu-id="67157-773">그러나 이러한 값을 설정 보장 하지 않습니다 상주 또는 예약 된 메모리는 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-773">However, setting these values does not guarantee that the memory will be reserved or resident.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-774">프로세스의 작업 집합 크기를 늘리는 경우 실제 메모리 시스템의 나머지 부분에서 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-774">When you increase the working set size of a process, you take physical memory away from the rest of the system.</span></span> <span data-ttu-id="67157-775">최소 또는 최대 작업 집합 크기를 너무 많거나 시스템 성능을 떨어뜨릴 수 있으므로 요청 하지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-775">Ensure that you do not request a minimum or maximum working set size that is too large, because doing so can degrade system performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="67157-776">최대 작업 집합 크기가 잘못 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-776">The maximum working set size is invalid.</span></span> <span data-ttu-id="67157-777">최소 작업 집합 크기보다 크거나 같아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-777">It must be greater than or equal to the minimum working set size.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="67157-778">연결된 프로세스 리소스에서 작업 집합 정보를 검색할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-778">Working set information cannot be retrieved from the associated process resource.</span></span>  
  
<span data-ttu-id="67157-779">또는</span><span class="sxs-lookup"><span data-stu-id="67157-779">-or-</span></span> 
<span data-ttu-id="67157-780">프로세스가 아직 시작되지 않아서 프로세스 식별자 또는 프로세스 핸들이 0인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-780">The process identifier or process handle is zero because the process has not been started.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="67157-781">원격 컴퓨터에서 실행 중인 프로세스의 <see cref="P:System.Diagnostics.Process.MaxWorkingSet" /> 속성에 액세스한 경우.</span><span class="sxs-lookup"><span data-stu-id="67157-781">You are trying to access the <see cref="P:System.Diagnostics.Process.MaxWorkingSet" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="67157-782">이 속성은 로컬 컴퓨터에서 실행 중인 프로세스에 대해서만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-782">This property is available only for processes that are running on the local computer.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-783">프로세스 <see cref="P:System.Diagnostics.Process.Id" />를 사용할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-783">The process <see cref="P:System.Diagnostics.Process.Id" /> is not available.</span></span>  
  
<span data-ttu-id="67157-784">또는</span><span class="sxs-lookup"><span data-stu-id="67157-784">-or-</span></span> 
<span data-ttu-id="67157-785">프로세스가 종료된 경우</span><span class="sxs-lookup"><span data-stu-id="67157-785">The process has exited.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-786">플랫폼이 이 속성을 지원하지 않는 Windows 98 또는 Windows Millennium Edition(Windows Me)인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-786">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-787">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-787">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-788">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-788">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.MinWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.WorkingSet64" />
        <altmember cref="P:System.Diagnostics.Process.PeakWorkingSet64" />
      </Docs>
    </Member>
    <Member MemberName="MinWorkingSet">
      <MemberSignature Language="C#" Value="public IntPtr MinWorkingSet { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int MinWorkingSet" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.MinWorkingSet" />
      <MemberSignature Language="VB.NET" Value="Public Property MinWorkingSet As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr MinWorkingSet { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.MinWorkingSet : nativeint with get, set" Usage="System.Diagnostics.Process.MinWorkingSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The minimum amount of physical memory the process has required since it was started.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessMinWorkingSet")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-789">연결된 프로세스에 대해 허용되는 작업 집합의 최소 크기(바이트)를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-789">Gets or sets the minimum allowable working set size, in bytes, for the associated process.</span></span></summary>
        <value><span data-ttu-id="67157-790">프로세스에 대해 메모리에서 필요로 하는 작업 집합의 최소 크기(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-790">The minimum working set size that is required in memory for the process, in bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-791">프로세스의 작업 집합은 실제 RAM 메모리의 프로세스에 현재 표시 된 메모리 페이지의 집합.</span><span class="sxs-lookup"><span data-stu-id="67157-791">The working set of a process is the set of memory pages currently visible to the process in physical RAM memory.</span></span> <span data-ttu-id="67157-792">이러한 페이지는 상주 하며 페이지 오류를 일으키지 않고 응용 프로그램에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-792">These pages are resident and available for an application to use without triggering a page fault.</span></span>  
  
 <span data-ttu-id="67157-793">작업 집합에는 공유 및 개인 데이터가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-793">The working set includes both shared and private data.</span></span> <span data-ttu-id="67157-794">공유 데이터에는 system.dll 파일과.dll 파일에서 페이지를 포함 하 여 응용 프로그램을 실행 하는 모든 지침을 포함 하는 페이지를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-794">The shared data includes the pages that contain all the instructions that your application executes, including the pages in your .dll files and the system.dll files.</span></span> <span data-ttu-id="67157-795">작업 집합 크기 증가, 메모리 수요가 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-795">As the working set size increases, memory demand increases.</span></span>  
  
 <span data-ttu-id="67157-796">프로세스에 최소 및 최대 작업 집합 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-796">A process has minimum and maximum working set sizes.</span></span> <span data-ttu-id="67157-797">프로세스 리소스를 만들 때마다 시스템의 작업 집합 크기를 프로세스에 대 한 최소 같음 메모리 용량을 예약 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-797">Each time a process resource is created, the system reserves an amount of memory equal to the minimum working set size for the process.</span></span> <span data-ttu-id="67157-798">가상 메모리 관리자를 유지 하려고 적어도 최소 메모리 양을 상주 때 프로세스가 활성 상태 이지만 최대 크기 이상 유지 하지는 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-798">The virtual memory manager attempts to keep at least the minimum amount of memory resident when the process is active, but it never keeps more than the maximum size.</span></span>  
  
 <span data-ttu-id="67157-799">시스템 기본 작업 집합 크기를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-799">The system sets the default working set sizes.</span></span> <span data-ttu-id="67157-800">사용 하 여 이러한 크기를 수정할 수는 <xref:System.Diagnostics.Process.MaxWorkingSet%2A> 및 <xref:System.Diagnostics.Process.MinWorkingSet%2A> 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-800">You can modify these sizes using the <xref:System.Diagnostics.Process.MaxWorkingSet%2A> and <xref:System.Diagnostics.Process.MinWorkingSet%2A> members.</span></span> <span data-ttu-id="67157-801">그러나 이러한 값을 설정 보장 하지 않습니다 상주 또는 예약 된 메모리는 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-801">However, setting these values does not guarantee that the memory will be reserved or resident.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-802">프로세스의 작업 집합 크기를 늘리는 경우 실제 메모리 시스템의 나머지 부분에서 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-802">When you increase the working set size of a process, you take physical memory away from the rest of the system.</span></span> <span data-ttu-id="67157-803">최소 또는 최대 작업 집합 크기를 너무 많거나 시스템 성능을 떨어뜨릴 수 있으므로 요청 하지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-803">Ensure that you do not request a minimum or maximum working set size that is too large, because doing so can degrade system performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="67157-804">최소 작업 집합 크기가 잘못 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-804">The minimum working set size is invalid.</span></span> <span data-ttu-id="67157-805">최대 작업 집합 크기보다 작거나 같아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-805">It must be less than or equal to the maximum working set size.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="67157-806">연결된 프로세스 리소스에서 작업 집합 정보를 검색할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-806">Working set information cannot be retrieved from the associated process resource.</span></span>  
  
<span data-ttu-id="67157-807">또는</span><span class="sxs-lookup"><span data-stu-id="67157-807">-or-</span></span> 
<span data-ttu-id="67157-808">프로세스가 아직 시작되지 않아서 프로세스 식별자 또는 프로세스 핸들이 0인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-808">The process identifier or process handle is zero because the process has not been started.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="67157-809">원격 컴퓨터에서 실행 중인 프로세스의 <see cref="P:System.Diagnostics.Process.MinWorkingSet" /> 속성에 액세스한 경우.</span><span class="sxs-lookup"><span data-stu-id="67157-809">You are trying to access the <see cref="P:System.Diagnostics.Process.MinWorkingSet" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="67157-810">이 속성은 로컬 컴퓨터에서 실행 중인 프로세스에 대해서만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-810">This property is available only for processes that are running on the local computer.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-811">프로세스 <see cref="P:System.Diagnostics.Process.Id" />를 사용할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-811">The process <see cref="P:System.Diagnostics.Process.Id" /> is not available.</span></span>  
  
<span data-ttu-id="67157-812">또는</span><span class="sxs-lookup"><span data-stu-id="67157-812">-or-</span></span> 
<span data-ttu-id="67157-813">프로세스가 종료된 경우</span><span class="sxs-lookup"><span data-stu-id="67157-813">The process has exited.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-814">플랫폼이 이 속성을 지원하지 않는 Windows 98 또는 Windows Millennium Edition(Windows Me)인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-814">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-815">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-815">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-816">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-816">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.MaxWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.WorkingSet64" />
        <altmember cref="P:System.Diagnostics.Process.PeakWorkingSet64" />
      </Docs>
    </Member>
    <Member MemberName="Modules">
      <MemberSignature Language="C#" Value="public System.Diagnostics.ProcessModuleCollection Modules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.ProcessModuleCollection Modules" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.Modules" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Modules As ProcessModuleCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::ProcessModuleCollection ^ Modules { System::Diagnostics::ProcessModuleCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Modules : System.Diagnostics.ProcessModuleCollection" Usage="System.Diagnostics.Process.Modules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The modules that are loaded as part of this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessModules")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ProcessModuleCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-817">연결된 프로세스에 의해 로드된 모듈을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-817">Gets the modules that have been loaded by the associated process.</span></span></summary>
        <value><span data-ttu-id="67157-818">연결된 프로세스에 의해 로드된 모듈을 나타내는 <see cref="T:System.Diagnostics.ProcessModule" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-818">An array of type <see cref="T:System.Diagnostics.ProcessModule" /> that represents the modules that have been loaded by the associated process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-819">프로세스 모듈 특정 프로세스에 로드 되는.dll 또는.exe 파일을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="67157-819">A process module represents a.dll or .exe file that is loaded into a particular process.</span></span> <span data-ttu-id="67157-820"><xref:System.Diagnostics.ProcessModule> 인스턴스를 사용 하면 모듈 이름, 파일 이름 및 모듈 메모리 세부 정보를 포함 한 모듈에 대 한 정보를 볼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-820">A <xref:System.Diagnostics.ProcessModule> instance lets you view information about a module, including the module name, file name, and module memory details.</span></span>  
  
 <span data-ttu-id="67157-821">프로세스는 메모리에 여러 모듈을 로드할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-821">A process can load multiple modules into memory.</span></span> <span data-ttu-id="67157-822">예를 들어 추가.dll 파일을 로드 하는.exe 파일에는 여러 모듈이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-822">For example,.exe files that load additional .dll files have multiple modules.</span></span>  
  
 <span data-ttu-id="67157-823">프로세스를 시작한 후 시스템에서 프로세스를 로드할 때까지이 컬렉션은 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-823">After starting the process, this collection is empty until the system has loaded the process.</span></span> <span data-ttu-id="67157-824">프로세스에 주 창 하는 경우에 호출 하면 <xref:System.Diagnostics.Process.WaitForInputIdle%2A> 목록 컬렉션에 비어 있지 않은 경우를 위해이 속성을 검색 하기 전에 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-824">If the process has a main window, you can call <xref:System.Diagnostics.Process.WaitForInputIdle%2A> before retrieving this property to ensure that the collection is nonempty when you get the list.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="67157-825">원격 컴퓨터에서 실행 중인 프로세스의 <see cref="P:System.Diagnostics.Process.Modules" /> 속성에 대해 액세스를 시도했지만</span><span class="sxs-lookup"><span data-stu-id="67157-825">You are attempting to access the <see cref="P:System.Diagnostics.Process.Modules" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="67157-826">이 속성은 로컬 컴퓨터에서 실행 중인 프로세스에 대해서만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-826">This property is available only for processes that are running on the local computer.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-827">프로세스 <see cref="P:System.Diagnostics.Process.Id" />를 사용할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-827">The process <see cref="P:System.Diagnostics.Process.Id" /> is not available.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-828">플랫폼이 Windows 98 또는 Windows Millennium Edition(Me)입니다. Windows 98 및 Windows Me에서 이 속성에 액세스하려면 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" />를 <see langword="false" />로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-828">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> to <see langword="false" /> to access this property on Windows 98 and Windows Me.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="67157-829">시스템 프로세스 또는 유휴 프로세스의 <see cref="P:System.Diagnostics.Process.Modules" /> 속성에 액세스한 경우.</span><span class="sxs-lookup"><span data-stu-id="67157-829">You are attempting to access the <see cref="P:System.Diagnostics.Process.Modules" /> property for either the system process or the idle process.</span></span> <span data-ttu-id="67157-830">이러한 프로세스에는 모듈이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-830">These processes do not have modules.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-831">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-831">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-832">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-832">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="T:System.Diagnostics.ProcessModule" />
      </Docs>
    </Member>
    <Member MemberName="NonpagedSystemMemorySize">
      <MemberSignature Language="C#" Value="public int NonpagedSystemMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NonpagedSystemMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.NonpagedSystemMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NonpagedSystemMemorySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NonpagedSystemMemorySize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.NonpagedSystemMemorySize : int" Usage="System.Diagnostics.Process.NonpagedSystemMemorySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The number of bytes that are not pageable.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use NonpagedSystemMemorySize64")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.NonpagedSystemMemorySize64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessNonpagedSystemMemorySize")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.NonpagedSystemMemorySize64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-833">연결된 프로세스에 할당된 비페이징 시스템 메모리의 양(바이트)을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-833">Gets the amount of nonpaged system memory, in bytes, allocated for the associated process.</span></span></summary>
        <value><span data-ttu-id="67157-834">가상 메모리 페이징 파일에 쓸 수 없는 연결된 프로세스에 대해 시스템에서 할당한 메모리의 양(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-834">The amount of memory, in bytes, the system has allocated for the associated process that cannot be written to the virtual memory paging file.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-835">플랫폼이 이 속성을 지원하지 않는 Windows 98 또는 Windows Millennium Edition(Windows Me)인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-835">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-836">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-836">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-837">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-837">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.NonpagedSystemMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="NonpagedSystemMemorySize64">
      <MemberSignature Language="C#" Value="public long NonpagedSystemMemorySize64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 NonpagedSystemMemorySize64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.NonpagedSystemMemorySize64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NonpagedSystemMemorySize64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long NonpagedSystemMemorySize64 { long get(); };" />
      <MemberSignature Language="F#" Value="member this.NonpagedSystemMemorySize64 : int64" Usage="System.Diagnostics.Process.NonpagedSystemMemorySize64" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The number of bytes that are not pageable.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessNonpagedSystemMemorySize")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-838">연결된 프로세스에 할당된 비페이징 시스템 메모리의 양(바이트)을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-838">Gets the amount of nonpaged system memory, in bytes, allocated for the associated process.</span></span></summary>
        <value><span data-ttu-id="67157-839">가상 메모리 페이징 파일에 쓸 수 없는 연결된 프로세스에 대해 시스템에서 할당한 메모리의 양(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-839">The amount of system memory, in bytes, allocated for the associated process that cannot be written to the virtual memory paging file.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-840">이 속성에 의해 반환 된 값 (바이트)에서 프로세스에 의해 사용 되는 비페이징된 시스템 메모리의 현재 크기를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="67157-840">The value returned by this property represents the current size of nonpaged system memory used by the process, in bytes.</span></span> <span data-ttu-id="67157-841">시스템 메모리는 운영 체제에서 사용 하는 실제 메모리 및 페이징 및 비페이징 풀으로 나뉩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-841">System memory is the physical memory used by the operating system, and is divided into paged and nonpaged pools.</span></span> <span data-ttu-id="67157-842">비페이징된 메모리 할당 시스템 메모리에 유지 되 고 가상 메모리 페이징 파일에 페이징 아웃 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-842">Nonpaged memory allocations remain in system memory and are not paged out to the virtual memory paging file.</span></span>  
  
 <span data-ttu-id="67157-843">32 비트 프로세서 또는 64 비트 프로세서를 사용 하 여 컴퓨터에서 메모리 사용량을 모니터링 하려면이 속성을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-843">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="67157-844">속성 값이 해당 하는 **Pool Nonpaged Bytes** 프로세스에 대 한 성능 카운터입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-844">The property value is equivalent to the **Pool Nonpaged Bytes** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-845">다음 코드 예제에서는 메모장 응용 프로그램의 인스턴스를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-845">The following code example starts an instance of the Notepad application.</span></span> <span data-ttu-id="67157-846">그런 다음 예제에서는 검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-846">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="67157-847">이 예제에서는 프로세스가 종료 하는 경우를 검색 합니다. 종료 코드 및 최대 메모리 통계를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-847">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-848">플랫폼이 이 속성을 지원하지 않는 Windows 98 또는 Windows Millennium Edition(Windows Me)인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-848">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-849">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-849">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-850">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-850">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.PagedSystemMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="OnExited">
      <MemberSignature Language="C#" Value="protected void OnExited ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnExited() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.OnExited" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnExited ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnExited();" />
      <MemberSignature Language="F#" Value="member this.OnExited : unit -&gt; unit" Usage="process.OnExited " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="67157-851"><see cref="E:System.Diagnostics.Process.Exited" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-851">Raises the <see cref="E:System.Diagnostics.Process.Exited" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-852"><xref:System.Diagnostics.Process.OnExited%2A> 발생 하는 API 메서드는 <xref:System.Diagnostics.Process.Exited> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-852"><xref:System.Diagnostics.Process.OnExited%2A> is the API method that raises the <xref:System.Diagnostics.Process.Exited> event.</span></span> <span data-ttu-id="67157-853">호출 <xref:System.Diagnostics.Process.OnExited%2A> 하면 합니다 <xref:System.Diagnostics.Process.Exited> 이벤트를 발생 하 여 이벤트를 발생 시키는 유일한 방법은 및을 <xref:System.Diagnostics.Process> 구성 요소.</span><span class="sxs-lookup"><span data-stu-id="67157-853">Calling <xref:System.Diagnostics.Process.OnExited%2A> causes the <xref:System.Diagnostics.Process.Exited> event to occur and is the only way to raise the event using the <xref:System.Diagnostics.Process> component.</span></span> <span data-ttu-id="67157-854"><xref:System.Diagnostics.Process.OnExited%2A> 구성 요소에서 클래스를 파생 하는 경우 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-854"><xref:System.Diagnostics.Process.OnExited%2A> is primarily used when deriving classes from the component.</span></span>  
  
 <span data-ttu-id="67157-855">대 안으로 <xref:System.Diagnostics.Process.OnExited%2A>, 고유한 이벤트 처리기를 작성할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-855">As an alternative to <xref:System.Diagnostics.Process.OnExited%2A>, you can write your own event handler.</span></span> <span data-ttu-id="67157-856">고유한 이벤트 처리기 대리자 및 사용자 고유의 이벤트 처리 메서드를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="67157-856">You create your own event handler delegate and your own event-handling method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-857">Visual Studio 환경을 사용 하는 경우 이벤트 처리기 대리자 (AddOnExited) 및 이벤트 처리 메서드 (Process1_Exited) 만들어집니다 끌면는 <xref:System.Diagnostics.Process> 폼으로 구성 요소 아이콘을 두 번 클릭 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-857">If you are using the Visual Studio environment, an event handler delegate (AddOnExited) and an event-handling method (Process1_Exited) are created for you when you drag a <xref:System.Diagnostics.Process> component onto a form and double-click the icon.</span></span> <span data-ttu-id="67157-858">다음과 같은 경우 실행 하기 위해 만든 코드는 <xref:System.Diagnostics.Process.Exited> Process1_Exited 프로시저에 입력 된 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-858">The code you create to run when the <xref:System.Diagnostics.Process.Exited> event occurs is entered into the Process1_Exited procedure.</span></span> <span data-ttu-id="67157-859">만들 필요가 없습니다를 <xref:System.Diagnostics.Process.OnExited%2A> 멤버를 구현 되므로 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-859">You do not need to create the <xref:System.Diagnostics.Process.OnExited%2A> member, because it is implemented for you.</span></span>  
  
 <span data-ttu-id="67157-860">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-860">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="67157-861">개요를 보려면 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-861">For an overview, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-862">다음 예제에서는 사용 하는 방법의 <xref:System.Diagnostics.Process.OnExited%2A> 파생된 클래스에서 메서드.</span><span class="sxs-lookup"><span data-stu-id="67157-862">The following example shows how to use the <xref:System.Diagnostics.Process.OnExited%2A> method in a derived class.</span></span>  
  
 [!code-csharp[OnExitSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/onexitsample/cs/program.cs#1)]
 [!code-vb[OnExitSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/onexitsample/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-863">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-863">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-864">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-864">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="E:System.Diagnostics.Process.Exited" />
      </Docs>
    </Member>
    <Member MemberName="OutputDataReceived">
      <MemberSignature Language="C#" Value="public event System.Diagnostics.DataReceivedEventHandler OutputDataReceived;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Diagnostics.DataReceivedEventHandler OutputDataReceived" />
      <MemberSignature Language="DocId" Value="E:System.Diagnostics.Process.OutputDataReceived" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event OutputDataReceived As DataReceivedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Diagnostics::DataReceivedEventHandler ^ OutputDataReceived;" />
      <MemberSignature Language="F#" Value="member this.OutputDataReceived : System.Diagnostics.DataReceivedEventHandler " Usage="member this.OutputDataReceived : System.Diagnostics.DataReceivedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("Indicates if the process component is associated with a real process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessAssociated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.DataReceivedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-865">응용 프로그램이 리디렉션된 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 스트림에 쓸 때마다 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-865">Occurs each time an application writes a line to its redirected <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-866"><xref:System.Diagnostics.Process.OutputDataReceived> 이벤트는 연결 된 <xref:System.Diagnostics.Process> 리디렉션된 줄 바꿈 문자로 종료 코드 줄을 작성 했습니다 <xref:System.Diagnostics.Process.StandardOutput%2A> 스트림 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-866">The <xref:System.Diagnostics.Process.OutputDataReceived> event indicates that the associated <xref:System.Diagnostics.Process> has written a line, terminating with a newline character, to its redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span>  
  
 <span data-ttu-id="67157-867">비동기 읽기 작업 중에 이벤트를 사용할지 <xref:System.Diagnostics.Process.StandardOutput%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-867">The event is enabled during asynchronous read operations on <xref:System.Diagnostics.Process.StandardOutput%2A>.</span></span> <span data-ttu-id="67157-868">비동기 읽기 작업을 시작 하려면 리디렉션해야 합니다 <xref:System.Diagnostics.Process.StandardOutput%2A> 스트림의 <xref:System.Diagnostics.Process>, 이벤트 처리기를 추가 합니다 <xref:System.Diagnostics.Process.OutputDataReceived> 이벤트 및 호출 <xref:System.Diagnostics.Process.BeginOutputReadLine%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-868">To start asynchronous read operations, you must redirect the <xref:System.Diagnostics.Process.StandardOutput%2A> stream of a <xref:System.Diagnostics.Process>, add your event handler to the <xref:System.Diagnostics.Process.OutputDataReceived> event, and call <xref:System.Diagnostics.Process.BeginOutputReadLine%2A>.</span></span> <span data-ttu-id="67157-869">그 후는 <xref:System.Diagnostics.Process.OutputDataReceived> 프로세스에서는 리디렉션된 줄 기록 될 때마다 이벤트 신호 <xref:System.Diagnostics.Process.StandardOutput%2A> 스트림, 프로세스 종료 되거나 호출할 때까지 <xref:System.Diagnostics.Process.CancelOutputRead%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-869">Thereafter, the <xref:System.Diagnostics.Process.OutputDataReceived> event signals each time the process writes a line to the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream, until the process exits or calls <xref:System.Diagnostics.Process.CancelOutputRead%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-870">비동기 출력을 처리 하는 응용 프로그램을 호출 해야 합니다 <xref:System.Diagnostics.Process.WaitForExit%2A> 메서드를 출력 버퍼를 플러시 했습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-870">The application that is processing the asynchronous output should call the <xref:System.Diagnostics.Process.WaitForExit%2A> method to ensure that the output buffer has been flushed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-871">다음 예제에서는 리디렉션된에 대해 비동기 읽기 작업을 수행 하는 방법을 보여 줍니다 <xref:System.Diagnostics.Process.StandardOutput%2A> 스트림의 `ipconfig` 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-871">The following example illustrates how to perform asynchronous read operations on the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream of the `ipconfig` command.</span></span>  
  
 <span data-ttu-id="67157-872">예제에 대 한 이벤트 대리자를 만듭니다는 `OutputHandler` 이벤트 처리기에 연결 된 <xref:System.Diagnostics.Process.OutputDataReceived> 이벤트.</span><span class="sxs-lookup"><span data-stu-id="67157-872">The example creates an event delegate for the `OutputHandler` event handler and associates it with the <xref:System.Diagnostics.Process.OutputDataReceived> event.</span></span> <span data-ttu-id="67157-873">이벤트 처리기에서 리디렉션된 텍스트 줄을 받아서 <xref:System.Diagnostics.Process.StandardOutput%2A> 스트림에 텍스트의 서식을 나중에 예제의 콘솔 창에 표시 되는 출력 문자열에 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-873">The event handler receives text lines from the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream, formats the text, and saves it in an output string that's later shown in the example's console window.</span></span>  
  
 [!code-cpp[Process_AsyncStreams#4](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/datareceivedevent.cpp#4)]
 [!code-csharp[Process_AsyncStreams#4](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/datareceivedevent.cs#4)]
 [!code-vb[Process_AsyncStreams#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/datareceivedevent.vb#4)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-874">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-874">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-875">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-875">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" />
        <altmember cref="P:System.Diagnostics.Process.StandardOutput" />
        <altmember cref="M:System.Diagnostics.Process.BeginOutputReadLine" />
        <altmember cref="M:System.Diagnostics.Process.CancelOutputRead" />
        <altmember cref="T:System.Diagnostics.DataReceivedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="PagedMemorySize">
      <MemberSignature Language="C#" Value="public int PagedMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PagedMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PagedMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PagedMemorySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PagedMemorySize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PagedMemorySize : int" Usage="System.Diagnostics.Process.PagedMemorySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The number of bytes that are paged.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use PagedMemorySize64")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PagedMemorySize64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessPagedMemorySize")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PagedMemorySize64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-876">연결된 프로세스에 할당된 페이징 메모리의 양(바이트)을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-876">Gets the amount of paged memory, in bytes, allocated for the associated process.</span></span></summary>
        <value><span data-ttu-id="67157-877">가상 메모리 페이징 파일에 쓸 수 있는 연결된 프로세스에 의해 할당된 메모리의 양(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-877">The amount of memory, in bytes, allocated by the associated process that can be written to the virtual memory paging file.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-878">플랫폼이 이 속성을 지원하지 않는 Windows 98 또는 Windows Millennium Edition(Windows Me)인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-878">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-879">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-879">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-880">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-880">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.PagedMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PagedMemorySize64">
      <MemberSignature Language="C#" Value="public long PagedMemorySize64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 PagedMemorySize64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PagedMemorySize64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PagedMemorySize64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long PagedMemorySize64 { long get(); };" />
      <MemberSignature Language="F#" Value="member this.PagedMemorySize64 : int64" Usage="System.Diagnostics.Process.PagedMemorySize64" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The number of bytes that are paged.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessPagedMemorySize")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-881">연결된 프로세스에 할당된 페이징 메모리의 양(바이트)을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-881">Gets the amount of paged memory, in bytes, allocated for the associated process.</span></span></summary>
        <value><span data-ttu-id="67157-882">연결된 프로세스의 가상 메모리 페이징 파일에 할당된 메모리의 양(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-882">The amount of memory, in bytes, allocated in the virtual memory paging file for the associated process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-883">이 속성에 의해 반환 된 값 (바이트)에서 프로세스에 의해 사용 되는 가상 메모리 페이징 파일에는 메모리의 현재 크기를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="67157-883">The value returned by this property represents the current size of memory in the virtual memory paging file used by the process, in bytes.</span></span> <span data-ttu-id="67157-884">운영 체제 각 프로세스에 대 한 가상 주소 공간 관리를 위한 실제 메모리를 사용 하 여 함께에서 가상 메모리 페이징 파일을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-884">The operating system uses the virtual memory paging file in conjunction with physical memory to manage the virtual address space for each process.</span></span> <span data-ttu-id="67157-885">사용 중인 페이징 가능한 메모리 없을 때 디스크에 있는 가상 메모리 페이징 파일을 전송할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-885">When pageable memory is not in use, it can be transferred to the virtual memory paging file on disk.</span></span> <span data-ttu-id="67157-886">프로세스에 대 한 운영 체제에서 사용 되는 메모리의 크기를 가져오려면는 <xref:System.Diagnostics.Process.PagedSystemMemorySize64%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-886">To obtain the size of memory used by the operating system for the process, use the <xref:System.Diagnostics.Process.PagedSystemMemorySize64%2A> property.</span></span>  
  
 <span data-ttu-id="67157-887">32 비트 프로세서 또는 64 비트 프로세서를 사용 하 여 컴퓨터에서 메모리 사용량을 모니터링 하려면이 속성을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-887">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="67157-888">속성 값이 해당 하는 **페이지 파일 바이트** 프로세스에 대 한 성능 카운터입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-888">The property value is equivalent to the **Page File Bytes** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-889">다음 코드 예제에서는 메모장 응용 프로그램의 인스턴스를 시작 된 다음 검색 및 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-889">The following code example starts an instance of the Notepad application, and then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="67157-890">이 예제에서는 프로세스가 종료 하는 경우를 검색 합니다. 종료 코드 및 최대 메모리 통계를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-890">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-891">플랫폼이 이 속성을 지원하지 않는 Windows 98 또는 Windows Millennium Edition(Windows Me)인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-891">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-892">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-892">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-893">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-893">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.PeakPagedMemorySize64" />
        <altmember cref="P:System.Diagnostics.Process.PagedSystemMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PagedSystemMemorySize">
      <MemberSignature Language="C#" Value="public int PagedSystemMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PagedSystemMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PagedSystemMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PagedSystemMemorySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PagedSystemMemorySize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PagedSystemMemorySize : int" Usage="System.Diagnostics.Process.PagedSystemMemorySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of paged system memory in bytes.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use PagedSystemMemorySize64")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PagedSystemMemorySize64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessPagedSystemMemorySize")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PagedSystemMemorySize64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-894">연결된 프로세스에 할당된 페이징할 수 있는 시스템 메모리의 양(바이트)을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-894">Gets the amount of pageable system memory, in bytes, allocated for the associated process.</span></span></summary>
        <value><span data-ttu-id="67157-895">가상 메모리 페이징 파일에 쓸 수 있는 연결된 프로세스에 대해 시스템에서 할당한 메모리의 양(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-895">The amount of memory, in bytes, the system has allocated for the associated process that can be written to the virtual memory paging file.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-896">플랫폼이 이 속성을 지원하지 않는 Windows 98 또는 Windows Millennium Edition(Windows Me)인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-896">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-897">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-897">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-898">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-898">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.PagedSystemMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PagedSystemMemorySize64">
      <MemberSignature Language="C#" Value="public long PagedSystemMemorySize64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 PagedSystemMemorySize64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PagedSystemMemorySize64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PagedSystemMemorySize64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long PagedSystemMemorySize64 { long get(); };" />
      <MemberSignature Language="F#" Value="member this.PagedSystemMemorySize64 : int64" Usage="System.Diagnostics.Process.PagedSystemMemorySize64" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of paged system memory in bytes.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessPagedSystemMemorySize")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-899">연결된 프로세스에 할당된 페이징할 수 있는 시스템 메모리의 양(바이트)을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-899">Gets the amount of pageable system memory, in bytes, allocated for the associated process.</span></span></summary>
        <value><span data-ttu-id="67157-900">가상 메모리 페이징 파일에 쓸 수 있는 연결된 프로세스에 대해 시스템에서 할당한 메모리의 양(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-900">The amount of system memory, in bytes, allocated for the associated process that can be written to the virtual memory paging file.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-901">이 속성 값으로 반환 되는 값 (바이트)에서 프로세스에 의해 사용 되는 페이징할 수 있는 시스템 메모리의 현재 크기를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="67157-901">The value returned by this property value represents the current size of pageable system memory used by the process, in bytes.</span></span> <span data-ttu-id="67157-902">시스템 메모리는 운영 체제에서 사용 하는 실제 메모리 및 페이징 및 비페이징 풀으로 나뉩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-902">System memory is the physical memory used by the operating system, and is divided into paged and nonpaged pools.</span></span> <span data-ttu-id="67157-903">사용 중인 페이징 가능한 메모리 없을 때 디스크에 있는 가상 메모리 페이징 파일을 전송할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-903">When pageable memory is not in use, it can be transferred to the virtual memory paging file on disk.</span></span> <span data-ttu-id="67157-904">프로세스에서 사용 하는 응용 프로그램 메모리의 크기를 가져오려면는 <xref:System.Diagnostics.Process.PagedMemorySize64%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-904">To obtain the size of the application memory used by the process, use the <xref:System.Diagnostics.Process.PagedMemorySize64%2A> property.</span></span>  
  
 <span data-ttu-id="67157-905">32 비트 프로세서 또는 64 비트 프로세서를 사용 하 여 컴퓨터에서 메모리 사용량을 모니터링 하려면이 속성을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-905">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="67157-906">속성 값이 해당 하는 **Pool Paged Bytes** 프로세스에 대 한 성능 카운터입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-906">The property value is equivalent to the **Pool Paged Bytes** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-907">다음 코드 예제에서는 메모장 응용 프로그램의 인스턴스를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-907">The following code example starts an instance of the Notepad application.</span></span> <span data-ttu-id="67157-908">그런 다음 예제에서는 검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-908">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="67157-909">이 예제에서는 프로세스가 종료 하는 경우를 검색 합니다. 종료 코드 및 최대 메모리 통계를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-909">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-910">플랫폼이 이 속성을 지원하지 않는 Windows 98 또는 Windows Millennium Edition(Windows Me)인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-910">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-911">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-911">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-912">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-912">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.PagedSystemMemorySize64" />
        <altmember cref="P:System.Diagnostics.Process.NonpagedSystemMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PeakPagedMemorySize">
      <MemberSignature Language="C#" Value="public int PeakPagedMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PeakPagedMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PeakPagedMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PeakPagedMemorySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PeakPagedMemorySize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PeakPagedMemorySize : int" Usage="System.Diagnostics.Process.PeakPagedMemorySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The maximum amount of paged memory used by this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use PeakPagedMemorySize64")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PeakPagedMemorySize64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessPeakPagedMemorySize")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PeakPagedMemorySize64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-913">연결된 프로세스에서 사용하는 가상 메모리 페이징 파일의 최대 메모리 양(바이트)을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-913">Gets the maximum amount of memory in the virtual memory paging file, in bytes, used by the associated process.</span></span></summary>
        <value><span data-ttu-id="67157-914">가상 메모리 페이징 파일에 쓸 수 있는 연결된 프로세스에 의해 할당된 메모리의 최대 양(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-914">The maximum amount of memory, in bytes, allocated by the associated process that could be written to the virtual memory paging file.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-915">플랫폼이 이 속성을 지원하지 않는 Windows 98 또는 Windows Millennium Edition(Windows Me)인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-915">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-916">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-916">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-917">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-917">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.PeakPagedMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PeakPagedMemorySize64">
      <MemberSignature Language="C#" Value="public long PeakPagedMemorySize64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 PeakPagedMemorySize64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PeakPagedMemorySize64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PeakPagedMemorySize64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long PeakPagedMemorySize64 { long get(); };" />
      <MemberSignature Language="F#" Value="member this.PeakPagedMemorySize64 : int64" Usage="System.Diagnostics.Process.PeakPagedMemorySize64" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The maximum amount of paged memory used by this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessPeakPagedMemorySize")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-918">연결된 프로세스에서 사용하는 가상 메모리 페이징 파일의 최대 메모리 양(바이트)을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-918">Gets the maximum amount of memory in the virtual memory paging file, in bytes, used by the associated process.</span></span></summary>
        <value><span data-ttu-id="67157-919">연결된 프로세스가 시작된 이후 연결된 프로세스의 가상 메모리 페이징 파일에 할당된 메모리의 최대 양(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-919">The maximum amount of memory, in bytes, allocated in the virtual memory paging file for the associated process since it was started.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-920">이 속성 값으로 반환 되는 값 (바이트)를 시작한 이후에 프로세스에서 사용 되는 가상 메모리 페이징 파일에는 메모리의 최대 크기를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="67157-920">The value returned by this property value represents the maximum size of memory in the virtual memory paging file used by the process since it started, in bytes.</span></span> <span data-ttu-id="67157-921">운영 체제 각 프로세스에 대 한 가상 주소 공간 관리를 위한 실제 메모리를 사용 하 여 함께에서 가상 메모리 페이징 파일을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-921">The operating system uses the virtual memory paging file in conjunction with physical memory to manage the virtual address space for each process.</span></span> <span data-ttu-id="67157-922">사용 중인 페이징 가능한 메모리 없을 때 디스크에 있는 가상 메모리 페이징 파일을 전송할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-922">When pageable memory is not in use, it can be transferred to the virtual memory paging file on disk.</span></span>  
  
 <span data-ttu-id="67157-923">32 비트 프로세서 또는 64 비트 프로세서를 사용 하 여 컴퓨터에서 메모리 사용량을 모니터링 하려면이 속성을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-923">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="67157-924">속성 값이 해당 하는 **페이지 파일 바이트 최대** 프로세스에 대 한 성능 카운터입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-924">The property value is equivalent to the **Page File Bytes Peak** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-925">다음 코드 예제에서는 메모장 응용 프로그램의 인스턴스를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-925">The following code example starts an instance of the Notepad application.</span></span> <span data-ttu-id="67157-926">그런 다음 예제에서는 검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-926">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="67157-927">이 예제에서는 프로세스가 종료 하는 경우를 검색 합니다. 종료 코드 및 최대 메모리 통계를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-927">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-928">플랫폼이 이 속성을 지원하지 않는 Windows 98 또는 Windows Millennium Edition(Windows Me)인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-928">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-929">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-929">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-930">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-930">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.PagedMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PeakVirtualMemorySize">
      <MemberSignature Language="C#" Value="public int PeakVirtualMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PeakVirtualMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PeakVirtualMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PeakVirtualMemorySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PeakVirtualMemorySize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PeakVirtualMemorySize : int" Usage="System.Diagnostics.Process.PeakVirtualMemorySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The maximum amount of virtual memory used by this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use PeakVirtualMemorySize64")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PeakVirtualMemorySize64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessPeakVirtualMemorySize")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PeakVirtualMemorySize64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-931">연결된 프로세스에서 사용되는 가상 메모리의 최대 양(바이트)을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-931">Gets the maximum amount of virtual memory, in bytes, used by the associated process.</span></span></summary>
        <value><span data-ttu-id="67157-932">연결된 프로세스에서 요청한 가상 메모리의 최대 양(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-932">The maximum amount of virtual memory, in bytes, that the associated process has requested.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-933">플랫폼이 이 속성을 지원하지 않는 Windows 98 또는 Windows Millennium Edition(Windows Me)인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-933">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-934">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-934">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-935">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-935">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.PeakVirtualMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PeakVirtualMemorySize64">
      <MemberSignature Language="C#" Value="public long PeakVirtualMemorySize64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 PeakVirtualMemorySize64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PeakVirtualMemorySize64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PeakVirtualMemorySize64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long PeakVirtualMemorySize64 { long get(); };" />
      <MemberSignature Language="F#" Value="member this.PeakVirtualMemorySize64 : int64" Usage="System.Diagnostics.Process.PeakVirtualMemorySize64" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The maximum amount of virtual memory used by this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessPeakVirtualMemorySize")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-936">연결된 프로세스에서 사용되는 가상 메모리의 최대 양(바이트)을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-936">Gets the maximum amount of virtual memory, in bytes, used by the associated process.</span></span></summary>
        <value><span data-ttu-id="67157-937">연결된 프로세스가 시작된 이후 연결된 프로세스에 할당된 가상 메모리의 최대 양(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-937">The maximum amount of virtual memory, in bytes, allocated for the associated process since it was started.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-938">이 속성에 의해 반환 된 값 (바이트)를 시작한 이후에 프로세스에서 사용 되는 가상 메모리의 최대 크기를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="67157-938">The value returned by this property represents the maximum size of virtual memory used by the process since it started, in bytes.</span></span> <span data-ttu-id="67157-939">운영 체제는 실제 메모리 또는 디스크에 있는 가상 메모리 페이징 파일에 저장 된 페이지를 로드 하거나 페이지 각 프로세스에 대 한 가상 주소 공간을 매핑합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-939">The operating system maps the virtual address space for each process either to pages loaded in physical memory, or to pages stored in the virtual memory paging file on disk.</span></span>  
  
 <span data-ttu-id="67157-940">32 비트 프로세서 또는 64 비트 프로세서를 사용 하 여 컴퓨터에서 메모리 사용량을 모니터링 하려면이 속성을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-940">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="67157-941">속성 값이 해당 하는 **가상 바이트 최대** 프로세스에 대 한 성능 카운터입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-941">The property value is equivalent to the **Virtual Bytes Peak** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-942">다음 코드 예제에서는 메모장 응용 프로그램의 인스턴스를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-942">The following code example starts an instance of the Notepad application.</span></span> <span data-ttu-id="67157-943">그런 다음 예제에서는 검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-943">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="67157-944">이 예제에서는 프로세스가 종료 하는 경우를 검색 합니다. 종료 코드 및 최대 메모리 통계를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-944">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-945">플랫폼이 이 속성을 지원하지 않는 Windows 98 또는 Windows Millennium Edition(Windows Me)인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-945">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-946">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-946">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-947">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-947">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.VirtualMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PeakWorkingSet">
      <MemberSignature Language="C#" Value="public int PeakWorkingSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PeakWorkingSet" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PeakWorkingSet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PeakWorkingSet As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PeakWorkingSet { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PeakWorkingSet : int" Usage="System.Diagnostics.Process.PeakWorkingSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The maximum amount of system memory used by this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use PeakWorkingSet64")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PeakWorkingSet64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessPeakWorkingSet")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PeakWorkingSet64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-948">연결된 프로세스의 최대 작업 집합 크기(바이트)를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-948">Gets the peak working set size for the associated process, in bytes.</span></span></summary>
        <value><span data-ttu-id="67157-949">연결된 프로세스에서 한 번에 요청한 실제 메모리의 최대 양(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-949">The maximum amount of physical memory that the associated process has required all at once, in bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-950">프로세스의 작업 집합은 실제 RAM 메모리의 프로세스에 현재 표시 된 메모리 페이지의 집합.</span><span class="sxs-lookup"><span data-stu-id="67157-950">The working set of a process is the set of memory pages currently visible to the process in physical RAM memory.</span></span> <span data-ttu-id="67157-951">이러한 페이지는 상주 하며 페이지 오류를 일으키지 않고 응용 프로그램에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-951">These pages are resident and available for an application to use without triggering a page fault.</span></span>  
  
 <span data-ttu-id="67157-952">작업 집합에는 공유 및 개인 데이터가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-952">The working set includes both shared and private data.</span></span> <span data-ttu-id="67157-953">공유 데이터 처리 모듈 및 시스템 라이브러리를 포함 하 여 프로세스 실행 한 모든 지침이 포함 된 페이지를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-953">The shared data includes the pages that contain all the instructions that the process executes, including process modules and the system libraries.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-954">플랫폼이 이 속성을 지원하지 않는 Windows 98 또는 Windows Millennium Edition(Windows Me)인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-954">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-955">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-955">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-956">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-956">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.WorkingSet64" />
        <altmember cref="P:System.Diagnostics.Process.MinWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.MaxWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.PeakWorkingSet64" />
      </Docs>
    </Member>
    <Member MemberName="PeakWorkingSet64">
      <MemberSignature Language="C#" Value="public long PeakWorkingSet64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 PeakWorkingSet64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PeakWorkingSet64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PeakWorkingSet64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long PeakWorkingSet64 { long get(); };" />
      <MemberSignature Language="F#" Value="member this.PeakWorkingSet64 : int64" Usage="System.Diagnostics.Process.PeakWorkingSet64" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The maximum amount of system memory used by this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessPeakWorkingSet")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-957">연결된 프로세스에서 사용되는 실제 메모리의 최대 양(바이트)을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-957">Gets the maximum amount of physical memory, in bytes, used by the associated process.</span></span></summary>
        <value><span data-ttu-id="67157-958">연결된 프로세스가 시작된 이후 연결된 프로세스에 할당된 실제 메모리의 최대 양(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-958">The maximum amount of physical memory, in bytes, allocated for the associated process since it was started.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-959">이 속성에 의해 반환 된 값 (바이트)를 시작한 이후에 프로세스에서 사용한 작업 집합 메모리의 최대 크기를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="67157-959">The value returned by this property represents the maximum size of working set memory used by the process since it started, in bytes.</span></span> <span data-ttu-id="67157-960">프로세스의 작업 집합은 실제 RAM 메모리의 프로세스에 현재 표시 된 메모리 페이지의 집합.</span><span class="sxs-lookup"><span data-stu-id="67157-960">The working set of a process is the set of memory pages currently visible to the process in physical RAM memory.</span></span> <span data-ttu-id="67157-961">이러한 페이지는 상주 하며 페이지 오류를 일으키지 않고 응용 프로그램에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-961">These pages are resident and available for an application to use without triggering a page fault.</span></span>  
  
 <span data-ttu-id="67157-962">작업 집합에는 공유 및 개인 데이터가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-962">The working set includes both shared and private data.</span></span> <span data-ttu-id="67157-963">공유 데이터 프로세스 모듈 및 시스템 라이브러리에서 지침을 포함 하 여 프로세스에서 실행 하는 모든 명령이 포함 된 페이지를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-963">The shared data includes the pages that contain all the instructions that the process executes, including instructions from the process modules and the system libraries.</span></span>  
  
 <span data-ttu-id="67157-964">32 비트 프로세서 또는 64 비트 프로세서를 사용 하 여 컴퓨터에서 메모리 사용량을 모니터링 하려면이 속성을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-964">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="67157-965">속성 값이 해당 하는 **Working Set Peak** 프로세스에 대 한 성능 카운터입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-965">The property value is equivalent to the **Working Set Peak** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-966">다음 코드 예제에서는 메모장 응용 프로그램의 인스턴스를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-966">The following code example starts an instance of the Notepad application.</span></span> <span data-ttu-id="67157-967">그런 다음 예제에서는 검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-967">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="67157-968">이 예제에서는 프로세스가 종료 하는 경우를 검색 합니다. 종료 코드 및 최대 메모리 통계를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-968">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-969">플랫폼이 이 속성을 지원하지 않는 Windows 98 또는 Windows Millennium Edition(Windows Me)인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-969">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-970">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-970">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-971">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-971">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.WorkingSet64" />
        <altmember cref="P:System.Diagnostics.Process.MinWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.MaxWorkingSet" />
      </Docs>
    </Member>
    <Member MemberName="PriorityBoostEnabled">
      <MemberSignature Language="C#" Value="public bool PriorityBoostEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PriorityBoostEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PriorityBoostEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property PriorityBoostEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PriorityBoostEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.PriorityBoostEnabled : bool with get, set" Usage="System.Diagnostics.Process.PriorityBoostEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("Process will be of higher priority while it is actively used.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessPriorityBoostEnabled")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-972">포커스가 주 창에 있을 때 운영 체제가 연결된 프로세스의 우선 순위를 일시적으로 높일지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-972">Gets or sets a value indicating whether the associated process priority should temporarily be boosted by the operating system when the main window has the focus.</span></span></summary>
        <value><span data-ttu-id="67157-973">프로세스가 대기 상태에서 빠져 나올 때 프로세스의 우선 순위를 동적으로 높여야 하는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-973"><see langword="true" /> if dynamic boosting of the process priority should take place for a process when it is taken out of the wait state; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="67157-974">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-974">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-975">스레드 우선 순위 클래스에 동적 우선 순위 열거형 값 중 하나는 프로세스에서 실행 되는 경우 (<xref:System.Diagnostics.ProcessPriorityClass.Normal>, <xref:System.Diagnostics.ProcessPriorityClass.High>, 또는 <xref:System.Diagnostics.ProcessPriorityClass.RealTime>), 대기 상태에서 빠져 나올 때 스레드의 우선 순위를 일시적으로 향상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-975">When a thread runs in a process for which the priority class has one of the dynamic priority enumeration values (<xref:System.Diagnostics.ProcessPriorityClass.Normal>, <xref:System.Diagnostics.ProcessPriorityClass.High>, or <xref:System.Diagnostics.ProcessPriorityClass.RealTime>), the system temporarily boosts the thread's priority when it is taken out of a wait state.</span></span> <span data-ttu-id="67157-976">이렇게 하면 다른 프로세스에서 현재 스레드의 처리를 중단 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-976">This action prevents other processes from interrupting the processing of the current thread.</span></span> <span data-ttu-id="67157-977"><xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> 설정은 모든 기존 스레드 및 프로세스에서 만든 모든 스레드에 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-977">The <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> setting affects all the existing threads and any threads subsequently created by the process.</span></span> <span data-ttu-id="67157-978">일반 동작을 복원 하려면 설정 합니다 <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> 속성을 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-978">To restore normal behavior, set the <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> property to `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-979">우선 순위를 너무를 승격 합니다. 필수 운영 체제 및 네트워크 기능을 다른 운영 체제 태스크를 사용 하 여 문제를 일으키는 리소스를 비울 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-979">Boosting the priority too high can drain resources from essential operating system and network functions, causing problems with other operating system tasks.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="67157-980">연결된 프로세스 리소스에서 우선 순위 높임 정보를 검색할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-980">Priority boost information could not be retrieved from the associated process resource.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-981">플랫폼이 이 속성을 지원하지 않는 Windows 98 또는 Windows Millennium Edition(Windows Me)인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-981">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span></span>  
  
<span data-ttu-id="67157-982">또는</span><span class="sxs-lookup"><span data-stu-id="67157-982">-or-</span></span> 
<span data-ttu-id="67157-983">프로세스 식별자 또는 프로세스 핸들이 0인 경우.</span><span class="sxs-lookup"><span data-stu-id="67157-983">The process identifier or process handle is zero.</span></span> <span data-ttu-id="67157-984">즉, 프로세스가 시작되지 않은 경우입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-984">(The process has not been started.)</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="67157-985">원격 컴퓨터에서 실행 중인 프로세스의 <see cref="P:System.Diagnostics.Process.PriorityBoostEnabled" /> 속성에 대해 액세스를 시도했지만</span><span class="sxs-lookup"><span data-stu-id="67157-985">You are attempting to access the <see cref="P:System.Diagnostics.Process.PriorityBoostEnabled" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="67157-986">이 속성은 로컬 컴퓨터에서 실행 중인 프로세스에 대해서만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-986">This property is available only for processes that are running on the local computer.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-987">프로세스 <see cref="P:System.Diagnostics.Process.Id" />를 사용할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-987">The process <see cref="P:System.Diagnostics.Process.Id" /> is not available.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-988">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-988">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-989">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-989">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.PriorityClass" />
        <altmember cref="P:System.Diagnostics.Process.BasePriority" />
      </Docs>
    </Member>
    <Member MemberName="PriorityClass">
      <MemberSignature Language="C#" Value="public System.Diagnostics.ProcessPriorityClass PriorityClass { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.ProcessPriorityClass PriorityClass" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PriorityClass" />
      <MemberSignature Language="VB.NET" Value="Public Property PriorityClass As ProcessPriorityClass" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::ProcessPriorityClass PriorityClass { System::Diagnostics::ProcessPriorityClass get(); void set(System::Diagnostics::ProcessPriorityClass value); };" />
      <MemberSignature Language="F#" Value="member this.PriorityClass : System.Diagnostics.ProcessPriorityClass with get, set" Usage="System.Diagnostics.Process.PriorityClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The priority that the threads in the process run relative to.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessPriorityClass")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ProcessPriorityClass</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-990">연결된 프로세스에 대한 전체 우선 순위 범주를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-990">Gets or sets the overall priority category for the associated process.</span></span></summary>
        <value><span data-ttu-id="67157-991">연결된 프로세스에 대한 우선 순위 범주입니다. 이를 통해 해당 프로세스의 <see cref="P:System.Diagnostics.Process.BasePriority" />를 계산할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-991">The priority category for the associated process, from which the <see cref="P:System.Diagnostics.Process.BasePriority" /> of the process is calculated.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-992">프로세스 우선 순위 클래스는 스레드 우선 순위 수준의 범위를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-992">A process priority class encompasses a range of thread priority levels.</span></span> <span data-ttu-id="67157-993">스레드 우선 순위가 서로 다른 프로세스에서 실행 중인 프로세스의 우선 순위 클래스를 기준으로 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-993">Threads with different priorities that are running in the process run relative to the priority class of the process.</span></span> <span data-ttu-id="67157-994">Win32는 클래스 별로 7 기본 우선 순위 수준을 사용 하 여 네 가지 우선 순위 클래스를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-994">Win32 uses four priority classes with seven base priority levels per class.</span></span> <span data-ttu-id="67157-995">이러한 프로세스 우선 순위 클래스에서 캡처되는 <xref:System.Diagnostics.ProcessPriorityClass> 열거형을 사용 하면 프로세스 우선 순위 설정 <xref:System.Diagnostics.ProcessPriorityClass.Idle>, <xref:System.Diagnostics.ProcessPriorityClass.Normal>, <xref:System.Diagnostics.ProcessPriorityClass.High>, <xref:System.Diagnostics.ProcessPriorityClass.AboveNormal>, <xref:System.Diagnostics.ProcessPriorityClass.BelowNormal>, 또는 <xref:System.Diagnostics.ProcessPriorityClass.RealTime>.</span><span class="sxs-lookup"><span data-stu-id="67157-995">These process priority classes are captured in the <xref:System.Diagnostics.ProcessPriorityClass> enumeration, which lets you set the process priority to <xref:System.Diagnostics.ProcessPriorityClass.Idle>, <xref:System.Diagnostics.ProcessPriorityClass.Normal>, <xref:System.Diagnostics.ProcessPriorityClass.High>, <xref:System.Diagnostics.ProcessPriorityClass.AboveNormal>, <xref:System.Diagnostics.ProcessPriorityClass.BelowNormal>, or <xref:System.Diagnostics.ProcessPriorityClass.RealTime>.</span></span> <span data-ttu-id="67157-996">시간을 기준으로 프로세스를 프로세서에 대 한 액세스에 대 한 다른 미리 설정 해야 하는 경우 운영 체제에서 경과 된 또는 기타 상승이, 기본 우선 순위 수준을 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-996">Based on the time elapsed or other boosts, the base priority level can be changed by the operating system when a process needs to be put ahead of others for access to the processor.</span></span> <span data-ttu-id="67157-997">또한 설정할 수 있습니다는 <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> 를 일시적으로 대기 상태에서 수행 된 스레드의 우선 순위 수준을 향상 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-997">In addition, you can set the <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> to temporarily boost the priority level of threads that have been taken out of the wait state.</span></span> <span data-ttu-id="67157-998">프로세스가 대기 상태를 반환할 때 우선 순위를 다시 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-998">The priority is reset when the process returns to the wait state.</span></span>  
  
 <span data-ttu-id="67157-999"><xref:System.Diagnostics.Process.BasePriority%2A> 속성을 사용 하면 프로세스에 할당 된 우선 순위를 볼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-999">The <xref:System.Diagnostics.Process.BasePriority%2A> property lets you view the starting priority that is assigned to a process.</span></span> <span data-ttu-id="67157-1000">그러나 읽기 전용 이므로 사용할 수 없습니다는 <xref:System.Diagnostics.Process.BasePriority%2A> 프로세스의 우선 순위를 설정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1000">However, because it is read-only, you cannot use the <xref:System.Diagnostics.Process.BasePriority%2A> property to set the priority of a process.</span></span> <span data-ttu-id="67157-1001">우선 순위를 변경 하려면 사용 된 <xref:System.Diagnostics.Process.PriorityClass%2A> 속성 프로세스에 대 한 전체 우선 순위 범주를 가져오거나 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1001">To change the priority, use the <xref:System.Diagnostics.Process.PriorityClass%2A> property, which gets or sets the overall priority category for the process.</span></span>  
  
 <span data-ttu-id="67157-1002">시스템 모니터를 사용 하 여 우선 순위 클래스를 볼 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1002">The priority class cannot be viewed using System Monitor.</span></span> <span data-ttu-id="67157-1003">다음 표에서 간의 관계를 보여 줍니다.는 <xref:System.Diagnostics.Process.BasePriority%2A> 고 <xref:System.Diagnostics.Process.PriorityClass%2A> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1003">The following table shows the relationship between the <xref:System.Diagnostics.Process.BasePriority%2A> and <xref:System.Diagnostics.Process.PriorityClass%2A> values.</span></span>  
  
|<span data-ttu-id="67157-1004">BasePriority</span><span class="sxs-lookup"><span data-stu-id="67157-1004">BasePriority</span></span>|<span data-ttu-id="67157-1005">PriorityClass</span><span class="sxs-lookup"><span data-stu-id="67157-1005">PriorityClass</span></span>|  
|------------------|-------------------|  
|<span data-ttu-id="67157-1006">4</span><span class="sxs-lookup"><span data-stu-id="67157-1006">4</span></span>|<xref:System.Diagnostics.ProcessPriorityClass.Idle>|  
|<span data-ttu-id="67157-1007">8</span><span class="sxs-lookup"><span data-stu-id="67157-1007">8</span></span>|<xref:System.Diagnostics.ProcessPriorityClass.Normal>|  
|<span data-ttu-id="67157-1008">13</span><span class="sxs-lookup"><span data-stu-id="67157-1008">13</span></span>|<xref:System.Diagnostics.ProcessPriorityClass.High>|  
|<span data-ttu-id="67157-1009">24</span><span class="sxs-lookup"><span data-stu-id="67157-1009">24</span></span>|<xref:System.Diagnostics.ProcessPriorityClass.RealTime>|  
  
   
  
## Examples  
 <span data-ttu-id="67157-1010">다음 예제에서는 메모장의 인스턴스를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1010">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="67157-1011">그런 다음 예제에서는 검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1011">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="67157-1012">이 예제에서는 프로세스가 종료 하는 경우를 검색 합니다. 프로세스의 종료 코드를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1012">The example detects when the process exits, and displays the process's exit code.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="67157-1013">연결된 프로세스 리소스에서 프로세스 우선 순위 정보를 설정하거나 검색할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1013">Process priority information could not be set or retrieved from the associated process resource.</span></span>  
  
<span data-ttu-id="67157-1014">또는</span><span class="sxs-lookup"><span data-stu-id="67157-1014">-or-</span></span> 
<span data-ttu-id="67157-1015">프로세스 식별자 또는 프로세스 핸들이 0인 경우.</span><span class="sxs-lookup"><span data-stu-id="67157-1015">The process identifier or process handle is zero.</span></span> <span data-ttu-id="67157-1016">즉, 프로세스가 시작되지 않은 경우입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1016">(The process has not been started.)</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="67157-1017">원격 컴퓨터에서 실행 중인 프로세스의 <see cref="P:System.Diagnostics.Process.PriorityClass" /> 속성에 대해 액세스를 시도했지만</span><span class="sxs-lookup"><span data-stu-id="67157-1017">You are attempting to access the <see cref="P:System.Diagnostics.Process.PriorityClass" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="67157-1018">이 속성은 로컬 컴퓨터에서 실행 중인 프로세스에 대해서만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1018">This property is available only for processes that are running on the local computer.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-1019">프로세스 <see cref="P:System.Diagnostics.Process.Id" />를 사용할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1019">The process <see cref="P:System.Diagnostics.Process.Id" /> is not available.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-1020">Windows 98 또는 Windows Millennium Edition(Windows Me)을 사용하면서 <see cref="P:System.Diagnostics.Process.PriorityClass" />를 <see langword="AboveNormal" /> 또는 <see langword="BelowNormal" />로 설정한 경우.</span><span class="sxs-lookup"><span data-stu-id="67157-1020">You have set the <see cref="P:System.Diagnostics.Process.PriorityClass" /> to <see langword="AboveNormal" /> or <see langword="BelowNormal" /> when using Windows 98 or Windows Millennium Edition (Windows Me).</span></span> <span data-ttu-id="67157-1021">이러한 플랫폼에서는 우선 순위 클래스에 대해 그러한 값을 지원하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1021">These platforms do not support those values for the priority class.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="67157-1022"><see cref="T:System.Diagnostics.ProcessPriorityClass" /> 열거형에 정의된 것처럼 우선 순위 클래스에서 유효한 값을 사용하지 않으므로 해당 클래스를 설정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1022">Priority class cannot be set because it does not use a valid value, as defined in the <see cref="T:System.Diagnostics.ProcessPriorityClass" /> enumeration.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1023">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1023">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1024">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1024">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.BasePriority" />
        <altmember cref="P:System.Diagnostics.Process.PriorityBoostEnabled" />
      </Docs>
    </Member>
    <Member MemberName="PrivateMemorySize">
      <MemberSignature Language="C#" Value="public int PrivateMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PrivateMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PrivateMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PrivateMemorySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PrivateMemorySize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PrivateMemorySize : int" Usage="System.Diagnostics.Process.PrivateMemorySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of memory exclusively used by this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use PrivateMemorySize64")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PrivateMemorySize64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessPrivateMemorySize")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PrivateMemorySize64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-1025">연결된 프로세스에 할당된 전용 메모리의 양(바이트)을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1025">Gets the amount of private memory, in bytes, allocated for the associated process.</span></span></summary>
        <value><span data-ttu-id="67157-1026">연결된 프로세스에서 할당하여 다른 프로세스에서는 공유할 수 없는 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1026">The number of bytes allocated by the associated process that cannot be shared with other processes.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-1027">플랫폼이 이 속성을 지원하지 않는 Windows 98 또는 Windows Millennium Edition(Windows Me)인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1027">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1028">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1028">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1029">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1029">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.PrivateMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PrivateMemorySize64">
      <MemberSignature Language="C#" Value="public long PrivateMemorySize64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 PrivateMemorySize64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PrivateMemorySize64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PrivateMemorySize64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long PrivateMemorySize64 { long get(); };" />
      <MemberSignature Language="F#" Value="member this.PrivateMemorySize64 : int64" Usage="System.Diagnostics.Process.PrivateMemorySize64" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of memory exclusively used by this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessPrivateMemorySize")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-1030">연결된 프로세스에 할당된 전용 메모리의 양(바이트)을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1030">Gets the amount of private memory, in bytes, allocated for the associated process.</span></span></summary>
        <value><span data-ttu-id="67157-1031">연결된 프로세스에 할당되어 다른 프로세스와는 공유할 수 없는 메모리의 양(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1031">The amount of memory, in bytes, allocated for the associated process that cannot be shared with other processes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-1032">이 속성에 의해 반환 된 값 (바이트)를 다른 프로세스와 공유할 수 없는 프로세스에 의해 사용 되는 메모리의 현재 크기를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1032">The value returned by this property represents the current size of memory used by the process, in bytes, that cannot be shared with other processes.</span></span>  
  
 <span data-ttu-id="67157-1033">32 비트 프로세서 또는 64 비트 프로세서를 사용 하 여 컴퓨터에서 메모리 사용량을 모니터링 하려면이 속성을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1033">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="67157-1034">속성 값이 해당 하는 **Private Bytes** 프로세스에 대 한 성능 카운터입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1034">The property value is equivalent to the **Private Bytes** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-1035">다음 코드 예제에서는 메모장 응용 프로그램의 인스턴스를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1035">The following code example starts an instance of the Notepad application.</span></span> <span data-ttu-id="67157-1036">그런 다음 예제에서는 검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1036">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="67157-1037">이 예제에서는 프로세스가 종료 하는 경우를 검색 합니다. 종료 코드 및 최대 메모리 통계를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1037">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-1038">플랫폼이 이 속성을 지원하지 않는 Windows 98 또는 Windows Millennium Edition(Windows Me)인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1038">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1039">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1039">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1040">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1040">This member cannot be used by partially trusted code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="PrivilegedProcessorTime">
      <MemberSignature Language="C#" Value="public TimeSpan PrivilegedProcessorTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan PrivilegedProcessorTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PrivilegedProcessorTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PrivilegedProcessorTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan PrivilegedProcessorTime { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.PrivilegedProcessorTime : TimeSpan" Usage="System.Diagnostics.Process.PrivilegedProcessorTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of CPU time the process spent inside the operating system core.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessPrivilegedProcessorTime")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-1041">해당 프로세스의 시스템 프로세서 시간을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1041">Gets the privileged processor time for this process.</span></span></summary>
        <value><span data-ttu-id="67157-1042">프로세스가 운영 체제 코어 내부에서 코드를 실행하는 데 소비한 시간을 나타내는 <see cref="T:System.TimeSpan" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1042">A <see cref="T:System.TimeSpan" /> that indicates the amount of time that the process has spent running code inside the operating system core.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="67157-1043">다음 예제에서는 메모장의 인스턴스를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1043">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="67157-1044">그런 다음 예제에서는 검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1044">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="67157-1045">이 예제에서는 프로세스가 종료 하는 경우를 검색 합니다. 프로세스의 종료 코드를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1045">The example detects when the process exits, and displays the process's exit code.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-1046">플랫폼이 이 속성을 지원하지 않는 Windows 98 또는 Windows Millennium Edition(Windows Me)인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1046">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="67157-1047">원격 컴퓨터에서 실행 중인 프로세스의 <see cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" /> 속성에 대해 액세스를 시도했지만</span><span class="sxs-lookup"><span data-stu-id="67157-1047">You are attempting to access the <see cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="67157-1048">이 속성은 로컬 컴퓨터에서 실행 중인 프로세스에 대해서만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1048">This property is available only for processes that are running on the local computer.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1049">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1049">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1050">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1050">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.UserProcessorTime" />
        <altmember cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" />
      </Docs>
    </Member>
    <Member MemberName="ProcessName">
      <MemberSignature Language="C#" Value="public string ProcessName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProcessName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.ProcessName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProcessName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProcessName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProcessName : string" Usage="System.Diagnostics.Process.ProcessName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The name of this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessProcessName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-1051">프로세스의 이름을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1051">Gets the name of the process.</span></span></summary>
        <value><span data-ttu-id="67157-1052">사용자가 프로세스를 식별할 수 있도록 시스템에서 사용하는 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1052">The name that the system uses to identify the process to the user.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-1053"><xref:System.Diagnostics.Process.ProcessName%2A> 속성, 예: Outlook.exe 확장명 또는 경로 포함 하지 않는 실행 파일 이름을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1053">The <xref:System.Diagnostics.Process.ProcessName%2A> property holds an executable file name, such as Outlook, that does not include the .exe extension or the path.</span></span> <span data-ttu-id="67157-1054">가져오기 및 동일한 실행 파일을 사용 하 여 연결 된 모든 프로세스를 조작 하기 위한 것이 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1054">It is helpful for getting and manipulating all the processes that are associated with the same executable file.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-1055">온 [!INCLUDE[Win2kFamily](~/includes/win2kfamily-md.md)] 운영 체제는 <xref:System.Diagnostics.Process.ProcessName%2A> 프로세스 모듈 정보를 가져올 수 없으면 15 자로 속성 잘릴 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1055">On [!INCLUDE[Win2kFamily](~/includes/win2kfamily-md.md)] operating systems, the <xref:System.Diagnostics.Process.ProcessName%2A> property may be truncated to 15 characters if the process module information cannot be obtained.</span></span>  
  
 <span data-ttu-id="67157-1056">호출할 수 있습니다 <xref:System.Diagnostics.Process.GetProcessesByName%2A>, 지정된 된 컴퓨터에서 실행 중인 모든 인스턴스를 포함 하는 배열을 검색 하는 실행 파일 이름을 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1056">You can call <xref:System.Diagnostics.Process.GetProcessesByName%2A>, passing it an executable file name, to retrieve an array that contains every running instance on the specified computer.</span></span> <span data-ttu-id="67157-1057">실행 파일의 모든 실행 중인 인스턴스를 종료 하려면 예를 들어이 배열에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1057">You can use this array, for example, to shut down all the running instances of the executable file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-1058">프로세스에 식별자가 없거나 프로세스가 <see cref="T:System.Diagnostics.Process" />에 연결되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1058">The process does not have an identifier, or no process is associated with the <see cref="T:System.Diagnostics.Process" />.</span></span>  
  
<span data-ttu-id="67157-1059">또는</span><span class="sxs-lookup"><span data-stu-id="67157-1059">-or-</span></span> 
<span data-ttu-id="67157-1060">연결된 프로세스가 종료된 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1060">The associated process has exited.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-1061">플랫폼이 Windows 98 또는 Windows Millennium Edition(Me)입니다. Windows 98 및 Windows Me에서 이 속성에 액세스하려면 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" />를 <see langword="false" />로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1061">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> to <see langword="false" /> to access this property on Windows 98 and Windows Me.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="67157-1062">이 컴퓨터에는 프로세스가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1062">The process is not on this computer.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1063">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1063">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1064">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1064">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.Diagnostics.Process.GetProcessesByName(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ProcessorAffinity">
      <MemberSignature Language="C#" Value="public IntPtr ProcessorAffinity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ProcessorAffinity" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.ProcessorAffinity" />
      <MemberSignature Language="VB.NET" Value="Public Property ProcessorAffinity As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr ProcessorAffinity { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.ProcessorAffinity : nativeint with get, set" Usage="System.Diagnostics.Process.ProcessorAffinity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("Allowed processor that can be used by this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessProcessorAffinity")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-1065">해당 프로세스에 포함된 스레드의 실행을 예약할 수 있는 프로세서를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1065">Gets or sets the processors on which the threads in this process can be scheduled to run.</span></span></summary>
        <value><span data-ttu-id="67157-1066">연결된 프로세스의 스레드가 실행될 수 있는 프로세서를 나타내는 비트 마스크입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1066">A bitmask representing the processors that the threads in the associated process can run on.</span></span> <span data-ttu-id="67157-1067">기본값은 컴퓨터의 프로세서 수에 따라 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1067">The default depends on the number of processors on the computer.</span></span> <span data-ttu-id="67157-1068">기본값은 2 <sup>n</sup> -1로, 여기서 n은 프로세서의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1068">The default value is 2 <sup>n</sup> -1, where n is the number of processors.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-1069">Windows 2000 이상 버전에서는 프로세스의 스레드가 프로세서 캐시 다시 로드 하는 각 마이그레이션을 사용 하 여 프로세서에서 마이그레이션할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1069">In Windows 2000 and later, a thread in a process can migrate from processor to processor, with each migration reloading the processor cache.</span></span> <span data-ttu-id="67157-1070">시스템 로드가 프로세서를 특정 스레드에 실행할지 지정 성능을 향상 시킬 수 프로세서 캐시 다시 로드 되는 횟수를 줄여 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1070">Under heavy system loads, specifying which processor should run a specific thread can improve performance by reducing the number of times the processor cache is reloaded.</span></span> <span data-ttu-id="67157-1071">프로세서 및 스레드 간의 연결을 프로세서 선호도 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1071">The association between a processor and a thread is called the processor affinity.</span></span>  
  
 <span data-ttu-id="67157-1072">각 프로세서 약간으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1072">Each processor is represented as a bit.</span></span> <span data-ttu-id="67157-1073">비트 0은 프로세서 1, 1 비트가 프로세서 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1073">Bit 0 is processor one, bit 1 is processor two, and so forth.</span></span> <span data-ttu-id="67157-1074">값: 1 비트를 설정 하는 경우 해당 프로세서가 스레드 할당에 대 한 선택 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1074">If you set a bit to the value 1, the corresponding processor is selected for thread assignment.</span></span> <span data-ttu-id="67157-1075">설정 하는 경우는 <xref:System.Diagnostics.Process.ProcessorAffinity%2A> 값을 0으로 운영 체제의 예약 알고리즘 집합 스레드의 선호도 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1075">When you set the <xref:System.Diagnostics.Process.ProcessorAffinity%2A> value to zero, the operating system's scheduling algorithms set the thread's affinity.</span></span> <span data-ttu-id="67157-1076">경우는 <xref:System.Diagnostics.Process.ProcessorAffinity%2A> 값 0이 아닌 값으로 설정 되 면 값은 선택 가능한 프로세서를 지정 하는 비트 마스크로 해석 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1076">When the <xref:System.Diagnostics.Process.ProcessorAffinity%2A> value is set to any nonzero value, the value is interpreted as a bitmask that specifies those processors eligible for selection.</span></span>  
  
 <span data-ttu-id="67157-1077">다음 표에서 다양 한 <xref:System.Diagnostics.Process.ProcessorAffinity%2A> 는 프로세서가 8 개인 시스템에 대 한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1077">The following table shows a selection of <xref:System.Diagnostics.Process.ProcessorAffinity%2A> values for an eight-processor system.</span></span>  
  
|<span data-ttu-id="67157-1078">비트 마스크</span><span class="sxs-lookup"><span data-stu-id="67157-1078">Bitmask</span></span>|<span data-ttu-id="67157-1079">이진 값</span><span class="sxs-lookup"><span data-stu-id="67157-1079">Binary value</span></span>|<span data-ttu-id="67157-1080">사용할 수 있는 프로세서</span><span class="sxs-lookup"><span data-stu-id="67157-1080">Eligible processors</span></span>|  
|-------------|------------------|-------------------------|  
|<span data-ttu-id="67157-1081">0x0001</span><span class="sxs-lookup"><span data-stu-id="67157-1081">0x0001</span></span>|<span data-ttu-id="67157-1082">00000000 00000001</span><span class="sxs-lookup"><span data-stu-id="67157-1082">00000000 00000001</span></span>|<span data-ttu-id="67157-1083">1</span><span class="sxs-lookup"><span data-stu-id="67157-1083">1</span></span>|  
|<span data-ttu-id="67157-1084">0x0003</span><span class="sxs-lookup"><span data-stu-id="67157-1084">0x0003</span></span>|<span data-ttu-id="67157-1085">00000000 00000011</span><span class="sxs-lookup"><span data-stu-id="67157-1085">00000000 00000011</span></span>|<span data-ttu-id="67157-1086">1과 2</span><span class="sxs-lookup"><span data-stu-id="67157-1086">1 and 2</span></span>|  
|<span data-ttu-id="67157-1087">0x0007</span><span class="sxs-lookup"><span data-stu-id="67157-1087">0x0007</span></span>|<span data-ttu-id="67157-1088">00000000 00000111</span><span class="sxs-lookup"><span data-stu-id="67157-1088">00000000 00000111</span></span>|<span data-ttu-id="67157-1089">1, 2 및 3</span><span class="sxs-lookup"><span data-stu-id="67157-1089">1, 2 and 3</span></span>|  
|<span data-ttu-id="67157-1090">0x0009</span><span class="sxs-lookup"><span data-stu-id="67157-1090">0x0009</span></span>|<span data-ttu-id="67157-1091">00000000 00001001</span><span class="sxs-lookup"><span data-stu-id="67157-1091">00000000 00001001</span></span>|<span data-ttu-id="67157-1092">1 및 4</span><span class="sxs-lookup"><span data-stu-id="67157-1092">1 and 4</span></span>|  
|<span data-ttu-id="67157-1093">0x007F</span><span class="sxs-lookup"><span data-stu-id="67157-1093">0x007F</span></span>|<span data-ttu-id="67157-1094">00000000 01111111</span><span class="sxs-lookup"><span data-stu-id="67157-1094">00000000 01111111</span></span>|<span data-ttu-id="67157-1095">1, 2, 3, 4, 5, 6 및 7</span><span class="sxs-lookup"><span data-stu-id="67157-1095">1, 2, 3, 4, 5, 6 and 7</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="67157-1096">연결된 프로세스 리소스에서 <see cref="P:System.Diagnostics.Process.ProcessorAffinity" /> 정보를 설정하거나 검색할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1096"><see cref="P:System.Diagnostics.Process.ProcessorAffinity" /> information could not be set or retrieved from the associated process resource.</span></span>  
  
<span data-ttu-id="67157-1097">또는</span><span class="sxs-lookup"><span data-stu-id="67157-1097">-or-</span></span> 
<span data-ttu-id="67157-1098">프로세스 식별자 또는 프로세스 핸들이 0인 경우.</span><span class="sxs-lookup"><span data-stu-id="67157-1098">The process identifier or process handle is zero.</span></span> <span data-ttu-id="67157-1099">즉, 프로세스가 시작되지 않은 경우입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1099">(The process has not been started.)</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="67157-1100">원격 컴퓨터에서 실행 중인 프로세스의 <see cref="P:System.Diagnostics.Process.ProcessorAffinity" /> 속성에 대해 액세스를 시도했지만</span><span class="sxs-lookup"><span data-stu-id="67157-1100">You are attempting to access the <see cref="P:System.Diagnostics.Process.ProcessorAffinity" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="67157-1101">이 속성은 로컬 컴퓨터에서 실행 중인 프로세스에 대해서만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1101">This property is available only for processes that are running on the local computer.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-1102">프로세스 <see cref="P:System.Diagnostics.Process.Id" />를 사용할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1102">The process <see cref="P:System.Diagnostics.Process.Id" /> was not available.</span></span>  
  
<span data-ttu-id="67157-1103">또는</span><span class="sxs-lookup"><span data-stu-id="67157-1103">-or-</span></span> 
<span data-ttu-id="67157-1104">프로세스가 종료된 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1104">The process has exited.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1105">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1105">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1106">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1106">This member cannot be used by partially trusted code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Refresh();" />
      <MemberSignature Language="F#" Value="member this.Refresh : unit -&gt; unit" Usage="process.Refresh " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="67157-1107">프로세스 구성 요소 내에 캐시되어 있는 연결된 프로세스 정보를 모두 삭제합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1107">Discards any information about the associated process that has been cached inside the process component.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-1108">후 <xref:System.Diagnostics.Process.Refresh%2A> 라고, 첫 번째 요청은 각 속성에 대 한 내용은 하면 연결된 된 프로세스에서 새 값을 가져올 프로세스 구성 요소에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1108">After <xref:System.Diagnostics.Process.Refresh%2A> is called, the first request for information about each property causes the process component to obtain a new value from the associated process.</span></span>  
  
 <span data-ttu-id="67157-1109">경우는 <xref:System.Diagnostics.Process> 속성 값의 프로세스 리소스를 사용 하 여 연관 된 구성 요소는 <xref:System.Diagnostics.Process> 즉시 연결된 된 프로세스의 상태에 따라 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1109">When a <xref:System.Diagnostics.Process> component is associated with a process resource, the property values of the <xref:System.Diagnostics.Process> are immediately populated according to the status of the associated process.</span></span> <span data-ttu-id="67157-1110">에 연결된 된 프로세스에 대 한 내용은 이후에 변경 되 면 해당 변경 내용을 반영 되지 않습니다는 <xref:System.Diagnostics.Process> 구성 요소의 값을 캐시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1110">If the information about the associated process subsequently changes, those changes are not reflected in the <xref:System.Diagnostics.Process> component's cached values.</span></span> <span data-ttu-id="67157-1111"><xref:System.Diagnostics.Process> 구성 요소는 연결 된 시간에 프로세스 리소스의 스냅숏입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1111">The <xref:System.Diagnostics.Process> component is a snapshot of the process resource at the time they are associated.</span></span> <span data-ttu-id="67157-1112">연결된 된 프로세스에 대 한 현재 값을 보려면 호출을 <xref:System.Diagnostics.Process.Refresh%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="67157-1112">To view the current values for the associated process, call the <xref:System.Diagnostics.Process.Refresh%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-1113">다음 예제에서는 메모장의 인스턴스를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1113">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="67157-1114">그런 다음 10 초 동안 최대 2 초 간격 연결된 된 프로세스의 실제 메모리 사용량을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1114">It then retrieves the physical memory usage of the associated process at 2 second intervals for a maximum of 10 seconds.</span></span> <span data-ttu-id="67157-1115">이 예제에서는 10 초 경과 되기 전에 프로세스가 종료 여부를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1115">The example detects whether the process exits before 10 seconds have elapsed.</span></span> <span data-ttu-id="67157-1116">이 예제에서는 10 초 후 실행 중인 경우 프로세스를 닫습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1116">The example closes the process if it is still running after 10 seconds.</span></span>  
  
 [!code-cpp[process_refresh#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_refresh/CPP/process_refresh.cpp#1)]
 [!code-csharp[process_refresh#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_refresh/CS/process_refresh.cs#1)]
 [!code-vb[process_refresh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_refresh/VB/process_refresh.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1117">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1117">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1118">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1118">This member cannot be used by partially trusted code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Responding">
      <MemberSignature Language="C#" Value="public bool Responding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Responding" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.Responding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Responding As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Responding { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Responding : bool" Usage="System.Diagnostics.Process.Responding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("Is this process responsive.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessResponding")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-1119">프로세스의 사용자 인터페이스가 응답하는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1119">Gets a value indicating whether the user interface of the process is responding.</span></span></summary>
        <value><span data-ttu-id="67157-1120">연결된 프로세스의 사용자 인터페이스가 시스템에 응답하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1120"><see langword="true" /> if the user interface of the associated process is responding to the system; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-1121">프로세스에 사용자 인터페이스는 <xref:System.Diagnostics.Process.Responding%2A> 프로세스 사용자 입력에 응답 하는지 여부를 확인 하는 사용자 인터페이스를 연결 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1121">If a process has a user interface, the <xref:System.Diagnostics.Process.Responding%2A> property contacts the user interface to determine whether the process is responding to user input.</span></span> <span data-ttu-id="67157-1122">인터페이스를 즉시 응답 하지 않으면 합니다 <xref:System.Diagnostics.Process.Responding%2A> 속성이 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1122">If the interface does not respond immediately, the <xref:System.Diagnostics.Process.Responding%2A> property returns `false`.</span></span> <span data-ttu-id="67157-1123">연결된 된 프로세스의 인터페이스에서 응답을 중지 하는지 여부를 확인 하려면이 속성을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1123">Use this property to determine whether the interface of the associated process has stopped responding.</span></span>  
  
 <span data-ttu-id="67157-1124">프로세스에 없는 경우는 <xref:System.Diagnostics.Process.MainWindowHandle%2A>,이 속성은 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1124">If the process does not have a <xref:System.Diagnostics.Process.MainWindowHandle%2A>, this property returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-1125">다음 예제에서는 메모장의 인스턴스를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1125">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="67157-1126">그런 다음 예제에서는 검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1126">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="67157-1127">이 예제에서는 프로세스가 종료 하는 경우를 검색 합니다. 프로세스의 종료 코드를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1127">The example detects when the process exits, and displays the process's exit code.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-1128">플랫폼이 Windows 98 또는 Windows Millennium Edition(Me)입니다. Windows 98 및 Windows Me에서 이 속성에 액세스하려면 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" />를 <see langword="false" />로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1128">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> to <see langword="false" /> to access this property on Windows 98 and Windows Me.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-1129">이 <see cref="T:System.Diagnostics.Process" /> 개체에 연결된 프로세스가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1129">There is no process associated with this <see cref="T:System.Diagnostics.Process" /> object.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="67157-1130">원격 컴퓨터에서 실행 중인 프로세스의 <see cref="P:System.Diagnostics.Process.Responding" /> 속성에 대해 액세스를 시도했지만</span><span class="sxs-lookup"><span data-stu-id="67157-1130">You are attempting to access the <see cref="P:System.Diagnostics.Process.Responding" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="67157-1131">이 속성은 로컬 컴퓨터에서 실행 중인 프로세스에 대해서만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1131">This property is available only for processes that are running on the local computer.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1132">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1132">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1133">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1133">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.MainWindowHandle" />
      </Docs>
    </Member>
    <Member MemberName="SafeHandle">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.SafeHandles.SafeProcessHandle SafeHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.SafeHandles.SafeProcessHandle SafeHandle" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.SafeHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SafeHandle As SafeProcessHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::SafeHandles::SafeProcessHandle ^ SafeHandle { Microsoft::Win32::SafeHandles::SafeProcessHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SafeHandle : Microsoft.Win32.SafeHandles.SafeProcessHandle" Usage="System.Diagnostics.Process.SafeHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeProcessHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-1134">이 프로세스에 대한 기본 핸들을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1134">Gets the native handle to this process.</span></span></summary>
        <value><span data-ttu-id="67157-1135">이 프로세스에 대한 기본 핸들입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1135">The native handle to this process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-1136">핸들이 호출 하는 구성 요소 프로세스를 시작 하는 경우 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1136">The handle is only available if the calling component started the process.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionId">
      <MemberSignature Language="C#" Value="public int SessionId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SessionId" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.SessionId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SessionId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SessionId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.SessionId : int" Usage="System.Diagnostics.Process.SessionId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The session ID for this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoNotSupported("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessSessionId")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-1137">연결된 프로세스의 터미널 서비스 세션 식별자를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1137">Gets the Terminal Services session identifier for the associated process.</span></span></summary>
        <value><span data-ttu-id="67157-1138">연결된 프로세스의 터미널 서비스 세션 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1138">The Terminal Services session identifier for the associated process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-1139"><xref:System.Diagnostics.Process.SessionId%2A> 응용 프로그램이 현재 실행 되는 세션을 식별 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1139">The <xref:System.Diagnostics.Process.SessionId%2A> property identifies the session in which the application is currently running.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="67157-1140">이 프로세스에 연결된 세션이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1140">There is no session associated with this process.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-1141">이 세션 식별자에 연결된 프로세스가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1141">There is no process associated with this session identifier.</span></span>  
  
<span data-ttu-id="67157-1142">또는</span><span class="sxs-lookup"><span data-stu-id="67157-1142">-or-</span></span> 
<span data-ttu-id="67157-1143">연결된 프로세스가 이 컴퓨터에 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1143">The associated process is not on this machine.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-1144"><see cref="P:System.Diagnostics.Process.SessionId" /> 속성은 Windows 98에서 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1144">The <see cref="P:System.Diagnostics.Process.SessionId" /> property is not supported on Windows 98.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1145">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1145">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1146">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1146">This member cannot be used by partially trusted code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="StandardError">
      <MemberSignature Language="C#" Value="public System.IO.StreamReader StandardError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.StreamReader StandardError" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.StandardError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardError As StreamReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::StreamReader ^ StandardError { System::IO::StreamReader ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardError : System.IO.StreamReader" Usage="System.Diagnostics.Process.StandardError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("Standard error stream of the process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessStandardError")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-1147">응용 프로그램의 오류 출력을 읽는 데 사용되는 스트림을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1147">Gets a stream used to read the error output of the application.</span></span></summary>
        <value><span data-ttu-id="67157-1148">응용 프로그램의 표준 오류 스트림을 읽는 데 사용할 수 있는 <see cref="T:System.IO.StreamReader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1148">A <see cref="T:System.IO.StreamReader" /> that can be used to read the standard error stream of the application.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-1149">경우는 <xref:System.Diagnostics.Process> 해당 텍스트는 일반적으로 콘솔에 표시 됩니다 해당 표준 오류 스트림에 텍스트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1149">When a <xref:System.Diagnostics.Process> writes text to its standard error stream, that text is normally displayed on the console.</span></span> <span data-ttu-id="67157-1150">리디렉션하여는 <xref:System.Diagnostics.Process.StandardError%2A> 스트림을 조작 하거나 프로세스의 오류 출력을 표시 하지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1150">By redirecting the <xref:System.Diagnostics.Process.StandardError%2A> stream, you can manipulate or suppress the error output of a process.</span></span> <span data-ttu-id="67157-1151">예를 들어, 텍스트를 필터링 하 고, 다르게 형식을 지정 하 하거나, 콘솔 및 지정 된 로그 파일 출력을 쓸 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1151">For example, you can filter the text, format it differently, or write the output to both the console and a designated log file.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-1152">사용 하 <xref:System.Diagnostics.Process.StandardError%2A>를 설정 해야 합니다 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType> 에 `false`를 설정 해야 <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A?displayProperty=nameWithType> 에 `true`.</span><span class="sxs-lookup"><span data-stu-id="67157-1152">To use <xref:System.Diagnostics.Process.StandardError%2A>, you must set <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType> to `false`, and you must set <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A?displayProperty=nameWithType> to `true`.</span></span> <span data-ttu-id="67157-1153">읽기이 고, 그렇지는 <xref:System.Diagnostics.Process.StandardError%2A> 스트림 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1153">Otherwise, reading from the <xref:System.Diagnostics.Process.StandardError%2A> stream throws an exception.</span></span>  
  
 <span data-ttu-id="67157-1154">리디렉션된 <xref:System.Diagnostics.Process.StandardError%2A> 동기적 또는 비동기적으로 스트림을 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1154">The redirected <xref:System.Diagnostics.Process.StandardError%2A> stream can be read synchronously or asynchronously.</span></span> <span data-ttu-id="67157-1155">와 같은 메서드와 <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>, 및 <xref:System.IO.StreamReader.ReadToEnd%2A> 프로세스의 오류 출력 스트림에서 동기 읽기 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1155">Methods such as <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>, and <xref:System.IO.StreamReader.ReadToEnd%2A> perform synchronous read operations on the error output stream of the process.</span></span> <span data-ttu-id="67157-1156">이들 동기 읽기 작업이 연결 될 때까지 완료 되지 않고 <xref:System.Diagnostics.Process> 쓸 해당 <xref:System.Diagnostics.Process.StandardError%2A> 스트리밍하거나 스트림을 닫습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1156">These synchronous read operations do not complete until the associated <xref:System.Diagnostics.Process> writes to its <xref:System.Diagnostics.Process.StandardError%2A> stream, or closes the stream.</span></span>  
  
 <span data-ttu-id="67157-1157">반대로 <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> 시작 비동기 읽기 작업에는 <xref:System.Diagnostics.Process.StandardError%2A> 스트림 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1157">In contrast, <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> starts asynchronous read operations on the <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span> <span data-ttu-id="67157-1158">이 메서드는 지정 된 이벤트 처리기가 스트림 출력 하 고 이벤트 처리기에 스트림을 출력 하는 동안 다른 작업을 수행할 수 있는 호출자에 게 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1158">This method enables a designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.</span></span>  
  
 <span data-ttu-id="67157-1159">동기 읽기 작업에서 읽는 호출자 간의 종속성을 유발 합니다 <xref:System.Diagnostics.Process.StandardError%2A> 스트림과 자식 해당 스트림에 대 한 쓰기를 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1159">Synchronous read operations introduce a dependency between the caller reading from the <xref:System.Diagnostics.Process.StandardError%2A> stream and the child process writing to that stream.</span></span> <span data-ttu-id="67157-1160">이러한 종속성은 교착 상태가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1160">These dependencies can result in deadlock conditions.</span></span> <span data-ttu-id="67157-1161">호출자를 자식 프로세스의 리디렉션된 스트림에서 읽는 경우에 자식에 종속 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1161">When the caller reads from the redirected stream of a child process, it is dependent on the child.</span></span> <span data-ttu-id="67157-1162">자식에서 스트림에 쓰려는 또는 스트림의 닫을 때까지 호출자가 읽기 작업에서 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1162">The caller waits on the read operation until the child writes to the stream or closes the stream.</span></span> <span data-ttu-id="67157-1163">자식 프로세스 리디렉션된 스트림을 맞게 충분 한 데이터를 쓰면 때에 부모에 종속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1163">When the child process writes enough data to fill its redirected stream, it is dependent on the parent.</span></span> <span data-ttu-id="67157-1164">자식 프로세스는 부모 전체 스트림에서 읽거나 스트림의 닫을 때까지 다음 쓰기 작업에서 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1164">The child process waits on the next write operation until the parent reads from the full stream or closes the stream.</span></span> <span data-ttu-id="67157-1165">교착 상태에는 호출자와 자식 프로세스 작업을 완료 하기 위해 서로 대기 하 고 진행할 수 있습니다 둘 때 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1165">The deadlock condition results when the caller and child process wait on each other to complete an operation, and neither can proceed.</span></span> <span data-ttu-id="67157-1166">호출자와 자식 프로세스 간의 종속성을 평가 하 여 교착 상태를 방지할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1166">You can avoid deadlocks by evaluating dependencies between the caller and child process.</span></span>  

<span data-ttu-id="67157-1167">이 마지막으로 두 가지 예제 사용 섹션을 <xref:System.Diagnostics.Process.Start%2A> 라는 실행 파일을 실행 하는 메서드 *Write500Lines.exe*합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1167">The last two examples in this section use the <xref:System.Diagnostics.Process.Start%2A> method to launch an executable named *Write500Lines.exe*.</span></span> <span data-ttu-id="67157-1168">다음 예제에서는 소스 코드를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1168">The following example contains its source code.</span></span>

[!code-csharp[Executable launched by Process.Start](~/samples/snippets/csharp/api/system.diagnostics/process/standardoutput/write500lines.cs)]
[!code-vb[Executable launched by Process.Start](~/samples/snippets/visualbasic/api/system.diagnostics/process/standardoutput/write500lines.vb)]

<span data-ttu-id="67157-1169">다음 예제에서는 리디렉션된 오류 스트림에서 읽고 자식 프로세스가 종료 될 때까지 대기 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1169">The following example shows how to read from a redirected error stream and wait for the child process to exit.</span></span> <span data-ttu-id="67157-1170">호출 하 여 교착 상태를 방지 하기 `p.StandardError.ReadToEnd` 하기 전에 `p.WaitForExit`입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1170">It avoids a deadlock condition by calling `p.StandardError.ReadToEnd` before `p.WaitForExit`.</span></span> <span data-ttu-id="67157-1171">부모 프로세스에서 호출 하는 경우 교착 상태가 발생할 수 있습니다 `p.WaitForExit` 하기 전에 `p.StandardError.ReadToEnd` 자식 프로세스 리디렉션된 스트림에 맞게 충분 한 텍스트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1171">A deadlock condition can result if the parent process calls `p.WaitForExit` before `p.StandardError.ReadToEnd` and the child process writes enough text to fill the redirected stream.</span></span> <span data-ttu-id="67157-1172">부모 프로세스를 종료 하는 자식 프로세스 무기한 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1172">The parent process would wait indefinitely for the child process to exit.</span></span> <span data-ttu-id="67157-1173">자식 프로세스 전체를 읽을 부모 무기한 대기 <xref:System.Diagnostics.Process.StandardError%2A> 스트림 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1173">The child process would wait indefinitely for the parent to read from the full <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span>   

[!code-csharp[Reading from the error stream](~/samples/snippets/csharp/api/system.diagnostics/process/standarderror/stderror-sync.cs)]
[!code-vb[Reading from the error stream](~/samples/snippets/visualbasic/api/system.diagnostics/process/standarderror/stderror-sync.vb)]  

<span data-ttu-id="67157-1174">표준 출력 및 표준 오류 스트림을에서 모든 텍스트를 읽을 때에 유사한 문제가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1174">There is a similar issue when you read all text from both the standard output and standard error streams.</span></span> <span data-ttu-id="67157-1175">다음 예제에서는 두 스트림이 읽기 작업을 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1175">The following example performs a read operation on both streams.</span></span> <span data-ttu-id="67157-1176">비동기 읽기 작업에서 수행 하 여 교착 상태를 방지 하는 <xref:System.Diagnostics.Process.StandardError%2A> 스트림 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1176">It avoids the deadlock condition by performing asynchronous read operations on the <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span> <span data-ttu-id="67157-1177">부모 프로세스에서 호출 하는 경우 교착 상태가 발생 `p.StandardOutput.ReadToEnd` 뒤에 `p.StandardError.ReadToEnd` 자식 프로세스 오류 스트림을 맞게 충분 한 텍스트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1177">A deadlock condition results if the parent process calls `p.StandardOutput.ReadToEnd` followed by `p.StandardError.ReadToEnd` and the child process writes enough text to fill its error stream.</span></span> <span data-ttu-id="67157-1178">부모 프로세스를 닫고 자식 프로세스 무기한 대기 해당 <xref:System.Diagnostics.Process.StandardOutput%2A> 스트림 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1178">The parent process would wait indefinitely for the child process to close its <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span> <span data-ttu-id="67157-1179">자식 프로세스 전체를 읽을 부모 무기한 대기 <xref:System.Diagnostics.Process.StandardError%2A> 스트림 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1179">The child process would wait indefinitely for the parent to read from the full <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span>  
[!code-csharp[Reading from both streams](~/samples/snippets/csharp/api/system.diagnostics/process/standardoutput/stdoutput-async.cs)]
[!code-vb[Reading from both streams](~/samples/snippets/visualbasic/api/system.diagnostics/process/standardoutput/stdoutput-async.vb)]  

<span data-ttu-id="67157-1180">이러한 종속성 및 잠재적인 해당 교착 상태 방지 하기 위해 비동기 읽기 작업을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1180">You can use asynchronous read operations to avoid these dependencies and their deadlock potential.</span></span> <span data-ttu-id="67157-1181">또는 두 개의 스레드를 만들고 각 스트림이 별도 스레드에서 출력을 읽는 하 여 교착 상태를 방지할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1181">Alternately, you can avoid the deadlock condition by creating two threads and reading the output of each stream on a separate thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-1182">리디렉션된 스트림에서 동기 및 비동기 읽기 작업을 혼합할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1182">You cannot mix asynchronous and synchronous read operations on a redirected stream.</span></span> <span data-ttu-id="67157-1183">한 번 리디렉션된 스트림을 <xref:System.Diagnostics.Process> 열려 비동기 또는 동기 모드에서 모든 이후 읽기 동일한 모드에서 해당 스트림의 작업 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1183">Once the redirected stream of a <xref:System.Diagnostics.Process> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</span></span> <span data-ttu-id="67157-1184">예를 들어 따르지 <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> 에 대 한 호출을 사용 하 여 <xref:System.IO.StreamReader.ReadLine%2A> 에 <xref:System.Diagnostics.Process.StandardError%2A> 스트림 또는 그 반대로 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1184">For example, do not follow <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> with a call to <xref:System.IO.StreamReader.ReadLine%2A> on the <xref:System.Diagnostics.Process.StandardError%2A> stream, or vice versa.</span></span> <span data-ttu-id="67157-1185">그러나 서로 다른 모드에 두 개의 스트림을 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1185">However, you can read two different streams in different modes.</span></span> <span data-ttu-id="67157-1186">예를 들어, 호출할 수 있습니다 <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> 호출 <xref:System.IO.StreamReader.ReadLine%2A> 에 대 한는 <xref:System.Diagnostics.Process.StandardError%2A> 스트림 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1186">For example, you can call <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> and then call <xref:System.IO.StreamReader.ReadLine%2A> for the <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-1187">다음 예제에서는 `net use` 명령을 사용자와 함께 네트워크 리소스에 매핑할 인수를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1187">The following example uses the `net use` command together with a user supplied argument to map a network resource.</span></span> <span data-ttu-id="67157-1188">그런 다음 net 명령 표준 오류 스트림을 읽는 하 고 콘솔에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1188">It then reads the standard error stream of the net command and writes it to console.</span></span>  
  
 [!code-cpp[Process_StandardError#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process_StandardError/CPP/source.cpp#1)]
 [!code-csharp[Process_StandardError#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process_StandardError/CS/source.cs#1)]
 [!code-vb[Process_StandardError#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process_StandardError/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-1189"><see cref="P:System.Diagnostics.Process.StandardError" /> 스트림이 리디렉션에 대해 정의되지 않은 경우. <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" />가 <see langword="true" />로 설정되어 있고 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" />가 <see langword="false" />로 설정되어 있는지 확인하십시오.</span><span class="sxs-lookup"><span data-stu-id="67157-1189">The <see cref="P:System.Diagnostics.Process.StandardError" /> stream has not been defined for redirection; ensure <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> is set to <see langword="true" /> and <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> is set to <see langword="false" />.</span></span>  
  
<span data-ttu-id="67157-1190">또는</span><span class="sxs-lookup"><span data-stu-id="67157-1190">-or-</span></span> 
<span data-ttu-id="67157-1191"><see cref="P:System.Diagnostics.Process.StandardError" /> 스트림이 <see cref="M:System.Diagnostics.Process.BeginErrorReadLine" />을 사용한 비동기 읽기 작업에 대해 열려 있는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1191">The <see cref="P:System.Diagnostics.Process.StandardError" /> stream has been opened for asynchronous read operations with <see cref="M:System.Diagnostics.Process.BeginErrorReadLine" />.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1192">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1192">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1193">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1193">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.StandardInput" />
        <altmember cref="P:System.Diagnostics.Process.StandardOutput" />
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" />
      </Docs>
    </Member>
    <Member MemberName="StandardInput">
      <MemberSignature Language="C#" Value="public System.IO.StreamWriter StandardInput { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.StreamWriter StandardInput" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.StandardInput" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardInput As StreamWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::StreamWriter ^ StandardInput { System::IO::StreamWriter ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardInput : System.IO.StreamWriter" Usage="System.Diagnostics.Process.StandardInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("Standard input stream of the process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessStandardInput")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-1194">응용 프로그램의 입력을 쓰는 데 사용되는 스트림을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1194">Gets a stream used to write the input of the application.</span></span></summary>
        <value><span data-ttu-id="67157-1195">응용 프로그램의 표준 입력 스트림을 쓰는 데 사용할 수 있는 <see cref="T:System.IO.StreamWriter" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1195">A <see cref="T:System.IO.StreamWriter" /> that can be used to write the standard input stream of the application.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-1196"><xref:System.Diagnostics.Process> 해당 표준 입력된 스트림을 일반적으로 키보드에서 입력된 텍스트를 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1196">A <xref:System.Diagnostics.Process> can read input text from its standard input stream, typically the keyboard.</span></span> <span data-ttu-id="67157-1197">리디렉션하여는 <xref:System.Diagnostics.Process.StandardInput%2A> 스트림 입력을 프로그래밍 방식으로 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1197">By redirecting the <xref:System.Diagnostics.Process.StandardInput%2A> stream, you can programmatically specify the input.</span></span> <span data-ttu-id="67157-1198">예를 들어 키보드 입력을 사용 하는 대신 지정 된 파일의 내용에서 텍스트 또는 다른 응용 프로그램에서 출력을 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1198">For example, instead of using keyboard input, you can provide text from the contents of a designated file or output from another application.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-1199">사용 하 <xref:System.Diagnostics.Process.StandardInput%2A>를 설정 해야 합니다 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType> 에 `false`를 설정 해야 <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardInput%2A?displayProperty=nameWithType> 에 `true`.</span><span class="sxs-lookup"><span data-stu-id="67157-1199">To use <xref:System.Diagnostics.Process.StandardInput%2A>, you must set <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType> to `false`, and you must set <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardInput%2A?displayProperty=nameWithType> to `true`.</span></span> <span data-ttu-id="67157-1200">쓸이 고, 그렇지는 <xref:System.Diagnostics.Process.StandardInput%2A> 스트림 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1200">Otherwise, writing to the <xref:System.Diagnostics.Process.StandardInput%2A> stream throws an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-1201">다음 예제에서는 리디렉션하는 방법을 보여 줍니다는 <xref:System.Diagnostics.Process.StandardInput%2A> 프로세스의 스트림입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1201">The following example illustrates how to redirect the <xref:System.Diagnostics.Process.StandardInput%2A> stream of a process.</span></span> <span data-ttu-id="67157-1202">이 예제에서는 시작을 `sort` 리디렉션된 입력 명령을 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1202">The example starts the `sort` command with redirected input.</span></span> <span data-ttu-id="67157-1203">그런 다음 텍스트에 대 한 라는 메시지를 전달 합니다 `sort` 리디렉션된를 사용 하 여 프로세스 <xref:System.Diagnostics.Process.StandardInput%2A> 스트림 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1203">It then prompts the user for text, and passes that to the `sort` process by means of the redirected <xref:System.Diagnostics.Process.StandardInput%2A> stream.</span></span> <span data-ttu-id="67157-1204">`sort` 결과가 콘솔에서 사용자에 게 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1204">The `sort` results are displayed to the user on the console.</span></span>  
  
 [!code-cpp[Process_StandardInput#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process_StandardInput/CPP/process_standardinput.cpp#1)]
 [!code-csharp[Process_StandardInput#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process_StandardInput/CS/process_standardinput.cs#1)]
 [!code-vb[Process_StandardInput#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process_StandardInput/VB/process_standardinput.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-1205"><see cref="P:System.Diagnostics.Process.StandardInput" />이 <see langword="false" />로 설정되어 있기 때문에 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" /> 스트림이 정의되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1205">The <see cref="P:System.Diagnostics.Process.StandardInput" /> stream has not been defined because <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" /> is set to <see langword="false" />.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1206">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1206">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1207">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1207">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.StandardOutput" />
        <altmember cref="P:System.Diagnostics.Process.StandardError" />
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" />
      </Docs>
    </Member>
    <Member MemberName="StandardOutput">
      <MemberSignature Language="C#" Value="public System.IO.StreamReader StandardOutput { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.StreamReader StandardOutput" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.StandardOutput" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardOutput As StreamReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::StreamReader ^ StandardOutput { System::IO::StreamReader ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardOutput : System.IO.StreamReader" Usage="System.Diagnostics.Process.StandardOutput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("Standard output stream of the process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessStandardOutput")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-1208">응용 프로그램의 텍스트 출력을 읽는 데 사용되는 스트림을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1208">Gets a stream used to read the textual output of the application.</span></span></summary>
        <value><span data-ttu-id="67157-1209">응용 프로그램의 표준 출력 스트림을 읽는 데 사용할 수 있는 <see cref="T:System.IO.StreamReader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1209">A <see cref="T:System.IO.StreamReader" /> that can be used to read the standard output stream of the application.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-1210">경우는 <xref:System.Diagnostics.Process> 해당 텍스트는 일반적으로 콘솔에 표시 됩니다는 표준 스트림에 텍스트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1210">When a <xref:System.Diagnostics.Process> writes text to its standard stream, that text is normally displayed on the console.</span></span> <span data-ttu-id="67157-1211">리디렉션하여는 <xref:System.Diagnostics.Process.StandardOutput%2A> 스트림을 조작 하거나 프로세스의 출력을 표시 하지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1211">By redirecting the <xref:System.Diagnostics.Process.StandardOutput%2A> stream, you can manipulate or suppress the output of a process.</span></span> <span data-ttu-id="67157-1212">예를 들어, 텍스트를 필터링 하 고, 다르게 형식을 지정 하 하거나, 콘솔 및 지정 된 로그 파일 출력을 쓸 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1212">For example, you can filter the text, format it differently, or write the output to both the console and a designated log file.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-1213">사용 하 <xref:System.Diagnostics.Process.StandardOutput%2A>를 설정 해야 합니다 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType> 에 `false`를 설정 해야 <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A?displayProperty=nameWithType> 에 `true`.</span><span class="sxs-lookup"><span data-stu-id="67157-1213">To use <xref:System.Diagnostics.Process.StandardOutput%2A>, you must set <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType> to `false`, and you must set <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A?displayProperty=nameWithType> to `true`.</span></span> <span data-ttu-id="67157-1214">읽기이 고, 그렇지는 <xref:System.Diagnostics.Process.StandardOutput%2A> 스트림 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1214">Otherwise, reading from the <xref:System.Diagnostics.Process.StandardOutput%2A> stream throws an exception.</span></span>  
  
 <span data-ttu-id="67157-1215">리디렉션된 <xref:System.Diagnostics.Process.StandardOutput%2A> 동기적 또는 비동기적으로 스트림을 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1215">The redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream can be read synchronously or asynchronously.</span></span> <span data-ttu-id="67157-1216">와 같은 메서드와 <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>, 및 <xref:System.IO.StreamReader.ReadToEnd%2A> 프로세스의 출력 스트림에서 동기 읽기 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1216">Methods such as <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>, and <xref:System.IO.StreamReader.ReadToEnd%2A> perform synchronous read operations on the output stream of the process.</span></span> <span data-ttu-id="67157-1217">이들 동기 읽기 작업이 연결 될 때까지 완료 되지 않고 <xref:System.Diagnostics.Process> 쓸 해당 <xref:System.Diagnostics.Process.StandardOutput%2A> 스트리밍하거나 스트림을 닫습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1217">These synchronous read operations do not complete until the associated <xref:System.Diagnostics.Process> writes to its <xref:System.Diagnostics.Process.StandardOutput%2A> stream, or closes the stream.</span></span>  
  
 <span data-ttu-id="67157-1218">반대로 <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> 시작 비동기 읽기 작업에는 <xref:System.Diagnostics.Process.StandardOutput%2A> 스트림 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1218">In contrast, <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> starts asynchronous read operations on the <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span> <span data-ttu-id="67157-1219">이 메서드는 지정 된 이벤트 처리기가 스트림 출력 하 고 이벤트 처리기에 스트림을 출력 하는 동안 다른 작업을 수행할 수 있는 호출자에 게 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1219">This method enables a designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.</span></span>  
  
 <span data-ttu-id="67157-1220">동기 읽기 작업에서 읽는 호출자 간의 종속성을 유발 합니다 <xref:System.Diagnostics.Process.StandardOutput%2A> 스트림과 자식 해당 스트림에 대 한 쓰기를 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1220">Synchronous read operations introduce a dependency between the caller reading from the <xref:System.Diagnostics.Process.StandardOutput%2A> stream and the child process writing to that stream.</span></span> <span data-ttu-id="67157-1221">이러한 종속성은 교착 상태가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1221">These dependencies can result in deadlock conditions.</span></span> <span data-ttu-id="67157-1222">호출자를 자식 프로세스의 리디렉션된 스트림에서 읽는 경우에 자식에 종속 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1222">When the caller reads from the redirected stream of a child process, it is dependent on the child.</span></span> <span data-ttu-id="67157-1223">자식에서 스트림에 쓰려는 또는 스트림의 닫을 때까지 호출자가 읽기 작업에서 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1223">The caller waits on the read operation until the child writes to the stream or closes the stream.</span></span> <span data-ttu-id="67157-1224">자식 프로세스 리디렉션된 스트림을 맞게 충분 한 데이터를 쓰면 때에 부모에 종속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1224">When the child process writes enough data to fill its redirected stream, it is dependent on the parent.</span></span> <span data-ttu-id="67157-1225">자식 프로세스는 부모 전체 스트림에서 읽거나 스트림의 닫을 때까지 다음 쓰기 작업에서 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1225">The child process waits on the next write operation until the parent reads from the full stream or closes the stream.</span></span> <span data-ttu-id="67157-1226">교착 상태에는 호출자와 자식 프로세스 작업을 완료 하기 위해 서로 대기 하 고 진행할 수 있습니다 둘 때 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1226">The deadlock condition results when the caller and child process wait on each other to complete an operation, and neither can proceed.</span></span> <span data-ttu-id="67157-1227">호출자와 자식 프로세스 간의 종속성을 평가 하 여 교착 상태를 방지할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1227">You can avoid deadlocks by evaluating dependencies between the caller and child process.</span></span>  

<span data-ttu-id="67157-1228">이 마지막으로 두 가지 예제 사용 섹션을 <xref:System.Diagnostics.Process.Start%2A> 라는 실행 파일을 실행 하는 메서드 *Write500Lines.exe*합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1228">The last two examples in this section use the <xref:System.Diagnostics.Process.Start%2A> method to launch an executable named *Write500Lines.exe*.</span></span> <span data-ttu-id="67157-1229">다음 예제에서는 소스 코드를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1229">The following example contains its source code.</span></span>

[!code-csharp[Executable launched by Process.Start](~/samples/snippets/csharp/api/system.diagnostics/process/standardoutput/write500lines.cs)]
[!code-vb[Executable launched by Process.Start](~/samples/snippets/visualbasic/api/system.diagnostics/process/standardoutput/write500lines.vb)]

<span data-ttu-id="67157-1230">다음 예제에서는 리디렉션된 스트림에서 읽고 자식 프로세스가 종료 될 때까지 대기 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1230">The following example shows how to read from a redirected stream and wait for the child process to exit.</span></span> <span data-ttu-id="67157-1231">이 예제에서는 호출 하 여 교착 상태를 방지 `p.StandardOutput.ReadToEnd` 하기 전에 `p.WaitForExit`입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1231">The example avoids a deadlock condition by calling `p.StandardOutput.ReadToEnd` before `p.WaitForExit`.</span></span> <span data-ttu-id="67157-1232">부모 프로세스에서 호출 하는 경우 교착 상태가 발생할 수 있습니다 `p.WaitForExit` 하기 전에 `p.StandardOutput.ReadToEnd` 자식 프로세스 리디렉션된 스트림에 맞게 충분 한 텍스트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1232">A deadlock condition can result if the parent process calls `p.WaitForExit` before `p.StandardOutput.ReadToEnd` and the child process writes enough text to fill the redirected stream.</span></span> <span data-ttu-id="67157-1233">부모 프로세스를 종료 하는 자식 프로세스 무기한 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1233">The parent process would wait indefinitely for the child process to exit.</span></span> <span data-ttu-id="67157-1234">자식 프로세스 전체를 읽을 부모 무기한 대기 <xref:System.Diagnostics.Process.StandardOutput%2A> 스트림 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1234">The child process would wait indefinitely for the parent to read from the full <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span>  

[!code-csharp[Reading synchronously from a redirected output stream](~/samples/snippets/csharp/api/system.diagnostics/process/standardoutput/stdoutput-sync.cs)]  
[!code-vb[Reading synchronously from a redirected output stream](~/samples/snippets/visualbasic/api/system.diagnostics/process/standardoutput/stdoutput-sync.vb)]  

<span data-ttu-id="67157-1235">표준 출력 및 표준 오류 스트림을에서 모든 텍스트를 읽을 때에 유사한 문제가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1235">There is a similar issue when you read all text from both the standard output and standard error streams.</span></span> <span data-ttu-id="67157-1236">다음 예제에서는 두 스트림이 읽기 작업을 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1236">The following example performs a read operation on both streams.</span></span> <span data-ttu-id="67157-1237">비동기 읽기 작업에서 수행 하 여 교착 상태를 방지 하는 <xref:System.Diagnostics.Process.StandardError%2A> 스트림 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1237">It avoids the deadlock condition by performing asynchronous read operations on the <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span> <span data-ttu-id="67157-1238">부모 프로세스에서 호출 하는 경우 교착 상태가 발생 `p.StandardOutput.ReadToEnd` 뒤에 `p.StandardError.ReadToEnd` 자식 프로세스 오류 스트림을 맞게 충분 한 텍스트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1238">A deadlock condition results if the parent process calls `p.StandardOutput.ReadToEnd` followed by `p.StandardError.ReadToEnd` and the child process writes enough text to fill its error stream.</span></span> <span data-ttu-id="67157-1239">부모 프로세스를 닫고 자식 프로세스 무기한 대기 해당 <xref:System.Diagnostics.Process.StandardOutput%2A> 스트림 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1239">The parent process would wait indefinitely for the child process to close its <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span> <span data-ttu-id="67157-1240">자식 프로세스 전체를 읽을 부모 무기한 대기 <xref:System.Diagnostics.Process.StandardError%2A> 스트림 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1240">The child process would wait indefinitely for the parent to read from the full <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span>   
[!code-csharp[Reading from a redirected output and error stream](~/samples/snippets/csharp/api/system.diagnostics/process/standardoutput/stdoutput-async.cs)]  
[!code-vb[Reading from a redirected output and error stream](~/samples/snippets/visualbasic/api/system.diagnostics/process/standardoutput/stdoutput-async.vb)]    
  
 <span data-ttu-id="67157-1241">이러한 종속성 및 잠재적인 해당 교착 상태 방지 하기 위해 비동기 읽기 작업을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1241">You can use asynchronous read operations to avoid these dependencies and their deadlock potential.</span></span> <span data-ttu-id="67157-1242">또는 두 개의 스레드를 만들고 각 스트림이 별도 스레드에서 출력을 읽는 하 여 교착 상태를 방지할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1242">Alternately, you can avoid the deadlock condition by creating two threads and reading the output of each stream on a separate thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-1243">리디렉션된 스트림에서 동기 및 비동기 읽기 작업을 혼합할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1243">You cannot mix asynchronous and synchronous read operations on a redirected stream.</span></span> <span data-ttu-id="67157-1244">한 번 리디렉션된 스트림을 <xref:System.Diagnostics.Process> 열려 비동기 또는 동기 모드에서 모든 이후 읽기 동일한 모드에서 해당 스트림의 작업 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1244">Once the redirected stream of a <xref:System.Diagnostics.Process> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</span></span> <span data-ttu-id="67157-1245">예를 들어 따르지 <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> 에 대 한 호출을 사용 하 여 <xref:System.IO.StreamReader.ReadLine%2A> 에 <xref:System.Diagnostics.Process.StandardOutput%2A> 스트림 또는 그 반대로 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1245">For example, do not follow <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> with a call to <xref:System.IO.StreamReader.ReadLine%2A> on the <xref:System.Diagnostics.Process.StandardOutput%2A> stream, or vice versa.</span></span> <span data-ttu-id="67157-1246">그러나 서로 다른 모드에 두 개의 스트림을 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1246">However, you can read two different streams in different modes.</span></span> <span data-ttu-id="67157-1247">예를 들어, 호출할 수 있습니다 <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> 호출 <xref:System.IO.StreamReader.ReadLine%2A> 에 대 한는 <xref:System.Diagnostics.Process.StandardError%2A> 스트림 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1247">For example, you can call <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> and then call <xref:System.IO.StreamReader.ReadLine%2A> for the <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-1248">다음 예제에서는 ipconfig.exe 명령을 실행 하 고 예제의 콘솔 창에 해당 표준 출력을 리디렉션합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1248">The following example runs the ipconfig.exe command and redirects its standard output to the example's console window.</span></span>  
  
 [!code-cpp[Process_StandardOutput#2](~/samples/snippets/cpp/VS_Snippets_CLR/Process_StandardOutput/CPP/process_standardoutput.cpp#2)]
 [!code-csharp[Process_StandardOutput#2](~/samples/snippets/csharp/VS_Snippets_CLR/Process_StandardOutput/CS/process_standardoutput.cs#2)]
 [!code-vb[Process_StandardOutput#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process_StandardOutput/VB/process_standardoutput.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-1249"><see cref="P:System.Diagnostics.Process.StandardOutput" /> 스트림이 리디렉션에 대해 정의되지 않은 경우. <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" />가 <see langword="true" />로 설정되어 있고 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" />가 <see langword="false" />로 설정되어 있는지 확인하십시오.</span><span class="sxs-lookup"><span data-stu-id="67157-1249">The <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream has not been defined for redirection; ensure <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /> is set to <see langword="true" /> and <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> is set to <see langword="false" />.</span></span>  
  
<span data-ttu-id="67157-1250">또는</span><span class="sxs-lookup"><span data-stu-id="67157-1250">-or-</span></span> 
<span data-ttu-id="67157-1251"><see cref="P:System.Diagnostics.Process.StandardOutput" /> 스트림이 <see cref="M:System.Diagnostics.Process.BeginOutputReadLine" />을 사용한 비동기 읽기 작업에 대해 열려 있는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1251">The <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream has been opened for asynchronous read operations with <see cref="M:System.Diagnostics.Process.BeginOutputReadLine" />.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1252">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1252">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1253">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1253">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.StandardInput" />
        <altmember cref="P:System.Diagnostics.Process.StandardError" />
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="67157-1254">프로세스 리소스를 시작한 후 <see cref="T:System.Diagnostics.Process" /> 구성 요소에 연결합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1254">Starts a process resource and associates it with a <see cref="T:System.Diagnostics.Process" /> component.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public bool Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Start" />
      <MemberSignature Language="VB.NET" Value="Public Function Start () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; bool" Usage="process.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="67157-1255">이 <see cref="P:System.Diagnostics.Process.StartInfo" /> 구성 요소의 <see cref="T:System.Diagnostics.Process" /> 속성으로 지정된 프로세스 리소스를 시작하거나 다시 사용하여 구성 요소에 연결합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1255">Starts (or reuses) the process resource that is specified by the <see cref="P:System.Diagnostics.Process.StartInfo" /> property of this <see cref="T:System.Diagnostics.Process" /> component and associates it with the component.</span></span></summary>
        <returns><span data-ttu-id="67157-1256">프로세스 리소스가 시작된 경우에는 <see langword="true" />이고 기존 프로세스를 다시 사용한 경우처럼 새 프로세스 리소스가 시작되지 않은 경우에는 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1256"><see langword="true" /> if a process resource is started; <see langword="false" /> if no new process resource is started (for example, if an existing process is reused).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-1257">이 오버 로드를 사용 하 여 프로세스 리소스를 시작 하 여 현재 연결를 <xref:System.Diagnostics.Process> 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1257">Use this overload to start a process resource and associate it with the current <xref:System.Diagnostics.Process> component.</span></span> <span data-ttu-id="67157-1258">반환 값 `true` 는 새 프로세스 리소스가 시작 되었다는 것을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1258">The return value `true` indicates that a new process resource was started.</span></span> <span data-ttu-id="67157-1259">으로 지정 된 프로세스 리소스를 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 의 멤버는 <xref:System.Diagnostics.Process.StartInfo%2A> 속성 컴퓨터에서 이미 실행 중인, 추가 프로세스 리소스가 시작 되지 않은 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1259">If the process resource specified by the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> member of the <xref:System.Diagnostics.Process.StartInfo%2A> property is already running on the computer, no additional process resource is started.</span></span> <span data-ttu-id="67157-1260">대신, 실행 중인 프로세스 리소스를 다시 사용 및 `false` 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1260">Instead, the running process resource is reused and `false` is returned.</span></span>  
  
 <span data-ttu-id="67157-1261">원래 응용 프로그램 설치 위치 (예를 들어, 웹 주소)를 지정 하 여 ClickOnce 응용 프로그램을 시작할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1261">You can start a ClickOnce application by specifying the location (for example, a Web address) from which you originally installed the application.</span></span> <span data-ttu-id="67157-1262">하드 드라이브에 설치 된 위치를 지정 하 여 ClickOnce 응용 프로그램을 시작 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1262">Do not start a ClickOnce application by specifying its installed location on your hard drive.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-1263">Visual Studio의이 오버 로드를 사용 하는 경우는 <xref:System.Diagnostics.Process.Start%2A> 메서드는 끌어 놓고 코드를 삽입 하는 것을 <xref:System.Diagnostics.Process> 디자이너로 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1263">If you are using Visual Studio, this overload of the <xref:System.Diagnostics.Process.Start%2A> method is the one that you insert into your code after you drag a <xref:System.Diagnostics.Process> component onto the designer.</span></span> <span data-ttu-id="67157-1264">사용 하 여는 `Properties` 창이 확장 합니다 `StartInfo` 범주에 적절 한 값을 쓰고는 `FileName` 속성.</span><span class="sxs-lookup"><span data-stu-id="67157-1264">Use the `Properties` window to expand the `StartInfo` category and write the appropriate value into the `FileName` property.</span></span> <span data-ttu-id="67157-1265">폼의 변경 내용을 나타납니다 `InitializeComponent` 프로시저입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1265">Your changes will appear in the form's `InitializeComponent` procedure.</span></span>  
  
 <span data-ttu-id="67157-1266">이 오버 로드 <xref:System.Diagnostics.Process.Start%2A> 아닙니다를 `static` 메서드.</span><span class="sxs-lookup"><span data-stu-id="67157-1266">This overload of <xref:System.Diagnostics.Process.Start%2A> is not a `static` method.</span></span> <span data-ttu-id="67157-1267">인스턴스에서 호출 해야 합니다 <xref:System.Diagnostics.Process> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1267">You must call it from an instance of the <xref:System.Diagnostics.Process> class.</span></span> <span data-ttu-id="67157-1268">호출 하기 전에 <xref:System.Diagnostics.Process.Start%2A>를 먼저 지정 해야 <xref:System.Diagnostics.Process.StartInfo%2A> 이 대 한 속성 정보 <xref:System.Diagnostics.Process> 인스턴스 정보를 프로세스 리소스를 시작 하려면 확인에 사용 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1268">Before calling <xref:System.Diagnostics.Process.Start%2A>, you must first specify <xref:System.Diagnostics.Process.StartInfo%2A> property information for this <xref:System.Diagnostics.Process> instance, because that information is used to determine the process resource to start.</span></span>  
  
 <span data-ttu-id="67157-1269">다른 오버 로드 된 <xref:System.Diagnostics.Process.Start%2A> 메서드는 `static` 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1269">The other overloads of the <xref:System.Diagnostics.Process.Start%2A> method are `static` members.</span></span> <span data-ttu-id="67157-1270">인스턴스를 만들 필요가 없습니다를 <xref:System.Diagnostics.Process> 메서드의 오버 로드를 호출 하기 전에 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1270">You do not need to create an instance of the <xref:System.Diagnostics.Process> component before you call those overloads of the method.</span></span> <span data-ttu-id="67157-1271">대신, 호출할 수 있습니다 <xref:System.Diagnostics.Process.Start%2A> 에 대 한는 <xref:System.Diagnostics.Process> 클래스 자체 및 새 <xref:System.Diagnostics.Process> 프로세스를 시작 하는 경우 구성 요소가 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1271">Instead, you can call <xref:System.Diagnostics.Process.Start%2A> for the <xref:System.Diagnostics.Process> class itself, and a new <xref:System.Diagnostics.Process> component is created if the process was started.</span></span> <span data-ttu-id="67157-1272">또는 `null` 프로세스를 다시 사용 된 경우 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1272">Or, `null` is returned if a process was reused.</span></span> <span data-ttu-id="67157-1273">프로세스 리소스를 자동으로 새 연결 <xref:System.Diagnostics.Process> 에서 반환 되는 구성 요소는 <xref:System.Diagnostics.Process.Start%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="67157-1273">The process resource is automatically associated with the new <xref:System.Diagnostics.Process> component that is returned by the <xref:System.Diagnostics.Process.Start%2A> method.</span></span>  
  
 <span data-ttu-id="67157-1274">합니다 <xref:System.Diagnostics.Process.StartInfo%2A> 의 기능을 복제 하려면 멤버를 사용할 수 있습니다 합니다 `Run` 대화 상자는 Windows의 `Start` 메뉴.</span><span class="sxs-lookup"><span data-stu-id="67157-1274">The <xref:System.Diagnostics.Process.StartInfo%2A> members can be used to duplicate the functionality of the `Run` dialog box of the Windows `Start` menu.</span></span> <span data-ttu-id="67157-1275">명령줄에 입력할 수 있는 모든 항목 적절 한 값을 설정 하 여 시작할 수 있습니다는 <xref:System.Diagnostics.Process.StartInfo%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1275">Anything that can be typed into a command line can be started by setting the appropriate values in the <xref:System.Diagnostics.Process.StartInfo%2A> property.</span></span> <span data-ttu-id="67157-1276">유일한 <xref:System.Diagnostics.Process.StartInfo%2A> 설정 해야 하는 속성은는 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1276">The only <xref:System.Diagnostics.Process.StartInfo%2A> property that must be set is the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property.</span></span> <span data-ttu-id="67157-1277"><xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 속성 실행 파일 일 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1277">The <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property does not have to be an executable file.</span></span> <span data-ttu-id="67157-1278">확장 시스템에 설치 된 응용 프로그램과 연결 된 모든 파일 형식의 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1278">It can be of any file type for which the extension has been associated with an application that is installed on the system.</span></span> <span data-ttu-id="67157-1279">예를 들어를 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 속성.doc 파일, Microsoft Word와 같은 워드 프로세서 도구를 사용 하 여 연결한 경우.doc 확장명을 가질 수 있습니다 또는 메모장과 같은 편집기를 사용 하 여 텍스트 파일을 연결한 경우.txt 확장명을 가질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1279">For example, the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc extension if you have associated.doc files with a word processing tool, such as Microsoft Word.</span></span>  
  
 <span data-ttu-id="67157-1280">명령줄에서 특정 형식의 파일에 대해 수행할 작업을 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1280">In the command line, you can specify actions to take for certain types of files.</span></span> <span data-ttu-id="67157-1281">예를 들어, 문서 인쇄 하거나 텍스트 파일을 편집할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1281">For example, you can print documents or edit text files.</span></span> <span data-ttu-id="67157-1282">사용 하 여 이러한 동작을 지정 합니다 <xref:System.Diagnostics.ProcessStartInfo.Verb%2A> 의 멤버는 <xref:System.Diagnostics.Process.StartInfo%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="67157-1282">Specify these actions using the <xref:System.Diagnostics.ProcessStartInfo.Verb%2A> member of the <xref:System.Diagnostics.Process.StartInfo%2A> property.</span></span> <span data-ttu-id="67157-1283">다른 형식의 파일을 지정할 수에서 파일을 시작할 때 명령줄 인수를 `Run` 대화 상자.</span><span class="sxs-lookup"><span data-stu-id="67157-1283">For other types of files, you can specify command-line arguments when you start the file from the `Run` dialog box.</span></span> <span data-ttu-id="67157-1284">예를 들어, 전달할 수 있습니다 URL을 인수로 브라우저를 지정 하는 경우는 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1284">For example, you can pass a URL as an argument if you specify your browser as the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>.</span></span> <span data-ttu-id="67157-1285">이러한 인수에 지정할 수는 <xref:System.Diagnostics.Process.StartInfo%2A> 속성의 <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1285">These arguments can be specified in the <xref:System.Diagnostics.Process.StartInfo%2A> property's <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> member.</span></span>  
  
 <span data-ttu-id="67157-1286">경로 변수를 선언한 따옴표를 사용 하 여 시스템의 경우 정규화 해야 해당 경로 위치에 있는 프로세스를 시작 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="67157-1286">If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location.</span></span> <span data-ttu-id="67157-1287">그렇지 않으면 시스템 경로 찾지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1287">Otherwise, the system will not find the path.</span></span> <span data-ttu-id="67157-1288">예를 들어 경우 `c:\mypath` path에 없는 따옴표를 사용 하 여 추가한: `path = %path%;"c:\mypath"`에서 모든 프로세스를 정규화 해야 `c:\mypath` 시작할 때.</span><span class="sxs-lookup"><span data-stu-id="67157-1288">For example, if `c:\mypath` is not in your path, and you add it using quotation marks: `path = %path%;"c:\mypath"`, you must fully qualify any process in `c:\mypath` when starting it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-1289">ASP.NET 웹 페이지와 서버 컨트롤 코드는 웹 서버의 ASP.NET 작업자 프로세스의 컨텍스트에서 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1289">ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server.</span></span>  <span data-ttu-id="67157-1290">사용 하는 경우는 <xref:System.Diagnostics.Process.Start%2A> 제한 된 권한으로 웹 서버에서 ASP.NET 웹 페이지 또는 서버 컨트롤에서 메서드를 새 프로세스를 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1290">If you use the <xref:System.Diagnostics.Process.Start%2A> method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions.</span></span> <span data-ttu-id="67157-1291">프로세스는 클라이언트 브라우저와 동일한 컨텍스트에서 시작 되지 않으며 사용자 데스크톱에 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1291">The process does not start in the same context as the client browser, and does not have access to the user desktop.</span></span>  
  
 <span data-ttu-id="67157-1292">사용할 때마다 <xref:System.Diagnostics.Process.Start%2A> 닫아야 해야 하는 프로세스를 시작 하려면 또는 시스템 리소스가 손실 될 위험이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1292">Whenever you use <xref:System.Diagnostics.Process.Start%2A> to start a process, you might need to close it or you risk losing system resources.</span></span> <span data-ttu-id="67157-1293">사용 하 여 프로세스를 닫습니다 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 또는 <xref:System.Diagnostics.Process.Kill%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1293">Close processes using <xref:System.Diagnostics.Process.CloseMainWindow%2A> or <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="67157-1294">프로세스를 사용 하 여 닫혀 이미 있는지 여부를 확인할 수 있습니다 해당 <xref:System.Diagnostics.Process.HasExited%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1294">You can check whether a process has already been closed by using its <xref:System.Diagnostics.Process.HasExited%2A> property.</span></span>  
  
 <span data-ttu-id="67157-1295">관리 되는 스레드의 아파트 상태에 대 한 정보는 여기 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1295">A note about apartment states in managed threads is necessary here.</span></span> <span data-ttu-id="67157-1296">때 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> 는 `true` 프로세스 구성 요소에 <xref:System.Diagnostics.Process.StartInfo%2A> 속성을 특성을 설정 하 여 응용 프로그램의 스레딩 모델을 설정 했는지 확인 하십시오 `[STAThread]` 에 `main()` 메서드.</span><span class="sxs-lookup"><span data-stu-id="67157-1296">When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true` on the process component's <xref:System.Diagnostics.Process.StartInfo%2A> property, make sure you have set a threading model on your application by setting the attribute `[STAThread]` on the `main()` method.</span></span> <span data-ttu-id="67157-1297">관리 되는 스레드 수이 고, 그렇지는 `unknown` 상태 또는 합니다 `MTA` 는 후자와 충돌 하는 상태로 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> 되 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1297">Otherwise, a managed thread can be in an `unknown` state or put in the `MTA` state, the latter of which conflicts with <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> being `true`.</span></span> <span data-ttu-id="67157-1298">아파트 상태가 되지 않음이 필요한 방법도 `unknown`합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1298">Some methods require that the apartment state not be `unknown`.</span></span> <span data-ttu-id="67157-1299">기본적으로 상태를 설정 하지 않으면 명시적으로, 응용 프로그램에서 이러한 메서드를 발견 하는 경우, `MTA`를 설정한 후에 아파트 상태를 변경할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1299">If the state is not explicitly set, when the application encounters such a method, it defaults to `MTA`, and once set, the apartment state cannot be changed.</span></span> <span data-ttu-id="67157-1300">그러나 `MTA` 스레드를 관리 하는 운영 체제 셸에서 경우 throw 되는 예외를 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1300">However, `MTA` causes an exception to be thrown when the operating system shell is managing the thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-1301">다음 예에서는 인스턴스의 <xref:System.Diagnostics.Process> 클래스는 프로세스를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1301">The following example uses an instance of the <xref:System.Diagnostics.Process> class to start a process.</span></span>  
  
 [!code-cpp[Process.Start_instance#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.Start_instance/CPP/processstart.cpp#1)]
 [!code-csharp[Process.Start_instance#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.Start_instance/CS/processstart.cs#1)]
 [!code-vb[Process.Start_instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.Start_instance/VB/processstart.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-1302"><see cref="T:System.Diagnostics.Process" /> 구성 요소의 <see cref="P:System.Diagnostics.Process.StartInfo" />에 파일 이름을 지정하지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1302">No file name was specified in the <see cref="T:System.Diagnostics.Process" /> component's <see cref="P:System.Diagnostics.Process.StartInfo" />.</span></span>
<span data-ttu-id="67157-1303">또는 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" />, <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /> 또는 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" />가 <see langword="true" />인 동안 <see cref="P:System.Diagnostics.Process.StartInfo" /> 속성의 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 멤버는 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1303">-or- The <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> member of the <see cref="P:System.Diagnostics.Process.StartInfo" /> property is <see langword="true" /> while <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" />, <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" />, or <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="67157-1304">연결된 파일을 여는 동안 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1304">There was an error in opening the associated file.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="67157-1305">프로세스 개체가 이미 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1305">The process object has already been disposed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-1306">메서드는 Nano Server와 같은 셸 지원 없이 운영 체제에서 지원되지 않습니다(.NET Core에만 해당).</span><span class="sxs-lookup"><span data-stu-id="67157-1306">Method not supported on operating systems without shell support such as Nano Server (.NET Core only).</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1307">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1307">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1308">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1308">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.StartInfo" />
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.FileName" />
        <altmember cref="T:System.Diagnostics.ProcessStartInfo" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process Start (System.Diagnostics.ProcessStartInfo startInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process Start(class System.Diagnostics.ProcessStartInfo startInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Start (startInfo As ProcessStartInfo) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Process ^ Start(System::Diagnostics::ProcessStartInfo ^ startInfo);" />
      <MemberSignature Language="F#" Value="static member Start : System.Diagnostics.ProcessStartInfo -&gt; System.Diagnostics.Process" Usage="System.Diagnostics.Process.Start startInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startInfo" Type="System.Diagnostics.ProcessStartInfo" />
      </Parameters>
      <Docs>
        <param name="startInfo"><span data-ttu-id="67157-1309">파일 이름 및 모든 명령줄 인수를 포함하여 프로세스를 시작하는 데 사용되는 정보가 들어 있는 <see cref="T:System.Diagnostics.ProcessStartInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1309">The <see cref="T:System.Diagnostics.ProcessStartInfo" /> that contains the information that is used to start the process, including the file name and any command-line arguments.</span></span></param>
        <summary><span data-ttu-id="67157-1310">시작할 프로세스의 파일 이름 같은 프로세스 시작 정보가 포함된 매개 변수에 의해 지정된 프로세스 리소스를 시작하고 해당 리소스를 새 <see cref="T:System.Diagnostics.Process" /> 구성 요소에 연결합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1310">Starts the process resource that is specified by the parameter containing process start information (for example, the file name of the process to start) and associates the resource with a new <see cref="T:System.Diagnostics.Process" /> component.</span></span></summary>
        <returns><span data-ttu-id="67157-1311">프로세스 리소스와 연결되거나 시작된 프로세스가 없는 경우 <see langword="null" />에 연결되는 새 <see cref="T:System.Diagnostics.Process" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1311">A new <see cref="T:System.Diagnostics.Process" /> that is associated with the process resource, or <see langword="null" /> if no process resource is started.</span></span> <span data-ttu-id="67157-1312">같은 프로세스에서 이미 실행 중인 인스턴스와 함께 시작되는 새 프로세스는 서로 독립적인 관계입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1312">Note that a new process that's started alongside already running instances of the same process will be independent from the others.</span></span> <span data-ttu-id="67157-1313">뿐만 아니라 시작 시 <see cref="P:System.Diagnostics.Process.HasExited" /> 속성이 이미 <see langword="true" />로 설정되어 있는 null이 아닌 프로세스가 반환될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1313">In addition, Start may return a non-null Process with its <see cref="P:System.Diagnostics.Process.HasExited" /> property already set to <see langword="true" />.</span></span> <span data-ttu-id="67157-1314">이 경우 시작된 프로세스가 자체의 기존 인스턴스를 활성화한 후 종료될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1314">In this case, the started process may have activated an existing instance of itself and then exited.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-1315">이 오버 로드를 사용 하 여 프로세스 리소스를 지정 하 여 시작을 <xref:System.Diagnostics.ProcessStartInfo> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="67157-1315">Use this overload to start a process resource by specifying a <xref:System.Diagnostics.ProcessStartInfo> instance.</span></span> <span data-ttu-id="67157-1316">오버 로드를 새 리소스를 연결 <xref:System.Diagnostics.Process> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1316">The overload associates the resource with a new <xref:System.Diagnostics.Process> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-1317">실행 파일 시작 주소의 URL 인 경우에 프로세스가 시작 되지 않습니다 및 `null` 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1317">If the address of the executable file to start is a URL, the process is not started and `null` is returned.</span></span>  
  
 <span data-ttu-id="67157-1318">이 오버 로드를 사용 하면 첫 번째를 만들지 않고 새 프로세스를 시작할 <xref:System.Diagnostics.Process> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="67157-1318">This overload lets you start a process without first creating a new <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="67157-1319">이 오버 로드를 사용 하는 <xref:System.Diagnostics.ProcessStartInfo> 매개 변수는 명시적 단계 새 하지 않아도 됩니다 <xref:System.Diagnostics.Process> 인스턴스를 설정 해당 <xref:System.Diagnostics.Process.StartInfo%2A> 속성 및 호출 <xref:System.Diagnostics.Process.Start%2A> 에 대 한는 <xref:System.Diagnostics.Process> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="67157-1319">Using this overload with a <xref:System.Diagnostics.ProcessStartInfo> parameter is an alternative to the explicit steps of creating a new <xref:System.Diagnostics.Process> instance, setting its <xref:System.Diagnostics.Process.StartInfo%2A> properties, and calling <xref:System.Diagnostics.Process.Start%2A> for the <xref:System.Diagnostics.Process> instance.</span></span>  
  
 <span data-ttu-id="67157-1320">사용 하는 <xref:System.Diagnostics.ProcessStartInfo> 매개 변수를 사용 하면 호출 인스턴스 <xref:System.Diagnostics.Process.Start%2A> 프로세스를 시작 하는 호출에 전달 될 항목을 가장 높은 제어를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1320">Using a <xref:System.Diagnostics.ProcessStartInfo> instance as the parameter lets you call <xref:System.Diagnostics.Process.Start%2A> with the most control over what is passed into the call to start the process.</span></span> <span data-ttu-id="67157-1321">새로 만들 필요 없는 파일 이름 또는 파일 이름 및 인수를 전달 해야 할 경우 <xref:System.Diagnostics.ProcessStartInfo> 옵션은 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="67157-1321">If you need to pass only a file name or a file name and arguments, it is not necessary to create a new <xref:System.Diagnostics.ProcessStartInfo> instance, although that is an option.</span></span> <span data-ttu-id="67157-1322">유일한 <xref:System.Diagnostics.Process.StartInfo%2A?displayProperty=nameWithType> 설정 해야 하는 속성은는 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1322">The only <xref:System.Diagnostics.Process.StartInfo%2A?displayProperty=nameWithType> property that must be set is the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property.</span></span> <span data-ttu-id="67157-1323"><xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 속성 실행 파일을 나타낼 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1323">The <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property does not need to represent an executable file.</span></span> <span data-ttu-id="67157-1324">확장 시스템에 설치 된 응용 프로그램과 연결 된 모든 파일 형식의 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1324">It can be of any file type for which the extension has been associated with an application that is installed on the system.</span></span> <span data-ttu-id="67157-1325">예를 들어를 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 속성.doc 파일, Microsoft Word와 같은 워드 프로세서 도구를 사용 하 여 연결한 경우.doc 확장명을 가질 수 있습니다 또는 메모장과 같은 편집기를 사용 하 여 텍스트 파일을 연결한 경우.txt 확장명을 가질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1325">For example, the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc extension if you have associated.doc files with a word processing tool, such as Microsoft Word.</span></span>  
  
 <span data-ttu-id="67157-1326">원래 응용 프로그램 설치 위치 (예를 들어, 웹 주소)를 지정 하 여 ClickOnce 응용 프로그램을 시작할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1326">You can start a ClickOnce application by specifying the location (for example, a Web address) from which you originally installed the application.</span></span> <span data-ttu-id="67157-1327">하드 드라이브에 설치 된 위치를 지정 하 여 ClickOnce 응용 프로그램을 시작 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1327">Do not start a ClickOnce application by specifying its installed location on your hard drive.</span></span>  
  
 <span data-ttu-id="67157-1328">경우는 <xref:System.Diagnostics.ProcessStartInfo.UserName%2A?displayProperty=nameWithType> 및 <xref:System.Diagnostics.ProcessStartInfo.Password%2A?displayProperty=nameWithType> 의 속성을 <xref:System.Diagnostics.Process.StartInfo%2A> 인스턴스에 설정 된 관리 되지 않는 `CreateProcessWithLogonW` 함수가 호출 됩니다는 <xref:System.Diagnostics.ProcessStartInfo.CreateNoWindow%2A?displayProperty=nameWithType> 속성 값이 `true` 또는 합니다 <xref:System.Diagnostics.ProcessStartInfo.WindowStyle%2A?displayProperty=nameWithType> 속성 값이 <xref:System.Diagnostics.ProcessWindowStyle.Hidden?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1328">If the <xref:System.Diagnostics.ProcessStartInfo.UserName%2A?displayProperty=nameWithType> and <xref:System.Diagnostics.ProcessStartInfo.Password%2A?displayProperty=nameWithType> properties of the <xref:System.Diagnostics.Process.StartInfo%2A> instance are set, the unmanaged `CreateProcessWithLogonW` function is called, which starts the process in a new window even if the <xref:System.Diagnostics.ProcessStartInfo.CreateNoWindow%2A?displayProperty=nameWithType> property value is `true` or the <xref:System.Diagnostics.ProcessStartInfo.WindowStyle%2A?displayProperty=nameWithType> property value is <xref:System.Diagnostics.ProcessWindowStyle.Hidden?displayProperty=nameWithType>.</span></span> <span data-ttu-id="67157-1329">경우는 <xref:System.Diagnostics.ProcessStartInfo.Domain%2A?displayProperty=nameWithType> 속성은 `null`의 <xref:System.Diagnostics.ProcessStartInfo.UserName%2A?displayProperty=nameWithType> 속성은 UPN 형식 이어야 *사용자*@*DNS_domain_name*합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1329">If the <xref:System.Diagnostics.ProcessStartInfo.Domain%2A?displayProperty=nameWithType> property is `null`, the <xref:System.Diagnostics.ProcessStartInfo.UserName%2A?displayProperty=nameWithType> property must be in UPN format, *user*@*DNS_domain_name*.</span></span>   
  
 <span data-ttu-id="67157-1330">다른 오버 로드를 오버 로드와 달리 <xref:System.Diagnostics.Process.Start%2A> 매개 변수가 없는 아닙니다는 `static` 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1330">Unlike the other overloads, the overload of <xref:System.Diagnostics.Process.Start%2A> that has no parameters is not a `static` member.</span></span> <span data-ttu-id="67157-1331">이미 만든 경우 오버 로드를 사용 하 여는 <xref:System.Diagnostics.Process> 인스턴스를 지정 된 시작 정보 (파일 이름 포함) 및 기존 연결을 프로세스 리소스를 시작 하려면 <xref:System.Diagnostics.Process> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="67157-1331">Use that overload when you have already created a <xref:System.Diagnostics.Process> instance, specified start information (including the file name), and want to start a process resource and associate it with the existing <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="67157-1332">중 하나를 사용 합니다 `static` 새를 만들려고 할 때 오버 로드 <xref:System.Diagnostics.Process> 기존 구성 요소에 대 한 프로세스를 시작 하지 않고 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1332">Use one of the `static` overloads when you want to create a new <xref:System.Diagnostics.Process> component rather than start a process for an existing component.</span></span> <span data-ttu-id="67157-1333">이 오버 로드와 매개 변수가 없는 오버 로드를 사용 하 여 프로세스 리소스에 대 한 시작 정보를 지정할 수 있습니다는 <xref:System.Diagnostics.ProcessStartInfo> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="67157-1333">Both this overload and the overload that has no parameters allow you to specify the start information for the process resource by using a <xref:System.Diagnostics.ProcessStartInfo> instance.</span></span>  
  
 <span data-ttu-id="67157-1334">경로 변수를 선언한 따옴표를 사용 하 여 시스템의 경우 정규화 해야 해당 경로 위치에 있는 프로세스를 시작 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="67157-1334">If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location.</span></span> <span data-ttu-id="67157-1335">그렇지 않으면 시스템 경로 찾지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1335">Otherwise, the system will not find the path.</span></span> <span data-ttu-id="67157-1336">예를 들어 경우 `c:\mypath` path에 없는 따옴표를 사용 하 여 추가한: `path = %path%;"c:\mypath"`에서 모든 프로세스를 정규화 해야 `c:\mypath` 시작할 때.</span><span class="sxs-lookup"><span data-stu-id="67157-1336">For example, if `c:\mypath` is not in your path, and you add it using quotation marks: `path = %path%;"c:\mypath"`, you must fully qualify any process in `c:\mypath` when starting it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-1337">ASP.NET 웹 페이지와 서버 컨트롤 코드는 웹 서버의 ASP.NET 작업자 프로세스의 컨텍스트에서 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1337">ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server.</span></span>  <span data-ttu-id="67157-1338">사용 하는 경우는 <xref:System.Diagnostics.Process.Start%2A> 제한 된 권한으로 웹 서버에서 ASP.NET 웹 페이지 또는 서버 컨트롤에서 메서드를 새 프로세스를 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1338">If you use the <xref:System.Diagnostics.Process.Start%2A> method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions.</span></span> <span data-ttu-id="67157-1339">프로세스는 클라이언트 브라우저와 동일한 컨텍스트에서 시작 되지 않으며 사용자 데스크톱에 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1339">The process does not start in the same context as the client browser, and does not have access to the user desktop.</span></span>  
  
 <span data-ttu-id="67157-1340">사용할 때마다 <xref:System.Diagnostics.Process.Start%2A> 닫아야 해야 하는 프로세스를 시작 하려면 또는 시스템 리소스가 손실 될 위험이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1340">Whenever you use <xref:System.Diagnostics.Process.Start%2A> to start a process, you might need to close it or you risk losing system resources.</span></span> <span data-ttu-id="67157-1341">사용 하 여 프로세스를 닫습니다 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 또는 <xref:System.Diagnostics.Process.Kill%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1341">Close processes using <xref:System.Diagnostics.Process.CloseMainWindow%2A> or <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="67157-1342">프로세스를 사용 하 여 닫혀 이미 있는지 여부를 확인할 수 있습니다 해당 <xref:System.Diagnostics.Process.HasExited%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1342">You can check whether a process has already been closed by using its <xref:System.Diagnostics.Process.HasExited%2A> property.</span></span>  
  
 <span data-ttu-id="67157-1343">관리 되는 스레드의 아파트 상태에 대 한 정보는 여기 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1343">A note about apartment states in managed threads is necessary here.</span></span> <span data-ttu-id="67157-1344">때 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> 됩니다 `true` 에 `startInfo` 매개 변수를 특성을 설정 하 여 응용 프로그램의 스레딩 모델을 설정 했는지 확인 `[STAThread]` 에 `main()` 메서드.</span><span class="sxs-lookup"><span data-stu-id="67157-1344">When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true` on the `startInfo` parameter, make sure you have set a threading model on your application by setting the attribute `[STAThread]` on the `main()` method.</span></span> <span data-ttu-id="67157-1345">관리 되는 스레드 수이 고, 그렇지는 `unknown` 상태 또는 합니다 `MTA` 는 후자와 충돌 하는 상태로 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> 되 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1345">Otherwise, a managed thread can be in an `unknown` state or put in the `MTA` state, the latter of which conflicts with <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> being `true`.</span></span> <span data-ttu-id="67157-1346">아파트 상태가 되지 않음이 필요한 방법도 `unknown`합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1346">Some methods require that the apartment state not be `unknown`.</span></span> <span data-ttu-id="67157-1347">기본적으로 상태를 설정 하지 않으면 명시적으로, 응용 프로그램에서 이러한 메서드를 발견 하는 경우, `MTA`를 설정한 후에 아파트 상태를 변경할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1347">If the state is not explicitly set, when the application encounters such a method, it defaults to `MTA`, and once set, the apartment state cannot be changed.</span></span> <span data-ttu-id="67157-1348">그러나 `MTA` 스레드를 관리 하는 운영 체제 셸에서 경우 throw 되는 예외를 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1348">However, `MTA` causes an exception to be thrown when the operating system shell is managing the thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-1349">다음 예제에서는 먼저 Internet Explorer의 인스턴스를 생성 하 고 브라우저에서 즐겨찾기 폴더의 내용을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1349">The following example first spawns an instance of Internet Explorer and displays the contents of the Favorites folder in the browser.</span></span> <span data-ttu-id="67157-1350">그런 다음 Internet Explorer의 몇 가지 다른 인스턴스를 시작 하 고 몇 가지 특정 페이지나 사이트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1350">It then starts some other instances of Internet Explorer and displays some specific pages or sites.</span></span> <span data-ttu-id="67157-1351">마지막으로 특정 사이트를 탐색 하는 동안 최소화 되 고 창을 사용 하 여 Internet Explorer를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1351">Finally it starts Internet Explorer with the window being minimized while navigating to a specific site.</span></span>  
  
 <span data-ttu-id="67157-1352">이 메서드의 다른 사용의 다른 예의 각 속성은 참조 된 <xref:System.Diagnostics.ProcessStartInfo> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1352">For additional examples of other uses of this method, refer to the individual properties of the <xref:System.Diagnostics.ProcessStartInfo> class.</span></span>  
  
 [!code-cpp[Process.Start_static#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.Start_static/CPP/processstartstatic.cpp#1)]
 [!code-csharp[Process.Start_static#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.Start_static/CS/processstartstatic.cs#1)]
 [!code-vb[Process.Start_static#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.Start_static/VB/processstartstatic.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-1353"><paramref name="startInfo" /> 매개 변수의 <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> 속성에 파일 이름을 지정하지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1353">No file name was specified in the <paramref name="startInfo" /> parameter's <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> property.</span></span>  
  
<span data-ttu-id="67157-1354">또는</span><span class="sxs-lookup"><span data-stu-id="67157-1354">-or-</span></span> 
<span data-ttu-id="67157-1355"><paramref name="startInfo" /> 매개 변수의 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 속성이 <see langword="true" />이고 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" />, <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /> 또는 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> 속성 또한 <see langword="true" />인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1355">The <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> property of the <paramref name="startInfo" /> parameter is <see langword="true" /> and the <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" />, <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" />, or <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> property is also <see langword="true" />.</span></span>  
  
<span data-ttu-id="67157-1356">또는</span><span class="sxs-lookup"><span data-stu-id="67157-1356">-or-</span></span> 
<span data-ttu-id="67157-1357"><paramref name="startInfo" /> 매개 변수의 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 속성이 <see langword="true" />이고 <see cref="P:System.Diagnostics.ProcessStartInfo.UserName" /> 속성이 <see langword="null" /> 또는 빈 문자열이 아니거나 <see cref="P:System.Diagnostics.ProcessStartInfo.Password" /> 속성이 <see langword="null" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1357">The <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> property of the <paramref name="startInfo" /> parameter is <see langword="true" /> and the <see cref="P:System.Diagnostics.ProcessStartInfo.UserName" /> property is not <see langword="null" /> or empty or the <see cref="P:System.Diagnostics.ProcessStartInfo.Password" /> property is not <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="67157-1358"><paramref name="startInfo" /> 매개 변수가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1358">The <paramref name="startInfo" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="67157-1359">프로세스 개체가 이미 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1359">The process object has already been disposed.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="67157-1360"><paramref name="startInfo" /> 매개 변수의 <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> 속성에서 지정된 파일을 찾을 수 없었습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1360">The file specified in the <paramref name="startInfo" /> parameter's <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> property could not be found.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="67157-1361">연결된 파일을 여는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1361">An error occurred when opening the associated file.</span></span>  
  
<span data-ttu-id="67157-1362">또는</span><span class="sxs-lookup"><span data-stu-id="67157-1362">-or-</span></span> 
<span data-ttu-id="67157-1363">인수 길이와 프로세스에 대한 총 경로 길이의 합은 2080을 초과합니다</span><span class="sxs-lookup"><span data-stu-id="67157-1363">The sum of the length of the arguments and the length of the full path to the process exceeds 2080.</span></span> <span data-ttu-id="67157-1364">이 예외와 관련된 오류 메시지는 다음 중 하나일 수 있습니다. "시스템 호출에 전달된 데이터 영역이 너무 작습니다."</span><span class="sxs-lookup"><span data-stu-id="67157-1364">The error message associated with this exception can be one of the following: "The data area passed to a system call is too small."</span></span> <span data-ttu-id="67157-1365">또는 “액세스가 거부되었습니다.”</span><span class="sxs-lookup"><span data-stu-id="67157-1365">or "Access is denied."</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-1366">메서드는 Nano Server와 같은 셸 지원 없이 운영 체제에서 지원되지 않습니다(.NET Core에만 해당).</span><span class="sxs-lookup"><span data-stu-id="67157-1366">Method not supported on operating systems without shell support such as Nano Server (.NET Core only).</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1367">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1367">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1368">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1368">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.StartInfo" />
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.FileName" />
        <altmember cref="T:System.Diagnostics.ProcessStartInfo" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process Start (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process Start(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Start(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Start (fileName As String) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Process ^ Start(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="static member Start : string -&gt; System.Diagnostics.Process" Usage="System.Diagnostics.Process.Start fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="67157-1369">프로세스에서 실행될 문서 또는 응용 프로그램 파일 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1369">The name of a document or application file to run in the process.</span></span></param>
        <summary><span data-ttu-id="67157-1370">문서 또는 응용 프로그램 파일 이름을 지정하여 프로세스 리소스를 시작하고 해당 리소스를 새 <see cref="T:System.Diagnostics.Process" /> 구성 요소에 연결합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1370">Starts a process resource by specifying the name of a document or application file and associates the resource with a new <see cref="T:System.Diagnostics.Process" /> component.</span></span></summary>
        <returns><span data-ttu-id="67157-1371">프로세스 리소스와 연결되거나 시작된 프로세스가 없는 경우 <see langword="null" />에 연결되는 새 <see cref="T:System.Diagnostics.Process" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1371">A new <see cref="T:System.Diagnostics.Process" /> that is associated with the process resource, or <see langword="null" /> if no process resource is started.</span></span> <span data-ttu-id="67157-1372">같은 프로세스에서 이미 실행 중인 인스턴스와 함께 시작되는 새 프로세스는 서로 독립적인 관계입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1372">Note that a new process that's started alongside already running instances of the same process will be independent from the others.</span></span> <span data-ttu-id="67157-1373">뿐만 아니라 시작 시 <see cref="P:System.Diagnostics.Process.HasExited" /> 속성이 이미 <see langword="true" />로 설정되어 있는 null이 아닌 프로세스가 반환될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1373">In addition, Start may return a non-null Process with its <see cref="P:System.Diagnostics.Process.HasExited" /> property already set to <see langword="true" />.</span></span> <span data-ttu-id="67157-1374">이 경우 시작된 프로세스가 자체의 기존 인스턴스를 활성화한 후 종료될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1374">In this case, the started process may have activated an existing instance of itself and then exited.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-1375">이 오버 로드를 사용 하 여 해당 파일 이름을 지정 하 여 프로세스 리소스를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1375">Use this overload to start a process resource by specifying its file name.</span></span> <span data-ttu-id="67157-1376">오버 로드를 새 리소스를 연결 <xref:System.Diagnostics.Process> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1376">The overload associates the resource with a new <xref:System.Diagnostics.Process> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-1377">실행 파일 시작 주소의 URL 인 경우에 프로세스가 시작 되지 않습니다 및 `null` 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1377">If the address of the executable file to start is a URL, the process is not started and `null` is returned.</span></span>  
  
 <span data-ttu-id="67157-1378">이 오버 로드를 사용 하면 첫 번째를 만들지 않고 새 프로세스를 시작할 <xref:System.Diagnostics.Process> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="67157-1378">This overload lets you start a process without first creating a new <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="67157-1379">오버 로드 하는 대신 새는 명시적 단계 <xref:System.Diagnostics.Process> 인스턴스를 설정 합니다 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 의 멤버는 <xref:System.Diagnostics.Process.StartInfo%2A> 속성을 호출 <xref:System.Diagnostics.Process.Start%2A> 에 대 한는 <xref:System.Diagnostics.Process> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="67157-1379">The overload is an alternative to the explicit steps of creating a new <xref:System.Diagnostics.Process> instance, setting the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> member of the <xref:System.Diagnostics.Process.StartInfo%2A> property, and calling <xref:System.Diagnostics.Process.Start%2A> for the <xref:System.Diagnostics.Process> instance.</span></span>  
  
 <span data-ttu-id="67157-1380">설정 하 여 ClickOnce 응용 프로그램을 시작할 수는 `fileName` 매개 변수는 원래 응용 프로그램을 설치한 위치 (예를 들어, 웹 주소).</span><span class="sxs-lookup"><span data-stu-id="67157-1380">You can start a ClickOnce application by setting the `fileName` parameter to the location (for example, a Web address) from which you originally installed the application.</span></span> <span data-ttu-id="67157-1381">하드 드라이브에 설치 된 위치를 지정 하 여 ClickOnce 응용 프로그램을 시작 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1381">Do not start a ClickOnce application by specifying its installed location on your hard drive.</span></span>  
  
 <span data-ttu-id="67157-1382">정보를 입력 하는 방법과 비슷합니다 해당 파일 이름을 지정 하는 프로세스를 시작 합니다 `Run` 대화 상자는 Windows의 `Start` 메뉴.</span><span class="sxs-lookup"><span data-stu-id="67157-1382">Starting a process by specifying its file name is similar to typing the information in the `Run` dialog box of the Windows `Start` menu.</span></span> <span data-ttu-id="67157-1383">따라서 파일 이름을 실행 파일을 나타낼 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1383">Therefore, the file name does not need to represent an executable file.</span></span> <span data-ttu-id="67157-1384">확장에 연결 된 시스템에 설치 된 응용 프로그램 파일 형식의 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1384">It can be of any file type for which the extension has been associated with an application installed on the system.</span></span> <span data-ttu-id="67157-1385">예를 들어.doc 파일, Microsoft Word와 같은 워드 프로세서 도구를 사용 하 여 연결한 경우.doc 있을 수 있습니다 또는 메모장과 같은 편집기를 사용 하 여 텍스트 파일을 연결한 경우 파일 이름 확장명이.txt이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1385">For example the file name can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc if you have associated.doc files with a word processing tool, such as Microsoft Word.</span></span> <span data-ttu-id="67157-1386">마찬가지로을 동일한 방식으로 `Run` .exe 확장명은 선택 사항, 대화 상자에는.exe 확장명 없이 실행 파일 이름을 사용할 수는 `fileName` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1386">Similarly, in the same way that the `Run` dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the `fileName` parameter.</span></span> <span data-ttu-id="67157-1387">예를 들어, 설정할 수 있습니다는 `fileName` "Notepad.exe" 또는 "Notepad" 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1387">For example, you can set the `fileName` parameter to either "Notepad.exe" or "Notepad".</span></span>  
  
 <span data-ttu-id="67157-1388">이 오버 로드는 프로세스에 대 한 명령줄 인수를 허용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1388">This overload does not allow command-line arguments for the process.</span></span> <span data-ttu-id="67157-1389">프로세스에 대 한 하나 이상의 명령줄 인수를 지정 해야 할 경우 사용 합니다 <xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29?displayProperty=nameWithType> 또는 <xref:System.Diagnostics.Process.Start%28System.String%2CSystem.String%29?displayProperty=nameWithType> 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1389">If you need to specify one or more command-line arguments for the process, use the <xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29?displayProperty=nameWithType> or <xref:System.Diagnostics.Process.Start%28System.String%2CSystem.String%29?displayProperty=nameWithType> overloads.</span></span>  
  
 <span data-ttu-id="67157-1390">다른 오버 로드를 오버 로드와 달리 <xref:System.Diagnostics.Process.Start%2A> 매개 변수가 없는 아닙니다는 `static` 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1390">Unlike the other overloads, the overload of <xref:System.Diagnostics.Process.Start%2A> that has no parameters is not a `static` member.</span></span> <span data-ttu-id="67157-1391">이미 만든 경우 오버 로드를 사용 하 여는 <xref:System.Diagnostics.Process> 인스턴스를 지정 된 시작 정보 (파일 이름 포함) 및 기존 연결을 프로세스 리소스를 시작 하려면 <xref:System.Diagnostics.Process> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="67157-1391">Use that overload when you have already created a <xref:System.Diagnostics.Process> instance, specified start information (including the file name), and want to start a process resource and associate it with the existing <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="67157-1392">중 하나를 사용 합니다 `static` 새를 만들려고 할 때 오버 로드 <xref:System.Diagnostics.Process> 기존 구성 요소에 대 한 프로세스를 시작 하지 않고 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1392">Use one of the `static` overloads when you want to create a new <xref:System.Diagnostics.Process> component rather than start a process for an existing component.</span></span> <span data-ttu-id="67157-1393">이 오버 로드와 매개 변수가 없는 오버 로드를 허용 하려면 프로세스 리소스의 파일 이름을 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1393">Both this overload and the overload that has no parameters allow you to specify the file name of the process resource to start.</span></span>  
  
 <span data-ttu-id="67157-1394">경로 변수를 선언한 따옴표를 사용 하 여 시스템의 경우 정규화 해야 해당 경로 위치에 있는 프로세스를 시작 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="67157-1394">If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location.</span></span> <span data-ttu-id="67157-1395">그렇지 않으면 시스템 경로 찾지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1395">Otherwise, the system will not find the path.</span></span> <span data-ttu-id="67157-1396">예를 들어 경우 `c:\mypath` path에 없는 따옴표를 사용 하 여 추가한: `path = %path%;"c:\mypath"`에서 모든 프로세스를 정규화 해야 `c:\mypath` 시작할 때.</span><span class="sxs-lookup"><span data-stu-id="67157-1396">For example, if `c:\mypath` is not in your path, and you add it using quotation marks: `path = %path%;"c:\mypath"`, you must fully qualify any process in `c:\mypath` when starting it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-1397">ASP.NET 웹 페이지와 서버 컨트롤 코드는 웹 서버의 ASP.NET 작업자 프로세스의 컨텍스트에서 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1397">ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server.</span></span>  <span data-ttu-id="67157-1398">사용 하는 경우는 <xref:System.Diagnostics.Process.Start%2A> 제한 된 권한으로 웹 서버에서 ASP.NET 웹 페이지 또는 서버 컨트롤에서 메서드를 새 프로세스를 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1398">If you use the <xref:System.Diagnostics.Process.Start%2A> method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions.</span></span> <span data-ttu-id="67157-1399">프로세스는 클라이언트 브라우저와 동일한 컨텍스트에서 시작 되지 않으며 사용자 데스크톱에 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1399">The process does not start in the same context as the client browser, and does not have access to the user desktop.</span></span>  
  
 <span data-ttu-id="67157-1400">사용할 때마다 <xref:System.Diagnostics.Process.Start%2A> 닫아야 해야 하는 프로세스를 시작 하려면 또는 시스템 리소스가 손실 될 위험이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1400">Whenever you use <xref:System.Diagnostics.Process.Start%2A> to start a process, you might need to close it or you risk losing system resources.</span></span> <span data-ttu-id="67157-1401">사용 하 여 프로세스를 닫습니다 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 또는 <xref:System.Diagnostics.Process.Kill%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1401">Close processes using <xref:System.Diagnostics.Process.CloseMainWindow%2A> or <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="67157-1402">프로세스를 사용 하 여 닫혀 이미 있는지 여부를 확인할 수 있습니다 해당 <xref:System.Diagnostics.Process.HasExited%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1402">You can check whether a process has already been closed by using its <xref:System.Diagnostics.Process.HasExited%2A> property.</span></span>  
  
 <span data-ttu-id="67157-1403">관리 되는 스레드의 아파트 상태에 대 한 정보는 여기 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1403">A note about apartment states in managed threads is necessary here.</span></span> <span data-ttu-id="67157-1404">때 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> 는 `true` 프로세스 구성 요소에 <xref:System.Diagnostics.Process.StartInfo%2A> 속성을 특성을 설정 하 여 응용 프로그램의 스레딩 모델을 설정 했는지 확인 하십시오 `[STAThread]` 에 `main()` 메서드.</span><span class="sxs-lookup"><span data-stu-id="67157-1404">When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true` on the process component's <xref:System.Diagnostics.Process.StartInfo%2A> property, make sure you have set a threading model on your application by setting the attribute `[STAThread]` on the `main()` method.</span></span> <span data-ttu-id="67157-1405">관리 되는 스레드 수이 고, 그렇지는 `unknown` 상태 또는 합니다 `MTA` 는 후자와 충돌 하는 상태로 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> 되 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1405">Otherwise, a managed thread can be in an `unknown` state or put in the `MTA` state, the latter of which conflicts with <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> being `true`.</span></span> <span data-ttu-id="67157-1406">아파트 상태가 되지 않음이 필요한 방법도 `unknown`합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1406">Some methods require that the apartment state not be `unknown`.</span></span> <span data-ttu-id="67157-1407">기본적으로 상태를 설정 하지 않으면 명시적으로, 응용 프로그램에서 이러한 메서드를 발견 하는 경우, `MTA`를 설정한 후에 아파트 상태를 변경할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1407">If the state is not explicitly set, when the application encounters such a method, it defaults to `MTA`, and once set, the apartment state cannot be changed.</span></span> <span data-ttu-id="67157-1408">그러나 `MTA` 스레드를 관리 하는 운영 체제 셸에서 경우 throw 되는 예외를 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1408">However, `MTA` causes an exception to be thrown when the operating system shell is managing the thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-1409">다음 예제에서는 먼저 Internet Explorer의 인스턴스를 생성 하 고 브라우저에서 즐겨찾기 폴더의 내용을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1409">The following example first spawns an instance of Internet Explorer and displays the contents of the Favorites folder in the browser.</span></span> <span data-ttu-id="67157-1410">그런 다음 Internet Explorer의 몇 가지 다른 인스턴스를 시작 하 고 몇 가지 특정 페이지나 사이트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1410">It then starts some other instances of Internet Explorer and displays some specific pages or sites.</span></span> <span data-ttu-id="67157-1411">마지막으로 특정 사이트를 탐색 하는 동안 최소화 되 고 창을 사용 하 여 Internet Explorer를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1411">Finally it starts Internet Explorer with the window being minimized while navigating to a specific site.</span></span>  
  
 [!code-cpp[Process.Start_static#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.Start_static/CPP/processstartstatic.cpp#1)]
 [!code-csharp[Process.Start_static#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.Start_static/CS/processstartstatic.cs#1)]
 [!code-vb[Process.Start_static#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.Start_static/VB/processstartstatic.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="67157-1412">연결된 파일을 여는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1412">An error occurred when opening the associated file.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="67157-1413">프로세스 개체가 이미 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1413">The process object has already been disposed.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="67157-1414">PATH 환경 변수에 따옴표가 포함된 문자열이 있는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1414">The PATH environment variable has a string containing quotes.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1415">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1415">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1416">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1416">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.FileName" />
        <altmember cref="P:System.Diagnostics.Process.StartInfo" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process Start (string fileName, string arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process Start(string fileName, string arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Start(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Start (fileName As String, arguments As String) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Process ^ Start(System::String ^ fileName, System::String ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Start : string * string -&gt; System.Diagnostics.Process" Usage="System.Diagnostics.Process.Start (fileName, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="arguments" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="67157-1417">프로세스에서 실행될 응용 프로그램 파일 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1417">The name of an application file to run in the process.</span></span></param>
        <param name="arguments"><span data-ttu-id="67157-1418">프로세스를 시작할 때 전달할 명령줄 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1418">Command-line arguments to pass when starting the process.</span></span></param>
        <summary><span data-ttu-id="67157-1419">응용 프로그램 이름 및 명령줄 인수 집합을 지정하여 프로세스 리소스를 시작하고 해당 리소스를 새 <see cref="T:System.Diagnostics.Process" /> 구성 요소에 연결합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1419">Starts a process resource by specifying the name of an application and a set of command-line arguments, and associates the resource with a new <see cref="T:System.Diagnostics.Process" /> component.</span></span></summary>
        <returns><span data-ttu-id="67157-1420">프로세스 리소스와 연결되거나 시작된 프로세스가 없는 경우 <see langword="null" />에 연결되는 새 <see cref="T:System.Diagnostics.Process" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1420">A new <see cref="T:System.Diagnostics.Process" /> that is associated with the process resource, or <see langword="null" /> if no process resource is started.</span></span> <span data-ttu-id="67157-1421">같은 프로세스에서 이미 실행 중인 인스턴스와 함께 시작되는 새 프로세스는 서로 독립적인 관계입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1421">Note that a new process that's started alongside already running instances of the same process will be independent from the others.</span></span> <span data-ttu-id="67157-1422">뿐만 아니라 시작 시 <see cref="P:System.Diagnostics.Process.HasExited" /> 속성이 이미 <see langword="true" />로 설정되어 있는 null이 아닌 프로세스가 반환될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1422">In addition, Start may return a non-null Process with its <see cref="P:System.Diagnostics.Process.HasExited" /> property already set to <see langword="true" />.</span></span> <span data-ttu-id="67157-1423">이 경우 시작된 프로세스가 자체의 기존 인스턴스를 활성화한 후 종료될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1423">In this case, the started process may have activated an existing instance of itself and then exited.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-1424">이 오버 로드를 사용 하 여 해당 파일 이름 및 명령줄 인수를 지정 하 여 프로세스 리소스를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1424">Use this overload to start a process resource by specifying its file name and command-line arguments.</span></span> <span data-ttu-id="67157-1425">오버 로드를 새 리소스를 연결 <xref:System.Diagnostics.Process> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1425">The overload associates the resource with a new <xref:System.Diagnostics.Process> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-1426">실행 파일 시작 주소의 URL 인 경우에 프로세스가 시작 되지 않습니다 및 `null` 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1426">If the address of the executable file to start is a URL, the process is not started and `null` is returned.</span></span>  
  
 <span data-ttu-id="67157-1427">이 오버 로드를 사용 하면 첫 번째를 만들지 않고 새 프로세스를 시작할 <xref:System.Diagnostics.Process> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="67157-1427">This overload lets you start a process without first creating a new <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="67157-1428">오버 로드 하는 대신 새는 명시적 단계 <xref:System.Diagnostics.Process> 인스턴스를 설정 합니다 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 및 <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> 의 멤버는 <xref:System.Diagnostics.Process.StartInfo%2A> 속성과 호출 <xref:System.Diagnostics.Process.Start%2A> 에 대 한는 <xref:System.Diagnostics.Process> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="67157-1428">The overload is an alternative to the explicit steps of creating a new <xref:System.Diagnostics.Process> instance, setting the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> and <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> members of the <xref:System.Diagnostics.Process.StartInfo%2A> property, and calling <xref:System.Diagnostics.Process.Start%2A> for the <xref:System.Diagnostics.Process> instance.</span></span>  
  
 <span data-ttu-id="67157-1429">파일 이름 및 명령줄 인수를 입력 하는 방법과 비슷합니다 파일 이름과 인수를 지정 하 여 프로세스를 시작 합니다 `Run` 대화 상자는 Windows의 `Start` 메뉴.</span><span class="sxs-lookup"><span data-stu-id="67157-1429">Starting a process by specifying its file name and arguments is similar to typing the file name and command-line arguments in the `Run` dialog box of the Windows `Start` menu.</span></span> <span data-ttu-id="67157-1430">따라서 파일 이름을 실행 파일을 나타낼 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1430">Therefore, the file name does not need to represent an executable file.</span></span> <span data-ttu-id="67157-1431">확장에 연결 된 시스템에 설치 된 응용 프로그램 파일 형식의 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1431">It can be of any file type for which the extension has been associated with an application installed on the system.</span></span> <span data-ttu-id="67157-1432">예를 들어.doc 파일, Microsoft Word와 같은 워드 프로세서 도구를 사용 하 여 연결한 경우.doc 있을 수 있습니다 또는 메모장과 같은 편집기를 사용 하 여 텍스트 파일을 연결한 경우 파일 이름 확장명이.txt이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1432">For example the file name can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc if you have associated.doc files with a word processing tool, such as Microsoft Word.</span></span> <span data-ttu-id="67157-1433">마찬가지로을 동일한 방식으로 `Run` .exe 확장명은 선택 사항, 대화 상자에는.exe 확장명 없이 실행 파일 이름을 사용할 수는 `fileName` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1433">Similarly, in the same way that the `Run` dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the `fileName` parameter.</span></span> <span data-ttu-id="67157-1434">예를 들어, 설정할 수 있습니다는 `fileName` "Notepad.exe" 또는 "Notepad" 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1434">For example, you can set the `fileName` parameter to either "Notepad.exe" or "Notepad".</span></span> <span data-ttu-id="67157-1435">경우는 `fileName` 매개 변수는 실행 파일인 나타냅니다는 `arguments` 매개 변수 파일의 텍스트 파일과 같은 동작이 수행 될을 나타낼 수 있습니다 `Notepad.exe myfile.txt`합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1435">If the `fileName` parameter represents an executable file, the `arguments` parameter might represent a file to act upon, such as the text file in `Notepad.exe myfile.txt`.</span></span> <span data-ttu-id="67157-1436">경우는 `fileName` 매개 변수 (.cmd) 명령 파일을 나타냅니다는 `arguments` 매개 변수 중 하나를 포함 해야 합니다는 "`/c`"또는"`/k`" 명령 창 종료 또는 완료 된 후 남아 있는지 여부를 지정 하는 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1436">If the `fileName` parameter represents a command (.cmd) file, the `arguments` parameter must include either a "`/c`" or "`/k`" argument to specify whether the command window exits or remains after completion.</span></span>  
  
 <span data-ttu-id="67157-1437">다른 오버 로드를 오버 로드와 달리 <xref:System.Diagnostics.Process.Start%2A> 매개 변수가 없는 아닙니다는 `static` 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1437">Unlike the other overloads, the overload of <xref:System.Diagnostics.Process.Start%2A> that has no parameters is not a `static` member.</span></span> <span data-ttu-id="67157-1438">이미 만든 경우 오버 로드를 사용 하 여는 <xref:System.Diagnostics.Process> 인스턴스를 지정 된 시작 정보 (파일 이름 포함) 및 기존 연결을 프로세스 리소스를 시작 하려면 <xref:System.Diagnostics.Process> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="67157-1438">Use that overload when you have already created a <xref:System.Diagnostics.Process> instance, specified start information (including the file name), and want to start a process resource and associate it with the existing <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="67157-1439">중 하나를 사용 합니다 `static` 새를 만들려고 할 때 오버 로드 <xref:System.Diagnostics.Process> 기존 구성 요소에 대 한 프로세스를 시작 하지 않고 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1439">Use one of the `static` overloads when you want to create a new <xref:System.Diagnostics.Process> component rather than start a process for an existing component.</span></span> <span data-ttu-id="67157-1440">이 오버 로드 및 매개 변수가 없는 오버 로드를 모두 전달할 명령줄 인수를 확인 하 고 시작 프로세스 리소스의 파일 이름을 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1440">Both this overload and the overload that has no parameters allow you to specify the file name of the process resource to start and command-line arguments to pass.</span></span>  
  
 <span data-ttu-id="67157-1441">경로 변수를 선언한 따옴표를 사용 하 여 시스템의 경우 정규화 해야 해당 경로 위치에 있는 프로세스를 시작 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="67157-1441">If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location.</span></span> <span data-ttu-id="67157-1442">그렇지 않으면 시스템 경로 찾지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1442">Otherwise, the system will not find the path.</span></span> <span data-ttu-id="67157-1443">예를 들어 경우 `c:\mypath` path에 없는 따옴표를 사용 하 여 추가한: `path = %path%;"c:\mypath"`에서 모든 프로세스를 정규화 해야 `c:\mypath` 시작할 때.</span><span class="sxs-lookup"><span data-stu-id="67157-1443">For example, if `c:\mypath` is not in your path, and you add it using quotation marks: `path = %path%;"c:\mypath"`, you must fully qualify any process in `c:\mypath` when starting it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-1444">ASP.NET 웹 페이지와 서버 컨트롤 코드는 웹 서버의 ASP.NET 작업자 프로세스의 컨텍스트에서 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1444">ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server.</span></span>  <span data-ttu-id="67157-1445">사용 하는 경우는 <xref:System.Diagnostics.Process.Start%2A> 제한 된 권한으로 웹 서버에서 ASP.NET 웹 페이지 또는 서버 컨트롤에서 메서드를 새 프로세스를 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1445">If you use the <xref:System.Diagnostics.Process.Start%2A> method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions.</span></span> <span data-ttu-id="67157-1446">프로세스는 클라이언트 브라우저와 동일한 컨텍스트에서 시작 되지 않으며 사용자 데스크톱에 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1446">The process does not start in the same context as the client browser, and does not have access to the user desktop.</span></span>  
  
 <span data-ttu-id="67157-1447">사용할 때마다 <xref:System.Diagnostics.Process.Start%2A> 닫아야 해야 하는 프로세스를 시작 하려면 또는 시스템 리소스가 손실 될 위험이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1447">Whenever you use <xref:System.Diagnostics.Process.Start%2A> to start a process, you might need to close it or you risk losing system resources.</span></span> <span data-ttu-id="67157-1448">사용 하 여 프로세스를 닫습니다 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 또는 <xref:System.Diagnostics.Process.Kill%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1448">Close processes using <xref:System.Diagnostics.Process.CloseMainWindow%2A> or <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="67157-1449">프로세스를 사용 하 여 닫혀 이미 있는지 여부를 확인할 수 있습니다 해당 <xref:System.Diagnostics.Process.HasExited%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1449">You can check whether a process has already been closed by using its <xref:System.Diagnostics.Process.HasExited%2A> property.</span></span> 
  
 <span data-ttu-id="67157-1450">관리 되는 스레드의 아파트 상태에 대 한 정보는 여기 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1450">A note about apartment states in managed threads is necessary here.</span></span> <span data-ttu-id="67157-1451">때 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> 는 `true` 프로세스 구성 요소에 <xref:System.Diagnostics.Process.StartInfo%2A> 속성을 특성을 설정 하 여 응용 프로그램의 스레딩 모델을 설정 했는지 확인 하십시오 `[STAThread]` 에 `main()` 메서드.</span><span class="sxs-lookup"><span data-stu-id="67157-1451">When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true` on the process component's <xref:System.Diagnostics.Process.StartInfo%2A> property, make sure you have set a threading model on your application by setting the attribute `[STAThread]` on the `main()` method.</span></span> <span data-ttu-id="67157-1452">관리 되는 스레드 수이 고, 그렇지는 `unknown` 상태 또는 합니다 `MTA` 는 후자와 충돌 하는 상태로 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> 되 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1452">Otherwise, a managed thread can be in an `unknown` state or put in the `MTA` state, the latter of which conflicts with <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> being `true`.</span></span> <span data-ttu-id="67157-1453">아파트 상태가 되지 않음이 필요한 방법도 `unknown`합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1453">Some methods require that the apartment state not be `unknown`.</span></span> <span data-ttu-id="67157-1454">기본적으로 상태를 설정 하지 않으면 명시적으로, 응용 프로그램에서 이러한 메서드를 발견 하는 경우, `MTA`를 설정한 후에 아파트 상태를 변경할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1454">If the state is not explicitly set, when the application encounters such a method, it defaults to `MTA`, and once set, the apartment state cannot be changed.</span></span> <span data-ttu-id="67157-1455">그러나 `MTA` 스레드를 관리 하는 운영 체제 셸에서 경우 throw 되는 예외를 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1455">However, `MTA` causes an exception to be thrown when the operating system shell is managing the thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-1456">다음 예제에서는 먼저 Internet Explorer의 인스턴스를 생성 하 고 브라우저에서 즐겨찾기 폴더의 내용을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1456">The following example first spawns an instance of Internet Explorer and displays the contents of the Favorites folder in the browser.</span></span> <span data-ttu-id="67157-1457">그런 다음 Internet Explorer의 몇 가지 다른 인스턴스를 시작 하 고 몇 가지 특정 페이지나 사이트를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1457">It then starts some other instances of Internet Explorer and displays some specific pages or sites.</span></span> <span data-ttu-id="67157-1458">마지막으로 특정 사이트를 탐색 하는 동안 최소화 되 고 창을 사용 하 여 Internet Explorer를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1458">Finally it starts Internet Explorer with the window being minimized while navigating to a specific site.</span></span>  
  
 [!code-cpp[Process.Start_static#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.Start_static/CPP/processstartstatic.cpp#1)]
 [!code-csharp[Process.Start_static#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.Start_static/CS/processstartstatic.cs#1)]
 [!code-vb[Process.Start_static#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.Start_static/VB/processstartstatic.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-1459"><paramref name="fileName" /> 또는 <paramref name="arguments" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1459">The <paramref name="fileName" /> or <paramref name="arguments" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="67157-1460">연결된 파일을 여는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1460">An error occurred when opening the associated file.</span></span>  
  
<span data-ttu-id="67157-1461">또는</span><span class="sxs-lookup"><span data-stu-id="67157-1461">-or-</span></span> 
<span data-ttu-id="67157-1462">인수 길이와 프로세스에 대한 총 경로 길이의 합은 2080을 초과합니다</span><span class="sxs-lookup"><span data-stu-id="67157-1462">The sum of the length of the arguments and the length of the full path to the process exceeds 2080.</span></span> <span data-ttu-id="67157-1463">이 예외와 관련된 오류 메시지는 다음 중 하나일 수 있습니다. "시스템 호출에 전달된 데이터 영역이 너무 작습니다."</span><span class="sxs-lookup"><span data-stu-id="67157-1463">The error message associated with this exception can be one of the following: "The data area passed to a system call is too small."</span></span> <span data-ttu-id="67157-1464">또는 “액세스가 거부되었습니다.”</span><span class="sxs-lookup"><span data-stu-id="67157-1464">or "Access is denied."</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="67157-1465">프로세스 개체가 이미 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1465">The process object has already been disposed.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="67157-1466">PATH 환경 변수에 따옴표가 포함된 문자열이 있는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1466">The PATH environment variable has a string containing quotes.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1467">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1467">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1468">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1468">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.FileName" />
        <altmember cref="P:System.Diagnostics.Process.StartInfo" />
        <altmember cref="T:System.Diagnostics.ProcessStartInfo" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process Start (string fileName, string userName, System.Security.SecureString password, string domain);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process Start(string fileName, string userName, class System.Security.SecureString password, string domain) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Start (fileName As String, userName As String, password As SecureString, domain As String) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Process ^ Start(System::String ^ fileName, System::String ^ userName, System::Security::SecureString ^ password, System::String ^ domain);" />
      <MemberSignature Language="F#" Value="static member Start : string * string * System.Security.SecureString * string -&gt; System.Diagnostics.Process" Usage="System.Diagnostics.Process.Start (fileName, userName, password, domain)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="userName" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="password" Type="System.Security.SecureString" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="domain" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="67157-1469">프로세스에서 실행될 응용 프로그램 파일 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1469">The name of an application file to run in the process.</span></span></param>
        <param name="userName"><span data-ttu-id="67157-1470">프로세스를 시작할 때 사용할 사용자 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1470">The user name to use when starting the process.</span></span></param>
        <param name="password"><span data-ttu-id="67157-1471">프로세스를 시작할 때 사용할 암호가 포함된 <see cref="T:System.Security.SecureString" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1471">A <see cref="T:System.Security.SecureString" /> that contains the password to use when starting the process.</span></span></param>
        <param name="domain"><span data-ttu-id="67157-1472">프로세스를 시작할 때 사용할 도메인입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1472">The domain to use when starting the process.</span></span></param>
        <summary><span data-ttu-id="67157-1473">응용 프로그램 이름, 사용자 이름, 암호 및 도메인을 지정하여 프로세스 리소스를 시작하고 해당 리소스를 새 <see cref="T:System.Diagnostics.Process" /> 구성 요소에 연결합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1473">Starts a process resource by specifying the name of an application, a user name, a password, and a domain and associates the resource with a new <see cref="T:System.Diagnostics.Process" /> component.</span></span></summary>
        <returns><span data-ttu-id="67157-1474">프로세스 리소스와 연결되거나 시작된 프로세스가 없는 경우 <see langword="null" />에 연결되는 새 <see cref="T:System.Diagnostics.Process" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1474">A new <see cref="T:System.Diagnostics.Process" /> that is associated with the process resource, or <see langword="null" /> if no process resource is started.</span></span> <span data-ttu-id="67157-1475">같은 프로세스에서 이미 실행 중인 인스턴스와 함께 시작되는 새 프로세스는 서로 독립적인 관계입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1475">Note that a new process that's started alongside already running instances of the same process will be independent from the others.</span></span> <span data-ttu-id="67157-1476">뿐만 아니라 시작 시 <see cref="P:System.Diagnostics.Process.HasExited" /> 속성이 이미 <see langword="true" />로 설정되어 있는 null이 아닌 프로세스가 반환될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1476">In addition, Start may return a non-null Process with its <see cref="P:System.Diagnostics.Process.HasExited" /> property already set to <see langword="true" />.</span></span> <span data-ttu-id="67157-1477">이 경우 시작된 프로세스가 자체의 기존 인스턴스를 활성화한 후 종료될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1477">In this case, the started process may have activated an existing instance of itself and then exited.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-1478">파일 이름, 사용자 이름, 암호 및 도메인을 지정 하 여 새 프로세스와 해당 주 스레드를 만들이 오버 로드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1478">Use this overload to create a new process and its primary thread by specifying its file name, user name, password, and domain.</span></span> <span data-ttu-id="67157-1479">새 프로세스는 다음 지정 된 자격 증명 (사용자, 도메인 및 암호)의 보안 컨텍스트에서 지정된 된 실행 파일을 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1479">The new process then runs the specified executable file in the security context of the specified credentials (user, domain, and password).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-1480">실행 파일을 원격 드라이브에 있는 경우에 연결 된 드라이브 문자가 아닌 uniform resource identifier (URI)를 사용 하 여 네트워크 공유를 식별 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1480">When the executable file is located on a remote drive, you must identify the network share by using a uniform resource identifier (URI), not a linked drive letter.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-1481">실행 파일 시작 주소의 URL 인 경우에 프로세스가 시작 되지 않습니다 및 `null` 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1481">If the address of the executable file to start is a URL, the process is not started and `null` is returned.</span></span>  
  
 <span data-ttu-id="67157-1482">이 오버 로드를 사용 하면 첫 번째를 만들지 않고 새 프로세스를 시작할 <xref:System.Diagnostics.Process> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="67157-1482">This overload lets you start a process without first creating a new <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="67157-1483">오버 로드 하는 대신 새는 명시적 단계 <xref:System.Diagnostics.Process> 인스턴스를 설정 합니다 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>, <xref:System.Diagnostics.ProcessStartInfo.UserName%2A>, <xref:System.Diagnostics.ProcessStartInfo.Password%2A>, 및 <xref:System.Diagnostics.ProcessStartInfo.Domain%2A> 의 속성을 <xref:System.Diagnostics.Process.StartInfo%2A> 속성을 호출 <xref:System.Diagnostics.Process.Start%2A> 에 대 한 <xref:System.Diagnostics.Process> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="67157-1483">The overload is an alternative to the explicit steps of creating a new <xref:System.Diagnostics.Process> instance, setting the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>, <xref:System.Diagnostics.ProcessStartInfo.UserName%2A>, <xref:System.Diagnostics.ProcessStartInfo.Password%2A>, and <xref:System.Diagnostics.ProcessStartInfo.Domain%2A> properties of the <xref:System.Diagnostics.Process.StartInfo%2A> property, and calling <xref:System.Diagnostics.Process.Start%2A> for the <xref:System.Diagnostics.Process> instance.</span></span>  
  
 <span data-ttu-id="67157-1484">마찬가지로을 동일한 방식으로 **실행** .exe 확장명은 선택 사항, 대화 상자에는.exe 확장명 없이 실행 파일 이름을 사용할 수는 `fileName` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1484">Similarly, in the same way that the **Run** dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the `fileName` parameter.</span></span> <span data-ttu-id="67157-1485">예를 들어, 설정할 수 있습니다는 `fileName` "Notepad.exe" 또는 "Notepad" 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1485">For example, you can set the `fileName` parameter to either "Notepad.exe" or "Notepad".</span></span> <span data-ttu-id="67157-1486">경우는 `fileName` 매개 변수는 실행 파일인 나타냅니다는 `arguments` 매개 변수 파일의 텍스트 파일과 같은 동작이 수행 될을 나타낼 수 있습니다 `Notepad.exe myfile.txt`합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1486">If the `fileName` parameter represents an executable file, the `arguments` parameter might represent a file to act upon, such as the text file in `Notepad.exe myfile.txt`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-1487">파일 이름을 실행 파일을 나타내야 합니다 <xref:System.Diagnostics.Process.Start%2A> 오버 로드의 경우 `userName`, `password`, 및 `domain` 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="67157-1487">The file name must represent an executable file in the <xref:System.Diagnostics.Process.Start%2A> overloads that have `userName`, `password`, and `domain` parameters.</span></span>  
  
 <span data-ttu-id="67157-1488">사용할 때마다 <xref:System.Diagnostics.Process.Start%2A> 닫아야 해야 하는 프로세스를 시작 하려면 또는 시스템 리소스가 손실 될 위험이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1488">Whenever you use <xref:System.Diagnostics.Process.Start%2A> to start a process, you might need to close it or you risk losing system resources.</span></span> <span data-ttu-id="67157-1489">사용 하 여 프로세스를 닫습니다 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 또는 <xref:System.Diagnostics.Process.Kill%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1489">Close processes using <xref:System.Diagnostics.Process.CloseMainWindow%2A> or <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="67157-1490">프로세스를 사용 하 여 닫혀 이미 있는지 여부를 확인할 수 있습니다 해당 <xref:System.Diagnostics.Process.HasExited%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1490">You can check whether a process has already been closed by using its <xref:System.Diagnostics.Process.HasExited%2A> property.</span></span> 
  
   
  
## Examples  
 <span data-ttu-id="67157-1491">다음 코드 예제는 실행 파일을 시작 하려면이 오버 로드의 사용을 보여 줍니다 및 throw 보여 줍니다는 <xref:System.ComponentModel.Win32Exception> 실행 불가능 한 파일과 연결 된 응용 프로그램을 시작 하려고 할 때입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1491">The following code example shows the use of this overload to start an executable file and also demonstrates the throwing of a <xref:System.ComponentModel.Win32Exception> when an attempt is made to start an application associated with a nonexecutable file.</span></span>  
  
 [!code-csharp[System.Diagnostics.Process.Start#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Process.Start/CS/program.cs#1)]
 [!code-vb[System.Diagnostics.Process.Start#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Process.Start/VB/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-1492">지정된 파일 이름이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1492">No file name was specified.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="67157-1493">연결된 파일을 여는 동안 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1493">There was an error in opening the associated file.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="67157-1494">프로세스 개체가 이미 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1494">The process object has already been disposed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-1495">메서드는 Linux 또는 macOS에서 지원되지 않습니다(.NET Core에만 해당).</span><span class="sxs-lookup"><span data-stu-id="67157-1495">Method not supported on Linux or macOS (.NET Core only).</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1496">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1496">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1497">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1497">This member cannot be used by partially trusted code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process Start (string fileName, string arguments, string userName, System.Security.SecureString password, string domain);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process Start(string fileName, string arguments, string userName, class System.Security.SecureString password, string domain) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Start (fileName As String, arguments As String, userName As String, password As SecureString, domain As String) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Process ^ Start(System::String ^ fileName, System::String ^ arguments, System::String ^ userName, System::Security::SecureString ^ password, System::String ^ domain);" />
      <MemberSignature Language="F#" Value="static member Start : string * string * string * System.Security.SecureString * string -&gt; System.Diagnostics.Process" Usage="System.Diagnostics.Process.Start (fileName, arguments, userName, password, domain)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arguments" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="userName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="password" Type="System.Security.SecureString" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="domain" Type="System.String" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="67157-1498">프로세스에서 실행될 응용 프로그램 파일 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1498">The name of an application file to run in the process.</span></span></param>
        <param name="arguments"><span data-ttu-id="67157-1499">프로세스를 시작할 때 전달할 명령줄 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1499">Command-line arguments to pass when starting the process.</span></span></param>
        <param name="userName"><span data-ttu-id="67157-1500">프로세스를 시작할 때 사용할 사용자 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1500">The user name to use when starting the process.</span></span></param>
        <param name="password"><span data-ttu-id="67157-1501">프로세스를 시작할 때 사용할 암호가 포함된 <see cref="T:System.Security.SecureString" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1501">A <see cref="T:System.Security.SecureString" /> that contains the password to use when starting the process.</span></span></param>
        <param name="domain"><span data-ttu-id="67157-1502">프로세스를 시작할 때 사용할 도메인입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1502">The domain to use when starting the process.</span></span></param>
        <summary><span data-ttu-id="67157-1503">응용 프로그램 이름, 명령줄 인수 집합, 사용자 이름, 암호 및 도메인을 지정하여 프로세스 리소스를 시작하고 해당 리소스를 새 <see cref="T:System.Diagnostics.Process" /> 구성 요소에 연결합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1503">Starts a process resource by specifying the name of an application, a set of command-line arguments, a user name, a password, and a domain and associates the resource with a new <see cref="T:System.Diagnostics.Process" /> component.</span></span></summary>
        <returns><span data-ttu-id="67157-1504">프로세스 리소스와 연결되거나 시작된 프로세스가 없는 경우 <see langword="null" />에 연결되는 새 <see cref="T:System.Diagnostics.Process" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1504">A new <see cref="T:System.Diagnostics.Process" /> that is associated with the process resource, or <see langword="null" /> if no process resource is started.</span></span> <span data-ttu-id="67157-1505">같은 프로세스에서 이미 실행 중인 인스턴스와 함께 시작되는 새 프로세스는 서로 독립적인 관계입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1505">Note that a new process that's started alongside already running instances of the same process will be independent from the others.</span></span> <span data-ttu-id="67157-1506">뿐만 아니라 시작 시 <see cref="P:System.Diagnostics.Process.HasExited" /> 속성이 이미 <see langword="true" />로 설정되어 있는 null이 아닌 프로세스가 반환될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1506">In addition, Start may return a non-null Process with its <see cref="P:System.Diagnostics.Process.HasExited" /> property already set to <see langword="true" />.</span></span> <span data-ttu-id="67157-1507">이 경우 시작된 프로세스가 자체의 기존 인스턴스를 활성화한 후 종료될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1507">In this case, the started process may have activated an existing instance of itself and then exited.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-1508">파일 이름, 명령줄 인수, 사용자 이름, 암호 및 도메인을 지정 하 여 새 프로세스와 해당 주 스레드를 만들이 오버 로드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1508">Use this overload to create a new process and its primary thread by specifying its file name, command-line arguments, user name, password, and domain.</span></span> <span data-ttu-id="67157-1509">새 프로세스는 다음 지정 된 자격 증명 (사용자, 도메인 및 암호)의 보안 컨텍스트에서 지정된 된 실행 파일을 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1509">The new process then runs the specified executable file in the security context of the specified credentials (user, domain, and password).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-1510">실행 파일을 원격 드라이브에 있는 경우에 연결 된 드라이브 문자가 아닌 uniform resource identifier (URI)를 사용 하 여 네트워크 공유를 식별 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1510">When the executable file is located on a remote drive, you must identify the network share by using a uniform resource identifier (URI), not a linked drive letter.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-1511">실행 파일 시작 주소의 URL 인 경우에 프로세스가 시작 되지 않습니다 및 `null` 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1511">If the address of the executable file to start is a URL, the process is not started and `null` is returned.</span></span>  
  
 <span data-ttu-id="67157-1512">이 오버 로드를 사용 하면 첫 번째를 만들지 않고 새 프로세스를 시작할 <xref:System.Diagnostics.Process> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="67157-1512">This overload lets you start a process without first creating a new <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="67157-1513">오버 로드 하는 대신 새는 명시적 단계 <xref:System.Diagnostics.Process> 인스턴스를 설정 합니다 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>, <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A>, <xref:System.Diagnostics.ProcessStartInfo.UserName%2A>, <xref:System.Diagnostics.ProcessStartInfo.Password%2A>, 및 <xref:System.Diagnostics.ProcessStartInfo.Domain%2A> 의 속성을 <xref:System.Diagnostics.Process.StartInfo%2A> 속성을 호출 <xref:System.Diagnostics.Process.Start%2A> 에 대 한는 <xref:System.Diagnostics.Process> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="67157-1513">The overload is an alternative to the explicit steps of creating a new <xref:System.Diagnostics.Process> instance, setting the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>, <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A>, <xref:System.Diagnostics.ProcessStartInfo.UserName%2A>, <xref:System.Diagnostics.ProcessStartInfo.Password%2A>, and <xref:System.Diagnostics.ProcessStartInfo.Domain%2A> properties of the <xref:System.Diagnostics.Process.StartInfo%2A> property, and calling <xref:System.Diagnostics.Process.Start%2A> for the <xref:System.Diagnostics.Process> instance.</span></span>  
  
 <span data-ttu-id="67157-1514">마찬가지로을 동일한 방식으로 **실행** .exe 확장명은 선택 사항, 대화 상자에는.exe 확장명 없이 실행 파일 이름을 사용할 수는 `fileName` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1514">Similarly, in the same way that the **Run** dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the `fileName` parameter.</span></span> <span data-ttu-id="67157-1515">예를 들어, 설정할 수 있습니다는 `fileName` "Notepad.exe" 또는 "Notepad" 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1515">For example, you can set the `fileName` parameter to either "Notepad.exe" or "Notepad".</span></span> <span data-ttu-id="67157-1516">경우는 `fileName` 매개 변수는 실행 파일인 나타냅니다는 `arguments` 매개 변수 파일의 텍스트 파일과 같은 동작이 수행 될을 나타낼 수 있습니다 `Notepad.exe myfile.txt`합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1516">If the `fileName` parameter represents an executable file, the `arguments` parameter might represent a file to act upon, such as the text file in `Notepad.exe myfile.txt`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-1517">파일 이름을 실행 파일을 나타내야 합니다 <xref:System.Diagnostics.Process.Start%2A> 오버 로드의 경우 `userName`, `password`, 및 `domain` 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="67157-1517">The file name must represent an executable file in the <xref:System.Diagnostics.Process.Start%2A> overloads that have `userName`, `password`, and `domain` parameters.</span></span>  
  
 <span data-ttu-id="67157-1518">사용할 때마다 <xref:System.Diagnostics.Process.Start%2A> 닫아야 해야 하는 프로세스를 시작 하려면 또는 시스템 리소스가 손실 될 위험이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1518">Whenever you use <xref:System.Diagnostics.Process.Start%2A> to start a process, you might need to close it or you risk losing system resources.</span></span> <span data-ttu-id="67157-1519">사용 하 여 프로세스를 닫습니다 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 또는 <xref:System.Diagnostics.Process.Kill%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1519">Close processes using <xref:System.Diagnostics.Process.CloseMainWindow%2A> or <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="67157-1520">프로세스를 사용 하 여 닫혀 이미 있는지 여부를 확인할 수 있습니다 해당 <xref:System.Diagnostics.Process.HasExited%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1520">You can check whether a process has already been closed by using its <xref:System.Diagnostics.Process.HasExited%2A> property.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-1521">지정된 파일 이름이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1521">No file name was specified.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="67157-1522">연결된 파일을 여는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1522">An error occurred when opening the associated file.</span></span>  
  
<span data-ttu-id="67157-1523">또는</span><span class="sxs-lookup"><span data-stu-id="67157-1523">-or-</span></span> 
<span data-ttu-id="67157-1524">인수 길이와 관련된 파일에 대한 총 경로 길이의 합은 2080을 초과합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1524">The sum of the length of the arguments and the length of the full path to the associated file exceeds 2080.</span></span> <span data-ttu-id="67157-1525">이 예외와 관련된 오류 메시지는 다음 중 하나일 수 있습니다. "시스템 호출에 전달된 데이터 영역이 너무 작습니다."</span><span class="sxs-lookup"><span data-stu-id="67157-1525">The error message associated with this exception can be one of the following: "The data area passed to a system call is too small."</span></span> <span data-ttu-id="67157-1526">또는 “액세스가 거부되었습니다.”</span><span class="sxs-lookup"><span data-stu-id="67157-1526">or "Access is denied."</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="67157-1527">프로세스 개체가 이미 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1527">The process object has already been disposed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-1528">메서드는 Linux 또는 macOS에서 지원되지 않습니다(.NET Core에만 해당).</span><span class="sxs-lookup"><span data-stu-id="67157-1528">Method not supported on Linux or macOS (.NET Core only).</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1529">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1529">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1530">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1530">This member cannot be used by partially trusted code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="StartInfo">
      <MemberSignature Language="C#" Value="public System.Diagnostics.ProcessStartInfo StartInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.ProcessStartInfo StartInfo" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.StartInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property StartInfo As ProcessStartInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::ProcessStartInfo ^ StartInfo { System::Diagnostics::ProcessStartInfo ^ get(); void set(System::Diagnostics::ProcessStartInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StartInfo : System.Diagnostics.ProcessStartInfo with get, set" Usage="System.Diagnostics.Process.StartInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("Specifies information used to start a process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessStartInfo")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ProcessStartInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-1531"><see cref="M:System.Diagnostics.Process.Start" />의 <see cref="T:System.Diagnostics.Process" /> 메서드에 전달할 속성을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1531">Gets or sets the properties to pass to the <see cref="M:System.Diagnostics.Process.Start" /> method of the <see cref="T:System.Diagnostics.Process" />.</span></span></summary>
        <value><span data-ttu-id="67157-1532">프로세스를 시작하는 데 사용된 데이터를 나타내는 <see cref="T:System.Diagnostics.ProcessStartInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1532">The <see cref="T:System.Diagnostics.ProcessStartInfo" /> that represents the data with which to start the process.</span></span> <span data-ttu-id="67157-1533">이러한 인수에는 프로세스를 시작하는 데 사용된 실행 파일이나 문서 이름이 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1533">These arguments include the name of the executable file or document used to start the process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-1534"><xref:System.Diagnostics.Process.StartInfo%2A> 프로세스를 시작 하는 데 매개 변수 집합을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1534"><xref:System.Diagnostics.Process.StartInfo%2A> represents the set of parameters to use to start a process.</span></span> <span data-ttu-id="67157-1535">때 <xref:System.Diagnostics.Process.Start%2A> 가 호출 된 <xref:System.Diagnostics.Process.StartInfo%2A> 시작 하는 프로세스를 지정 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1535">When <xref:System.Diagnostics.Process.Start%2A> is called, the <xref:System.Diagnostics.Process.StartInfo%2A> is used to specify the process to start.</span></span> <span data-ttu-id="67157-1536">만 필요한 <xref:System.Diagnostics.Process.StartInfo%2A> 설정 멤버는 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1536">The only necessary <xref:System.Diagnostics.Process.StartInfo%2A> member to set is the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property.</span></span> <span data-ttu-id="67157-1537">지정 하 여 프로세스를 시작 합니다 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 속성에 정보를 입력 비슷합니다는 **실행** 는 Windows 대화 상자 **시작** 메뉴.</span><span class="sxs-lookup"><span data-stu-id="67157-1537">Starting a process by specifying the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property is similar to typing the information in the **Run** dialog box of the Windows **Start** menu.</span></span> <span data-ttu-id="67157-1538">따라서는 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 속성 실행 파일을 나타낼 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1538">Therefore, the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property does not need to represent an executable file.</span></span> <span data-ttu-id="67157-1539">확장에 연결 된 시스템에 설치 된 응용 프로그램 파일 형식의 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1539">It can be of any file type for which the extension has been associated with an application installed on the system.</span></span> <span data-ttu-id="67157-1540">예를 들어를 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 메모장과 같은 편집기를 사용 하 여 텍스트 파일을 연결한 또는.doc 파일, Microsoft Word와 같은 워드 프로세서 도구를 사용 하 여 연결한 경우.doc 있을 수 있습니다 하는 경우.txt 확장명을 가질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1540">For example the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc if you have associated.doc files with a word processing tool, such as Microsoft Word.</span></span> <span data-ttu-id="67157-1541">마찬가지로을 동일한 방식으로 **실행** .exe 확장명은 선택 사항, 대화 상자에는.exe 확장명 없이 실행 파일 이름을 사용할 수는 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1541">Similarly, in the same way that the **Run** dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> member.</span></span> <span data-ttu-id="67157-1542">예를 들어, 설정할 수 있습니다는 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 속성을 "Notepad.exe" 또는 "Notepad"입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1542">For example, you can set the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property to either "Notepad.exe" or "Notepad".</span></span>  
  
 <span data-ttu-id="67157-1543">설정 하 여 ClickOnce 응용 프로그램을 시작할 수는 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 속성을 원래 응용 프로그램 설치 위치 (예를 들어, 웹 주소).</span><span class="sxs-lookup"><span data-stu-id="67157-1543">You can start a ClickOnce application by setting the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property to the location (for example, a Web address) from which you originally installed the application.</span></span> <span data-ttu-id="67157-1544">하드 드라이브에 설치 된 위치를 지정 하 여 ClickOnce 응용 프로그램을 시작 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1544">Do not start a ClickOnce application by specifying its installed location on your hard drive.</span></span>  
  
 <span data-ttu-id="67157-1545">파일 이름을 실행 불가능 한 파일,.doc 파일 등을 포함 하는 경우에 파일에 수행할 동작을 지정 하는 동사를 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1545">If the file name involves a nonexecutable file, such as a .doc file, you can include a verb specifying what action to take on the file.</span></span> <span data-ttu-id="67157-1546">예를 들어, 설정할 수 있습니다는 <xref:System.Diagnostics.ProcessStartInfo.Verb%2A> .doc 확장명으로 끝나는 파일에 대 한 "print"입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1546">For example, you could set the <xref:System.Diagnostics.ProcessStartInfo.Verb%2A> to "Print" for a file ending in the .doc extension.</span></span> <span data-ttu-id="67157-1547">파일 이름을 지정 합니다 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 속성에 대 한 값을 수동으로 입력할 경우 확장명을 가질 필요가 없습니다를 <xref:System.Diagnostics.ProcessStartInfo.Verb%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="67157-1547">The file name specified in the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property does not need to have an extension if you manually enter a value for the <xref:System.Diagnostics.ProcessStartInfo.Verb%2A> property.</span></span> <span data-ttu-id="67157-1548">그러나 사용 하는 경우는 <xref:System.Diagnostics.ProcessStartInfo.Verbs%2A> 동사를 결정 하는 속성을 사용할 수 있는 확장명을 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1548">However, if you use the <xref:System.Diagnostics.ProcessStartInfo.Verbs%2A> property to determine what verbs are available, you must include the extension.</span></span>  
  
 <span data-ttu-id="67157-1549">지정 된 매개 변수를 변경할 수 있습니다 합니다 <xref:System.Diagnostics.Process.StartInfo%2A> 호출 하는 시간까지 속성은 <xref:System.Diagnostics.Process.Start%2A> 프로세스에는 메서드.</span><span class="sxs-lookup"><span data-stu-id="67157-1549">You can change the parameters specified in the <xref:System.Diagnostics.Process.StartInfo%2A> property up to the time that you call the <xref:System.Diagnostics.Process.Start%2A> method on the process.</span></span> <span data-ttu-id="67157-1550">프로세스를 시작 하면 변경 된 <xref:System.Diagnostics.Process.StartInfo%2A> 값에 영향을 하거나 연결된 된 프로세스를 다시 시작 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1550">After you start the process, changing the <xref:System.Diagnostics.Process.StartInfo%2A> values does not affect or restart the associated process.</span></span> <span data-ttu-id="67157-1551">호출 하는 경우는 <xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29> 메서드를 <xref:System.Diagnostics.ProcessStartInfo.UserName%2A?displayProperty=nameWithType> 및 <xref:System.Diagnostics.ProcessStartInfo.Password%2A?displayProperty=nameWithType> 속성이 설정, 관리 되지 않는 `CreateProcessWithLogonW` 함수가 호출 될 합니다 <xref:System.Diagnostics.ProcessStartInfo.CreateNoWindow%2A> 속성 값이 `true` 또는 합니다 <xref:System.Diagnostics.ProcessStartInfo.WindowStyle%2A> 속성 값이 <xref:System.Diagnostics.ProcessWindowStyle.Hidden>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1551">If you call the <xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29> method with the <xref:System.Diagnostics.ProcessStartInfo.UserName%2A?displayProperty=nameWithType> and <xref:System.Diagnostics.ProcessStartInfo.Password%2A?displayProperty=nameWithType> properties set, the unmanaged `CreateProcessWithLogonW` function is called, which starts the process in a new window even if the <xref:System.Diagnostics.ProcessStartInfo.CreateNoWindow%2A> property value is `true` or the <xref:System.Diagnostics.ProcessStartInfo.WindowStyle%2A> property value is <xref:System.Diagnostics.ProcessWindowStyle.Hidden>.</span></span>  
  
 <span data-ttu-id="67157-1552">사용 하지 않은 경우는 <xref:System.Diagnostics.Process.Start%2A> 프로세스를 시작 하는 메서드는 <xref:System.Diagnostics.Process.StartInfo%2A> 속성 프로세스를 시작 하는 데 사용 하는 매개 변수를 반영 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1552">If you did not use the <xref:System.Diagnostics.Process.Start%2A> method to start a process, the <xref:System.Diagnostics.Process.StartInfo%2A> property does not reflect the parameters used to start the process.</span></span> <span data-ttu-id="67157-1553">예를 들어, 사용 하는 경우 <xref:System.Diagnostics.Process.GetProcesses%2A> 컴퓨터에서 실행 중인 프로세스의 배열을 가져오려면 합니다 <xref:System.Diagnostics.Process.StartInfo%2A> 각각의 속성 <xref:System.Diagnostics.Process> 원래 파일 이름 또는 프로세스를 시작 하는 데 사용 되는 인수를 포함 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1553">For example, if you use <xref:System.Diagnostics.Process.GetProcesses%2A> to get an array of processes running on the computer, the <xref:System.Diagnostics.Process.StartInfo%2A> property of each <xref:System.Diagnostics.Process> does not contain the original file name or arguments used to start the process.</span></span>  
  
 <span data-ttu-id="67157-1554">프로세스가 시작 되 면 파일 이름은 파일 (읽기 전용)을 채우는 <xref:System.Diagnostics.Process.MainModule%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1554">When the process is started, the file name is the file that populates the (read-only) <xref:System.Diagnostics.Process.MainModule%2A> property.</span></span> <span data-ttu-id="67157-1555">프로세스가 시작 된 후 프로세스와 관련 된 실행 파일을 검색, 사용 하려는 경우는 <xref:System.Diagnostics.Process.MainModule%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1555">If you want to retrieve the executable file that is associated with the process after the process has started, use the <xref:System.Diagnostics.Process.MainModule%2A> property.</span></span> <span data-ttu-id="67157-1556">실행 파일을 설정 하려는 경우는 <xref:System.Diagnostics.Process> 는 연결된 된 프로세스가 시작 되지 않은 인스턴스를 사용 합니다 <xref:System.Diagnostics.Process.StartInfo%2A> 속성의 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1556">If you want to set the executable file of a <xref:System.Diagnostics.Process> instance for which an associated process has not been started, use the <xref:System.Diagnostics.Process.StartInfo%2A> property's <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> member.</span></span> <span data-ttu-id="67157-1557">때문에의 멤버를 <xref:System.Diagnostics.Process.StartInfo%2A> 속성에 전달 되는 인수가 합니다 <xref:System.Diagnostics.Process.Start%2A> 변경 프로세스의 메서드는 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 속성이 연결된 된 프로세스가 시작 된 후 다시 설정 되지 것입니다는 <xref:System.Diagnostics.Process.MainModule%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="67157-1557">Because the members of the <xref:System.Diagnostics.Process.StartInfo%2A> property are arguments that are passed to the <xref:System.Diagnostics.Process.Start%2A> method of a process, changing the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property after the associated process has started will not reset the <xref:System.Diagnostics.Process.MainModule%2A> property.</span></span> <span data-ttu-id="67157-1558">이러한 속성은 연결된 된 프로세스 초기화에 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1558">These properties are used only to initialize the associated process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-1559">다음 예제는 <xref:System.Diagnostics.Process.StartInfo%2A> 실행할 파일을 사용 하 여 작업을 수행 하 고 사용자 인터페이스를 표시 해야 하는지 여부입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1559">The following example populates a <xref:System.Diagnostics.Process.StartInfo%2A> with the file to execute, the action performed on it and whether it should displays a user interface.</span></span> <span data-ttu-id="67157-1560">추가 예제를 보려면 참조 페이지의 속성에 대 한 참조를 <xref:System.Diagnostics.ProcessStartInfo> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1560">For additional examples, refer to the reference pages for properties of the <xref:System.Diagnostics.ProcessStartInfo> class.</span></span>  
  
 [!code-cpp[Process.Start_instance#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.Start_instance/CPP/processstart.cpp#1)]
 [!code-csharp[Process.Start_instance#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.Start_instance/CS/processstart.cs#1)]
 [!code-vb[Process.Start_instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.Start_instance/VB/processstart.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="67157-1561"><see cref="P:System.Diagnostics.Process.StartInfo" />를 지정하는 값이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1561">The value that specifies the <see cref="P:System.Diagnostics.Process.StartInfo" /> is <see langword="null" />.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1562">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1562">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1563">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1563">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.Diagnostics.Process.Start" />
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.FileName" />
      </Docs>
    </Member>
    <Member MemberName="StartTime">
      <MemberSignature Language="C#" Value="public DateTime StartTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime StartTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.StartTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StartTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime StartTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.StartTime : DateTime" Usage="System.Diagnostics.Process.StartTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The time at which the process was started.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessStartTime")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-1564">연결된 프로세스가 시작된 시간을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1564">Gets the time that the associated process was started.</span></span></summary>
        <value><span data-ttu-id="67157-1565">해당 프로세스가 시작된 시간을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1565">An object  that indicates when the process started.</span></span> <span data-ttu-id="67157-1566">프로세스가 실행되고 있지 않으면 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1566">An exception is thrown if the process is not running.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-1567">플랫폼이 이 속성을 지원하지 않는 Windows 98 또는 Windows Millennium Edition(Windows Me)인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1567">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="67157-1568">원격 컴퓨터에서 실행 중인 프로세스의 <see cref="P:System.Diagnostics.Process.StartTime" /> 속성에 대해 액세스를 시도했지만</span><span class="sxs-lookup"><span data-stu-id="67157-1568">You are attempting to access the <see cref="P:System.Diagnostics.Process.StartTime" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="67157-1569">이 속성은 로컬 컴퓨터에서 실행 중인 프로세스에 대해서만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1569">This property is available only for processes that are running on the local computer.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-1570">프로세스가 종료된 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1570">The process has exited.</span></span>  
  
<span data-ttu-id="67157-1571">또는</span><span class="sxs-lookup"><span data-stu-id="67157-1571">-or-</span></span> 
<span data-ttu-id="67157-1572">즉, 프로세스가 시작되지 않은 경우입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1572">The process has not been started.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="67157-1573">Windows 함수를 호출하는 동안 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1573">An error occurred in the call to the Windows function.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1574">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1574">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1575">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1575">This member cannot be used by partially trusted code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SynchronizingObject">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISynchronizeInvoke SynchronizingObject" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.SynchronizingObject" />
      <MemberSignature Language="VB.NET" Value="Public Property SynchronizingObject As ISynchronizeInvoke" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::ISynchronizeInvoke ^ SynchronizingObject { System::ComponentModel::ISynchronizeInvoke ^ get(); void set(System::ComponentModel::ISynchronizeInvoke ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizingObject : System.ComponentModel.ISynchronizeInvoke with get, set" Usage="System.Diagnostics.Process.SynchronizingObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The object used to marshal the event handler calls issued as a result of a Process exit.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessSynchronizingObject")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISynchronizeInvoke</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-1576">프로세스 종료 이벤트의 결과로 발생하는 이벤트 처리기 호출을 마샬링하는 데 사용되는 개체를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1576">Gets or sets the object used to marshal the event handler calls that are issued as a result of a process exit event.</span></span></summary>
        <value><span data-ttu-id="67157-1577">프로세스에서 <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> 이벤트의 결과로 발생하는 이벤트 처리기 호출을 마샬링하는 데 사용되는 <see cref="E:System.Diagnostics.Process.Exited" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1577">The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> used to marshal event handler calls that are issued as a result of an <see cref="E:System.Diagnostics.Process.Exited" /> event on the process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-1578">때 <xref:System.Diagnostics.EventLog.SynchronizingObject%2A> 됩니다 `null`를 처리 하는 메서드는 <xref:System.Diagnostics.Process.Exited> 이벤트 시스템 스레드 풀의 스레드에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1578">When <xref:System.Diagnostics.EventLog.SynchronizingObject%2A> is `null`, methods that handle the <xref:System.Diagnostics.Process.Exited> event are called on a thread from the system thread pool.</span></span> <span data-ttu-id="67157-1579">시스템 스레드 풀에 대 한 자세한 내용은 참조 하세요. <xref:System.Threading.ThreadPool>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1579">For more information about system thread pools, see <xref:System.Threading.ThreadPool>.</span></span>  
  
 <span data-ttu-id="67157-1580">경우는 <xref:System.Diagnostics.Process.Exited> 이벤트와 같은 visual Windows Forms 구성 요소에 의해 처리 됩니다는 <xref:System.Windows.Forms.Button>, 시스템 스레드 풀을 통해 구성 요소를 액세스 작동 하지 않을 수 있습니다 또는 예외가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1580">When the <xref:System.Diagnostics.Process.Exited> event is handled by a visual Windows Forms component, such as a <xref:System.Windows.Forms.Button>, accessing the component through the system thread pool might not work, or might result in an exception.</span></span> <span data-ttu-id="67157-1581">설정 하 여이 문제를 방지 <xref:System.Diagnostics.Process.SynchronizingObject%2A> Windows Forms 구성 요소에 메서드가 처리는 <xref:System.Diagnostics.Process.Exited> 구성 요소를 만든 동일한 스레드에서 호출 되는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1581">Avoid this by setting <xref:System.Diagnostics.Process.SynchronizingObject%2A> to a Windows Forms component, which causes the methods handling the <xref:System.Diagnostics.Process.Exited> event to be called on the same thread on which the component was created.</span></span>  
  
 <span data-ttu-id="67157-1582">경우는 <xref:System.Diagnostics.Process> 내에서 사용 되 [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] Windows Forms 디자이너에서 <xref:System.Diagnostics.Process.SynchronizingObject%2A> 포함 된 컨트롤에 자동으로 설정 됩니다는 <xref:System.Diagnostics.Process>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1582">If the <xref:System.Diagnostics.Process> is used inside [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] in a Windows Forms designer, <xref:System.Diagnostics.Process.SynchronizingObject%2A> is automatically set to the control that contains the <xref:System.Diagnostics.Process>.</span></span> <span data-ttu-id="67157-1583">예를 들어, 배치 하는 경우는 <xref:System.Diagnostics.Process> 에 대 한 디자이너에서 `Form1` (에서 상속 하는 <xref:System.Windows.Forms.Form>)는 <xref:System.Diagnostics.Process.SynchronizingObject%2A> 속성 <xref:System.Diagnostics.Process> 인스턴스의로 설정 되어 `Form1`:</span><span class="sxs-lookup"><span data-stu-id="67157-1583">For example, if you place a <xref:System.Diagnostics.Process> on a designer for `Form1` (which inherits from <xref:System.Windows.Forms.Form>) the <xref:System.Diagnostics.Process.SynchronizingObject%2A> property of <xref:System.Diagnostics.Process> is set to the instance of `Form1`:</span></span>  
  
 [!code-cpp[Process_SynchronizingObject#2](~/samples/snippets/cpp/VS_Snippets_CLR/Process_SynchronizingObject/CPP/remarks.cpp#2)]
 [!code-csharp[Process_SynchronizingObject#2](~/samples/snippets/csharp/VS_Snippets_CLR/Process_SynchronizingObject/CS/remarks.cs#2)]
 [!code-vb[Process_SynchronizingObject#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process_SynchronizingObject/VB/remarks.vb#2)]  
  
 <span data-ttu-id="67157-1584">일반적으로 이러한 구성 요소는 특정 스레드에 바인딩되어 있기 때문에 구성 요소 컨트롤 또는 폼에 배치 된 경우이 속성이 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1584">Typically, this property is set when the component is placed inside a control or form, because those components are bound to a specific thread.</span></span>  
  
   
  
## Examples  
 [!code-cpp[Process_SynchronizingObject#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process_SynchronizingObject/CPP/process_synchronizingobject.cpp#1)]
 [!code-csharp[Process_SynchronizingObject#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process_SynchronizingObject/CS/process_synchronizingobject.cs#1)]
 [!code-vb[Process_SynchronizingObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process_SynchronizingObject/VB/process_synchronizingobject.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1585">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1585">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1586">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1586">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.SynchronizingObject" />
      </Docs>
    </Member>
    <Member MemberName="Threads">
      <MemberSignature Language="C#" Value="public System.Diagnostics.ProcessThreadCollection Threads { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.ProcessThreadCollection Threads" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.Threads" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Threads As ProcessThreadCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::ProcessThreadCollection ^ Threads { System::Diagnostics::ProcessThreadCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Threads : System.Diagnostics.ProcessThreadCollection" Usage="System.Diagnostics.Process.Threads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The number of threads of this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessThreads")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ProcessThreadCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-1587">연결된 프로세스에서 실행 중인 스레드를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1587">Gets the set of threads that are running in the associated process.</span></span></summary>
        <value><span data-ttu-id="67157-1588">연결된 프로세스에서 현재 실행 중인 운영 체제 스레드를 나타내는 <see cref="T:System.Diagnostics.ProcessThread" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1588">An array of type <see cref="T:System.Diagnostics.ProcessThread" /> representing the operating system threads currently running in the associated process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-1589">스레드는 프로세스에서 코드를 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1589">A thread executes code in a process.</span></span> <span data-ttu-id="67157-1590">각 프로세스는 단일 스레드를 해당 주 스레드를 사용 하 여 시작 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1590">Each process is started with a single thread, its primary thread.</span></span> <span data-ttu-id="67157-1591">모든 스레드는 추가 스레드를 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1591">Any thread can create additional threads.</span></span> <span data-ttu-id="67157-1592">프로세스 내에서 스레드 프로세스의 주소 공간을 공유합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1592">Threads within a process share the address space of the process.</span></span>  
  
 <span data-ttu-id="67157-1593">사용 하 여 <xref:System.Diagnostics.ProcessThread> 현재 프로세스와 관련 된 모든 스레드를 가져오려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1593">Use <xref:System.Diagnostics.ProcessThread> to get all the threads associated with the current process.</span></span> <span data-ttu-id="67157-1594">주 스레드가 반드시 배열에서 인덱스 0에 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1594">The primary thread is not necessarily at index zero in the array.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException"><span data-ttu-id="67157-1595">프로세스에 <see cref="P:System.Diagnostics.Process.Id" />가 없거나 <see cref="T:System.Diagnostics.Process" /> 인스턴스에 연결된 프로세스가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1595">The process does not have an <see cref="P:System.Diagnostics.Process.Id" />, or no process is associated with the <see cref="T:System.Diagnostics.Process" /> instance.</span></span>  
  
<span data-ttu-id="67157-1596">또는</span><span class="sxs-lookup"><span data-stu-id="67157-1596">-or-</span></span> 
<span data-ttu-id="67157-1597">연결된 프로세스가 종료된 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1597">The associated process has exited.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-1598">플랫폼이 Windows 98 또는 Windows Millennium Edition(Me)입니다. Windows 98 및 Windows Me에서 이 속성에 액세스하려면 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" />를 <see langword="false" />로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1598">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> to <see langword="false" /> to access this property on Windows 98 and Windows Me.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1599">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1599">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1600">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1600">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="T:System.Diagnostics.ProcessThread" />
        <altmember cref="P:System.Diagnostics.Process.BasePriority" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="process.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="67157-1601">가능한 경우 부모 구성 요소 형식을 결합하여 프로세스 이름을 문자열로 서식화합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1601">Formats the process's name as a string, combined with the parent component type, if applicable.</span></span></summary>
        <returns><span data-ttu-id="67157-1602">기본 구성 요소의 <see cref="P:System.Diagnostics.Process.ProcessName" /> 반환 값과 결합된 <see cref="M:System.Object.ToString" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1602">The <see cref="P:System.Diagnostics.Process.ProcessName" />, combined with the base component's <see cref="M:System.Object.ToString" /> return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="67157-1603">다음 예제에서는 메모장의 인스턴스를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1603">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="67157-1604">그런 다음 예제에서는 검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1604">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="67157-1605">이 예제에서는 프로세스가 종료 하는 경우를 검색 합니다. 프로세스의 종료 코드를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1605">The example detects when the process exits, and displays the process's exit code.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-1606"><see cref="M:System.Diagnostics.Process.ToString" />은 Windows 98에서 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1606"><see cref="M:System.Diagnostics.Process.ToString" /> is not supported on Windows 98.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1607">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1607">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1608">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1608">This member cannot be used by partially trusted code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="TotalProcessorTime">
      <MemberSignature Language="C#" Value="public TimeSpan TotalProcessorTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TotalProcessorTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.TotalProcessorTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalProcessorTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TotalProcessorTime { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TotalProcessorTime : TimeSpan" Usage="System.Diagnostics.Process.TotalProcessorTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of CPU time the process has used.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessTotalProcessorTime")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-1609">해당 프로세스의 총 프로세서 시간을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1609">Gets the total processor time for this process.</span></span></summary>
        <value><span data-ttu-id="67157-1610">연결된 프로세스에서 CPU를 이용하여 사용한 시간을 나타내는 <see cref="T:System.TimeSpan" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1610">A <see cref="T:System.TimeSpan" /> that indicates the amount of time that the associated process has spent utilizing the CPU.</span></span> <span data-ttu-id="67157-1611">이 값은 <see cref="P:System.Diagnostics.Process.UserProcessorTime" />과 <see cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" />의 합입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1611">This value is the sum of the <see cref="P:System.Diagnostics.Process.UserProcessorTime" /> and the <see cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="67157-1612">다음 예제에서는 메모장의 인스턴스를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1612">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="67157-1613">그런 다음 예제에서는 검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1613">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="67157-1614">이 예제에서는 프로세스가 종료 하는 경우를 검색 합니다. 프로세스의 종료 코드를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1614">The example detects when the process exits, and displays the process's exit code.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-1615">플랫폼이 이 속성을 지원하지 않는 Windows 98 또는 Windows Millennium Edition(Windows Me)인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1615">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="67157-1616">원격 컴퓨터에서 실행 중인 프로세스의 <see cref="P:System.Diagnostics.Process.TotalProcessorTime" /> 속성에 대해 액세스를 시도했지만</span><span class="sxs-lookup"><span data-stu-id="67157-1616">You are attempting to access the <see cref="P:System.Diagnostics.Process.TotalProcessorTime" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="67157-1617">이 속성은 로컬 컴퓨터에서 실행 중인 프로세스에 대해서만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1617">This property is available only for processes that are running on the local computer.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1618">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1618">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1619">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1619">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.UserProcessorTime" />
        <altmember cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" />
      </Docs>
    </Member>
    <Member MemberName="UserProcessorTime">
      <MemberSignature Language="C#" Value="public TimeSpan UserProcessorTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan UserProcessorTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.UserProcessorTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserProcessorTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan UserProcessorTime { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.UserProcessorTime : TimeSpan" Usage="System.Diagnostics.Process.UserProcessorTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of CPU time the process spent outside the operating system core.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessUserProcessorTime")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-1620">해당 프로세스의 사용자 프로세서 시간을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1620">Gets the user processor time for this process.</span></span></summary>
        <value><span data-ttu-id="67157-1621">연결된 프로세스가 운영 체제 코어 내부가 아닌 프로세스의 응용 프로그램 부분 내부에서 코드를 실행하는 데 사용한 시간을 나타내는 <see cref="T:System.TimeSpan" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1621">A <see cref="T:System.TimeSpan" /> that indicates the amount of time that the associated process has spent running code inside the application portion of the process (not inside the operating system core).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="67157-1622">다음 예제에서는 메모장의 인스턴스를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1622">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="67157-1623">그런 다음 예제에서는 검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1623">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="67157-1624">이 예제에서는 프로세스가 종료 하는 경우를 검색 합니다. 프로세스의 종료 코드를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1624">The example detects when the process exits, and displays the process's exit code.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-1625">플랫폼이 이 속성을 지원하지 않는 Windows 98 또는 Windows Millennium Edition(Windows Me)인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1625">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="67157-1626">원격 컴퓨터에서 실행 중인 프로세스의 <see cref="P:System.Diagnostics.Process.UserProcessorTime" /> 속성에 대해 액세스를 시도했지만</span><span class="sxs-lookup"><span data-stu-id="67157-1626">You are attempting to access the <see cref="P:System.Diagnostics.Process.UserProcessorTime" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="67157-1627">이 속성은 로컬 컴퓨터에서 실행 중인 프로세스에 대해서만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1627">This property is available only for processes that are running on the local computer.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1628">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1628">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1629">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1629">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.UserProcessorTime" />
        <altmember cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" />
      </Docs>
    </Member>
    <Member MemberName="VirtualMemorySize">
      <MemberSignature Language="C#" Value="public int VirtualMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VirtualMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.VirtualMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VirtualMemorySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int VirtualMemorySize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.VirtualMemorySize : int" Usage="System.Diagnostics.Process.VirtualMemorySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of virtual memory currently used for this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use VirtualMemorySize64")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.VirtualMemorySize64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessVirtualMemorySize")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.VirtualMemorySize64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-1630">프로세스의 가상 메모리 크기(바이트)를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1630">Gets the size of the process's virtual memory, in bytes.</span></span></summary>
        <value><span data-ttu-id="67157-1631">연결된 프로세스에서 요청한 가상 메모리의 양(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1631">The amount of virtual memory, in bytes, that the associated process has requested.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-1632">플랫폼이 이 속성을 지원하지 않는 Windows 98 또는 Windows Millennium Edition(Windows Me)인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1632">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1633">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1633">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1634">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1634">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.VirtualMemorySize64" />
        <altmember cref="P:System.Diagnostics.Process.PeakVirtualMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="VirtualMemorySize64">
      <MemberSignature Language="C#" Value="public long VirtualMemorySize64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 VirtualMemorySize64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.VirtualMemorySize64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VirtualMemorySize64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long VirtualMemorySize64 { long get(); };" />
      <MemberSignature Language="F#" Value="member this.VirtualMemorySize64 : int64" Usage="System.Diagnostics.Process.VirtualMemorySize64" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of virtual memory currently used for this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessVirtualMemorySize")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-1635">연결된 프로세스에 할당된 가상 메모리의 양(바이트)을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1635">Gets the amount of the virtual memory, in bytes, allocated for the associated process.</span></span></summary>
        <value><span data-ttu-id="67157-1636">연결된 프로세스에 할당된 가상 메모리의 양(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1636">The amount of virtual memory, in bytes, allocated for the associated process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-1637">이 속성에 의해 반환 된 값 (바이트)에서 프로세스에 의해 사용 된 가상 메모리의 현재 크기를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1637">The value returned by this property represents the current size of virtual memory used by the process, in bytes.</span></span> <span data-ttu-id="67157-1638">운영 체제는 실제 메모리 또는 디스크에 있는 가상 메모리 페이징 파일에 저장 된 페이지를 로드 하거나 페이지 각 프로세스에 대 한 가상 주소 공간을 매핑합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1638">The operating system maps the virtual address space for each process either to pages loaded in physical memory, or to pages stored in the virtual memory paging file on disk.</span></span>  
  
 <span data-ttu-id="67157-1639">32 비트 프로세서 또는 64 비트 프로세서를 사용 하 여 컴퓨터에서 메모리 사용량을 모니터링 하려면이 속성을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1639">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="67157-1640">속성 값이 해당 하는 **가상 바이트** 프로세스에 대 한 성능 카운터입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1640">The property value is equivalent to the **Virtual Bytes** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-1641">다음 코드 예제에서는 메모장 응용 프로그램의 인스턴스를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1641">The following code example starts an instance of the Notepad application.</span></span> <span data-ttu-id="67157-1642">그런 다음 예제에서는 검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1642">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="67157-1643">이 예제에서는 프로세스가 종료 하는 경우를 검색 합니다. 종료 코드 및 최대 메모리 통계를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1643">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-1644">플랫폼이 이 속성을 지원하지 않는 Windows 98 또는 Windows Millennium Edition(Windows Me)인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1644">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1645">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1645">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1646">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1646">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.PeakVirtualMemorySize64" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitForExit">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="67157-1647">연결된 프로세스가 종료될 때까지 대기하는 시간을 설정하고, 시간이 경과하거나 프로세스가 종료될 때까지 현재 실행의 스레드를 차단합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1647">Sets the period of time to wait for the associated process to exit, and blocks the current thread of execution until the time has elapsed or the process has exited.</span></span> <span data-ttu-id="67157-1648">현재 스레드가 차단되는 것을 방지하려면 <see cref="E:System.Diagnostics.Process.Exited" /> 이벤트를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1648">To avoid blocking the current thread, use the <see cref="E:System.Diagnostics.Process.Exited" /> event.</span></span>  
  
<span data-ttu-id="67157-1649">코드 예제는 <see cref="P:System.Diagnostics.Process.StandardError" /> 및 <see cref="P:System.Diagnostics.Process.ExitCode" /> 속성 참조 페이지를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="67157-1649">For code examples, see the <see cref="P:System.Diagnostics.Process.StandardError" /> and the <see cref="P:System.Diagnostics.Process.ExitCode" /> property reference pages.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitForExit">
      <MemberSignature Language="C#" Value="public void WaitForExit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WaitForExit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.WaitForExit" />
      <MemberSignature Language="VB.NET" Value="Public Sub WaitForExit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WaitForExit();" />
      <MemberSignature Language="F#" Value="member this.WaitForExit : unit -&gt; unit" Usage="process.WaitForExit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="67157-1650">연결된 프로세스가 종료될 때까지 <see cref="T:System.Diagnostics.Process" /> 구성 요소를 무기한 대기하게 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1650">Instructs the <see cref="T:System.Diagnostics.Process" /> component to wait indefinitely for the associated process to exit.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-1651"><xref:System.Diagnostics.Process.WaitForExit> 현재 스레드에 연결된 된 프로세스가 종료 될 때까지 대기할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1651"><xref:System.Diagnostics.Process.WaitForExit> makes the current thread wait until the associated process terminates.</span></span>  <span data-ttu-id="67157-1652">프로세스에 대 한 다른 모든 메서드는 호출 된 후 호출 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1652">It should be called after all other methods are called on the process.</span></span> <span data-ttu-id="67157-1653">현재 스레드가 차단되는 것을 방지하려면 <xref:System.Diagnostics.Process.Exited> 이벤트를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1653">To avoid blocking the current thread, use the <xref:System.Diagnostics.Process.Exited> event.</span></span>  
  
 <span data-ttu-id="67157-1654">이 메서드는 <xref:System.Diagnostics.Process> 구성 요소를 종료 하려면 프로세스 및 이벤트 처리기에 대 한 시간 수가 무제한 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1654">This method instructs the <xref:System.Diagnostics.Process> component to wait an infinite amount of time for the process and event handlers to exit.</span></span> <span data-ttu-id="67157-1655">이 인해 응답을 중지 하도록 응용 프로그램이 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1655">This can cause an application to stop responding.</span></span> <span data-ttu-id="67157-1656">예를 들어, 호출 하는 경우 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 사용자 인터페이스가 있는 프로세스에 대 한 연결된 프로세스를 종료 하려면 운영 체제를 요청 하지 처리 될 수 있습니다 하는 프로세스의 메시지 루프에 진입 하지 않도록 작성 되는 경우.</span><span class="sxs-lookup"><span data-stu-id="67157-1656">For example, if you call <xref:System.Diagnostics.Process.CloseMainWindow%2A> for a process that has a user interface, the request to the operating system to terminate the associated process might not be handled if the process is written to never enter its message loop.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-1657">에 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 및 이전 버전의 <xref:System.Diagnostics.Process.WaitForExit> 오버 로드에 대 한 대기 <xref:System.Int32.MaxValue> 밀리초 (약 24 일), not 무기한.</span><span class="sxs-lookup"><span data-stu-id="67157-1657">In the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] and earlier versions, the <xref:System.Diagnostics.Process.WaitForExit> overload waited for <xref:System.Int32.MaxValue> milliseconds (approximately 24 days), not indefinitely.</span></span> <span data-ttu-id="67157-1658">또한 이전 버전 기다리지 않고 이벤트 처리기를 끝낼 전체 <xref:System.Int32.MaxValue> 시간에 도달 했습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1658">Also, previous versions did not wait for the event handlers to exit if the full <xref:System.Int32.MaxValue> time was reached.</span></span>  
  
 <span data-ttu-id="67157-1659">이 오버 로드는 모든 처리가 완료 되 면 리디렉션된 표준 출력에 대 한 비동기 이벤트 처리를 포함 하 여 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1659">This overload ensures that all processing has been completed, including the handling of asynchronous events for redirected standard output.</span></span> <span data-ttu-id="67157-1660">호출한 후이 오버 로드를 사용 해야는 <xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29> 비동기 이벤트 처리기에 표준 출력 리디렉션된 경우 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1660">You should use this overload after a call to the <xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29> overload when standard output has been redirected to asynchronous event handlers.</span></span>  
  
 <span data-ttu-id="67157-1661">시스템 프로세스에 대 한 관리 정보를 저장 하 고이 호출한는 구성 요소를 반환 (즉,이 종료 될 때 정상 또는 비정상 종료를 통해 운영 체제별) 연결된 된 프로세스가 종료 되 면 <xref:System.Diagnostics.Process.WaitForExit>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1661">When an associated process exits (that is, when it is shut down by the operation system through a normal or abnormal termination), the system stores administrative information about the process and returns to the component that had called <xref:System.Diagnostics.Process.WaitForExit>.</span></span> <span data-ttu-id="67157-1662"><xref:System.Diagnostics.Process> 구성 요소 정보를 포함 하는 액세스할 수는 <xref:System.Diagnostics.Process.ExitTime%2A>를 사용 하 여는 <xref:System.Diagnostics.Process.Handle%2A> 종료 된 프로세스에.</span><span class="sxs-lookup"><span data-stu-id="67157-1662">The <xref:System.Diagnostics.Process> component can then access the information, which includes the <xref:System.Diagnostics.Process.ExitTime%2A>, by using the <xref:System.Diagnostics.Process.Handle%2A> to the exited process.</span></span>  
  
 <span data-ttu-id="67157-1663">연결된 된 프로세스가 종료 되었으므로 <xref:System.Diagnostics.Process.Handle%2A> 구성 요소의 속성은 더 이상 기존 프로세스 리소스를 가리킵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1663">Because the associated process has exited, the <xref:System.Diagnostics.Process.Handle%2A> property of the component no longer points to an existing process resource.</span></span> <span data-ttu-id="67157-1664">대신, 핸들 프로세스 리소스에 대 한 운영 체제의 정보를 액세스할 때만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1664">Instead, the handle can be used only to access the operating system's information about the process resource.</span></span> <span data-ttu-id="67157-1665">시스템에 의해 릴리스되지 않았거나 종료 된 프로세스에 대 한 핸들 인지 <xref:System.Diagnostics.Process> 구성 요소를 유지할 수 있도록를 <xref:System.Diagnostics.Process.ExitTime%2A> 및 <xref:System.Diagnostics.Process.Handle%2A> 까지 메모리에 대 한 정보를 <xref:System.Diagnostics.Process> 구성 요소에는 특히 한 리소스를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1665">The system is aware of handles to exited processes that have not been released by <xref:System.Diagnostics.Process> components, so it keeps the <xref:System.Diagnostics.Process.ExitTime%2A> and <xref:System.Diagnostics.Process.Handle%2A> information in memory until the <xref:System.Diagnostics.Process> component specifically frees the resources.</span></span> <span data-ttu-id="67157-1666">이러한 이유로 언제 든 지 호출할 <xref:System.Diagnostics.Process.Start%2A> 에 대 한는 <xref:System.Diagnostics.Process> 인스턴스를 호출 <xref:System.Diagnostics.Process.Close%2A> 연결 된 프로세스가 종료 시점과 모든 관리 정보가 더 이상 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1666">For this reason, any time you call <xref:System.Diagnostics.Process.Start%2A> for a <xref:System.Diagnostics.Process> instance, call <xref:System.Diagnostics.Process.Close%2A> when the associated process has terminated and you no longer need any administrative information about it.</span></span> <span data-ttu-id="67157-1667"><xref:System.Diagnostics.Process.Close%2A> 종료 된 프로세스에 할당 된 메모리를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1667"><xref:System.Diagnostics.Process.Close%2A> frees the memory allocated to the exited process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-1668">설명 섹션을 참조 합니다 <xref:System.Diagnostics.Process.StandardError%2A> 속성 참조 페이지입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1668">See the Remarks section of the <xref:System.Diagnostics.Process.StandardError%2A> property reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="67157-1669">대기 설정에 액세스할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1669">The wait setting could not be accessed.</span></span></exception>
        <exception cref="T:System.SystemException"><span data-ttu-id="67157-1670">프로세스 <see cref="P:System.Diagnostics.Process.Id" />가 설정되지 않았고 <see cref="P:System.Diagnostics.Process.Handle" /> 속성을 확인할 수 있는 <see cref="P:System.Diagnostics.Process.Id" />이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1670">No process <see cref="P:System.Diagnostics.Process.Id" /> has been set, and a <see cref="P:System.Diagnostics.Process.Handle" /> from which the <see cref="P:System.Diagnostics.Process.Id" /> property can be determined does not exist.</span></span>  
  
<span data-ttu-id="67157-1671">또는</span><span class="sxs-lookup"><span data-stu-id="67157-1671">-or-</span></span> 
<span data-ttu-id="67157-1672">이 <see cref="T:System.Diagnostics.Process" /> 개체에 연결된 프로세스가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1672">There is no process associated with this <see cref="T:System.Diagnostics.Process" /> object.</span></span>  
  
<span data-ttu-id="67157-1673">또는</span><span class="sxs-lookup"><span data-stu-id="67157-1673">-or-</span></span> 
<span data-ttu-id="67157-1674">원격 컴퓨터에서 실행 중인 프로세스의 <see cref="M:System.Diagnostics.Process.WaitForExit" />에 대해 호출을 시도했지만</span><span class="sxs-lookup"><span data-stu-id="67157-1674">You are attempting to call <see cref="M:System.Diagnostics.Process.WaitForExit" /> for a process that is running on a remote computer.</span></span> <span data-ttu-id="67157-1675">로컬 컴퓨터에서 실행 중인 프로세스에 대해서만 이 메서드를 사용할 수 있는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1675">This method is available only for processes that are running on the local computer.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1676">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1676">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1677">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1677">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
        <altmember cref="P:System.Diagnostics.Process.Handle" />
        <altmember cref="P:System.Diagnostics.Process.ExitTime" />
        <altmember cref="P:System.Diagnostics.Process.EnableRaisingEvents" />
        <altmember cref="P:System.Diagnostics.Process.HasExited" />
        <altmember cref="E:System.Diagnostics.Process.Exited" />
      </Docs>
    </Member>
    <Member MemberName="WaitForExit">
      <MemberSignature Language="C#" Value="public bool WaitForExit (int milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool WaitForExit(int32 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.WaitForExit(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForExit (milliseconds As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForExit(int milliseconds);" />
      <MemberSignature Language="F#" Value="member this.WaitForExit : int -&gt; bool" Usage="process.WaitForExit milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="milliseconds"><span data-ttu-id="67157-1678">연결된 프로세스가 종료될 때까지 대기하는 시간(밀리초)입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1678">The amount of time, in milliseconds, to wait for the associated process to exit.</span></span> <span data-ttu-id="67157-1679">최대값은 사용 가능한 가장 큰 32비트 정수 값이며, 이것은 운영 체제에서 사실상 무기한 대기한다는 것을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1679">The maximum is the largest possible value of a 32-bit integer, which represents infinity to the operating system.</span></span></param>
        <summary><span data-ttu-id="67157-1680">연결된 프로세스가 종료되도록 지정한 밀리초 동안 <see cref="T:System.Diagnostics.Process" /> 구성 요소를 대기하게 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1680">Instructs the <see cref="T:System.Diagnostics.Process" /> component to wait the specified number of milliseconds for the associated process to exit.</span></span></summary>
        <returns><span data-ttu-id="67157-1681">연결된 프로세스가 종료된 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1681"><see langword="true" /> if the associated process has exited; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-1682"><xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29> 현재 스레드에 연결된 된 프로세스가 종료 될 때까지 대기할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1682"><xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29> makes the current thread wait until the associated process terminates.</span></span> <span data-ttu-id="67157-1683">프로세스에 대 한 다른 모든 메서드는 호출 된 후 호출 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1683">It should be called after all other methods are called on the process.</span></span> <span data-ttu-id="67157-1684">현재 스레드가 차단되는 것을 방지하려면 <xref:System.Diagnostics.Process.Exited> 이벤트를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1684">To avoid blocking the current thread, use the <xref:System.Diagnostics.Process.Exited> event.</span></span>  
  
 <span data-ttu-id="67157-1685">이 메서드는 <xref:System.Diagnostics.Process> 구성 요소를 종료 하는 프로세스에 대 한 한정 된 기간을 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1685">This method instructs the <xref:System.Diagnostics.Process> component to wait a finite amount of time for the process to exit.</span></span> <span data-ttu-id="67157-1686">연결된 된 프로세스가 종료 요청이 거부 되어 서 간격의 끝에서 종료 되지 않으면 `false` 호출 하는 프로시저로 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1686">If the associated process does not exit by the end of the interval because the request to terminate is denied, `false` is returned to the calling procedure.</span></span> <span data-ttu-id="67157-1687">지정할 수 있습니다 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> 에 대 한 `milliseconds`, 및 <xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29?displayProperty=nameWithType> 와 동일 하 게 동작 합니다 <xref:System.Diagnostics.Process.WaitForExit> 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1687">You can specify <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> for `milliseconds`, and <xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29?displayProperty=nameWithType> will behave the same as the <xref:System.Diagnostics.Process.WaitForExit> overload.</span></span> <span data-ttu-id="67157-1688">반환 하는 경우에 0 (영) 메서드에 전달 합니다 `true` 프로세스가 이미 종료 되어; 경우에이 고, 그렇지 즉시 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1688">If you pass 0 (zero) to the method, it returns `true` only if the process has already exited; otherwise, it immediately returns `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67157-1689">에 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 및 이전 버전 경우 `milliseconds` 가-1를 <xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29> 오버 로드에 대 한 대기 <xref:System.Int32.MaxValue> 밀리초 (약 24 일), not 무기한 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1689">In the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] and earlier versions, if `milliseconds` was -1, the <xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29> overload waited for <xref:System.Int32.MaxValue> milliseconds (approximately 24 days), not indefinitely.</span></span>  
  
 <span data-ttu-id="67157-1690">비동기 이벤트 처리기에 표준 출력이 리디렉션 되었는지 경우에 출력 처리 완료 되지 않을이 메서드가 반환 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1690">When standard output has been redirected to asynchronous event handlers, it is possible that output processing will not have completed when this method returns.</span></span> <span data-ttu-id="67157-1691">비동기 이벤트 처리 완료 되었다는 것을 보장 하려면 호출을 <xref:System.Diagnostics.Process.WaitForExit> 받으면는 매개 변수가 없는 오버 로드는 `true` 이 오버 로드에서.</span><span class="sxs-lookup"><span data-stu-id="67157-1691">To ensure that asynchronous event handling has been completed, call the <xref:System.Diagnostics.Process.WaitForExit> overload that takes no parameter after receiving a `true` from this overload.</span></span> <span data-ttu-id="67157-1692">되도록 하려면 합니다 <xref:System.Diagnostics.Process.Exited> 설정, Windows Forms 응용 프로그램에서 이벤트가 올바르게 처리는 <xref:System.Diagnostics.Process.SynchronizingObject%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1692">To help ensure that the <xref:System.Diagnostics.Process.Exited> event is handled correctly in Windows Forms applications, set the <xref:System.Diagnostics.Process.SynchronizingObject%2A> property.</span></span>  
  
 <span data-ttu-id="67157-1693">연결된 된 프로세스가 종료 되는 경우 (종료 된 정상 또는 비정상 종료를 통해 운영 체제에서) 프로세스에 대 한 관리 정보를 저장 하 고 호출한는 구성 요소를 반환 하는 시스템 <xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29>입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1693">When an associated process exits (is shut down by the operating system through a normal or abnormal termination), the system stores administrative information about the process and returns to the component that had called <xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29>.</span></span> <span data-ttu-id="67157-1694"><xref:System.Diagnostics.Process> 구성 요소 정보를 포함 하는 액세스할 수는 <xref:System.Diagnostics.Process.ExitTime%2A>를 사용 하 여는 <xref:System.Diagnostics.Process.Handle%2A> 종료 된 프로세스에.</span><span class="sxs-lookup"><span data-stu-id="67157-1694">The <xref:System.Diagnostics.Process> component can then access the information, which includes the <xref:System.Diagnostics.Process.ExitTime%2A>, by using the <xref:System.Diagnostics.Process.Handle%2A> to the exited process.</span></span>  
  
 <span data-ttu-id="67157-1695">연결된 된 프로세스가 종료 되었으므로 <xref:System.Diagnostics.Process.Handle%2A> 구성 요소의 속성은 더 이상 기존 프로세스 리소스를 가리킵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1695">Because the associated process has exited, the <xref:System.Diagnostics.Process.Handle%2A> property of the component no longer points to an existing process resource.</span></span> <span data-ttu-id="67157-1696">대신, 핸들 프로세스 리소스에 대 한 운영 체제의 정보를 액세스할 때만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1696">Instead, the handle can be used only to access the operating system's information about the process resource.</span></span> <span data-ttu-id="67157-1697">시스템에 의해 릴리스되지 않았거나 종료 된 프로세스에 대 한 핸들 인지 <xref:System.Diagnostics.Process> 구성 요소를 유지할 수 있도록를 <xref:System.Diagnostics.Process.ExitTime%2A> 및 <xref:System.Diagnostics.Process.Handle%2A> 까지 메모리에 대 한 정보를 <xref:System.Diagnostics.Process> 구성 요소에는 특히 한 리소스를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1697">The system is aware of handles to exited processes that have not been released by <xref:System.Diagnostics.Process> components, so it keeps the <xref:System.Diagnostics.Process.ExitTime%2A> and <xref:System.Diagnostics.Process.Handle%2A> information in memory until the <xref:System.Diagnostics.Process> component specifically frees the resources.</span></span> <span data-ttu-id="67157-1698">이러한 이유로 언제 든 지 호출할 <xref:System.Diagnostics.Process.Start%2A> 에 대 한는 <xref:System.Diagnostics.Process> 인스턴스를 호출 <xref:System.Diagnostics.Process.Close%2A> 연결 된 프로세스가 종료 시점과 모든 관리 정보가 더 이상 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1698">For this reason, any time you call <xref:System.Diagnostics.Process.Start%2A> for a <xref:System.Diagnostics.Process> instance, call <xref:System.Diagnostics.Process.Close%2A> when the associated process has terminated and you no longer need any administrative information about it.</span></span> <span data-ttu-id="67157-1699"><xref:System.Diagnostics.Process.Close%2A> 종료 된 프로세스에 할당 된 메모리를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1699"><xref:System.Diagnostics.Process.Close%2A> frees the memory allocated to the exited process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-1700">에 대 한 코드 예제를 참조 합니다 <xref:System.Diagnostics.Process.ExitCode%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1700">See the code example for the <xref:System.Diagnostics.Process.ExitCode%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="67157-1701">대기 설정에 액세스할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1701">The wait setting could not be accessed.</span></span></exception>
        <exception cref="T:System.SystemException"><span data-ttu-id="67157-1702">프로세스 <see cref="P:System.Diagnostics.Process.Id" />가 설정되지 않았고 <see cref="P:System.Diagnostics.Process.Handle" /> 속성을 확인할 수 있는 <see cref="P:System.Diagnostics.Process.Id" />이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1702">No process <see cref="P:System.Diagnostics.Process.Id" /> has been set, and a <see cref="P:System.Diagnostics.Process.Handle" /> from which the <see cref="P:System.Diagnostics.Process.Id" /> property can be determined does not exist.</span></span>  
  
<span data-ttu-id="67157-1703">또는</span><span class="sxs-lookup"><span data-stu-id="67157-1703">-or-</span></span> 
<span data-ttu-id="67157-1704">이 <see cref="T:System.Diagnostics.Process" /> 개체에 연결된 프로세스가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1704">There is no process associated with this <see cref="T:System.Diagnostics.Process" /> object.</span></span>  
  
<span data-ttu-id="67157-1705">또는</span><span class="sxs-lookup"><span data-stu-id="67157-1705">-or-</span></span> 
<span data-ttu-id="67157-1706">원격 컴퓨터에서 실행 중인 프로세스의 <see cref="M:System.Diagnostics.Process.WaitForExit(System.Int32)" />에 대해 호출을 시도했지만</span><span class="sxs-lookup"><span data-stu-id="67157-1706">You are attempting to call <see cref="M:System.Diagnostics.Process.WaitForExit(System.Int32)" /> for a process that is running on a remote computer.</span></span> <span data-ttu-id="67157-1707">로컬 컴퓨터에서 실행 중인 프로세스에 대해서만 이 메서드를 사용할 수 있는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1707">This method is available only for processes that are running on the local computer.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="67157-1708"><paramref name="milliseconds" />이 무기한 시간 제한을 나타내는 -1 이외의 음수인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1708"><paramref name="milliseconds" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1709">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1709">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1710">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1710">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
        <altmember cref="P:System.Diagnostics.Process.Handle" />
        <altmember cref="P:System.Diagnostics.Process.ExitTime" />
        <altmember cref="P:System.Diagnostics.Process.EnableRaisingEvents" />
        <altmember cref="P:System.Diagnostics.Process.HasExited" />
        <altmember cref="E:System.Diagnostics.Process.Exited" />
        <altmember cref="P:System.Diagnostics.Process.SynchronizingObject" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitForInputIdle">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="67157-1711">연결된 프로세스가 유휴 상태가 될 때까지 <see cref="T:System.Diagnostics.Process" /> 구성 요소를 대기하게 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1711">Causes the <see cref="T:System.Diagnostics.Process" /> component to wait for the associated process to enter an idle state.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitForInputIdle">
      <MemberSignature Language="C#" Value="public bool WaitForInputIdle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool WaitForInputIdle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.WaitForInputIdle" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForInputIdle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForInputIdle();" />
      <MemberSignature Language="F#" Value="member this.WaitForInputIdle : unit -&gt; bool" Usage="process.WaitForInputIdle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="67157-1712">연결된 프로세스가 유휴 상태가 될 때까지 <see cref="T:System.Diagnostics.Process" /> 구성 요소를 무기한 대기하게 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1712">Causes the <see cref="T:System.Diagnostics.Process" /> component to wait indefinitely for the associated process to enter an idle state.</span></span> <span data-ttu-id="67157-1713">이 오버로드는 사용자 인터페이스가 있는, 즉 메시지 루프가 있는 프로세스에만 적용됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1713">This overload applies only to processes with a user interface and, therefore, a message loop.</span></span></summary>
        <returns><span data-ttu-id="67157-1714">연결된 프로세스가 유휴 상태가 된 경우 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1714"><see langword="true" /> if the associated process has reached an idle state.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-1715">사용 하 여 <xref:System.Diagnostics.Process.WaitForInputIdle> 강제로 유휴 상태로 메시지 루프에 반환 될 때까지 대기 하는 응용 프로그램의 처리를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1715">Use <xref:System.Diagnostics.Process.WaitForInputIdle> to force the processing of your application to wait until the message loop has returned to the idle state.</span></span> <span data-ttu-id="67157-1716">사용자 인터페이스를 사용 하 여 프로세스를 실행할 때 해당 메시지 루프 프로세스에 운영 체제에서 Windows 메시지를 보낼 때마다 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1716">When a process with a user interface is executing, its message loop executes every time a Windows message is sent to the process by the operating system.</span></span> <span data-ttu-id="67157-1717">메시지 루프 프로세스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1717">The process then returns to the message loop.</span></span> <span data-ttu-id="67157-1718">메시지 루프 내에서 메시지를 대기 하는 경우 유휴 상태에 있어야 하는 프로세스 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1718">A process is said to be in an idle state when it is waiting for messages inside of a message loop.</span></span> <span data-ttu-id="67157-1719">이 상태는 응용 프로그램이 해당 창을 사용 하 여 응용 프로그램 통신 하려면 먼저 해당 주 창 만들기를 완료 하려면 프로세스를 시작 하는 대기 해야 하는 경우 예를 들어 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1719">This state is useful, for example, when your application needs to wait for a starting process to finish creating its main window before the application communicates with that window.</span></span>  
  
 <span data-ttu-id="67157-1720">프로세스에 메시지 루프에 없으면 <xref:System.Diagnostics.Process.WaitForInputIdle> throw는 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1720">If a process does not have a message loop, <xref:System.Diagnostics.Process.WaitForInputIdle> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="67157-1721"><xref:System.Diagnostics.Process.WaitForInputIdle> 오버 로드는 <xref:System.Diagnostics.Process> 구성 요소를 메시지 루프의 유휴 상태가 되 면 프로세스에 대 한 무기한 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1721">The <xref:System.Diagnostics.Process.WaitForInputIdle> overload instructs the <xref:System.Diagnostics.Process> component to wait indefinitely for the process to become idle in the message loop.</span></span> <span data-ttu-id="67157-1722">이 명령은 응용 프로그램 작동이 중지 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1722">This instruction can cause an application to stop responding.</span></span> <span data-ttu-id="67157-1723">예를 들어, 프로세스를 항상 작성 되는 경우 해당 메시지 루프 종료 즉시 코드 조각 에서처럼 `while(true)`합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1723">For example, if the process is written to always exit its message loop immediately, as in the code fragment `while(true)`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-1724">프로세스에 그래픽 인터페이스가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1724">The process does not have a graphical interface.</span></span>  
  
<span data-ttu-id="67157-1725">또는</span><span class="sxs-lookup"><span data-stu-id="67157-1725">-or-</span></span> 
<span data-ttu-id="67157-1726">알 수 없는 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1726">An unknown error occurred.</span></span> <span data-ttu-id="67157-1727">프로세스가 유휴 상태로 전환되지 못한 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1727">The process failed to enter an idle state.</span></span>  
  
<span data-ttu-id="67157-1728">또는</span><span class="sxs-lookup"><span data-stu-id="67157-1728">-or-</span></span> 
<span data-ttu-id="67157-1729">프로세스가 이미 종료된 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1729">The process has already exited.</span></span>  
  
<span data-ttu-id="67157-1730">또는</span><span class="sxs-lookup"><span data-stu-id="67157-1730">-or-</span></span> 
<span data-ttu-id="67157-1731">이 <see cref="T:System.Diagnostics.Process" /> 개체에 연결된 프로세스가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1731">No process is associated with this <see cref="T:System.Diagnostics.Process" /> object.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1732">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1732">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1733">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1733">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.Diagnostics.Process.Start" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
      </Docs>
    </Member>
    <Member MemberName="WaitForInputIdle">
      <MemberSignature Language="C#" Value="public bool WaitForInputIdle (int milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool WaitForInputIdle(int32 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForInputIdle (milliseconds As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForInputIdle(int milliseconds);" />
      <MemberSignature Language="F#" Value="member this.WaitForInputIdle : int -&gt; bool" Usage="process.WaitForInputIdle milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="milliseconds"><span data-ttu-id="67157-1734"><see cref="F:System.Int32.MaxValue" />에 대한 값 1은 연결된 프로세스가 유휴 상태가 될 때까지 대기하는 시간(밀리초)입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1734">A value of 1 to <see cref="F:System.Int32.MaxValue" /> that specifies the amount of time, in milliseconds, to wait for the associated process to become idle.</span></span> <span data-ttu-id="67157-1735">값이 0이면 즉시 반환이 이루어지고, 값이 -1이면 무기한 대기하게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1735">A value of 0 specifies an immediate return, and a value of -1 specifies an infinite wait.</span></span></param>
        <summary><span data-ttu-id="67157-1736">연결된 프로세스가 유휴 상태가 될 때까지 <see cref="T:System.Diagnostics.Process" /> 구성 요소를 지정한 시간(밀리초) 동안 대기하게 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1736">Causes the <see cref="T:System.Diagnostics.Process" /> component to wait the specified number of milliseconds for the associated process to enter an idle state.</span></span> <span data-ttu-id="67157-1737">이 오버로드는 사용자 인터페이스가 있는, 즉 메시지 루프가 있는 프로세스에만 적용됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1737">This overload applies only to processes with a user interface and, therefore, a message loop.</span></span></summary>
        <returns><span data-ttu-id="67157-1738">연결된 프로세스가 유휴 상태가 된 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1738"><see langword="true" /> if the associated process has reached an idle state; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-1739">사용 하 여 <xref:System.Diagnostics.Process.WaitForInputIdle%28System.Int32%29> 강제로 유휴 상태로 메시지 루프에 반환 될 때까지 대기 하는 응용 프로그램의 처리를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1739">Use <xref:System.Diagnostics.Process.WaitForInputIdle%28System.Int32%29> to force the processing of your application to wait until the message loop has returned to the idle state.</span></span> <span data-ttu-id="67157-1740">사용자 인터페이스를 사용 하 여 프로세스를 실행할 때 해당 메시지 루프 프로세스에 운영 체제에서 Windows 메시지를 보낼 때마다 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1740">When a process with a user interface is executing, its message loop executes every time a Windows message is sent to the process by the operating system.</span></span> <span data-ttu-id="67157-1741">메시지 루프 프로세스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1741">The process then returns to the message loop.</span></span> <span data-ttu-id="67157-1742">메시지 루프 내에서 메시지를 대기 하는 경우 유휴 상태에 있어야 하는 프로세스 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1742">A process is said to be in an idle state when it is waiting for messages inside of a message loop.</span></span> <span data-ttu-id="67157-1743">이 상태는 응용 프로그램이 해당 창을 사용 하 여 응용 프로그램 통신 하려면 먼저 해당 주 창 만들기를 완료 하려면 프로세스를 시작 하는 대기 해야 하는 경우 예를 들어 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1743">This state is useful, for example, when your application needs to wait for a starting process to finish creating its main window before the application communicates with that window.</span></span>  
  
 <span data-ttu-id="67157-1744">프로세스에 메시지 루프에 없으면 <xref:System.Diagnostics.Process.WaitForInputIdle%28System.Int32%29> throw는 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1744">If a process does not have a message loop, <xref:System.Diagnostics.Process.WaitForInputIdle%28System.Int32%29> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="67157-1745"><xref:System.Diagnostics.Process.WaitForInputIdle%28System.Int32%29> 오버 로드는 <xref:System.Diagnostics.Process> 구성 요소를 메시지 루프의 유휴 상태가 되 면 프로세스에 대 한 한정 된 기간을 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1745">The <xref:System.Diagnostics.Process.WaitForInputIdle%28System.Int32%29> overload instructs the <xref:System.Diagnostics.Process> component to wait a finite amount of time for the process to become idle in the message loop.</span></span> <span data-ttu-id="67157-1746">연결된 된 프로세스에 워크플로가 유효 상태가 되지 간격의 끝에서 루프 계속 메시지를 처리 하므로 경우 `false` 호출 하는 프로시저로 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1746">If the associated process has not become idle by the end of the interval because the loop is still processing messages, `false` is returned to the calling procedure.</span></span>  
  
 <span data-ttu-id="67157-1747">이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="67157-1747">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="67157-1748">프로세스에 그래픽 인터페이스가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1748">The process does not have a graphical interface.</span></span>  
  
<span data-ttu-id="67157-1749">또는</span><span class="sxs-lookup"><span data-stu-id="67157-1749">-or-</span></span> 
<span data-ttu-id="67157-1750">알 수 없는 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1750">An unknown error occurred.</span></span> <span data-ttu-id="67157-1751">프로세스가 유휴 상태로 전환되지 못한 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1751">The process failed to enter an idle state.</span></span>  
  
<span data-ttu-id="67157-1752">또는</span><span class="sxs-lookup"><span data-stu-id="67157-1752">-or-</span></span> 
<span data-ttu-id="67157-1753">프로세스가 이미 종료된 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1753">The process has already exited.</span></span>  
  
<span data-ttu-id="67157-1754">또는</span><span class="sxs-lookup"><span data-stu-id="67157-1754">-or-</span></span> 
<span data-ttu-id="67157-1755">이 <see cref="T:System.Diagnostics.Process" /> 개체에 연결된 프로세스가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1755">No process is associated with this <see cref="T:System.Diagnostics.Process" /> object.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1756">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1756">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1757">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1757">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.Diagnostics.Process.Start" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
      </Docs>
    </Member>
    <Member MemberName="WorkingSet">
      <MemberSignature Language="C#" Value="public int WorkingSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WorkingSet" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.WorkingSet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WorkingSet As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WorkingSet { int get(); };" />
      <MemberSignature Language="F#" Value="member this.WorkingSet : int" Usage="System.Diagnostics.Process.WorkingSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of physical memory currently used for this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use WorkingSet64")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.WorkingSet64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessWorkingSet")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0">
          <AttributeName>System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.WorkingSet64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-1758">연결된 프로세스의 실제 메모리 사용량(바이트)을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1758">Gets the associated process's physical memory usage, in bytes.</span></span></summary>
        <value><span data-ttu-id="67157-1759">연결된 프로세스에서 사용 중인 실제 메모리의 총 크기(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1759">The total amount of physical memory the associated process is using, in bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-1760">이 속성에 의해 반환 되는 값 집합 메모리 (바이트)에서 프로세스에서 사용 하는 작업의 현재 크기를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1760">The value returned by this property represents the current size of working set memory used by the process, in bytes.</span></span> <span data-ttu-id="67157-1761">프로세스의 작업 집합은 실제 RAM 메모리의 프로세스에 현재 표시 된 메모리 페이지의 집합.</span><span class="sxs-lookup"><span data-stu-id="67157-1761">The working set of a process is the set of memory pages currently visible to the process in physical RAM memory.</span></span> <span data-ttu-id="67157-1762">이러한 페이지는 상주 하며 페이지 오류를 일으키지 않고 응용 프로그램에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1762">These pages are resident and available for an application to use without triggering a page fault.</span></span>  
  
 <span data-ttu-id="67157-1763">작업 집합에는 공유 및 개인 데이터가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1763">The working set includes both shared and private data.</span></span> <span data-ttu-id="67157-1764">공유 데이터 처리 모듈 및 시스템 라이브러리를 포함 하 여 프로세스 실행 한 모든 지침이 포함 된 페이지를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1764">The shared data includes the pages that contain all the instructions that the process executes, including the process modules and the system libraries.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-1765">다음 예제에서는 메모장의 인스턴스를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1765">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="67157-1766">그런 다음 예제에서는 검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1766">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="67157-1767">이 예제에서는 프로세스가 종료 하는 경우를 검색 합니다. 프로세스의 종료 코드를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1767">The example detects when the process exits, and displays the process' exit code.</span></span>  
  
 [!code-cpp[process_sample#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_sample/CPP/process_sample.cpp#1)]
 [!code-csharp[process_sample#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_sample/CS/process_sample.cs#1)]
 [!code-vb[process_sample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_sample/VB/process_sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-1768">플랫폼이 이 속성을 지원하지 않는 Windows 98 또는 Windows Millennium Edition(Windows Me)인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1768">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1769">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1769">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1770">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1770">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.MinWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.MaxWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.PeakWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.PeakWorkingSet64" />
        <altmember cref="P:System.Diagnostics.Process.WorkingSet64" />
      </Docs>
    </Member>
    <Member MemberName="WorkingSet64">
      <MemberSignature Language="C#" Value="public long WorkingSet64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 WorkingSet64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.WorkingSet64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WorkingSet64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long WorkingSet64 { long get(); };" />
      <MemberSignature Language="F#" Value="member this.WorkingSet64 : int64" Usage="System.Diagnostics.Process.WorkingSet64" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of physical memory currently used for this process.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ProcessWorkingSet")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="67157-1771">연결된 프로세스에 할당된 실제 메모리의 양(바이트)을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1771">Gets the amount of physical memory, in bytes, allocated for the associated process.</span></span></summary>
        <value><span data-ttu-id="67157-1772">연결된 프로세스에 할당된 실제 메모리의 양(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1772">The amount of physical memory, in bytes, allocated for the associated process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67157-1773">이 속성에 의해 반환 되는 값 집합 메모리 (바이트)에서 프로세스에서 사용 하는 작업의 현재 크기를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1773">The value returned by this property represents the current size of working set memory used by the process, in bytes.</span></span> <span data-ttu-id="67157-1774">프로세스의 작업 집합은 실제 RAM 메모리의 프로세스에 현재 표시 된 메모리 페이지의 집합.</span><span class="sxs-lookup"><span data-stu-id="67157-1774">The working set of a process is the set of memory pages currently visible to the process in physical RAM memory.</span></span> <span data-ttu-id="67157-1775">이러한 페이지는 상주 하며 페이지 오류를 일으키지 않고 응용 프로그램에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1775">These pages are resident and available for an application to use without triggering a page fault.</span></span>  
  
 <span data-ttu-id="67157-1776">작업 집합에는 공유 및 개인 데이터가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1776">The working set includes both shared and private data.</span></span> <span data-ttu-id="67157-1777">공유 데이터 프로세스 모듈 및 시스템 라이브러리의 명령을 포함 하 여 프로세스에서 실행 하는 모든 명령이 포함 된 페이지를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1777">The shared data includes the pages that contain all the instructions that the process executes, including instructions in the process modules and the system libraries.</span></span>  
  
 <span data-ttu-id="67157-1778">32 비트 프로세서 또는 64 비트 프로세서를 사용 하 여 컴퓨터에서 메모리 사용량을 모니터링 하려면이 속성을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1778">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="67157-1779">속성 값이 해당 하는 **Working Set** 프로세스에 대 한 성능 카운터입니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1779">The property value is equivalent to the **Working Set** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67157-1780">다음 코드 예제에서는 메모장 응용 프로그램의 인스턴스를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1780">The following code example starts an instance of the Notepad application.</span></span> <span data-ttu-id="67157-1781">그런 다음 예제에서는 검색 하 고 연결된 된 프로세스의 다양 한 속성이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1781">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="67157-1782">이 예제에서는 프로세스가 종료 하는 경우를 검색 합니다. 종료 코드 및 최대 메모리 통계를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1782">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="67157-1783">플랫폼이 이 속성을 지원하지 않는 Windows 98 또는 Windows Millennium Edition(Windows Me)인 경우</span><span class="sxs-lookup"><span data-stu-id="67157-1783">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="67157-1784">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1784">for full trust for the immediate caller.</span></span> <span data-ttu-id="67157-1785">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="67157-1785">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="P:System.Diagnostics.Process.MinWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.MaxWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.PeakWorkingSet64" />
      </Docs>
    </Member>
  </Members>
</Type>