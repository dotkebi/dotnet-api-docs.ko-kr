<Type Name="ProcessThread" FullName="System.Diagnostics.ProcessThread">
  <Metadata><Meta Name="ms.openlocfilehash" Value="035bb483e7f4700eea14b2b39e00ff7f6172ea58" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58691849" /></Metadata><TypeSignature Language="C#" Value="public class ProcessThread : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ProcessThread extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.ProcessThread" />
  <TypeSignature Language="VB.NET" Value="Public Class ProcessThread&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProcessThread : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type ProcessThread = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Process</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Diagnostics.Design.ProcessThreadDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Designer("System.Diagnostics.Design.ProcessThreadDesigner, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Diagnostics.Design.ProcessThreadDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.ComponentModel.Designer("System.Diagnostics.Design.ProcessThreadDesigner, System.Design, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="4fa0b-101">운영 체제 프로세스 스레드를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-101">Represents an operating system process thread.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fa0b-102">사용 하 여 <xref:System.Diagnostics.ProcessThread> 시스템에서 현재 실행 중인 스레드에 대 한 정보를 얻을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-102">Use <xref:System.Diagnostics.ProcessThread> to obtain information about a thread that is currently running on the system.</span></span> <span data-ttu-id="4fa0b-103">이렇게 하면 예를 들어, 스레드의 성능을 모니터링할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-103">Doing so allows you, for example, to monitor the thread's performance characteristics.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4fa0b-104">이 형식이 구현 하는 <xref:System.IDisposable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-104">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="4fa0b-105">형식을 사용 하 여 마쳤으면 직접 또는 간접적으로의 삭제 해야 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-105">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="4fa0b-106">직접 형식의 dispose 호출 해당 <xref:System.IDisposable.Dispose%2A> 의 메서드를 `try` / `catch` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-106">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="4fa0b-107">삭제 하지 직접, 언어 구문 같은 사용 `using` (C#에서) 또는 `Using` (Visual Basic에서는).</span><span class="sxs-lookup"><span data-stu-id="4fa0b-107">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="4fa0b-108">자세한 내용은 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하세요.를 <xref:System.IDisposable> 인터페이스 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-108">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="4fa0b-109">스레드는 프로그램을 통해 실행 경로입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-109">A thread is a path of execution through a program.</span></span> <span data-ttu-id="4fa0b-110">Win32 예약 된 실행의 최소 단위 이며</span><span class="sxs-lookup"><span data-stu-id="4fa0b-110">It is the smallest unit of execution that Win32 schedules.</span></span> <span data-ttu-id="4fa0b-111">CPU 레지스터 및 시스템 스케줄러가 실행 목록에서 항목의 상태는 스택의 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-111">It consists of a stack, the state of the CPU registers, and an entry in the execution list of the system scheduler.</span></span>  
  
 <span data-ttu-id="4fa0b-112">하나 이상의 스레드가 코드, 데이터 및 메모리에 있는 프로그램의 다른 리소스의 프로세스 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-112">A process consists of one or more threads and the code, data, and other resources of a program in memory.</span></span> <span data-ttu-id="4fa0b-113">일반적인 프로그램 리소스는 열려 있는 파일, 세마포 및 동적으로 할당 된 메모리입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-113">Typical program resources are open files, semaphores, and dynamically allocated memory.</span></span> <span data-ttu-id="4fa0b-114">프로세스의 각 리소스는 모든 프로세스의 스레드에 의해 공유 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-114">Each resource of a process is shared by all that process's threads.</span></span>  
  
 <span data-ttu-id="4fa0b-115">시스템 스케줄러가 프로그램의 스레드 중 하나에 실행 제어를 제공 하면 프로그램이 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-115">A program executes when the system scheduler gives execution control to one of the program's threads.</span></span> <span data-ttu-id="4fa0b-116">스케줄러 스레드를 실행할지 결정 한 경우.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-116">The scheduler determines which threads should run and when.</span></span> <span data-ttu-id="4fa0b-117">우선 순위가 낮은 스레드 우선 순위가 높은 스레드는 태스크를 완료 하는 동안 잠시 기다려 해야 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-117">A lower-priority thread might be forced to wait while higher-priority threads complete their tasks.</span></span> <span data-ttu-id="4fa0b-118">다중 프로세서 컴퓨터에서는 스케줄러 이동할 수 개별 스레드가 서로 다른 프로세서를 따라서 CPU 부하를 분산 합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-118">On multiprocessor computers, the scheduler can move individual threads to different processors, thus balancing the CPU load.</span></span>  
  
 <span data-ttu-id="4fa0b-119">기본 스레드에서 이라고 하는 단일 스레드를 사용 하 여 각 프로세스가 시작 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-119">Each process starts with a single thread, which is known as the primary thread.</span></span> <span data-ttu-id="4fa0b-120">모든 스레드는 추가 스레드를 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-120">Any thread can create additional threads.</span></span> <span data-ttu-id="4fa0b-121">프로세스 내에서 모든 스레드는 해당 프로세스의 주소 공간을 공유합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-121">All the threads within a process share the address space of that process.</span></span>  
  
 <span data-ttu-id="4fa0b-122">기본 스레드에서 컬렉션의 첫 번째 인덱스에 반드시 있는 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-122">The primary thread is not necessarily located at the first index in the collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4fa0b-123">.NET Framework 버전 2.0부터 다른 컴퓨터에서 성능 카운터 데이터를 참조 하는 기능 대부분의.NET Framework 메서드 및 속성에 대 한 제거 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-123">Starting with the .NET Framework version 2.0, the ability to reference performance counter data on other computers has been eliminated for many of the .NET Framework methods and properties.</span></span> <span data-ttu-id="4fa0b-124">이 변경 된 성능 향상을 위해 관리자가 아닌 데를 사용 하도록 설정 하는 <xref:System.Diagnostics.ProcessThread> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-124">This change was made to improve performance and to enable non-administrators to use the <xref:System.Diagnostics.ProcessThread> class.</span></span> <span data-ttu-id="4fa0b-125">결과적으로, 이전 버전의.NET Framework에서 예외를 발생 하지 않는 일부 응용 프로그램 이제 발생할 수는 <xref:System.NotSupportedException>합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-125">As a result, some applications that did not get exceptions in earlier versions of the .NET Framework may now get a <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="4fa0b-126">메서드 및 영향을 받는 속성이 너무 많아서를 나열할 수 있지만 영향을 받는 멤버 항목으로 예외 정보가 추가 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-126">The methods and properties affected are too numerous to list here, but the exception information has been added to the affected member topics.</span></span>  
  
 <span data-ttu-id="4fa0b-127">프로세스의 스레드가 개별적으로 실행 하 고 수 있도록 서로 게 표시 하지 않는 한 서로 인식 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-127">The threads of a process execute individually and are unaware of each other unless you make them visible to each other.</span></span> <span data-ttu-id="4fa0b-128">그러나 공용 리소스를 공유 하는 스레드가 세마포 또는 프로세스 간 통신의 다른 메서드를 사용 하 여 작업을 조정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-128">Threads that share common resources, however, must coordinate their work by using semaphores or another method of interprocess communication.</span></span>  
  
 <span data-ttu-id="4fa0b-129">모든 컬렉션을 가져오려면를 <xref:System.Diagnostics.ProcessThread> 현재 프로세스와 연결 된 개체를 가져옵니다는 <xref:System.Diagnostics.Process.Threads%2A> 의 속성을 <xref:System.Diagnostics.Process> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-129">To get a collection of all the <xref:System.Diagnostics.ProcessThread> objects associated with the current process, get the <xref:System.Diagnostics.Process.Threads%2A> property of the <xref:System.Diagnostics.Process> instance.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.Process" />
    <altmember cref="P:System.Diagnostics.Process.Threads" />
  </Docs>
  <Members>
    <Member MemberName="BasePriority">
      <MemberSignature Language="C#" Value="public int BasePriority { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BasePriority" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.BasePriority" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BasePriority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BasePriority { int get(); };" />
      <MemberSignature Language="F#" Value="member this.BasePriority : int" Usage="System.Diagnostics.ProcessThread.BasePriority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The base priority of this thread.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadBasePriority")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4fa0b-130">스레드의 기본 우선 순위를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-130">Gets the base priority of the thread.</span></span></summary>
        <value><span data-ttu-id="4fa0b-131">프로세스 우선 순위 클래스와 관련 스레드의 우선 순위 수준을 결합하여 계산되는 스레드의 기본 우선 순위입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-131">The base priority of the thread, which the operating system computes by combining the process priority class with the priority level of the associated thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fa0b-132"><xref:System.Diagnostics.ProcessThread.BasePriority%2A> 시작 프로세스 스레드의 우선 순위입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-132">The <xref:System.Diagnostics.ProcessThread.BasePriority%2A> is the starting priority for the process thread.</span></span> <span data-ttu-id="4fa0b-133">시스템 모니터의 기본 우선 순위 카운터를 통해 기본 우선 순위에 대 한 정보를 볼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-133">You can view information about the base priority through the System Monitor's Priority Base counter.</span></span>  
  
 <span data-ttu-id="4fa0b-134">운영 체제 프로세스의 우선 순위 클래스를 사용 하 여 스레드의 우선 순위 수준 범위를 결합 하 여 스레드의 기본 우선 순위를 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-134">The operating system computes a thread's base priority by combining the thread's priority level range with the process's priority class.</span></span> <span data-ttu-id="4fa0b-135">프로세스를 설정할 수 있습니다 <xref:System.Diagnostics.Process.PriorityClass%2A?displayProperty=nameWithType> 속성의 값 중 하나에 <xref:System.Diagnostics.ProcessPriorityClass> 열거형 <xref:System.Diagnostics.ProcessPriorityClass.Idle>, <xref:System.Diagnostics.ProcessPriorityClass.Normal>, <xref:System.Diagnostics.ProcessPriorityClass.High>를 <xref:System.Diagnostics.ProcessPriorityClass.AboveNormal>, <xref:System.Diagnostics.ProcessPriorityClass.BelowNormal>, 또는 <xref:System.Diagnostics.ProcessPriorityClass.RealTime>합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-135">You can set the process's <xref:System.Diagnostics.Process.PriorityClass%2A?displayProperty=nameWithType> property to one of the values in the <xref:System.Diagnostics.ProcessPriorityClass> enumeration, which are <xref:System.Diagnostics.ProcessPriorityClass.Idle>, <xref:System.Diagnostics.ProcessPriorityClass.Normal>, <xref:System.Diagnostics.ProcessPriorityClass.High>, <xref:System.Diagnostics.ProcessPriorityClass.AboveNormal>, <xref:System.Diagnostics.ProcessPriorityClass.BelowNormal>, or <xref:System.Diagnostics.ProcessPriorityClass.RealTime>.</span></span> <span data-ttu-id="4fa0b-136">스레드를 설정할 수 있습니다 <xref:System.Diagnostics.ProcessThread.PriorityLevel%2A> 스레드의 기본 우선 순위를 제한 하는 값의 범위는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-136">You can set the thread's <xref:System.Diagnostics.ProcessThread.PriorityLevel%2A> property to a range of values that bounds the thread's base priority.</span></span> <span data-ttu-id="4fa0b-137">Win32는 클래스 별로 7 기본 우선 순위 수준을 사용 하 여 네 가지 우선 순위 클래스를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-137">Win32 uses four priority classes with seven base priority levels per class.</span></span>  
  
 <span data-ttu-id="4fa0b-138">스레드의 현재 우선 순위는 기본 우선 순위에서 벗어날 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-138">The thread's current priority might deviate from the base priority.</span></span> <span data-ttu-id="4fa0b-139">예를 들어, 운영 체제 변경할 수는 <xref:System.Diagnostics.ProcessThread.CurrentPriority%2A> 경과 된 시간을 기준으로 하는 속성 또는 다른 상승이 때 프로세스를 설정 해야 다른 미리 액세스에 대 한 프로세서에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-139">For example, the operating system can change the <xref:System.Diagnostics.ProcessThread.CurrentPriority%2A> property based on the time elapsed or other boosts when a process must be put ahead of others for access to the processor.</span></span> <span data-ttu-id="4fa0b-140">또한 설정할 수 있습니다는 <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> 는 시스템 프로세스는 대기 상태에서 수행 될 때마다 스레드의 우선 순위를 일시적으로 향상 시킬 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-140">In addition, you can set the <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> property to cause the system to temporarily boost the priority of a thread whenever the process is taken out of the wait state.</span></span> <span data-ttu-id="4fa0b-141">프로세스가 대기 상태를 반환할 때 우선 순위를 다시 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-141">The priority is reset when the process returns to the wait state.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.ProcessThread.PriorityBoostEnabled" />
        <altmember cref="T:System.Diagnostics.ProcessPriorityClass" />
        <altmember cref="P:System.Diagnostics.Process.PriorityClass" />
        <altmember cref="P:System.Diagnostics.ProcessThread.CurrentPriority" />
      </Docs>
    </Member>
    <Member MemberName="CurrentPriority">
      <MemberSignature Language="C#" Value="public int CurrentPriority { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentPriority" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.CurrentPriority" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentPriority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentPriority { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentPriority : int" Usage="System.Diagnostics.ProcessThread.CurrentPriority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The current priority of this thread.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadCurrentPriority")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4fa0b-142">스레드의 현재 우선 순위를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-142">Gets the current priority of the thread.</span></span></summary>
        <value><span data-ttu-id="4fa0b-143">운영 체제에서 스레드를 예약하는 방법에 따라 기본 우선 순위에서 벗어날 수도 있는 스레드의 현재 우선 순위입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-143">The current priority of the thread, which may deviate from the base priority based on how the operating system is scheduling the thread.</span></span> <span data-ttu-id="4fa0b-144">활성 스레드의 경우 우선 순위가 일시적으로 높아질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-144">The priority may be temporarily boosted for an active thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fa0b-145">스레드의 현재 우선 순위는 기본 우선 순위에서 벗어날 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-145">The thread's current priority might deviate from the base priority.</span></span> <span data-ttu-id="4fa0b-146">예를 들어, 운영 체제 변경할 수는 <xref:System.Diagnostics.ProcessThread.CurrentPriority%2A> 경과 된 시간을 기준으로 하는 속성 또는 다른 상승이 경우 프로세스를 설정 해야 다른 미리 액세스에 대 한 프로세서에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-146">For example, the operating system can change the <xref:System.Diagnostics.ProcessThread.CurrentPriority%2A> property based on the time elapsed, or other boosts, when a process must be put ahead of others for access to the processor.</span></span> <span data-ttu-id="4fa0b-147">또한 설정할 수 있습니다는 <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> 는 시스템 프로세스는 대기 상태에서 수행 될 때마다 스레드의 우선 순위를 일시적으로 향상 시킬 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-147">In addition, you can set the <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> property to cause the system to temporarily boost the priority of a thread whenever the process is taken out of the wait state.</span></span> <span data-ttu-id="4fa0b-148">프로세스가 대기 상태를 반환할 때 우선 순위를 다시 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-148">The priority is reset when the process returns to the wait state.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.ProcessThread.BasePriority" />
        <altmember cref="P:System.Diagnostics.ProcessThread.PriorityBoostEnabled" />
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public int Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Id" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Id { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : int" Usage="System.Diagnostics.ProcessThread.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The ID of this thread.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadId")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4fa0b-149">스레드의 고유 식별자를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-149">Gets the unique identifier of the thread.</span></span></summary>
        <value><span data-ttu-id="4fa0b-150">특정 스레드와 관련된 고유 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-150">The unique identifier associated with a specific thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fa0b-151">운영 체제 스레드 수명 동안에 식별 하는 스레드 id 번호를 다시 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-151">The operating system reuses thread identification numbers, which identify threads only during their lifetimes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IdealProcessor">
      <MemberSignature Language="C#" Value="public int IdealProcessor { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IdealProcessor" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.IdealProcessor" />
      <MemberSignature Language="VB.NET" Value="Public Property IdealProcessor As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int IdealProcessor {  void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.IdealProcessor : int" Usage="System.Diagnostics.ProcessThread.IdealProcessor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4fa0b-152">이 스레드가 실행될 기본 설정 프로세서를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-152">Sets the preferred processor for this thread to run on.</span></span></summary>
        <value><span data-ttu-id="4fa0b-153">스레드를 실행할 프로세서를 결정하기 위해 시스템에서 스레드를 예약할 때 사용하는 스레드의 기본 설정 프로세서입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-153">The preferred processor for the thread, used when the system schedules threads, to determine which processor to run the thread on.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fa0b-154"><xref:System.Diagnostics.ProcessThread.IdealProcessor%2A> 값은 0부터 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-154">The <xref:System.Diagnostics.ProcessThread.IdealProcessor%2A> value is zero-based.</span></span>  <span data-ttu-id="4fa0b-155">즉, 첫 번째 프로세서에 대 한 스레드 선호도 설정 하려면 속성을 0으로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-155">In other words, to set the thread affinity for the first processor, set the property to zero.</span></span>  
  
 <span data-ttu-id="4fa0b-156">시스템 기본 설정된 프로세서 가능 하면 스레드를 예약 합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-156">The system schedules threads on their preferred processors whenever possible.</span></span>  
  
 <span data-ttu-id="4fa0b-157">프로세스 스레드가 프로세서 캐시 다시 로드 하는 각 마이그레이션을 사용 하 여 프로세서에서 마이그레이션할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-157">A process thread can migrate from processor to processor, with each migration reloading the processor cache.</span></span> <span data-ttu-id="4fa0b-158">스레드에 대 한 프로세서를 지정 하 프로세서 캐시 다시 로드 되는 횟수를 줄여 시스템 로드가 성능을 향상 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-158">Specifying a processor for a thread can improve performance under heavy system loads by reducing the number of times the processor cache is reloaded.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fa0b-159">다음 예제에서는 설정 하는 방법에 설명 합니다 <xref:System.Diagnostics.ProcessThread.IdealProcessor%2A> 메모장의 인스턴스를 첫 번째 프로세서에 대 한 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-159">The following example demonstrates how to set the <xref:System.Diagnostics.ProcessThread.IdealProcessor%2A> property for an instance of Notepad to the first processor.</span></span>  
  
 [!code-csharp[ProcessThreadIdealProcessor#1](~/samples/snippets/csharp/VS_Snippets_CLR/ProcessThreadIdealProcessor/CS/program.cs#1)]
 [!code-vb[ProcessThreadIdealProcessor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ProcessThreadIdealProcessor/VB/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="4fa0b-160">지정한 프로세스에서 스레드가 시작되도록 설정할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-160">The system could not set the thread to start on the specified processor.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="4fa0b-161">플랫폼이 Windows 98 또는 Windows Millennium Edition인 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-161">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="4fa0b-162">프로세스가 원격 컴퓨터에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-162">The process is on a remote computer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PriorityBoostEnabled">
      <MemberSignature Language="C#" Value="public bool PriorityBoostEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PriorityBoostEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.PriorityBoostEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property PriorityBoostEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PriorityBoostEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.PriorityBoostEnabled : bool with get, set" Usage="System.Diagnostics.ProcessThread.PriorityBoostEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("Thread gets a priority boot when interactively used by a user.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadPriorityBoostEnabled")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4fa0b-163">스레드 프로세스의 주 창이 포커스를 받을 때마다 운영 체제에서 관련 스레드의 우선 순위를 일시적으로 높여야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-163">Gets or sets a value indicating whether the operating system should temporarily boost the priority of the associated thread whenever the main window of the thread's process receives the focus.</span></span></summary>
        <value><span data-ttu-id="4fa0b-164">프로세스의 인터페이스와 상호 작용할 때 스레드의 우선 순위를 높이려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-164"><see langword="true" /> to boost the thread's priority when the user interacts with the process's interface; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="4fa0b-165">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-165">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fa0b-166">때 <xref:System.Diagnostics.ProcessThread.PriorityBoostEnabled%2A> 는 `true`, 대기 상태에서 해당 연결 된 프로세스가 만들어질 때마다 스레드의 우선 순위를 일시적으로 향상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-166">When <xref:System.Diagnostics.ProcessThread.PriorityBoostEnabled%2A> is `true`, the system temporarily boosts the thread's priority whenever its associated process is taken out of the wait state.</span></span> <span data-ttu-id="4fa0b-167">이렇게 하면 다른 프로세스에서 현재 스레드의 처리를 중단 합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-167">This action prevents other processes from interrupting the processing of the current thread.</span></span> <span data-ttu-id="4fa0b-168"><xref:System.Diagnostics.ProcessThread.PriorityBoostEnabled%2A> 프로세스에서 만든 모든 스레드에 뿐만 아니라 기존 스레드가 모두 설정은 영향을 줍니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-168">The <xref:System.Diagnostics.ProcessThread.PriorityBoostEnabled%2A> setting affects all existing threads as well as any threads subsequently created by the process.</span></span> <span data-ttu-id="4fa0b-169">일반 동작을 복원 하려면 설정 합니다 <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> 속성을 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-169">To restore normal behavior, set the <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> property to `false`.</span></span>  
  
 <span data-ttu-id="4fa0b-170"><xref:System.Diagnostics.ProcessThread.PriorityBoostEnabled%2A> 스레드가 있는 프로세스에서 실행 중인 경우에 효과가 <xref:System.Diagnostics.Process.PriorityClass%2A> 동적 우선 순위 열거형 값 중 하나로 설정 (<xref:System.Diagnostics.ProcessPriorityClass.Normal>를 <xref:System.Diagnostics.ProcessPriorityClass.High>, 또는 <xref:System.Diagnostics.ProcessPriorityClass.RealTime>).</span><span class="sxs-lookup"><span data-stu-id="4fa0b-170"><xref:System.Diagnostics.ProcessThread.PriorityBoostEnabled%2A> has an effect only when the thread is running in a process that has a <xref:System.Diagnostics.Process.PriorityClass%2A> set to one of the dynamic priority enumeration values (<xref:System.Diagnostics.ProcessPriorityClass.Normal>, <xref:System.Diagnostics.ProcessPriorityClass.High>, or <xref:System.Diagnostics.ProcessPriorityClass.RealTime>).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4fa0b-171">우선 순위를 너무 상승 중요 한 운영 체제 및 네트워크 기능 리소스를 비울 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-171">Boosting the priority too high can drain resources from essential operating system and network functions.</span></span> <span data-ttu-id="4fa0b-172">이 인해 다른 운영 체제 태스크를 사용 하 여 문제가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-172">This could cause problems with other operating system tasks.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="4fa0b-173">우선 순위 높임 정보를 검색할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-173">The priority boost information could not be retrieved.</span></span>  
  
<span data-ttu-id="4fa0b-174">또는</span><span class="sxs-lookup"><span data-stu-id="4fa0b-174">-or-</span></span> 
<span data-ttu-id="4fa0b-175">우선 순위 높임 정보를 설정할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-175">The priority boost information could not be set.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="4fa0b-176">플랫폼이 Windows 98 또는 Windows Millennium Edition인 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-176">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="4fa0b-177">프로세스가 원격 컴퓨터에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-177">The process is on a remote computer.</span></span></exception>
        <altmember cref="T:System.Diagnostics.ProcessPriorityClass" />
      </Docs>
    </Member>
    <Member MemberName="PriorityLevel">
      <MemberSignature Language="C#" Value="public System.Diagnostics.ThreadPriorityLevel PriorityLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.ThreadPriorityLevel PriorityLevel" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.PriorityLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property PriorityLevel As ThreadPriorityLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::ThreadPriorityLevel PriorityLevel { System::Diagnostics::ThreadPriorityLevel get(); void set(System::Diagnostics::ThreadPriorityLevel value); };" />
      <MemberSignature Language="F#" Value="member this.PriorityLevel : System.Diagnostics.ThreadPriorityLevel with get, set" Usage="System.Diagnostics.ProcessThread.PriorityLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The priority level of this thread.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadPriorityLevel")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ThreadPriorityLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4fa0b-178">스레드의 우선 순위 수준을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-178">Gets or sets the priority level of the thread.</span></span></summary>
        <value><span data-ttu-id="4fa0b-179">스레드의 우선 순위를 한정하는 범위를 지정하는 <see cref="T:System.Diagnostics.ThreadPriorityLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-179">One of the <see cref="T:System.Diagnostics.ThreadPriorityLevel" /> values, specifying a range that bounds the thread's priority.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fa0b-180">우선 순위 수준을 단일 값과 동일 하지만 특정 범위의 값 대신 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-180">The priority level is not a single value, but rather a range of values.</span></span> <span data-ttu-id="4fa0b-181">운영 체제는 프로세스를 사용 하 여 스레드의 기본 우선 순위를 계산 <xref:System.Diagnostics.Process.PriorityClass%2A> 에 지정 된 범위에서 값을 선택 하 여 <xref:System.Diagnostics.ProcessThread.PriorityLevel%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-181">The operating system computes the thread's base priority by using the process's <xref:System.Diagnostics.Process.PriorityClass%2A> to choose a value from the range specified in the <xref:System.Diagnostics.ProcessThread.PriorityLevel%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="4fa0b-182">스레드 우선 순위 수준 정보를 검색할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-182">The thread priority level information could not be retrieved.</span></span>  
  
<span data-ttu-id="4fa0b-183">또는</span><span class="sxs-lookup"><span data-stu-id="4fa0b-183">-or-</span></span> 
<span data-ttu-id="4fa0b-184">스레드 우선 순위 수준을 설정할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-184">The thread priority level could not be set.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="4fa0b-185">플랫폼이 Windows 98 또는 Windows Millennium Edition인 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-185">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="4fa0b-186">프로세스가 원격 컴퓨터에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-186">The process is on a remote computer.</span></span></exception>
        <altmember cref="T:System.Diagnostics.ThreadPriorityLevel" />
        <altmember cref="P:System.Diagnostics.Process.PriorityClass" />
        <altmember cref="P:System.Diagnostics.ProcessThread.BasePriority" />
        <altmember cref="P:System.Diagnostics.ProcessThread.CurrentPriority" />
      </Docs>
    </Member>
    <Member MemberName="PrivilegedProcessorTime">
      <MemberSignature Language="C#" Value="public TimeSpan PrivilegedProcessorTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan PrivilegedProcessorTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.PrivilegedProcessorTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PrivilegedProcessorTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan PrivilegedProcessorTime { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.PrivilegedProcessorTime : TimeSpan" Usage="System.Diagnostics.ProcessThread.PrivilegedProcessorTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of CPU time used in privileged mode.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadPrivilegedProcessorTime")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4fa0b-187">스레드가 운영 체제 코어 내부에서 코드를 실행하는데 사용한 시간을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-187">Gets the amount of time that the thread has spent running code inside the operating system core.</span></span></summary>
        <value><span data-ttu-id="4fa0b-188">스레드가 운영 체제 코어 내부에서 코드를 실행하는데 사용한 시간을 나타내는 <see cref="T:System.TimeSpan" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-188">A <see cref="T:System.TimeSpan" /> indicating the amount of time that the thread has spent running code inside the operating system core.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fa0b-189">Windows 여러 가지 보호 메커니즘을 사용 하 여 및 모두의 루트에는 사용자 모드와 특권된 모드 간에 차이가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-189">Windows uses several different protection mechanisms, and at the root of them all is the distinction between user mode and privileged mode.</span></span> <span data-ttu-id="4fa0b-190"><xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A> 응용 프로그램 운영 체제 코어 내부에서 특권된 모드에서 실행 하는 데 소요 된 시간에 해당 합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-190"><xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A> corresponds to the amount of time that the application has spent running in privileged mode, inside the operating system core.</span></span> <span data-ttu-id="4fa0b-191"><xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A> 속성 소비한 시간을 응용 프로그램 시스템 코어 외부의 사용자 모드에서 실행 중인 코드의 양을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-191">The <xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A> property indicates the amount of time that the application has spent running code in user mode, outside the system core.</span></span>  
  
 <span data-ttu-id="4fa0b-192">사용자 모드는 두 가지 방식에서 응용 프로그램을 제한합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-192">User mode restricts the application in two important ways.</span></span> <span data-ttu-id="4fa0b-193">첫째, 응용 프로그램은 주변 장치에 직접 액세스할 수 없습니다 하지만 대신 가져오거나 주변 장치 데이터를 설정 하려면 운영 체제 코어를 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-193">First, the application cannot directly access the peripherals, but instead must call the operating system core to get or set peripheral data.</span></span> <span data-ttu-id="4fa0b-194">운영 체제 이렇게 응용 프로그램에서 다른 필요한 주변 데이터를 제거 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-194">The operating system can thus ensure that one application does not destroy peripheral data that is needed by another.</span></span> <span data-ttu-id="4fa0b-195">둘째, 응용 프로그램 읽기 또는 운영 체제 자체 유지 관리 하는 데이터를 변경할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-195">Second, the application cannot read or change data that the operating system itself maintains.</span></span> <span data-ttu-id="4fa0b-196">이 제한으로 인해 실수로 또는 의도적으로 손상 핵심 응용 프로그램입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-196">This restriction prevents applications from either inadvertently or intentionally corrupting the core.</span></span> <span data-ttu-id="4fa0b-197">경우 응용 프로그램 작업을 수행 하는 운영 체제를 시스템의 루틴 중 하나를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-197">If the application needs the operating system to perform an operation, it calls one of the system's routines.</span></span> <span data-ttu-id="4fa0b-198">권한 있는 모드로 전환 작업을 수행 하 고 원활 하 게 사용자 모드를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-198">Many of these transition into privileged mode, perform the operation, and smoothly return to user mode.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="4fa0b-199">스레드 시간을 검색할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-199">The thread time could not be retrieved.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="4fa0b-200">플랫폼이 Windows 98 또는 Windows Millennium Edition인 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-200">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="4fa0b-201">프로세스가 원격 컴퓨터에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-201">The process is on a remote computer.</span></span></exception>
        <altmember cref="P:System.Diagnostics.ProcessThread.UserProcessorTime" />
        <altmember cref="P:System.Diagnostics.ProcessThread.TotalProcessorTime" />
      </Docs>
    </Member>
    <Member MemberName="ProcessorAffinity">
      <MemberSignature Language="C#" Value="public IntPtr ProcessorAffinity { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ProcessorAffinity" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.ProcessorAffinity" />
      <MemberSignature Language="VB.NET" Value="Public Property ProcessorAffinity As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr ProcessorAffinity {  void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.ProcessorAffinity : nativeint" Usage="System.Diagnostics.ProcessThread.ProcessorAffinity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4fa0b-202">관련 스레드가 실행될 수 있는 프로세서를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-202">Sets the processors on which the associated thread can run.</span></span></summary>
        <value><span data-ttu-id="4fa0b-203">비트 집합을 가리키는 <see cref="T:System.IntPtr" />입니다. 각각의 비트는 스레드가 실행될 수 있는 프로세서를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-203">An <see cref="T:System.IntPtr" /> that points to a set of bits, each of which represents a processor that the thread can run on.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fa0b-204">프로세서 선호도 스레드는 프로세서에 관계가 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-204">The processor affinity of a thread is the set of processors it has a relationship to.</span></span> <span data-ttu-id="4fa0b-205">즉, 해당 it에서 실행 되도록 예약할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-205">In other words, those it can be scheduled to run on.</span></span>  
  
 <span data-ttu-id="4fa0b-206"><xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A> 각 프로세서를 잠시으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-206"><xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A> represents each processor as a bit.</span></span> <span data-ttu-id="4fa0b-207">비트 0은 프로세서 1, 1 비트 프로세서 2, 등에 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-207">Bit 0 represents processor one, bit 1 represents processor two, and so on.</span></span> <span data-ttu-id="4fa0b-208">다음 표에서 가능한 하위 집합 <xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A> 4 프로세서 시스템에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-208">The following table shows a subset of the possible <xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A> for a four-processor system.</span></span>  
  
|<span data-ttu-id="4fa0b-209">속성 값 (16 진수)</span><span class="sxs-lookup"><span data-stu-id="4fa0b-209">Property value (in hexadecimal)</span></span>|<span data-ttu-id="4fa0b-210">유효 프로세서</span><span class="sxs-lookup"><span data-stu-id="4fa0b-210">Valid processors</span></span>|  
|---------------------------------------|----------------------|  
|<span data-ttu-id="4fa0b-211">0x0001</span><span class="sxs-lookup"><span data-stu-id="4fa0b-211">0x0001</span></span>|<span data-ttu-id="4fa0b-212">1</span><span class="sxs-lookup"><span data-stu-id="4fa0b-212">1</span></span>|  
|<span data-ttu-id="4fa0b-213">0x0002</span><span class="sxs-lookup"><span data-stu-id="4fa0b-213">0x0002</span></span>|<span data-ttu-id="4fa0b-214">2</span><span class="sxs-lookup"><span data-stu-id="4fa0b-214">2</span></span>|  
|<span data-ttu-id="4fa0b-215">0x0003</span><span class="sxs-lookup"><span data-stu-id="4fa0b-215">0x0003</span></span>|<span data-ttu-id="4fa0b-216">1 또는 2</span><span class="sxs-lookup"><span data-stu-id="4fa0b-216">1 or 2</span></span>|  
|<span data-ttu-id="4fa0b-217">0x0004</span><span class="sxs-lookup"><span data-stu-id="4fa0b-217">0x0004</span></span>|<span data-ttu-id="4fa0b-218">3</span><span class="sxs-lookup"><span data-stu-id="4fa0b-218">3</span></span>|  
|<span data-ttu-id="4fa0b-219">0x0005</span><span class="sxs-lookup"><span data-stu-id="4fa0b-219">0x0005</span></span>|<span data-ttu-id="4fa0b-220">1 또는 3</span><span class="sxs-lookup"><span data-stu-id="4fa0b-220">1 or 3</span></span>|  
|<span data-ttu-id="4fa0b-221">0x0007</span><span class="sxs-lookup"><span data-stu-id="4fa0b-221">0x0007</span></span>|<span data-ttu-id="4fa0b-222">1, 2 또는 3</span><span class="sxs-lookup"><span data-stu-id="4fa0b-222">1, 2, or 3</span></span>|  
|<span data-ttu-id="4fa0b-223">0x000F</span><span class="sxs-lookup"><span data-stu-id="4fa0b-223">0x000F</span></span>|<span data-ttu-id="4fa0b-224">1, 2, 3 또는 4</span><span class="sxs-lookup"><span data-stu-id="4fa0b-224">1, 2, 3, or 4</span></span>|  
  
 <span data-ttu-id="4fa0b-225">설정 하 여 스레드에 대 한 단일 기본 설정된 프로세서를 지정할 수도 있습니다는 <xref:System.Diagnostics.ProcessThread.IdealProcessor%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-225">You can also specify the single, preferred processor for a thread by setting the <xref:System.Diagnostics.ProcessThread.IdealProcessor%2A> property.</span></span> <span data-ttu-id="4fa0b-226">프로세스 스레드가 프로세서 캐시 다시 로드 하는 각 마이그레이션을 사용 하 여 프로세서에서 마이그레이션할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-226">A process thread can migrate from processor to processor, with each migration reloading the processor cache.</span></span> <span data-ttu-id="4fa0b-227">스레드에 대 한 프로세서를 지정 하 프로세서 캐시 다시 로드 되는 횟수를 줄여 시스템 로드가 성능을 향상 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-227">Specifying a processor for a thread can improve performance under heavy system loads by reducing the number of times the processor cache is reloaded.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fa0b-228">다음 예제에서는 설정 하는 방법의 <xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A> 메모장의 인스턴스를 첫 번째 프로세서에 대 한 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-228">The following example shows how to set the <xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A> property for an instance of Notepad to the first processor.</span></span>  
  
 [!code-csharp[ProcessThreadIdealProcessor#1](~/samples/snippets/csharp/VS_Snippets_CLR/ProcessThreadIdealProcessor/CS/program.cs#1)]
 [!code-vb[ProcessThreadIdealProcessor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ProcessThreadIdealProcessor/VB/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="4fa0b-229">프로세서 선호도를 설정할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-229">The processor affinity could not be set.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="4fa0b-230">플랫폼이 Windows 98 또는 Windows Millennium Edition인 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-230">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="4fa0b-231">프로세스가 원격 컴퓨터에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-231">The process is on a remote computer.</span></span></exception>
        <altmember cref="P:System.Diagnostics.ProcessThread.IdealProcessor" />
      </Docs>
    </Member>
    <Member MemberName="ResetIdealProcessor">
      <MemberSignature Language="C#" Value="public void ResetIdealProcessor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetIdealProcessor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ProcessThread.ResetIdealProcessor" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetIdealProcessor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetIdealProcessor();" />
      <MemberSignature Language="F#" Value="member this.ResetIdealProcessor : unit -&gt; unit" Usage="processThread.ResetIdealProcessor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4fa0b-232">이 스레드의 최적 프로세서를 다시 설정하여 단일 최적 프로세서가 없음을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-232">Resets the ideal processor for this thread to indicate that there is no single ideal processor.</span></span> <span data-ttu-id="4fa0b-233">다시 말해서 모든 프로세서가 최적 프로세서가 되도록 다시 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-233">In other words, so that any processor is ideal.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="4fa0b-234">최적 프로세서를 다시 설정할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-234">The ideal processor could not be reset.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="4fa0b-235">플랫폼이 Windows 98 또는 Windows Millennium Edition인 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-235">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="4fa0b-236">프로세스가 원격 컴퓨터에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-236">The process is on a remote computer.</span></span></exception>
        <altmember cref="P:System.Diagnostics.ProcessThread.IdealProcessor" />
      </Docs>
    </Member>
    <Member MemberName="StartAddress">
      <MemberSignature Language="C#" Value="public IntPtr StartAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int StartAddress" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.StartAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StartAddress As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr StartAddress { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.StartAddress : nativeint" Usage="System.Diagnostics.ProcessThread.StartAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The start address in memory of this thread.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadStartAddress")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4fa0b-237">이 스레드를 시작한 운영 체제가 호출한 함수의 메모리 주소를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-237">Gets the memory address of the function that the operating system called that started this thread.</span></span></summary>
        <value><span data-ttu-id="4fa0b-238">스레드가 실행하는 응용 프로그램 정의 함수를 가리키는 스레드의 시작 주소입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-238">The thread's starting address, which points to the application-defined function that the thread executes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fa0b-239">기본 스레드에서 이라고 하는 단일 스레드를 사용 하 여 각 프로세스가 시작 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-239">Each process starts with a single thread, which is known as the primary thread.</span></span> <span data-ttu-id="4fa0b-240">모든 스레드는 추가 스레드를 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-240">Any thread can create additional threads.</span></span>  
  
 <span data-ttu-id="4fa0b-241">프로세스 가상 주소 공간을, 실행 코드, 데이터, 개체 핸들, 환경 변수, 기본 우선 순위 및 최소 및 최대 작업 집합 크기에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-241">A process has a virtual address space, executable code, data, object handles, environment variables, a base priority, and minimum and maximum working set sizes.</span></span> <span data-ttu-id="4fa0b-242">프로세스의 모든 스레드에 해당 가상 주소 공간 및 시스템 리소스를 공유 합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-242">All the threads of a process share its virtual address space and system resources.</span></span> <span data-ttu-id="4fa0b-243">또한 각 스레드는 예외 처리기, 예약 우선 순위 및 일련의 구조는 시스템 저장 스레드 컨텍스트 스레드가 대기 하는 동안 예약 유지 관리 합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-243">In addition, each thread maintains exception handlers, a scheduling priority, and a set of structures in which the system saves the thread context while the thread is waiting to be scheduled.</span></span> <span data-ttu-id="4fa0b-244">스레드 컨텍스트는 스레드 프로세스의 주소 공간에서 컴퓨터 등록, 커널 스택, 스레드 환경 블록 및 사용자 스택을 스레드의 집합을 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-244">The thread context includes the thread's set of machine registers, the kernel stack, a thread environment block, and a user stack in the address space of the thread's process.</span></span>  
  
 <span data-ttu-id="4fa0b-245">모든 Windows 스레드는 실제로 응용 프로그램에서 제공 하는 기능이 아니라 시스템 제공 함수에서 실행을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-245">Every Windows thread actually begins execution in a system-supplied function, not the application-supplied function.</span></span> <span data-ttu-id="4fa0b-246">주 스레드에 대 한 시작 주소 인 따라서 동일 (시스템 제공 함수의 주소를 나타냄) 시스템의 모든 Windows 프로세스에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-246">The starting address for the primary thread is, therefore, the same (as it represents the address of the system-supplied function) for every Windows process in the system.</span></span> <span data-ttu-id="4fa0b-247">그러나는 <xref:System.Diagnostics.ProcessThread.StartAddress%2A> 속성을 사용 하면 응용 프로그램에 관련 된 시작 함수 주소를 가져올 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-247">However, the <xref:System.Diagnostics.ProcessThread.StartAddress%2A> property allows you to get the starting function address that is specific to your application.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="4fa0b-248">플랫폼이 Windows 98 또는 Windows Millennium Edition인 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-248">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="4fa0b-249">프로세스가 원격 컴퓨터에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-249">The process is on a remote computer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="StartTime">
      <MemberSignature Language="C#" Value="public DateTime StartTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime StartTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.StartTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StartTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime StartTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.StartTime : DateTime" Usage="System.Diagnostics.ProcessThread.StartTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The time this thread was started.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadStartTime")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4fa0b-250">운영 체제가 스레드를 시작한 시간을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-250">Gets the time that the operating system started the thread.</span></span></summary>
        <value><span data-ttu-id="4fa0b-251">운영 체제가 스레드를 시작했을 때의 시스템 시간을 나타내는 <see cref="T:System.DateTime" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-251">A <see cref="T:System.DateTime" /> representing the time that was on the system when the operating system started the thread.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="4fa0b-252">스레드 시간을 검색할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-252">The thread time could not be retrieved.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="4fa0b-253">플랫폼이 Windows 98 또는 Windows Millennium Edition인 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-253">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="4fa0b-254">프로세스가 원격 컴퓨터에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-254">The process is on a remote computer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ThreadState">
      <MemberSignature Language="C#" Value="public System.Diagnostics.ThreadState ThreadState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.ThreadState ThreadState" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.ThreadState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ThreadState As ThreadState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::ThreadState ThreadState { System::Diagnostics::ThreadState get(); };" />
      <MemberSignature Language="F#" Value="member this.ThreadState : System.Diagnostics.ThreadState" Usage="System.Diagnostics.ProcessThread.ThreadState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The current state of this thread.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadThreadState")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ThreadState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4fa0b-255">이 스레드의 현재 상태를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-255">Gets the current state of this thread.</span></span></summary>
        <value><span data-ttu-id="4fa0b-256">실행, 대기, 종료 등 스레드의 실행을 나타내는 <see cref="T:System.Diagnostics.ThreadState" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-256">A <see cref="T:System.Diagnostics.ThreadState" /> that indicates the thread's execution, for example, running, waiting, or terminated.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fa0b-257">합니다 <xref:System.Diagnostics.ProcessThread.WaitReason%2A> 속성 값은 경우에만 유효 합니다 <xref:System.Diagnostics.ProcessThread.ThreadState%2A> 값은 <xref:System.Diagnostics.ThreadState.Wait>합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-257">The <xref:System.Diagnostics.ProcessThread.WaitReason%2A> property value is valid only when the <xref:System.Diagnostics.ProcessThread.ThreadState%2A> value is <xref:System.Diagnostics.ThreadState.Wait>.</span></span> <span data-ttu-id="4fa0b-258">따라서 확인 합니다 <xref:System.Diagnostics.ProcessThread.ThreadState%2A> 도달 하기 전에 값을 <xref:System.Diagnostics.ProcessThread.WaitReason%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-258">Therefore, check the <xref:System.Diagnostics.ProcessThread.ThreadState%2A> value before you get the <xref:System.Diagnostics.ProcessThread.WaitReason%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="4fa0b-259">플랫폼이 Windows 98 또는 Windows Millennium Edition인 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-259">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="4fa0b-260">프로세스가 원격 컴퓨터에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-260">The process is on a remote computer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TotalProcessorTime">
      <MemberSignature Language="C#" Value="public TimeSpan TotalProcessorTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TotalProcessorTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.TotalProcessorTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalProcessorTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TotalProcessorTime { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TotalProcessorTime : TimeSpan" Usage="System.Diagnostics.ProcessThread.TotalProcessorTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The total amount of CPU time used.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadTotalProcessorTime")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4fa0b-261">이 스레드가 프로세서를 사용하는데 소비한 총 시간을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-261">Gets the total amount of time that this thread has spent using the processor.</span></span></summary>
        <value><span data-ttu-id="4fa0b-262">스레드가 프로세서의 제어를 받고 있던 시간을 나타내는 <see cref="T:System.TimeSpan" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-262">A <see cref="T:System.TimeSpan" /> that indicates the amount of time that the thread has had control of the processor.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fa0b-263"><xref:System.Diagnostics.ProcessThread.TotalProcessorTime%2A> 속성 시스템에 스레드가 대기 상태에서 수행 되 고 모든 프로세서에서 우선 순위가 지정 시간의 총 크기를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-263">The <xref:System.Diagnostics.ProcessThread.TotalProcessorTime%2A> property indicates the total amount of time that the system has taken the thread out of the wait state and given it priority on any processor.</span></span> <span data-ttu-id="4fa0b-264">다중 프로세서 시스템에서 스레드가 둘 이상의 프로세서를 사용 하는 경우이 값 각 프로세서에 소요 된 시간에 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-264">On a multiple processor system, this value would include time spent on each processor, if the thread used more than one processor.</span></span>  
  
 <span data-ttu-id="4fa0b-265">합니다 <xref:System.Diagnostics.ProcessThread.TotalProcessorTime%2A> 속성의 합은 합니다 <xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A> 및 <xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-265">The <xref:System.Diagnostics.ProcessThread.TotalProcessorTime%2A> property is the sum of the <xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A> and <xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A> properties.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="4fa0b-266">스레드 시간을 검색할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-266">The thread time could not be retrieved.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="4fa0b-267">플랫폼이 Windows 98 또는 Windows Millennium Edition인 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-267">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="4fa0b-268">프로세스가 원격 컴퓨터에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-268">The process is on a remote computer.</span></span></exception>
        <altmember cref="P:System.Diagnostics.ProcessThread.PrivilegedProcessorTime" />
        <altmember cref="P:System.Diagnostics.ProcessThread.UserProcessorTime" />
      </Docs>
    </Member>
    <Member MemberName="UserProcessorTime">
      <MemberSignature Language="C#" Value="public TimeSpan UserProcessorTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan UserProcessorTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.UserProcessorTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserProcessorTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan UserProcessorTime { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.UserProcessorTime : TimeSpan" Usage="System.Diagnostics.ProcessThread.UserProcessorTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of CPU time used in user mode.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadUserProcessorTime")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4fa0b-269">관련 스레드가 응용 프로그램 내부에서 코드를 실행하는데 사용한 시간을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-269">Gets the amount of time that the associated thread has spent running code inside the application.</span></span></summary>
        <value><span data-ttu-id="4fa0b-270">운영 체제 코어 내부와 반대로 스레드가 응용 프로그램 내부에서 코드를 실행하는데 사용한 시간을 나타내는 <see cref="T:System.TimeSpan" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-270">A <see cref="T:System.TimeSpan" /> indicating the amount of time that the thread has spent running code inside the application, as opposed to inside the operating system core.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fa0b-271">Windows NT 여러 가지 보호 메커니즘을 사용 하 여 및 모두의 루트에는 사용자 모드와 특권된 모드 간에 차이가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-271">Windows NT uses several different protection mechanisms, and at the root of them all is the distinction between user mode and privileged mode.</span></span> <span data-ttu-id="4fa0b-272"><xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A> 응용 프로그램 운영 체제 코어 외부의 사용자 모드에서 실행 하는 데 소요 된 시간에 해당 합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-272"><xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A> corresponds to the amount of time that the application has spent running in user mode, outside the operating system core.</span></span> <span data-ttu-id="4fa0b-273"><xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A> 소비한 시간을 응용 프로그램 체제 코어 내부에서 특권된 모드에서 실행 중인 코드의 크기에 해당 합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-273">The <xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A> corresponds to the amount of time that the application has spent running code in privileged mode, inside the system core.</span></span>  
  
 <span data-ttu-id="4fa0b-274">사용자 모드는 두 가지 방식에서 응용 프로그램을 제한합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-274">User mode restricts the application in two important ways.</span></span> <span data-ttu-id="4fa0b-275">첫째, 응용 프로그램은 주변 장치에 직접 액세스할 수 없습니다 하지만 대신 가져오거나 주변 장치 데이터를 설정 하려면 운영 체제 코어를 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-275">First, the application cannot directly access the peripherals, but instead must call the operating system core to get or set peripheral data.</span></span> <span data-ttu-id="4fa0b-276">운영 체제 이렇게 응용 프로그램에서 다른 필요한 주변 데이터를 제거 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-276">The operating system can thus ensure that one application does not destroy peripheral data that is needed by another.</span></span> <span data-ttu-id="4fa0b-277">둘째, 응용 프로그램 읽기 또는 운영 체제 자체 유지 관리 하는 데이터를 변경할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-277">Second, the application cannot read or change data that the operating system itself maintains.</span></span> <span data-ttu-id="4fa0b-278">이 제한으로 인해 실수로 또는 의도적으로 손상 핵심 응용 프로그램입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-278">This restriction prevents applications from either inadvertently or intentionally corrupting the core.</span></span> <span data-ttu-id="4fa0b-279">경우 응용 프로그램 작업을 수행 하는 운영 체제를 시스템의 루틴 중 하나를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-279">If the application needs the operating system to perform an operation, it calls one of the system's routines.</span></span> <span data-ttu-id="4fa0b-280">권한 있는 모드로 전환 작업을 수행 하 고 원활 하 게 사용자 모드를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-280">Many of these transition into privileged mode, perform the operation, and smoothly return to user mode.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="4fa0b-281">스레드 시간을 검색할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-281">The thread time could not be retrieved.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="4fa0b-282">플랫폼이 Windows 98 또는 Windows Millennium Edition인 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-282">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="4fa0b-283">프로세스가 원격 컴퓨터에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-283">The process is on a remote computer.</span></span></exception>
        <altmember cref="P:System.Diagnostics.ProcessThread.PrivilegedProcessorTime" />
        <altmember cref="P:System.Diagnostics.ProcessThread.TotalProcessorTime" />
      </Docs>
    </Member>
    <Member MemberName="WaitReason">
      <MemberSignature Language="C#" Value="public System.Diagnostics.ThreadWaitReason WaitReason { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.ThreadWaitReason WaitReason" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ProcessThread.WaitReason" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitReason As ThreadWaitReason" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::ThreadWaitReason WaitReason { System::Diagnostics::ThreadWaitReason get(); };" />
      <MemberSignature Language="F#" Value="member this.WaitReason : System.Diagnostics.ThreadWaitReason" Usage="System.Diagnostics.ProcessThread.WaitReason" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.MonitoringDescription("The reason why this thread is waiting.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.MonitoringDescription("ThreadWaitReason")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ThreadWaitReason</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4fa0b-284">스레드가 대기 상태에 있는 이유를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-284">Gets the reason that the thread is waiting.</span></span></summary>
        <value><span data-ttu-id="4fa0b-285"><see cref="T:System.Diagnostics.ThreadWaitReason" />은 스레드가 대기 상태에 있는 이유를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-285">A <see cref="T:System.Diagnostics.ThreadWaitReason" /> representing the reason that the thread is in the wait state.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fa0b-286">합니다 <xref:System.Diagnostics.ProcessThread.WaitReason%2A> 속성은 경우에만 유효 합니다 <xref:System.Diagnostics.ProcessThread.ThreadState%2A> 는 <xref:System.Diagnostics.ThreadState.Wait>합니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-286">The <xref:System.Diagnostics.ProcessThread.WaitReason%2A> property is valid only when the <xref:System.Diagnostics.ProcessThread.ThreadState%2A> is <xref:System.Diagnostics.ThreadState.Wait>.</span></span> <span data-ttu-id="4fa0b-287">따라서 확인 합니다 <xref:System.Diagnostics.ProcessThread.ThreadState%2A> 도달 하기 전에 값을 <xref:System.Diagnostics.ProcessThread.WaitReason%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="4fa0b-287">Therefore, check the <xref:System.Diagnostics.ProcessThread.ThreadState%2A> value before you get the <xref:System.Diagnostics.ProcessThread.WaitReason%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4fa0b-288">스레드가 대기 상태에 있지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-288">The thread is not in the wait state.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="4fa0b-289">플랫폼이 Windows 98 또는 Windows Millennium Edition인 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-289">The platform is Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="4fa0b-290">프로세스가 원격 컴퓨터에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="4fa0b-290">The process is on a remote computer.</span></span></exception>
        <altmember cref="T:System.Diagnostics.ThreadWaitReason" />
        <altmember cref="P:System.Diagnostics.ProcessThread.ThreadState" />
      </Docs>
    </Member>
  </Members>
</Type>