<Type Name="ConditionalAttribute" FullName="System.Diagnostics.ConditionalAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e4305b05b350ca76ab11f713e6316dfae88d0fb3" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56366651" /></Metadata><TypeSignature Language="C#" Value="public sealed class ConditionalAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ConditionalAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.ConditionalAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ConditionalAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConditionalAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type ConditionalAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method, AllowMultiple=true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="13cd1-101">지정된 조건부 컴파일 기호가 정의되어 있지 않으면 메서드 호출 또는 특성이 무시되어야 함을 컴파일러에 알립니다.</span><span class="sxs-lookup"><span data-stu-id="13cd1-101">Indicates to compilers that a method call or attribute should be ignored unless a specified conditional compilation symbol is defined.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13cd1-102">적용할 수는 <xref:System.Diagnostics.ConditionalAttribute> 메서드 및 클래스 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="13cd1-102">You can apply the <xref:System.Diagnostics.ConditionalAttribute> attribute to methods and classes.</span></span> <span data-ttu-id="13cd1-103">그러나 클래스의 용도에서 파생 된 형식에 대해서만 유효 <xref:System.Attribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="13cd1-103">However, its use on classes is valid only for types that are derived from <xref:System.Attribute>.</span></span> <span data-ttu-id="13cd1-104"><xref:System.Diagnostics.ConditionalAttribute> 무시 됩니다 또는 다른 모든 형식에 적용할 경우 컴파일러 경고 또는 오류 메시지가 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="13cd1-104"><xref:System.Diagnostics.ConditionalAttribute> either will be ignored or will produce a compiler warning or error message if you apply it to any other type.</span></span>  
  
 <span data-ttu-id="13cd1-105">적용 <xref:System.Diagnostics.ConditionalAttribute> 메서드를 컴파일러에 알립니다 메서드 호출을 Microsoft와 연결 하는 조건부 컴파일 기호 하지 않는 한 MSIL (intermediate language)로 컴파일해야 해야 <xref:System.Diagnostics.ConditionalAttribute> 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="13cd1-105">Applying <xref:System.Diagnostics.ConditionalAttribute> to a method indicates to compilers that a call to the method should not be compiled into Microsoft intermediate language (MSIL) unless the conditional compilation symbol that is associated with <xref:System.Diagnostics.ConditionalAttribute> is defined.</span></span> <span data-ttu-id="13cd1-106">Void 반환 하지 않는 메서드에이 특성을 적용 하는 경우에 Visual Studio에서 컴파일 오류를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="13cd1-106">You will get a compilation error in Visual Studio if you apply this attribute to a method that does not return void.</span></span> <span data-ttu-id="13cd1-107">적용 <xref:System.Diagnostics.ConditionalAttribute> 특성에는 특성을 내보내지 않아야 메타 데이터에 조건부 컴파일 기호를 정의 하지 않으면를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="13cd1-107">Applying <xref:System.Diagnostics.ConditionalAttribute> to an attribute indicates that the attribute should not be emitted to metadata unless the conditional compilation symbol is defined.</span></span> <span data-ttu-id="13cd1-108">메서드에 전달 된 인수 또는 특성은 여전히 형식-checked 컴파일러에서.</span><span class="sxs-lookup"><span data-stu-id="13cd1-108">Any arguments passed to the method or attribute are still type-checked by the compiler.</span></span>  
  
 <span data-ttu-id="13cd1-109">조건부 컴파일 기호를 정의 하려면 다음 기술을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="13cd1-109">You can use the following techniques to define conditional compilation symbols:</span></span>  
  
-   <span data-ttu-id="13cd1-110">컴파일러 명령줄 옵션 사용 예를 들어 **/define: DEBUG**합니다.</span><span class="sxs-lookup"><span data-stu-id="13cd1-110">Use compiler command-line options; for example, **/define:DEBUG**.</span></span>  
  
-   <span data-ttu-id="13cd1-111">환경 변수를 사용 하 여 운영 체제 셸에서; 예를 들어 **디버그 설정 = 1**합니다.</span><span class="sxs-lookup"><span data-stu-id="13cd1-111">Use environment variables in the operating system shell; for example, **set DEBUG=1**.</span></span>  
  
-   <span data-ttu-id="13cd1-112">소스 코드에서 pragma를 사용 합니다. 예를 들어, 다음과 같이 컴파일 변수를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="13cd1-112">Use pragmas in the source code; for example, define the compilation variable as follows:</span></span>  
  
    ```csharp  
    #define DEBUG  
    ```  
  
    ```vb  
    #Const DEBUG=True  
    ```  
  
     <span data-ttu-id="13cd1-113">변수를 정의 하지 않으려면 다음을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="13cd1-113">To undefine the variable, use the following:</span></span>  
  
    ```csharp  
    #undef DEBUG  
    ```  
  
    ```vb  
    #Const DEBUG=False  
    ```  
  
 <span data-ttu-id="13cd1-114">사용 된 사양 CLS (공용 언어)을 준수 하는 컴파일러 무시 하도록 허용 된 <xref:System.Diagnostics.ConditionalAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="13cd1-114">Compilers that comply with the Common Language Specification (CLS) are permitted to ignore <xref:System.Diagnostics.ConditionalAttribute>.</span></span> <span data-ttu-id="13cd1-115">C#, Visual Basic 및 c + + 컴파일러에서 지 원하는 <xref:System.Diagnostics.ConditionalAttribute>; JScript 컴파일러는 특성을 지원 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="13cd1-115">The C#, Visual Basic, and C++ compilers support <xref:System.Diagnostics.ConditionalAttribute>; the JScript compiler does not support the attribute.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="13cd1-116">Visual Basic의 경우에 `AddressOf` 연산자가이 특성에 의해 영향을 받지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="13cd1-116">In Visual Basic, the `AddressOf` operator is not affected by this attribute.</span></span> <span data-ttu-id="13cd1-117">예를 들어 `Call CType(AddressOf delegate, Action)` 항상 호출 `delegate`이지만 `Call delegate()` 되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="13cd1-117">For example, `Call CType(AddressOf delegate, Action)` always invokes `delegate`, although `Call delegate()` might not.</span></span>  
  
 <span data-ttu-id="13cd1-118"><xref:System.Diagnostics.ConditionalAttribute> 에 정의 된 메서드에 적용 되는 <xref:System.Diagnostics.Debug> 고 <xref:System.Diagnostics.Trace> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="13cd1-118"><xref:System.Diagnostics.ConditionalAttribute> is applied to the methods that are defined in the <xref:System.Diagnostics.Debug> and <xref:System.Diagnostics.Trace> classes.</span></span>  
  
 <span data-ttu-id="13cd1-119">특성을 사용 하는 방법에 대 한 자세한 내용은 참조 하세요. [특성](~/docs/standard/attributes/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="13cd1-119">For more information about how to use attributes, see [Attributes](~/docs/standard/attributes/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13cd1-120">다음 예에서는 <xref:System.Diagnostics.ConditionalAttribute>의 사용법을 보여줍니다.</span><span class="sxs-lookup"><span data-stu-id="13cd1-120">The following example demonstrates the use of <xref:System.Diagnostics.ConditionalAttribute>.</span></span> <span data-ttu-id="13cd1-121">이 예제에서는 조건으로 정의 되어 있다고 가정 합니다 **/define** 컴파일러 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="13cd1-121">The example assumes that the condition is defined with the **/define** compiler option.</span></span> <span data-ttu-id="13cd1-122">컴파일러 옵션을 변경 하 여 다른 결과 얻을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="13cd1-122">You can obtain different results by changing the compiler option.</span></span> <span data-ttu-id="13cd1-123">필요에 따라 컴파일러 옵션으로 식별할 수 있도록 하는 대신 샘플 코드에서 pragma를 사용 하 여 조건을 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="13cd1-123">You can optionally define the conditions by using pragmas in the sample code instead of identifying them as compiler options.</span></span>  
  
 [!code-csharp[ConditionalAttributeSample1#7](~/samples/snippets/csharp/VS_Snippets_CLR/ConditionalAttributeSample1/CS/cas.cs#7)]
 [!code-vb[ConditionalAttributeSample1#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/ConditionalAttributeSample1/VB/cas.vb#7)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConditionalAttribute (string conditionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string conditionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConditionalAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (conditionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConditionalAttribute(System::String ^ conditionString);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.ConditionalAttribute : string -&gt; System.Diagnostics.ConditionalAttribute" Usage="new System.Diagnostics.ConditionalAttribute conditionString" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="conditionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="conditionString"><span data-ttu-id="13cd1-124">특성과 관련된 대/소문자 구분 조건부 컴파일 기호를 지정하는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="13cd1-124">A string that specifies the case-sensitive conditional compilation symbol that is associated with the attribute.</span></span></param>
        <summary><span data-ttu-id="13cd1-125"><see cref="T:System.Diagnostics.ConditionalAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="13cd1-125">Initializes a new instance of the <see cref="T:System.Diagnostics.ConditionalAttribute" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="13cd1-126">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Diagnostics.ConditionalAttribute.%23ctor%2A> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="13cd1-126">The following example demonstrates how to use the <xref:System.Diagnostics.ConditionalAttribute.%23ctor%2A> constructor.</span></span> <span data-ttu-id="13cd1-127">이 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Diagnostics.ConditionalAttribute> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="13cd1-127">This example is part of a larger example provided for the <xref:System.Diagnostics.ConditionalAttribute> class.</span></span>  
  
 [!code-csharp[ConditionalAttributeSample1#8](~/samples/snippets/csharp/VS_Snippets_CLR/ConditionalAttributeSample1/CS/cas.cs#8)]
 [!code-vb[ConditionalAttributeSample1#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/ConditionalAttributeSample1/VB/cas.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConditionString">
      <MemberSignature Language="C#" Value="public string ConditionString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConditionString" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.ConditionalAttribute.ConditionString" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConditionString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConditionString { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ConditionString : string" Usage="System.Diagnostics.ConditionalAttribute.ConditionString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13cd1-128"><see cref="T:System.Diagnostics.ConditionalAttribute" /> 특성과 관련된 조건부 컴파일 기호를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="13cd1-128">Gets the conditional compilation symbol that is associated with the <see cref="T:System.Diagnostics.ConditionalAttribute" /> attribute.</span></span></summary>
        <value><span data-ttu-id="13cd1-129"><see cref="T:System.Diagnostics.ConditionalAttribute" /> 특성과 관련된 대/소문자 구분 조건부 컴파일 기호를 지정하는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="13cd1-129">A string that specifies the case-sensitive conditional compilation symbol that is associated with the <see cref="T:System.Diagnostics.ConditionalAttribute" /> attribute.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13cd1-130">이 속성은 읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="13cd1-130">This property is read-only.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>