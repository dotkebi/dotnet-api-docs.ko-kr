<Type Name="Stopwatch" FullName="System.Diagnostics.Stopwatch">
  <Metadata><Meta Name="ms.openlocfilehash" Value="572c07c63e217bd42123a99dcb7db0ed56c9ca75" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58728651" /></Metadata><TypeSignature Language="C#" Value="public class Stopwatch" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Stopwatch extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Stopwatch" />
  <TypeSignature Language="VB.NET" Value="Public Class Stopwatch" />
  <TypeSignature Language="C++ CLI" Value="public ref class Stopwatch" />
  <TypeSignature Language="F#" Value="type Stopwatch = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="0bebc-101">경과 시간을 정확하게 측정하는 데 사용할 수 있는 일련의 메서드와 속성을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-101">Provides a set of methods and properties that you can use to accurately measure elapsed time.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bebc-102"><xref:System.Diagnostics.Stopwatch> 인스턴스에 한 번의 간격 또는 총 경과 된 시간에 대 한 여러 간격에 경과 된 시간을 측정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-102">A <xref:System.Diagnostics.Stopwatch> instance can measure elapsed time for one interval, or the total of elapsed time across multiple intervals.</span></span> <span data-ttu-id="0bebc-103">일반적인 <xref:System.Diagnostics.Stopwatch> 호출 하는 경우는 <xref:System.Diagnostics.Stopwatch.Start%2A> 메서드를 최종적으로 호출 합니다 <xref:System.Diagnostics.Stopwatch.Stop%2A> 메서드를 다음 경과 시간 사용 하 여 확인는 <xref:System.Diagnostics.Stopwatch.Elapsed%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-103">In a typical <xref:System.Diagnostics.Stopwatch> scenario, you call the <xref:System.Diagnostics.Stopwatch.Start%2A> method, then eventually call the <xref:System.Diagnostics.Stopwatch.Stop%2A> method, and then you check elapsed time using the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> property.</span></span>  
  
 <span data-ttu-id="0bebc-104">A <xref:System.Diagnostics.Stopwatch> 인스턴스는 실행 중이거나 중지; 사용 <xref:System.Diagnostics.Stopwatch.IsRunning%2A> 의 현재 상태를 확인 하는 <xref:System.Diagnostics.Stopwatch>합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-104">A <xref:System.Diagnostics.Stopwatch> instance is either running or stopped; use <xref:System.Diagnostics.Stopwatch.IsRunning%2A> to determine the current state of a <xref:System.Diagnostics.Stopwatch>.</span></span> <span data-ttu-id="0bebc-105">사용 하 여 <xref:System.Diagnostics.Stopwatch.Start%2A> 경과 시간 측정을 시작 하려면 사용 하 여 <xref:System.Diagnostics.Stopwatch.Stop%2A> 경과 시간 측정을 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-105">Use <xref:System.Diagnostics.Stopwatch.Start%2A> to begin measuring elapsed time; use <xref:System.Diagnostics.Stopwatch.Stop%2A> to stop measuring elapsed time.</span></span> <span data-ttu-id="0bebc-106">속성을 통해 경과 된 시간 값을 쿼리할 <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, 또는 <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-106">Query the elapsed time value through the properties <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, or <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A>.</span></span> <span data-ttu-id="0bebc-107">인스턴스가 실행 중이거나 중지 된 동안 경과 시간 속성을 쿼리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-107">You can query the elapsed time properties while the instance is running or stopped.</span></span> <span data-ttu-id="0bebc-108">속성 꾸준히 증가 합니다. 경과 된 시간 동안은 <xref:System.Diagnostics.Stopwatch> 는 실행은 일정 하 게 유지 인스턴스가 중지 되는 경우.</span><span class="sxs-lookup"><span data-stu-id="0bebc-108">The elapsed time properties steadily increase while the <xref:System.Diagnostics.Stopwatch> is running; they remain constant when the instance is stopped.</span></span>  
  
 <span data-ttu-id="0bebc-109">기본적으로 경과 된 시간 값을 <xref:System.Diagnostics.Stopwatch> 인스턴스가 모든 측정된 간격의 합계입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-109">By default, the elapsed time value of a <xref:System.Diagnostics.Stopwatch> instance equals the total of all measured time intervals.</span></span> <span data-ttu-id="0bebc-110">호출할 때마다 <xref:System.Diagnostics.Stopwatch.Start%2A> 누적 경과 된 시간;에서 계산을 시작를 호출할 때마다 <xref:System.Diagnostics.Stopwatch.Stop%2A> 현재 간격 측정을 종료 하 고 누적 경과 된 시간 값을 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-110">Each call to <xref:System.Diagnostics.Stopwatch.Start%2A> begins counting at the cumulative elapsed time; each call to <xref:System.Diagnostics.Stopwatch.Stop%2A> ends the current interval measurement and freezes the cumulative elapsed time value.</span></span> <span data-ttu-id="0bebc-111">사용 된 <xref:System.Diagnostics.Stopwatch.Reset%2A> 기존의 누적 경과 된 시간을 선택 취소 하는 방법 <xref:System.Diagnostics.Stopwatch> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="0bebc-111">Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method to clear the cumulative elapsed time in an existing <xref:System.Diagnostics.Stopwatch> instance.</span></span>  
  
 <span data-ttu-id="0bebc-112"><xref:System.Diagnostics.Stopwatch> 내부 타이머 메커니즘의 타이머 틱을 계산 하 여 경과 된 시간을 측정 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-112">The <xref:System.Diagnostics.Stopwatch> measures elapsed time by counting timer ticks in the underlying timer mechanism.</span></span> <span data-ttu-id="0bebc-113">설치 된 하드웨어 및 운영 체제에서 고해상도 성능 카운터를 지원 하면 <xref:System.Diagnostics.Stopwatch> 클래스는 카운터를 사용 하 여 경과 된 시간을 측정 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-113">If the installed hardware and operating system support a high-resolution performance counter, then the <xref:System.Diagnostics.Stopwatch> class uses that counter to measure elapsed time.</span></span> <span data-ttu-id="0bebc-114">그렇지 않은 경우는 <xref:System.Diagnostics.Stopwatch> 클래스 시스템 타이머를 사용 하 여 경과 된 시간을 측정 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-114">Otherwise, the <xref:System.Diagnostics.Stopwatch> class uses the system timer to measure elapsed time.</span></span> <span data-ttu-id="0bebc-115">사용 하 여는 <xref:System.Diagnostics.Stopwatch.Frequency> 하 고 <xref:System.Diagnostics.Stopwatch.IsHighResolution> 정밀도 정확도 결정 하는 필드는 <xref:System.Diagnostics.Stopwatch> 타이밍 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-115">Use the <xref:System.Diagnostics.Stopwatch.Frequency> and <xref:System.Diagnostics.Stopwatch.IsHighResolution> fields to determine the precision and resolution of the <xref:System.Diagnostics.Stopwatch> timing implementation.</span></span>  
  
 <span data-ttu-id="0bebc-116"><xref:System.Diagnostics.Stopwatch> 클래스 관리 코드 내에서 타이밍과 관련 된 성능 카운터를 조작 하는 데 도움이 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-116">The <xref:System.Diagnostics.Stopwatch> class assists the manipulation of timing-related performance counters within managed code.</span></span> <span data-ttu-id="0bebc-117">특히 합니다 <xref:System.Diagnostics.Stopwatch.Frequency> 필드와 <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> 메서드는 관리 되지 않는 Win32 Api를 대신 사용할 수 있습니다 `QueryPerformanceFrequency` 및 `QueryPerformanceCounter`합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-117">Specifically, the <xref:System.Diagnostics.Stopwatch.Frequency> field and <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> method can be used in place of the unmanaged Win32 APIs `QueryPerformanceFrequency` and `QueryPerformanceCounter`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0bebc-118">다중 프로세서 컴퓨터에서 실행 되는 스레드는 프로세서를 중요 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-118">On a multiprocessor computer, it does not matter which processor the thread runs on.</span></span> <span data-ttu-id="0bebc-119">그러나 BIOS (HAL (하드웨어 추상화 계층)의 버그 때문에 서로 다른 프로세서에서 다른 타이밍이 결과 얻을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-119">However, because of bugs in the BIOS or the Hardware Abstraction Layer (HAL), you can get different timing results on different processors.</span></span> <span data-ttu-id="0bebc-120">스레드에 대 한 프로세서 선호도 지정 하려면 사용 된 <xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="0bebc-120">To specify processor affinity for a thread, use the <xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bebc-121">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Diagnostics.Stopwatch> 클래스는 응용 프로그램에 대 한 실행 시간을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-121">The following example demonstrates how to use the <xref:System.Diagnostics.Stopwatch> class to determine the execution time for an application.</span></span>  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 <span data-ttu-id="0bebc-122">다음 예제에서는 사용 된 <xref:System.Diagnostics.Stopwatch> 성능 데이터를 계산 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-122">The following example demonstrates the use of the <xref:System.Diagnostics.Stopwatch> class to calculate performance data.</span></span>  
  
 [!code-cpp[StopWatchPerfSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#1)]
 [!code-csharp[StopWatchPerfSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#1)]
 [!code-vb[StopWatchPerfSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.TimeSpan" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stopwatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stopwatch();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0bebc-123"><see cref="T:System.Diagnostics.Stopwatch" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-123">Initializes a new instance of the <see cref="T:System.Diagnostics.Stopwatch" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bebc-124">반환 된 <xref:System.Diagnostics.Stopwatch> 인스턴스가 중지 되 고 인스턴스 경과 시간 속성은 0입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-124">The returned <xref:System.Diagnostics.Stopwatch> instance is stopped, and the elapsed time property of the instance is zero.</span></span>  
  
 <span data-ttu-id="0bebc-125">사용 된 <xref:System.Diagnostics.Stopwatch.Start%2A> 새 경과 시간 측정을 시작 하는 메서드 <xref:System.Diagnostics.Stopwatch> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="0bebc-125">Use the <xref:System.Diagnostics.Stopwatch.Start%2A> method to begin measuring elapsed time with the new <xref:System.Diagnostics.Stopwatch> instance.</span></span> <span data-ttu-id="0bebc-126">사용 합니다 <xref:System.Diagnostics.Stopwatch.StartNew%2A> 새 메서드 <xref:System.Diagnostics.Stopwatch> 인스턴스 하 고 즉시 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-126">Use the <xref:System.Diagnostics.Stopwatch.StartNew%2A> method to initialize a new <xref:System.Diagnostics.Stopwatch> instance and immediately start it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bebc-127">다음 예제에서는 초기화를 <xref:System.Diagnostics.Stopwatch> 인스턴스 간단한 클래스 생성자를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-127">The following example initializes a <xref:System.Diagnostics.Stopwatch> instance by using a simple class constructor.</span></span>  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public TimeSpan Elapsed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Elapsed" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.Elapsed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Elapsed As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Elapsed { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.Elapsed : TimeSpan" Usage="System.Diagnostics.Stopwatch.Elapsed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0bebc-128">현재 인스턴스가 측정한 총 경과 시간을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-128">Gets the total elapsed time measured by the current instance.</span></span></summary>
        <value><span data-ttu-id="0bebc-129">현재 인스턴스가 측정한 총 경과 시간을 나타내는 읽기 전용 <see cref="T:System.TimeSpan" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-129">A read-only <see cref="T:System.TimeSpan" /> representing the total elapsed time measured by the current instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bebc-130">일반적인 <xref:System.Diagnostics.Stopwatch> 호출 하는 경우는 <xref:System.Diagnostics.Stopwatch.Start%2A> 메서드를 최종적으로 호출 합니다 <xref:System.Diagnostics.Stopwatch.Stop%2A> 메서드를 다음 경과 시간 사용 하 여 확인는 <xref:System.Diagnostics.Stopwatch.Elapsed%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-130">In a typical <xref:System.Diagnostics.Stopwatch> scenario, you call the <xref:System.Diagnostics.Stopwatch.Start%2A> method, then eventually call the <xref:System.Diagnostics.Stopwatch.Stop%2A> method, and then you check elapsed time using the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> property.</span></span>  
  
 <span data-ttu-id="0bebc-131">사용 된 <xref:System.Diagnostics.Stopwatch.Elapsed%2A> 경과 된 시간을 검색할 속성 값을 사용 하 여 <xref:System.TimeSpan> 메서드 및 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-131">Use the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> property to retrieve the elapsed time value using <xref:System.TimeSpan> methods and properties.</span></span> <span data-ttu-id="0bebc-132">예를 들어, 형식을 지정할 수 있습니다 반환 된 <xref:System.TimeSpan> 를 텍스트 형식으로 인스턴스 또는 전달 해야 하는 다른 클래스에는 <xref:System.TimeSpan> 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-132">For example, you can format the returned <xref:System.TimeSpan> instance into a text representation, or pass it to another class that requires a <xref:System.TimeSpan> parameter.</span></span>  
  
 <span data-ttu-id="0bebc-133">속성을 쿼리할 수 있습니다 <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, 및 <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> 하는 동안는 <xref:System.Diagnostics.Stopwatch> 인스턴스가 실행 중이거나 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-133">You can query the properties <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, and <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> while the <xref:System.Diagnostics.Stopwatch> instance is running or stopped.</span></span> <span data-ttu-id="0bebc-134">속성 꾸준히 증가 합니다. 경과 된 시간 동안은 <xref:System.Diagnostics.Stopwatch> 는 실행은 일정 하 게 유지 인스턴스가 중지 되는 경우.</span><span class="sxs-lookup"><span data-stu-id="0bebc-134">The elapsed time properties steadily increase while the <xref:System.Diagnostics.Stopwatch> is running; they remain constant when the instance is stopped.</span></span>  
  
 <span data-ttu-id="0bebc-135">기본적으로 경과 된 시간 값을 <xref:System.Diagnostics.Stopwatch> 인스턴스가 모든 측정된 간격의 합계입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-135">By default, the elapsed time value of a <xref:System.Diagnostics.Stopwatch> instance equals the total of all measured time intervals.</span></span> <span data-ttu-id="0bebc-136">호출할 때마다 <xref:System.Diagnostics.Stopwatch.Start%2A> 누적 경과 된 시간;에서 계산을 시작를 호출할 때마다 <xref:System.Diagnostics.Stopwatch.Stop%2A> 현재 간격 측정을 종료 하 고 누적 경과 된 시간 값을 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-136">Each call to <xref:System.Diagnostics.Stopwatch.Start%2A> begins counting at the cumulative elapsed time; each call to <xref:System.Diagnostics.Stopwatch.Stop%2A> ends the current interval measurement and freezes the cumulative elapsed time value.</span></span> <span data-ttu-id="0bebc-137">사용 된 <xref:System.Diagnostics.Stopwatch.Reset%2A> 기존의 누적 경과 된 시간을 선택 취소 하는 방법 <xref:System.Diagnostics.Stopwatch> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="0bebc-137">Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method to clear the cumulative elapsed time in an existing <xref:System.Diagnostics.Stopwatch> instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bebc-138">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Diagnostics.Stopwatch.Elapsed%2A> 속성 응용 프로그램에 대 한 실행 시간을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-138">The following example demonstrates how to use the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> property to determine the execution time for an application.</span></span>  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      </Docs>
    </Member>
    <Member MemberName="ElapsedMilliseconds">
      <MemberSignature Language="C#" Value="public long ElapsedMilliseconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ElapsedMilliseconds" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElapsedMilliseconds As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ElapsedMilliseconds { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ElapsedMilliseconds : int64" Usage="System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0bebc-139">현재 인스턴스가 측정한 밀리초 단위의 총 경과 시간을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-139">Gets the total elapsed time measured by the current instance, in milliseconds.</span></span></summary>
        <value><span data-ttu-id="0bebc-140">현재 인스턴스가 측정한 총 밀리초 수를 나타내는 읽기 전용 정수(Long)입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-140">A read-only long integer representing the total number of milliseconds measured by the current instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bebc-141">이 속성에 가장 가까운 정수 밀리초 값 내림 하는 경과 된 시간을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-141">This property represents elapsed time rounded down to the nearest whole millisecond value.</span></span> <span data-ttu-id="0bebc-142">더 높은 정밀도 측정을 사용 합니다 <xref:System.Diagnostics.Stopwatch.Elapsed%2A> 또는 <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-142">For higher precision measurements, use the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> or <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> properties.</span></span>  
  
 <span data-ttu-id="0bebc-143">속성을 쿼리할 수 있습니다 <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, 및 <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> 하는 동안는 <xref:System.Diagnostics.Stopwatch> 인스턴스가 실행 중이거나 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-143">You can query the properties <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, and <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> while the <xref:System.Diagnostics.Stopwatch> instance is running or stopped.</span></span> <span data-ttu-id="0bebc-144">속성 꾸준히 증가 합니다. 경과 된 시간 동안은 <xref:System.Diagnostics.Stopwatch> 는 실행은 일정 하 게 유지 인스턴스가 중지 되는 경우.</span><span class="sxs-lookup"><span data-stu-id="0bebc-144">The elapsed time properties steadily increase while the <xref:System.Diagnostics.Stopwatch> is running; they remain constant when the instance is stopped.</span></span>  
  
 <span data-ttu-id="0bebc-145">기본적으로 경과 된 시간 값을 <xref:System.Diagnostics.Stopwatch> 인스턴스가 모든 측정된 간격의 합계입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-145">By default, the elapsed time value of a <xref:System.Diagnostics.Stopwatch> instance equals the total of all measured time intervals.</span></span> <span data-ttu-id="0bebc-146">호출할 때마다 <xref:System.Diagnostics.Stopwatch.Start%2A> 누적 경과 된 시간;에서 계산을 시작를 호출할 때마다 <xref:System.Diagnostics.Stopwatch.Stop%2A> 현재 간격 측정을 종료 하 고 누적 경과 된 시간 값을 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-146">Each call to <xref:System.Diagnostics.Stopwatch.Start%2A> begins counting at the cumulative elapsed time; each call to <xref:System.Diagnostics.Stopwatch.Stop%2A> ends the current interval measurement and freezes the cumulative elapsed time value.</span></span> <span data-ttu-id="0bebc-147">사용 된 <xref:System.Diagnostics.Stopwatch.Reset%2A> 기존의 누적 경과 된 시간을 선택 취소 하는 방법 <xref:System.Diagnostics.Stopwatch> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="0bebc-147">Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method to clear the cumulative elapsed time in an existing <xref:System.Diagnostics.Stopwatch> instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bebc-148">다음 예제에서는 <xref:System.Diagnostics.Stopwatch> 성능을 측정 하는 문자열에서 정수를 구문 분석 하기 위한 4 개의 다른 구현의 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-148">The following example uses the <xref:System.Diagnostics.Stopwatch> class to measure the performance of four different implementations for parsing an integer from a string.</span></span> <span data-ttu-id="0bebc-149">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Diagnostics.Stopwatch> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-149">This code example is part of a larger example provided for the <xref:System.Diagnostics.Stopwatch> class.</span></span>  
  
 [!code-cpp[StopWatchPerfSample#3](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#3)]
 [!code-csharp[StopWatchPerfSample#3](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#3)]
 [!code-vb[StopWatchPerfSample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Stopwatch.Elapsed" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      </Docs>
    </Member>
    <Member MemberName="ElapsedTicks">
      <MemberSignature Language="C#" Value="public long ElapsedTicks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ElapsedTicks" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElapsedTicks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ElapsedTicks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ElapsedTicks : int64" Usage="System.Diagnostics.Stopwatch.ElapsedTicks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0bebc-150">현재 인스턴스가 측정한 총 경과 시간(타이머 틱 수)을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-150">Gets the total elapsed time measured by the current instance, in timer ticks.</span></span></summary>
        <value><span data-ttu-id="0bebc-151">현재 인스턴스가 측정한 총 타이머 틱 수를 나타내는 읽기 전용 정수(Long)입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-151">A read-only long integer representing the total number of timer ticks measured by the current instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bebc-152">이 속성은 내부 타이머 메커니즘에서 경과 된 틱 수를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-152">This property represents the number of elapsed ticks in the underlying timer mechanism.</span></span> <span data-ttu-id="0bebc-153">틱 하나는 최소 시간 단위는는 <xref:System.Diagnostics.Stopwatch> 타이머를 측정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-153">A tick is the smallest unit of time that the <xref:System.Diagnostics.Stopwatch> timer can measure.</span></span> <span data-ttu-id="0bebc-154">사용 하 여는 <xref:System.Diagnostics.Stopwatch.Frequency> 변환할 필드는 <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> 시간 (초) 수에는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-154">Use the <xref:System.Diagnostics.Stopwatch.Frequency> field to convert the <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> value into a number of seconds.</span></span>  
  
 <span data-ttu-id="0bebc-155">속성을 쿼리할 수 있습니다 <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, 및 <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> 하는 동안는 <xref:System.Diagnostics.Stopwatch> 인스턴스가 실행 중이거나 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-155">You can query the properties <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, and <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> while the <xref:System.Diagnostics.Stopwatch> instance is running or stopped.</span></span> <span data-ttu-id="0bebc-156">속성 꾸준히 증가 합니다. 경과 된 시간 동안은 <xref:System.Diagnostics.Stopwatch> 는 실행은 일정 하 게 유지 인스턴스가 중지 되는 경우.</span><span class="sxs-lookup"><span data-stu-id="0bebc-156">The elapsed time properties steadily increase while the <xref:System.Diagnostics.Stopwatch> is running; they remain constant when the instance is stopped.</span></span>  
  
 <span data-ttu-id="0bebc-157">기본적으로 경과 된 시간 값을 <xref:System.Diagnostics.Stopwatch> 인스턴스가 모든 측정된 간격의 합계입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-157">By default, the elapsed time value of a <xref:System.Diagnostics.Stopwatch> instance equals the total of all measured time intervals.</span></span> <span data-ttu-id="0bebc-158">호출할 때마다 <xref:System.Diagnostics.Stopwatch.Start%2A> 누적 경과 된 시간;에서 계산을 시작를 호출할 때마다 <xref:System.Diagnostics.Stopwatch.Stop%2A> 현재 간격 측정을 종료 하 고 누적 경과 된 시간 값을 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-158">Each call to <xref:System.Diagnostics.Stopwatch.Start%2A> begins counting at the cumulative elapsed time; each call to <xref:System.Diagnostics.Stopwatch.Stop%2A> ends the current interval measurement and freezes the cumulative elapsed time value.</span></span> <span data-ttu-id="0bebc-159">사용 된 <xref:System.Diagnostics.Stopwatch.Reset%2A> 기존의 누적 경과 된 시간을 선택 취소 하는 방법 <xref:System.Diagnostics.Stopwatch> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="0bebc-159">Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method to clear the cumulative elapsed time in an existing <xref:System.Diagnostics.Stopwatch> instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0bebc-160"><xref:System.Diagnostics.Stopwatch> 틱 다릅니다 <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-160"><xref:System.Diagnostics.Stopwatch> ticks are different from <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0bebc-161">각 틱은 <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType> 값 하나의 100 나노초 간격을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-161">Each tick in the <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType> value represents one 100-nanosecond interval.</span></span> <span data-ttu-id="0bebc-162">각 틱 합니다 <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> 값으로 나눈 1 초 시간 간격을 나타내는 <xref:System.Diagnostics.Stopwatch.Frequency>합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-162">Each tick in the <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> value represents the time interval equal to 1 second divided by the <xref:System.Diagnostics.Stopwatch.Frequency>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bebc-163">다음 예제에서는 <xref:System.Diagnostics.Stopwatch> 성능을 측정 하는 문자열에서 정수를 구문 분석 하기 위한 4 개의 다른 구현의 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-163">The following example uses the <xref:System.Diagnostics.Stopwatch> class to measure the performance of four different implementations for parsing an integer from a string.</span></span> <span data-ttu-id="0bebc-164">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Diagnostics.Stopwatch> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-164">This code example is part of a larger example provided for the <xref:System.Diagnostics.Stopwatch> class.</span></span>  
  
 [!code-cpp[StopWatchPerfSample#4](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#4)]
 [!code-csharp[StopWatchPerfSample#4](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#4)]
 [!code-vb[StopWatchPerfSample#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Stopwatch.Elapsed" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
        <altmember cref="F:System.Diagnostics.Stopwatch.Frequency" />
      </Docs>
    </Member>
    <Member MemberName="Frequency">
      <MemberSignature Language="C#" Value="public static readonly long Frequency;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly int64 Frequency" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.Stopwatch.Frequency" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Frequency As Long " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly long Frequency;" />
      <MemberSignature Language="F#" Value=" staticval mutable Frequency : int64" Usage="System.Diagnostics.Stopwatch.Frequency" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0bebc-165">초당 틱 수로 나타낸 타이머 진동수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-165">Gets the frequency of the timer as the number of ticks per second.</span></span> <span data-ttu-id="0bebc-166">이 필드는 읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-166">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bebc-167">타이머 간격 타이머 정밀도 정확도 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-167">The timer frequency indicates the timer precision and resolution.</span></span> <span data-ttu-id="0bebc-168">예를 들어 2 백만 타이머 빈도는 틱 당 500 나노초 타이머 해상도 두 번째 equals 당 틱입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-168">For example, a timer frequency of 2 million ticks per second equals a timer resolution of 500 nanoseconds per tick.</span></span> <span data-ttu-id="0bebc-169">즉, 1 초가 십억 1 나노초 인 때문에 초당 틱 2 백만 타이머 빈도 2 백만 틱 당 500 (나노초) 당 1 개 틱 자세한 단순화할 수 있습니다. 한 1 십억 (나노초)에 해당 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-169">In other words, because one second equals 1 billion nanoseconds, a timer frequency of 2 million ticks per second is equivalent to 2 million ticks per 1 billion nanoseconds, which can be further simplified to 1 tick per 500 nanoseconds.</span></span>  
  
 <span data-ttu-id="0bebc-170"><xref:System.Diagnostics.Stopwatch.Frequency> 값은 내부 타이밍 메커니즘의 해상도에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-170">The <xref:System.Diagnostics.Stopwatch.Frequency> value depends on the resolution of the underlying timing mechanism.</span></span> <span data-ttu-id="0bebc-171">설치 된 하드웨어 및 운영 체제에서 고해상도 성능 카운터를 지 원하는 경우 해당 <xref:System.Diagnostics.Stopwatch.Frequency> 값은 해당 카운터 빈도 반영 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-171">If the installed hardware and operating system support a high-resolution performance counter, then the <xref:System.Diagnostics.Stopwatch.Frequency> value reflects the frequency of that counter.</span></span> <span data-ttu-id="0bebc-172">그렇지 않은 경우는 <xref:System.Diagnostics.Stopwatch.Frequency> 시스템 타이머 빈도 기준으로 하는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-172">Otherwise, the <xref:System.Diagnostics.Stopwatch.Frequency> value is based on the system timer frequency.</span></span>  
  
 <span data-ttu-id="0bebc-173">때문에 합니다 <xref:System.Diagnostics.Stopwatch> 빈도 설치 된 하드웨어 및 운영 체제에 따라 달라 집니다는 <xref:System.Diagnostics.Stopwatch.Frequency> 시스템에서 실행 되는 동안 값 그대로입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-173">Because the <xref:System.Diagnostics.Stopwatch> frequency depends on the installed hardware and operating system, the <xref:System.Diagnostics.Stopwatch.Frequency> value remains constant while the system is running.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bebc-174">다음 예제에서는 빈도 해상도 <xref:System.Diagnostics.Stopwatch> 타이머입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-174">The following example displays the frequency and resolution of a <xref:System.Diagnostics.Stopwatch> timer.</span></span> <span data-ttu-id="0bebc-175">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Diagnostics.Stopwatch> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-175">This code example is part of a larger example provided for the <xref:System.Diagnostics.Stopwatch> class.</span></span>  
  
 [!code-cpp[StopWatchPerfSample#2](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#2)]
 [!code-csharp[StopWatchPerfSample#2](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#2)]
 [!code-vb[StopWatchPerfSample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      </Docs>
    </Member>
    <Member MemberName="GetTimestamp">
      <MemberSignature Language="C#" Value="public static long GetTimestamp ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetTimestamp() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.GetTimestamp" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTimestamp () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long GetTimestamp();" />
      <MemberSignature Language="F#" Value="static member GetTimestamp : unit -&gt; int64" Usage="System.Diagnostics.Stopwatch.GetTimestamp " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0bebc-176">타이머 메커니즘에서 현재 틱 수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-176">Gets the current number of ticks in the timer mechanism.</span></span></summary>
        <returns><span data-ttu-id="0bebc-177">내부 타이머 메커니즘의 틱 카운터 값을 나타내는 정수(Long)입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-177">A long integer representing the tick counter value of the underlying timer mechanism.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bebc-178">경우는 <xref:System.Diagnostics.Stopwatch> 클래스에서 고해상도 성능 카운터를 사용 하 여 <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> 해당 카운터의 현재 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-178">If the <xref:System.Diagnostics.Stopwatch> class uses a high-resolution performance counter, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> returns the current value of that counter.</span></span> <span data-ttu-id="0bebc-179">경우는 <xref:System.Diagnostics.Stopwatch> 클래스에는 시스템 타이머를 사용 하 <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> 현재 반환 <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType> 의 속성을 <xref:System.DateTime.Now%2A?displayProperty=nameWithType> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="0bebc-179">If the <xref:System.Diagnostics.Stopwatch> class uses the system timer, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> returns the current <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType> property of the <xref:System.DateTime.Now%2A?displayProperty=nameWithType> instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bebc-180">다음 예제를 사용 하 여 <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> 성능 카운터를 업데이트 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-180">The following example illustrates the use of the <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> method to update a performance counter.</span></span>  
  
 [!code-cpp[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/CPP/elapsedtime.cpp#2)]
 [!code-csharp[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/CS/elapsedtime.cs#2)]
 [!code-vb[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/VB/elapsedtime.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      </Docs>
    </Member>
    <Member MemberName="IsHighResolution">
      <MemberSignature Language="C#" Value="public static readonly bool IsHighResolution;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly bool IsHighResolution" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsHighResolution As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly bool IsHighResolution;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsHighResolution : bool" Usage="System.Diagnostics.Stopwatch.IsHighResolution" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0bebc-181">타이머가 고정밀도 성능 카운터를 기반으로 하는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-181">Indicates whether the timer is based on a high-resolution performance counter.</span></span> <span data-ttu-id="0bebc-182">이 필드는 읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-182">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bebc-183">사용 하는 타이머를 <xref:System.Diagnostics.Stopwatch> 클래스는 시스템 하드웨어 및 운영 체제에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-183">The timer used by the <xref:System.Diagnostics.Stopwatch> class depends on the system hardware and operating system.</span></span> <span data-ttu-id="0bebc-184"><xref:System.Diagnostics.Stopwatch.IsHighResolution> 됩니다 `true` 경우는 <xref:System.Diagnostics.Stopwatch> 타이머가 고해상도 성능 카운터를 기반으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-184"><xref:System.Diagnostics.Stopwatch.IsHighResolution> is `true` if the <xref:System.Diagnostics.Stopwatch> timer is based on a high-resolution performance counter.</span></span> <span data-ttu-id="0bebc-185">이 고, 그렇지 <xref:System.Diagnostics.Stopwatch.IsHighResolution> 됩니다 `false`를 나타내는 <xref:System.Diagnostics.Stopwatch> 시스템 타이머를 기반으로 하는 타이머입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-185">Otherwise, <xref:System.Diagnostics.Stopwatch.IsHighResolution> is `false`, which indicates that the <xref:System.Diagnostics.Stopwatch> timer is based on the system timer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bebc-186">다음 예제에서는 빈도 해상도 <xref:System.Diagnostics.Stopwatch> 타이머입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-186">The following example displays the frequency and resolution of a <xref:System.Diagnostics.Stopwatch> timer.</span></span> <span data-ttu-id="0bebc-187">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Diagnostics.Stopwatch> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-187">This code example is part of a larger example provided for the <xref:System.Diagnostics.Stopwatch> class.</span></span>  
  
 [!code-cpp[StopWatchPerfSample#2](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#2)]
 [!code-csharp[StopWatchPerfSample#2](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#2)]
 [!code-vb[StopWatchPerfSample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.Frequency" />
      </Docs>
    </Member>
    <Member MemberName="IsRunning">
      <MemberSignature Language="C#" Value="public bool IsRunning { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRunning" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.IsRunning" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRunning As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRunning { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsRunning : bool" Usage="System.Diagnostics.Stopwatch.IsRunning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0bebc-188"><see cref="T:System.Diagnostics.Stopwatch" /> 타이머가 실행 중인지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-188">Gets a value indicating whether the <see cref="T:System.Diagnostics.Stopwatch" /> timer is running.</span></span></summary>
        <value><span data-ttu-id="0bebc-189">현재 <see cref="T:System.Diagnostics.Stopwatch" /> 인스턴스가 간격의 경과 시간을 측정하면서 실행되고 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-189"><see langword="true" /> if the <see cref="T:System.Diagnostics.Stopwatch" /> instance is currently running and measuring elapsed time for an interval; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bebc-190">A <xref:System.Diagnostics.Stopwatch> 에 대 한 호출을 사용 하 여 실행을 시작 하는 인스턴스 <xref:System.Diagnostics.Stopwatch.Start%2A> 또는 <xref:System.Diagnostics.Stopwatch.StartNew%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-190">A <xref:System.Diagnostics.Stopwatch> instance begins running with a call to <xref:System.Diagnostics.Stopwatch.Start%2A> or <xref:System.Diagnostics.Stopwatch.StartNew%2A>.</span></span> <span data-ttu-id="0bebc-191">호출 하 여 실행을 중지 <xref:System.Diagnostics.Stopwatch.Stop%2A> 또는 <xref:System.Diagnostics.Stopwatch.Reset%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-191">The instance stops running with a call to <xref:System.Diagnostics.Stopwatch.Stop%2A> or <xref:System.Diagnostics.Stopwatch.Reset%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="stopwatch.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0bebc-192">시간 간격 측정을 중지하고 경과 시간을 0으로 다시 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-192">Stops time interval measurement and resets the elapsed time to zero.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bebc-193"><xref:System.Diagnostics.Stopwatch> 인스턴스 계산 하 고 인스턴스 재설정 될 때까지 여러 시간 간격의 누적 경과 시간을 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-193">A <xref:System.Diagnostics.Stopwatch> instance calculates and retains the cumulative elapsed time across multiple time intervals, until the instance is reset.</span></span> <span data-ttu-id="0bebc-194">사용 하 여 <xref:System.Diagnostics.Stopwatch.Stop%2A> 현재 간격 측정을 중지 하 여 누적 경과 된 시간 값을 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-194">Use <xref:System.Diagnostics.Stopwatch.Stop%2A> to stop the current interval measurement and retain the cumulative elapsed time value.</span></span> <span data-ttu-id="0bebc-195">사용 하 여 <xref:System.Diagnostics.Stopwatch.Reset%2A> 진행 중인 모든 간격 측정을 중지 하 고 경과 된 시간 값을 선택 취소 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-195">Use <xref:System.Diagnostics.Stopwatch.Reset%2A> to stop any interval measurement in progress and clear the elapsed time value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
      </Docs>
    </Member>
    <Member MemberName="Restart">
      <MemberSignature Language="C#" Value="public void Restart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Restart() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Restart" />
      <MemberSignature Language="VB.NET" Value="Public Sub Restart ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Restart();" />
      <MemberSignature Language="F#" Value="member this.Restart : unit -&gt; unit" Usage="stopwatch.Restart " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0bebc-196">시간 간격 측정을 중지하고 경과 시간 값을 0으로 다시 설정한 다음 경과 시간 측정을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-196">Stops time interval measurement, resets the elapsed time to zero, and starts measuring elapsed time.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bebc-197"><xref:System.Diagnostics.Stopwatch> 인스턴스 계산 하 고 인스턴스를 다시 설정 되거나 다시 시작 될 때까지 여러 시간 간격의 누적 경과 시간을 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-197">A <xref:System.Diagnostics.Stopwatch> instance calculates and retains the cumulative elapsed time across multiple time intervals, until the instance is reset or restarted.</span></span> <span data-ttu-id="0bebc-198">사용 하 여 <xref:System.Diagnostics.Stopwatch.Stop%2A> 현재 간격 측정을 중지 하 여 누적 경과 된 시간 값을 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-198">Use <xref:System.Diagnostics.Stopwatch.Stop%2A> to stop the current interval measurement and retain the cumulative elapsed time value.</span></span> <span data-ttu-id="0bebc-199">사용 하 여 <xref:System.Diagnostics.Stopwatch.Reset%2A> 진행 중인 모든 간격 측정을 중지 하 고 경과 된 시간 값을 선택 취소 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-199">Use <xref:System.Diagnostics.Stopwatch.Reset%2A> to stop any interval measurement in progress and clear the elapsed time value.</span></span> <span data-ttu-id="0bebc-200">사용 하 여 <xref:System.Diagnostics.Stopwatch.Restart%2A> 현재 간격 측정을 중지 하 고 새 간격 측정을 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-200">Use <xref:System.Diagnostics.Stopwatch.Restart%2A> to stop current interval measurement and start a new interval measurement.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="stopwatch.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0bebc-201">간격에 대한 경과 시간 측정을 시작하거나 다시 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-201">Starts, or resumes, measuring elapsed time for an interval.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bebc-202">일반적인 <xref:System.Diagnostics.Stopwatch> 호출 하는 경우는 <xref:System.Diagnostics.Stopwatch.Start%2A> 메서드를 최종적으로 호출 합니다 <xref:System.Diagnostics.Stopwatch.Stop%2A> 메서드를 다음 경과 시간 사용 하 여 확인는 <xref:System.Diagnostics.Stopwatch.Elapsed%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-202">In a typical <xref:System.Diagnostics.Stopwatch> scenario, you call the <xref:System.Diagnostics.Stopwatch.Start%2A> method, then eventually call the <xref:System.Diagnostics.Stopwatch.Stop%2A> method, and then you check elapsed time using the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> property.</span></span>  
  
 <span data-ttu-id="0bebc-203">일단 시작 된 <xref:System.Diagnostics.Stopwatch> 타이머 인스턴스가 중지 되었거나 다시 설정 될 때까지 경과 된 타이머 틱에서 현재 간격을 측정 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-203">Once started, a <xref:System.Diagnostics.Stopwatch> timer measures the current interval, in elapsed timer ticks, until the instance is stopped or reset.</span></span> <span data-ttu-id="0bebc-204">시작을 <xref:System.Diagnostics.Stopwatch> 즉 이미 실행 되는 타이머 상태를 변경 않거나 경과 시간 속성을 다시 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-204">Starting a <xref:System.Diagnostics.Stopwatch> that is already running does not change the timer state or reset the elapsed time properties.</span></span>  
  
 <span data-ttu-id="0bebc-205">경우는 <xref:System.Diagnostics.Stopwatch> 개 간격을 측정 하는 인스턴스는 <xref:System.Diagnostics.Stopwatch.Start%2A> 메서드를 다시 시작 현재 경과 된 시간 값에서 시간을 측정 하기.</span><span class="sxs-lookup"><span data-stu-id="0bebc-205">When a <xref:System.Diagnostics.Stopwatch> instance measures more than one interval, the <xref:System.Diagnostics.Stopwatch.Start%2A> method resumes measuring time from the current elapsed time value.</span></span> <span data-ttu-id="0bebc-206"><xref:System.Diagnostics.Stopwatch> 인스턴스 계산 하 고 인스턴스 재설정 될 때까지 여러 시간 간격의 누적 경과 시간을 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-206">A <xref:System.Diagnostics.Stopwatch> instance calculates and retains the cumulative elapsed time across multiple time intervals, until the instance is reset.</span></span> <span data-ttu-id="0bebc-207">사용 된 <xref:System.Diagnostics.Stopwatch.Reset%2A> 메서드를 호출 하기 전에 <xref:System.Diagnostics.Stopwatch.Start%2A> 누적 경과 된 시간을 선택 취소를 <xref:System.Diagnostics.Stopwatch> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="0bebc-207">Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method before calling <xref:System.Diagnostics.Stopwatch.Start%2A> to clear the cumulative elapsed time in a <xref:System.Diagnostics.Stopwatch> instance.</span></span> <span data-ttu-id="0bebc-208">사용 하 여는 <xref:System.Diagnostics.Stopwatch.Restart%2A> 메서드를 <xref:System.Diagnostics.Stopwatch.Reset%2A> 하 고 <xref:System.Diagnostics.Stopwatch.Start%2A> 는 <xref:System.Diagnostics.Stopwatch> 단일 명령으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-208">Use the <xref:System.Diagnostics.Stopwatch.Restart%2A> method to <xref:System.Diagnostics.Stopwatch.Reset%2A> and <xref:System.Diagnostics.Stopwatch.Start%2A> the <xref:System.Diagnostics.Stopwatch> with a single command.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bebc-209">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Diagnostics.Stopwatch.Start%2A> 응용 프로그램의 실행 시간을 측정 하는 타이머를 시작 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-209">The following example demonstrates how to use the <xref:System.Diagnostics.Stopwatch.Start%2A> method to start a timer that measures the execution time of an application.</span></span>  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Stopwatch StartNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Stopwatch StartNew() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.StartNew" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StartNew () As Stopwatch" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Stopwatch ^ StartNew();" />
      <MemberSignature Language="F#" Value="static member StartNew : unit -&gt; System.Diagnostics.Stopwatch" Usage="System.Diagnostics.Stopwatch.StartNew " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Stopwatch</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0bebc-210">새 <see cref="T:System.Diagnostics.Stopwatch" /> 인스턴스를 초기화하고 경과 시간 속성을 0으로 설정한 다음 경과 시간 측정을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-210">Initializes a new <see cref="T:System.Diagnostics.Stopwatch" /> instance, sets the elapsed time property to zero, and starts measuring elapsed time.</span></span></summary>
        <returns><span data-ttu-id="0bebc-211">경과 시간 측정을 방금 시작한 <see cref="T:System.Diagnostics.Stopwatch" />입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-211">A <see cref="T:System.Diagnostics.Stopwatch" /> that has just begun measuring elapsed time.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bebc-212">이 메서드는 호출에 해당 하는 <xref:System.Diagnostics.Stopwatch> 생성자를 호출한 다음 <xref:System.Diagnostics.Stopwatch.Start%2A> 새 인스턴스에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-212">This method is equivalent to calling the <xref:System.Diagnostics.Stopwatch> constructor and then calling <xref:System.Diagnostics.Stopwatch.Start%2A> on the new instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bebc-213">다음 예제에서는 <xref:System.Diagnostics.Stopwatch> 성능을 측정 하는 문자열에서 정수를 구문 분석 하기 위한 4 개의 다른 구현의 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-213">The following example uses the <xref:System.Diagnostics.Stopwatch> class to measure the performance of four different implementations for parsing an integer from a string.</span></span> <span data-ttu-id="0bebc-214">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Diagnostics.Stopwatch> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-214">This code example is part of a larger example provided for the <xref:System.Diagnostics.Stopwatch> class.</span></span>  
  
 [!code-cpp[StopWatchPerfSample#4](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#4)]
 [!code-csharp[StopWatchPerfSample#4](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#4)]
 [!code-vb[StopWatchPerfSample#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="stopwatch.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0bebc-215">간격에 대한 경과 시간 측정을 중지합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-215">Stops measuring elapsed time for an interval.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0bebc-216">일반적인 <xref:System.Diagnostics.Stopwatch> 호출 하는 경우는 <xref:System.Diagnostics.Stopwatch.Start%2A> 메서드를 최종적으로 호출 합니다 <xref:System.Diagnostics.Stopwatch.Stop%2A> 메서드를 다음 경과 시간 사용 하 여 확인는 <xref:System.Diagnostics.Stopwatch.Elapsed%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-216">In a typical <xref:System.Diagnostics.Stopwatch> scenario, you call the <xref:System.Diagnostics.Stopwatch.Start%2A> method, then eventually call the <xref:System.Diagnostics.Stopwatch.Stop%2A> method, and then you check elapsed time using the <xref:System.Diagnostics.Stopwatch.Elapsed%2A> property.</span></span>  
  
 <span data-ttu-id="0bebc-217"><xref:System.Diagnostics.Stopwatch.Stop%2A> 메서드는 현재 시간 간격 측정을 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-217">The <xref:System.Diagnostics.Stopwatch.Stop%2A> method ends the current time interval measurement.</span></span> <span data-ttu-id="0bebc-218">중지는 <xref:System.Diagnostics.Stopwatch> 즉 실행 되 고 있지 않습니다 타이머 상태를 변경 하거나 하지 경과 시간 속성을 다시 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-218">Stopping a <xref:System.Diagnostics.Stopwatch> that is not running does not change the timer state or reset the elapsed time properties.</span></span>  
  
 <span data-ttu-id="0bebc-219">경우는 <xref:System.Diagnostics.Stopwatch> 개 간격을 측정 하는 인스턴스는 <xref:System.Diagnostics.Stopwatch.Stop%2A> 경과 시간 측정을 일시 중지 하는 것과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-219">When a <xref:System.Diagnostics.Stopwatch> instance measures more than one interval, the <xref:System.Diagnostics.Stopwatch.Stop%2A> method is equivalent to pausing the elapsed time measurement.</span></span> <span data-ttu-id="0bebc-220">에 대 한 후속 호출 <xref:System.Diagnostics.Stopwatch.Start%2A> 현재 경과 된 시간 값에서 시간을 측정 하는 다시 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-220">A subsequent call to <xref:System.Diagnostics.Stopwatch.Start%2A> resumes measuring time from the current elapsed time value.</span></span> <span data-ttu-id="0bebc-221">사용 된 <xref:System.Diagnostics.Stopwatch.Reset%2A> 누적 경과 된 시간을 선택 취소 하는 방법을 <xref:System.Diagnostics.Stopwatch> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="0bebc-221">Use the <xref:System.Diagnostics.Stopwatch.Reset%2A> method to clear the cumulative elapsed time in a <xref:System.Diagnostics.Stopwatch> instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0bebc-222">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Diagnostics.Stopwatch.Stop%2A> 응용 프로그램의 실행 시간을 측정 하는 타이머를 중지 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="0bebc-222">The following example demonstrates how to use the <xref:System.Diagnostics.Stopwatch.Stop%2A> method to stop a timer that measures the execution time of an application.</span></span>  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
  </Members>
</Type>