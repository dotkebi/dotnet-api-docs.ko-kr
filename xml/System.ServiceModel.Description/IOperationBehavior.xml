<Type Name="IOperationBehavior" FullName="System.ServiceModel.Description.IOperationBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d805980f3bc0d488ae8ead6ec3869804ad804738" /><Meta Name="ms.sourcegitcommit" Value="7461f9e28c2f184bd1596e6f07c25a3f34984516" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/28/2019" /><Meta Name="ms.locfileid" Value="58556763" /></Metadata><TypeSignature Language="C#" Value="public interface IOperationBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IOperationBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IOperationBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IOperationBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IOperationBehavior" />
  <TypeSignature Language="F#" Value="type IOperationBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="51542-101">서비스 또는 클라이언트 응용 프로그램에서 작업에 대한 런타임 동작을 확장하는 데 사용할 수 있는 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="51542-101">Implements methods that can be used to extend run-time behavior for an operation in either a service or client application.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="51542-102">클라이언트 또는 서버 응용 프로그램에 대해 응용 프로그램 수준에서 작업 차원 실행의 일부 측면을 수정, 검사 또는 확장하기 위한 <xref:System.ServiceModel.Description.IOperationBehavior> 인터페이스를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="51542-102">Implement the <xref:System.ServiceModel.Description.IOperationBehavior> interface to modify, examine, or extend some aspect of operation-wide execution at the application level for either client or service applications.</span></span>  
  
-   <span data-ttu-id="51542-103">바인딩에서 사용자 지정 동작을 지원할 수 있도록 런타임에 사용자 지정 데이터를 전달하려면 <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A> 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="51542-103">Use the <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A> method to pass custom data at runtime to enable bindings to support custom behavior.</span></span>  
  
-   <span data-ttu-id="51542-104">클라이언트 응용 프로그램에서 클라이언트 디스패처에 대한 확장을 수정, 검사 또는 삽입하려면 <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="51542-104">Use the <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> method to modify, examine, or insert extensions to a client dispatcher in a client application.</span></span>  
  
-   <span data-ttu-id="51542-105">클라이언트 응용 프로그램에서 작업 차원의 실행에 대한 확장을 수정, 검사 또는 삽입하려면 <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="51542-105">Use the <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> method to modify, examine, or insert extensions to operation-wide execution in a service application.</span></span>  
  
-   <span data-ttu-id="51542-106"><xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A>가 특정 요구 사항을 충족하는지 확인하려면 <xref:System.ServiceModel.Description.OperationDescription> 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="51542-106">Use the <xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A> method to confirm that a <xref:System.ServiceModel.Description.OperationDescription> meets specific requirements.</span></span> <span data-ttu-id="51542-107">이 메서드는 작업에서 특정 구성 설정을 사용하고 특정 기능과 기타 요구 사항을 지원하는지를 확인하기 위해 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="51542-107">This can be used to ensure that an operation has a certain configuration setting enabled, supports a particular feature and other requirements.</span></span>  
  
 <span data-ttu-id="51542-108"><xref:System.ServiceModel.Description.IOperationBehavior> 개체는 이러한 메서드 중 아무 메서드나 사용할 수 있지만 그 중 하나만 사용되는 경우가 많으며 사용되지 않은 메서드는 아무 동작도 수행하지 않고 반환될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="51542-108"><xref:System.ServiceModel.Description.IOperationBehavior> objects can make use of any of these methods, but often only one is important; in such cases, the unused methods can return, performing no action.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="51542-109">모든 <xref:System.ServiceModel.Description.IOperationBehavior> 메서드는 <xref:System.ServiceModel.Description.OperationDescription> 개체를 매개 변수로 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="51542-109">All of the <xref:System.ServiceModel.Description.IOperationBehavior> methods pass an <xref:System.ServiceModel.Description.OperationDescription> object as a parameter.</span></span> <span data-ttu-id="51542-110">이 매개 변수는 검사 전용이므로 <xref:System.ServiceModel.Description.OperationDescription> 개체를 수정할 경우 실행 동작은 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="51542-110">This parameter is for examination only; if you modify the <xref:System.ServiceModel.Description.OperationDescription> object the execution behavior is undefined.</span></span>  
  
 <span data-ttu-id="51542-111"><xref:System.ServiceModel.Description.IOperationBehavior> 개체는 일반적으로 서비스 응용 프로그램의 다양한 <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> 개체 속성과 클라이언트 응용 프로그램의 다양한 <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> 개체 속성을 액세스하는 데 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="51542-111"><xref:System.ServiceModel.Description.IOperationBehavior> objects are typically used to access the various properties of the <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> object in a service application and the <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> object in a client application.</span></span>  
  
 <span data-ttu-id="51542-112">일반적으로 개발자는 먼저 확장성 지점을 검토하여 응용 프로그램 시나리오에 적합한 사용자 지정 옵션을 결정한 다음 해당 범위에서 사용자 지정을 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="51542-112">Typically, the developer first reviews the extensibility points to determine which customization option suits the application scenario and then implements the customization at the appropriate scope.</span></span> <span data-ttu-id="51542-113">예를 들어, <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> 개체는 전체 서비스의 모든 메시지에 대해 사용자 지정을 삽입하고, <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> 개체는 특정 계약의 모든 메시지에 대해 사용자 지정을 삽입할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="51542-113">For example, <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> objects can insert customizations for all messages in an entire service and <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> objects can insert customizations for all messages across a specific contract, and so on.</span></span> <span data-ttu-id="51542-114">다양 한 속성 및 사용자 지정을 사용에 대 한 참조 [Extending ServiceHost 및 서비스 모델 계층](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="51542-114">For a description of the various properties and customizations available, see [Extending ServiceHost and the Service Model Layer](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).</span></span>  
  
 <span data-ttu-id="51542-115">사용자 지정 시 결정 된 (및 필요한 경우 사용자 지정 인터페이스가 구현) 되 면 및 <xref:System.ServiceModel.Description.IOperationBehavior> 적절 한 범위는 사용자 지정의 사용자 지정 Windows Communication Foundation (WCF) 런타임에 삽입 합니다 구현 하 여 <xref:System.ServiceModel.Description.IOperationBehavior> 런타임에 작업 동작을 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="51542-115">Once a customization has been decided upon (and the customization interface implemented if necessary) and the <xref:System.ServiceModel.Description.IOperationBehavior> is the appropriate scope of customization, the customization must be inserted into the Windows Communication Foundation (WCF) runtime by implementing <xref:System.ServiceModel.Description.IOperationBehavior> and adding the operation behavior to the runtime.</span></span>  
  
 <span data-ttu-id="51542-116">다음과 같은 두 가지 방법으로 런타임에 <xref:System.ServiceModel.Description.IOperationBehavior>를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="51542-116">There are two ways to add the <xref:System.ServiceModel.Description.IOperationBehavior> to the runtime:</span></span>  
  
-   <span data-ttu-id="51542-117">서비스 응용 프로그램의 서비스 호스트 또는 클라이언트 응용 프로그램의 채널 팩터리를 열기 전에 <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> 속성에 사용자 지정 작업 동작을 프로그래밍 방식으로 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="51542-117">Programmatically add the custom operation behavior to the <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> property prior to the opening of the service host (in a service application) or the channel factory (in a client application).</span></span>  
  
-   <span data-ttu-id="51542-118">사용자 지정 특성을 사용하여 동작을 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="51542-118">Add the behavior using a custom attribute.</span></span>  
  
 <span data-ttu-id="51542-119">원하는 대상에 서비스 사용자 지정 작업을 수행하려면 <xref:System.ServiceModel.Description.IOperationBehavior>에서 <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> 메서드를 호출할 때 발생하는 서비스 런타임 생성이 이루어지기 전에 <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> 개체를 <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> 속성에 추가해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="51542-119">To perform the service customization task for which it is intended, the <xref:System.ServiceModel.Description.IOperationBehavior> object must be added to the <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> property prior to the construction of the service runtime, which occurs when <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> method is called on <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>.</span></span> <span data-ttu-id="51542-120">클라이언트 사용자 지정 작업을 수행하려면 <xref:System.ServiceModel.Description.IOperationBehavior>에서 <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> 메서드 또는 <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> 메서드를 호출하기 전에 <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> 개체를 <xref:System.ServiceModel.ChannelFactory%601> 속성에 추가해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="51542-120">To perform a client customization task, the <xref:System.ServiceModel.Description.IOperationBehavior> object must be added to the <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> property before calling the <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> method or the <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> method on <xref:System.ServiceModel.ChannelFactory%601>.</span></span>  
  
 <span data-ttu-id="51542-121">작업 동작의 용도는 개별 작업 범위 내에서 런타임에 쉽게 액세스하기 위한 것이지만 범위를 넓혀 부모 런타임 개체에 액세스함으로써 런타임에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="51542-121">Although the operation behavior is designed for easy access to the runtime at the scope of an individual operation, you can access the runtime at a larger scope by accessing the parent runtime object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="51542-122">다음 코드 예제에서는 작업에서 검사자가 호출될 때 콘솔에 쓰는 <xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType> 구현을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="51542-122">The following code example shows an implementation of <xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType> that writes to the console when the inspector is invoked on an operation.</span></span> <span data-ttu-id="51542-123">이 사용자 지정은 <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> 또는 <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType>에만 연결되므로 일반적으로 작업 동작에 의해 삽입됩니다.</span><span class="sxs-lookup"><span data-stu-id="51542-123">This customization can only be attached to the <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> or <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> and is therefore usually inserted by an operation behavior.</span></span>  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 <span data-ttu-id="51542-124">다음 코드 예제에서는 작업 동작이 매개 변수 검사자를 런타임에 연결하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="51542-124">The following code example shows how the operation behavior attaches the parameter inspector to the runtime.</span></span>  
  
 [!code-csharp[Interceptors#6](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#6)]
 [!code-vb[Interceptors#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.OperationDescription operationDescription, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::OperationDescription ^ operationDescription, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.OperationDescription * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iOperationBehavior.AddBindingParameters (operationDescription, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="operationDescription"><span data-ttu-id="51542-125">검사할 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="51542-125">The operation being examined.</span></span> <span data-ttu-id="51542-126">검사 전용이므로</span><span class="sxs-lookup"><span data-stu-id="51542-126">Use for examination only.</span></span> <span data-ttu-id="51542-127">작업 설명이 수정될 경우 결과가 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="51542-127">If the operation description is modified, the results are undefined.</span></span></param>
        <param name="bindingParameters"><span data-ttu-id="51542-128">바인딩 요소가 동작을 지원해야 하는 개체 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="51542-128">The collection of objects that binding elements require to support the behavior.</span></span></param>
        <summary><span data-ttu-id="51542-129">런타임에 바인딩에 데이터를 전달하여 사용자 지정 동작을 지원하려면 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="51542-129">Implement to pass data at runtime to bindings to support custom behavior.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="51542-130">작업 동작을 지원하는 데 필요한 추가 개체를 바인딩 요소에 제공하려면 <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A> 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="51542-130">Implement the <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A> method to provide binding elements with the extra objects they require to support the operation behavior.</span></span> <span data-ttu-id="51542-131">바인딩 매개 변수가 여기에 추가되면 채널 수신기나 채널 팩터리가 생성될 때 바인딩이 이러한 개체를 찾아 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="51542-131">When binding parameters are added here, the binding can locate and process these objects when the channel listener or channel factory is created.</span></span> <span data-ttu-id="51542-132">일반적으로 <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A> 메서드를 구현하여 사용자 지정 바인딩 요소에 작업에 대한 정보를 전달함으로써 지원 채널을 올바르게 작성할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="51542-132">Typically, you implement the <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A> method to pass information about the operation to a custom binding element so that it can build a supporting channel correctly.</span></span> <span data-ttu-id="51542-133">수정이 필요하지 않은 경우 값을 반환하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="51542-133">Return no value if no modifications are required.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Dispatcher.ClientOperation clientOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.OperationDescription operationDescription, class System.ServiceModel.Dispatcher.ClientOperation clientOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::OperationDescription ^ operationDescription, System::ServiceModel::Dispatcher::ClientOperation ^ clientOperation);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.OperationDescription * System.ServiceModel.Dispatcher.ClientOperation -&gt; unit" Usage="iOperationBehavior.ApplyClientBehavior (operationDescription, clientOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="clientOperation" Type="System.ServiceModel.Dispatcher.ClientOperation" />
      </Parameters>
      <Docs>
        <param name="operationDescription"><span data-ttu-id="51542-134">검사할 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="51542-134">The operation being examined.</span></span> <span data-ttu-id="51542-135">검사 전용이므로</span><span class="sxs-lookup"><span data-stu-id="51542-135">Use for examination only.</span></span> <span data-ttu-id="51542-136">작업 설명이 수정될 경우 결과가 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="51542-136">If the operation description is modified, the results are undefined.</span></span></param>
        <param name="clientOperation"><span data-ttu-id="51542-137"><paramref name="operationDescription" />에 설명된 작업에 대한 사용자 지정 속성을 노출하는 런타임 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="51542-137">The run-time object that exposes customization properties for the operation described by <paramref name="operationDescription" />.</span></span></param>
        <summary><span data-ttu-id="51542-138">작업에 대해 클라이언트의 수정이나 확장을 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="51542-138">Implements a modification or extension of the client across an operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="51542-139">특정 작업에 사용되는 모든 메시지에 대해 클라이언트 런타임에 대한 사용자 지정 확장을 보거나 수정 또는 추가하려면 <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="51542-139">Implement the <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> method to view, modify, or add a custom extension to the client runtime across all messages used with a specific operation.</span></span> <span data-ttu-id="51542-140">클라이언트 런타임 개체로 수행할 수 있는 사용자 지정에 대한 자세한 내용은 <xref:System.ServiceModel.Dispatcher.ClientRuntime> 및 <xref:System.ServiceModel.Dispatcher.ClientOperation>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="51542-140">For details about what customizations you can do with a client run-time object, see <xref:System.ServiceModel.Dispatcher.ClientRuntime> and <xref:System.ServiceModel.Dispatcher.ClientOperation>.</span></span>  
  
 <span data-ttu-id="51542-141">동작이 서비스 응용 프로그램에서만 사용하도록 지정된 경우 <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> 메서드가 <xref:System.NotImplementedException>을 throw하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="51542-141">It is recommended that the <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> method throw a <xref:System.NotImplementedException> if the behavior is only intended for use in a service application.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="51542-142">다음 코드 예제에서는 작업에서 검사자가 호출될 때 콘솔에 쓰는 <xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType> 구현을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="51542-142">The following code example shows an implementation of <xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType> that writes to the console when the inspector is invoked on an operation.</span></span> <span data-ttu-id="51542-143">이 사용자 지정은 <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> 또는 <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType>에만 연결되므로 일반적으로 작업 동작에 의해 삽입됩니다.</span><span class="sxs-lookup"><span data-stu-id="51542-143">This customization can only be attached to the <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> or <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> and is therefore usually inserted by an operation behavior.</span></span>  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 <span data-ttu-id="51542-144">다음 코드 예제에서는 작업 동작이 매개 변수 검사자를 런타임에 연결하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="51542-144">The following code example shows how the operation behavior attaches the parameter inspector to the runtime.</span></span>  
  
 [!code-csharp[Interceptors#6](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#6)]
 [!code-vb[Interceptors#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Dispatcher.DispatchOperation dispatchOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.OperationDescription operationDescription, class System.ServiceModel.Dispatcher.DispatchOperation dispatchOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::OperationDescription ^ operationDescription, System::ServiceModel::Dispatcher::DispatchOperation ^ dispatchOperation);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.OperationDescription * System.ServiceModel.Dispatcher.DispatchOperation -&gt; unit" Usage="iOperationBehavior.ApplyDispatchBehavior (operationDescription, dispatchOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="dispatchOperation" Type="System.ServiceModel.Dispatcher.DispatchOperation" />
      </Parameters>
      <Docs>
        <param name="operationDescription"><span data-ttu-id="51542-145">검사할 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="51542-145">The operation being examined.</span></span> <span data-ttu-id="51542-146">검사 전용이므로</span><span class="sxs-lookup"><span data-stu-id="51542-146">Use for examination only.</span></span> <span data-ttu-id="51542-147">작업 설명이 수정될 경우 결과가 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="51542-147">If the operation description is modified, the results are undefined.</span></span></param>
        <param name="dispatchOperation"><span data-ttu-id="51542-148"><paramref name="operationDescription" />에 설명된 작업에 대한 사용자 지정 속성을 노출하는 런타임 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="51542-148">The run-time object that exposes customization properties for the operation described by <paramref name="operationDescription" />.</span></span></param>
        <summary><span data-ttu-id="51542-149">작업에 대해 서비스의 수정이나 확장을 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="51542-149">Implements a modification or extension of the service across an operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="51542-150">모든 메시지에 대해 또는 특정 작업에 대해 서비스 런타임을 보거나 수정 또는 확장하려면 <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="51542-150">Implement the <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> method to view, modify, or extend the service runtime across all messages or for a specific operation.</span></span> <span data-ttu-id="51542-151">서비스 응용 프로그램에서 수행할 수 있는 사용자 지정에 대한 자세한 내용은 <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> 및 <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="51542-151">For details about what customizations you can do in a service application, see <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> and <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="51542-152">동작이 클라이언트 응용 프로그램에서만 사용되도록 지정된 경우 <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> 메서드가 <xref:System.NotImplementedException> 예외를 throw하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="51542-152">It is recommended that the <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> method throw a <xref:System.NotImplementedException> exception if the behavior is only intended for use in a client application.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="51542-153">다음 코드 예제에서는 작업에서 검사자가 호출될 때 콘솔에 쓰는 <xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType> 구현을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="51542-153">The following code example shows an implementation of <xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType> that writes to the console when the inspector is invoked on an operation.</span></span> <span data-ttu-id="51542-154">이 사용자 지정은 <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> 또는 <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType>에만 연결되므로 일반적으로 작업 동작에 의해 삽입됩니다.</span><span class="sxs-lookup"><span data-stu-id="51542-154">This customization can only be attached to the <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> or <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> and is therefore usually inserted by an operation behavior.</span></span>  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 <span data-ttu-id="51542-155">다음 코드 예제에서는 작업 동작이 매개 변수 검사자를 런타임에 연결하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="51542-155">The following code example shows how the operation behavior attaches the parameter inspector to the runtime.</span></span>  
  
 [!code-csharp[Interceptors#6](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#6)]
 [!code-vb[Interceptors#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.OperationDescription operationDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.OperationDescription operationDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.Validate(System.ServiceModel.Description.OperationDescription)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::OperationDescription ^ operationDescription);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.OperationDescription -&gt; unit" Usage="iOperationBehavior.Validate operationDescription" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
      </Parameters>
      <Docs>
        <param name="operationDescription"><span data-ttu-id="51542-156">검사할 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="51542-156">The operation being examined.</span></span> <span data-ttu-id="51542-157">검사 전용이므로</span><span class="sxs-lookup"><span data-stu-id="51542-157">Use for examination only.</span></span> <span data-ttu-id="51542-158">작업 설명이 수정될 경우 결과가 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="51542-158">If the operation description is modified, the results are undefined.</span></span></param>
        <summary><span data-ttu-id="51542-159">작업이 해당 조건을 충족하는지 확인하려면 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="51542-159">Implement to confirm that the operation meets some intended criteria.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="51542-160">구조체가 기준 집합을 충족하는지 검사하려면 <xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A> 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="51542-160">Implement the <xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A> method to examine the structure to confirm any set of criteria.</span></span> <span data-ttu-id="51542-161">이 메서드를 사용하기 위해 <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> 또는 <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A>에서 사용자 지정을 수행해야 할 필요는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="51542-161">It is not necessary to perform any customizations in <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> or <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> to make use of this method.</span></span> <span data-ttu-id="51542-162">작업이 유효성 검사를 통과하면 반환되고, 그렇지 않으면 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="51542-162">If the operation passes validation, return; otherwise, throw an exception.</span></span>  
  
 <span data-ttu-id="51542-163">예를 들어, <xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A> 메서드를 사용하여 작업이 인증되는지 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="51542-163">For example, the <xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A> method can be use to ensure that an operation is authorized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>