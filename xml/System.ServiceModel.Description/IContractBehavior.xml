<Type Name="IContractBehavior" FullName="System.ServiceModel.Description.IContractBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4e230854b8d92649d93bfd16f0c13ff1c71e48d2" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56772988" /></Metadata><TypeSignature Language="C#" Value="public interface IContractBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContractBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IContractBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IContractBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IContractBehavior" />
  <TypeSignature Language="F#" Value="type IContractBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="68037-101">서비스 또는 클라이언트 응용 프로그램에서 계약에 대한 런타임 동작을 확장하는 데 사용할 수 있는 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="68037-101">Implements methods that can be used to extend run-time behavior for a contract in either a service or client application.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68037-102">애플리케이션 수준에서 계약 차원 실행의 일부 측면을 수정, 검사 또는 확장하기 위한 <xref:System.ServiceModel.Description.IContractBehavior> 인터페이스를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="68037-102">Implement the <xref:System.ServiceModel.Description.IContractBehavior> interface to modify, examine, or extend some aspect of contract-wide execution at the application level.</span></span> <span data-ttu-id="68037-103"><xref:System.ServiceModel.Description.IServiceBehavior> 및 <xref:System.ServiceModel.Description.IEndpointBehavior> 개체와 달리 <xref:System.ServiceModel.Description.IContractBehavior> 개체는 애플리케이션 구성 파일을 사용하여 런타임에 추가할 수 없으며 속성을 사용하거나 프로그래밍 방식으로만 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="68037-103">Unlike <xref:System.ServiceModel.Description.IServiceBehavior> and <xref:System.ServiceModel.Description.IEndpointBehavior> objects, <xref:System.ServiceModel.Description.IContractBehavior> objects cannot be added to the runtime using an application configuration file; they can only be added programmatically or using an attribute.</span></span>  
  
 <span data-ttu-id="68037-104">서비스, 끝점 및 계약 동작 중에서 선택 하는 방법에 대 한 자세한 내용은 참조 하세요. [구성 및 동작을 사용 하 여 런타임 확장](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="68037-104">For more information about choosing between service, endpoint, and contract behaviors, see [Configuring and Extending the Runtime with Behaviors](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md).</span></span>  
  
-   <span data-ttu-id="68037-105">바인딩 요소에 사용자 지정 데이터를 제공하여 동작을 지원하려면 <xref:System.ServiceModel.Description.IContractBehavior.AddBindingParameters%2A> 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="68037-105">Use the <xref:System.ServiceModel.Description.IContractBehavior.AddBindingParameters%2A> method to provide binding elements with custom data to support the behavior.</span></span>  
  
-   <span data-ttu-id="68037-106">클라이언트 애플리케이션에서 계약에 대한 확장을 수정, 검사 또는 삽입하려면 <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="68037-106">Use the <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> method to modify, examine, or insert extensions to a contract in a client application.</span></span>  
  
-   <span data-ttu-id="68037-107">서비스 애플리케이션에서 계약에 대한 확장을 수정, 검사 또는 삽입하려면 <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="68037-107">Use the <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> method to modify, examine, or insert extensions to a contract in a service application.</span></span>  
  
-   <span data-ttu-id="68037-108">계약에서 특정 기능을 지원하는지 확인하려면 <xref:System.ServiceModel.Description.IContractBehavior.Validate%2A> 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="68037-108">Use the <xref:System.ServiceModel.Description.IContractBehavior.Validate%2A> method to ensure that a contract can support a particular feature.</span></span>  
  
 <span data-ttu-id="68037-109"><xref:System.ServiceModel.Description.IContractBehavior> 개체는 이러한 메서드 중 아무 메서드나 사용할 수 있지만 그 중 하나만 사용되는 경우가 많으며 사용되지 않은 나머지 메서드는 값 없이 반환될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="68037-109"><xref:System.ServiceModel.Description.IContractBehavior> objects can make use of any of these methods, but often only one is important; in such cases, the unused methods can return without any value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="68037-110">모든 <xref:System.ServiceModel.Description.IContractBehavior> 메서드는 <xref:System.ServiceModel.Description.ContractDescription?displayProperty=nameWithType> 및 <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType>를 매개 변수로 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="68037-110">All of the <xref:System.ServiceModel.Description.IContractBehavior> methods pass <xref:System.ServiceModel.Description.ContractDescription?displayProperty=nameWithType> and <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType> as parameters.</span></span> <span data-ttu-id="68037-111">이러한 매개 변수는 검사용이므로 개체를 수정할 경우의 실행 동작은 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="68037-111">These parameters are for examination; if you modify the objects the execution behavior is undefined.</span></span>  
  
 <span data-ttu-id="68037-112"><xref:System.ServiceModel.Description.IContractBehavior> 형식은 서비스나 클라이언트 또는 둘 모두에서 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="68037-112"><xref:System.ServiceModel.Description.IContractBehavior> types can be used on either the service or the client, or both.</span></span> <span data-ttu-id="68037-113">서비스에 대한 사용자 지정 작업을 수행하려면 <xref:System.ServiceModel.Description.IContractBehavior> 개체에서 <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> 메서드를 호출할 때 발생하는 서비스 런타임 생성이 이루어지기 전에 <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> 개체를 <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> 속성에 추가해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="68037-113">To perform a customization task on the service, the <xref:System.ServiceModel.Description.IContractBehavior> object must be added to the <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> property prior to the construction of the service runtime, which occurs when the <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> method is called on the <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="68037-114">이렇게 하는 데는 두 가지 방법이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="68037-114">There are two ways to do this.</span></span>  
  
 <span data-ttu-id="68037-115">첫 번째 방법은, <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> 개체에서 <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> 메서드가 호출되기 전에 <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> 속성에 사용자 지정 계약 동작을 프로그래밍 방식으로 추가하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="68037-115">The first method is to programmatically add the custom contract behavior to the <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> property prior to the point when the <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> method is called on the <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="68037-116">이 방법을 사용할 경우 모든 엔드포인트에서 해당 계약을 통해 전달되는 모든 메시지에 동작이 적용됩니다.</span><span class="sxs-lookup"><span data-stu-id="68037-116">When applied this way, the behavior is applied for all messages flowing through that contract on any endpoint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="68037-117">동작은 동일한 형식의 모든 계약에 적용됩니다.</span><span class="sxs-lookup"><span data-stu-id="68037-117">The behavior is applied to all contracts of the same type.</span></span> <span data-ttu-id="68037-118">예를 들어, 동일한 계약 형식을 여러 엔드포인트에 프로그래밍 방식으로 추가할 경우 동일한 계약 개체를 참조하는 모든 엔드포인트를 수정하는 동작이 적용됩니다.</span><span class="sxs-lookup"><span data-stu-id="68037-118">For example, if you programmatically add the same contract type to more than one endpoint, the behavior modifies all endpoints that refer to the same contract object.</span></span>  
  
 <span data-ttu-id="68037-119">두 번째 방법은 <xref:System.ServiceModel.Description.IContractBehavior>를 구현하는 사용자 지정 특성을 만든 후 이 특성을 다음에 적용하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="68037-119">The second method is to create a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> and apply that to:</span></span>  
  
-   <span data-ttu-id="68037-120">계약 인터페이스.</span><span class="sxs-lookup"><span data-stu-id="68037-120">A contract interface.</span></span> <span data-ttu-id="68037-121">이 경우 모든 엔드포인트에서 해당 형식의 모든 계약에 동작이 적용됩니다.</span><span class="sxs-lookup"><span data-stu-id="68037-121">In this case, the behavior is applied to all contracts of that type in any endpoint.</span></span>  
  
-   <span data-ttu-id="68037-122">서비스 클래스.</span><span class="sxs-lookup"><span data-stu-id="68037-122">A service class.</span></span>  <span data-ttu-id="68037-123">이 경우 계약과 상관없이 모든 엔드포인트에 동작이 적용됩니다.</span><span class="sxs-lookup"><span data-stu-id="68037-123">In this case, the behavior is applied to all endpoints regardless of contract.</span></span>  
  
-   <span data-ttu-id="68037-124">콜백 클래스.</span><span class="sxs-lookup"><span data-stu-id="68037-124">A callback class.</span></span>  <span data-ttu-id="68037-125">이 경우 이중 클라이언트의 엔드포인트에 동작이 적용됩니다.</span><span class="sxs-lookup"><span data-stu-id="68037-125">In this case, the behavior is applied to the duplex client's endpoint.</span></span>  
  
 <span data-ttu-id="68037-126">사용자 지정 특성이 <xref:System.ServiceModel.Description.IContractBehaviorAttribute?displayProperty=nameWithType>도 구현하는 경우 두 번째 방법의 동작이 다소 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="68037-126">The behavior of the second approach varies slightly if the custom attribute also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute?displayProperty=nameWithType>.</span></span> <span data-ttu-id="68037-127">이 경우 동작은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="68037-127">In this case, the behavior is as follows:</span></span>  
  
-   <span data-ttu-id="68037-128">계약 인터페이스.</span><span class="sxs-lookup"><span data-stu-id="68037-128">A contract interface.</span></span> <span data-ttu-id="68037-129">이 경우 모든 끝점에서 해당 형식의 모든 계약에 동작이 적용 되 고 Windows Communication Foundation (WCF)의 값을 무시 합니다 <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="68037-129">In this case, the behavior is applied to all contracts of that type in any endpoint and Windows Communication Foundation (WCF) ignores the value of the <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="68037-130">서비스 클래스.</span><span class="sxs-lookup"><span data-stu-id="68037-130">A service class.</span></span>  <span data-ttu-id="68037-131">이 경우 해당 계약이 <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> 속성 값인 엔드포인트에만 동작이 적용됩니다.</span><span class="sxs-lookup"><span data-stu-id="68037-131">In this case, the behavior is applied only to endpoints the contract of which is the value of the <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="68037-132">콜백 클래스.</span><span class="sxs-lookup"><span data-stu-id="68037-132">A callback class.</span></span>  <span data-ttu-id="68037-133">이 경우 이중 클라이언트의 끝점에 동작이 적용 되 고 WCF의 값을 무시 합니다 <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="68037-133">In this case, the behavior is applied to the duplex client's endpoint and WCF ignores the value of the <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="68037-134">원하는 클라이언트에 사용자 지정 작업을 수행하려면 <xref:System.ServiceModel.Description.IContractBehavior>이 호출될 때 발생하는 클라이언트 런타임 생성이 이루어지기 전에 <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> 개체를 <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> 속성에 추가해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="68037-134">To perform the customization task on the client for which it is intended, the <xref:System.ServiceModel.Description.IContractBehavior> object must be added to the <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> property prior to the construction of the client runtime, which occurs when <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> is called.</span></span> <span data-ttu-id="68037-135">여기에는 두 가지 방법이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="68037-135">There are two ways to do this:</span></span>  
  
-   <span data-ttu-id="68037-136"><xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A>이 호출되기 전에 <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> 속성에 사용자 지정 계약 동작을 프로그래밍 방식으로 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="68037-136">Programmatically add the custom contract behavior to the <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> property prior to the point when the <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> is called.</span></span>  
  
-   <span data-ttu-id="68037-137"><xref:System.ServiceModel.Description.IContractBehavior>도 구현하는 사용자 지정 특성을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="68037-137">Create a custom attribute that also implements <xref:System.ServiceModel.Description.IContractBehavior>.</span></span>  
  
 <span data-ttu-id="68037-138">프로그래밍 방식으로 추가 하는 방법은 <xref:System.ServiceModel.Description.IContractBehavior> 클라이언트 또는 서비스 애플리케이션에 대 한 형식 참조 [구성 하 고 동작을 사용 하 여 런타임 확장](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="68037-138">For more information on programmatically adding <xref:System.ServiceModel.Description.IContractBehavior> types to either the client or service application, see [Configuring and Extending the Runtime with Behaviors](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68037-139">다음 코드 예제에서는 사용자 지정 <xref:System.ServiceModel.Dispatcher.IInstanceProvider> 구현이 항상 동일한 서비스 인스턴스를 반환하고 이 인스턴스를 재사용하지 않는 "단일" 동작을 제공하는 `ObjectProviderBehavior`를 호출했다고 가정합니다.</span><span class="sxs-lookup"><span data-stu-id="68037-139">The following code example assumes a custom <xref:System.ServiceModel.Dispatcher.IInstanceProvider> implementation called `ObjectProviderBehavior` that provides a "singleton" behavior; it always returns the same service instance and does not recycle it.</span></span>  
  
 <span data-ttu-id="68037-140">인스턴스 공급자 사용자 지정을 삽입하기 위해 이 예제에서는 `SingletonBehaviorAttribute`를 구현하여 사용자 지정 서비스 인스턴스 공급자를 삽입하는 사용자 지정 특성(<xref:System.ServiceModel.Description.IContractBehavior>)을 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="68037-140">To insert the instance provider customization, the example shows how to implement a custom attribute (`SingletonBehaviorAttribute`) that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider.</span></span> <span data-ttu-id="68037-141">또한 <xref:System.ServiceModel.Description.IContractBehaviorAttribute> 계약에 해당 사용을 바인딩하는 `ISampleService`를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="68037-141">It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to the `ISampleService` contract.</span></span>  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iContractBehavior.AddBindingParameters (contractDescription, endpoint, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="contractDescription"><span data-ttu-id="68037-142">수정할 계약 설명입니다.</span><span class="sxs-lookup"><span data-stu-id="68037-142">The contract description to modify.</span></span></param>
        <param name="endpoint"><span data-ttu-id="68037-143">수정할 엔드포인트입니다.</span><span class="sxs-lookup"><span data-stu-id="68037-143">The endpoint to modify.</span></span></param>
        <param name="bindingParameters"><span data-ttu-id="68037-144">바인딩 요소에서 동작을 지원하기 위해 필요한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="68037-144">The objects that binding elements require to support the behavior.</span></span></param>
        <summary><span data-ttu-id="68037-145">계약 동작을 지원하도록 바인딩 요소를 구성합니다.</span><span class="sxs-lookup"><span data-stu-id="68037-145">Configures any binding elements to support the contract behavior.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68037-146">계약 동작을 지원하는 데 필요한 추가 개체를 바인딩 요소에 제공하려면 <xref:System.ServiceModel.Description.IContractBehavior.AddBindingParameters%2A> 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="68037-146">Implement the <xref:System.ServiceModel.Description.IContractBehavior.AddBindingParameters%2A> method to provide binding elements with the extra objects they require to support the contract behavior.</span></span>  
  
 <span data-ttu-id="68037-147">이 메서드는 지정된 서비스 계약을 사용하는 엔드포인트마다 한 번씩 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="68037-147">This method is called once for each endpoint that uses the specified service contract.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.ClientRuntime clientRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.ClientRuntime clientRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::ClientRuntime ^ clientRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.ClientRuntime -&gt; unit" Usage="iContractBehavior.ApplyClientBehavior (contractDescription, endpoint, clientRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="clientRuntime" Type="System.ServiceModel.Dispatcher.ClientRuntime" />
      </Parameters>
      <Docs>
        <param name="contractDescription"><span data-ttu-id="68037-148">확장할 대상에 대한 계약 설명입니다.</span><span class="sxs-lookup"><span data-stu-id="68037-148">The contract description for which the extension is intended.</span></span></param>
        <param name="endpoint"><span data-ttu-id="68037-149">엔드포인트입니다.</span><span class="sxs-lookup"><span data-stu-id="68037-149">The endpoint.</span></span></param>
        <param name="clientRuntime"><span data-ttu-id="68037-150">클라이언트 런타임입니다.</span><span class="sxs-lookup"><span data-stu-id="68037-150">The client runtime.</span></span></param>
        <summary><span data-ttu-id="68037-151">계약에 대해 클라이언트의 수정이나 확장을 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="68037-151">Implements a modification or extension of the client across a contract.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68037-152">모든 메시지에 대해 또는 특정 작업에 대해 클라이언트 런타임에 대한 사용자 지정 확장을 보거나 수정 또는 추가하려면 <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="68037-152">Implement the <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> method to view, modify, or add custom extensions to the client runtime across all messages or for one specific operation.</span></span> <span data-ttu-id="68037-153">클라이언트 런타임 개체로 수행할 수 있는 사용자 지정에 대한 자세한 내용은 <xref:System.ServiceModel.Dispatcher.ClientRuntime> 및 <xref:System.ServiceModel.Dispatcher.ClientOperation>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="68037-153">For details about what customizations you can do with a client run-time object, see <xref:System.ServiceModel.Dispatcher.ClientRuntime> and <xref:System.ServiceModel.Dispatcher.ClientOperation>.</span></span>  
  
 <span data-ttu-id="68037-154"><xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> 메서드는 동작이 서비스 애플리케이션에서만 사용되도록 지정된 경우 <xref:System.NotImplementedException> 예외를 throw할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="68037-154">The <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> method can throw a <xref:System.NotImplementedException> exception if the behavior is only intended for use in a service application.</span></span>  
  
 <span data-ttu-id="68037-155">이 메서드는 지정된 서비스 계약을 사용하는 엔드포인트마다 한 번씩 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="68037-155">This method is called once for each endpoint that uses the specified service contract.</span></span>  
  
 <span data-ttu-id="68037-156">설명에 이름이 동일한 두 개의 작업이 존재할 수 있으므로(각 방향에 하나씩) 계약이 이중 계약인 작업에서 반복을 수행해야 하는 경우 <xref:System.ServiceModel.Dispatcher.ClientRuntime> 엔드포인트와 <xref:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A> 속성에서 반환하는 엔드포인트 간에 메시지 방향을 연결해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="68037-156">Note that there can be two operations with the same name in the description (one in each direction), so if you must iterate through operations where the contract is a duplex contract, you must correlate the message direction between the endpoint <xref:System.ServiceModel.Dispatcher.ClientRuntime> and that returned by the <xref:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A> property.</span></span>  
  
 <span data-ttu-id="68037-157">다른 동작에서 런타임에 대해 일부 작업을 이미 추가하거나 제거했을 수 있으므로 설명의 작업 수가 <xref:System.ServiceModel.Dispatcher.ClientOperation> 속성의 <xref:System.ServiceModel.Dispatcher.ClientRuntime.Operations%2A> 개체 수와 다를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="68037-157">Because other behaviors may have already added or removed some operations from the runtime, there is no guarantee that there are the same number of operations in the description as there are <xref:System.ServiceModel.Dispatcher.ClientOperation> objects in the <xref:System.ServiceModel.Dispatcher.ClientRuntime.Operations%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68037-158">다음 코드 예제에서는 사용자 지정 <xref:System.ServiceModel.Dispatcher.IInstanceProvider> 구현이 항상 동일한 서비스 인스턴스를 반환하고 이 인스턴스를 재사용하지 않는 "단일" 동작을 제공하는 `ObjectProviderBehavior`를 호출했다고 가정합니다.</span><span class="sxs-lookup"><span data-stu-id="68037-158">The following code example assumes a custom <xref:System.ServiceModel.Dispatcher.IInstanceProvider> implementation called `ObjectProviderBehavior` that provides a "singleton" behavior; it always returns the same service instance and does not recycle it.</span></span>  
  
 <span data-ttu-id="68037-159">인스턴스 공급자 사용자 지정을 삽입하기 위해 이 예제에서는 `SingletonBehaviorAttribute`를 구현하여 사용자 지정 서비스 인스턴스 공급자를 삽입하는 사용자 지정 특성(<xref:System.ServiceModel.Description.IContractBehavior>)을 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="68037-159">To insert the instance provider customization, the example shows how to implement a custom attribute (`SingletonBehaviorAttribute`) that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider.</span></span> <span data-ttu-id="68037-160">또한 <xref:System.ServiceModel.Description.IContractBehaviorAttribute> 계약에 해당 사용을 바인딩하는 `ISampleService`를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="68037-160">It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to the `ISampleService` contract.</span></span>  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.DispatchRuntime dispatchRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.DispatchRuntime dispatchRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::DispatchRuntime ^ dispatchRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.DispatchRuntime -&gt; unit" Usage="iContractBehavior.ApplyDispatchBehavior (contractDescription, endpoint, dispatchRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="dispatchRuntime" Type="System.ServiceModel.Dispatcher.DispatchRuntime" />
      </Parameters>
      <Docs>
        <param name="contractDescription"><span data-ttu-id="68037-161">수정할 계약 설명입니다.</span><span class="sxs-lookup"><span data-stu-id="68037-161">The contract description to be modified.</span></span></param>
        <param name="endpoint"><span data-ttu-id="68037-162">계약을 공개하는 엔드포인트입니다.</span><span class="sxs-lookup"><span data-stu-id="68037-162">The endpoint that exposes the contract.</span></span></param>
        <param name="dispatchRuntime"><span data-ttu-id="68037-163">서비스 실행을 제어하는 디스패치 런타임입니다.</span><span class="sxs-lookup"><span data-stu-id="68037-163">The dispatch runtime that controls service execution.</span></span></param>
        <summary><span data-ttu-id="68037-164">계약에 대해 클라이언트의 수정이나 확장을 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="68037-164">Implements a modification or extension of the client across a contract.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68037-165">특정 계약의 모든 메시지에 대해 또는 해당 계약의 특정 작업에 대해 서비스 런타임에 대한 사용자 지정 확장을 보거나 수정 또는 추가하려면 <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A>를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="68037-165">Implement the <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> to view, modify, or add custom extensions to the service runtime across all messages in a specific contract or for one specific operation in that contract.</span></span> <span data-ttu-id="68037-166">서비스 애플리케이션에서 수행할 수 있는 사용자 지정에 대한 자세한 내용은 <xref:System.ServiceModel.Dispatcher.DispatchRuntime> 및 <xref:System.ServiceModel.Dispatcher.DispatchOperation>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="68037-166">For details about what customizations you can perform in a service application, see <xref:System.ServiceModel.Dispatcher.DispatchRuntime> and <xref:System.ServiceModel.Dispatcher.DispatchOperation>.</span></span>  
  
 <span data-ttu-id="68037-167"><xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> 메서드는 동작이 클라이언트 애플리케이션에서만 사용되도록 지정된 경우 <xref:System.NotImplementedException> 예외를 throw할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="68037-167">The <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> method can throw a <xref:System.NotImplementedException> exception if the behavior is only intended for use in a client application.</span></span>  
  
 <span data-ttu-id="68037-168">이 메서드는 지정된 서비스 계약을 사용하는 엔드포인트마다 한 번씩 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="68037-168">This method is called once for each endpoint that uses the specified service contract.</span></span>  
  
 <span data-ttu-id="68037-169">설명에 이름이 동일한 두 개의 작업이 존재할 수 있으므로(각 방향에 하나씩) 계약이 이중 계약인 작업에서 반복을 수행해야 하는 경우 <xref:System.ServiceModel.Dispatcher.DispatchRuntime> 엔드포인트와 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A> 속성에서 반환하는 엔드포인트 간에 메시지 방향을 연결해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="68037-169">Note that there can be two operations with the same name in the description (one in each direction), so if you must iterate through operations where the contract is a duplex contract, you must correlate the message direction between the endpoint <xref:System.ServiceModel.Dispatcher.DispatchRuntime> and that returned by the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A> property.</span></span>  
  
 <span data-ttu-id="68037-170">또한 다른 동작에서 런타임에 대해 일부 작업을 이미 추가 또는 제거했을 수 있으므로 설명의 작업 수가 <xref:System.ServiceModel.Dispatcher.DispatchOperation> 속성의 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A> 개체 수와 다를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="68037-170">In addition, because other behaviors may have already added or removed some operations from the runtime, there is no guarantee that there are the same number of operations in description as there are <xref:System.ServiceModel.Dispatcher.DispatchOperation> objects in the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68037-171">다음 코드 예제에서는 사용자 지정 <xref:System.ServiceModel.Dispatcher.IInstanceProvider> 구현이 항상 동일한 서비스 인스턴스를 반환하고 이 인스턴스를 재사용하지 않는 "단일" 동작을 제공하는 `ObjectProviderBehavior`를 호출했다고 가정합니다.</span><span class="sxs-lookup"><span data-stu-id="68037-171">The following code example assumes a custom <xref:System.ServiceModel.Dispatcher.IInstanceProvider> implementation called `ObjectProviderBehavior` that provides a "singleton" behavior; it always returns the same service instance and does not recycle it.</span></span>  
  
 <span data-ttu-id="68037-172">인스턴스 공급자 사용자 지정을 삽입하기 위해 이 예제에서는 `SingletonBehaviorAttribute`를 구현하여 사용자 지정 서비스 인스턴스 공급자를 삽입하는 사용자 지정 특성(<xref:System.ServiceModel.Description.IContractBehavior>)을 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="68037-172">To insert the instance provider customization, the example shows how to implement a custom attribute (`SingletonBehaviorAttribute`) that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider.</span></span> <span data-ttu-id="68037-173">또한 <xref:System.ServiceModel.Description.IContractBehaviorAttribute> 계약에 해당 사용을 바인딩하는 `ISampleService`를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="68037-173">It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to the `ISampleService` contract.</span></span>  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint -&gt; unit" Usage="iContractBehavior.Validate (contractDescription, endpoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
      </Parameters>
      <Docs>
        <param name="contractDescription"><span data-ttu-id="68037-174">유효성을 검사할 계약입니다.</span><span class="sxs-lookup"><span data-stu-id="68037-174">The contract to validate.</span></span></param>
        <param name="endpoint"><span data-ttu-id="68037-175">유효성을 검사할 엔드포인트입니다.</span><span class="sxs-lookup"><span data-stu-id="68037-175">The endpoint to validate.</span></span></param>
        <summary><span data-ttu-id="68037-176">계약 및 엔드포인트에서 계약 동작을 지원할 수 있는지 확인하려면 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="68037-176">Implement to confirm that the contract and endpoint can support the contract behavior.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68037-177">계약 설명이 사용자 지정 계약 동작을 지원하는 데 충분한지 확인하려면 <xref:System.ServiceModel.Description.IContractBehavior.Validate%2A> 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="68037-177">Implement the <xref:System.ServiceModel.Description.IContractBehavior.Validate%2A> method to confirm that the contract description is sufficient to support the custom contract behavior.</span></span> <span data-ttu-id="68037-178">구현에서 설명을 검사한 후 값을 throw하거나 아무 값도 반환하지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="68037-178">Implementations can inspect the description and either throw or return no value.</span></span>  
  
 <span data-ttu-id="68037-179">이 메서드는 지정된 서비스 계약을 사용하는 엔드포인트마다 한 번씩 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="68037-179">This method is called once for each endpoint that uses the specified service contract.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>