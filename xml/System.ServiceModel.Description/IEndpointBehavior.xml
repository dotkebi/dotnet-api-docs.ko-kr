<Type Name="IEndpointBehavior" FullName="System.ServiceModel.Description.IEndpointBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d25aa6923402b8746371b5ff78838626d7159c78" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56794113" /></Metadata><TypeSignature Language="C#" Value="public interface IEndpointBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEndpointBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IEndpointBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEndpointBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEndpointBehavior" />
  <TypeSignature Language="F#" Value="type IEndpointBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="b20a8-101">서비스 또는 클라이언트 응용 프로그램에서 엔드포인트에 대한 런타임 동작을 확장하는 데 사용할 수 있는 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-101">Implements methods that can be used to extend run-time behavior for an endpoint in either a service or client application.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b20a8-102">클라이언트 또는 서버 애플리케이션에 대해 애플리케이션 수준에서 엔드포인트 차원 실행의 일부 측면을 수정, 검사 또는 확장하기 위한 <xref:System.ServiceModel.Description.IEndpointBehavior> 인터페이스를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-102">Implement the <xref:System.ServiceModel.Description.IEndpointBehavior> interface to modify, examine, or extend some aspect of endpoint-wide execution at the application level for either client or service applications.</span></span>  
  
-   <span data-ttu-id="b20a8-103">바인딩에서 사용자 지정 동작을 지원할 수 있도록 런타임에 사용자 지정 데이터를 전달하려면 <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-103">Use the <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> method to pass custom data at runtime to enable bindings to support custom behavior.</span></span>  
  
-   <span data-ttu-id="b20a8-104">클라이언트 애플리케이션에서 엔드포인트에 대한 확장을 수정, 검사 또는 삽입하려면 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-104">Use the <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> method to modify, examine, or insert extensions to an endpoint in a client application.</span></span>  
  
-   <span data-ttu-id="b20a8-105">클라이언트 애플리케이션에서 엔드포인트 차원의 실행에 대한 확장을 수정, 검사 또는 삽입하려면 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-105">Use the <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> method to modify, examine, or insert extensions to endpoint-wide execution in a service application.</span></span>  
  
-   <span data-ttu-id="b20a8-106"><xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A>가 특정 요구 사항을 충족하는지 확인하려면 <xref:System.ServiceModel.Description.ServiceEndpoint> 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-106">Use the <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> method to confirm that a <xref:System.ServiceModel.Description.ServiceEndpoint> meets specific requirements.</span></span> <span data-ttu-id="b20a8-107">이 메서드는 엔드포인트에서 특정 구성 설정을 사용하고 특정 기능과 기타 요구 사항을 지원하는지를 확인하기 위해 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-107">This can be used to ensure that an endpoint has a certain configuration setting enabled, supports a particular feature and other requirements.</span></span>  
  
 <span data-ttu-id="b20a8-108"><xref:System.ServiceModel.Description.IEndpointBehavior> 개체는 이러한 메서드 중 아무 메서드나 사용할 수 있지만 그 중 하나만 사용되는 경우가 많으며 사용되지 않은 메서드는 아무 동작도 수행하지 않고 반환될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-108"><xref:System.ServiceModel.Description.IEndpointBehavior> objects can make use of any of these methods, but often only one is important; in such cases, the unused methods can return, performing no action.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b20a8-109">모든 <xref:System.ServiceModel.Description.IEndpointBehavior> 메서드는 <xref:System.ServiceModel.Description.ServiceEndpoint> 개체를 매개 변수로 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-109">All of the <xref:System.ServiceModel.Description.IEndpointBehavior> methods pass a <xref:System.ServiceModel.Description.ServiceEndpoint> object as a parameter.</span></span> <span data-ttu-id="b20a8-110">이 매개 변수는 검사 전용이므로 <xref:System.ServiceModel.Description.ServiceEndpoint> 개체를 수정할 경우 실행 동작은 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-110">This parameter is for examination only; if you modify the <xref:System.ServiceModel.Description.ServiceEndpoint> object the execution behavior is undefined.</span></span>  
  
 <span data-ttu-id="b20a8-111"><xref:System.ServiceModel.Description.IEndpointBehavior> 개체는 일반적으로 서비스 애플리케이션의 <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType>, <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>, <xref:System.ServiceModel.Dispatcher.EndpointDispatcher?displayProperty=nameWithType> 및 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher?displayProperty=nameWithType> 개체의 다양한 속성과 클라이언트 애플리케이션의 <xref:System.ServiceModel.Dispatcher.ClientRuntime?displayProperty=nameWithType> 및 <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType>의 다양한 속성을 액세스하는 데 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-111"><xref:System.ServiceModel.Description.IEndpointBehavior> objects are typically used to access the various properties of the <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType>, <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>, <xref:System.ServiceModel.Dispatcher.EndpointDispatcher?displayProperty=nameWithType>, and <xref:System.ServiceModel.Dispatcher.ChannelDispatcher?displayProperty=nameWithType> objects in a service application and the <xref:System.ServiceModel.Dispatcher.ClientRuntime?displayProperty=nameWithType> and <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> in a client application.</span></span> <span data-ttu-id="b20a8-112">또한 <xref:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A?displayProperty=nameWithType> 및 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A?displayProperty=nameWithType> 속성을 사용하여 각각 이중 클라이언트와 서비스의 속성을 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-112">In addition, you can access the properties of duplex clients and services using the <xref:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A?displayProperty=nameWithType> and <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A?displayProperty=nameWithType> properties, respectively.</span></span>  
  
 <span data-ttu-id="b20a8-113">다양 한 속성 및 사용자 지정을 사용에 대 한 참조 [Extending ServiceHost 및 서비스 모델 계층](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-113">For a description of the various properties and customizations available, see [Extending ServiceHost and the Service Model Layer](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).</span></span>  
  
 <span data-ttu-id="b20a8-114">사용자 지정 시 결정 된 (및 필요한 경우 사용자 지정 인터페이스가 구현) 되 면 및 <xref:System.ServiceModel.Description.IEndpointBehavior> 되었습니다가 적절 한 사용자 지정 범위 결정, 사용자 지정 Windows 통신에 삽입 되어야 합니다 구현 하 여 foundation (WCF) 런타임 <xref:System.ServiceModel.Description.IEndpointBehavior> 런타임에 끝점 동작을 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-114">Once a customization has been decided upon (and the customization interface implemented if necessary) and the <xref:System.ServiceModel.Description.IEndpointBehavior> has been decided is the appropriate scope of customization, the customization must be inserted into the Windows Communication Foundation (WCF) runtime by implementing <xref:System.ServiceModel.Description.IEndpointBehavior> and adding the endpoint behavior to the runtime.</span></span>  
  
 <span data-ttu-id="b20a8-115">다음과 같은 두 가지 방법으로 런타임에 동작을 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-115">There are two ways to add the behavior to the runtime:</span></span>  
  
-   <span data-ttu-id="b20a8-116">서비스 애플리케이션의 서비스 호스트 또는 클라이언트 애플리케이션의 채널 팩터리를 열기 전에 <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A> 속성에 사용자 지정 엔드포인트 동작을 프로그래밍 방식으로 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-116">Programmatically add the custom endpoint behavior to the <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A> property prior to the opening of the service host (in a service application) or the channel factory (in a client application).</span></span>  
  
-   <span data-ttu-id="b20a8-117">애플리케이션 구성 파일을 사용하여 동작을 구성합니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-117">Configure the behavior using an application configuration file.</span></span> <span data-ttu-id="b20a8-118">자세한 내용은 참조 하세요 [ &lt;behaviorExtensions&gt;](~/docs/framework/configure-apps/file-schema/wcf/behaviorextensions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-118">For details, see [&lt;behaviorExtensions&gt;](~/docs/framework/configure-apps/file-schema/wcf/behaviorextensions.md).</span></span>  
  
 <span data-ttu-id="b20a8-119">원하는 대상에 서비스 사용자 지정 작업을 수행하려면 <xref:System.ServiceModel.Description.IEndpointBehavior>에서 <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A?displayProperty=nameWithType> 메서드를 호출할 때 발생하는 서비스 런타임 생성이 이루어지기 전에 <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> 개체를 <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> 속성에 추가해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-119">To perform the service customization task for which it is intended, the <xref:System.ServiceModel.Description.IEndpointBehavior> object must be added to the <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A?displayProperty=nameWithType> property prior to the construction of the service runtime, which occurs when <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> method is called on <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b20a8-120">클라이언트 사용자 지정 작업을 수행하려면 <xref:System.ServiceModel.Description.IEndpointBehavior>에서 <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A?displayProperty=nameWithType> 메서드 또는 <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> 메서드를 호출하기 전에 <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> 개체를 <xref:System.ServiceModel.ChannelFactory%601> 속성에 추가해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-120">To perform a client customization task, the <xref:System.ServiceModel.Description.IEndpointBehavior> object must be added to the <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A?displayProperty=nameWithType> property before calling the <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> method or the <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> method on <xref:System.ServiceModel.ChannelFactory%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b20a8-121">다음 코드 예제에서는 서비스 애플리케이션에서 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> 개체를 추가하는 엔드포인트 동작의 구현을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-121">The following code example shows the implementation of an endpoint behavior that adds an <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> object in a service application.</span></span> <span data-ttu-id="b20a8-122">이 경우 `EndpointBehaviorMessageInspector` 클래스는 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType>를 구현하여 인바운드 및 아웃바운드 메시지를 검사하고, <xref:System.ServiceModel.Description.IEndpointBehavior> 인터페이스를 구현하여 동작이 적용되는 모든 엔드포인트에 대한 검사 시스템에 inspector 클래스를 삽입하며, <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>를 구현함으로써 애플리케이션 구성 파일을 사용하여 메시지 검사자 동작을 활성화합니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-122">In this case, the `EndpointBehaviorMessageInspector` class implements <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> to inspect the inbound and outbound message, the <xref:System.ServiceModel.Description.IEndpointBehavior> interface to insert the inspector class into the inspection system for all endpoints to which the behavior applies, and the <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> to enable the message inspector behavior using an application configuration file.</span></span>  
  
 <span data-ttu-id="b20a8-123">첫 번째 단계는 메시지 검사자를 구현하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-123">The first step is to implement the message inspector.</span></span>  
  
 [!code-csharp[IEndpointBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#2)]  
  
 <span data-ttu-id="b20a8-124">다음 코드 예제에서는 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> 메서드를 사용하여 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> 속성에 메시지 검사자를 추가하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-124">The next code example shows the use of the <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> method to add the message inspector to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> property.</span></span>  
  
 [!code-csharp[IEndpointBehavior#4](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#4)]  
  
 <span data-ttu-id="b20a8-125">다음 코드 예제에서는 구성 파일에서 메시지 검사자를 사용할 수 있도록 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>를 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-125">The following code example shows the implementation of <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> in order to enable use of the message inspector behavior from a configuration file.</span></span>  
  
 [!code-csharp[IEndpointBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#3)]  
  
 <span data-ttu-id="b20a8-126">마지막으로 다음 구성 파일에서는 구성에서 위의 예제를 사용하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-126">Finally, the following configuration file shows how the preceding example can be used from configuration.</span></span>  
  
 [!code-xml[IEndpointBehavior#5](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/hostapplication.exe.config#5)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBindingParameters (endpoint As ServiceEndpoint, bindingParameters As BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iEndpointBehavior.AddBindingParameters (endpoint, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="endpoint"><span data-ttu-id="b20a8-127">수정할 엔드포인트입니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-127">The endpoint to modify.</span></span></param>
        <param name="bindingParameters"><span data-ttu-id="b20a8-128">바인딩 요소에서 동작을 지원하기 위해 필요한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-128">The objects that binding elements require to support the behavior.</span></span></param>
        <summary><span data-ttu-id="b20a8-129">런타임에 바인딩에 데이터를 전달하여 사용자 지정 동작을 지원하려면 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-129">Implement to pass data at runtime to bindings to support custom behavior.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b20a8-130">엔드포인트 동작을 지원하는 데 필요한 추가 개체를 바인딩 요소에 제공하려면 <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-130">Implement the <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> method to provide binding elements with the extra objects they require to support the endpoint behavior.</span></span> <span data-ttu-id="b20a8-131">바인딩 매개 변수가 여기에 추가되면 채널 수신기 또는 채널 팩터리를 생성할 때 바인딩이 이러한 개체를 찾을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-131">When binding parameters are added here the binding can locate these objects when the channel listener or channel factory is created.</span></span> <span data-ttu-id="b20a8-132">일반적으로 <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> 메서드를 구현하여 사용자 지정 바인딩 요소에 엔드포인트에 대한 정보를 전달함으로써 지원 채널을 올바르게 작성할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-132">Typically, you implement the <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> method to pass information about the endpoint to a custom binding element so that it can build a supporting channel correctly.</span></span> <span data-ttu-id="b20a8-133">수정이 필요하지 않은 경우 값을 반환하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-133">Return no value if no modifications are required.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.ClientRuntime clientRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.ClientRuntime clientRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::ClientRuntime ^ clientRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.ClientRuntime -&gt; unit" Usage="iEndpointBehavior.ApplyClientBehavior (endpoint, clientRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="clientRuntime" Type="System.ServiceModel.Dispatcher.ClientRuntime" />
      </Parameters>
      <Docs>
        <param name="endpoint"><span data-ttu-id="b20a8-134">사용자 지정할 엔드포인트입니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-134">The endpoint that is to be customized.</span></span></param>
        <param name="clientRuntime"><span data-ttu-id="b20a8-135">사용자 지정할 클라이언트 런타임입니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-135">The client runtime to be customized.</span></span></param>
        <summary><span data-ttu-id="b20a8-136">엔드포인트에 대해 클라이언트의 수정이나 확장을 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-136">Implements a modification or extension of the client across an endpoint.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b20a8-137">엔드포인트와 함께 사용되는 모든 메시지에 대해 또는 특정 작업에 대해 클라이언트 런타임에 대한 사용자 지정 확장을 보거나 수정 또는 추가하려면 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-137">Implement the <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> method to view, modify, or add custom extension to the client runtime across all messages used with an endpoint or for specific operations.</span></span> <span data-ttu-id="b20a8-138">클라이언트 런타임 개체로 수행할 수 있는 사용자 지정에 대한 자세한 내용은 <xref:System.ServiceModel.Dispatcher.ClientRuntime> 및 <xref:System.ServiceModel.Dispatcher.ClientOperation>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="b20a8-138">For details about what customizations you can do with a client run-time object, see <xref:System.ServiceModel.Dispatcher.ClientRuntime> and <xref:System.ServiceModel.Dispatcher.ClientOperation>.</span></span>  
  
 <span data-ttu-id="b20a8-139">동작이 서비스 애플리케이션에서만 사용하도록 지정된 경우 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> 메서드가 <xref:System.NotImplementedException>을 throw하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-139">It is recommended that the <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> method throw a <xref:System.NotImplementedException> if the behavior is only intended for use in a service application.</span></span>  
  
 <span data-ttu-id="b20a8-140">다른 동작에서 런타임에 대해 일부 작업을 이미 추가 또는 제거했을 수 있으므로 설명의 작업 수가 <xref:System.ServiceModel.Dispatcher.DispatchOperation> 속성의 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A> 개체 수와 다를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-140">Because other behaviors may have already added or removed some operations from the runtime there is no guarantee that there are the same number of operations in the description as there are <xref:System.ServiceModel.Dispatcher.DispatchOperation> objects in the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::EndpointDispatcher ^ endpointDispatcher);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.EndpointDispatcher -&gt; unit" Usage="iEndpointBehavior.ApplyDispatchBehavior (endpoint, endpointDispatcher)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="endpointDispatcher" Type="System.ServiceModel.Dispatcher.EndpointDispatcher" />
      </Parameters>
      <Docs>
        <param name="endpoint"><span data-ttu-id="b20a8-141">계약을 공개하는 엔드포인트입니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-141">The endpoint that exposes the contract.</span></span></param>
        <param name="endpointDispatcher"><span data-ttu-id="b20a8-142">수정하거나 확장할 엔드포인트 디스패처입니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-142">The endpoint dispatcher to be modified or extended.</span></span></param>
        <summary><span data-ttu-id="b20a8-143">엔드포인트에 대해 서비스의 수정이나 확장을 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-143">Implements a modification or extension of the service across an endpoint.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b20a8-144">모든 메시지에 대해 또는 엔드포인트의 특정 작업에 대해 서비스 런타임을 보거나 수정 또는 확장하려면 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-144">Implement the <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> method to view, modify, or extend the service runtime across all messages or for specific operations in an endpoint.</span></span> <span data-ttu-id="b20a8-145">서비스 애플리케이션에서 수행할 수 있는 사용자 지정에 대한 자세한 내용은 <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> 및 <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="b20a8-145">For details about what customizations you can do in a service application, see <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> and <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b20a8-146">동작이 클라이언트 애플리케이션에서만 사용되도록 지정된 경우 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> 메서드가 <xref:System.NotImplementedException> 예외를 throw하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-146">It is recommended that the <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> method throw a <xref:System.NotImplementedException> exception if the behavior is only intended for use in a client application.</span></span>  
  
 <span data-ttu-id="b20a8-147">콜백 계약을 사용할 경우 이름이 동일한 두 개의 작업(방향별로 하나씩)이 설명에 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-147">Note that there can be two operations with the same name in the description when using a callback contract (one operation in each direction).</span></span> <span data-ttu-id="b20a8-148">작업에서 반복을 수행하려면 엔드포인트 <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType>과 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A?displayProperty=nameWithType> 속성이 반환하는 요소 간에 메시지 방향을 연결해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-148">If you are iterating through operations, you must correlate the message direction between the endpoint <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> and what is returned by the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="b20a8-149">또한 다른 동작에서 런타임에 대해 일부 작업을 이미 추가 또는 제거했을 수 있으므로 설명의 작업 수가 <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> 속성의 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A?displayProperty=nameWithType> 개체 수와 다를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-149">In addition, because other behaviors may have already added or removed some operations from the runtime, there is no guarantee that there are the same number of operations in description as there are <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> objects in the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A?displayProperty=nameWithType> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b20a8-150">다음 코드 예제에서는 서비스 애플리케이션에서 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> 개체를 추가하는 엔드포인트 동작의 구현을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-150">The following code example shows the implementation of an endpoint behavior that adds an <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> object in a service application.</span></span> <span data-ttu-id="b20a8-151">이 경우 `EndpointBehaviorMessageInspector` 클래스는 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType>를 구현하여 인바운드 및 아웃바운드 메시지를 검사하고, <xref:System.ServiceModel.Description.IEndpointBehavior> 인터페이스를 구현하여 동작이 적용되는 모든 엔드포인트에 대한 검사 시스템에 inspector 클래스를 삽입하며, <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>를 구현함으로써 애플리케이션 구성 파일을 사용하여 메시지 검사자 동작을 활성화합니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-151">In this case, the `EndpointBehaviorMessageInspector` class implements <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> to inspect the inbound and outbound message, the <xref:System.ServiceModel.Description.IEndpointBehavior> interface to insert the inspector class into the inspection system for all endpoints to which the behavior applies, and the <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> to enable the message inspector behavior using an application configuration file.</span></span>  
  
 <span data-ttu-id="b20a8-152">첫 번째 단계는 메시지 검사자를 구현하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-152">The first step is to implement the message inspector.</span></span>  
  
 [!code-csharp[IEndpointBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#2)]  
  
 <span data-ttu-id="b20a8-153">다음 코드 예제에서는 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> 메서드를 사용하여 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> 속성에 메시지 검사자를 추가하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-153">The next code example shows the use of the <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> method to add the message inspector to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> property.</span></span>  
  
 [!code-csharp[IEndpointBehavior#4](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#4)]  
  
 <span data-ttu-id="b20a8-154">다음 코드 예제에서는 구성 파일에서 메시지 검사자를 사용할 수 있도록 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>를 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-154">The following code example shows the implementation of <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> in order to enable use of the message inspector behavior from a configuration file.</span></span>  
  
 [!code-csharp[IEndpointBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#3)]  
  
 <span data-ttu-id="b20a8-155">마지막으로 다음 구성 파일에서는 구성에서 위의 예제를 사용하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-155">Finally, the following configuration file shows how the preceding example can be used from configuration.</span></span>  
  
 [!code-xml[IEndpointBehavior#5](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/hostapplication.exe.config#5)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ServiceEndpoint endpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ServiceEndpoint endpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Validate (endpoint As ServiceEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ServiceEndpoint ^ endpoint);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ServiceEndpoint -&gt; unit" Usage="iEndpointBehavior.Validate endpoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint"><span data-ttu-id="b20a8-156">유효성을 검사할 엔드포인트입니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-156">The endpoint to validate.</span></span></param>
        <summary><span data-ttu-id="b20a8-157">엔드포인트가 특정 용도의 기준을 충족하는지 확인하려면 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-157">Implement to confirm that the endpoint meets some intended criteria.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b20a8-158">구조체가 기준 집합을 충족하는지 검사하려면 <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-158">Implement the <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> method to examine the structure to confirm any set of criteria.</span></span> <span data-ttu-id="b20a8-159">이 메서드를 사용하기 위해 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> 또는 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A>에서 사용자 지정을 수행해야 할 필요는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-159">It is not necessary to perform any customizations in <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> or <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> to make use of this method.</span></span> <span data-ttu-id="b20a8-160">엔드포인트가 유효성 검사를 통과하면 반환되고, 그렇지 않으면 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-160">If the endpoint passes validation, return; otherwise, throw an exception.</span></span>  
  
 <span data-ttu-id="b20a8-161">예를 들어, <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> 메서드를 사용하여 모든 엔드포인트가 승인된 회사 바인딩을 사용하는지 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b20a8-161">For example, the <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> method can be use to ensure that all endpoints use an approved corporate binding.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>