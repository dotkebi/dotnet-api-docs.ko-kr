<Type Name="IParameterInspector" FullName="System.ServiceModel.Dispatcher.IParameterInspector">
  <Metadata><Meta Name="ms.openlocfilehash" Value="49ec733d74601a56320493ded4b91bb70244b411" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56760950" /></Metadata><TypeSignature Language="C#" Value="public interface IParameterInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IParameterInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IParameterInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IParameterInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IParameterInspector" />
  <TypeSignature Language="F#" Value="type IParameterInspector = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="ffc99-101">클라이언트 또는 서비스에서 호출 이전 및 이후의 정보를 검사 또는 수정할 수 있는 사용자 지정 매개 변수 검사자를 통해 구현되는 계약을 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-101">Defines the contract implemented by custom parameter inspectors that enables inspection or modification of information prior to and subsequent to calls on either the client or the service.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ffc99-102">클라이언트 또는 서비스 애플리케이션 중에서 호출 이전과 이후에 해당 호출의 내용을 보고 수정할 수 있는 사용자 지정 매개 변수 검사자를 만들려면 <xref:System.ServiceModel.Dispatcher.IParameterInspector> 인터페이스를 구현하십시오.</span><span class="sxs-lookup"><span data-stu-id="ffc99-102">Implement the <xref:System.ServiceModel.Dispatcher.IParameterInspector> interface to create a custom parameter inspector that can view and modify the contents of a call both before the call and after the call in either client or service applications.</span></span>  
  
 <span data-ttu-id="ffc99-103">클라이언트에서 아웃바운드 호출 시 검사자는 요청 콘텐츠가 serialize되어 서비스로 보내지기 전에 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-103">On outbound calls from a client, the inspector is invoked before the request contents are serialized and sent to the service.</span></span> <span data-ttu-id="ffc99-104">또한 검사자는 응답이 deserialize된 다음 반환 값이 프록시 메서드로 디스패치되기 전에 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-104">The inspector is also called after the response has been deserialized but before the return values have been dispatched to the proxy method.</span></span>  
  
 <span data-ttu-id="ffc99-105">서비스로 인바운드 호출 시 검사자는 매개 변수가 deserialize된 다음 서비스 작업으로 디스패치되기 전에 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-105">On inbound calls to a service, the inspector is invoked after parameters are deserialized but before they are dispatched to the service operation.</span></span>  
  
 <span data-ttu-id="ffc99-106">특정 작업을 위해 <xref:System.ServiceModel.Dispatcher.ClientOperation.ParameterInspectors%2A?displayProperty=nameWithType> 구현을 검사자 컬렉션에 추가하려면 <xref:System.ServiceModel.Dispatcher.DispatchOperation.ParameterInspectors%2A?displayProperty=nameWithType> 또는 <xref:System.ServiceModel.Dispatcher.IParameterInspector> 속성을 사용하십시오.</span><span class="sxs-lookup"><span data-stu-id="ffc99-106">Use the <xref:System.ServiceModel.Dispatcher.ClientOperation.ParameterInspectors%2A?displayProperty=nameWithType> or the <xref:System.ServiceModel.Dispatcher.DispatchOperation.ParameterInspectors%2A?displayProperty=nameWithType> properties to add an <xref:System.ServiceModel.Dispatcher.IParameterInspector> implementation to the inspectors collection for a particular operation.</span></span>  
  
 <span data-ttu-id="ffc99-107">**참고** 개발자와 관리자가 있는지 확인 해야 다른와 상호 작용 <xref:System.ServiceModel.Dispatcher.IParameterInspector> 구현을 인식 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-107">**Note** Developers and administrators must ensure that the interaction with other <xref:System.ServiceModel.Dispatcher.IParameterInspector> implementations is understood.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ffc99-108">다음 코드 예제에서는 <xref:System.ServiceModel.Dispatcher.IParameterInspector>의 구현에 대해 자세히 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-108">The following code example shows an <xref:System.ServiceModel.Dispatcher.IParameterInspector> implementation that:</span></span>  
  
-   <span data-ttu-id="ffc99-109">응답이 서비스에서 deserialize되거나 요청이 클라이언트에서 serialize된 다음 콘솔에 작업 이름 및 반환 값을 기록합니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-109">Writes the operation name and return value to the console after a response has been deserialized by the service or a request has been serialized by a client.</span></span>  
  
-   <span data-ttu-id="ffc99-110">응답이 클라이언트에서 deserialize되거나 서비스에서 serialize되고 나면 콘솔에 작업 이름을 기록합니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-110">Writes the operation name to the console after deserializing a response on the client or after a response has been serialized on the service.</span></span>  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 <span data-ttu-id="ffc99-111">다음 코드 예제에서는 <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> 또는 <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>를 사용하여 <xref:System.ServiceModel.Dispatcher.IParameterInspector> 개체를 삽입하는 방법에 대해 자세히 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-111">The following code example shows how to use either <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> or <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> to insert <xref:System.ServiceModel.Dispatcher.IParameterInspector> objects.</span></span>  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterCall">
      <MemberSignature Language="C#" Value="public void AfterCall (string operationName, object[] outputs, object returnValue, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AfterCall(string operationName, object[] outputs, object returnValue, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AfterCall (operationName As String, outputs As Object(), returnValue As Object, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AfterCall(System::String ^ operationName, cli::array &lt;System::Object ^&gt; ^ outputs, System::Object ^ returnValue, System::Object ^ correlationState);" />
      <MemberSignature Language="F#" Value="abstract member AfterCall : string * obj[] * obj * obj -&gt; unit" Usage="iParameterInspector.AfterCall (operationName, outputs, returnValue, correlationState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationName" Type="System.String" />
        <Parameter Name="outputs" Type="System.Object[]" />
        <Parameter Name="returnValue" Type="System.Object" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="operationName"><span data-ttu-id="ffc99-112">호출된 작업 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-112">The name of the invoked operation.</span></span></param>
        <param name="outputs"><span data-ttu-id="ffc99-113">출력 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-113">Any output objects.</span></span></param>
        <param name="returnValue"><span data-ttu-id="ffc99-114">작업 반환 값입니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-114">The return value of the operation.</span></span></param>
        <param name="correlationState"><span data-ttu-id="ffc99-115"><see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" /> 메서드 또는 <see langword="null" />에서 반환된 상관 관계 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-115">Any correlation state returned from the <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" /> method, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="ffc99-116">클라이언트 호출이 반환된 후와 서비스 응답이 보내지기 전에 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-116">Called after client calls are returned and before service responses are sent.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ffc99-117">클라이언트에서 아웃바운드 호출 시 검사자는 요청 콘텐츠가 serialize되어 서비스로 보내지기 전에 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-117">On outbound calls from a client, the inspector is invoked before the request contents are serialized and sent to the service.</span></span> <span data-ttu-id="ffc99-118">또한 검사자는 응답이 deserialize된 다음 반환 값이 프록시 메서드로 디스패치되기 전에 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-118">The inspector is also called after the response has been deserialized but before the return values have been dispatched to the proxy method.</span></span>  
  
 <span data-ttu-id="ffc99-119">서비스로 인바운드 호출 시 검사자는 매개 변수가 deserialize된 다음 서비스 작업으로 디스패치되기 전에 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-119">On inbound calls to a service, the inspector is invoked after parameters are deserialized but before they are dispatched to the service operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ffc99-120">다음 코드 예제에서는 <xref:System.ServiceModel.Dispatcher.IParameterInspector>의 구현에 대해 자세히 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-120">The following code example shows an <xref:System.ServiceModel.Dispatcher.IParameterInspector> implementation that:</span></span>  
  
-   <span data-ttu-id="ffc99-121">응답이 서비스에서 deserialize되거나 요청이 클라이언트에서 serialize된 다음 콘솔에 작업 이름 및 반환 값을 기록합니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-121">Writes the operation name and return value to the console after a response has been deserialized by the service or a request has been serialized by a client.</span></span>  
  
-   <span data-ttu-id="ffc99-122">응답이 클라이언트에서 deserialize되거나 서비스에서 serialize되고 나면 콘솔에 작업 이름을 기록합니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-122">Writes the operation name to the console after deserializing a response on the client or after a response has been serialized on the service.</span></span>  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 <span data-ttu-id="ffc99-123">다음 코드 예제에서는 <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> 또는 <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>를 사용하여 <xref:System.ServiceModel.Dispatcher.IParameterInspector> 개체를 삽입하는 방법에 대해 자세히 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-123">The following code example shows how to use either <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>, or <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> to insert <xref:System.ServiceModel.Dispatcher.IParameterInspector> objects.</span></span>  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeCall">
      <MemberSignature Language="C#" Value="public object BeforeCall (string operationName, object[] inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object BeforeCall(string operationName, object[] inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeforeCall (operationName As String, inputs As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ BeforeCall(System::String ^ operationName, cli::array &lt;System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="abstract member BeforeCall : string * obj[] -&gt; obj" Usage="iParameterInspector.BeforeCall (operationName, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationName" Type="System.String" />
        <Parameter Name="inputs" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="operationName"><span data-ttu-id="ffc99-124">작업의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-124">The name of the operation.</span></span></param>
        <param name="inputs"><span data-ttu-id="ffc99-125">클라이언트에서 메서드로 전달한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-125">The objects passed to the method by the client.</span></span></param>
        <summary><span data-ttu-id="ffc99-126">클라이언트 호출이 보내지기 전과 서비스 응답이 반환된 후에 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-126">Called before client calls are sent and after service responses are returned.</span></span></summary>
        <returns><span data-ttu-id="ffc99-127"><paramref name="correlationState" />에서 <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" /> 매개 변수로 반환되는 상관 관계 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-127">The correlation state that is returned as the <paramref name="correlationState" /> parameter in <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" />.</span></span> <span data-ttu-id="ffc99-128">상관 관계 상태를 사용하지 않을 경우 <see langword="null" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-128">Return <see langword="null" /> if you do not intend to use correlation state.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ffc99-129">클라이언트에서 아웃바운드 호출 시 검사자는 요청 콘텐츠가 serialize되어 서비스로 보내지기 전에 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-129">On outbound calls from a client, the inspector is invoked before the request contents are serialized and sent to the service.</span></span> <span data-ttu-id="ffc99-130">또한 검사자는 응답이 deserialize된 다음 반환 값이 프록시 메서드로 디스패치되기 전에 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-130">The inspector is also called after the response has been deserialized but before the return values have been dispatched to the proxy method.</span></span>  
  
 <span data-ttu-id="ffc99-131">서비스로 인바운드 호출 시 검사자는 요청 콘텐츠가 deserialize되어 서비스 작업으로 디스패치된 다음 응답 콘텐츠가 serialize되어 클라이언트로 보내지기 전에 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-131">On inbound calls to a service, the inspector is invoked after the request contents are deserialized and dispatched to the service operation and before the response contents are serialized and sent to the client.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ffc99-132">다음 코드 예제에서는 <xref:System.ServiceModel.Dispatcher.IParameterInspector>의 구현에 대해 자세히 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-132">The following code example shows an <xref:System.ServiceModel.Dispatcher.IParameterInspector> implementation that:</span></span>  
  
-   <span data-ttu-id="ffc99-133">응답이 서비스에서 deserialize되거나 요청이 클라이언트에서 serialize된 다음 콘솔에 작업 이름 및 반환 값을 기록합니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-133">Writes the operation name and return value to the console after a response has been deserialized by the service or a request has been serialized by a client.</span></span>  
  
-   <span data-ttu-id="ffc99-134">응답이 클라이언트에서 deserialize되거나 서비스에서 serialize된 다음 콘솔에 작업 이름을 기록합니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-134">Writes the operation name to the console after deserializing a response on the client or after a response is serialized on the service.</span></span>  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 <span data-ttu-id="ffc99-135">다음 코드 예제에서는 <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> 또는 <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>를 사용하여 <xref:System.ServiceModel.Dispatcher.IParameterInspector> 개체를 삽입하는 방법에 대해 자세히 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="ffc99-135">The following code example shows how to use either <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> or <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> to insert <xref:System.ServiceModel.Dispatcher.IParameterInspector> objects.</span></span>  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>