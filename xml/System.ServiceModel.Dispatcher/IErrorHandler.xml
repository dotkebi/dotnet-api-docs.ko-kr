<Type Name="IErrorHandler" FullName="System.ServiceModel.Dispatcher.IErrorHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5abe47d685a48a50730ead6e4da1cc6da5e45d5e" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57950501" /></Metadata><TypeSignature Language="C#" Value="public interface IErrorHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IErrorHandler" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IErrorHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface IErrorHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class IErrorHandler" />
  <TypeSignature Language="F#" Value="type IErrorHandler = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="fbcea-101">구현자가 호출자에게 반환되는 오류 메시지를 제어하고, 로깅 등의 사용자 지정 오류 처리를 선택적으로 수행할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-101">Allows an implementer to control the fault message returned to the caller and optionally perform custom error processing such as logging.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fbcea-102">예외가 throw 되 면 응용 프로그램의 동작을 명시적으로 제어를 구현 합니다 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 인터페이스에 추가 하는 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher>의 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-102">To explicitly control the behavior of the application when an exception is thrown, implement the <xref:System.ServiceModel.Dispatcher.IErrorHandler> interface and add it to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher>'s <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.</span></span> <span data-ttu-id="fbcea-103"><xref:System.ServiceModel.Dispatcher.IErrorHandler>를 사용하면 발생되는 SOAP 오류를 명시적으로 제어하고, 오류를 클라이언트에게 다시 보낼지 여부를 결정하며, 로깅과 같은 관련 작업을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-103"><xref:System.ServiceModel.Dispatcher.IErrorHandler> enables you to explicitly control the SOAP fault generated, decide whether to send it back to the client, and perform associated tasks, such as logging.</span></span> <span data-ttu-id="fbcea-104">오류 처리기는 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> 속성에 추가된 순서대로 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-104">Error handlers are called in the order in which they were added to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.</span></span>  
  
 <span data-ttu-id="fbcea-105">클라이언트에게 반환되는 오류 메시지를 제어하려면 <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-105">Implement the <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> method to control the fault message that is returned to the client.</span></span>  
  
 <span data-ttu-id="fbcea-106">오류 로깅, fail-fast 보장, 응용 프로그램 종료 등과 같은 오류 관련 동작을 확인하려면 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-106">Implement the <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> method to ensure error-related behaviors, including error logging, assuring a fail fast, shutting down the application, and so on.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fbcea-107"><xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> 메서드는 여러 다른 위치에서 호출될 수 있기 때문에 이 메서드가 특정 스레드에서 호출된다고 보장할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-107">Because the <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> method can be called from many different places there are no guarantees made about which thread the method is called on.</span></span> <span data-ttu-id="fbcea-108"><xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> 메서드가 작업 스레드에서 호출된다고 단정하지 마십시오.</span><span class="sxs-lookup"><span data-stu-id="fbcea-108">Do not depend on <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> method being called on the operation thread.</span></span>  
  
 <span data-ttu-id="fbcea-109">모든 <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 구현은 응답 메시지를 보내기 전에 처음으로 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-109">All <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> implementations are called first, prior to sending a response message.</span></span> <span data-ttu-id="fbcea-110">모든 <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 구현이 호출되어 반환될 경우 `fault`가 `null`이 아니면 작업 계약에 따라 클라이언트에게 다시 전송됩니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-110">When all <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> implementations have been called and return, and if `fault` is non-`null`, it is sent back to the client according to the operation contract.</span></span> <span data-ttu-id="fbcea-111">모든 구현이 호출된 후에 `fault`가 `null`이면 응답 메시지는 <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> 속성 값에 의해 제어됩니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-111">If `fault` is `null` after all implementations have been called, the response message is controlled by the <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> property value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fbcea-112">모든 <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 구현이 호출되고 응답 메시지가 채널로 전달된 후 예외가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-112">Exceptions can occur after all <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> implementations are called and a response message is handed to the channel.</span></span> <span data-ttu-id="fbcea-113">(예: 메시지를 직렬화 하는 어려움) 채널 예외가 발생 하는 경우 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 개체 알림이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-113">If a channel exception occurs (for example, difficulty serializing the message) <xref:System.ServiceModel.Dispatcher.IErrorHandler> objects are notified.</span></span> <span data-ttu-id="fbcea-114">이 경우 여전히 확인 해야 catch 하 고 이러한 예외를 표시 하는 개발 환경 또는 사용 하 여 추적 하는 문제를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-114">In this case, you should still make sure that your development environment catches and displays such exceptions to you or makes use of tracing to discover the problem.</span></span> <span data-ttu-id="fbcea-115">추적에 대 한 자세한 내용은 참조 하세요. [응용 프로그램 문제 해결을 사용 하 여 추적](~/docs/framework/wcf/diagnostics/tracing/using-tracing-to-troubleshoot-your-application.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-115">For more information about tracing, see [Using Tracing to Troubleshoot Your Application](~/docs/framework/wcf/diagnostics/tracing/using-tracing-to-troubleshoot-your-application.md).</span></span>  
  
 <span data-ttu-id="fbcea-116">응답 메시지가 전송된 후 모든 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> 구현이 동일한 순서로 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-116">After the response message has been sent, all <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> implementations are called in the same order.</span></span>  
  
 <span data-ttu-id="fbcea-117">일반적으로 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 구현은 서비스 및 클라이언트(양방향 통신의 경우)의 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> 속성에 추가됩니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-117">Typically, an <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation is added to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property on the service (and the client in the case of duplex communication).</span></span>  
  
 <span data-ttu-id="fbcea-118">동작(<xref:System.ServiceModel.Dispatcher.IErrorHandler>, <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> 또는 <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> 개체)을 구현하여 런타임에 <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>를 추가하고, 구성 파일이나 사용자 지정 속성을 통해 이 동작을 프로그래밍 방식으로 사용함으로써 <xref:System.ServiceModel.Dispatcher.IErrorHandler>를 연결할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-118">You can add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> to the runtime by implementing a behavior (either an <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>, or <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType> object) and use the behavior programmatically, from a configuration file or with a custom attribute to attach your <xref:System.ServiceModel.Dispatcher.IErrorHandler>.</span></span>  
  
 <span data-ttu-id="fbcea-119">동작을 사용 하 여 런타임을 수정 하는 방법에 대 한 자세한 내용은 참조 하세요. [구성 및 동작을 사용 하 여 런타임 확장](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-119">For more information about using behaviors to modify the runtime, see [Configuring and Extending the Runtime with Behaviors](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fbcea-120">다음 코드 예제에서는 서비스 메서드가 관리 예외를 throw할 때 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 형식의 <xref:System.ServiceModel.FaultException%601>만 반환하는 `GreetingFault`를 구현하는 서비스에 대해 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-120">The following code example demonstrates a service that implements <xref:System.ServiceModel.Dispatcher.IErrorHandler> that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.</span></span>  
  
 [!code-csharp[IErrorHandler#6](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#6)]
 [!code-vb[IErrorHandler#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#6)]  
  
 <span data-ttu-id="fbcea-121">다음 코드 예제에서는 서비스 동작을 사용하여 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 구현을 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> 속성에 추가하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-121">The following code example shows how to use a service behavior to add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.</span></span>  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 <span data-ttu-id="fbcea-122">다음 코드 예제에서는 응용 프로그램 구성 파일을 사용하여 서비스 동작을 로드하도록 서비스를 구성하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-122">The following code example shows how to configure the service to load the service behavior using an application configuration file.</span></span> <span data-ttu-id="fbcea-123">구성 파일에서 서비스 동작을 공개하는 방법에 대한 자세한 내용은 <xref:System.ServiceModel.Description.IServiceBehavior>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="fbcea-123">For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.</span></span>  

 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="HandleError">
      <MemberSignature Language="C#" Value="public bool HandleError (Exception error);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleError(class System.Exception error) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function HandleError (error As Exception) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HandleError(Exception ^ error);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="C#" Value="public bool HandleError (Exception exception);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleError(class System.Exception exception) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HandleError(Exception ^ exception);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member HandleError : Exception -&gt; bool" Usage="iErrorHandler.HandleError error" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member HandleError : Exception -&gt; bool" Usage="iErrorHandler.HandleError exception" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" Index="0" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="exception" Type="System.Exception" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="error"><span data-ttu-id="fbcea-124">처리 중에 throw되는 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-124">The exception thrown during processing.</span></span></param>
        <param name="exception"><span data-ttu-id="fbcea-125">처리 중에 throw되는 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-125">The exception thrown during processing.</span></span></param>
        <summary><span data-ttu-id="fbcea-126">오류 관련 처리를 사용하고 디스패처가 특정 상황에서 세션 및 인스턴스 컨텍스트를 중단하는지 여부를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-126">Enables error-related processing and returns a value that indicates whether the dispatcher aborts the session and the instance context in certain cases.</span></span></summary>
        <returns><span data-ttu-id="fbcea-127">WCF(Windows Communication Foundation)가 세션(있는 경우)을 중단하지 않는 경우 <see langword="true" />이고 인스턴스 컨텍스트가 <see cref="F:System.ServiceModel.InstanceContextMode.Single" />이 아닌 경우 인스턴스 컨텍스트이며, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-127"><see langword="true" /> if Windows Communication Foundation (WCF) should not abort the session (if there is one) and instance context if the instance context is not <see cref="F:System.ServiceModel.InstanceContextMode.Single" />; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="fbcea-128">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-128">The default is <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fbcea-129">오류 로깅, 시스템 알림, 응용 프로그램 종료 등의 오류 관련 동작을 구현하고 예외가 적절하게 처리되었는지 여부를 지정하는 값을 반환하려면 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> 메서드를 사용하십시오.</span><span class="sxs-lookup"><span data-stu-id="fbcea-129">Use the <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> method to implement error-related behaviors such as error logging, system notifications, shutting down the application, and so on, and return a value that specifies whether the exception has been handled appropriately.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fbcea-130"><xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> 메서드는 여러 다른 위치에서 호출될 수 있기 때문에 이 메서드가 특정 스레드에서 호출된다고 보장할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-130">Because the <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> method can be called from many different places there are no guarantees made about which thread the method is called on.</span></span> <span data-ttu-id="fbcea-131"><xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> 메서드가 작업 스레드에서 호출된다고 단정하지 마십시오.</span><span class="sxs-lookup"><span data-stu-id="fbcea-131">Do not depend on <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> method being called on the operation thread.</span></span>  
  
 <span data-ttu-id="fbcea-132">모든 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 구현이 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-132">All <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementations are called.</span></span> <span data-ttu-id="fbcea-133">기본적으로 (반환 값이 `false`), 예외가 있으면 디스패처가 모든 세션을 중단 하 고 중단 합니다 <xref:System.ServiceModel.InstanceContext> 경우는 <xref:System.ServiceModel.InstanceContextMode> 가 아닌 <xref:System.ServiceModel.InstanceContextMode.Single>합니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-133">By default (when the return value is `false`), if there is an exception, the dispatcher aborts any session and aborts the <xref:System.ServiceModel.InstanceContext> if the <xref:System.ServiceModel.InstanceContextMode> is anything other than <xref:System.ServiceModel.InstanceContextMode.Single>.</span></span>  <span data-ttu-id="fbcea-134">그러면 예외가 처리되지 않은 것으로 간주되어 모든 상태가 손상된 것으로 간주됩니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-134">The exception is then considered unhandled and any state is considered corrupt.</span></span>  
  
 <span data-ttu-id="fbcea-135">이 기본 동작이 수행되지 않게 하려면 `true`에서 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>를 반환하십시오.</span><span class="sxs-lookup"><span data-stu-id="fbcea-135">Return `true` from <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> to prevent this default behavior.</span></span> <span data-ttu-id="fbcea-136">오류 처리기를 반환 하는 경우 `true` 것이 안전 실패 한 요청과 관련 된 상태를 계속 사용 하는 WCF에 지시 합니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-136">If any error handler returns `true` it instructs WCF that it is safe to continue using state associated with the failed request.</span></span>  
  
 <span data-ttu-id="fbcea-137">오류 처리기가 `true` 메서드에서 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>를 반환하면 예외가 처리되지 않은 것으로 간주되고 기본 응답이 사용됩니다. 이 경우 세션 채널에서 통신하거나 <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType> 속성이 <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType>로 설정되지 않은 경우 <xref:System.ServiceModel.InstanceContextMode.Single?displayProperty=nameWithType>와 채널이 중단될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-137">If no error handler returns `true` from the <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> method the exception is considered unhandled and the default response applies, potentially resulting in an aborted <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType> and channel when communicating on a session channel or the <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> property is not set to <xref:System.ServiceModel.InstanceContextMode.Single?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="fbcea-138">`error` 매개 변수는 `null`이 될 수 없으며 throw된 예외 개체를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-138">The `error` parameter is never `null` and contains the exception object that was thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fbcea-139">다음 코드 예제에서는 서비스 메서드가 관리 예외를 throw할 때 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 형식의 <xref:System.ServiceModel.FaultException%601>만 반환하는 `GreetingFault`를 구현하는 서비스에 대해 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-139">The following code example demonstrates a service that implements <xref:System.ServiceModel.Dispatcher.IErrorHandler> that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.</span></span>  
  
 [!code-csharp[IErrorHandler#6](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#6)]
 [!code-vb[IErrorHandler#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#6)]  
  
 <span data-ttu-id="fbcea-140">다음 코드 예제에서는 서비스 동작을 사용하여 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 구현을 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> 속성에 추가하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-140">The following code example shows how to use a service behavior to add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.</span></span>  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 <span data-ttu-id="fbcea-141">다음 코드 예제에서는 응용 프로그램 구성 파일을 사용하여 서비스 동작을 로드하도록 서비스를 구성하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-141">The following code example shows how to configure the service to load the service behavior using an application configuration file.</span></span> <span data-ttu-id="fbcea-142">구성 파일에서 서비스 동작을 공개하는 방법에 대한 자세한 내용은 <xref:System.ServiceModel.Description.IServiceBehavior>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="fbcea-142">For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.</span></span>  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProvideFault">
      <MemberSignature Language="C#" Value="public void ProvideFault (Exception error, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProvideFault(class System.Exception error, class System.ServiceModel.Channels.MessageVersion version, class System.ServiceModel.Channels.Message&amp; fault) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProvideFault (error As Exception, version As MessageVersion, ByRef fault As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProvideFault(Exception ^ error, System::ServiceModel::Channels::MessageVersion ^ version, System::ServiceModel::Channels::Message ^ % fault);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="C#" Value="public void ProvideFault (Exception exception, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProvideFault(class System.Exception exception, class System.ServiceModel.Channels.MessageVersion version, class System.ServiceModel.Channels.Message&amp; fault) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProvideFault(Exception ^ exception, System::ServiceModel::Channels::MessageVersion ^ version, System::ServiceModel::Channels::Message ^ % fault);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member ProvideFault : Exception * System.ServiceModel.Channels.MessageVersion *  -&gt; unit" Usage="iErrorHandler.ProvideFault (error, version, fault)" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member ProvideFault : Exception * System.ServiceModel.Channels.MessageVersion *  -&gt; unit" Usage="iErrorHandler.ProvideFault (exception, version, fault)" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" Index="0" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="exception" Type="System.Exception" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="version" Type="System.ServiceModel.Channels.MessageVersion" Index="1" />
        <Parameter Name="fault" Type="System.ServiceModel.Channels.Message" RefType="ref" Index="2" />
      </Parameters>
      <Docs>
        <param name="error"><span data-ttu-id="fbcea-143">서비스 작업 중에 throw되는 <see cref="T:System.Exception" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-143">The <see cref="T:System.Exception" /> object thrown in the course of the service operation.</span></span></param>
        <param name="exception"><span data-ttu-id="fbcea-144">서비스 작업 중에 throw되는 <see cref="T:System.Exception" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-144">The <see cref="T:System.Exception" /> object thrown in the course of the service operation.</span></span></param>
        <param name="version"><span data-ttu-id="fbcea-145">메시지의 SOAP 버전입니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-145">The SOAP version of the message.</span></span></param>
        <param name="fault"><span data-ttu-id="fbcea-146">클라이언트 또는 서비스(양방향인 경우)에 반환되는 <see cref="T:System.ServiceModel.Channels.Message" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-146">The <see cref="T:System.ServiceModel.Channels.Message" /> object that is returned to the client, or service, in the duplex case.</span></span></param>
        <summary><span data-ttu-id="fbcea-147">서비스 메서드 중에 발생한 예외로부터 반환되는 사용자 지정 <see cref="T:System.ServiceModel.FaultException`1" />을 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-147">Enables the creation of a custom <see cref="T:System.ServiceModel.FaultException`1" /> that is returned from an exception in the course of a service method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fbcea-148">클라이언트에 반환되는 사용자 지정 오류 메시지를 만들려면 <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-148">Implement the <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> method to create a custom fault message that is returned to the client.</span></span>  <span data-ttu-id="fbcea-149"><xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 메서드는 항상 WCF 런타임은 같은 특히 심각한 예외를 인식 하 고 자체 예외를 다시 throw 하는 경우를 제외 하 고 작업을 유지 하는 예외에 대 한 호출 수입니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-149">The <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> method will always be called for exceptions that leave operations, except when the WCF runtime recognizes the exception as especially fatal and rethrows the exception itself.</span></span> <span data-ttu-id="fbcea-150"><xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>가 `fault`이 아닌 경우 모든 `null` 구현이 호출되면 오류 메시지가 클라이언트에 다시 전송됩니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-150">When all <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> implementations have been called, the fault message is sent back to the client (if `fault` is non-`null`).</span></span> <span data-ttu-id="fbcea-151">경우는 `fault` 매개 변수는 `null` 기본 오류가 클라이언트에 전송 됩니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-151">If the `fault` parameter is `null` the default fault is sent to the client.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fbcea-152">처리 오류의 원인인 인바운드 메시지는 이 메서드의 <xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=nameWithType> 속성에서 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-152">The inbound message that caused the processing error is available during this method from the <xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=nameWithType> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fbcea-153"><xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 메서드는 여러 다른 위치에서 호출될 수 있기 때문에 이 메서드가 특정 스레드에서 호출된다고 보장할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-153">Because the <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> method can be called from many different places there are no guarantees made about which thread the method is called on.</span></span> <span data-ttu-id="fbcea-154"><xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 메서드가 작업 스레드에서 호출된다고 단정하지 마십시오.</span><span class="sxs-lookup"><span data-stu-id="fbcea-154">Do not depend on <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> method being called on the operation thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fbcea-155">다음 코드 예제에서는 서비스 메서드가 관리 예외를 throw할 때 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 형식의 <xref:System.ServiceModel.FaultException%601>만 반환하는 `GreetingFault`를 구현하는 서비스에 대해 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-155">The following code example demonstrates a service that implements <xref:System.ServiceModel.Dispatcher.IErrorHandler> that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.</span></span>  
  
 [!code-csharp[IErrorHandler#6](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#6)]
 [!code-vb[IErrorHandler#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#6)]  
  
 <span data-ttu-id="fbcea-156">다음 코드 예제에서는 서비스 동작을 사용하여 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 구현을 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> 속성에 추가하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-156">The following code example shows how to use a service behavior to add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.</span></span>  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 <span data-ttu-id="fbcea-157">다음 코드 예제에서는 응용 프로그램 구성 파일을 사용하여 서비스 동작을 로드하도록 서비스를 구성하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="fbcea-157">The following code example shows how to configure the service to load the service behavior using an application configuration file.</span></span> <span data-ttu-id="fbcea-158">구성 파일에서 서비스 동작을 공개하는 방법에 대한 자세한 내용은 <xref:System.ServiceModel.Description.IServiceBehavior>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="fbcea-158">For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.</span></span>  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>