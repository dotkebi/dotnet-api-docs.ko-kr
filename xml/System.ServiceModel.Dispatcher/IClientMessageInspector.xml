<Type Name="IClientMessageInspector" FullName="System.ServiceModel.Dispatcher.IClientMessageInspector">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e978a0e136feb8114dccd11b03c79e976865da84" /><Meta Name="ms.sourcegitcommit" Value="7461f9e28c2f184bd1596e6f07c25a3f34984516" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/28/2019" /><Meta Name="ms.locfileid" Value="58556676" /></Metadata><TypeSignature Language="C#" Value="public interface IClientMessageInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IClientMessageInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IClientMessageInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IClientMessageInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IClientMessageInspector" />
  <TypeSignature Language="F#" Value="type IClientMessageInspector = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="071b1-101">메시지를 보거나 수정하기 위해 <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors" /> 컬렉션에 추가할 수 있는 메시지 검사자 개체를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="071b1-101">Defines a message inspector object that can be added to the <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors" /> collection to view or modify messages.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="071b1-102">구현 된 <xref:System.ServiceModel.Dispatcher.IClientMessageInspector> 인터페이스에 추가 하는 <xref:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors%2A> 검사 하거나 WCF 클라이언트 개체를 통해 전달 될 때 메시지를 수정 하는 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="071b1-102">Implement the <xref:System.ServiceModel.Dispatcher.IClientMessageInspector> interface and add it to the <xref:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors%2A> collection to inspect or modify messages as they pass through a WCF client object.</span></span> <span data-ttu-id="071b1-103">자세한 내용은 <xref:System.ServiceModel.Dispatcher.ClientRuntime>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="071b1-103">For details, see <xref:System.ServiceModel.Dispatcher.ClientRuntime>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="071b1-104">다음 코드 예제에서는 구현이 호출될 때 콘솔에 문자열을 쓰는 구현을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="071b1-104">The following code example shows an implementation that writes strings to the console when the implementation is called.</span></span>  
  
 [!code-csharp[Interceptors#1](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#1)]
 [!code-vb[Interceptors#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#1)]  
  
 <span data-ttu-id="071b1-105">다음 코드 예제에서는 <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>를 사용하여 클라이언트 엔드포인트에 클라이언트 메시지 검사자를 삽입하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="071b1-105">The following code example shows how to use an <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> to insert the client message inspector in the client endpoint.</span></span>  
  
 [!code-csharp[Interceptors#2](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#2)]
 [!code-vb[Interceptors#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#2)]  
  
 <span data-ttu-id="071b1-106">마지막으로 다음 코드 예제에서는 특정 엔드포인트에서 엔드포인트 동작을 사용하도록 클라이언트 구성 파일을 수정하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="071b1-106">Finally, the following code example shows how to modify the client configuration file to use the endpoint behavior with a particular endpoint.</span></span>  
  
 [!code-xml[Interceptors#3](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/client.exe.config#3)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterReceiveReply">
      <MemberSignature Language="C#" Value="public void AfterReceiveReply (ref System.ServiceModel.Channels.Message reply, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AfterReceiveReply(class System.ServiceModel.Channels.Message&amp; reply, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AfterReceiveReply (ByRef reply As Message, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AfterReceiveReply(System::ServiceModel::Channels::Message ^ % reply, System::Object ^ correlationState);" />
      <MemberSignature Language="F#" Value="abstract member AfterReceiveReply :  * obj -&gt; unit" Usage="iClientMessageInspector.AfterReceiveReply (reply, correlationState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reply" Type="System.ServiceModel.Channels.Message" RefType="ref" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reply"><span data-ttu-id="071b1-107">형식으로 변형되어 클라이언트 애플리케이션에 다시 전달될 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="071b1-107">The message to be transformed into types and handed back to the client application.</span></span></param>
        <param name="correlationState"><span data-ttu-id="071b1-108">상관 관계 상태 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="071b1-108">Correlation state data.</span></span></param>
        <summary><span data-ttu-id="071b1-109">회신 메시지가 수신된 후 클라이언트 애플리케이션에 다시 전달되기 전에 메시지를 검사하거나 수정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="071b1-109">Enables inspection or modification of a message after a reply message is received but prior to passing it back to the client application.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="071b1-110">구현 <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply%2A> 검사 하거나 클라이언트 응용 프로그램에 반환 되는 개체로 deserialize 하기 전에 있지만 WCF 클라이언트 개체에 의해 수신 된 후 회신 메시지를 수정 합니다.</span><span class="sxs-lookup"><span data-stu-id="071b1-110">Implement <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply%2A> to inspect or modify a reply message after it has been received by the WCF client object but before it is deserialized into objects that are returned to the client application.</span></span>  
  
 <span data-ttu-id="071b1-111">`correlationState`는 <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A>가 이 메시지에 대해 호출될 때 사용자가 반환하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="071b1-111">The `correlationState` is the object returned by the user when <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A> is called for this message.</span></span> <span data-ttu-id="071b1-112">가장 좋은 방법은 이 개체를 <xref:System.Guid?displayProperty=nameWithType>로 만들어 동일한 두 `correlationState` 개체가 존재하지 않도록 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="071b1-112">The best practice is to make this a <xref:System.Guid?displayProperty=nameWithType> to ensure that no two `correlationState` objects are the same.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="071b1-113">다음 코드 예제에서는 구현이 호출될 때 콘솔에 문자열을 쓰는 구현을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="071b1-113">The following code example shows an implementation that writes strings to the console when the implementation is called.</span></span>  
  
 [!code-csharp[Interceptors#1](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#1)]
 [!code-vb[Interceptors#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#1)]  
  
 <span data-ttu-id="071b1-114">다음 코드 예제에서는 <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>를 사용하여 클라이언트 엔드포인트에 클라이언트 메시지 검사자를 삽입하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="071b1-114">The following code example shows how to use an <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> to insert the client message inspector in the client endpoint.</span></span>  
  
 [!code-csharp[Interceptors#2](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#2)]
 [!code-vb[Interceptors#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#2)]  
  
 <span data-ttu-id="071b1-115">마지막으로 다음 코드 예제에서는 특정 엔드포인트에서 엔드포인트 동작을 사용하도록 클라이언트 구성 파일을 수정하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="071b1-115">Finally, the following code example shows how to modify the client configuration file to use the endpoint behavior with a particular endpoint.</span></span>  
  
 [!code-xml[Interceptors#3](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/client.exe.config#3)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSendRequest">
      <MemberSignature Language="C#" Value="public object BeforeSendRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object BeforeSendRequest(class System.ServiceModel.Channels.Message&amp; request, class System.ServiceModel.IClientChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeforeSendRequest (ByRef request As Message, channel As IClientChannel) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ BeforeSendRequest(System::ServiceModel::Channels::Message ^ % request, System::ServiceModel::IClientChannel ^ channel);" />
      <MemberSignature Language="F#" Value="abstract member BeforeSendRequest :  * System.ServiceModel.IClientChannel -&gt; obj" Usage="iClientMessageInspector.BeforeSendRequest (request, channel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.ServiceModel.Channels.Message" RefType="ref" />
        <Parameter Name="channel" Type="System.ServiceModel.IClientChannel" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="071b1-116">서비스에 보낼 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="071b1-116">The message to be sent to the service.</span></span></param>
        <param name="channel"><span data-ttu-id="071b1-117">WCF 클라이언트 개체 채널입니다.</span><span class="sxs-lookup"><span data-stu-id="071b1-117">The WCF client object channel.</span></span></param>
        <summary><span data-ttu-id="071b1-118">요청 메시지가 서비스에 전달되기 전에 메시지를 검사하거나 수정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="071b1-118">Enables inspection or modification of a message before a request message is sent to a service.</span></span></summary>
        <returns><span data-ttu-id="071b1-119"><see cref="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" /> 메서드의 <paramref name="correlationState" /> 인수로 반환되는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="071b1-119">The object that is returned as the <paramref name="correlationState" /> argument of the <see cref="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" /> method.</span></span> <span data-ttu-id="071b1-120">상관 관계 상태를 사용하지 않으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="071b1-120">This is <see langword="null" /> if no correlation state is used.</span></span>  
  
<span data-ttu-id="071b1-121">가장 좋은 방법은 이 개체를 <see cref="T:System.Guid" />로 만들어 동일한 두 <paramref name="correlationState" /> 개체가 존재하지 않도록 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="071b1-121">The best practice is to make this a <see cref="T:System.Guid" /> to ensure that no two <paramref name="correlationState" /> objects are the same.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="071b1-122">요청 메시지가 전달되기 전에 메시지를 검사하거나 수정하려면 <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A>를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="071b1-122">Implement the <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A> to inspect or modify a request message before it is sent.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="071b1-123">다음 코드 예제에서는 구현이 호출될 때 콘솔에 문자열을 쓰는 구현을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="071b1-123">The following code example shows an implementation that writes strings to the console when the implementation is called.</span></span>  
  
 [!code-csharp[Interceptors#1](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#1)]
 [!code-vb[Interceptors#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#1)]  
  
 <span data-ttu-id="071b1-124">다음 코드 예제에서는 <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>를 사용하여 클라이언트 엔드포인트에 클라이언트 메시지 검사자를 삽입하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="071b1-124">The following code example shows how to use an <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> to insert the client message inspector in the client endpoint.</span></span>  
  
 [!code-csharp[Interceptors#2](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#2)]
 [!code-vb[Interceptors#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#2)]  
  
 <span data-ttu-id="071b1-125">마지막으로 다음 코드 예제에서는 특정 엔드포인트에서 엔드포인트 동작을 사용하도록 클라이언트 구성 파일을 수정하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="071b1-125">Finally, the following code example shows how to modify the client configuration file to use the endpoint behavior with a particular endpoint.</span></span>  
  
 [!code-xml[Interceptors#3](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/client.exe.config#3)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>