<Type Name="ConditionalWeakTable&lt;TKey,TValue&gt;" FullName="System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f9b7c852fca3f6d1e1f0e3a07c2e8f903435bfc0" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57920522" /></Metadata><TypeSignature Language="C#" Value="public sealed class ConditionalWeakTable&lt;TKey,TValue&gt; where TKey : class where TValue : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ConditionalWeakTable`2&lt;class TKey, class TValue&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ConditionalWeakTable(Of TKey, TValue)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TValue&gt;&#xA; where TKey : class where TValue : classpublic ref class ConditionalWeakTable sealed" />
  <TypeSignature Language="F#" Value="type ConditionalWeakTable&lt;'Key, 'Value (requires 'Key : null and 'Value : null)&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Dynamic.Runtime</AssemblyName>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TValue">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces></Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TKey"><span data-ttu-id="a2357-101">필드가 연결된 참조 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-101">The reference type to which the field is attached.</span></span></typeparam>
    <typeparam name="TValue"><span data-ttu-id="a2357-102">필드의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-102">The field's type.</span></span> <span data-ttu-id="a2357-103">참조 형식이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-103">This must be a reference type.</span></span></typeparam>
    <summary><span data-ttu-id="a2357-104">컴파일러에서 관리되는 개체에 개체 필드를 동적으로 연결할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-104">Enables compilers to dynamically attach object fields to managed objects.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2357-105"><xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 클래스에 언어 컴파일러에서 런타임에 관리 되는 개체에 임의의 속성을 연결할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-105">The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class enables language compilers to attach arbitrary properties to managed objects at run time.</span></span> <span data-ttu-id="a2357-106"><xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 개체가 키로 표현 되는 관리 되는 개체 값으로 표현 되는 연결 된 속성에 바인딩하는 사전입니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-106">A <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> object is a dictionary that binds a managed object, which is represented by a key, to its attached property, which is represented by a value.</span></span> <span data-ttu-id="a2357-107">개체의 키는의 개별 인스턴스를 `TKey` 클래스는 속성이 연결 된 해당 값은 해당 개체에 할당 된 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-107">The object's keys are the individual instances of the `TKey` class to which the property is attached, and its values are the property values that are assigned to the corresponding objects.</span></span>  
  
 <span data-ttu-id="a2357-108">키는 고유 해야 합니다. 즉,는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 클래스는 관리 되는 개체당 하나의 연결 된 값을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-108">Keys must be unique; in other words, the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class supports one attached value per managed object.</span></span> <span data-ttu-id="a2357-109">두 키가 동일한 경우에 전달 하는 <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> 메서드가 반환 되는 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-109">Two keys are equal if passing them to the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method returns `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a2357-110">재정의 하 여 같음 비교를 제어할 수 없는 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> 를 키에 대 한 해시 코드를 명시적으로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-110">You cannot control equality comparisons by overriding <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> to explicitly set the hash code for a key.</span></span> <span data-ttu-id="a2357-111">합니다 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 클래스를 사용 하지 않습니다 합니다 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> 를 계산 하는 메서드 코드를 해시 하 고 따라서 호출 하지 않습니다 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-111">The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class does not use the <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> method to compute hash codes, and therefore does not invoke <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> overrides.</span></span>  
  
 <span data-ttu-id="a2357-112">하지만 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 키/값 쌍의 컬렉션을 보유 하는 클래스를 가장 잘 간주 됩니다 사전 개체 대신 테이블입니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-112">Although the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class holds a collection of key/value pairs, it is best thought of as a table rather than a dictionary object.</span></span> <span data-ttu-id="a2357-113"><xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 클래스는 여러 가지 방법으로 사전에서 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-113">The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class differs from a dictionary in several ways:</span></span>  
  
-   <span data-ttu-id="a2357-114">키를 유지 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-114">It does not persist keys.</span></span> <span data-ttu-id="a2357-115">즉, 키 유지 되지 않는 컬렉션의 멤버 이므로만 합니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-115">That is, a key is not kept alive only because it is a member of the collection.</span></span>  
  
-   <span data-ttu-id="a2357-116">모든 메서드는 포함 되지 않습니다 (같은 `GetEnumerator` 또는 `Contains`) 사전 일반적으로 있는 합니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-116">It does not include all the methods (such as `GetEnumerator` or `Contains`) that a dictionary typically has.</span></span>  
  
-   <span data-ttu-id="a2357-117">구현 하지 않기를 <xref:System.Collections.Generic.IDictionary%602> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-117">It does not implement the <xref:System.Collections.Generic.IDictionary%602> interface.</span></span>  
  
 <span data-ttu-id="a2357-118"><xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 클래스 컬렉션에 저장 된 키의 개체 수명 관리에 있는 다른 컬렉션 개체에서 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-118">The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class differs from other collection objects in its management of the object lifetime of keys stored in the collection.</span></span> <span data-ttu-id="a2357-119">일반적으로 개체 컬렉션으로 저장 된 경우 해당 수명 동안 제거 됩니다 (및 개체에 대 한 추가 참조가 없는) 하거나 자체 컬렉션 개체가 제거 될 때까지 지속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-119">Ordinarily, when an object is stored in a collection, its lifetime lasts until it is removed (and there are no additional references to the object) or until the collection object itself is destroyed.</span></span> <span data-ttu-id="a2357-120">그러나는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 테이블에 키/값 쌍을 보장 하지 않습니다 키 지속 됩니다 (예를 들어 테이블에 있는 경우 키 하나에 값 V1 사용 하 여 테이블에 저장 된 값을 통해 도달할 수 있는 경우에 추가 클래스 및 P2는 대 한 참조를 포함 하는 값을 사용 하 여 두 번째 키, B).</span><span class="sxs-lookup"><span data-stu-id="a2357-120">However, in the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class, adding a key/value pair to the table does not ensure that the key will persist, even if it can be reached directly from a value stored in the table (for example, if the table contains one key, A, with a value V1, and a second key, B, with a value P2 that contains a reference to A).</span></span> <span data-ttu-id="a2357-121">대신 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 키에 다른 참조가 없는 테이블 밖으로 키/값 항목을 자동으로 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-121">Instead, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> automatically removes the key/value entry as soon as no other references to a key exist outside the table.</span></span> <span data-ttu-id="a2357-122">예제에서는 그림을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-122">The example provides an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2357-123">다음 예제에서는 키에 저장 되는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 테이블 외부 참조가 삭제 된 후에 테이블 유지 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-123">The following example illustrates that a key stored in the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table does not persist after references to it outside the table are destroyed.</span></span> <span data-ttu-id="a2357-124">이 예제에서는 두 개의 클래스를 정의: `ManagedClass`, 테이블의 키를 나타내는 및 `ClassData`, 키의 값을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-124">The example defines two classes: `ManagedClass`, which represents the key in the table, and `ClassData`, which represents the key's value.</span></span> <span data-ttu-id="a2357-125">이 예제에서는 각 형식의 세 개체를 인스턴스화합니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-125">The example instantiates three objects of each type.</span></span> <span data-ttu-id="a2357-126">도 인스턴스화합니다를 <xref:System.WeakReference> 초를 나타내는 개체 `ManagedClass`, 두 번째 되지 않으며 `ManagedClass` 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="a2357-126">It also instantiates a <xref:System.WeakReference> object that represents the second `ManagedClass`, and then destroys the second `ManagedClass` instance.</span></span> <span data-ttu-id="a2357-127">두 번째 검색 하려는 시도가 `ManagedClass` 에서 개체를 <xref:System.WeakReference.Target%2A> 속성 개체에 대 한 참조가 남아 있는지 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-127">The attempt to retrieve the second `ManagedClass` object from the <xref:System.WeakReference.Target%2A> property indicates that no references to the object remain.</span></span>  
  
 [!code-csharp[System.Runtime.CompilerServices.ConditionalWeakTable.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.class/cs/example1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.class/vb/example1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="a2357-128">인스턴스는 <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> 클래스는 스레드로부터 안전 합니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-128">Instances of the <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> class are thread safe.</span></span> <span data-ttu-id="a2357-129">모든 추가 잠금 작업을 수행 하는 호출자를 필요 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-129">They do not require callers to do any additional locking.</span></span></threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConditionalWeakTable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConditionalWeakTable();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a2357-130"><see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-130">Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2357-131">합니다 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.%23ctor%2A> 생성자는 빈 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 테이블은 키/값 쌍을 포함 하는,.</span><span class="sxs-lookup"><span data-stu-id="a2357-131">The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.%23ctor%2A> constructor instantiates an empty <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table; that is, the table contains no key/value pairs.</span></span> <span data-ttu-id="a2357-132">호출 하 여 키/값 쌍을 추가할 수 있습니다 합니다 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A>, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A>, 또는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a2357-132">You can add key/value pairs by calling the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A>, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A>, or <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> method.</span></span>  
  
 <span data-ttu-id="a2357-133">모든 키를 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 개체 고유 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-133">Every key in a <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> object must be unique.</span></span> <span data-ttu-id="a2357-134">키는 동일한 개체를 참조 하는 경우에 고유 하지 않습니다 (즉,에 대 한 인수로 전달 하는 경우는 <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> 메서드가 반환 되는 `true`).</span><span class="sxs-lookup"><span data-stu-id="a2357-134">Keys are not unique if they refer to the same object (that is, if passing them as arguments to the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method returns `true`).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(!TKey key, !TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (key As TKey, value As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(TKey key, TValue value);" />
      <MemberSignature Language="F#" Value="member this.Add : 'Key * 'Value -&gt; unit" Usage="conditionalWeakTable.Add (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="a2357-135">추가할 키입니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-135">The key to add.</span></span> <span data-ttu-id="a2357-136"><paramref name="key" />는 속성이 연결된 개체를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-136"><paramref name="key" /> represents the object to which the property is attached.</span></span></param>
        <param name="value"><span data-ttu-id="a2357-137">키의 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-137">The key's property value.</span></span></param>
        <summary><span data-ttu-id="a2357-138">테이블에 키를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-138">Adds a key to the table.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2357-139">모든 키를 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 개체 고유 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-139">Every key in a <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> object must be unique.</span></span> <span data-ttu-id="a2357-140">키는 동일한 개체를 참조 하는 경우에 고유 하지 않습니다 (즉,에 대 한 인수로 전달 하는 경우는 <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> 메서드가 반환 되는 `true`).</span><span class="sxs-lookup"><span data-stu-id="a2357-140">Keys are not unique if they refer to the same object (that is, if passing them as arguments to the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method returns `true`).</span></span>  
  
 <span data-ttu-id="a2357-141">키가 추가 작업 하는 동안 가비지 수집, 기존 키/값 쌍 제거 되 고 예외가 발생 하지 않고 새로운 키/값 쌍 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-141">If the key is garbage-collected during the addition operation, the existing key/value pair is removed and the new key/value pair is added without an exception being thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2357-142">다음 예제에서는 정의 `MainClass` 클래스 및 `MainInfo` 에 대 한 정보를 제공 하는 클래스는 `MainClass` 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="a2357-142">The following example defines a `MainClass` class and a `MainInfo` class, which provides information about the `MainClass` instance.</span></span> <span data-ttu-id="a2357-143">다음 호출 하 여는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A> 추가할 메서드를 `MainClass` 개체 및 해당 연결 된 `MainInfo` 개체를 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 테이블.</span><span class="sxs-lookup"><span data-stu-id="a2357-143">The example then calls the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A> method to add a `MainClass` object and its attached `MainInfo` object to a <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table.</span></span> <span data-ttu-id="a2357-144">예제에 대 한 호출도 합니다 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> 및 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> 테이블에 키/값 쌍을 추가 하는 메서드는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> 기존 키의 값을 검색 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="a2357-144">The example also illustrates calls to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> and <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> methods to add key/value pairs to the table, and to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> method to retrieve the value of an existing key.</span></span>  
  
 [!code-csharp[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/cs/getvalue1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/vb/getvalue1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a2357-145"><paramref name="key" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-145"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a2357-146"><paramref name="key" />가 이미 있는 경우</span><span class="sxs-lookup"><span data-stu-id="a2357-146"><paramref name="key" /> already exists.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="a2357-147">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-147">requires full trust for the immediate caller.</span></span> <span data-ttu-id="a2357-148">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-148">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)" />
      </Docs>
    </Member>
    <Member MemberName="AddOrUpdate">
      <MemberSignature Language="C#" Value="public void AddOrUpdate (TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddOrUpdate(!TKey key, !TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.AddOrUpdate(`0,`1)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddOrUpdate (key As TKey, value As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddOrUpdate(TKey key, TValue value);" />
      <MemberSignature Language="F#" Value="member this.AddOrUpdate : 'Key * 'Value -&gt; unit" Usage="conditionalWeakTable.AddOrUpdate (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="value" Type="TValue" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="conditionalWeakTable.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~ConditionalWeakTable ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!ConditionalWeakTable`2 ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="conditionalWeakTable.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a2357-149">가비지 컬렉션기에서 <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> 개체를 회수할 때 리소스가 해제되고 다른 정리 작업이 수행되도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-149">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2357-150">가비지 수집기를 호출 하 여 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Finalize%2A> 종료 준비가 된 경우.</span><span class="sxs-lookup"><span data-stu-id="a2357-150">The garbage collector calls <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Finalize%2A> when the current object is ready to be finalized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="GetOrCreateValue">
      <MemberSignature Language="C#" Value="public TValue GetOrCreateValue (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TValue GetOrCreateValue(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOrCreateValue (key As TKey) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TValue GetOrCreateValue(TKey key);" />
      <MemberSignature Language="F#" Value="member this.GetOrCreateValue : 'Key -&gt; 'Value" Usage="conditionalWeakTable.GetOrCreateValue key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="a2357-151">검색할 키입니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-151">The key to search for.</span></span> <span data-ttu-id="a2357-152"><paramref name="key" />는 속성이 연결된 개체를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-152"><paramref name="key" /> represents the object to which the property is attached.</span></span></param>
        <summary><span data-ttu-id="a2357-153">테이블에서 지정된 키를 각각 검색하여 해당 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-153">Atomically searches for a specified key in the table and returns the corresponding value.</span></span> <span data-ttu-id="a2357-154">테이블에 키가 없는 경우 테이블의 값을 나타내는 클래스의 기본 생성자를 메서드가 호출하여 지정된 키에 바인딩된 값을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-154">If the key does not exist in the table, the method invokes the default constructor of the class that represents the table's value to create a value that is bound to the specified key.</span></span></summary>
        <returns><span data-ttu-id="a2357-155">테이블에 이미 <paramref name="key" />가 있으면 <paramref name="key" />에 해당하는 값이고, 그렇지 않으면 <paramref name="TValue" /> 제네릭 형식 매개 변수에 의해 정의된 클래스의 기본 생성자가 만든 새 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-155">The value that corresponds to <paramref name="key" />, if <paramref name="key" /> already exists in the table; otherwise, a new value created by the default constructor of the class defined by the <paramref name="TValue" /> generic type parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2357-156">하는 경우 `key` 존재 하지 않는 테이블의 메서드를 추가 하 여 정의 된 클래스의 기본 생성자를 호출 하 여 인스턴스화된 개체와 함께 `TValue` 제네릭 형식 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-156">If `key` does not exist in the table, the method adds it, along with the object that is instantiated by calling the default constructor of the class defined by the `TValue` generic type parameter.</span></span> <span data-ttu-id="a2357-157">경우는 `TValue` 클래스에 기본 생성자는 <xref:System.MissingMethodException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-157">If the `TValue` class has no default constructor, a <xref:System.MissingMethodException> is thrown.</span></span>  
  
 <span data-ttu-id="a2357-158">이 방법은 권장 되는 기존 값을 검색 하거나 새 값을 추가 합니다 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 테이블의 값 클래스 기본 생성자를 정의 하는 경우 테이블입니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-158">This is the recommended method of retrieving an existing value or adding a new value to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table if the class of the table's value defines a default constructor.</span></span> <span data-ttu-id="a2357-159">기본 생성자를 정의 하지 않으면, 대신를 호출할 수 있습니다는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> 테이블의 값을 나타내는 개체를 인스턴스화하고 콜백 제공한 메서드를 사용 하는 메서드</span><span class="sxs-lookup"><span data-stu-id="a2357-159">If it does not define a default constructor, you can instead call the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> method, which relies on a callback-provided method to instantiate the object representing the table's value</span></span>  
  
 <span data-ttu-id="a2357-160">키/값 쌍의 키가 없는 테이블의 경우 호출을 추가 하지 않고 기존 키의 값을 검색 하 여 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a2357-160">To retrieve the value of an existing key without adding the key/value pair if the key is not found in the table, call the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2357-161">다음 예제에서는 정의 `MainClass` 클래스 및 `MainInfo` 에 대 한 정보를 제공 하는 클래스는 `MainClass` 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="a2357-161">The following example defines a `MainClass` class and a `MainInfo` class, which provides information about the `MainClass` instance.</span></span> <span data-ttu-id="a2357-162">예제에서는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> 추가할 메서드를 `MainClass` 개체 및 해당 연결 된 `MainInfo` 개체를 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 테이블.</span><span class="sxs-lookup"><span data-stu-id="a2357-162">The example calls the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> method to add a `MainClass` object and its attached `MainInfo` object to a <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table.</span></span> <span data-ttu-id="a2357-163">예제에 대 한 호출도 합니다 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A> 및 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> 테이블에 키/값 쌍을 추가 하는 메서드는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> 기존 키의 값을 검색 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="a2357-163">The example also illustrates calls to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A> and <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> methods to add key/value pairs to the table, and to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> method to retrieve the value of an existing key.</span></span>  
  
 [!code-csharp[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/cs/getvalue1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/vb/getvalue1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a2357-164"><paramref name="key" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-164"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="a2357-165"><see href="https://go.microsoft.com/fwlink/?LinkID=247912">Windows 스토어 앱용 .NET</see> 또는 <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">이식 가능한 클래스 라이브러리</see>에서 대신 기본 클래스 예외 <see cref="T:System.MissingMemberException" />을 catch합니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-165">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MissingMemberException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="a2357-166">테이블 값을 나타내는 클래스가 기본 생성자를 정의하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="a2357-166">The class that represents the table's value does not define a default constructor.</span></span></exception>
        <altmember cref="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)" />
        <altmember cref="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public TValue GetValue (TKey key, System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;.CreateValueCallback createValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TValue GetValue(!TKey key, class System.Runtime.CompilerServices.ConditionalWeakTable`2/CreateValueCallback&lt;!TKey, !TValue&gt; createValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback{`0,`1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TValue GetValue(TKey key, System::Runtime::CompilerServices::ConditionalWeakTable&lt;TKey, TValue&gt;::CreateValueCallback ^ createValueCallback);" />
      <MemberSignature Language="F#" Value="member this.GetValue : 'Key * System.Runtime.CompilerServices.ConditionalWeakTable&lt;'Key, 'Value (requires 'Key : null and 'Value : null)&gt;.CreateValueCallback -&gt; 'Value" Usage="conditionalWeakTable.GetValue (key, createValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="createValueCallback" Type="System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;+CreateValueCallback" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="a2357-167">검색할 키입니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-167">The key to search for.</span></span> <span data-ttu-id="a2357-168"><paramref name="key" />는 속성이 연결된 개체를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-168"><paramref name="key" /> represents the object to which the property is attached.</span></span></param>
        <param name="createValueCallback"><span data-ttu-id="a2357-169">지정된 <paramref name="key" />에 대한 값을 만들 수 있는 메서드에 대한 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-169">A delegate to a method that can create a value for the given <paramref name="key" />.</span></span> <span data-ttu-id="a2357-170"><c>TKey</c> 형식의 단일 매개 변수가 있으며 <c>TValue</c> 형식의 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-170">It has a single parameter of type <c>TKey</c>, and returns a value of type <c>TValue</c>.</span></span></param>
        <summary><span data-ttu-id="a2357-171">테이블에서 지정된 키를 각각 검색하여 해당 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-171">Atomically searches for a specified key in the table and returns the corresponding value.</span></span> <span data-ttu-id="a2357-172">테이블에 키가 없는 경우 메서드가 콜백 메서드를 호출하여 지정된 키에 바인딩된 값을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-172">If the key does not exist in the table, the method invokes a callback method to create a value that is bound to the specified key.</span></span></summary>
        <returns><span data-ttu-id="a2357-173">테이블에 이미 <paramref name="key" />가 있으면 <paramref name="key" />에 연결된 값이고, 그렇지 않으면 <paramref name="createValueCallback" /> 대리자가 반환하는 새 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-173">The value attached to <paramref name="key" />, if <paramref name="key" /> already exists in the table; otherwise, the new value returned by the <paramref name="createValueCallback" /> delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2357-174">경우 `key` 테이블에 없는 경우 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> 에서 정의한 메서드를 호출 합니다 `createValueCallback` 매개 변수 키를 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-174">If `key` does not exist in the table, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> invokes the method that is defined by the `createValueCallback` parameter and passes it the key.</span></span> <span data-ttu-id="a2357-175">새 값을 테이블의 키에 바인딩된 이며 결과적으로 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-175">A new value is bound to the key in the table and returned as a result.</span></span>  
  
 <span data-ttu-id="a2357-176">테이블의 값을 나타내는 클래스는 기본 생성자를 정의 하지 않습니다 하는 경우에이 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-176">Use this method only when the class that represents the table's value does not define a default constructor.</span></span> <span data-ttu-id="a2357-177">기본 생성자를 정의 해당 하는 경우 사용 된 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> 메서드 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-177">If it does define a default constructor, use the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> method instead.</span></span> <span data-ttu-id="a2357-178">키/값 쌍의 키가 없는 테이블의 경우 호출을 추가 하지 않고 기존 키의 값을 검색 하 여 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a2357-178">To retrieve the value of an existing key without adding the key/value pair if the key is not found in the table, call the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> method.</span></span>  
  
 <span data-ttu-id="a2357-179">여러 스레드가 동일한 키를 만들려고 `createValueCallback` 동일한 키를 사용 하 여 여러 번 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-179">If multiple threads try to create the same key, `createValueCallback` may be invoked multiple times with the same key.</span></span> <span data-ttu-id="a2357-180">이러한 호출 중 하나에만 성공 하 고 해당 반환된 값 테이블에 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-180">Only one of these calls will succeed, and its returned value will be added to the table.</span></span> <span data-ttu-id="a2357-181">스레드 값을 만드는 데 성공 하면 확정적이 지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-181">Which thread succeeds in creating the value is indeterminate.</span></span> <span data-ttu-id="a2357-182">이 규칙을 호출 하도록 허용 `createValueCallback` 내부 테이블 잠금이 교착 상태를 방지 하기 위해 외부입니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-182">This rule permits the table to invoke `createValueCallback` outside the internal table lock to prevent deadlocks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2357-183">다음 예제에서는 정의 `MainClass` 클래스 및 `MainInfo` 에 대 한 정보를 제공 하는 클래스는 `MainClass` 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="a2357-183">The following example defines a `MainClass` class and a `MainInfo` class, which provides information about the `MainClass` instance.</span></span> <span data-ttu-id="a2357-184">정적 정의 (`Shared` Visual basic에서) `CreateAttachedValue` 에 할당할 수 있는 메서드를 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.CreateValueCallback> 대리자를 전달할를 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a2357-184">It also defines a static (`Shared` in Visual Basic) `CreateAttachedValue` method that can be assigned to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.CreateValueCallback> delegate and passed to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> method.</span></span> <span data-ttu-id="a2357-185">예제에서는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> 추가할 메서드를 `MainClass` 개체 및 해당 연결 된 `MainInfo` 개체를 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 테이블.</span><span class="sxs-lookup"><span data-stu-id="a2357-185">The example calls the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> method to add a `MainClass` object and its attached `MainInfo` object to a <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table.</span></span> <span data-ttu-id="a2357-186">예제에 대 한 호출도 합니다 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A> 및 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> 테이블에 키/값 쌍을 추가 하는 메서드는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> 기존 키의 값을 검색 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="a2357-186">The example also illustrates calls to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A> and <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> methods to add key/value pairs to the table, and to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> method to retrieve the value of an existing key.</span></span>  
  
 [!code-csharp[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/cs/getvalue1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/vb/getvalue1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a2357-187"><paramref name="key" /> 또는 <paramref name="createValueCallback" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="a2357-187"><paramref name="key" /> or <paramref name="createValueCallback" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="a2357-188">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-188">requires full trust for the immediate caller.</span></span> <span data-ttu-id="a2357-189">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-189">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)" />
        <altmember cref="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)" />
        <altmember cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Remove(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(TKey key);" />
      <MemberSignature Language="F#" Value="member this.Remove : 'Key -&gt; bool" Usage="conditionalWeakTable.Remove key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="a2357-190">제거할 키입니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-190">The key to remove.</span></span></param>
        <summary><span data-ttu-id="a2357-191">테이블에서 키와 해당 값을 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-191">Removes a key and its value from the table.</span></span></summary>
        <returns><span data-ttu-id="a2357-192">키를 찾아서 제거하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-192"><see langword="true" /> if the key is found and removed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2357-193">키가이 작업 하는 동안 가비지 수집, 메서드가 예외를 발생 하지 않습니다 하 고 반환 값은 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-193">If the key is garbage-collected during this operation, the method does not raise an exception and the return value is undefined.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a2357-194"><paramref name="key" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-194"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="a2357-195">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-195">requires full trust for the immediate caller.</span></span> <span data-ttu-id="a2357-196">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-196">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt; IEnumerable&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt; System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.System#Collections#Generic#IEnumerable&lt;System#Collections#Generic#KeyValuePair&lt;TKey,TValue&gt;&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of KeyValuePair(Of TKey, TValue)) Implements IEnumerable(Of KeyValuePair(Of TKey, TValue)).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt; ^ System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TKey key, out TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetValue(!TKey key, [out] !TValue&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As TKey, ByRef value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetValue(TKey key, [Runtime::InteropServices::Out] TValue % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetValue : 'Key *  -&gt; bool" Usage="conditionalWeakTable.TryGetValue (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="a2357-197">연결된 속성이 있는 개체를 나타내는 키입니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-197">The key that represents an object with an attached property.</span></span></param>
        <param name="value"><span data-ttu-id="a2357-198">이 메서드가 반환될 때 연결된 속성 값을 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-198">When this method returns, contains the attached property value.</span></span> <span data-ttu-id="a2357-199"><paramref name="key" />를 찾을 수 없으면 <paramref name="value" />에 기본값이 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-199">If <paramref name="key" /> is not found, <paramref name="value" /> contains the default value.</span></span></param>
        <summary><span data-ttu-id="a2357-200">지정된 키의 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-200">Gets the value of the specified key.</span></span></summary>
        <returns><span data-ttu-id="a2357-201"><paramref name="key" />가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-201"><see langword="true" /> if <paramref name="key" /> is found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2357-202">키가 있는지 가비지 수집 된이 작업 중에 메서드를 반환할 수 있습니다 `false` 설정 및 `value` 기본값으로 (처럼 키가 존재 하지 않는) 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-202">If the key is garbage-collected during this operation, the method may return `false` and set `value` to the default value (as if the key were not present).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2357-203">다음 예제에서는 정의 `MainClass` 클래스 및 `MainInfo` 에 대 한 정보를 제공 하는 클래스는 `MainClass` 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="a2357-203">The following example defines a `MainClass` class and a `MainInfo` class, which provides information about the `MainClass` instance.</span></span> <span data-ttu-id="a2357-204">예제에서는 합니다 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A>, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A>, 및 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> 에 키/값 쌍을 추가 하는 메서드를 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 테이블.</span><span class="sxs-lookup"><span data-stu-id="a2357-204">The example calls the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A>, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A>, and <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> methods to add key/value pairs to a <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table.</span></span> <span data-ttu-id="a2357-205">호출 하 여 각각의 경우에는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> 키/값 쌍이 테이블에 추가 되었는지 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-205">In each case, the example calls the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> method to confirm that the key/value pair has been added to the table.</span></span>  
  
 [!code-csharp[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/cs/getvalue1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/vb/getvalue1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a2357-206"><paramref name="key" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-206"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="a2357-207">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-207">requires full trust for the immediate caller.</span></span> <span data-ttu-id="a2357-208">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a2357-208">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)" />
        <altmember cref="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)" />
      </Docs>
    </Member>
  </Members>
</Type>