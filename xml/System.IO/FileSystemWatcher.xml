<Type Name="FileSystemWatcher" FullName="System.IO.FileSystemWatcher">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a41171f2bdab9b8632e28360edd7b39f00bce7b7" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56358708" /></Metadata><TypeSignature Language="C#" Value="public class FileSystemWatcher : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileSystemWatcher extends System.ComponentModel.Component implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.IO.FileSystemWatcher" />
  <TypeSignature Language="VB.NET" Value="Public Class FileSystemWatcher&#xA;Inherits Component&#xA;Implements ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystemWatcher : System::ComponentModel::Component, System::ComponentModel::ISupportInitialize" />
  <TypeSignature Language="F#" Value="type FileSystemWatcher = class&#xA;    inherit Component&#xA;    interface ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.ComponentModel.DefaultEvent("Changed")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinmac-3.0">
      <AttributeName>System.IO.IODescription("")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.IO.IODescription("FileSystemWatcherDesc")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="5966f-101">파일 시스템 변경 알림을 수신하면서 디렉터리 또는 디렉터리의 파일이 변경되면 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-101">Listens to the file system change notifications and raises events when a directory, or file in a directory, changes.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5966f-102">사용 하 여 <xref:System.IO.FileSystemWatcher> 지정된 된 디렉터리에서 변경 내용을 관찰할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-102">Use <xref:System.IO.FileSystemWatcher> to watch for changes in a specified directory.</span></span> <span data-ttu-id="5966f-103">지정된 된 디렉터리의 파일과 하위 디렉터리에서 변경 내용을 볼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-103">You can watch for changes in files and subdirectories of the specified directory.</span></span> <span data-ttu-id="5966f-104">로컬 컴퓨터, 네트워크 드라이브 또는 원격 컴퓨터에서 파일을 조사 하는 구성 요소를 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-104">You can create a component to watch files on a local computer, a network drive, or a remote computer.</span></span>  
  
 <span data-ttu-id="5966f-105">모든 파일의 변경 내용을 감시를 설정 합니다 <xref:System.IO.FileSystemWatcher.Filter%2A> 속성을 빈 문자열 ("") 하거나 와일드 카드를 사용 하 여 ("\*.\*").</span><span class="sxs-lookup"><span data-stu-id="5966f-105">To watch for changes in all files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to an empty string ("") or use wildcards ("\*.\*").</span></span> <span data-ttu-id="5966f-106">특정 파일을 시청 하려면 설정의 <xref:System.IO.FileSystemWatcher.Filter%2A> 파일 이름에는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-106">To watch a specific file, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to the file name.</span></span> <span data-ttu-id="5966f-107">예를 들어 MyDoc.txt 파일의 변경 내용을 감시를 설정 합니다 <xref:System.IO.FileSystemWatcher.Filter%2A> "MyDoc.txt" 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-107">For example, to watch for changes in the file MyDoc.txt, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to "MyDoc.txt".</span></span> <span data-ttu-id="5966f-108">특정 유형의 파일에서 변경 내용을 볼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-108">You can also watch for changes in a certain type of file.</span></span> <span data-ttu-id="5966f-109">예를 들어, 텍스트 파일의 변경 내용을 감시를 설정 합니다 <xref:System.IO.FileSystemWatcher.Filter%2A> 속성을 "\*.txt"입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-109">For example, to watch for changes in text files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to "\*.txt".</span></span>  
  
 <span data-ttu-id="5966f-110">여러 유형의 변경 내용 디렉터리 또는 파일에서 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-110">There are several types of changes you can watch for in a directory or file.</span></span> <span data-ttu-id="5966f-111">예를 들어에서 변경 내용을 볼 수 있습니다 `Attributes`, `LastWrite` 날짜 및 시간 또는 `Size` 파일 또는 디렉터리입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-111">For example, you can watch for changes in `Attributes`, the `LastWrite` date and time, or the `Size` of files or directories.</span></span> <span data-ttu-id="5966f-112">설정 하 여 이렇게 합니다 <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> 속성 중 하나에 <xref:System.IO.NotifyFilters> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-112">This is done by setting the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> property to one of the <xref:System.IO.NotifyFilters> values.</span></span> <span data-ttu-id="5966f-113">자세한 내용은 변경 유형에 따라 볼 수 있습니다 <xref:System.IO.NotifyFilters>합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-113">For more information on the type of changes you can watch, see <xref:System.IO.NotifyFilters>.</span></span>  
  
 <span data-ttu-id="5966f-114">이름 바꾸기, 삭제, 또는 파일 또는 디렉터리 만들기에 대 한 볼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-114">You can watch for renaming, deletion, or creation of files or directories.</span></span> <span data-ttu-id="5966f-115">예를 들어, 텍스트 파일의 감시를 설정 합니다 <xref:System.IO.FileSystemWatcher.Filter%2A> 속성을 호출 하 고 "\*.txt"는 <xref:System.IO.FileSystemWatcher.WaitForChanged%2A> 메서드를 <xref:System.IO.WatcherChangeTypes.Renamed> 해당 매개 변수에 지정 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-115">For example, to watch for renaming of text files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to "\*.txt" and call the <xref:System.IO.FileSystemWatcher.WaitForChanged%2A> method with a <xref:System.IO.WatcherChangeTypes.Renamed> specified for its parameter.</span></span>  
  
 <span data-ttu-id="5966f-116">Windows 운영 체제 구성 요소에서 만든 버퍼의 파일 변경 내용을 알립니다는 <xref:System.IO.FileSystemWatcher>합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-116">The Windows operating system notifies your component of file changes in a buffer created by the <xref:System.IO.FileSystemWatcher>.</span></span> <span data-ttu-id="5966f-117">짧은 시간에 많은 변경 내용이 없으면 버퍼 오버플로될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-117">If there are many changes in a short time, the buffer can overflow.</span></span> <span data-ttu-id="5966f-118">이렇게 하면 디렉터리에서 변경 내용을 추적할 구성 요소 및 블 랭 킷 알림만 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-118">This causes the component to lose track of changes in the directory, and it will only provide blanket notification.</span></span> <span data-ttu-id="5966f-119">사용 하 여 버퍼의 크기 증가 <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> 속성이 비용이 많이 드는, 모든 파일을 놓치지 않기에 충분 한 변경 이벤트 많은 작은 버퍼를 아직 유지 되므로, 디스크를 스왑할 수 없는 비페이징 메모리에서 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-119">Increasing the size of the buffer with the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property is expensive, as it comes from non-paged memory that cannot be swapped out to disk, so keep the buffer as small yet large enough to not miss any file change events.</span></span> <span data-ttu-id="5966f-120">버퍼 오버플로 방지 하려면 사용 합니다 <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> 및 <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> 변경 알림을 필터링 할 수 있습니다 원치 않는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-120">To avoid a buffer overflow, use the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> and <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> properties so you can filter out unwanted change notifications.</span></span>  
  
 <span data-ttu-id="5966f-121">인스턴스의 초기 속성 값의 목록을 <xref:System.IO.FileSystemWatcher>, 참조는 <xref:System.IO.FileSystemWatcher.%23ctor%2A> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-121">For a list of initial property values for an instance of <xref:System.IO.FileSystemWatcher>, see the <xref:System.IO.FileSystemWatcher.%23ctor%2A> constructor.</span></span>  
  
 <span data-ttu-id="5966f-122">사용 하는 경우 다음을 유의 하십시오는 <xref:System.IO.FileSystemWatcher> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-122">Please note the following when using the <xref:System.IO.FileSystemWatcher> class.</span></span>  
  
-   <span data-ttu-id="5966f-123">숨겨진된 파일 무시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-123">Hidden files are not ignored.</span></span>  
  
-   <span data-ttu-id="5966f-124">일부 시스템에서는 <xref:System.IO.FileSystemWatcher> 짧은 8.3 파일 이름 형식으로 사용 하 여 파일 변경 내용을 보고 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-124">In some systems, <xref:System.IO.FileSystemWatcher> reports changes to files using the short 8.3 file name format.</span></span> <span data-ttu-id="5966f-125">"LongFileName.LongExtension"에 대 한 변경으로 보고 될 수 있습니다 예를 들어, "LongFil ~입니다. "경도</span><span class="sxs-lookup"><span data-stu-id="5966f-125">For example, a change to  "LongFileName.LongExtension" could be reported as "LongFil~.Lon".</span></span>  
  
-   <span data-ttu-id="5966f-126">이 클래스는 모든 멤버에 적용 되는 클래스 수준에서 상속 요청과 링크 요청을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-126">This class contains a link demand and an inheritance demand at the class level that applies to all members.</span></span> <span data-ttu-id="5966f-127"><xref:System.Security.SecurityException> 직접 실행 호출자 또는 파생된 클래스에 완전 신뢰 권한이 없는 경우 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-127">A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have full-trust permission.</span></span> <span data-ttu-id="5966f-128">보안 요청에 대 한 자세한 내용은 참조 하세요 [링크 요구가](~/docs/framework/misc/link-demands.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-128">For details about security demands, see [Link Demands](~/docs/framework/misc/link-demands.md).</span></span>  
  
-   <span data-ttu-id="5966f-129">대해 설정할 수 있는 최대 크기는 <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> 네트워크를 통해 디렉터리를 모니터링 하는 것에 대 한 속성은 64KB입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-129">The maximum size you can set for the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property for monitoring a directory over the network is 64 KB.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5966f-130">실행 <xref:System.IO.FileSystemWatcher> Windows 98에서 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-130">Running <xref:System.IO.FileSystemWatcher> on Windows 98 is not supported.</span></span>  
  
## <a name="copying-and-moving-folders"></a><span data-ttu-id="5966f-131">폴더 복사 및 이동</span><span class="sxs-lookup"><span data-stu-id="5966f-131">Copying and moving folders</span></span>  
 <span data-ttu-id="5966f-132">운영 체제 및 <xref:System.IO.FileSystemWatcher> 개체 잘라내기 및 붙여넣기 동작 또는 폴더와 해당 내용에 대 한 이름 바꾸기 작업으로 이동 동작을 해석 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-132">The operating system and <xref:System.IO.FileSystemWatcher> object interpret a cut-and-paste action or a move action as a rename action for a folder and its contents.</span></span> <span data-ttu-id="5966f-133">잘라내기를 수행 하 고, 조사할 폴더에 파일을 사용 하 여 폴더를 붙여 경우는 <xref:System.IO.FileSystemWatcher> 만 이름이 기본적으로 새로 폴더만 했지만 콘텐츠가 아닌 개체 보고 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-133">If you cut and paste a folder with files into a folder being watched, the <xref:System.IO.FileSystemWatcher> object reports only the folder as new, but not its contents because they are essentially only renamed.</span></span>  
  
 <span data-ttu-id="5966f-134">폴더의 내용을 이동 되었거나 감시 폴더에 복사는 알릴 제공할 <xref:System.IO.FileSystemWatcher.OnChanged%2A> 및 <xref:System.IO.FileSystemWatcher.OnRenamed%2A> 표에 제안 된 대로 이벤트 처리기 메서드.</span><span class="sxs-lookup"><span data-stu-id="5966f-134">To be notified that the contents of folders have been moved or copied into a watched folder, provide <xref:System.IO.FileSystemWatcher.OnChanged%2A> and <xref:System.IO.FileSystemWatcher.OnRenamed%2A> event handler methods as suggested in the following table.</span></span>  
  
|<span data-ttu-id="5966f-135">이벤트 처리기</span><span class="sxs-lookup"><span data-stu-id="5966f-135">Event Handler</span></span>|<span data-ttu-id="5966f-136">이벤트 처리</span><span class="sxs-lookup"><span data-stu-id="5966f-136">Events Handled</span></span>|<span data-ttu-id="5966f-137">수행</span><span class="sxs-lookup"><span data-stu-id="5966f-137">Performs</span></span>|  
|-------------------|--------------------|--------------|  
|<xref:System.IO.FileSystemWatcher.OnChanged%2A>|<span data-ttu-id="5966f-138"><xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted></span><span class="sxs-lookup"><span data-stu-id="5966f-138"><xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted></span></span>|<span data-ttu-id="5966f-139">파일 특성, 파일 생성된 및 삭제 된 파일의 변경을 보고 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-139">Report changes in file attributes, created files, and deleted files.</span></span>|  
|<xref:System.IO.FileSystemWatcher.OnRenamed%2A>|<xref:System.IO.FileSystemWatcher.Renamed>|<span data-ttu-id="5966f-140">이전 및 새의 경로 이름이 바뀐된 파일 및 폴더를 재귀적으로 필요한 경우 확장을 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-140">List the old and new paths of renamed files and folders, expanding recursively if needed.</span></span>|  
  
## <a name="events-and-buffer-sizes"></a><span data-ttu-id="5966f-141">이벤트 및 버퍼 크기</span><span class="sxs-lookup"><span data-stu-id="5966f-141">Events and Buffer Sizes</span></span>  
 <span data-ttu-id="5966f-142">여러 요인에 파일 시스템 변경 이벤트가 발생 하는 다음에 설명 된 대로 참고:</span><span class="sxs-lookup"><span data-stu-id="5966f-142">Note that several factors can affect which file system change events are raised, as described by the following:</span></span>  
  
-   <span data-ttu-id="5966f-143">일반적인 파일 시스템 작업에는 하나 이상의 이벤트 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-143">Common file system operations might raise more than one event.</span></span> <span data-ttu-id="5966f-144">파일을 한 디렉터리에 다른, 여러에서 이동할 경우에 예를 들어 <xref:System.IO.FileSystemWatcher.OnChanged%2A> 일부 <xref:System.IO.FileSystemWatcher.OnCreated%2A> 고 <xref:System.IO.FileSystemWatcher.OnDeleted%2A> 이벤트가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-144">For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised.</span></span> <span data-ttu-id="5966f-145">여러 이벤트를 발생 하므로 파일은 여러 개의 간단한 작업으로 구성 된 복잡 한 작업으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-145">Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</span></span> <span data-ttu-id="5966f-146">마찬가지로, 일부 애플리케이션 (예: 바이러스 백신 소프트웨어)에서 검색 되는 추가 파일 시스템 이벤트 않을 <xref:System.IO.FileSystemWatcher>합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-146">Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref:System.IO.FileSystemWatcher>.</span></span>  
  
-   <span data-ttu-id="5966f-147"><xref:System.IO.FileSystemWatcher> 으로 전환 되거나 제거 되지 디스크를 볼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-147">The <xref:System.IO.FileSystemWatcher> can watch disks as long as they are not switched or removed.</span></span> <span data-ttu-id="5966f-148"><xref:System.IO.FileSystemWatcher> 타임 스탬프 및 속성이 변경 될 수 없으므로 Cd 및 Dvd에 대 한 이벤트를 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-148">The <xref:System.IO.FileSystemWatcher> does not raise events for CDs and DVDs, because time stamps and properties cannot change.</span></span> <span data-ttu-id="5966f-149">원격 컴퓨터에는 제대로 작동 하려면 해당 구성 요소 설치에 필요한 플랫폼 중 하나가 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-149">Remote computers must have one of the required platforms installed for the component to function properly.</span></span>  
  
-   <span data-ttu-id="5966f-150">여러 개인 경우 <xref:System.IO.FileSystemWatcher> Windows XP 서비스 팩 1 이전의 동일한 UNC 경로 감시 하는 개체 또는 Windows 2000 SP2 또는 이전 버전의 경우 되었다면 개체 중 이벤트를 발생 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-150">If multiple <xref:System.IO.FileSystemWatcher> objects are watching the same UNC path in Windows XP prior to Service Pack 1, or Windows 2000 SP2 or earlier, then only one of the objects will raise an event.</span></span> <span data-ttu-id="5966f-151">컴퓨터에서 Windows XP SP1을 실행, Windows 2000 SP3 이상 또는 Windows Server 2003, 모든 <xref:System.IO.FileSystemWatcher> 개체 적절 한 이벤트를 발생 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-151">On machines running Windows XP SP1 and newer, Windows 2000 SP3 or newer or Windows Server 2003, all <xref:System.IO.FileSystemWatcher> objects will raise the appropriate events.</span></span>  
  
 <span data-ttu-id="5966f-152">한 <xref:System.IO.FileSystemWatcher> 버퍼 크기를 초과 하는 경우 이벤트를 놓칠 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-152">Note that a <xref:System.IO.FileSystemWatcher> may miss an event when the buffer size is exceeded.</span></span> <span data-ttu-id="5966f-153">누락 된 이벤트를 방지 하려면 다음이 지침을 따르세요.</span><span class="sxs-lookup"><span data-stu-id="5966f-153">To avoid missing events, follow these guidelines:</span></span>  
  
-   <span data-ttu-id="5966f-154">설정 하 여 버퍼 크기를 늘려야 합니다 <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-154">Increase the buffer size by setting the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property.</span></span>  
  
-   <span data-ttu-id="5966f-155">긴 파일 이름이 버퍼가 가득 찰에 기여 하기 때문에 긴 파일 이름으로 파일을 조사 하지 마세요.</span><span class="sxs-lookup"><span data-stu-id="5966f-155">Avoid watching files with long file names, because a long file name contributes to filling up the buffer.</span></span> <span data-ttu-id="5966f-156">더 짧은 이름을 사용 하 여 이러한 파일 이름을 바꾸는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-156">Consider renaming these files using shorter names.</span></span>  
  
-   <span data-ttu-id="5966f-157">이벤트 처리 코드를 가능한 한 짧게 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-157">Keep your event handling code as short as possible.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5966f-158">다음 예제에서는 <xref:System.IO.FileSystemWatcher> 런타임에 지정 된 디렉터리를 시청 하려면.</span><span class="sxs-lookup"><span data-stu-id="5966f-158">The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time.</span></span> <span data-ttu-id="5966f-159">구성 요소에서 변경 내용을 관찰할로 설정 되어 `LastWrite` 및 `LastAccess` 시간, 만들기, 삭제, 또는 디렉터리에 텍스트 파일의 이름을 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-159">The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory.</span></span> <span data-ttu-id="5966f-160">파일 변경, 생성 또는 삭제 하는 경우 콘솔에는 파일의 경로를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-160">If a file is changed, created, or deleted, the path to the file prints to the console.</span></span> <span data-ttu-id="5966f-161">파일의 이름을 바꿀 때 이전 및 새 경로 콘솔에 인쇄 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-161">When a file is renamed, the old and new paths print to the console.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="5966f-162">파생 된 <see cref="T:System.Diagnostics.ProcessStartInfo" /> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-162">for deriving from the <see cref="T:System.Diagnostics.ProcessStartInfo" /> class.</span></span> <span data-ttu-id="5966f-163">요청 값: <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />; 명명 된 권한 집합: <see langword="FullTrust" />합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-163">Demand value: <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />; Named Permission Sets: <see langword="FullTrust" />.</span></span></permission>
    <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
    <altmember cref="T:System.IO.NotifyFilters" />
    <altmember cref="T:System.IO.FileSystemEventArgs" />
    <altmember cref="T:System.IO.FileSystemEventHandler" />
    <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
    <altmember cref="P:System.IO.FileSystemWatcher.IncludeSubdirectories" />
    <altmember cref="T:System.IO.InternalBufferOverflowException" />
    <altmember cref="T:System.IO.RenamedEventArgs" />
    <altmember cref="T:System.IO.RenamedEventHandler" />
    <altmember cref="T:System.IO.WaitForChangedResult" />
    <altmember cref="T:System.IO.WatcherChangeTypes" />
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Using-a-FileSystemWatcher-4bc97af4"><span data-ttu-id="5966f-164">FileSystemWatcher 구성 요소를 사용 하 여 Windows Form에서</span><span class="sxs-lookup"><span data-stu-id="5966f-164">Using a FileSystemWatcher Component in a Windows Form</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5966f-165"><see cref="T:System.IO.FileSystemWatcher" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-165">Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileSystemWatcher ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileSystemWatcher();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5966f-166"><see cref="T:System.IO.FileSystemWatcher" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-166">Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5966f-167">Windows NT 또는 Windows 2000 없는 원격 컴퓨터를 볼 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-167">You cannot watch a remote computer that does not have Windows NT or Windows 2000.</span></span> <span data-ttu-id="5966f-168">Windows NT 4.0 컴퓨터에서 원격 Windows NT 4.0 컴퓨터를 볼 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-168">You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer.</span></span>  
  
 <span data-ttu-id="5966f-169">다음 표에서 인스턴스에 대 한 초기 속성 값을 보여 줍니다. <xref:System.IO.FileSystemWatcher>합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-169">The following table shows initial property values for an instance of <xref:System.IO.FileSystemWatcher>.</span></span>  
  
|<span data-ttu-id="5966f-170">속성</span><span class="sxs-lookup"><span data-stu-id="5966f-170">Property</span></span>|<span data-ttu-id="5966f-171">초기 값</span><span class="sxs-lookup"><span data-stu-id="5966f-171">Initial Value</span></span>|  
|--------------|-------------------|  
|<xref:System.IO.FileSystemWatcher.NotifyFilter%2A>|<span data-ttu-id="5966f-172">비트 OR 조합 `LastWrite`, `FileName`, 및 `DirectoryName`</span><span class="sxs-lookup"><span data-stu-id="5966f-172">bitwise OR combination of `LastWrite`, `FileName`, and `DirectoryName`</span></span>|  
|<xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>|`false`|  
|<xref:System.IO.FileSystemWatcher.Filter%2A>|<span data-ttu-id="5966f-173">"\*. \*"(모든 파일을 조사 합니다.)</span><span class="sxs-lookup"><span data-stu-id="5966f-173">"\*.\*" (Watch all files.)</span></span>|  
|<xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>|`false`|  
|<xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>|<span data-ttu-id="5966f-174">8192</span><span class="sxs-lookup"><span data-stu-id="5966f-174">8192</span></span>|  
|<xref:System.IO.FileSystemWatcher.Path%2A>|<span data-ttu-id="5966f-175">빈 문자열 ("")</span><span class="sxs-lookup"><span data-stu-id="5966f-175">empty string ("")</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="5966f-176">구성 요소에 지정 된 디렉터리를 조사 합니다는 <xref:System.IO.FileSystemWatcher.Path%2A> 을 설정 및 <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> 는 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-176">The component will not watch the specified directory until the <xref:System.IO.FileSystemWatcher.Path%2A> is set, and <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> is `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5966f-177">다음 예제에서는 <xref:System.IO.FileSystemWatcher> 런타임에 지정 된 디렉터리를 조사 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-177">The following example creates a <xref:System.IO.FileSystemWatcher> object to watch the directory specified at run time.</span></span> <span data-ttu-id="5966f-178">합니다 <xref:System.IO.FileSystemWatcher> 개체의 변경 내용을 감시 `LastWrite` 및 `LastAccess` 번 및 생성에 대 한 삭제 또는 이름 텍스트 파일을 디렉터리에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-178">The <xref:System.IO.FileSystemWatcher> object watches for changes in `LastWrite` and `LastAccess` times, and for the creation, deletion, or renaming of text files in the directory.</span></span> <span data-ttu-id="5966f-179">파일 변경, 생성 또는 삭제 하는 경우 콘솔에는 파일의 경로를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-179">If a file is changed, created, or deleted, the path to the file displays to the console.</span></span> <span data-ttu-id="5966f-180">파일의 이름을 바꿀 때 콘솔에 이전 및 새 경로 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-180">When a file is renamed, the old and new paths display to the console.</span></span>  
  
 <span data-ttu-id="5966f-181">이 예제에서는 합니다 <xref:System.Diagnostics> 고 <xref:System.IO> 네임 스페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-181">This example uses the <xref:System.Diagnostics> and <xref:System.IO> namespaces.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5966f-182">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-182">for full trust for the immediate caller.</span></span> <span data-ttu-id="5966f-183">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-183">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="T:System.IO.NotifyFilters" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
        <altmember cref="T:System.IO.InternalBufferOverflowException" />
        <altmember cref="P:System.IO.FileSystemWatcher.Path" />
        <altmember cref="T:System.IO.RenamedEventArgs" />
        <altmember cref="T:System.IO.RenamedEventHandler" />
        <altmember cref="T:System.IO.WaitForChangedResult" />
        <altmember cref="T:System.IO.WatcherChangeTypes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileSystemWatcher (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileSystemWatcher(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new System.IO.FileSystemWatcher : string -&gt; System.IO.FileSystemWatcher" Usage="new System.IO.FileSystemWatcher path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="5966f-184">모니터링할 디렉터리입니다. 표준 또는 UNC(Universal Naming Convention) 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-184">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</span></span></param>
        <summary><span data-ttu-id="5966f-185">모니터링할 디렉터리가 지정된 경우 <see cref="T:System.IO.FileSystemWatcher" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-185">Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher" /> class, given the specified directory to monitor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="5966f-186">구성 요소에 지정 된 디렉터리를 조사 합니다는 <xref:System.IO.FileSystemWatcher.Path%2A> 을 설정 및 <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> 는 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-186">The component will not watch the specified directory until the <xref:System.IO.FileSystemWatcher.Path%2A> is set, and <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> is `true`.</span></span>  
  
 <span data-ttu-id="5966f-187">구성 요소 개인용 컴퓨터, 네트워크 드라이브 또는 원격 컴퓨터에서 파일을 볼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-187">The component can watch files on your personal computer, a network drive, or a remote computer.</span></span>  
  
 <span data-ttu-id="5966f-188">Windows NT 또는 Windows 2000 없는 원격 컴퓨터를 볼 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-188">You cannot watch a remote computer that does not have Windows NT or Windows 2000.</span></span> <span data-ttu-id="5966f-189">Windows NT 4.0 컴퓨터에서 원격 Windows NT 4.0 컴퓨터를 볼 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-189">You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer.</span></span> <span data-ttu-id="5966f-190"><xref:System.IO.FileSystemWatcher.Filter%2A> 속성이 기본적으로 모든 파일을 조사 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-190">The <xref:System.IO.FileSystemWatcher.Filter%2A> property is set by default to watch all files.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5966f-191"><paramref name="path" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="5966f-191">The <paramref name="path" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5966f-192"><paramref name="path" /> 매개 변수가 빈 문자열("")입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-192">The <paramref name="path" /> parameter is an empty string ("").</span></span>  
  
<span data-ttu-id="5966f-193">또는</span><span class="sxs-lookup"><span data-stu-id="5966f-193">-or-</span></span> 
<span data-ttu-id="5966f-194"><paramref name="path" /> 매개 변수로 지정된 경로가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="5966f-194">The path specified through the <paramref name="path" /> parameter does not exist.</span></span></exception>
        <exception cref="T:System.IO.PathTooLongException"><span data-ttu-id="5966f-195"><paramref name="path" />가 너무 깁니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-195"><paramref name="path" /> is too long.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5966f-196">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-196">for full trust for the immediate caller.</span></span> <span data-ttu-id="5966f-197">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-197">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="T:System.IO.NotifyFilters" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
        <altmember cref="T:System.IO.InternalBufferOverflowException" />
        <altmember cref="P:System.IO.FileSystemWatcher.Path" />
        <altmember cref="T:System.IO.RenamedEventArgs" />
        <altmember cref="T:System.IO.RenamedEventHandler" />
        <altmember cref="T:System.IO.WaitForChangedResult" />
        <altmember cref="T:System.IO.WatcherChangeTypes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileSystemWatcher (string path, string filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, string filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, filter As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileSystemWatcher(System::String ^ path, System::String ^ filter);" />
      <MemberSignature Language="F#" Value="new System.IO.FileSystemWatcher : string * string -&gt; System.IO.FileSystemWatcher" Usage="new System.IO.FileSystemWatcher (path, filter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="5966f-198">모니터링할 디렉터리입니다. 표준 또는 UNC(Universal Naming Convention) 표기법으로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-198">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</span></span></param>
        <param name="filter"><span data-ttu-id="5966f-199">조사할 파일 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-199">The type of files to watch.</span></span> <span data-ttu-id="5966f-200">예를 들어 "\*.txt"를 지정하면 모든 텍스트 파일에 대한 변경 내용을 조사합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-200">For example, "\*.txt" watches for changes to all text files.</span></span></param>
        <summary><span data-ttu-id="5966f-201">모니터링할 디렉터리 및 파일 형식이 지정된 경우 <see cref="T:System.IO.FileSystemWatcher" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-201">Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher" /> class, given the specified directory and type of files to monitor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="5966f-202">구성 요소에 지정 된 디렉터리를 조사 합니다는 <xref:System.IO.FileSystemWatcher.Path%2A> 을 설정 및 <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> 는 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-202">The component will not watch the specified directory until the <xref:System.IO.FileSystemWatcher.Path%2A> is set, and <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> is `true`.</span></span>  
  
 <span data-ttu-id="5966f-203">구성 요소 개인용 컴퓨터, 네트워크 드라이브 또는 원격 컴퓨터에서 파일을 볼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-203">The component can watch files on your personal computer, a network drive, or a remote computer.</span></span>  
  
 <span data-ttu-id="5966f-204">Windows NT 또는 Windows 2000 없는 원격 컴퓨터를 볼 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-204">You cannot watch a remote computer that does not have Windows NT or Windows 2000.</span></span> <span data-ttu-id="5966f-205">Windows NT 4.0 컴퓨터에서 원격 Windows NT 4.0 컴퓨터를 볼 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-205">You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5966f-206"><paramref name="path" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="5966f-206">The <paramref name="path" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="5966f-207">또는</span><span class="sxs-lookup"><span data-stu-id="5966f-207">-or-</span></span> 
<span data-ttu-id="5966f-208"><paramref name="filter" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="5966f-208">The <paramref name="filter" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5966f-209"><paramref name="path" /> 매개 변수가 빈 문자열("")입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-209">The <paramref name="path" /> parameter is an empty string ("").</span></span>  
  
<span data-ttu-id="5966f-210">또는</span><span class="sxs-lookup"><span data-stu-id="5966f-210">-or-</span></span> 
<span data-ttu-id="5966f-211"><paramref name="path" /> 매개 변수로 지정된 경로가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="5966f-211">The path specified through the <paramref name="path" /> parameter does not exist.</span></span></exception>
        <exception cref="T:System.IO.PathTooLongException"><span data-ttu-id="5966f-212"><paramref name="path" />가 너무 깁니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-212"><paramref name="path" /> is too long.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="5966f-213">직접 실행 호출자에 대 한 완전 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-213">for full trust for the immediate caller.</span></span> <span data-ttu-id="5966f-214">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-214">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="T:System.IO.NotifyFilters" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
        <altmember cref="T:System.IO.InternalBufferOverflowException" />
        <altmember cref="P:System.IO.FileSystemWatcher.Path" />
        <altmember cref="T:System.IO.RenamedEventArgs" />
        <altmember cref="T:System.IO.RenamedEventHandler" />
        <altmember cref="T:System.IO.WaitForChangedResult" />
        <altmember cref="T:System.IO.WatcherChangeTypes" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="fileSystemWatcher.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5966f-215">양식에 사용되거나 다른 구성 요소에서 사용하는 <see cref="T:System.IO.FileSystemWatcher" />의 초기화를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-215">Begins the initialization of a <see cref="T:System.IO.FileSystemWatcher" /> used on a form or used by another component.</span></span> <span data-ttu-id="5966f-216">초기화는 런타임에 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-216">The initialization occurs at run time.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5966f-217">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] 디자인 환경에서이 메서드를 사용 하 여 구성 요소의 초기화를 시작 폼에 사용 되거나 다른 구성 요소에서 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-217">The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to start the initialization of a component used on a form or used by another component.</span></span> <span data-ttu-id="5966f-218"><xref:System.IO.FileSystemWatcher.EndInit%2A> 메서드 초기화를 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-218">The <xref:System.IO.FileSystemWatcher.EndInit%2A> method ends the initialization.</span></span> <span data-ttu-id="5966f-219">사용 하는 <xref:System.IO.FileSystemWatcher.BeginInit%2A> 및 <xref:System.IO.FileSystemWatcher.EndInit%2A> 메서드 컨트롤을 완전히 초기화 되기 전에 사용 되지 않도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-219">Using the <xref:System.IO.FileSystemWatcher.BeginInit%2A> and <xref:System.IO.FileSystemWatcher.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.FileSystemWatcher.EndInit" />
      </Docs>
    </Member>
    <Member MemberName="Changed">
      <MemberSignature Language="C#" Value="public event System.IO.FileSystemEventHandler Changed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.IO.FileSystemEventHandler Changed" />
      <MemberSignature Language="DocId" Value="E:System.IO.FileSystemWatcher.Changed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Changed As FileSystemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::IO::FileSystemEventHandler ^ Changed;" />
      <MemberSignature Language="F#" Value="member this.Changed : System.IO.FileSystemEventHandler " Usage="member this.Changed : System.IO.FileSystemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.IO.IODescription("Occurs when a file/directory change matches the filter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.IO.IODescription("FSW_Changed")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.FileSystemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5966f-220">지정된 <see cref="P:System.IO.FileSystemWatcher.Path" />에 있는 파일이나 디렉터리가 변경될 경우에 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-220">Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is changed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5966f-221"><xref:System.IO.FileSystemWatcher.Changed> 이벤트가 크기 변경 되 면 시스템 특성을 마지막으로 쓴 시간, 마지막 액세스 시간 또는 파일 또는 디렉터리의 보안 권한을 모니터링 되 고 디렉터리에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-221">The <xref:System.IO.FileSystemWatcher.Changed> event is raised when changes are made to the size, system attributes, last write time, last access time, or security permissions of a file or directory in the directory being monitored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5966f-222">일반적인 파일 시스템 작업에는 하나 이상의 이벤트 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-222">Common file system operations might raise more than one event.</span></span> <span data-ttu-id="5966f-223">파일을 한 디렉터리에 다른, 여러에서 이동할 경우에 예를 들어 <xref:System.IO.FileSystemWatcher.OnChanged%2A> 일부 <xref:System.IO.FileSystemWatcher.OnCreated%2A> 고 <xref:System.IO.FileSystemWatcher.OnDeleted%2A> 이벤트가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-223">For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised.</span></span> <span data-ttu-id="5966f-224">여러 이벤트를 발생 하므로 파일은 여러 개의 간단한 작업으로 구성 된 복잡 한 작업으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-224">Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</span></span> <span data-ttu-id="5966f-225">마찬가지로, 일부 애플리케이션 (예: 바이러스 백신 소프트웨어)에서 검색 되는 추가 파일 시스템 이벤트 않을 <xref:System.IO.FileSystemWatcher>합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-225">Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref:System.IO.FileSystemWatcher>.</span></span>  
  
 <span data-ttu-id="5966f-226">사용 하 여 <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> 이 이벤트가 처리 될 때 발생 하는 알림의 수를 제한할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-226">Use <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> to restrict the number of notifications raised when this event is handled.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5966f-227"><xref:System.IO.FileSystemWatcher.Changed> 이벤트는 예기치 않게 파일의 이름이 바뀌었지만 디렉터리의 이름을 바꿀 때 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-227">The <xref:System.IO.FileSystemWatcher.Changed> event is raised unexpectedly when a file is renamed, but is not raised when a directory is renamed.</span></span> <span data-ttu-id="5966f-228">이름 바꾸기에 대 한 보기를 사용 하 여는 <xref:System.IO.FileSystemWatcher.Renamed> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-228">To watch for renaming, use the <xref:System.IO.FileSystemWatcher.Renamed> event.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5966f-229">순서를 <xref:System.IO.FileSystemWatcher.Changed> 관련 이벤트가 발생 <xref:System.IO.FileSystemWatcher> 이벤트 때 변경 될 수 있습니다 합니다 <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> 속성이 아닙니다 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-229">The order in which the <xref:System.IO.FileSystemWatcher.Changed> event is raised in relation to the other <xref:System.IO.FileSystemWatcher> events may change when the <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> property is not `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5966f-230">다음 예제에서는 <xref:System.IO.FileSystemWatcher.Changed> 조사 되는 파일이 변경 될 때마다 파일 경로 콘솔에 표시할 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-230">The following example uses the <xref:System.IO.FileSystemWatcher.Changed> event to display the file path to the console whenever the watched file is changed.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" />
        <altmember cref="P:System.IO.FileSystemWatcher.SynchronizingObject" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="Created">
      <MemberSignature Language="C#" Value="public event System.IO.FileSystemEventHandler Created;" />
      <MemberSignature Language="ILAsm" Value=".event class System.IO.FileSystemEventHandler Created" />
      <MemberSignature Language="DocId" Value="E:System.IO.FileSystemWatcher.Created" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Created As FileSystemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::IO::FileSystemEventHandler ^ Created;" />
      <MemberSignature Language="F#" Value="member this.Created : System.IO.FileSystemEventHandler " Usage="member this.Created : System.IO.FileSystemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.IO.IODescription("Occurs when a file/directory creation matches the filter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.IO.IODescription("FSW_Created")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.FileSystemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5966f-231">지정된 <see cref="P:System.IO.FileSystemWatcher.Path" />에서 파일이나 디렉터리가 만들어질 경우에 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-231">Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is created.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5966f-232">이벤트에 직접 복사 하거나 이동할 파일 또는 디렉터리와 같은 일반적으로 발생 하는 일부 맞지 않는 하지만 이러한 상황 이벤트가 발생할 경우 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-232">Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised.</span></span> <span data-ttu-id="5966f-233">발생 파일 또는 디렉터리를 복사할 때를 <xref:System.IO.FileSystemWatcher.Created> 디렉터리는 파일 복사 된 해당 디렉터리를 감시 하는 경우에 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-233">When you copy a file or directory, the system raises a <xref:System.IO.FileSystemWatcher.Created> event in the directory to which the file was copied, if that directory is being watched.</span></span> <span data-ttu-id="5966f-234">복사한 디렉터리의 다른 인스턴스에 의해 조사 하는 경우 <xref:System.IO.FileSystemWatcher>, 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-234">If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised.</span></span> <span data-ttu-id="5966f-235">두 인스턴스를 만드는 예를 들어 <xref:System.IO.FileSystemWatcher>합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-235">For example, you create two instances of <xref:System.IO.FileSystemWatcher>.</span></span> <span data-ttu-id="5966f-236">"C:\My 문서"를 시청 하려면 FileSystemWatcher1 집합과 FileSystemWatcher2 보기 "C:\Your 문서"로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-236">FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your Documents".</span></span> <span data-ttu-id="5966f-237">문서로"Your", "내 문서"에서 파일을 복사 하는 경우는 <xref:System.IO.FileSystemWatcher.Created> FileSystemWatcher2에서 이벤트가 발생 하지만 FileSystemWatcher1에 대 한 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-237">If you copy a file from "My Documents" into "Your Documents", a <xref:System.IO.FileSystemWatcher.Created> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1.</span></span> <span data-ttu-id="5966f-238">복사와 달리 파일 또는 디렉터리를 이동 두 이벤트가 발생 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-238">Unlike copying, moving a file or directory would raise two events.</span></span> <span data-ttu-id="5966f-239">"Your 문서", "내 문서"에서 파일을 이동 하는 경우 이전 예제에서를 <xref:System.IO.FileSystemWatcher.Created> FileSystemWatcher2 이벤트는 발생 및 <xref:System.IO.FileSystemWatcher.Deleted> FileSystemWatcher1 하 여 이벤트를 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-239">From the previous example, if you moved a file from "My Documents" to "Your Documents", a <xref:System.IO.FileSystemWatcher.Created> event would be raised by FileSystemWatcher2 and a <xref:System.IO.FileSystemWatcher.Deleted> event would be raised by FileSystemWatcher1.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5966f-240">일반적인 파일 시스템 작업에는 하나 이상의 이벤트 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-240">Common file system operations might raise more than one event.</span></span> <span data-ttu-id="5966f-241">파일을 한 디렉터리에 다른, 여러에서 이동할 경우에 예를 들어 <xref:System.IO.FileSystemWatcher.OnChanged%2A> 일부 <xref:System.IO.FileSystemWatcher.OnCreated%2A> 고 <xref:System.IO.FileSystemWatcher.OnDeleted%2A> 이벤트가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-241">For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised.</span></span> <span data-ttu-id="5966f-242">여러 이벤트를 발생 하므로 파일은 여러 개의 간단한 작업으로 구성 된 복잡 한 작업으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-242">Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</span></span> <span data-ttu-id="5966f-243">마찬가지로, 일부 애플리케이션 (예: 바이러스 백신 소프트웨어)에서 검색 되는 추가 파일 시스템 이벤트 않을 <xref:System.IO.FileSystemWatcher>합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-243">Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref:System.IO.FileSystemWatcher>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5966f-244">순서를 <xref:System.IO.FileSystemWatcher.Created> 관련 이벤트가 발생 <xref:System.IO.FileSystemWatcher> 이벤트 때 변경 될 수 있습니다 합니다 <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> 속성이 아닙니다 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-244">The order in which the <xref:System.IO.FileSystemWatcher.Created> event is raised in relation to the other <xref:System.IO.FileSystemWatcher> events may change when the <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> property is not `null`.</span></span>  
  
 <span data-ttu-id="5966f-245"><xref:System.IO.FileSystemWatcher.OnCreated%2A> 파일을 작성 하는 즉시 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-245">The <xref:System.IO.FileSystemWatcher.OnCreated%2A> event is raised as soon as a file is created.</span></span> <span data-ttu-id="5966f-246">파일 되 면 복사 하거나 조사 디렉터리로 전송 합니다 <xref:System.IO.FileSystemWatcher.OnCreated%2A> 이벤트 발생 즉시 뒤에 하나 이상의 <xref:System.IO.FileSystemWatcher.OnChanged%2A> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-246">If a file is being copied or transferred into a watched directory, the <xref:System.IO.FileSystemWatcher.OnCreated%2A> event will be raised immediately, followed by one or more <xref:System.IO.FileSystemWatcher.OnChanged%2A> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5966f-247">다음 예제에서는 <xref:System.IO.FileSystemWatcher.Created> 조사 되는 파일이 만들어질 때마다 파일 경로 콘솔에 표시할 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-247">The following example uses the <xref:System.IO.FileSystemWatcher.Created> event to display the file path to the console whenever the watched file is created.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.IO.FileSystemWatcher.Deleted" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" />
        <altmember cref="P:System.IO.FileSystemWatcher.SynchronizingObject" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event System.IO.FileSystemEventHandler Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.IO.FileSystemEventHandler Deleted" />
      <MemberSignature Language="DocId" Value="E:System.IO.FileSystemWatcher.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As FileSystemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::IO::FileSystemEventHandler ^ Deleted;" />
      <MemberSignature Language="F#" Value="member this.Deleted : System.IO.FileSystemEventHandler " Usage="member this.Deleted : System.IO.FileSystemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.IO.IODescription("Occurs when a file/directory deletion matches the filter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.IO.IODescription("FSW_Deleted")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.FileSystemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5966f-248">지정된 <see cref="P:System.IO.FileSystemWatcher.Path" />에 있는 파일이나 디렉터리가 삭제될 경우에 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-248">Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is deleted.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5966f-249">이벤트에 직접 복사 하거나 이동할 파일 또는 디렉터리와 같은 일반적으로 발생 하는 일부 맞지 않는 하지만 이러한 상황 이벤트가 발생할 경우 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-249">Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised.</span></span> <span data-ttu-id="5966f-250">발생 파일 또는 디렉터리를 복사할 때를 <xref:System.IO.FileSystemWatcher.Created> 디렉터리는 파일 복사 된 해당 디렉터리를 감시 하는 경우에 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-250">When you copy a file or directory, the system raises a <xref:System.IO.FileSystemWatcher.Created> event in the directory to which the file was copied, if that directory is being watched.</span></span> <span data-ttu-id="5966f-251">복사한 디렉터리의 다른 인스턴스에 의해 조사 하는 경우 <xref:System.IO.FileSystemWatcher>, 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-251">If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised.</span></span> <span data-ttu-id="5966f-252">두 인스턴스를 만드는 예를 들어 <xref:System.IO.FileSystemWatcher>합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-252">For example, you create two instances of <xref:System.IO.FileSystemWatcher>.</span></span> <span data-ttu-id="5966f-253">"C:\My 문서"를 시청 하려면 FileSystemWatcher1 집합과 FileSystemWatcher2 보기 "C:\Your 문서"로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-253">FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your Documents".</span></span> <span data-ttu-id="5966f-254">문서로"Your", "내 문서"에서 파일을 복사 하는 경우는 <xref:System.IO.FileSystemWatcher.Created> FileSystemWatcher2에서 이벤트가 발생 하지만 FileSystemWatcher1에 대 한 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-254">If you copy a file from "My Documents" into "Your Documents", a <xref:System.IO.FileSystemWatcher.Created> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1.</span></span> <span data-ttu-id="5966f-255">복사와 달리 파일 또는 디렉터리를 이동 두 이벤트가 발생 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-255">Unlike copying, moving a file or directory would raise two events.</span></span> <span data-ttu-id="5966f-256">"Your 문서", "내 문서"에서 파일을 이동 하는 경우 이전 예제에서를 <xref:System.IO.FileSystemWatcher.Created> FileSystemWatcher2 이벤트는 발생 및 <xref:System.IO.FileSystemWatcher.Deleted> FileSystemWatcher1 하 여 이벤트를 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-256">From the previous example, if you moved a file from "My Documents" to "Your Documents", a <xref:System.IO.FileSystemWatcher.Created> event would be raised by FileSystemWatcher2 and a <xref:System.IO.FileSystemWatcher.Deleted> event would be raised by FileSystemWatcher1.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5966f-257">일반적인 파일 시스템 작업에는 하나 이상의 이벤트 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-257">Common file system operations might raise more than one event.</span></span> <span data-ttu-id="5966f-258">파일을 한 디렉터리에 다른, 여러에서 이동할 경우에 예를 들어 <xref:System.IO.FileSystemWatcher.OnChanged%2A> 일부 <xref:System.IO.FileSystemWatcher.OnCreated%2A> 고 <xref:System.IO.FileSystemWatcher.OnDeleted%2A> 이벤트가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-258">For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised.</span></span> <span data-ttu-id="5966f-259">여러 이벤트를 발생 하므로 파일은 여러 개의 간단한 작업으로 구성 된 복잡 한 작업으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-259">Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</span></span> <span data-ttu-id="5966f-260">마찬가지로, 일부 애플리케이션 (예: 바이러스 백신 소프트웨어)에서 검색 되는 추가 파일 시스템 이벤트 않을 <xref:System.IO.FileSystemWatcher>합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-260">Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref:System.IO.FileSystemWatcher>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5966f-261">순서를 <xref:System.IO.FileSystemWatcher.Deleted> 관련 이벤트가 발생 <xref:System.IO.FileSystemWatcher> 이벤트 때 변경 될 수 있습니다 합니다 <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> 속성이 아닙니다 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-261">The order in which the <xref:System.IO.FileSystemWatcher.Deleted> event is raised in relation to the other <xref:System.IO.FileSystemWatcher> events may change when the <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> property is not `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5966f-262">다음 예제에서는 <xref:System.IO.FileSystemWatcher.Deleted> 조사 되는 파일이 삭제 될 때마다 파일 경로 콘솔에 표시할 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-262">The following example uses the <xref:System.IO.FileSystemWatcher.Deleted> event to display the file path to the console whenever the watched file is deleted.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.IO.FileSystemWatcher.Created" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" />
        <altmember cref="P:System.IO.FileSystemWatcher.SynchronizingObject" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public virtual void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="override this.Dispose : unit -&gt; unit" Usage="fileSystemWatcher.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="fileSystemWatcher.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="5966f-263">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-263"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="5966f-264"><see cref="T:System.IO.FileSystemWatcher" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-264">Releases the unmanaged resources used by the <see cref="T:System.IO.FileSystemWatcher" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5966f-265">이 메서드는 공용 <xref:System.ComponentModel.Component.Dispose%2A> 메서드 및 <xref:System.Object.Finalize%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5966f-265">This method is called by the public <xref:System.ComponentModel.Component.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="5966f-266"><xref:System.ComponentModel.Component.Dispose%2A> 보호 된 호출 <xref:System.IO.FileSystemWatcher.Dispose%2A> 메서드를 `disposing` 매개 변수 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-266"><xref:System.ComponentModel.Component.Dispose%2A> invokes the protected <xref:System.IO.FileSystemWatcher.Dispose%2A> method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="5966f-267"><xref:System.Object.Finalize%2A> 호출 <xref:System.IO.FileSystemWatcher.Dispose%2A> 사용 하 여 `disposing` 로 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-267"><xref:System.Object.Finalize%2A> invokes <xref:System.IO.FileSystemWatcher.Dispose%2A> with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="5966f-268">`disposing` 매개 변수가 `true`인 경우 이 메서드는 이 <xref:System.IO.Compression.DeflateStream>에서 참조하는 관리 개체가 보유하고 있는 리소스를 모두 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-268">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.Compression.DeflateStream> references.</span></span> <span data-ttu-id="5966f-269">이 메서드는 참조되는 각 개체의 <xref:System.ComponentModel.Component.Dispose%2A> 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-269">This method invokes the <xref:System.ComponentModel.Component.Dispose%2A> method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="5966f-270">
            <see cref="M:System.ComponentModel.Component.Dispose" />는 다른 개체에서 여러 번 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-270">
            <see cref="M:System.ComponentModel.Component.Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="5966f-271">재정의 하는 경우 <see cref="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" /> 대 한 이전 호출에서 삭제 된 개체를 참조 하지 않도록 주의 해야 <see cref="M:System.ComponentModel.Component.Dispose" />합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-271">When overriding <see cref="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see cref="M:System.ComponentModel.Component.Dispose" />.</span></span> <span data-ttu-id="5966f-272">구현 하는 방법에 대 한 자세한 내용은 <see cref="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" />를 참조 하세요 [Dispose 메서드 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-272">For more information about how to implement <see cref="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
<span data-ttu-id="5966f-273">에 대 한 자세한 내용은 <see cref="M:System.ComponentModel.Component.Dispose" /> 하 고 <see cref="M:System.Object.Finalize" />를 참조 하세요 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-273">For more information about <see cref="M:System.ComponentModel.Component.Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="EnableRaisingEvents">
      <MemberSignature Language="C#" Value="public bool EnableRaisingEvents { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableRaisingEvents" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.EnableRaisingEvents" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableRaisingEvents As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableRaisingEvents { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableRaisingEvents : bool with get, set" Usage="System.IO.FileSystemWatcher.EnableRaisingEvents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.IO.IODescription("Flag to indicate if this instance is active")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.IO.IODescription("FSW_Enabled")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5966f-274">구성 요소가 활성화되는지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-274">Gets or sets a value indicating whether the component is enabled.</span></span></summary>
        <value><span data-ttu-id="5966f-275">구성 요소가 활성화되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-275"><see langword="true" /> if the component is enabled; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="5966f-276">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-276">The default is <see langword="false" />.</span></span> <span data-ttu-id="5966f-277">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]의 디자이너에서 구성 요소를 사용하고 있으면 기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-277">If you are using the component on a designer in [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)], the default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5966f-278">설정 하지 않으면 구성 요소 이벤트를 발생 하지 것입니다 <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> 에 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-278">The component will not raise events unless you set <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> to `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5966f-279">구성 요소에 지정 된 디렉터리를 조사 합니다는 <xref:System.IO.FileSystemWatcher.Path%2A> 속성이 설정 되었는지 및 <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> 는 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-279">The component will not watch the specified directory until the <xref:System.IO.FileSystemWatcher.Path%2A> property has been set and <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> is `true`.</span></span>  
  
 <span data-ttu-id="5966f-280">합니다 <xref:System.IO.FileSystemWatcher.WaitForChanged%2A> 메서드이 속성을 설정 하는 경우에 파일 변경 내용에 응답할 때 호출할 이벤트 처리기를 사용 하면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-280">The <xref:System.IO.FileSystemWatcher.WaitForChanged%2A> method allows event handlers to be invoked to respond to file changes even if this property is set to `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5966f-281">다음 예제에서는 <xref:System.IO.FileSystemWatcher> 런타임에 지정 된 디렉터리를 시청 하려면.</span><span class="sxs-lookup"><span data-stu-id="5966f-281">The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time.</span></span> <span data-ttu-id="5966f-282">구성 요소에서 변경 내용을 관찰할로 설정 되어 `LastWrite` 및 `LastAccess` 시간, 만들기, 삭제, 또는 디렉터리에 텍스트 파일의 이름을 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-282">The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory.</span></span> <span data-ttu-id="5966f-283">파일 변경, 생성 또는 삭제 하는 경우 콘솔에는 파일의 경로를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-283">If a file is changed, created, or deleted, the path to the file prints to the console.</span></span> <span data-ttu-id="5966f-284">파일의 이름을 바꿀 때 이전 및 새 경로 콘솔에 인쇄 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-284">When a file is renamed, the old and new paths print to the console.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5966f-285"><see cref="T:System.IO.FileSystemWatcher" /> 개체가 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-285">The <see cref="T:System.IO.FileSystemWatcher" /> object has been disposed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="5966f-286">현재 운영 체제가 Microsoft Windows NT 이상이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="5966f-286">The current operating system is not Microsoft Windows NT or later.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="5966f-287"><see cref="P:System.IO.FileSystemWatcher.Path" />에 지정된 디렉터리를 찾을 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="5966f-287">The directory specified in <see cref="P:System.IO.FileSystemWatcher.Path" /> could not be found.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5966f-288"><see cref="P:System.IO.FileSystemWatcher.Path" />가 설정되지 않았거나 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="5966f-288"><see cref="P:System.IO.FileSystemWatcher.Path" /> has not been set or is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="fileSystemWatcher.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5966f-289">폼에 사용되거나 다른 구성 요소에서 사용하는 <see cref="T:System.IO.FileSystemWatcher" />의 초기화를 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-289">Ends the initialization of a <see cref="T:System.IO.FileSystemWatcher" /> used on a form or used by another component.</span></span> <span data-ttu-id="5966f-290">초기화는 런타임에 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-290">The initialization occurs at run time.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5966f-291">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] 디자인 환경에서이 메서드를 사용 하 여 구성 요소의 초기화를 끝냅니다 폼에 사용 되거나 다른 구성 요소에서 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-291">The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to end the initialization of a component used on a form or used by another component.</span></span> <span data-ttu-id="5966f-292"><xref:System.IO.FileSystemWatcher.BeginInit%2A> 메서드 초기화를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-292">The <xref:System.IO.FileSystemWatcher.BeginInit%2A> method starts the initialization.</span></span> <span data-ttu-id="5966f-293">사용 하는 <xref:System.IO.FileSystemWatcher.BeginInit%2A> 및 <xref:System.IO.FileSystemWatcher.EndInit%2A> 메서드 컨트롤을 완전히 초기화 되기 전에 사용 되지 않도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-293">Using the <xref:System.IO.FileSystemWatcher.BeginInit%2A> and <xref:System.IO.FileSystemWatcher.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.FileSystemWatcher.BeginInit" />
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public event System.IO.ErrorEventHandler Error;" />
      <MemberSignature Language="ILAsm" Value=".event class System.IO.ErrorEventHandler Error" />
      <MemberSignature Language="DocId" Value="E:System.IO.FileSystemWatcher.Error" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Error As ErrorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::IO::ErrorEventHandler ^ Error;" />
      <MemberSignature Language="F#" Value="member this.Error : System.IO.ErrorEventHandler " Usage="member this.Error : System.IO.ErrorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.ErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5966f-294"><see cref="T:System.IO.FileSystemWatcher" />의 인스턴스가 변경을 지속적으로 모니터링 할 수 없을 때 또는 내부 버퍼가 오버플로우일 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-294">Occurs when the instance of <see cref="T:System.IO.FileSystemWatcher" /> is unable to continue monitoring changes or when the internal buffer overflows.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5966f-295">이 이벤트는 것을 방지 합니다 <xref:System.IO.FileSystemWatcher> 개체에서 변경 내용을 모니터링 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-295">This event is raised whenever something prevents the <xref:System.IO.FileSystemWatcher> object from monitoring changes.</span></span> <span data-ttu-id="5966f-296">예를 들어 개체는 변경 내용을 원격 디렉터리에서를 모니터링 하 고 해당 디렉터리에 대 한 연결이 손실 된 <xref:System.IO.FileSystemWatcher.Error> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-296">For example, if the object is monitoring changes in a remote directory and the connection to that directory is lost, the <xref:System.IO.FileSystemWatcher.Error> event is raised.</span></span>  
  
 <span data-ttu-id="5966f-297">시스템 파일 변경 내용을 알리고 구성 요소를 만들고 Api에 전달 하는 버퍼에 해당 변경 내용을 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-297">The system notifies you of file changes, and it stores those changes in a buffer that the component creates and passes to the APIs.</span></span> <span data-ttu-id="5966f-298">짧은 시간에 많은 변경 내용이 없으면 버퍼 오버플로될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-298">If there are many changes in a short time, the buffer can overflow.</span></span> <span data-ttu-id="5966f-299">이렇게 하면 디렉터리에서 변경 내용을 추적할 구성 요소 및 블 랭 킷 알림만 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-299">This causes the component to lose track of changes in the directory, and it will only provide blanket notification.</span></span> <span data-ttu-id="5966f-300">버퍼의 크기를 늘리면 비용이 많이 듭니다, 그리고 비에 있기 때문에 메모리를 디스크에 유지 하므로 스왑할 수 없는 최대한 작게 버퍼를 페이징 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-300">Increasing the size of the buffer is expensive, because it comes from non paged memory that cannot be swapped out to disk, so keep the buffer as small as possible.</span></span> <span data-ttu-id="5966f-301">버퍼 오버플로 방지 하려면 사용 합니다 <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>, <xref:System.IO.FileSystemWatcher.Filter%2A>, 및 <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> 원치 않는 필터링 할 속성 변경 알림.</span><span class="sxs-lookup"><span data-stu-id="5966f-301">To avoid a buffer overflow, use the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>, <xref:System.IO.FileSystemWatcher.Filter%2A>, and <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> properties to filter out unwanted change notifications.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5966f-302">일반적인 파일 시스템 작업에는 하나 이상의 이벤트 발생 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-302">Common file system operations might raise more than one event.</span></span> <span data-ttu-id="5966f-303">파일을 한 디렉터리에 다른, 여러에서 이동할 경우에 예를 들어 <xref:System.IO.FileSystemWatcher.OnChanged%2A> 일부 <xref:System.IO.FileSystemWatcher.OnCreated%2A> 고 <xref:System.IO.FileSystemWatcher.OnDeleted%2A> 이벤트가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-303">For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised.</span></span> <span data-ttu-id="5966f-304">여러 이벤트를 발생 하므로 파일은 여러 개의 간단한 작업으로 구성 된 복잡 한 작업으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-304">Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events.</span></span> <span data-ttu-id="5966f-305">마찬가지로, 일부 애플리케이션 (예: 바이러스 백신 소프트웨어)에서 검색 되는 추가 파일 시스템 이벤트 않을 <xref:System.IO.FileSystemWatcher>합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-305">Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref:System.IO.FileSystemWatcher>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
        <altmember cref="T:System.IO.ErrorEventArgs" />
        <altmember cref="T:System.IO.ErrorEventHandler" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
        <altmember cref="P:System.IO.FileSystemWatcher.IncludeSubdirectories" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public string Filter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Filter" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.Filter" />
      <MemberSignature Language="VB.NET" Value="Public Property Filter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Filter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Filter : string with get, set" Usage="System.IO.FileSystemWatcher.Filter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("*.*")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;xamarinmac-3.0">
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.IO.IODescription("File name filter pattern")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.IO.IODescription("FSW_Filter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8">
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5966f-306">디렉터리에서 모니터링할 파일을 결정하는 데 사용되는 필터 문자열을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-306">Gets or sets the filter string used to determine what files are monitored in a directory.</span></span></summary>
        <value><span data-ttu-id="5966f-307">필터 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-307">The filter string.</span></span> <span data-ttu-id="5966f-308">기본값은 "\*. \*"(모든 파일이 조사 합니다.)</span><span class="sxs-lookup"><span data-stu-id="5966f-308">The default is "\*.\*" (Watches all files.)</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5966f-309">모든 파일의 변경 내용을 보려면 설정 된 <xref:System.IO.FileSystemWatcher.Filter%2A> 속성을 빈 문자열 ("").</span><span class="sxs-lookup"><span data-stu-id="5966f-309">To watch changes in all files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to an empty string ("").</span></span> <span data-ttu-id="5966f-310">특정 파일을 시청 하려면 설정의 <xref:System.IO.FileSystemWatcher.Filter%2A> 파일 이름에는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-310">To watch a specific file, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to the file name.</span></span> <span data-ttu-id="5966f-311">예를 들어 MyDoc.txt 파일의 변경 내용을 감시를 설정 합니다 <xref:System.IO.FileSystemWatcher.Filter%2A> "MyDoc.txt" 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-311">For example, to watch for changes in the file MyDoc.txt, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to "MyDoc.txt".</span></span> <span data-ttu-id="5966f-312">특정 유형의 파일에서 변경 내용을 볼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-312">You can also watch for changes in a certain type of file.</span></span> <span data-ttu-id="5966f-313">예를 들어, 모든 텍스트 파일에 변경 내용을 감시를 설정 합니다 <xref:System.IO.FileSystemWatcher.Filter%2A> 속성을 "\*.txt"입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-313">For example, to watch for changes in any text files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to "\*.txt".</span></span> <span data-ttu-id="5966f-314">와 같은 여러 필터를 사용할 "\*.txt&#124;\*.doc" 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-314">Use of multiple filters such as "\*.txt&#124;\*.doc" is not supported.</span></span>  
  
 <span data-ttu-id="5966f-315"><xref:System.IO.FileSystemWatcher.Filter%2A> 후 속성을 변경할 수는 <xref:System.IO.FileSystemWatcher> 개체 이벤트 수신을 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-315">The <xref:System.IO.FileSystemWatcher.Filter%2A> property can be changed after the <xref:System.IO.FileSystemWatcher> object has started receiving events.</span></span>  
  
 <span data-ttu-id="5966f-316">원치 않는 알림을 필터링 하는 방법에 대 한 자세한 내용은 참조는 <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>, <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>, 및 <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-316">For more information about filtering out unwanted notifications, see the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>, <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>, and <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> properties.</span></span>  
  
 <span data-ttu-id="5966f-317"><xref:System.IO.FileSystemWatcher.Filter%2A> 다음 예제와 같이 일치 하는 파일에 대 한 와일드 카드를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-317"><xref:System.IO.FileSystemWatcher.Filter%2A> accepts wildcards for matching files, as shown in the following examples.</span></span>  
  
|<span data-ttu-id="5966f-318">필터 문자열</span><span class="sxs-lookup"><span data-stu-id="5966f-318">Filter string</span></span>|<span data-ttu-id="5966f-319">다음 파일을 감시</span><span class="sxs-lookup"><span data-stu-id="5966f-319">Watches the following files</span></span>|  
|-------------------|---------------------------------|  
|<span data-ttu-id="5966f-320">\*.\*</span><span class="sxs-lookup"><span data-stu-id="5966f-320">\*.\*</span></span>|<span data-ttu-id="5966f-321">모든 파일 (기본값)입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-321">All files (default).</span></span> <span data-ttu-id="5966f-322">빈 문자열 ("")도 모든 파일을 감시 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-322">An empty string ("") also watches all files.</span></span>|  
|<span data-ttu-id="5966f-323">\*.txt</span><span class="sxs-lookup"><span data-stu-id="5966f-323">\*.txt</span></span>|<span data-ttu-id="5966f-324">"Txt" 확장명을 가진 모든 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-324">All files with a "txt" extension.</span></span>|  
|<span data-ttu-id="5966f-325">\*recipe.doc</span><span class="sxs-lookup"><span data-stu-id="5966f-325">\*recipe.doc</span></span>|<span data-ttu-id="5966f-326">"Doc" 확장명을 가진 "recipe"로 끝나는 모든 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-326">All files ending in "recipe" with a "doc" extension.</span></span>|  
|<span data-ttu-id="5966f-327">win\*.xml</span><span class="sxs-lookup"><span data-stu-id="5966f-327">win\*.xml</span></span>|<span data-ttu-id="5966f-328">"Xml" 확장명을 가진 "win"으로 시작 하는 모든 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-328">All files beginning with "win" with an "xml" extension.</span></span>|  
|<span data-ttu-id="5966f-329">판매 \* 200? xls</span><span class="sxs-lookup"><span data-stu-id="5966f-329">Sales\*200?.xls</span></span>|<span data-ttu-id="5966f-330">다음 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-330">Matches the following:</span></span><br /><br /> <span data-ttu-id="5966f-331">판매 년 7 월 2001.xlsSales Aug 2002.xlsSales 년 3 월 2004.xls</span><span class="sxs-lookup"><span data-stu-id="5966f-331">Sales July 2001.xlsSales Aug 2002.xlsSales March 2004.xls</span></span><br /><br /> <span data-ttu-id="5966f-332">하지만 일치 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-332">but does not match:</span></span><br /><br /> <span data-ttu-id="5966f-333">판매 예정 이라고 알리시기 바랍니다 1999.xls</span><span class="sxs-lookup"><span data-stu-id="5966f-333">Sales Nov 1999.xls</span></span>|  
|<span data-ttu-id="5966f-334">MyReport.Doc</span><span class="sxs-lookup"><span data-stu-id="5966f-334">MyReport.Doc</span></span>|<span data-ttu-id="5966f-335">만 MyReport.doc 감시</span><span class="sxs-lookup"><span data-stu-id="5966f-335">Watches only MyReport.doc</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="5966f-336">다음 예제에서는 <xref:System.IO.FileSystemWatcher> 런타임에 지정 된 디렉터리를 시청 하려면.</span><span class="sxs-lookup"><span data-stu-id="5966f-336">The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time.</span></span> <span data-ttu-id="5966f-337">구성 요소에서 변경 내용을 관찰할로 설정 되어 `LastWrite` 및 `LastAccess` 시간, 만들기, 삭제, 또는 디렉터리에 텍스트 파일의 이름을 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-337">The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory.</span></span> <span data-ttu-id="5966f-338">파일 변경, 생성 또는 삭제 하는 경우 콘솔에는 파일의 경로를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-338">If a file is changed, created, or deleted, the path to the file prints to the console.</span></span> <span data-ttu-id="5966f-339">파일의 이름을 바꿀 때 이전 및 새 경로 콘솔에 인쇄 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-339">When a file is renamed, the old and new paths print to the console.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
        <altmember cref="P:System.IO.FileSystemWatcher.IncludeSubdirectories" />
        <altmember cref="P:System.IO.FileSystemWatcher.InternalBufferSize" />
      </Docs>
    </Member>
    <Member MemberName="Filters">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;string&gt; Filters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;string&gt; Filters" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.Filters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Filters As Collection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ Filters { System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Filters : System.Collections.ObjectModel.Collection&lt;string&gt;" Usage="System.IO.FileSystemWatcher.Filters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~FileSystemWatcher ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!FileSystemWatcher ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="fileSystemWatcher.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeSubdirectories">
      <MemberSignature Language="C#" Value="public bool IncludeSubdirectories { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeSubdirectories" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.IncludeSubdirectories" />
      <MemberSignature Language="VB.NET" Value="Public Property IncludeSubdirectories As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IncludeSubdirectories { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IncludeSubdirectories : bool with get, set" Usage="System.IO.FileSystemWatcher.IncludeSubdirectories" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.IO.IODescription("Flag to indicate we want to watch subdirectories")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.IO.IODescription("FSW_IncludeSubdirectories")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5966f-340">지정된 경로 내에 있는 하위 디렉터리를 모니터링해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-340">Gets or sets a value indicating whether subdirectories within the specified path should be monitored.</span></span></summary>
        <value><span data-ttu-id="5966f-341">하위 디렉터리를 모니터링하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-341"><see langword="true" /> if you want to monitor subdirectories; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="5966f-342">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-342">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5966f-343">설정 <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> 하 `true` 파일 및 디렉터리를 통해 지정 된 디렉터리 내에 포함 된 변경 알림에 대 한 조사 하려는 경우는 <xref:System.IO.FileSystemWatcher.Path%2A> 속성 및 해당 하위 디렉터리입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-343">Set <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> to `true` when you want to watch for change notifications for files and directories contained within the directory specified through the <xref:System.IO.FileSystemWatcher.Path%2A> property, and its subdirectories.</span></span> <span data-ttu-id="5966f-344">설정 된 <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> 속성을 `false` 내부 버퍼로 전송 하는 알림의 수를 줄이는 데 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-344">Setting the <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> property to `false` helps reduce the number of notifications sent to the internal buffer.</span></span> <span data-ttu-id="5966f-345">원치 않는 알림을 필터링에 대 한 자세한 내용은 참조는 <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> 및 <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-345">For more information on filtering out unwanted notifications, see the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> and <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> properties.</span></span>  
  
 <span data-ttu-id="5966f-346">때 `true`, <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> 직계 자식 디렉터리 뿐 아니라 전체 하위 트리를 통해 재귀적입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-346">When `true`, <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> is recursive through the entire sub tree, not just the immediate child directories.</span></span> <span data-ttu-id="5966f-347">파일 또는 디렉터리 하위 트리 내에서 상대 경로 반환 합니다.는 <xref:System.IO.FileSystemEventArgs.Name%2A> 속성의 <xref:System.IO.FileSystemEventArgs> 및 <xref:System.IO.RenamedEventArgs.OldName%2A> 의 속성 <xref:System.IO.RenamedEventArgs>조사 중인 변경 내용에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-347">The relative path to a file or directory within the sub tree returns in the <xref:System.IO.FileSystemEventArgs.Name%2A> property of <xref:System.IO.FileSystemEventArgs> and the <xref:System.IO.RenamedEventArgs.OldName%2A> property of <xref:System.IO.RenamedEventArgs>, depending on changes you are watching for.</span></span> <span data-ttu-id="5966f-348">정규화 된 경로 가져올 수 있습니다 합니다 <xref:System.IO.FileSystemEventArgs.FullPath%2A> 속성을 <xref:System.IO.FileSystemEventArgs> 및 <xref:System.IO.RenamedEventArgs.OldFullPath%2A> 의 속성 <xref:System.IO.RenamedEventArgs>조사 중인 변경 내용에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-348">You can get the fully qualified path from the <xref:System.IO.FileSystemEventArgs.FullPath%2A> property of <xref:System.IO.FileSystemEventArgs> and the <xref:System.IO.RenamedEventArgs.OldFullPath%2A> property of <xref:System.IO.RenamedEventArgs>, depending on the changes you are watching for.</span></span>  
  
 <span data-ttu-id="5966f-349">디렉터리를 감시 하는 디렉터리의 하위 트리에 만들어지는 경우와 <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> 는 `true`, 해당 디렉터리를 자동으로 감시 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-349">If a directory is created in the sub tree of the directory you are watching, and <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> is `true`, that directory will automatically be watched.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
        <altmember cref="P:System.IO.FileSystemEventArgs.FullPath" />
        <altmember cref="P:System.IO.RenamedEventArgs.OldFullPath" />
        <altmember cref="P:System.IO.FileSystemWatcher.InternalBufferSize" />
        <altmember cref="P:System.IO.FileSystemEventArgs.Name" />
        <altmember cref="P:System.IO.RenamedEventArgs.OldName" />
        <altmember cref="P:System.IO.FileSystemWatcher.Path" />
        <altmember cref="T:System.IO.RenamedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="InternalBufferSize">
      <MemberSignature Language="C#" Value="public int InternalBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 InternalBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.InternalBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property InternalBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int InternalBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.InternalBufferSize : int with get, set" Usage="System.IO.FileSystemWatcher.InternalBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(8192)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5966f-350">내부 버퍼의 크기(바이트)를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-350">Gets or sets the size (in bytes) of the internal buffer.</span></span></summary>
        <value><span data-ttu-id="5966f-351">내부 버퍼의 크기(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-351">The internal buffer size in bytes.</span></span> <span data-ttu-id="5966f-352">기본값은 8192(8KB)입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-352">The default is 8192 (8 KB).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5966f-353">4KB 또는 큰 버퍼를 설정할 수 있지만 64 KB를 초과 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-353">You can set the buffer to 4 KB or larger, but it must not exceed 64 KB.</span></span> <span data-ttu-id="5966f-354">설정 하려는 경우는 <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> 속성에 보다 작은 4096 바이트 값은 무시 됩니다 및 <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> 속성 4096 바이트로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-354">If you try to set the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property to less than 4096 bytes, your value is discarded and the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property is set to 4096 bytes.</span></span> <span data-ttu-id="5966f-355">최상의 성능을 위해 Intel 기반 컴퓨터에서 4KB의 배수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-355">For best performance, use a multiple of 4 KB on Intel-based computers.</span></span>  
  
 <span data-ttu-id="5966f-356">시스템 파일 변경 내용이 구성 요소를 알리고 해당 변경 내용을 구성 요소를 만들고 Api에 전달 된 버퍼에 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-356">The system notifies the component of file changes, and it stores those changes in a buffer the component creates and passes to the APIs.</span></span> <span data-ttu-id="5966f-357">각 이벤트는 최대 16 바이트의 메모리, 파일 이름을 제외한를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-357">Each event can use up to 16 bytes of memory, not including the file name.</span></span> <span data-ttu-id="5966f-358">짧은 시간에 많은 변경 내용이 없으면 버퍼 오버플로될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-358">If there are many changes in a short time, the buffer can overflow.</span></span> <span data-ttu-id="5966f-359">이렇게 하면 디렉터리에서 변경 내용을 추적할 구성 요소 및 블 랭 킷 알림만 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-359">This causes the component to lose track of changes in the directory, and it will only provide blanket notification.</span></span> <span data-ttu-id="5966f-360">버퍼의 크기 증가 방지할 수 없습니다. 파일 시스템 변경 이벤트.</span><span class="sxs-lookup"><span data-stu-id="5966f-360">Increasing the size of the buffer can prevent missing file system change events.</span></span> <span data-ttu-id="5966f-361">그러나 버퍼 크기를 늘리는 경우 비용이 많이 드는 디스크에 따라서 버퍼를 최대한 작게 유지 스왑할 수 없는 비페이징 메모리에 있기 때문에</span><span class="sxs-lookup"><span data-stu-id="5966f-361">However, increasing buffer size is expensive, because it comes from non-paged memory that cannot be swapped out to disk, so keep the buffer as small as possible.</span></span> <span data-ttu-id="5966f-362">버퍼 오버플로 방지 하려면 사용 합니다 <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> 및 <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> 원치 않는 필터링 할 속성 변경 알림.</span><span class="sxs-lookup"><span data-stu-id="5966f-362">To avoid a buffer overflow, use the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> and <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> properties to filter out unwanted change notifications.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
        <altmember cref="P:System.IO.FileSystemWatcher.IncludeSubdirectories" />
        <altmember cref="T:System.IO.InternalBufferOverflowException" />
      </Docs>
    </Member>
    <Member MemberName="NotifyFilter">
      <MemberSignature Language="C#" Value="public System.IO.NotifyFilters NotifyFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.NotifyFilters NotifyFilter" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.NotifyFilter" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyFilter As NotifyFilters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::NotifyFilters NotifyFilter { System::IO::NotifyFilters get(); void set(System::IO::NotifyFilters value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyFilter : System.IO.NotifyFilters with get, set" Usage="System.IO.FileSystemWatcher.NotifyFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.IO.IODescription("Flag to indicate which change event we want to monitor")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.IO.IODescription("FSW_ChangedFilter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.NotifyFilters</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5966f-363">조사할 변경 내용 형식을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-363">Gets or sets the type of changes to watch for.</span></span></summary>
        <value><span data-ttu-id="5966f-364"><see cref="T:System.IO.NotifyFilters" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-364">One of the <see cref="T:System.IO.NotifyFilters" /> values.</span></span> <span data-ttu-id="5966f-365">기본값은 <see langword="LastWrite" />, <see langword="FileName" />, <see langword="DirectoryName" />의 비트 OR 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-365">The default is the bitwise OR combination of <see langword="LastWrite" />, <see langword="FileName" />, and <see langword="DirectoryName" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5966f-366">멤버를 결합할 수 있습니다는 <xref:System.IO.NotifyFilters> 변경 한 번에 둘 이상의 형식에 대 한 보기를 열거 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-366">You can combine the members of the <xref:System.IO.NotifyFilters> enumeration to watch for more than one type of change at a time.</span></span> <span data-ttu-id="5966f-367">예를 들어 파일의 크기 변경에 대 한과 변경에 대 한을 살펴볼 수 있습니다는 `LastWrite` 시간입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-367">For example, you can watch for changes in size of a file, and for changes in the `LastWrite` time.</span></span> <span data-ttu-id="5966f-368">이 이벤트를 발생 시키는 경우 다음 파일 또는 폴더 크기 변경 또는 변경 언제 든 지는 `LastWrite` 파일 또는 폴더의 시간입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-368">This raises an event anytime there is a change in file or folder size, or a change in the `LastWrite` time of the file or folder.</span></span>  
  
 <span data-ttu-id="5966f-369">이 원하지 않는 알림을 필터링 하는 하나의 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-369">This is one way to filter out unwanted notifications.</span></span> <span data-ttu-id="5966f-370">원치 않는 알림을 필터링에 대 한 자세한 내용은 참조는 <xref:System.IO.FileSystemWatcher.Filter%2A>, <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>, 및 <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-370">For more information on filtering out unwanted notifications, see the <xref:System.IO.FileSystemWatcher.Filter%2A>, <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>, and <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> properties.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5966f-371">다음 예제에서는 <xref:System.IO.FileSystemWatcher> 런타임에 지정 된 디렉터리를 시청 하려면.</span><span class="sxs-lookup"><span data-stu-id="5966f-371">The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time.</span></span> <span data-ttu-id="5966f-372">구성 요소에서 변경 내용을 관찰할로 설정 되어 `LastWrite` 및 `LastAccess` 시간, 만들기, 삭제, 또는 디렉터리에 텍스트 파일의 이름을 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-372">The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory.</span></span> <span data-ttu-id="5966f-373">파일 변경, 생성 또는 삭제 하는 경우 콘솔에는 파일의 경로를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-373">If a file is changed, created, or deleted, the path to the file prints to the console.</span></span> <span data-ttu-id="5966f-374">파일의 이름을 바꿀 때 이전 및 새 경로 콘솔에 인쇄 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-374">When a file is renamed, the old and new paths print to the console.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5966f-375">이 값이 <see cref="T:System.IO.NotifyFilters" /> 값의 유효한 비트 OR 조합이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="5966f-375">The value is not a valid bitwise OR combination of the <see cref="T:System.IO.NotifyFilters" /> values.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="5966f-376">설정된 값이 유효하지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="5966f-376">The value that is being set is not valid.</span></span></exception>
        <altmember cref="T:System.IO.NotifyFilters" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
        <altmember cref="P:System.IO.FileSystemWatcher.IncludeSubdirectories" />
        <altmember cref="P:System.IO.FileSystemWatcher.InternalBufferSize" />
      </Docs>
    </Member>
    <Member MemberName="OnChanged">
      <MemberSignature Language="C#" Value="protected void OnChanged (System.IO.FileSystemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnChanged(class System.IO.FileSystemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnChanged (e As FileSystemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnChanged(System::IO::FileSystemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnChanged : System.IO.FileSystemEventArgs -&gt; unit" Usage="fileSystemWatcher.OnChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.IO.FileSystemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="5966f-377">이벤트 데이터를 포함하는 <see cref="T:System.IO.FileSystemEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-377">A <see cref="T:System.IO.FileSystemEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="5966f-378"><see cref="E:System.IO.FileSystemWatcher.Changed" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-378">Raises the <see cref="E:System.IO.FileSystemWatcher.Changed" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5966f-379"><xref:System.IO.FileSystemWatcher.OnChanged%2A> 크기, 시스템 특성, 마지막으로 쓴 시간, 마지막 액세스 시간 또는 파일이 나 디렉터리의에서 모니터링 되 고 디렉터리의 보안 권한이 변경 될 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-379"><xref:System.IO.FileSystemWatcher.OnChanged%2A> is called when changes are made to the size, system attributes, last write time, last access time, or security permissions of a file or directory in the directory being monitored.</span></span>  
  
 <span data-ttu-id="5966f-380">사용 하 여는 <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> 때 발생 하는 이벤트 수를 제한 하는 속성을 <xref:System.IO.FileSystemWatcher.Changed> 이벤트를 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-380">Use the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> property to restrict the number of events raised when the <xref:System.IO.FileSystemWatcher.Changed> event is handled.</span></span>  
  
 <span data-ttu-id="5966f-381"><xref:System.IO.FileSystemWatcher.OnCreated%2A> 파일을 작성 하는 즉시 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-381">The <xref:System.IO.FileSystemWatcher.OnCreated%2A> event is raised as soon as a file is created.</span></span> <span data-ttu-id="5966f-382">파일 되 면 복사 하거나 조사 디렉터리로 전송 합니다 <xref:System.IO.FileSystemWatcher.OnCreated%2A> 이벤트 발생 즉시 뒤에 하나 이상의 <xref:System.IO.FileSystemWatcher.OnChanged%2A> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-382">If a file is being copied or transferred into a watched directory, the <xref:System.IO.FileSystemWatcher.OnCreated%2A> event will be raised immediately, followed by one or more <xref:System.IO.FileSystemWatcher.OnChanged%2A> events.</span></span>  
  
 <span data-ttu-id="5966f-383">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-383">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="5966f-384">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-384">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="5966f-385">재정의 하는 경우 <see cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" /> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5966f-385">When overriding <see cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" /> method.</span></span></para></block>
        <altmember cref="E:System.IO.FileSystemWatcher.Changed" />
        <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="OnCreated">
      <MemberSignature Language="C#" Value="protected void OnCreated (System.IO.FileSystemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnCreated(class System.IO.FileSystemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnCreated (e As FileSystemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnCreated(System::IO::FileSystemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnCreated : System.IO.FileSystemEventArgs -&gt; unit" Usage="fileSystemWatcher.OnCreated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.IO.FileSystemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="5966f-386">이벤트 데이터를 포함하는 <see cref="T:System.IO.FileSystemEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-386">A <see cref="T:System.IO.FileSystemEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="5966f-387"><see cref="E:System.IO.FileSystemWatcher.Created" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-387">Raises the <see cref="E:System.IO.FileSystemWatcher.Created" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5966f-388"><xref:System.IO.FileSystemWatcher.OnCreated%2A> 모니터링 되 고 디렉터리에 파일이 나 디렉터리가 만들어질 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-388"><xref:System.IO.FileSystemWatcher.OnCreated%2A> is called when a file or directory is created in the directory being monitored.</span></span>  
  
 <span data-ttu-id="5966f-389">이벤트에 직접 복사 하거나 이동할 파일 또는 디렉터리와 같은 일반적으로 발생 하는 일부 맞지 않는 하지만 이러한 상황 이벤트가 발생할 경우 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-389">Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised.</span></span> <span data-ttu-id="5966f-390">발생 파일 또는 디렉터리를 복사할 때를 <xref:System.IO.FileSystemWatcher.Created> 디렉터리는 파일 복사 된 해당 디렉터리를 감시 하는 경우에 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-390">When you copy a file or directory, the system raises a <xref:System.IO.FileSystemWatcher.Created> event in the directory to which the file was copied, if that directory is being watched.</span></span> <span data-ttu-id="5966f-391">복사한 디렉터리의 다른 인스턴스에 의해 조사 하는 경우 <xref:System.IO.FileSystemWatcher>, 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-391">If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised.</span></span> <span data-ttu-id="5966f-392">두 인스턴스를 만드는 예를 들어 <xref:System.IO.FileSystemWatcher>합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-392">For example, you create two instances of <xref:System.IO.FileSystemWatcher>.</span></span> <span data-ttu-id="5966f-393">"C:\My 문서"를 시청 하려면 FileSystemWatcher1 집합과 FileSystemWatcher2 보기 "C:\Your 문서"로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-393">FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your Documents".</span></span> <span data-ttu-id="5966f-394">"내 문서"에서 파일을 복사 하 고 "Your 문서"에 붙여 넣을 경우는 <xref:System.IO.FileSystemWatcher.Created> FileSystemWatcher2에서 이벤트가 발생 하지만 FileSystemWatcher1에 대 한 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-394">If you copy a file from "My Documents" and paste it into "Your Documents", a <xref:System.IO.FileSystemWatcher.Created> event will be raised in FileSystemWatcher2, but no event is raised for FileSystemWatcher1.</span></span> <span data-ttu-id="5966f-395">복사와 달리 파일 또는 디렉터리를 이동 합니다. 두 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-395">Unlike copying, moving a file or directory raises two events.</span></span> <span data-ttu-id="5966f-396">"Your 문서", "내 문서"에서 파일을 이동 하는 경우 이전 예제에서를 <xref:System.IO.FileSystemWatcher.Created> FileSystemWatcher2에서 이벤트가 및 <xref:System.IO.FileSystemWatcher.Deleted> FileSystemWatcher1에서 이벤트를 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-396">From the previous example, if you moved a file from "My Documents" to "Your Documents", a <xref:System.IO.FileSystemWatcher.Created> event would be raised in FileSystemWatcher2 and a <xref:System.IO.FileSystemWatcher.Deleted> event would be raised in FileSystemWatcher1.</span></span>  
  
 <span data-ttu-id="5966f-397"><xref:System.IO.FileSystemWatcher.OnCreated%2A> 파일을 작성 하는 즉시 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-397">The <xref:System.IO.FileSystemWatcher.OnCreated%2A> event is raised as soon as a file is created.</span></span> <span data-ttu-id="5966f-398">파일 되 면 복사 하거나 조사 디렉터리로 전송 합니다 <xref:System.IO.FileSystemWatcher.OnCreated%2A> 이벤트 발생 즉시 뒤에 하나 이상의 <xref:System.IO.FileSystemWatcher.OnChanged%2A> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-398">If a file is being copied or transferred into a watched directory, the <xref:System.IO.FileSystemWatcher.OnCreated%2A> event will be raised immediately, followed by one or more <xref:System.IO.FileSystemWatcher.OnChanged%2A> events.</span></span>  
  
 <span data-ttu-id="5966f-399">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-399">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="5966f-400">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-400">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="5966f-401">재정의 하는 경우 <see cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" /> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5966f-401">When overriding <see cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" /> method.</span></span></para></block>
        <altmember cref="E:System.IO.FileSystemWatcher.Created" />
        <altmember cref="E:System.IO.FileSystemWatcher.Deleted" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="OnDeleted">
      <MemberSignature Language="C#" Value="protected void OnDeleted (System.IO.FileSystemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnDeleted(class System.IO.FileSystemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnDeleted (e As FileSystemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnDeleted(System::IO::FileSystemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnDeleted : System.IO.FileSystemEventArgs -&gt; unit" Usage="fileSystemWatcher.OnDeleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.IO.FileSystemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="5966f-402">이벤트 데이터를 포함하는 <see cref="T:System.IO.FileSystemEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-402">A <see cref="T:System.IO.FileSystemEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="5966f-403"><see cref="E:System.IO.FileSystemWatcher.Deleted" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-403">Raises the <see cref="E:System.IO.FileSystemWatcher.Deleted" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5966f-404"><xref:System.IO.FileSystemWatcher.OnDeleted%2A> 파일 또는 디렉터리를 모니터링 하는 디렉터리 내에서 삭제 될 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-404"><xref:System.IO.FileSystemWatcher.OnDeleted%2A> is called when a file or directory, within the directory being monitored, is deleted.</span></span>  
  
 <span data-ttu-id="5966f-405">이벤트에 직접 복사 하거나 이동할 파일 또는 디렉터리와 같은 일반적으로 발생 하는 일부 맞지 않는 하지만 이러한 상황 이벤트가 발생할 경우 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-405">Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised.</span></span> <span data-ttu-id="5966f-406">발생 파일 또는 디렉터리를 복사할 때를 <xref:System.IO.FileSystemWatcher.Created> 디렉터리는 파일 복사 된 해당 디렉터리를 감시 하는 경우에 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-406">When you copy a file or directory, the system raises a <xref:System.IO.FileSystemWatcher.Created> event in the directory to which the file was copied, if that directory is being watched.</span></span> <span data-ttu-id="5966f-407">복사한 디렉터리의 다른 인스턴스에 의해 조사 하는 경우 <xref:System.IO.FileSystemWatcher>, 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-407">If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised.</span></span> <span data-ttu-id="5966f-408">두 인스턴스를 만드는 예를 들어 <xref:System.IO.FileSystemWatcher>합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-408">For example, you create two instances of <xref:System.IO.FileSystemWatcher>.</span></span> <span data-ttu-id="5966f-409">"C:\My 문서"를 시청 하려면 FileSystemWatcher1 집합과 FileSystemWatcher2 보기 "C:\Your 문서"로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-409">FileSystemWatcher1 is set to watch "C:\My Documents", and FileSystemWatcher2 is set to watch "C:\Your Documents".</span></span> <span data-ttu-id="5966f-410">문서로"Your", "내 문서"에서 파일을 복사 하는 경우는 <xref:System.IO.FileSystemWatcher.Created> FileSystemWatcher2에서 이벤트가 발생 하지만 FileSystemWatcher1에 대 한 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-410">If you copy a file from "My Documents" into "Your Documents", a <xref:System.IO.FileSystemWatcher.Created> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1.</span></span> <span data-ttu-id="5966f-411">복사와 달리 파일 또는 디렉터리를 이동 합니다. 두 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-411">Unlike copying, moving a file or directory raises two events.</span></span> <span data-ttu-id="5966f-412">"Your 문서", "내 문서"에서 파일을 이동 하는 경우 이전 예제에서를 <xref:System.IO.FileSystemWatcher.Created> FileSystemWatcher2 이벤트는 발생 및 <xref:System.IO.FileSystemWatcher.Deleted> FileSystemWatcher1 하 여 이벤트를 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-412">From the previous example, if you moved a file from "My Documents" to "Your Documents", a <xref:System.IO.FileSystemWatcher.Created> event would be raised by FileSystemWatcher2 and a <xref:System.IO.FileSystemWatcher.Deleted> event would be raised by FileSystemWatcher1.</span></span>  
  
 <span data-ttu-id="5966f-413">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-413">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="5966f-414">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-414">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="5966f-415">재정의 하는 경우 <see cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" /> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5966f-415">When overriding <see cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" /> method.</span></span></para></block>
        <altmember cref="E:System.IO.FileSystemWatcher.Created" />
        <altmember cref="E:System.IO.FileSystemWatcher.Deleted" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="OnError">
      <MemberSignature Language="C#" Value="protected void OnError (System.IO.ErrorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnError(class System.IO.ErrorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnError (e As ErrorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnError(System::IO::ErrorEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnError : System.IO.ErrorEventArgs -&gt; unit" Usage="fileSystemWatcher.OnError e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.IO.ErrorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="5966f-416">이벤트 데이터를 포함하는 <see cref="T:System.IO.ErrorEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-416">An <see cref="T:System.IO.ErrorEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="5966f-417"><see cref="E:System.IO.FileSystemWatcher.Error" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-417">Raises the <see cref="E:System.IO.FileSystemWatcher.Error" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5966f-418"><xref:System.IO.FileSystemWatcher.OnError%2A> 오류가 발생할 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-418"><xref:System.IO.FileSystemWatcher.OnError%2A> is called when an error occurs.</span></span>  
  
 <span data-ttu-id="5966f-419">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-419">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="5966f-420">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-420">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="5966f-421">재정의 하는 경우 <see cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" /> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5966f-421">When overriding <see cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" /> method.</span></span></para></block>
        <altmember cref="E:System.IO.FileSystemWatcher.Error" />
        <altmember cref="T:System.IO.ErrorEventArgs" />
        <altmember cref="T:System.IO.ErrorEventHandler" />
        <altmember cref="T:System.IO.InternalBufferOverflowException" />
      </Docs>
    </Member>
    <Member MemberName="OnRenamed">
      <MemberSignature Language="C#" Value="protected void OnRenamed (System.IO.RenamedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnRenamed(class System.IO.RenamedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnRenamed (e As RenamedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnRenamed(System::IO::RenamedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnRenamed : System.IO.RenamedEventArgs -&gt; unit" Usage="fileSystemWatcher.OnRenamed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.IO.RenamedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="5966f-422">이벤트 데이터를 포함하는 <see cref="T:System.IO.RenamedEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-422">A <see cref="T:System.IO.RenamedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="5966f-423"><see cref="E:System.IO.FileSystemWatcher.Renamed" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-423">Raises the <see cref="E:System.IO.FileSystemWatcher.Renamed" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5966f-424"><xref:System.IO.FileSystemWatcher.OnRenamed%2A> 파일 또는 디렉터리는 모니터링 중인 디렉터리 내에서 이름을 바꿀 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-424"><xref:System.IO.FileSystemWatcher.OnRenamed%2A> is called when a file or directory within the directory being monitored is renamed.</span></span> <span data-ttu-id="5966f-425">해당 <xref:System.IO.RenamedEventArgs> 인수 형식 변경, 이전 및 새 경로 및 이전 및 새 이름을 같은 이름 바꾸기 작업에 대 한 정보를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-425">Its <xref:System.IO.RenamedEventArgs> argument contains information about the renaming operation, such as the type of change, the old and new path, and the old and new name.</span></span> <span data-ttu-id="5966f-426">해당 <xref:System.IO.FileSystemEventArgs.Name> 속성에 대 한 일 수 있습니다 하는 경우 이벤트 이름을 바꿀는 <xref:System.IO.FileSystemWatcher> 일치 가져오기는 운영 체제에서 이전 이름과 새 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-426">Note that its <xref:System.IO.FileSystemEventArgs.Name> property may be null for renamed events if the <xref:System.IO.FileSystemWatcher> does not get matching old and new name events from the operating system.</span></span> 
  
 <span data-ttu-id="5966f-427">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-427">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="5966f-428">자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-428">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="5966f-429">재정의 하는 경우 <see cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" /> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5966f-429">When overriding <see cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" /> method.</span></span></para></block>
        <altmember cref="E:System.IO.FileSystemWatcher.Renamed" />
        <altmember cref="T:System.IO.RenamedEventArgs" />
        <altmember cref="T:System.IO.RenamedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Path : string with get, set" Usage="System.IO.FileSystemWatcher.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Diagnostics.Design.FSWPathEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;xamarinmac-3.0">
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.IO.IODescription("The directory to monitor")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Editor("System.Diagnostics.Design.FSWPathEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.IO.IODescription("FSW_Path")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Diagnostics.Design.FSWPathEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8">
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5966f-430">조사할 디렉터리의 경로를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-430">Gets or sets the path of the directory to watch.</span></span></summary>
        <value><span data-ttu-id="5966f-431">모니터링할 경로입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-431">The path to monitor.</span></span> <span data-ttu-id="5966f-432">기본값은 빈 문자열("")입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-432">The default is an empty string ("").</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5966f-433">디렉터리에 정규화 된 경로입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-433">This is a fully qualified path to a directory.</span></span> <span data-ttu-id="5966f-434">경우는 <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> 속성은 `true`,이 디렉터리는 루트는 시스템 변경 내용을 감시 하 고 그렇지 않으면 감시만 디렉터리입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-434">If the <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> property is `true`, this directory is the root at which the system watches for changes; otherwise it is the only directory watched.</span></span> <span data-ttu-id="5966f-435">특정 파일을 시청 하려면 설정 합니다 <xref:System.IO.FileSystemWatcher.Path%2A> 정규화, 올바른 디렉터리에 대 한 속성 및 <xref:System.IO.FileSystemWatcher.Filter%2A> 파일 이름에는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-435">To watch a specific file, set the <xref:System.IO.FileSystemWatcher.Path%2A> property to the fully qualified, correct directory, and the <xref:System.IO.FileSystemWatcher.Filter%2A> property to the file name.</span></span>  
  
 <span data-ttu-id="5966f-436"><xref:System.IO.FileSystemWatcher.Path%2A> 속성은 범용 명명 규칙 (UNC) 경로 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-436">The <xref:System.IO.FileSystemWatcher.Path%2A> property supports Universal Naming Convention (UNC) paths.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5966f-437">구성 변경 내용을 관찰할 수 있습니다이 속성을 설정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-437">This property must be set before the component can watch for changes.</span></span>  
  
 <span data-ttu-id="5966f-438">디렉터리의 이름이 변경 되는 <xref:System.IO.FileSystemWatcher> 자동으로 자체 이름을 새로 바꾼된 항목에 다시 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-438">When a directory is renamed, the <xref:System.IO.FileSystemWatcher> automatically reattaches itself to the newly renamed item.</span></span> <span data-ttu-id="5966f-439">예를 들어, 설정 하는 경우는 <xref:System.IO.FileSystemWatcher.Path%2A> 속성을 "C:\My 문서" 다음 "C:\Your Documents" 디렉터리를 수동으로 이름을, 구성 요소는 계속 새로 이름이 바뀐된 디렉터리에서 변경 알림을 수신 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-439">For example, if you set the <xref:System.IO.FileSystemWatcher.Path%2A> property to "C:\My Documents" and then manually rename the directory to "C:\Your Documents", the component continues listening for change notifications on the newly renamed directory.</span></span> <span data-ttu-id="5966f-440">그러나 요청 하면는 <xref:System.IO.FileSystemWatcher.Path%2A> 속성인 이전 경로가 포함 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-440">However, when you ask for the <xref:System.IO.FileSystemWatcher.Path%2A> property, it contains the old path.</span></span> <span data-ttu-id="5966f-441">조사할 디렉터리 구성 요소를 결정 하기 때문에 발생 하는이 디렉터리의 이름이 아니라 된 핸들에 기반 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-441">This happens because the component determines what directory watches based on the handle, rather than the name of the directory.</span></span> <span data-ttu-id="5966f-442">이름 바꾸기 핸들 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-442">Renaming does not affect the handle.</span></span> <span data-ttu-id="5966f-443">따라서 구성 요소를 삭제 하 고 다음 업데이트 하지 않고 다시 작성 하는 경우는 <xref:System.IO.FileSystemWatcher.Path%2A> 속성을 애플리케이션 디렉터리를 더 이상 존재 하기 때문에 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-443">So, if you destroy the component, and then recreate it without updating the <xref:System.IO.FileSystemWatcher.Path%2A> property, your application will fail because the directory no longer exists.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5966f-444">다음 예제에서는 <xref:System.IO.FileSystemWatcher> 런타임에 지정 된 디렉터리를 시청 하려면.</span><span class="sxs-lookup"><span data-stu-id="5966f-444">The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time.</span></span> <span data-ttu-id="5966f-445">구성 요소에서 변경 내용을 관찰할로 설정 되어 `LastWrite` 및 `LastAccess` 시간, 만들기, 삭제, 또는 디렉터리에 텍스트 파일의 이름을 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-445">The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory.</span></span> <span data-ttu-id="5966f-446">파일 변경, 생성 또는 삭제 하는 경우 콘솔에는 파일의 경로를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-446">If a file is changed, created, or deleted, the path to the file prints to the console.</span></span> <span data-ttu-id="5966f-447">파일의 이름을 바꿀 때 이전 및 새 경로 콘솔에 인쇄 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-447">When a file is renamed, the old and new paths print to the console.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5966f-448">지정된 경로가 없거나 찾지 못한 경우</span><span class="sxs-lookup"><span data-stu-id="5966f-448">The specified path does not exist or could not be found.</span></span>  
  
<span data-ttu-id="5966f-449">또는</span><span class="sxs-lookup"><span data-stu-id="5966f-449">-or-</span></span> 
<span data-ttu-id="5966f-450">지정된 경로에 와일드카드 문자가 포함되어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="5966f-450">The specified path contains wildcard characters.</span></span>  
  
<span data-ttu-id="5966f-451">또는</span><span class="sxs-lookup"><span data-stu-id="5966f-451">-or-</span></span> 
<span data-ttu-id="5966f-452">지정된 경로에 잘못된 경로 문자가 포함되어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="5966f-452">The specified path contains invalid path characters.</span></span></exception>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
      </Docs>
    </Member>
    <Member MemberName="Renamed">
      <MemberSignature Language="C#" Value="public event System.IO.RenamedEventHandler Renamed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.IO.RenamedEventHandler Renamed" />
      <MemberSignature Language="DocId" Value="E:System.IO.FileSystemWatcher.Renamed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Renamed As RenamedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::IO::RenamedEventHandler ^ Renamed;" />
      <MemberSignature Language="F#" Value="member this.Renamed : System.IO.RenamedEventHandler " Usage="member this.Renamed : System.IO.RenamedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.IO.IODescription("Occurs when a file/directory rename matches the filter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.IO.IODescription("FSW_Renamed")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.RenamedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5966f-453">지정된 <see cref="P:System.IO.FileSystemWatcher.Path" />에 있는 파일이나 디렉터리의 이름이 바뀔 경우에 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-453">Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is renamed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5966f-454">합니다 `Renamed` 이벤트는는 <xref:System.IO.RenamedEventHandler> 다음과 같은 시그니처가 있는 대리자:</span><span class="sxs-lookup"><span data-stu-id="5966f-454">The `Renamed` event is an <xref:System.IO.RenamedEventHandler> delegate that has the following signature:</span></span>

 ```csharp
public delegate void Renamed(object sender, RenamedEventArgs e);
 ```
 ```vb
Public Delegate Sub RenamedEventHandler(sender As Object, e As RenamedEventArgs)
 ```
 <span data-ttu-id="5966f-455"><xref:System.IO.RenamedEventArgs> 이름 바꾸기의 형식과 같은 이름 바꾸기 작업을 하는 방법에 대 한 정보를 제공 하는 개체 (는 <xref:System.IO.FileSystemEventArgs.ChangeType> 속성), 이전 및 새 이름이 고, 이전 및 새 경로입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-455">The <xref:System.IO.RenamedEventArgs> object provides information about the renaming operation, such as the type of the rename (the <xref:System.IO.FileSystemEventArgs.ChangeType> property), the old and new name, and the old and new path.</span></span> <span data-ttu-id="5966f-456"><xref:System.IO.FileSystemEventArgs.Name> 속성에 대 한 일 수 있습니다 하는 경우 이벤트 이름을 바꿀는 <xref:System.IO.FileSystemWatcher> 일치 가져오기는 운영 체제에서 이전 이름과 새 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-456">Note that the <xref:System.IO.FileSystemEventArgs.Name> property may be null for renamed events if the <xref:System.IO.FileSystemWatcher> does not get matching old and new name events from the operating system.</span></span>

 <span data-ttu-id="5966f-457">감시 하는 디렉터리의 이름을 바꾸는 알림이 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-457">Renaming the directory you are watching will not raise a notification.</span></span> <span data-ttu-id="5966f-458">알림은 감시 하는 디렉터리 내의 항목에 대해서만 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-458">Notifications are only raised for entries inside the directory you are watching.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5966f-459">다음 예제에서는 <xref:System.IO.FileSystemWatcher.Renamed> 이벤트를 감시 파일 이름을 바꿀 때마다 콘솔 파일 경로 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-459">The following example uses the <xref:System.IO.FileSystemWatcher.Renamed> event to display the file path to the console whenever the watched file is renamed.</span></span>  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" />
        <altmember cref="P:System.IO.FileSystemWatcher.SynchronizingObject" />
        <altmember cref="P:System.IO.FileSystemWatcher.Path" />
        <altmember cref="T:System.IO.RenamedEventArgs" />
        <altmember cref="T:System.IO.RenamedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Site : System.ComponentModel.ISite with get, set" Usage="System.IO.FileSystemWatcher.Site" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5966f-460"><see cref="T:System.ComponentModel.ISite" />에 대한 <see cref="T:System.IO.FileSystemWatcher" />를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-460">Gets or sets an <see cref="T:System.ComponentModel.ISite" /> for the <see cref="T:System.IO.FileSystemWatcher" />.</span></span></summary>
        <value><span data-ttu-id="5966f-461"><see cref="T:System.ComponentModel.ISite" />에 대한 <see cref="T:System.IO.FileSystemWatcher" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-461">An <see cref="T:System.ComponentModel.ISite" /> for the <see cref="T:System.IO.FileSystemWatcher" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5966f-462">사이트 바인딩를 <xref:System.ComponentModel.Component> 에 <xref:System.ComponentModel.Design.IDesignerHost.Container%2A> 서로 통신할 수 있도록 할 뿐만 아니라 컨테이너에서 해당 구성 요소를 관리할 수 있는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-462">Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Design.IDesignerHost.Container%2A> and enable communication between them, as well as provide a way for the container to manage its components.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SynchronizingObject">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISynchronizeInvoke SynchronizingObject" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.SynchronizingObject" />
      <MemberSignature Language="VB.NET" Value="Public Property SynchronizingObject As ISynchronizeInvoke" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::ISynchronizeInvoke ^ SynchronizingObject { System::ComponentModel::ISynchronizeInvoke ^ get(); void set(System::ComponentModel::ISynchronizeInvoke ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizingObject : System.ComponentModel.ISynchronizeInvoke with get, set" Usage="System.IO.FileSystemWatcher.SynchronizingObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.IO.IODescription("The object used to marshal the event handler calls resulting from a directory change")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.IO.IODescription("FSW_SynchronizingObject")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISynchronizeInvoke</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5966f-463">디렉터리를 변경한 결과로 발생되는 이벤트 처리기 호출을 마샬링하는 데 사용되는 개체를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-463">Gets or sets the object used to marshal the event handler calls issued as a result of a directory change.</span></span></summary>
        <value><span data-ttu-id="5966f-464">디렉터리를 변경한 결과로 발생되는 이벤트 처리기 호출을 마샬링하는 데 사용되는 개체를 나타내는 <see cref="T:System.ComponentModel.ISynchronizeInvoke" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-464">The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> that represents the object used to marshal the event handler calls issued as a result of a directory change.</span></span> <span data-ttu-id="5966f-465">기본값은 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-465">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5966f-466">때 <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> 은 `null`를 처리 하는 메서드가 합니다 <xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, 및 <xref:System.IO.FileSystemWatcher.Renamed> 이벤트 시스템 스레드 풀의 스레드에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-466">When <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> is `null`, methods handling the <xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, and <xref:System.IO.FileSystemWatcher.Renamed> events are called on a thread from the system thread pool.</span></span> <span data-ttu-id="5966f-467">시스템 스레드 풀에 대 한 자세한 내용은 참조 하세요. <xref:System.Threading.ThreadPool>합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-467">For more information on system thread pools, see <xref:System.Threading.ThreadPool>.</span></span>  
  
 <span data-ttu-id="5966f-468">경우는 <xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, 및 <xref:System.IO.FileSystemWatcher.Renamed> 이벤트와 같은 visual Windows Forms 구성 요소에 의해 처리 됩니다는 <xref:System.Windows.Forms.Button>, 시스템 스레드 풀을 통해 구성 요소를 액세스 작동 하지 않을 수 있습니다 또는 예외가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-468">When the <xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, and <xref:System.IO.FileSystemWatcher.Renamed> events are handled by a visual Windows Forms component, such as a <xref:System.Windows.Forms.Button>, accessing the component through the system thread pool might not work, or may result in an exception.</span></span> <span data-ttu-id="5966f-469">설정 하 여이 문제를 방지 <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> 메서드를 처리 하는 경우 Windows Forms 구성 요소에 <xref:System.IO.FileSystemWatcher.Changed>를 <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, 및 <xref:System.IO.FileSystemWatcher.Renamed> 구성 요소를 만든 동일한 스레드에서 호출 되는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-469">Avoid this by setting <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> to a Windows Forms component, which causes the methods that handle the <xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, and <xref:System.IO.FileSystemWatcher.Renamed> events to be called on the same thread on which the component was created.</span></span>  
  
 <span data-ttu-id="5966f-470">경우는 <xref:System.IO.FileSystemWatcher> 내에서 사용 되 [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] Windows Forms 디자이너에서 <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> 포함 된 컨트롤에 자동으로 설정 된 <xref:System.IO.FileSystemWatcher>.</span><span class="sxs-lookup"><span data-stu-id="5966f-470">If the <xref:System.IO.FileSystemWatcher> is used inside [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] in a Windows Forms designer, <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> automatically sets to the control that contains the <xref:System.IO.FileSystemWatcher>.</span></span> <span data-ttu-id="5966f-471">예를 들어, 배치 하는 경우는 <xref:System.IO.FileSystemWatcher> form1 디자이너에서 (에서 상속 하는 <xref:System.Windows.Forms.Form>)를 <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> 속성의 <xref:System.IO.FileSystemWatcher> Form1의 인스턴스로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-471">For example, if you place a <xref:System.IO.FileSystemWatcher> on a designer for Form1 (which inherits from <xref:System.Windows.Forms.Form>) the <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> property of <xref:System.IO.FileSystemWatcher> is set to the instance of Form1.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.ISynchronizeInvoke" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitForChanged">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5966f-472">발생한 변경 내용에 대한 특정 정보를 포함하는 구조를 반환하는 동기 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-472">A synchronous method that returns a structure that contains specific information on the change that occurred.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitForChanged">
      <MemberSignature Language="C#" Value="public System.IO.WaitForChangedResult WaitForChanged (System.IO.WatcherChangeTypes changeType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.IO.WaitForChangedResult WaitForChanged(valuetype System.IO.WatcherChangeTypes changeType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForChanged (changeType As WatcherChangeTypes) As WaitForChangedResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::WaitForChangedResult WaitForChanged(System::IO::WatcherChangeTypes changeType);" />
      <MemberSignature Language="F#" Value="member this.WaitForChanged : System.IO.WatcherChangeTypes -&gt; System.IO.WaitForChangedResult" Usage="fileSystemWatcher.WaitForChanged changeType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.WaitForChangedResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeType" Type="System.IO.WatcherChangeTypes" />
      </Parameters>
      <Docs>
        <param name="changeType"><span data-ttu-id="5966f-473">조사할 <see cref="T:System.IO.WatcherChangeTypes" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-473">The <see cref="T:System.IO.WatcherChangeTypes" /> to watch for.</span></span></param>
        <summary><span data-ttu-id="5966f-474">모니터링할 변경 내용 형식이 제공된 경우에, 발생한 변경 내용에 대한 특정 정보를 포함하는 구조를 반환하는 동기 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-474">A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor.</span></span></summary>
        <returns><span data-ttu-id="5966f-475">발생한 변경 내용에 대한 특정 정보를 포함하는 <see cref="T:System.IO.WaitForChangedResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-475">A <see cref="T:System.IO.WaitForChangedResult" /> that contains specific information on the change that occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5966f-476">이 메서드는 발생 하 고 다음을 반환 하는 첫 번째 변경 때까지 무기한 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-476">This method waits indefinitely until the first change occurs and then returns.</span></span> <span data-ttu-id="5966f-477">이 사용 하 여 동일 <xref:System.IO.FileSystemWatcher.WaitForChanged%2A> 사용 하 여는 `timeout` 매개 변수가-1로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-477">This is the same as using <xref:System.IO.FileSystemWatcher.WaitForChanged%2A> with the `timeout` parameter set to -1.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5966f-478">이 메서드를 사용 하면 파일 변경 하더라도에 응답할 때 호출할 이벤트 처리기를 <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> 속성이 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-478">This method allows an event handler to be invoked to respond to file changes even if the <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> property is set to `false`.</span></span>  
  
 <span data-ttu-id="5966f-479">일부 시스템에서는 <xref:System.IO.FileSystemWatcher> 짧은 8.3 파일 이름 형식으로 사용 하 여 파일 변경 내용을 보고 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-479">In some systems, <xref:System.IO.FileSystemWatcher> reports changes to files using the short 8.3 file name format.</span></span> <span data-ttu-id="5966f-480">"LongFileName.LongExtension"에 대 한 변경으로 보고 될 수 있습니다 예를 들어, "LongFi ~입니다. "경도</span><span class="sxs-lookup"><span data-stu-id="5966f-480">For example, a change to  "LongFileName.LongExtension" could be reported as "LongFi~.Lon".</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.WaitForChangedResult" />
      </Docs>
    </Member>
    <Member MemberName="WaitForChanged">
      <MemberSignature Language="C#" Value="public System.IO.WaitForChangedResult WaitForChanged (System.IO.WatcherChangeTypes changeType, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.IO.WaitForChangedResult WaitForChanged(valuetype System.IO.WatcherChangeTypes changeType, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForChanged (changeType As WatcherChangeTypes, timeout As Integer) As WaitForChangedResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::WaitForChangedResult WaitForChanged(System::IO::WatcherChangeTypes changeType, int timeout);" />
      <MemberSignature Language="F#" Value="member this.WaitForChanged : System.IO.WatcherChangeTypes * int -&gt; System.IO.WaitForChangedResult" Usage="fileSystemWatcher.WaitForChanged (changeType, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.WaitForChangedResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeType" Type="System.IO.WatcherChangeTypes" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="changeType"><span data-ttu-id="5966f-481">조사할 <see cref="T:System.IO.WatcherChangeTypes" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-481">The <see cref="T:System.IO.WatcherChangeTypes" /> to watch for.</span></span></param>
        <param name="timeout"><span data-ttu-id="5966f-482">제한 시간 범위 내에서 대기할 시간(밀리초)입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-482">The time (in milliseconds) to wait before timing out.</span></span></param>
        <summary><span data-ttu-id="5966f-483">모니터링할 변경 내용 형식과 제한 시간 범위 내에서 대기할 시간(밀리초)이 제공된 경우에, 발생한 변경 내용에 대한 특정 정보를 포함하는 구조를 반환하는 동기 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-483">A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor and the time (in milliseconds) to wait before timing out.</span></span></summary>
        <returns><span data-ttu-id="5966f-484">발생한 변경 내용에 대한 특정 정보를 포함하는 <see cref="T:System.IO.WaitForChangedResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-484">A <see cref="T:System.IO.WaitForChangedResult" /> that contains specific information on the change that occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5966f-485">이 메서드는 변경이 발생 하거나 시간이 초과 될 때까지 대기 합니다. 값이-1은 `timeout` 매개 변수는 무기한 대기를 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-485">This method waits until a change occurs or it has timed out. A value of -1 for the `timeout` parameter means wait indefinitely.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5966f-486">이 메서드를 사용 하면 파일 변경 하더라도에 응답할 때 호출할 이벤트 처리기를 <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> 속성이 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-486">This method allows an event handler to be invoked to respond to file changes even if the <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> property is set to `false`.</span></span>  
  
 <span data-ttu-id="5966f-487">일부 시스템에서는 <xref:System.IO.FileSystemWatcher> 짧은 8.3 파일 이름 형식으로 사용 하 여 파일 변경 내용을 보고 합니다.</span><span class="sxs-lookup"><span data-stu-id="5966f-487">In some systems, <xref:System.IO.FileSystemWatcher> reports changes to files using the short 8.3 file name format.</span></span> <span data-ttu-id="5966f-488">"LongFileName.LongExtension"에 대 한 변경으로 보고 될 수 있습니다 예를 들어, "LongFi ~입니다. "경도</span><span class="sxs-lookup"><span data-stu-id="5966f-488">For example, a change to  "LongFileName.LongExtension" could be reported as "LongFi~.Lon".</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.WaitForChangedResult" />
      </Docs>
    </Member>
  </Members>
</Type>