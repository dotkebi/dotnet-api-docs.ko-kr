<Type Name="IQueryable&lt;T&gt;" FullName="System.Linq.IQueryable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="94591eb679e306791135ec572f82d3e35573ab2e" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58694484" /></Metadata><TypeSignature Language="C#" Value="public interface IQueryable&lt;out T&gt; : System.Collections.Generic.IEnumerable&lt;out T&gt;, System.Linq.IQueryable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IQueryable`1&lt;+ T&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable, class System.Linq.IQueryable" />
  <TypeSignature Language="DocId" Value="T:System.Linq.IQueryable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IQueryable(Of Out T)&#xA;Implements IEnumerable(Of Out T), IQueryable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IQueryable : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Linq::IQueryable" />
  <TypeSignature Language="F#" Value="type IQueryable&lt;'T&gt; = interface&#xA;    interface seq&lt;'T&gt;&#xA;    interface IQueryable&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T"><span data-ttu-id="f48cc-101">데이터 소스의 데이터 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="f48cc-101">The type of the data in the data source.</span></span></typeparam>
    <summary><span data-ttu-id="f48cc-102">데이터 형식이 알려진 특정 데이터 소스에 대한 쿼리를 실행하는 기능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="f48cc-102">Provides functionality to evaluate queries against a specific data source wherein the type of the data is known.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f48cc-103"><xref:System.Linq.IQueryable%601> 쿼리 공급자가 인터페이스 구현 하기 위한 것입니다.</span><span class="sxs-lookup"><span data-stu-id="f48cc-103">The <xref:System.Linq.IQueryable%601> interface is intended for implementation by query providers.</span></span>  
  
 <span data-ttu-id="f48cc-104">이 인터페이스가 상속 된 <xref:System.Collections.Generic.IEnumerable%601> 인터페이스는 쿼리를 나타내는 경우 해당 쿼리의 결과 열거할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="f48cc-104">This interface inherits the <xref:System.Collections.Generic.IEnumerable%601> interface so that if it represents a query, the results of that query can be enumerated.</span></span> <span data-ttu-id="f48cc-105">열거를 수행 하면 연결 된 식 트리는 <xref:System.Linq.IQueryable%601> 실행할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f48cc-105">Enumeration forces the expression tree associated with an <xref:System.Linq.IQueryable%601> object to be executed.</span></span> <span data-ttu-id="f48cc-106">열거 가능한 결과 반환 하지 않는 쿼리를 실행 하는 경우는 <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> 메서드는 합니다.</span><span class="sxs-lookup"><span data-stu-id="f48cc-106">Queries that do not return enumerable results are executed when the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method is called.</span></span>  
  
 <span data-ttu-id="f48cc-107">"는 식 트리 실행" 정의 쿼리 공급자와 관련이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f48cc-107">The definition of "executing an expression tree" is specific to a query provider.</span></span> <span data-ttu-id="f48cc-108">예를 들어, 식 트리는 기본 데이터 원본에 대 한 적절 한 쿼리 언어로 변환 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f48cc-108">For example, it may involve translating the expression tree to a query language appropriate for an underlying data source.</span></span>  
  
 <span data-ttu-id="f48cc-109"><xref:System.Linq.IQueryable%601> 인터페이스 다형 되도록 쿼리를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="f48cc-109">The <xref:System.Linq.IQueryable%601> interface enables queries to be polymorphic.</span></span> <span data-ttu-id="f48cc-110">즉, 때문에 대 한 쿼리는 `IQueryable` 데이터 소스 식 트리로 표시 됩니다, 다른 유형의 데이터 원본에 대해 실행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f48cc-110">That is, because a query against an `IQueryable` data source is represented as an expression tree, it can be executed against different types of data sources.</span></span>  
  
 <span data-ttu-id="f48cc-111">`static` (`Shared` Visual Basic에서) 클래스에 정의 된 메서드 <xref:System.Linq.Queryable> (제외 하 고 <xref:System.Linq.Queryable.AsQueryable%2A>, <xref:System.Linq.Queryable.ThenBy%2A>, 및 <xref:System.Linq.Queryable.ThenByDescending%2A>) 구현 하는 형식의 개체를 확장 하는 <xref:System.Linq.IQueryable%601> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="f48cc-111">The `static` (`Shared` in Visual Basic) methods defined in the class <xref:System.Linq.Queryable> (except for <xref:System.Linq.Queryable.AsQueryable%2A>, <xref:System.Linq.Queryable.ThenBy%2A>, and <xref:System.Linq.Queryable.ThenByDescending%2A>) extend objects of types that implement the <xref:System.Linq.IQueryable%601> interface.</span></span>  
  
 <span data-ttu-id="f48cc-112">사용자 고유의 LINQ 공급자를 만드는 방법에 대 한 자세한 내용은 참조 하세요. [LINQ: IQueryable 공급자 빌드](https://go.microsoft.com/fwlink/?LinkID=112370) on MSDN 블로그.</span><span class="sxs-lookup"><span data-stu-id="f48cc-112">For more information about how to create your own LINQ provider, see [LINQ: Building an IQueryable Provider](https://go.microsoft.com/fwlink/?LinkID=112370) on MSDN Blogs.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Linq.Queryable" />
  </Docs>
  <Members />
</Type>