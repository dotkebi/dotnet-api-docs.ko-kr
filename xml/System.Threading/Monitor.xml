<Type Name="Monitor" FullName="System.Threading.Monitor">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a64388618647a3dd8b7bcaeb6947b0859c86418b" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58707431" /></Metadata><TypeSignature Language="C#" Value="public static class Monitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Monitor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Monitor" />
  <TypeSignature Language="VB.NET" Value="Public Class Monitor" />
  <TypeSignature Language="C++ CLI" Value="public ref class Monitor abstract sealed" />
  <TypeSignature Language="F#" Value="type Monitor = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="bea42-101">개체에 대한 액세스를 동기화하는 메커니즘을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-101">Provides a mechanism that synchronizes access to objects.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bea42-102">합니다 <xref:System.Threading.Monitor> 클래스를 사용 하면 가져오고 호출 하 여 특정 개체에 대 한 잠금을 해제 하 여 코드의 영역에 대 한 액세스를 동기화 할 수는 <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>, 및 <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="bea42-102">The <xref:System.Threading.Monitor> class allows you to synchronize access to a region of code by taking and releasing a lock on a particular object by calling the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>, and <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="bea42-103">개체 잠금 일반적으로 중요 섹션을 라고 하는 코드의 블록에 대 한 액세스를 제한 하는 기능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-103">Object locks provide the ability to restrict access to a block of code, commonly called a critical section.</span></span> <span data-ttu-id="bea42-104">스레드 개체에 대 한 잠금의 소유 하는 동안 다른 스레드가 잠금을 획득할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-104">While a thread owns the lock for an object, no other thread can acquire that lock.</span></span> <span data-ttu-id="bea42-105">사용할 수도 있습니다는 <xref:System.Threading.Monitor> 다른 스레드가 응용 프로그램의 섹션에 액세스할 수 있는지 확인 하는 클래스 잠금 소유자에 의해 실행 되 고 다른 스레드가 잠겨 있는 다른 개체를 사용 하는 코드를 실행 중인 경우가 아니면 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-105">You can also use the <xref:System.Threading.Monitor> class to ensure that no other thread is allowed to access a section of application code being executed by the lock owner, unless the other thread is executing the code using a different locked object.</span></span>  
  
 <span data-ttu-id="bea42-106">이 문서의 내용</span><span class="sxs-lookup"><span data-stu-id="bea42-106">In this article:</span></span>  
  
 <span data-ttu-id="bea42-107">[Monitor 클래스: 개요](#Overview) </span><span class="sxs-lookup"><span data-stu-id="bea42-107">[The Monitor class: An overview](#Overview) </span></span>  
 <span data-ttu-id="bea42-108">[잠금 개체](#Lock) </span><span class="sxs-lookup"><span data-stu-id="bea42-108">[The lock object](#Lock) </span></span>  
 <span data-ttu-id="bea42-109">[중요 섹션](#CriticalSection) </span><span class="sxs-lookup"><span data-stu-id="bea42-109">[The critical section](#CriticalSection) </span></span>  
 <span data-ttu-id="bea42-110">[Pulse, PulseAll, 및 대기](#Pulse) </span><span class="sxs-lookup"><span data-stu-id="bea42-110">[Pulse, PulseAll, and Wait](#Pulse) </span></span>  
 [<span data-ttu-id="bea42-111">모니터 및 대기 핸들</span><span class="sxs-lookup"><span data-stu-id="bea42-111">Monitors and wait handles</span></span>](#WaitHandles)  
  
<a name="Overview"></a>   
## <a name="the-monitor-class-an-overview"></a><span data-ttu-id="bea42-112">Monitor 클래스: 개요</span><span class="sxs-lookup"><span data-stu-id="bea42-112">The Monitor class: An overview</span></span>  
 <span data-ttu-id="bea42-113"><xref:System.Threading.Monitor> 에 다음 기능이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-113"><xref:System.Threading.Monitor> has the following features:</span></span>  
  
-   <span data-ttu-id="bea42-114">필요에 따라 개체를 사용 하 여 연결 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-114">It is associated with an object on demand.</span></span>  
  
-   <span data-ttu-id="bea42-115">바인딩 해제 되어 있으므로 모든 컨텍스트에서 직접 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-115">It is unbound, which means it can be called directly from any context.</span></span>  
  
-   <span data-ttu-id="bea42-116">인스턴스를 <xref:System.Threading.Monitor> 클래스를 만들 수 없습니다;의 메서드는 <xref:System.Threading.Monitor> 클래스는 모두 정적입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-116">An instance of the <xref:System.Threading.Monitor> class cannot be created; the methods of the <xref:System.Threading.Monitor> class are all static.</span></span> <span data-ttu-id="bea42-117">각 메서드를 액세스를 제어 하는 동기화 개체를 전달 하는 중요 섹션에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-117">Each method is passed the synchronized object that controls access to the critical section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bea42-118">사용 하 여는 <xref:System.Threading.Monitor> 문자열 이외의 잠금 개체 클래스 (참조 이므로 이외의 형식 <xref:System.String>), 값 형식이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-118">Use the <xref:System.Threading.Monitor> class to lock objects other than strings (that is, reference types other than <xref:System.String>), not value types.</span></span> <span data-ttu-id="bea42-119">자세한 내용은의 오버 로드를 참조 합니다 <xref:System.Threading.Monitor.Enter%2A> 메서드 및 [잠금 개체](#Lock) 이 문서의 뒷부분에 나오는 섹션입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-119">For details, see the overloads of the <xref:System.Threading.Monitor.Enter%2A> method and [The lock object](#Lock) section later in this article.</span></span>  
  
 <span data-ttu-id="bea42-120">다음 표에서 동기화 된 개체에 액세스 하는 스레드에서 수행할 수 있는 작업을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-120">The following table describes the actions that can be taken by threads that access synchronized objects:</span></span>  
  
|<span data-ttu-id="bea42-121">작업</span><span class="sxs-lookup"><span data-stu-id="bea42-121">Action</span></span>|<span data-ttu-id="bea42-122">설명</span><span class="sxs-lookup"><span data-stu-id="bea42-122">Description</span></span>|  
|------------|-----------------|  
|<span data-ttu-id="bea42-123"><xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A></span><span class="sxs-lookup"><span data-stu-id="bea42-123"><xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A></span></span>|<span data-ttu-id="bea42-124">개체에 대 한 잠금을 획득합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-124">Acquires a lock for an object.</span></span> <span data-ttu-id="bea42-125">중요 섹션의 시작 부분을 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-125">This action also marks the beginning of a critical section.</span></span> <span data-ttu-id="bea42-126">잠겨 있는 다른 개체를 사용 하 여 임계 영역에 있는 지침을 실행 하는 경우가 아니면 다른 스레드가 중요 섹션을 입력할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-126">No other thread can enter the critical section unless it is executing the instructions in the critical section using a different locked object.</span></span>|  
|<xref:System.Threading.Monitor.Wait%2A>|<span data-ttu-id="bea42-127">다른 스레드가 잠금 개체에 액세스를 허용 하기 위해 개체에 대 한 잠금을 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-127">Releases the lock on an object in order to permit other threads to lock and access the object.</span></span> <span data-ttu-id="bea42-128">호출 스레드가 다른 스레드가 개체에 액세스 하는 동안 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-128">The calling thread waits while another thread accesses the object.</span></span> <span data-ttu-id="bea42-129">Pulse 신호 개체의 상태 변경에 대 한 대기 중인 스레드를 알리는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-129">Pulse signals are used to notify waiting threads about changes to an object's state.</span></span>|  
|<span data-ttu-id="bea42-130"><xref:System.Threading.Monitor.Pulse%2A> (신호) <xref:System.Threading.Monitor.PulseAll%2A></span><span class="sxs-lookup"><span data-stu-id="bea42-130"><xref:System.Threading.Monitor.Pulse%2A> (signal), <xref:System.Threading.Monitor.PulseAll%2A></span></span>|<span data-ttu-id="bea42-131">하나 이상의 대기 스레드는 신호를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-131">Sends a signal to one or more waiting threads.</span></span> <span data-ttu-id="bea42-132">신호 잠긴된 개체의 상태 변경 대기 스레드를 알리고 잠금 소유자가 잠금을 해제 하는 준비 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-132">The signal notifies a waiting thread that the state of the locked object has changed, and the owner of the lock is ready to release the lock.</span></span> <span data-ttu-id="bea42-133">개체에 대 한 잠금을 받을 수 있도록 대기 중인 스레드 개체의 준비 된 큐에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-133">The waiting thread is placed in the object's ready queue so that it might eventually receive the lock for the object.</span></span> <span data-ttu-id="bea42-134">스레드가 잠금에 되 면 필요한 상태에 도달한 경우 참조 개체의 새 상태를 확인해 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-134">Once the thread has the lock, it can check the new state of the object to see if the required state has been reached.</span></span>|  
|<xref:System.Threading.Monitor.Exit%2A>|<span data-ttu-id="bea42-135">개체에 대 한 잠금을 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-135">Releases the lock on an object.</span></span> <span data-ttu-id="bea42-136">잠긴된 개체에 의해 보호 되는 중요 섹션의 끝을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-136">This action also marks the end of a critical section protected by the locked object.</span></span>|  
  
 <span data-ttu-id="bea42-137">부터는 합니다 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]를 오버 로드에 대 한 두 가지를 <xref:System.Threading.Monitor.Enter%2A> 및 <xref:System.Threading.Monitor.TryEnter%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="bea42-137">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], there are two sets of overloads for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.TryEnter%2A> methods.</span></span> <span data-ttu-id="bea42-138">오버 로드 중 하나의 집합에는 `ref` (C#에서) 또는 `ByRef` (Visual Basic)에서는 <xref:System.Boolean> 원자적으로 설정 된 매개 변수 `true` 경우 잠금을 획득, 잠금을 획득할 때 예외가 발생 하는 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-138">One set of overloads has a `ref` (in C#) or `ByRef` (in Visual Basic) <xref:System.Boolean> parameter that is atomically set to `true` if the lock is acquired, even if an exception is thrown when acquiring the lock.</span></span> <span data-ttu-id="bea42-139">잠금을 해제 하는 모든 경우에 일관 된 상태로 리소스 잠금을 보호 하지 않을 경우에 중요 한 경우 이러한 오버 로드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-139">Use these overloads if it is critical to release the lock in all cases, even when the resources the lock is protecting might not be in a consistent state.</span></span>  
  
<a name="Lock"></a>   
## <a name="the-lock-object"></a><span data-ttu-id="bea42-140">잠금 개체</span><span class="sxs-lookup"><span data-stu-id="bea42-140">The lock object</span></span>  
 <span data-ttu-id="bea42-141">Monitor 클래스 이루어져 `static` (C#에서) 또는 `Shared` (Visual Basic)에서는 중요 섹션에 액세스를 제어 하는 개체에 대해 작동 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="bea42-141">The Monitor class consists of `static` (in C#) or  `Shared` (in Visual Basic) methods that operate on an object that controls access to the critical section.</span></span>  <span data-ttu-id="bea42-142">다음 정보를 동기화 된 각 개체는 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-142">The following information is maintained for each synchronized object:</span></span>  
  
-   <span data-ttu-id="bea42-143">현재 잠금을 보유 하는 스레드에 대 한 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-143">A reference to the thread that currently holds the lock.</span></span>  
  
-   <span data-ttu-id="bea42-144">잠금을 획득할 수 있는 스레드가 포함 된 준비 큐에 대 한 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-144">A reference to a ready queue, which contains the threads that are ready to obtain the lock.</span></span>  
  
-   <span data-ttu-id="bea42-145">잠긴된 개체의 상태 변경에 대 한 알림을 대기 중인 스레드를 포함 하는 대기 중인 큐에 대 한 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-145">A reference to a waiting queue, which contains the threads that are waiting for notification of a change in the state of the locked object.</span></span>  
  
 <span data-ttu-id="bea42-146"><xref:System.Threading.Monitor>는 값 형식이 아니라 개체(즉, 참조 형식)를 잠급니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-146"><xref:System.Threading.Monitor> locks objects (that is, reference types), not value types.</span></span> <span data-ttu-id="bea42-147"><xref:System.Threading.Monitor.Enter%2A> 및 <xref:System.Threading.Monitor.Exit%2A>에 값 형식을 전달할 수 있지만 각 호출에 대해 개별적으로 boxing됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-147">While you can pass a value type to <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, it is boxed separately for each call.</span></span> <span data-ttu-id="bea42-148">호출마다 별도 개체를 만들기 때문에 <xref:System.Threading.Monitor.Enter%2A>가 차단되지 않으며, 보호하는 코드가 동기화되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-148">Since each call creates a separate object, <xref:System.Threading.Monitor.Enter%2A> never blocks, and the code it is supposedly protecting is not really synchronized.</span></span> <span data-ttu-id="bea42-149">또한 <xref:System.Threading.Monitor.Exit%2A>에 전달되는 개체는 <xref:System.Threading.Monitor.Enter%2A>에 전달되는 개체와 다르므로 <xref:System.Threading.Monitor>에서 <xref:System.Threading.SynchronizationLockException> 예외가 발생하고 "비동기화된 코드 블록에서 개체 동기화 메서드를 호출했습니다." 메시지가 표시됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-149">In addition, the object passed to <xref:System.Threading.Monitor.Exit%2A> is different from the object passed to <xref:System.Threading.Monitor.Enter%2A>, so <xref:System.Threading.Monitor> throws <xref:System.Threading.SynchronizationLockException> exception with the message "Object synchronization method was called from an unsynchronized block of code."</span></span>  
  
 <span data-ttu-id="bea42-150">다음 예제에서는 이 문제를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-150">The following example illustrates this problem.</span></span> <span data-ttu-id="bea42-151">각각 250밀리초 동안 대기하는 10개 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-151">It launches ten tasks, each of which just sleeps for 250 milliseconds.</span></span> <span data-ttu-id="bea42-152">각 작업은 실제로 시작 및 실행된 작업 수를 계산하기 위한 카운터 변수 `nTasks`를 업데이트합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-152">Each task then updates a counter variable, `nTasks`, which is intended to count the number of tasks that actually launched and executed.</span></span> <span data-ttu-id="bea42-153">`nTasks`는 동시에 여러 작업에서 업데이트될 수 있는 전역 변수이기 때문에 모니터를 사용하여 여러 작업에서 동시에 수정되지 않도록 보호합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-153">Because `nTasks` is a global variable that can be updated by multiple tasks simultaneously, a monitor is used to protect it from simultaneous modification by multiple tasks.</span></span> <span data-ttu-id="bea42-154">그러나 예제의 출력과 같이 각 작업에서 <xref:System.Threading.SynchronizationLockException> 예외가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-154">However, as the output from the example shows, each of the tasks throws a <xref:System.Threading.SynchronizationLockException> exception.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#2](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badlock1.cs#2)]
 [!code-vb[Conceptual.Monitors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badlock1.vb#2)]  
  
 <span data-ttu-id="bea42-155">각 작업의 <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> 메서드 호출 전에 `nTasks` 변수가 boxing되므로 각 작업에서 <xref:System.Threading.SynchronizationLockException> 예외가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-155">Each task throws a <xref:System.Threading.SynchronizationLockException> exception because the `nTasks` variable is boxed before the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> method in each task.</span></span> <span data-ttu-id="bea42-156">즉, 각 메서드 호출에 서로 독립적인 개별 변수가 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-156">In other words, each method call is passed a separate variable that is independent of the others.</span></span> <span data-ttu-id="bea42-157">`nTasks`는 <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> 메서드 호출에서 다시 boxing됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-157">`nTasks` is boxed again in the call to the <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="bea42-158">이렇게 하면 다시 서로 독립적인 새 boxed 변수 10개, `nTasks` 및 <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> 메서드 호출에서 생성되는 boxed 변수 10개가 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-158">Once again, this creates ten new boxed variables, which are independent of each other, `nTasks`, and the ten boxed variables created in the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="bea42-159">코드에서 이전에 잠기지 않은 새로 만든 변수에 대한 잠금을 해제하려고 하기 때문에 예외가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-159">The exception is thrown, then, because our code is attempting to release a lock on a newly created variable that was not previously locked.</span></span>  
  
 <span data-ttu-id="bea42-160">다음 예제와 같이 <xref:System.Threading.Monitor.Enter%2A> 및 <xref:System.Threading.Monitor.Exit%2A>를 호출하기 전에 값 형식 변수를 boxing하고 boxing된 동일한 개체를 두 메서드에 모두 전달할 수 있지만 아무 이점이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-160">Although you can box a value type variable before calling <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, as shown in the following example, and pass the same boxed object to both methods, there is no advantage to doing this.</span></span> <span data-ttu-id="bea42-161">boxing되지 않은 변수의 변경 내용은 boxing된 복사본에 반영되지 않으며, boxing된 복사본의 값을 변경할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-161">Changes to the unboxed variable are not reflected in the boxed copy, and there is no way to change the value of the boxed copy.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#3](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badbox1.cs#3)]
 [!code-vb[Conceptual.Monitors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badbox1.vb#3)]  
  
 <span data-ttu-id="bea42-162">동기화 할 개체를 선택할 때 전용 또는 내부 개체에 대해서만 잠가야 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-162">When selecting an object on which to synchronize, you should lock only on private or internal objects.</span></span> <span data-ttu-id="bea42-163">외부 개체에 대 한 잠금을 관련 되지 않은 코드에서 다양 한 용도로 잠그지 동일한 개체를 선택할 수 있으므로 교착 상태 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-163">Locking on external objects might result in deadlocks, because unrelated code could choose the same objects to lock on for different purposes.</span></span>  
  
 <span data-ttu-id="bea42-164">잠금에 사용 되는 개체에서 파생 되는 경우 여러 응용 프로그램 도메인의 개체에 동기화 할 수 있는 참고 <xref:System.MarshalByRefObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-164">Note that you can synchronize on an object in multiple application domains if the object used for the lock derives from <xref:System.MarshalByRefObject>.</span></span>  
  
<a name="CriticalSection"></a>   
## <a name="the-critical-section"></a><span data-ttu-id="bea42-165">중요 섹션</span><span class="sxs-lookup"><span data-stu-id="bea42-165">The critical section</span></span>  
 <span data-ttu-id="bea42-166">사용 된 <xref:System.Threading.Monitor.Enter%2A> 및 <xref:System.Threading.Monitor.Exit%2A> 임계 영역 시작과 끝을 표시 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-166">Use the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods to mark the beginning and end of a critical section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bea42-167">제공 하는 기능을 <xref:System.Threading.Monitor.Enter%2A> 및 <xref:System.Threading.Monitor.Exit%2A> 메서드는 제공 하는 동일 합니다 [잠금](~/docs/csharp/language-reference/keywords/lock-statement.md) C#의 문은 및 [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) Visual Basic의 경우는 제외 하 고 문을 언어 구문이 도입 되면서 줄 바꿈 합니다 <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType> 메서드 오버 로드 하며 <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> 에서 메서드를 `try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="bea42-167">The functionality provided by the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods is identical to that provided by the [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement in C# and the [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement in Visual Basic, except that the language constructs wrap the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType> method overload and the <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> method in a `try`…`finally`</span></span> <span data-ttu-id="bea42-168">블록 모니터가 해제 되도록입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-168">block to ensure that the monitor is released.</span></span>  
  
 <span data-ttu-id="bea42-169">중요 섹션을 사용 하면 연속 지침으로 획득 된 잠금이의 집합인 경우는 <xref:System.Threading.Monitor.Enter%2A> 메서드를 사용 하면 단일 스레드만 잠겨 있는 개체를 사용 하 여 포함된 된 코드를 실행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-169">If the critical section is a set of contiguous instructions, then the lock acquired by the <xref:System.Threading.Monitor.Enter%2A> method guarantees that only a single thread can execute the enclosed code with the locked object.</span></span> <span data-ttu-id="bea42-170">해당 코드를 배치 하는 권장이 예제의 경우를 `try` 블록과에 대 한 호출을 배치 합니다 <xref:System.Threading.Monitor.Exit%2A> 에서 메서드를 `finally` 블록.</span><span class="sxs-lookup"><span data-stu-id="bea42-170">In this case, we recommend that you place that code in a `try` block and place the call to the <xref:System.Threading.Monitor.Exit%2A> method in a `finally` block.</span></span> <span data-ttu-id="bea42-171">이렇게 하면 예외가 발생해도 잠금이 해제됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-171">This ensures that the lock is released even if an exception occurs.</span></span> <span data-ttu-id="bea42-172">다음 코드 조각에서는이 패턴을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-172">The following code fragment illustrates this pattern.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#2)]
 [!code-vb[System.Threading.Monitor.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#2)]  
  
 <span data-ttu-id="bea42-173">이 기능은 정적에 대 한 액세스 또는 클래스의 인스턴스 메서드를 동기화 하려면 일반적으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-173">This facility is typically used to synchronize access to a static or instance method of a class.</span></span>  
  
 <span data-ttu-id="bea42-174">잠금 기능 임계 메서드 전체에 걸쳐 있는 경우 배치 하 여 수행할 수 있습니다는 <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType> 메서드를 지정 하는 <xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized> 값의 생성자에서 <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-174">If a critical section spans an entire method, the locking facility can be achieved by placing the <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType> on the method, and specifying the <xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized> value in the constructor of <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>.</span></span> <span data-ttu-id="bea42-175">이 특성을 사용 하는 경우는 <xref:System.Threading.Monitor.Enter%2A> 고 <xref:System.Threading.Monitor.Exit%2A> 메서드 호출은 필요 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-175">When you use this attribute, the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> method calls are not needed.</span></span> <span data-ttu-id="bea42-176">다음 코드 조각에서는이 패턴을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-176">The following code fragment illustrates this pattern:</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#3)]
 [!code-vb[System.Threading.Monitor.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#3)]  
  
 <span data-ttu-id="bea42-177">현재 스레드를; 메서드는 반환 될 때까지 백그라운드에서 특성으로 인해 참고 잠금을 빨리 해제할 수를 사용 하 여는 <xref:System.Threading.Monitor> 클래스를 C# [잠금](~/docs/csharp/language-reference/keywords/lock-statement.md) 문 또는 Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) 특성 대신 메서드 내에서 문.</span><span class="sxs-lookup"><span data-stu-id="bea42-177">Note that the attribute causes the current thread to hold the lock until the method returns; if the lock can be released sooner, use the <xref:System.Threading.Monitor> class, the C# [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement, or the Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement inside of the method instead of the attribute.</span></span>  
  
 <span data-ttu-id="bea42-178">에 대 한 수 있지만 합니다 <xref:System.Threading.Monitor.Enter%2A> 및 <xref:System.Threading.Monitor.Exit%2A> 잠그고 멤버 또는 클래스 경계를 교차 하는 지정 된 개체를 해제 하는 문,이 방법은 권장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-178">While it is possible for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> statements that lock and release a given object to cross member or class boundaries or both, this practice is not recommended.</span></span>  
  
<a name="Pulse"></a>   
## <a name="pulse-pulseall-and-wait"></a><span data-ttu-id="bea42-179">Pulse, PulseAll, 및 대기</span><span class="sxs-lookup"><span data-stu-id="bea42-179">Pulse, PulseAll, and Wait</span></span>  
 <span data-ttu-id="bea42-180">호출할 수 있는 스레드가 잠금을 소유 하 고 잠금이 보호 하는 중요 섹션 않았으면 합니다 <xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>, 및 <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="bea42-180">Once a thread owns the lock and has entered the critical section that the lock protects, it can call the <xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>, and <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="bea42-181">경우 스레드가 보유 하는 잠금 호출 <xref:System.Threading.Monitor.Wait%2A>잠금이 해제 되 고 스레드가 동기화 개체의 대기 큐에 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-181">When the thread that holds the lock calls <xref:System.Threading.Monitor.Wait%2A>, the lock is released and the thread is added to the waiting queue of the synchronized object.</span></span> <span data-ttu-id="bea42-182">첫 번째 스레드가 준비 큐에 있는 경우 잠금을 획득 하 고 중요 섹션에 진입 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-182">The first thread in the ready queue, if any, acquires the lock and enters the critical section.</span></span> <span data-ttu-id="bea42-183">스레드가 준비 큐에 대기 중인 큐에서 이동는 경우 중 하나를 <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType> (이동할 스레드 여야 함 대기 중인 큐의 헤드에) 또는 <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> 메서드는 잠금을 보유 한 스레드에 의해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-183">The thread is moved from the waiting queue to the ready queue when either the <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType> (to be moved, the thread must be at the head of the waiting queue) or the <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> method is called by the thread that holds the lock.</span></span> <span data-ttu-id="bea42-184"><xref:System.Threading.Monitor.Wait%2A> 호출 스레드 잠금을 다시 가져오면 메서드를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-184">The <xref:System.Threading.Monitor.Wait%2A> method returns when the calling thread reacquires the lock.</span></span>  
  
 <span data-ttu-id="bea42-185">경우 스레드가 보유 하는 잠금 호출 <xref:System.Threading.Monitor.Pulse%2A>, 대기 중인 큐의 헤드에 스레드가 준비 큐로 이동 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-185">When the thread that holds the lock calls <xref:System.Threading.Monitor.Pulse%2A>, the thread at the head of the waiting queue is moved to the ready queue.</span></span> <span data-ttu-id="bea42-186">에 대 한 호출을 <xref:System.Threading.Monitor.PulseAll%2A> 메서드 대기 큐에서 모든 스레드가 준비 큐로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-186">The call to the <xref:System.Threading.Monitor.PulseAll%2A> method moves all the threads from the waiting queue to the ready queue.</span></span>  
  
<a name="WaitHandles"></a>   
## <a name="monitors-and-wait-handles"></a><span data-ttu-id="bea42-187">모니터 및 대기 핸들</span><span class="sxs-lookup"><span data-stu-id="bea42-187">Monitors and wait handles</span></span>  
 <span data-ttu-id="bea42-188">사용 간의 차이점을 확인 해야 합니다 <xref:System.Threading.Monitor> 클래스 및 <xref:System.Threading.WaitHandle> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-188">It is important to note the distinction between the use of the <xref:System.Threading.Monitor> class and <xref:System.Threading.WaitHandle> objects.</span></span>  
  
-   <span data-ttu-id="bea42-189"><xref:System.Threading.Monitor> 클래스는 순수 하 게 관리 되는, 완전히 이식 가능한 클래스 이며 운영 체제 리소스 요구 사항 측면에서 더 효율적일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-189">The <xref:System.Threading.Monitor> class is purely managed, fully portable, and might be more efficient in terms of operating-system resource requirements.</span></span>  
  
-   <span data-ttu-id="bea42-190"><xref:System.Threading.WaitHandle> 개체는 운영 체제 대기 가능 개체를 나타내며, 관리 코드와 비관리 코드 간의 동기화에 유용하고, 동시에 많은 개체를 처리하는 기능과 같은 일부 고급 운영 체제 기능을 노출합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-190"><xref:System.Threading.WaitHandle> objects represent operating-system waitable objects, are useful for synchronizing between managed and unmanaged code, and expose some advanced operating-system features like the ability to wait on many objects at once.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bea42-191">다음 예제에서는 합니다 <xref:System.Threading.Monitor> 나타내는 난수 생성기의 단일 인스턴스에 대 한 액세스를 동기화 하는 클래스는 <xref:System.Random> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-191">The following example uses the <xref:System.Threading.Monitor> class to synchronize access to a single instance of a random number generator represented by the <xref:System.Random> class.</span></span> <span data-ttu-id="bea42-192">이 예제에서는 10 개 작업을 스레드 풀 스레드에서 비동기적으로 실행 하는 각를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-192">The example creates ten tasks, each of which executes asynchronously on a thread pool thread.</span></span> <span data-ttu-id="bea42-193">각 작업 10,000 난수 생성, 해당 평균을 계산 및 난수 생성 수 총 합계 및 합계를 유지 관리 하는 두 개의 프로시저 수준 변수를 업데이트 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-193">Each task generates 10,000 random numbers, calculates their average, and updates two procedure-level variables that maintain a running total of the number of random numbers generated and their sum.</span></span> <span data-ttu-id="bea42-194">모든 작업이 실행 된 후 전체 평균을 계산할 두 값이 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-194">After all tasks have executed, these two values are then used to calculate the overall mean.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/example1.cs#1)]
 [!code-vb[System.Threading.Monitor.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/example1.vb#1)]  
  
 <span data-ttu-id="bea42-195">스레드 풀 스레드에서 실행 중인 모든 태스크에서 액세스할 수 있습니다, 변수에 액세스할 `total` 고 `n` 도 동기화 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-195">Because they can be accessed from any task running on a thread pool thread, access to the variables `total` and `n` must also be synchronized.</span></span> <span data-ttu-id="bea42-196"><xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType> 메서드는이 용도로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-196">The <xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType> method is used for this purpose.</span></span>  
  
 <span data-ttu-id="bea42-197">다음 예제에서는 함께 사용 하는 방법을 보여 줍니다는 <xref:System.Threading.Monitor> 클래스 (사용 하 여 구현 합니다 `lock` 또는 `SyncLock` 언어 구문), <xref:System.Threading.Interlocked> 클래스 및 <xref:System.Threading.AutoResetEvent> 클래스.</span><span class="sxs-lookup"><span data-stu-id="bea42-197">The following example demonstrates the combined use of the <xref:System.Threading.Monitor> class (implemented with the `lock` or `SyncLock` language construct), the <xref:System.Threading.Interlocked> class, and the <xref:System.Threading.AutoResetEvent> class.</span></span> <span data-ttu-id="bea42-198">이 예제에서는 두 개의 `internal`(C#) 또는 `Friend`(Visual Basic) 클래스인 `SyncResource`와 `UnSyncResource`를 정의하며 각각 리소스에 대해 동기화되거나 동기화되지 않은 액세스를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-198">It defines two `internal` (in C#) or `Friend` (in Visual Basic) classes, `SyncResource` and `UnSyncResource`, that respectively provide synchronized and unsynchronized access to a resource.</span></span> <span data-ttu-id="bea42-199">예제에서 동기화된 액세스와 동기화되지 않은 액세스(각 메서드 호출이 신속히 완료되는 경우일 수 있음) 간의 차이를 나타내도록 하기 위해 메서드에 임의 지연이 포함되어 있습니다. <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> 속성이 짝수인 스레드에 대해, 메서드는 <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>를 호출하여 2,000밀리초의 지연을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-199">To ensure that the example illustrates the difference between the synchronized and unsynchronized access (which could be the case if each method call completes rapidly), the method includes a random delay: for threads whose <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> property is even, the method calls <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> to introduce a delay of 2,000 milliseconds.</span></span> <span data-ttu-id="bea42-200">`SyncResource` 클래스는 공용이 아니기 때문에 동기화된 리소스에서 잠금을 가져오는 클라이언트 코드는 없습니다. 내부 클래스가 자체적으로 잠금을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-200">Note that, because the `SyncResource` class is not public, none of the client code takes a lock on the synchronized resource; the internal class itself takes the lock.</span></span> <span data-ttu-id="bea42-201">이를 통해 악성 코드가 공용 개체에서 잠금을 가져오는 것을 방지할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-201">This prevents malicious code from taking a lock on a public object.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#1](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/source.cs#1)]
 [!code-vb[Conceptual.Monitors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/source.vb#1)]  
  
 <span data-ttu-id="bea42-202">이 예제에서는 `numOps` 변수를 정의하여 리소스에 액세스를 시도할 스레드 수를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-202">The example defines a variable, `numOps`, that defines the number of threads that will attempt to access the resource.</span></span> <span data-ttu-id="bea42-203">응용 프로그램 스레드는 동기화된 액세스와 동기화되지 않은 액세스에 대해 각각 5번씩 <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-203">The application thread calls the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method for synchronized and unsynchronized access five times each.</span></span> <span data-ttu-id="bea42-204"><xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> 메서드는 어떠한 매개 변수도 받아들이지 않고 어떠한 값도 반환하지 않는 대리자인 단일 매개 변수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-204">The <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method has a single parameter, a delegate that accepts no parameters and returns no value.</span></span> <span data-ttu-id="bea42-205">이 매개 변수는 동기화된 액세스에 대해서는 `SyncUpdateResource` 메서드를 호출하고, 동기화되지 않은 액세스에 대해서는 `UnSyncUpdateResource` 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-205">For synchronized access, it invokes the `SyncUpdateResource` method; for unsynchronized access, it invokes the `UnSyncUpdateResource` method.</span></span> <span data-ttu-id="bea42-206">호출 응용 프로그램 스레드가 각 일련의 메서드 호출 후는 [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne*) 될 때까지 차단 한다는 메서드는 <xref:System.Threading.AutoResetEvent> 인스턴스가 신호입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-206">After each set of method calls, the application thread calls the [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne*) method so that it blocks until the <xref:System.Threading.AutoResetEvent> instance is signaled.</span></span>  
  
 <span data-ttu-id="bea42-207">`SyncUpdateResource` 메서드에 대한 각 호출은 내부 `SyncResource.Access` 메서드를 호출한 다음 <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> 메서드를 호출하여 `numOps` 카운터를 감소시킵니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-207">Each call to the `SyncUpdateResource` method calls the internal `SyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method to decrement the `numOps` counter.</span></span> <span data-ttu-id="bea42-208"><xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> 메서드를 사용 하는 카운터를 감소, 그렇지 않으면 있습니다 수 없기 때문에 두 번째 스레드가 해당 값에 액세스 첫 번째 스레드의 감소 되기 전에 특정 값 변수에 저장 된 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-208">The <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method Is used to decrement the counter, because otherwise you cannot be certain that a second thread will access the value before a first thread's decremented value has been stored in the variable.</span></span> <span data-ttu-id="bea42-209">마지막 카운터를 0 작업자 스레드 감소를 동기화 하는 경우 동기화 된 모든 스레드가 나타내는 완료 리소스 액세스는 `SyncUpdateResource` 메서드 호출을 <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> 주 스레드가 계속 알리는 메서드 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-209">When the last synchronized worker thread decrements the counter to zero, indicating that all synchronized threads have completed accessing the resource, the `SyncUpdateResource` method calls the <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> method, which signals the main thread to continue execution.</span></span>  
  
 <span data-ttu-id="bea42-210">`UnSyncUpdateResource` 메서드에 대한 각 호출은 내부 `UnSyncResource.Access` 메서드를 호출한 다음 <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> 메서드를 호출하여 `numOps` 카운터를 감소시킵니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-210">Each call to the `UnSyncUpdateResource` method calls the internal `UnSyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method to decrement the `numOps` counter.</span></span> <span data-ttu-id="bea42-211">이번에 <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> 메서드 두 번째 스레드가 변수에 첫 번째 스레드의 감소 된 값이 할당 되기 전에 값을 액세스 하지 않습니다 확인 하는 카운터를 감소를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-211">Once again, the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method Is used to decrement the counter to ensure that a second thread does not access the value before a first thread's decremented value has been assigned to the variable.</span></span> <span data-ttu-id="bea42-212">마지막으로 동기화 작업자 스레드의 감소 된 카운터를 0, 리소스에 액세스 하는 데 필요한 동기화 되지 않은 스레드가 더 이상 있는지를 나타내는 합니다 `UnSyncUpdateResource` 메서드 호출을 <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> 메서드 main 메서드가 실행을 계속 하도록 신호를 보냅니다 .</span><span class="sxs-lookup"><span data-stu-id="bea42-212">When the last unsynchronized worker thread decrements the counter to zero, indicating that no more unsynchronized threads need to access the resource, the `UnSyncUpdateResource` method calls the <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> method, which signals the main thread to continue execution.</span></span>  
  
 <span data-ttu-id="bea42-213">예제의 출력에 나타난 것처럼, 동기화된 액세스는 호출한 스레드가 보호된 리소스를 종료한 다음 다른 스레드가 액세스할 수 있도록 하기 때문에 각 스레드는 선행 작업에서 대기합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-213">As the output from  the example shows, synchronized access ensures that the calling thread exits the protected resource before another thread can access it; each thread waits on its predecessor.</span></span> <span data-ttu-id="bea42-214">반면에 잠금 없이 `UnSyncResource.Access` 메서드는 스레드가 도달하는 순서로 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-214">On the other hand, without the lock, the `UnSyncResource.Access` method is called in the order in which threads reach it.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="bea42-215">이 형식은 스레드로부터 안전합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-215">This type is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Threading.Thread" />
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="bea42-216">관리되는 스레딩</span><span class="sxs-lookup"><span data-stu-id="bea42-216">Managed Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/threading-objects-and-features.md"><span data-ttu-id="bea42-217">스레딩 개체 및 기능</span><span class="sxs-lookup"><span data-stu-id="bea42-217">Threading Objects and Features</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="Enter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bea42-218">지정된 개체의 단독 잠금을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-218">Acquires an exclusive lock on a specified object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Enter : obj -&gt; unit" Usage="System.Threading.Monitor.Enter obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="bea42-219">모니터 잠금을 가져올 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-219">The object on which to acquire the monitor lock.</span></span></param>
        <summary><span data-ttu-id="bea42-220">지정된 개체의 단독 잠금을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-220">Acquires an exclusive lock on the specified object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bea42-221">사용 하 여 `Enter` 얻으려고 합니다 <xref:System.Threading.Monitor> 매개 변수로 전달 된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-221">Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the parameter.</span></span> <span data-ttu-id="bea42-222">다른 스레드가 실행 하는 경우는 `Enter` 개체에 해당 아직 실행 되지 않았으면 있지만 <xref:System.Threading.Monitor.Exit%2A>, 현재 스레드가 다른 스레드에서 개체를 해제할 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-222">If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object.</span></span> <span data-ttu-id="bea42-223">동일한 스레드에서 호출을 유효 `Enter` 차단 하지 않고 두 번 이상 하지만 동일한 수의 `Exit` 호출 전에 개체에서 대기 중인 다른 스레드를 차단 해제 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-223">It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.</span></span>  
  
 <span data-ttu-id="bea42-224">사용 하 여 <xref:System.Threading.Monitor> 잠금 개체 (즉, 참조 형식), 값 형식이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-224">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="bea42-225">값 형식 변수를 전달 하는 경우 `Enter`, 개체로 boxed 형식이 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-225">When you pass a value type variable to `Enter`, it is boxed as an object.</span></span> <span data-ttu-id="bea42-226">같은 변수를 전달 하는 경우 `Enter` 다시는 별도 개체로 boxed 및 스레드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-226">If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block.</span></span> <span data-ttu-id="bea42-227">이 경우 코드는 `Monitor` 은 보호 중인 보호 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-227">In this case, the code that `Monitor` is supposedly protecting is not protected.</span></span> <span data-ttu-id="bea42-228">또한 변수를 전달할 때 `Exit`, 별도 또 다른 개체가 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-228">Furthermore, when you pass the variable to `Exit`, still another separate object is created.</span></span> <span data-ttu-id="bea42-229">에 전달 된 개체가 `Exit` 전달 된 개체와에서 다르면 `Enter`, `Monitor` throw <xref:System.Threading.SynchronizationLockException>합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-229">Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>.</span></span> <span data-ttu-id="bea42-230">자세한 내용은 해당 개념 항목을 참조 하세요 [모니터](xref:System.Threading.Monitor)합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-230">For more information, see the conceptual topic [Monitors](xref:System.Threading.Monitor).</span></span>  
  
 <span data-ttu-id="bea42-231"><xref:System.Threading.Thread.Interrupt%2A> 입력 대기 중인 스레드를 중단할 수는 `Monitor` 개체에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-231"><xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object.</span></span> <span data-ttu-id="bea42-232"><xref:System.Threading.ThreadInterruptedException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-232">A <xref:System.Threading.ThreadInterruptedException> will be thrown.</span></span>  
  
 <span data-ttu-id="bea42-233">C#을 사용 하 여 `try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="bea42-233">Use a C# `try`…`finally`</span></span> <span data-ttu-id="bea42-234">블록 (`Try`...`Finally`</span><span class="sxs-lookup"><span data-stu-id="bea42-234">block (`Try`…`Finally`</span></span> <span data-ttu-id="bea42-235">Visual Basic)를 모니터를 해제 하거나 사용 하 여 C# `lock` 문 (`SyncLock` Visual Basic의 문)를 래핑하고 합니다 <xref:System.Threading.Monitor.Enter%2A> 및 <xref:System.Threading.Monitor.Exit%2A> 에서 메서드를 `try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="bea42-235">in Visual Basic) to ensure that you release the monitor, or use the C# `lock` statement (`SyncLock` statement in Visual Basic), which wraps the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods in a `try`…`finally`</span></span> <span data-ttu-id="bea42-236">블록입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-236">block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bea42-237">다음 예제에서는 `Enter` 메서드를 사용하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-237">The following example demonstrates how to use the `Enter` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="bea42-238"><paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-238">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="bea42-239">관리되는 스레딩</span><span class="sxs-lookup"><span data-stu-id="bea42-239">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member Enter : obj *  -&gt; unit" Usage="System.Threading.Monitor.Enter (obj, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="bea42-240">대기할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-240">The object on which to wait.</span></span></param>
        <param name="lockTaken"><span data-ttu-id="bea42-241">잠금을 얻기 위한 시도의 결과로서, 참조에 의해 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-241">The result of the attempt to acquire the lock, passed by reference.</span></span> <span data-ttu-id="bea42-242">입력은 <see langword="false" />여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-242">The input must be <see langword="false" />.</span></span> <span data-ttu-id="bea42-243">잠금을 얻으면 출력이 <see langword="true" />이고, 그렇지 않으면 출력이 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-243">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span></span> <span data-ttu-id="bea42-244">잠금을 얻으려는 시도 도중에 예외가 발생해도 출력이 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-244">The output is set even if an exception occurs during the attempt to acquire the lock.</span></span>  
  
<span data-ttu-id="bea42-245">예외가 발생하지 않는 경우 이 메서드의 출력은 항상 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-245">Note   If no exception occurs, the output of this method is always <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="bea42-246">지정된 개체의 단독 잠금을 가져오고 잠금 설정 여부를 나타내는 값을 자동으로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-246">Acquires an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bea42-247">사용 하 여 `Enter` 가져오려고 합니다 <xref:System.Threading.Monitor> 로 전달 된 개체는 `obj` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-247">Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the `obj` parameter.</span></span> <span data-ttu-id="bea42-248">다른 스레드가 실행 하는 경우는 `Enter` 개체에 해당 아직 실행 되지 않았으면 있지만 <xref:System.Threading.Monitor.Exit%2A>, 현재 스레드가 다른 스레드에서 개체를 해제할 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-248">If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object.</span></span> <span data-ttu-id="bea42-249">동일한 스레드에서 호출을 유효 `Enter` 차단 하지 않고 두 번 이상 하지만 동일한 수의 `Exit` 호출 전에 개체에서 대기 중인 다른 스레드를 차단 해제 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-249">It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.</span></span>  
  
 <span data-ttu-id="bea42-250">에 대 한 지정 된 잠금이 된 그렇지 않은 경우 예외가 throw 되었기 때문에 변수를 `lockTaken` 매개 변수는 `false` 이 메서드 종료 된 후입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-250">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="bea42-251">이렇게 하면 모든 경우에는 잠금을 해제 하는 데 필요한 인지를 확인 하려면 프로그램입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-251">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span> <span data-ttu-id="bea42-252">이 메서드는 예외를 throw 하지 않고 반환 하는 경우에 대 한 지정 된 변수를 `lockTaken` 매개 변수는 항상 `true`, 및 테스트할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-252">If this method returns without throwing an exception, the variable specified for the `lockTaken` parameter is always `true`, and there is no need to test it.</span></span>  
  
 <span data-ttu-id="bea42-253">사용 하 여 <xref:System.Threading.Monitor> 잠금 개체 (즉, 참조 형식), 값 형식이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-253">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="bea42-254">값 형식 변수를 전달 하는 경우 `Enter`, 개체로 boxed 형식이 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-254">When you pass a value type variable to `Enter`, it is boxed as an object.</span></span> <span data-ttu-id="bea42-255">같은 변수를 전달 하는 경우 `Enter` 다시는 별도 개체로 boxed 및 스레드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-255">If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block.</span></span> <span data-ttu-id="bea42-256">이 경우 코드는 `Monitor` 은 보호 중인 보호 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-256">In this case, the code that `Monitor` is supposedly protecting is not protected.</span></span> <span data-ttu-id="bea42-257">또한 변수를 전달할 때 `Exit`, 별도 다른 개체가 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-257">Furthermore, when you pass the variable to `Exit`, another separate object is created.</span></span> <span data-ttu-id="bea42-258">에 전달 된 개체가 `Exit` 전달 된 개체와에서 다르면 `Enter`, `Monitor` throw <xref:System.Threading.SynchronizationLockException>합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-258">Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>.</span></span> <span data-ttu-id="bea42-259">자세한 내용은 해당 개념 항목을 참조 하세요 [모니터](xref:System.Threading.Monitor)합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-259">For more information, see the conceptual topic [Monitors](xref:System.Threading.Monitor).</span></span>  
  
 <span data-ttu-id="bea42-260"><xref:System.Threading.Thread.Interrupt%2A> 입력 대기 중인 스레드를 중단할 수는 `Monitor` 개체에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-260"><xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object.</span></span> <span data-ttu-id="bea42-261"><xref:System.Threading.ThreadInterruptedException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-261">A <xref:System.Threading.ThreadInterruptedException> will be thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bea42-262">다음 코드를 사용 하기 위한 기본 패턴을 보여 줍니다.는 <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-262">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="bea42-263">이 오버 로드는 항상에 전달 되는 변수의 값을 설정 합니다 `ref` 매개 변수 (`ByRef` Visual Basic에서) `lockTaken`메서드 변수 값은 되도록 잠금을 있는지 여부를 테스트 하는 신뢰할 수 있는 방법은 예외를 throw 하는 경우에 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-263">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#2)]
 [!code-vb[System.Threading.Monitor.Enter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bea42-264"><paramref name="lockTaken" />에 대한 입력이 <see langword="true" />인 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-264">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="bea42-265"><paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-265">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public static void Exit (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Exit(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Exit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Exit (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Exit(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Exit : obj -&gt; unit" Usage="System.Threading.Monitor.Exit obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="bea42-266">잠금을 해제할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-266">The object on which to release the lock.</span></span></param>
        <summary><span data-ttu-id="bea42-267">지정된 개체의 단독 잠금을 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-267">Releases an exclusive lock on the specified object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bea42-268">호출 스레드가에서 잠금을 소유 해야 합니다 `obj` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-268">The calling thread must own the lock on the `obj` parameter.</span></span> <span data-ttu-id="bea42-269">호출 스레드가 지정된 된 개체 잠금을 소유 하 고 동일한 수의 시켰습니다 경우 `Exit` 고 <xref:System.Threading.Monitor.Enter%2A> 잠금이 해제 되는 개체에 대 한 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-269">If the calling thread owns the lock on the specified object, and has made an equal number of `Exit` and <xref:System.Threading.Monitor.Enter%2A> calls for the object, then the lock is released.</span></span> <span data-ttu-id="bea42-270">호출 스레드에서 호출 하지 않으면 `Exit` 횟수 만큼 `Enter`, 잠금이 해제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-270">If the calling thread has not invoked `Exit` as many times as `Enter`, the lock is not released.</span></span>  
  
 <span data-ttu-id="bea42-271">잠금이 해제 되 고 다른 스레드가 개체에 대 한 준비 큐에서 스레드 중 하나가 잠금을 획득 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-271">If the lock is released and other threads are in the ready queue for the object, one of the threads acquires the lock.</span></span> <span data-ttu-id="bea42-272">다른 스레드가 잠금을 획득 하려고 대기 하 고 대기 중인 큐에 있는 경우는 이동 하지는 자동으로 준비 된 큐로 잠금의 소유자를 호출할 때 `Exit`합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-272">If other threads are in the waiting queue waiting to acquire the lock, they are not automatically moved to the ready queue when the owner of the lock calls `Exit`.</span></span> <span data-ttu-id="bea42-273">하나 이상의 대기 중인 스레드가 준비 큐를 이동 하려면 호출 <xref:System.Threading.Monitor.Pulse%2A> 나 <xref:System.Threading.Monitor.PulseAll%2A> 를 호출 하기 전에 `Exit`입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-273">To move one or more waiting threads into the ready queue, call <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> before invoking `Exit`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bea42-274">다음 예제에서는 `Exit` 메서드를 사용하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-274">The following example demonstrates how to use the `Exit` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="bea42-275"><paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-275">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="bea42-276">현재 스레드가 지정된 개체 잠금을 소유하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-276">The current thread does not own the lock for the specified object.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="bea42-277">관리되는 스레딩</span><span class="sxs-lookup"><span data-stu-id="bea42-277">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsEntered">
      <MemberSignature Language="C#" Value="public static bool IsEntered (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEntered(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.IsEntered(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsEntered (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsEntered(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member IsEntered : obj -&gt; bool" Usage="System.Threading.Monitor.IsEntered obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="bea42-278">테스트할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-278">The object to test.</span></span></param>
        <summary><span data-ttu-id="bea42-279">현재 스레드가 지정된 개체에 대한 잠금을 보유하는지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-279">Determines whether the current thread holds the lock on the specified object.</span></span></summary>
        <returns><span data-ttu-id="bea42-280">현재 스레드에 <paramref name="obj" /> 잠금이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-280"><see langword="true" /> if the current thread holds the lock on <paramref name="obj" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bea42-281">이 방법은의 메서드를 사용 하 여 획득 된 잠금에만 작동 합니다 <xref:System.Threading.Monitor> 클래스를 사용 하거나 사용 하 여 C# `lock` 문 또는 Visual Basic `SyncLock` 문을 사용 하 여 구현 됩니다 <xref:System.Threading.Monitor>합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-281">This method works only for locks that are acquired by using the methods of the <xref:System.Threading.Monitor> class, or by using the C# `lock` statement or the Visual Basic `SyncLock` statement, which are implemented with <xref:System.Threading.Monitor>.</span></span>  
  
 <span data-ttu-id="bea42-282">와 같은 진단 도구를 사용 하 여이 메서드를 사용 합니다 <xref:System.Diagnostics.Debug.Assert%2A> 메서드 및 <xref:System.Diagnostics.Contracts.Contract> 클래스를 포함 하는 잠금 문제를 디버깅 하는 <xref:System.Threading.Monitor> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-282">Use this method with diagnostic tools, such as the <xref:System.Diagnostics.Debug.Assert%2A> method and the <xref:System.Diagnostics.Contracts.Contract> class, to debug locking issues that involve the <xref:System.Threading.Monitor> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="bea42-283"><paramref name="obj" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-283"><paramref name="obj" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Pulse">
      <MemberSignature Language="C#" Value="public static void Pulse (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Pulse(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Pulse(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Pulse (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Pulse(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Pulse : obj -&gt; unit" Usage="System.Threading.Monitor.Pulse obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="bea42-284">스레드에서 기다리는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-284">The object a thread is waiting for.</span></span></param>
        <summary><span data-ttu-id="bea42-285">대기 중인 큐에 포함된 스레드에 잠겨 있는 개체의 상태 변경을 알립니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-285">Notifies a thread in the waiting queue of a change in the locked object's state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bea42-286">현재 소유자의 잠금 대기 하 여 개체를 신호를 보낼 수 있습니다만 `Pulse`합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-286">Only the current owner of the lock can signal a waiting object using `Pulse`.</span></span>  
  
 <span data-ttu-id="bea42-287">지정된 된 개체에 대 한 잠금을 현재 소유한 스레드가 잠금에 대 한 줄에 다음 스레드를 알리기 위해이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-287">The thread that currently owns the lock on the specified object invokes this method to signal the next thread in line for the lock.</span></span> <span data-ttu-id="bea42-288">펄스를 수신 하면 대기 중인 스레드가 준비 큐로 이동 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-288">Upon receiving the pulse, the waiting thread is moved to the ready queue.</span></span> <span data-ttu-id="bea42-289">호출한 스레드가 `Pulse` 잠금을 해제 (필요가 없는 펄스 된 스레드의) 준비 된 큐에 있는 다음 스레드 잠금을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-289">When the thread that invoked `Pulse` releases the lock, the next thread in the ready queue (which is not necessarily the thread that was pulsed) acquires the lock.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bea42-290"><xref:System.Threading.Monitor> 클래스는 나타내는 상태를 유지 하지 않습니다는 <xref:System.Threading.Monitor.Pulse%2A> 메서드가 호출 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-290">The <xref:System.Threading.Monitor> class does not maintain state indicating that the <xref:System.Threading.Monitor.Pulse%2A> method has been called.</span></span> <span data-ttu-id="bea42-291">따라서 호출 하는 경우 <xref:System.Threading.Monitor.Pulse%2A> 때 대기 중인 스레드가 없는 호출 하는 다음 스레드에서 <xref:System.Threading.Monitor.Wait%2A> 블록 처럼 <xref:System.Threading.Monitor.Pulse%2A> 마치 호출 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-291">Thus, if you call <xref:System.Threading.Monitor.Pulse%2A> when no threads are waiting, the next thread that calls <xref:System.Threading.Monitor.Wait%2A> blocks as if <xref:System.Threading.Monitor.Pulse%2A> had never been called.</span></span> <span data-ttu-id="bea42-292">두 개의 스레드를 사용 하는 경우 <xref:System.Threading.Monitor.Pulse%2A> 고 <xref:System.Threading.Monitor.Wait%2A> 상호 작용 하 고,이 인해 교착 상태가 발생에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-292">If two threads are using <xref:System.Threading.Monitor.Pulse%2A> and <xref:System.Threading.Monitor.Wait%2A> to interact, this could result in a deadlock.</span></span> <span data-ttu-id="bea42-293">동작을 사용 하 여이 대조해 보세요는 <xref:System.Threading.AutoResetEvent> 클래스: 신호 하는 경우는 <xref:System.Threading.AutoResetEvent> 호출 하 여 해당 <xref:System.Threading.EventWaitHandle.Set%2A> 메서드를 대기 스레드가 없으면 및 합니다 <xref:System.Threading.AutoResetEvent> 스레드가 호출 될 때까지 신호를 받은 상태에서 그대로 유지 됩니다 <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, 또는 <xref:System.Threading.WaitHandle.WaitAll%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-293">Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class: If you signal an <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, and there are no threads waiting, the <xref:System.Threading.AutoResetEvent> remains in a signaled state until a thread calls <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A>.</span></span> <span data-ttu-id="bea42-294"><xref:System.Threading.AutoResetEvent> 해당 스레드를 해제 하 고 알림에서 신호 알림 해제 상태로 돌아갑니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-294">The <xref:System.Threading.AutoResetEvent> releases that thread and returns to the unsignaled state.</span></span>  
  
 <span data-ttu-id="bea42-295">현재 잠금을, 잠금을 획득할 수 있는 스레드를 포함 하는 준비 된 큐에 대 한 참조 및 대기 중인 큐에 대 한 참조를 보유 하는 스레드에 대 한 참조를 포함 하 여 여러 개의 참조가 동기화 개체를 소유 하 고 있음을 확인 하는 개체의 상태 변경에 대 한 알림을 대기 중인 스레드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-295">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="bea42-296">합니다 `Pulse`, <xref:System.Threading.Monitor.PulseAll%2A>, 및 <xref:System.Threading.Monitor.Wait%2A> 동기화 된 코드 블록 내에서 메서드를 호출할 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-296">The `Pulse`, <xref:System.Threading.Monitor.PulseAll%2A>, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="bea42-297">여러 스레드가 신호를 사용 하 여를 <xref:System.Threading.Monitor.PulseAll%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="bea42-297">To signal multiple threads, use the <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="bea42-298"><paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-298">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="bea42-299">호출한 스레드가 지정된 개체 잠금을 소유하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-299">The calling thread does not own the lock for the specified object.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="bea42-300">관리되는 스레딩</span><span class="sxs-lookup"><span data-stu-id="bea42-300">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PulseAll">
      <MemberSignature Language="C#" Value="public static void PulseAll (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PulseAll(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.PulseAll(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PulseAll (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PulseAll(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member PulseAll : obj -&gt; unit" Usage="System.Threading.Monitor.PulseAll obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="bea42-301">펄스를 보내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-301">The object that sends the pulse.</span></span></param>
        <summary><span data-ttu-id="bea42-302">대기 중인 모든 스레드에 개체 상태 변경을 알립니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-302">Notifies all waiting threads of a change in the object's state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bea42-303">지정된 된 개체에 대 한 잠금을 현재 소유한 스레드가 개체에 대 한 잠금을 획득 하려고 대기 하는 모든 스레드를 알리기 위해이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-303">The thread that currently owns the lock on the specified object invokes this method to signal all threads waiting to acquire the lock on the object.</span></span> <span data-ttu-id="bea42-304">신호를 보낸 후 대기 스레드가 준비 큐로 이동 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-304">After the signal is sent, the waiting threads are moved to the ready queue.</span></span> <span data-ttu-id="bea42-305">호출한 스레드가 `PulseAll` 잠금을 해제 준비 된 큐에 있는 다음 스레드 잠금을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-305">When the thread that invoked `PulseAll` releases the lock, the next thread in the ready queue acquires the lock.</span></span>  
  
 <span data-ttu-id="bea42-306">현재 잠금을, 잠금을 획득할 수 있는 스레드를 포함 하는 준비 된 큐에 대 한 참조 및 대기 중인 큐에 대 한 참조를 보유 하는 스레드에 대 한 참조를 포함 하 여 여러 개의 참조가 동기화 개체를 소유 하 고 있음을 확인 하는 개체의 상태 변경에 대 한 알림을 대기 중인 스레드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-306">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="bea42-307">합니다 <xref:System.Threading.Monitor.Pulse%2A>, `PulseAll`, 및 <xref:System.Threading.Monitor.Wait%2A> 동기화 된 코드 블록 내에서 메서드를 호출할 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-307">The <xref:System.Threading.Monitor.Pulse%2A>, `PulseAll`, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="bea42-308">에 대 한 설명을 합니다 <xref:System.Threading.Monitor.Pulse%2A> 메서드 상황을 설명 하는 경우 <xref:System.Threading.Monitor.Pulse%2A> 대기 중인 스레드가 없을 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-308">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 <span data-ttu-id="bea42-309">단일 스레드를 알리기 위해 사용 된 `Pulse` 메서드.</span><span class="sxs-lookup"><span data-stu-id="bea42-309">To signal a single thread, use the `Pulse` method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="bea42-310"><paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-310">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="bea42-311">호출한 스레드가 지정된 개체 잠금을 소유하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-311">The calling thread does not own the lock for the specified object.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="bea42-312">관리되는 스레딩</span><span class="sxs-lookup"><span data-stu-id="bea42-312">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bea42-313">지정된 개체의 단독 잠금을 가져오려고 했습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-313">Attempts to acquire an exclusive lock on the specified object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj -&gt; bool" Usage="System.Threading.Monitor.TryEnter obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="bea42-314">잠금을 가져올 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-314">The object on which to acquire the lock.</span></span></param>
        <summary><span data-ttu-id="bea42-315">지정된 개체의 단독 잠금을 가져오려고 했습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-315">Attempts to acquire an exclusive lock on the specified object.</span></span></summary>
        <returns><span data-ttu-id="bea42-316">현재 스레드에서 잠금을 가져오면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-316"><see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bea42-317">경우 성공 하면이 메서드가 배타적 잠금을 획득에 `obj` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-317">If successful, this method acquires an exclusive lock on the `obj` parameter.</span></span> <span data-ttu-id="bea42-318">이 메서드는 잠금을 사용할 수 있는지 여부를 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-318">This method returns immediately, whether or not the lock is available.</span></span>  
  
 <span data-ttu-id="bea42-319">이 메서드는 유사한 <xref:System.Threading.Monitor.Enter%2A>, 하지만 현재 스레드를 차단 하지는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-319">This method is similar to <xref:System.Threading.Monitor.Enter%2A>, but it will never block the current thread.</span></span> <span data-ttu-id="bea42-320">메서드가 반환 하는 경우 스레드를 차단 하지 않고 입력할 수 없습니다, `false,`합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-320">If the thread cannot enter without blocking, the method returns `false,`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bea42-321">사용 하 여 <xref:System.Threading.Monitor> 잠금 개체 (즉, 참조 형식), 값 형식이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-321">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="bea42-322">자세한 내용은 참조는 <xref:System.Threading.Monitor> 문서.</span><span class="sxs-lookup"><span data-stu-id="bea42-322">For details, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="bea42-323">스레드가 중요 섹션에 들어가지 않습니다을 보장 하려면 메서드의 반환 값 검사 및 해당 반환 값은 경우에 중요 섹션의 코드를 실행 해야 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-323">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="bea42-324">다음 코드 조각은이 메서드를 호출 하는 데 패턴을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-324">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="bea42-325">호출 해야 하는 참고 <xref:System.Threading.Monitor.Exit%2A> 에 `finally` 블록에 예외가 발생 하면 호출 스레드가 중요 섹션에 대 한 잠금을 해제는 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-325">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#1)]
 [!code-vb[System.Threading.Monitor.TryEnter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="bea42-326">다음 코드 예제에서는 `TryEnter` 메서드를 사용하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-326">The following code example demonstrates how to use the `TryEnter` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="bea42-327"><paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-327">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="bea42-328">관리되는 스레딩</span><span class="sxs-lookup"><span data-stu-id="bea42-328">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="bea42-329">잠금을 가져올 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-329">The object on which to acquire the lock.</span></span></param>
        <param name="lockTaken"><span data-ttu-id="bea42-330">잠금을 얻기 위한 시도의 결과로서, 참조에 의해 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-330">The result of the attempt to acquire the lock, passed by reference.</span></span> <span data-ttu-id="bea42-331">입력은 <see langword="false" />여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-331">The input must be <see langword="false" />.</span></span> <span data-ttu-id="bea42-332">잠금을 얻으면 출력이 <see langword="true" />이고, 그렇지 않으면 출력이 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-332">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span></span> <span data-ttu-id="bea42-333">잠금을 얻으려는 시도 도중에 예외가 발생해도 출력이 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-333">The output is set even if an exception occurs during the attempt to acquire the lock.</span></span></param>
        <summary><span data-ttu-id="bea42-334">지정된 개체의 단독 잠금을 가져오고 잠금 설정 여부를 나타내는 값을 자동으로 설정하려고 시도합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-334">Attempts to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bea42-335">경우 성공 하면이 메서드가 배타적 잠금을 획득에 `obj` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-335">If successful, this method acquires an exclusive lock on the `obj` parameter.</span></span> <span data-ttu-id="bea42-336">이 메서드는 잠금을 사용할 수 있는지 여부를 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-336">This method returns immediately, whether or not the lock is available.</span></span>  
  
 <span data-ttu-id="bea42-337">에 대 한 지정 된 잠금이 된 그렇지 않은 경우 예외가 throw 되었기 때문에 변수를 `lockTaken` 매개 변수는 `false` 이 메서드 종료 된 후입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-337">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="bea42-338">이렇게 하면 모든 경우에는 잠금을 해제 하는 데 필요한 인지를 확인 하려면 프로그램입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-338">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
 <span data-ttu-id="bea42-339">이 메서드는 유사한 <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>, 하지만 현재 스레드를 차단 하지는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-339">This method is similar to <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>, but it will never block the current thread.</span></span> <span data-ttu-id="bea42-340">스레드를 차단 하지 않고 들어갈 수 없는 경우는 `lockTaken` 인수가로 설정 된 `false` 메서드가 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-340">If the thread cannot enter without blocking, the `lockTaken` argument is set to `false` when the method returns.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bea42-341">사용 하 여 <xref:System.Threading.Monitor> 잠금 개체 (즉, 참조 형식), 값 형식이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-341">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="bea42-342">자세한 내용은 <xref:System.Threading.Monitor>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="bea42-342">For more information, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="bea42-343">스레드가 중요 섹션에 들어가지 않습니다 위해이 값을 검사 해야 `lockTaken` 해당 값은 경우에 중요 한 섹션에서 코드를 실행 하 고 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-343">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="bea42-344">다음 코드 조각은이 메서드를 호출 하는 데 패턴을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-344">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="bea42-345">호출 해야 하는 참고 <xref:System.Threading.Monitor.Exit%2A> 에 `finally` 블록에 예외가 발생 하면 호출 스레드가 중요 섹션에 대 한 잠금을 해제는 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-345">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#2)]
 [!code-vb[System.Threading.Monitor.TryEnter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="bea42-346">다음 코드를 사용 하기 위한 기본 패턴을 보여 줍니다.는 <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-346">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="bea42-347">이 오버 로드는 항상에 전달 되는 변수의 값을 설정 합니다 `ref` 매개 변수 (`ByRef` Visual Basic에서) `lockTaken`메서드 변수 값은 되도록 잠금을 있는지 여부를 테스트 하는 신뢰할 수 있는 방법은 예외를 throw 하는 경우에 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-347">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#3)]
 [!code-vb[System.Threading.Monitor.Enter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bea42-348"><paramref name="lockTaken" />에 대한 입력이 <see langword="true" />인 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-348">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="bea42-349"><paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-349">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * int -&gt; bool" Usage="System.Threading.Monitor.TryEnter (obj, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="bea42-350">잠금을 가져올 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-350">The object on which to acquire the lock.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="bea42-351">잠금을 기다릴 밀리초 수입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-351">The number of milliseconds to wait for the lock.</span></span></param>
        <summary><span data-ttu-id="bea42-352">지정된 시간(밀리초) 동안 지정된 개체의 단독 잠금을 가져오려고 했습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-352">Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object.</span></span></summary>
        <returns><span data-ttu-id="bea42-353">현재 스레드에서 잠금을 가져오면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-353"><see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bea42-354">경우는 `millisecondsTimeout` 매개 변수가 같으면 <xref:System.Threading.Timeout.Infinite>,이 메서드는 <xref:System.Threading.Monitor.Enter%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-354">If the `millisecondsTimeout` parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>.</span></span> <span data-ttu-id="bea42-355">하는 경우 `millisecondsTimeout` 가 0 이면이 메서드는 <xref:System.Threading.Monitor.TryEnter%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-355">If `millisecondsTimeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bea42-356">사용 하 여 <xref:System.Threading.Monitor> 잠금 개체 (즉, 참조 형식), 값 형식이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-356">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="bea42-357">자세한 내용은 참조는 <xref:System.Threading.Monitor> 문서.</span><span class="sxs-lookup"><span data-stu-id="bea42-357">For details, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="bea42-358">스레드가 중요 섹션에 들어가지 않습니다을 보장 하려면 메서드의 반환 값 검사 및 해당 반환 값은 경우에 중요 섹션의 코드를 실행 해야 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-358">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="bea42-359">다음 코드 조각은이 메서드를 호출 하는 데 패턴을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-359">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="bea42-360">호출 해야 하는 참고 <xref:System.Threading.Monitor.Exit%2A> 에 `finally` 블록에 예외가 발생 하면 호출 스레드가 중요 섹션에 대 한 잠금을 해제는 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-360">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#3)]
 [!code-vb[System.Threading.Monitor.TryEnter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="bea42-361"><paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-361">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="bea42-362"><paramref name="millisecondsTimeout" />가 음수이고 <see cref="F:System.Threading.Timeout.Infinite" />가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-362"><paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="bea42-363">관리되는 스레딩</span><span class="sxs-lookup"><span data-stu-id="bea42-363">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * TimeSpan -&gt; bool" Usage="System.Threading.Monitor.TryEnter (obj, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="bea42-364">잠금을 가져올 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-364">The object on which to acquire the lock.</span></span></param>
        <param name="timeout"><span data-ttu-id="bea42-365">잠금을 기다리는 시간을 나타내는 <see cref="T:System.TimeSpan" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-365">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait for the lock.</span></span> <span data-ttu-id="bea42-366">-1밀리초 값은 무한 대기를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-366">A value of -1 millisecond specifies an infinite wait.</span></span></param>
        <summary><span data-ttu-id="bea42-367">지정된 시간 동안 지정된 개체의 단독 잠금을 가져오려고 했습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-367">Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object.</span></span></summary>
        <returns><span data-ttu-id="bea42-368">현재 스레드에서 잠금을 가져오면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-368"><see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bea42-369">하는 경우의 값을 `timeout` 밀리초로 변환 하는 매개 변수가 같으면-1,이 메서드는 <xref:System.Threading.Monitor.Enter%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-369">If the value of the `timeout` parameter converted to milliseconds equals -1, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>.</span></span> <span data-ttu-id="bea42-370">경우 값 `timeout` 가 0 이면이 메서드는 <xref:System.Threading.Monitor.TryEnter%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-370">If the value of `timeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bea42-371">사용 하 여 <xref:System.Threading.Monitor> 잠금 개체 (즉, 참조 형식), 값 형식이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-371">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="bea42-372">자세한 내용은 참조는 <xref:System.Threading.Monitor> 클래스 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-372">For details, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="bea42-373">스레드가 중요 섹션에 들어가지 않습니다을 보장 하려면 메서드의 반환 값 검사 및 해당 반환 값은 경우에 중요 섹션의 코드를 실행 해야 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-373">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="bea42-374">다음 코드 조각은이 메서드를 호출 하는 데 패턴을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-374">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="bea42-375">호출 해야 하는 참고 <xref:System.Threading.Monitor.Exit%2A> 에 `finally` 블록에 예외가 발생 하면 호출 스레드가 중요 섹션에 대 한 잠금을 해제는 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-375">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#5)]
 [!code-vb[System.Threading.Monitor.TryEnter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="bea42-376"><paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-376">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="bea42-377"><paramref name="timeout" /> 값(밀리초)이 음수이고 <see cref="F:System.Threading.Timeout.Infinite" />(-1밀리초)와 같지 않거나 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-377">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="bea42-378">관리되는 스레딩</span><span class="sxs-lookup"><span data-stu-id="bea42-378">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, int millisecondsTimeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, int32 millisecondsTimeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, millisecondsTimeout As Integer, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, int millisecondsTimeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * int *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, millisecondsTimeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="bea42-379">잠금을 가져올 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-379">The object on which to acquire the lock.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="bea42-380">잠금을 기다릴 밀리초 수입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-380">The number of milliseconds to wait for the lock.</span></span></param>
        <param name="lockTaken"><span data-ttu-id="bea42-381">잠금을 얻기 위한 시도의 결과로서, 참조에 의해 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-381">The result of the attempt to acquire the lock, passed by reference.</span></span> <span data-ttu-id="bea42-382">입력은 <see langword="false" />여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-382">The input must be <see langword="false" />.</span></span> <span data-ttu-id="bea42-383">잠금을 얻으면 출력이 <see langword="true" />이고, 그렇지 않으면 출력이 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-383">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span></span> <span data-ttu-id="bea42-384">잠금을 얻으려는 시도 도중에 예외가 발생해도 출력이 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-384">The output is set even if an exception occurs during the attempt to acquire the lock.</span></span></param>
        <summary><span data-ttu-id="bea42-385">지정된 시간(밀리초) 동안 지정된 개체의 단독 잠금을 가져오고 잠금 설정 여부를 나타내는 값을 자동으로 설정하려고 시도합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-385">Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bea42-386">경우는 `millisecondsTimeout` 매개 변수가 같으면 <xref:System.Threading.Timeout.Infinite>,이 메서드는 <xref:System.Threading.Monitor.Enter%28System.Object%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-386">If the `millisecondsTimeout` parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span></span> <span data-ttu-id="bea42-387">하는 경우 `millisecondsTimeout` 가 0 이면이 메서드는 <xref:System.Threading.Monitor.TryEnter%28System.Object%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-387">If `millisecondsTimeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span></span>  
  
 <span data-ttu-id="bea42-388">에 대 한 지정 된 잠금이 된 그렇지 않은 경우 예외가 throw 되었기 때문에 변수를 `lockTaken` 매개 변수는 `false` 이 메서드 종료 된 후입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-388">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="bea42-389">이렇게 하면 모든 경우에는 잠금을 해제 하는 데 필요한 인지를 확인 하려면 프로그램입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-389">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bea42-390">사용 하 여 <xref:System.Threading.Monitor> 잠금 개체 (즉, 참조 형식), 값 형식이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-390">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="bea42-391">자세한 내용은 참조는 <xref:System.Threading.Monitor> 클래스 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-391">For more information, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="bea42-392">스레드가 중요 섹션에 들어가지 않습니다 위해이 값을 검사 해야 `lockTaken` 해당 값은 경우에 중요 한 섹션에서 코드를 실행 하 고 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-392">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="bea42-393">다음 코드 조각은이 메서드를 호출 하는 데 패턴을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-393">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="bea42-394">호출 해야 하는 참고 <xref:System.Threading.Monitor.Exit%2A> 에 `finally` 블록에 예외가 발생 하면 호출 스레드가 중요 섹션에 대 한 잠금을 해제는 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-394">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#4)]
 [!code-vb[System.Threading.Monitor.TryEnter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="bea42-395">다음 코드를 사용 하기 위한 기본 패턴을 보여 줍니다.는 <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-395">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="bea42-396">이 오버 로드는 항상에 전달 되는 변수의 값을 설정 합니다 `ref` 매개 변수 (`ByRef` Visual Basic에서) `lockTaken`메서드 변수 값은 되도록 잠금을 있는지 여부를 테스트 하는 신뢰할 수 있는 방법은 예외를 throw 하는 경우에 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-396">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#4)]
 [!code-vb[System.Threading.Monitor.Enter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bea42-397"><paramref name="lockTaken" />에 대한 입력이 <see langword="true" />인 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-397">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="bea42-398"><paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-398">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="bea42-399"><paramref name="millisecondsTimeout" />가 음수이고 <see cref="F:System.Threading.Timeout.Infinite" />가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-399"><paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, TimeSpan timeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, valuetype System.TimeSpan timeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, timeout As TimeSpan, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, TimeSpan timeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * TimeSpan *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, timeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="bea42-400">잠금을 가져올 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-400">The object on which to acquire the lock.</span></span></param>
        <param name="timeout"><span data-ttu-id="bea42-401">잠금을 대기할 시간입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-401">The amount of time to wait for the lock.</span></span> <span data-ttu-id="bea42-402">-1밀리초 값은 무한 대기를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-402">A value of -1 millisecond specifies an infinite wait.</span></span></param>
        <param name="lockTaken"><span data-ttu-id="bea42-403">잠금을 얻기 위한 시도의 결과로서, 참조에 의해 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-403">The result of the attempt to acquire the lock, passed by reference.</span></span> <span data-ttu-id="bea42-404">입력은 <see langword="false" />여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-404">The input must be <see langword="false" />.</span></span> <span data-ttu-id="bea42-405">잠금을 얻으면 출력이 <see langword="true" />이고, 그렇지 않으면 출력이 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-405">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span></span> <span data-ttu-id="bea42-406">잠금을 얻으려는 시도 도중에 예외가 발생해도 출력이 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-406">The output is set even if an exception occurs during the attempt to acquire the lock.</span></span></param>
        <summary><span data-ttu-id="bea42-407">지정된 시간 동안 지정된 개체의 단독 잠금을 가져오고 잠금 설정 여부를 나타내는 값을 자동으로 설정하려고 시도합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-407">Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bea42-408">하는 경우의 값을 `timeout` 밀리초로 변환 하는 매개 변수가 같으면-1,이 메서드는 <xref:System.Threading.Monitor.Enter%28System.Object%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-408">If the value of the `timeout` parameter converted to milliseconds equals -1, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span></span> <span data-ttu-id="bea42-409">경우 값 `timeout` 가 0 이면이 메서드는 <xref:System.Threading.Monitor.TryEnter%28System.Object%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-409">If the value of `timeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span></span>  
  
 <span data-ttu-id="bea42-410">에 대 한 지정 된 잠금이 된 그렇지 않은 경우 예외가 throw 되었기 때문에 변수를 `lockTaken` 매개 변수는 `false` 이 메서드 종료 된 후입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-410">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="bea42-411">이렇게 하면 모든 경우에는 잠금을 해제 하는 데 필요한 인지를 확인 하려면 프로그램입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-411">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bea42-412">사용 하 여 <xref:System.Threading.Monitor> 잠금 개체 (즉, 참조 형식), 값 형식이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-412">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="bea42-413">자세한 내용은 참조는 <xref:System.Threading.Monitor> 클래스 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-413">For more information, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="bea42-414">스레드가 중요 섹션에 들어가지 않습니다 위해이 값을 검사 해야 `lockTaken` 해당 값은 경우에 중요 한 섹션에서 코드를 실행 하 고 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-414">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="bea42-415">다음 코드 조각은이 메서드를 호출 하는 데 패턴을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-415">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="bea42-416">호출 해야 하는 참고 <xref:System.Threading.Monitor.Exit%2A> 에 `finally` 블록에 예외가 발생 하면 호출 스레드가 중요 섹션에 대 한 잠금을 해제는 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-416">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#6)]
 [!code-vb[System.Threading.Monitor.TryEnter#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bea42-417"><paramref name="lockTaken" />에 대한 입력이 <see langword="true" />인 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-417">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="bea42-418"><paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-418">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="bea42-419"><paramref name="timeout" /> 값(밀리초)이 음수이고 <see cref="F:System.Threading.Timeout.Infinite" />(-1밀리초)와 같지 않거나 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-419">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="bea42-420">관리되는 스레딩</span><span class="sxs-lookup"><span data-stu-id="bea42-420">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bea42-421">개체의 잠금을 해제한 다음 잠금을 다시 가져올 때까지 현재 스레드를 차단합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-421">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Wait : obj -&gt; bool" Usage="System.Threading.Monitor.Wait obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="bea42-422">대기할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-422">The object on which to wait.</span></span></param>
        <summary><span data-ttu-id="bea42-423">개체의 잠금을 해제한 다음 잠금을 다시 가져올 때까지 현재 스레드를 차단합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-423">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span></summary>
        <returns><span data-ttu-id="bea42-424">지정된 개체 잠금을 호출자가 다시 가져와 호출이 반환되면 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-424"><see langword="true" /> if the call returned because the caller reacquired the lock for the specified object.</span></span> <span data-ttu-id="bea42-425">잠금을 다시 가져오지 않으면 이 메서드는 반환하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-425">This method does not return if the lock is not reacquired.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bea42-426">지정된 된 개체에 대 한 잠금을 현재 소유한 스레드가 다른 스레드에서 액세스할 수 있도록 개체를 해제 하기 위해이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-426">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="bea42-427">호출자가 잠금을 획득 하려고 대기 하는 동안 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-427">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="bea42-428">이 메서드는 호출자가 다른 스레드의 작업의 결과로 발생 하는 상태가 변경 될 때까지 기다려야 하는 경우 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-428">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="bea42-429">호출 하면 스레드 `Wait`, 개체에 대 한 잠금을 해제 하 고 개체의 대기 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-429">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="bea42-430">개체의 준비 된 큐에 있는 다음 스레드에서 (있는 경우) 획득 된 잠금 개체의 단독으로 사용 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-430">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="bea42-431">호출 하는 모든 스레드가 `Wait` 신호를 받을 때까지 대기 중인 큐에 남아 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A>, 잠금 소유자가 전송 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-431">All threads that call `Wait` remain in the waiting queue until they receive a signal from <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>, sent by the owner of the lock.</span></span> <span data-ttu-id="bea42-432">경우 `Pulse` 스레드가 대기 중인 큐의 헤드에만 영향을 받는 전송 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-432">If `Pulse` is sent, only the thread at the head of the waiting queue is affected.</span></span> <span data-ttu-id="bea42-433">경우 `PulseAll` 개체에 대 한 대기 중인 모든 스레드에 영향을 받는 전송 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-433">If `PulseAll` is sent, all threads that are waiting for the object are affected.</span></span> <span data-ttu-id="bea42-434">신호를 받을 때 하나 이상의 스레드가 대기 중인 큐에 두고 준비 된 큐에 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-434">When the signal is received, one or more threads leave the waiting queue and enter the ready queue.</span></span> <span data-ttu-id="bea42-435">스레드가 준비 큐에서 잠금을 획득 허용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-435">A thread in the ready queue is permitted to reacquire the lock.</span></span>  
  
 <span data-ttu-id="bea42-436">이 메서드는 호출 스레드 개체에 대 한 잠금을 다시 가져오면를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-436">This method returns when the calling thread reacquires the lock on the object.</span></span> <span data-ttu-id="bea42-437">잠금의 소유자를 호출 하지 않는 경우이 메서드는 무기한으로 차단 하는 참고 `Pulse` 또는 `PulseAll`합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-437">Note that this method blocks indefinitely if the holder of the lock does not call `Pulse` or `PulseAll`.</span></span>  
  
 <span data-ttu-id="bea42-438">호출자에 게 실행 `Wait` 횟수에 관계 없이 한 번 <xref:System.Threading.Monitor.Enter%2A> 지정 된 개체를 호출 했습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-438">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="bea42-439">개념적으로 `Wait` 메서드는 호출자가 호출한 횟수를 저장 `Enter` 개체에서 호출 `Exit` 잠겨 있는 개체를 완전히 해제 하는 데 필요한 횟수 만큼 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-439">Conceptually, the `Wait` method stores the number of times the caller invoked `Enter` on the object and invokes `Exit` as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="bea42-440">개체를 획득 하려고 대기 하는 동안 호출자를 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-440">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="bea42-441">시스템 호출 호출자가 잠금을 다시 가져오면 `Enter` 는 저장 된 복원 하는 데 필요한 횟수 만큼 `Enter` 호출자에 대 한 수입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-441">When the caller reacquires the lock, the system calls `Enter` as many times as necessary to restore the saved `Enter` count for the caller.</span></span> <span data-ttu-id="bea42-442">호출 `Wait` 지정된 된 개체에 대 한 잠금을 해제 되지 않습니다 호출자에 게 다른 개체에 대 한 잠금의 소유자 인 경우 이러한 잠금은 해제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-442">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
 <span data-ttu-id="bea42-443">현재 잠금을, 잠금을 획득할 수 있는 스레드를 포함 하는 준비 된 큐에 대 한 참조 및 대기 중인 큐에 대 한 참조를 보유 하는 스레드에 대 한 참조를 포함 하 여 여러 개의 참조가 동기화 개체를 소유 하 고 있음을 확인 하는 개체의 상태 변경에 대 한 알림을 대기 중인 스레드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-443">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="bea42-444">합니다 <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, 및 `Wait` 동기화 된 코드 블록 내에서 메서드를 호출할 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-444">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="bea42-445">에 대 한 설명을 합니다 <xref:System.Threading.Monitor.Pulse%2A> 메서드 상황을 설명 하는 경우 <xref:System.Threading.Monitor.Pulse%2A> 대기 중인 스레드가 없을 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-445">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="bea42-446"><paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-446">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="bea42-447">호출한 스레드가 지정된 개체 잠금을 소유하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-447">The calling thread does not own the lock for the specified object.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="bea42-448"><see langword="Wait" />를 호출하는 스레드가 나중에 대기 상태에서 중단된 경우.</span><span class="sxs-lookup"><span data-stu-id="bea42-448">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span></span> <span data-ttu-id="bea42-449">이 예외는 다른 스레드가 이 스레드의 <see cref="M:System.Threading.Thread.Interrupt" /> 메서드를 호출할 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-449">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="bea42-450">관리되는 스레딩</span><span class="sxs-lookup"><span data-stu-id="bea42-450">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * int -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="bea42-451">대기할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-451">The object on which to wait.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="bea42-452">스레드가 준비된 큐에 들어가기 전에 대기할 시간(밀리초)입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-452">The number of milliseconds to wait before the thread enters the ready queue.</span></span></param>
        <summary><span data-ttu-id="bea42-453">개체의 잠금을 해제한 다음 잠금을 다시 가져올 때까지 현재 스레드를 차단합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-453">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span> <span data-ttu-id="bea42-454">지정된 시간 제한 간격이 지나면 스레드가 준비된 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-454">If the specified time-out interval elapses, the thread enters the ready queue.</span></span></summary>
        <returns><span data-ttu-id="bea42-455">지정된 시간이 경과하기 전에 잠금을 다시 가져오면 <see langword="true" />이고, 지정된 시간이 경과한 후에 잠금을 다시 가져오면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-455"><see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span></span> <span data-ttu-id="bea42-456">이 메서드는 잠금을 다시 가져올 때까지 반환하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-456">The method does not return until the lock is reacquired.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bea42-457">배타적 잠금을 다시 가져올 때까지이 메서드를 반환 하지 않습니다는 `obj` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-457">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="bea42-458">지정된 된 개체에 대 한 잠금을 현재 소유한 스레드가 다른 스레드에서 액세스할 수 있도록 개체를 해제 하기 위해이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-458">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="bea42-459">호출자가 잠금을 획득 하려고 대기 하는 동안 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-459">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="bea42-460">이 메서드는 호출자가 다른 스레드의 작업의 결과로 발생 하는 상태가 변경 될 때까지 기다려야 하는 경우 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-460">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="bea42-461">제한 시간이 다른 스레드가 먼저 호출 하지 않고 잠금을 해제 하는 경우 현재 스레드의 무기한으로 차단 되지 않습니다 보장 합니다 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="bea42-461">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="bea42-462">또한 스레드는 잠금을 더 빨리 다시 가져올 수 있도록 대기 큐의 다른 스레드에 앞서 무시 하 고, 준비 된 큐로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-462">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="bea42-463">스레드의 반환 값을 테스트할 수는 <xref:System.Threading.Monitor.Wait%2A> 제한 하기 전에 잠금을 다시 가져왔는지 여부를 결정 하는 방법입니다. 스레드는 대기를 일으킨 조건을 평가할 수 경우에 필요한 호출을 <xref:System.Threading.Monitor.Wait%2A> 메서드를 다시 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-463">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="bea42-464">호출 하면 스레드 `Wait`, 개체에 대 한 잠금을 해제 하 고 개체의 대기 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-464">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="bea42-465">개체의 준비 된 큐에 있는 다음 스레드에서 (있는 경우) 획득 된 잠금 개체의 단독으로 사용 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-465">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="bea42-466">호출한 스레드에서 `Wait` 잠금을 보유 하는 스레드 호출 될 때까지 대기 중인 큐에 남아 <xref:System.Threading.Monitor.PulseAll%2A>, 또는 큐에서 다음 이므로 잠금을 보유 하는 스레드 호출 <xref:System.Threading.Monitor.Pulse%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-466">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="bea42-467">그러나 경우 `millisecondsTimeout` 경과할 때까지이 개체를 호출 하는 다른 스레드가 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A> 잠금의 권한을 다시 얻기 위해 메서드를 원래 스레드가 준비 큐로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-467">However, if `millisecondsTimeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bea42-468">경우 <xref:System.Threading.Timeout.Infinite> 에 대해 지정 된 된 `millisecondsTimeout` 매개 변수를이 메서드에 무기한 차단 잠금 소유자를 호출 하지 않는 경우 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-468">If <xref:System.Threading.Timeout.Infinite> is specified for the `millisecondsTimeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="bea42-469">하는 경우 `millisecondsTimeout` 가 0을 호출 하는 스레드 `Wait` 잠금을 해제 한 다음 잠금의 권한을 다시 얻기 위해 즉시 준비 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-469">If `millisecondsTimeout` equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="bea42-470">호출자에 게 실행 `Wait` 횟수에 관계 없이 한 번 <xref:System.Threading.Monitor.Enter%2A> 지정 된 개체를 호출 했습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-470">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="bea42-471">개념적으로 `Wait` 메서드는 호출자가 호출한 횟수를 저장 <xref:System.Threading.Monitor.Enter%2A> 개체에서 호출 <xref:System.Threading.Monitor.Exit%2A> 잠겨 있는 개체를 완전히 해제 하는 데 필요한 횟수 만큼 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-471">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="bea42-472">개체를 획득 하려고 대기 하는 동안 호출자를 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-472">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="bea42-473">시스템 호출 호출자가 잠금을 다시 가져오면 <xref:System.Threading.Monitor.Enter%2A> 는 저장 된 복원 하는 데 필요한 횟수 만큼 <xref:System.Threading.Monitor.Enter%2A> 호출자에 대 한 수입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-473">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="bea42-474">호출 `Wait` 지정된 된 개체에 대 한 잠금을 해제 되지 않습니다 호출자에 게 다른 개체에 대 한 잠금의 소유자 인 경우 이러한 잠금은 해제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-474">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bea42-475">동기화 된 개체를 현재 잠금, 잠금을 획득할 수 있는 스레드를 포함 하는 준비 된 큐에 대 한 참조 및 포함 하는 대기 중인 큐에 대 한 참조를 보유 하는 스레드에 대 한 참조를 포함 하 여 여러 개의 참조가 포함 된 개체의 상태 변경에 대 한 알림을 대기 중인 스레드입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-475">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="bea42-476">합니다 <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, 및 `Wait` 동기화 된 코드 블록 내에서 메서드를 호출할 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-476">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="bea42-477">에 대 한 설명을 합니다 <xref:System.Threading.Monitor.Pulse%2A> 메서드 상황을 설명 하는 경우 <xref:System.Threading.Monitor.Pulse%2A> 대기 중인 스레드가 없을 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-477">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="bea42-478"><paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-478">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="bea42-479">호출한 스레드가 지정된 개체 잠금을 소유하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-479">The calling thread does not own the lock for the specified object.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="bea42-480"><see langword="Wait" />를 호출하는 스레드가 나중에 대기 상태에서 중단된 경우.</span><span class="sxs-lookup"><span data-stu-id="bea42-480">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span></span> <span data-ttu-id="bea42-481">이 예외는 다른 스레드가 이 스레드의 <see cref="M:System.Threading.Thread.Interrupt" /> 메서드를 호출할 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-481">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="bea42-482"><paramref name="millisecondsTimeout" /> 매개 변수의 값이 음이고 <see cref="F:System.Threading.Timeout.Infinite" />와 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-482">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="bea42-483">관리되는 스레딩</span><span class="sxs-lookup"><span data-stu-id="bea42-483">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * TimeSpan -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="bea42-484">대기할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-484">The object on which to wait.</span></span></param>
        <param name="timeout"><span data-ttu-id="bea42-485">스레드가 준비된 큐에 들어가기 전에 대기할 시간을 나타내는 <see cref="T:System.TimeSpan" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-485">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</span></span></param>
        <summary><span data-ttu-id="bea42-486">개체의 잠금을 해제한 다음 잠금을 다시 가져올 때까지 현재 스레드를 차단합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-486">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span> <span data-ttu-id="bea42-487">지정된 시간 제한 간격이 지나면 스레드가 준비된 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-487">If the specified time-out interval elapses, the thread enters the ready queue.</span></span></summary>
        <returns><span data-ttu-id="bea42-488">지정된 시간이 경과하기 전에 잠금을 다시 가져오면 <see langword="true" />이고, 지정된 시간이 경과한 후에 잠금을 다시 가져오면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-488"><see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span></span> <span data-ttu-id="bea42-489">이 메서드는 잠금을 다시 가져올 때까지 반환하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-489">The method does not return until the lock is reacquired.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bea42-490">배타적 잠금을 다시 가져올 때까지이 메서드를 반환 하지 않습니다는 `obj` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-490">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="bea42-491">지정된 된 개체에 대 한 잠금을 현재 소유한 스레드가 다른 스레드에서 액세스할 수 있도록 개체를 해제 하기 위해이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-491">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="bea42-492">호출자가 잠금을 획득 하려고 대기 하는 동안 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-492">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="bea42-493">이 메서드는 호출자가 다른 스레드의 작업의 결과로 발생 하는 상태가 변경 될 때까지 기다려야 하는 경우 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-493">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="bea42-494">제한 시간이 다른 스레드가 먼저 호출 하지 않고 잠금을 해제 하는 경우 현재 스레드의 무기한으로 차단 되지 않습니다 보장 합니다 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="bea42-494">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="bea42-495">또한 스레드는 잠금을 더 빨리 다시 가져올 수 있도록 대기 큐의 다른 스레드에 앞서 무시 하 고, 준비 된 큐로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-495">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="bea42-496">스레드의 반환 값을 테스트할 수는 <xref:System.Threading.Monitor.Wait%2A> 제한 하기 전에 잠금을 다시 가져왔는지 여부를 결정 하는 방법입니다. 스레드는 대기를 일으킨 조건을 평가할 수 경우에 필요한 호출을 <xref:System.Threading.Monitor.Wait%2A> 메서드를 다시 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-496">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="bea42-497">호출 하면 스레드 `Wait`, 개체에 대 한 잠금을 해제 하 고 개체의 대기 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-497">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="bea42-498">개체의 준비 된 큐에 있는 다음 스레드에서 (있는 경우) 획득 된 잠금 개체의 단독으로 사용 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-498">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="bea42-499">호출한 스레드에서 `Wait` 잠금을 보유 하는 스레드 호출 될 때까지 대기 중인 큐에 남아 <xref:System.Threading.Monitor.PulseAll%2A>, 또는 큐에서 다음 이므로 잠금을 보유 하는 스레드 호출 <xref:System.Threading.Monitor.Pulse%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-499">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="bea42-500">그러나 경우 `timeout` 경과할 때까지이 개체를 호출 하는 다른 스레드가 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A> 잠금의 권한을 다시 얻기 위해 메서드를 원래 스레드가 준비 큐로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-500">However, if `timeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bea42-501">경우는 <xref:System.TimeSpan> 에 대해 지정 된-1 밀리초를 나타내는 합니다 `timeout` 매개 변수를이 메서드에 무기한 차단 잠금 소유자를 호출 하지 않는 경우 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-501">If a <xref:System.TimeSpan> representing -1 millisecond is specified for the `timeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="bea42-502">하는 경우 `timeout` 은 0 밀리초를 호출 하는 스레드 `Wait` 잠금을 해제 한 다음 잠금의 권한을 다시 얻기 위해 즉시 준비 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-502">If `timeout` is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="bea42-503">호출자에 게 실행 `Wait` 횟수에 관계 없이 한 번 <xref:System.Threading.Monitor.Enter%2A> 지정 된 개체를 호출 했습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-503">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="bea42-504">개념적으로 `Wait` 메서드는 호출자가 호출한 횟수를 저장 <xref:System.Threading.Monitor.Enter%2A> 개체에서 호출 <xref:System.Threading.Monitor.Exit%2A> 잠겨 있는 개체를 완전히 해제 하는 데 필요한 횟수 만큼 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-504">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="bea42-505">개체를 획득 하려고 대기 하는 동안 호출자를 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-505">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="bea42-506">시스템 호출 호출자가 잠금을 다시 가져오면 <xref:System.Threading.Monitor.Enter%2A> 는 저장 된 복원 하는 데 필요한 횟수 만큼 <xref:System.Threading.Monitor.Enter%2A> 호출자에 대 한 수입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-506">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="bea42-507">호출 `Wait` 지정된 된 개체에 대 한 잠금을 해제 되지 않습니다 호출자에 게 다른 개체에 대 한 잠금의 소유자 인 경우 이러한 잠금은 해제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-507">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bea42-508">동기화 된 개체를 현재 잠금, 잠금을 획득할 수 있는 스레드를 포함 하는 준비 된 큐에 대 한 참조 및 포함 하는 대기 중인 큐에 대 한 참조를 보유 하는 스레드에 대 한 참조를 포함 하 여 여러 개의 참조가 포함 된 개체의 상태 변경에 대 한 알림을 대기 중인 스레드입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-508">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="bea42-509">합니다 <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, 및 `Wait` 동기화 된 코드 블록 내에서 메서드를 호출할 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-509">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="bea42-510">에 대 한 설명을 합니다 <xref:System.Threading.Monitor.Pulse%2A> 메서드 상황을 설명 하는 경우 <xref:System.Threading.Monitor.Pulse%2A> 대기 중인 스레드가 없을 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-510">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="bea42-511"><paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-511">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="bea42-512">호출한 스레드가 지정된 개체 잠금을 소유하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-512">The calling thread does not own the lock for the specified object.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="bea42-513"><see langword="Wait" />를 호출하는 스레드가 나중에 대기 상태에서 중단된 경우.</span><span class="sxs-lookup"><span data-stu-id="bea42-513">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span></span> <span data-ttu-id="bea42-514">이 예외는 다른 스레드가 이 스레드의 <see cref="M:System.Threading.Thread.Interrupt" /> 메서드를 호출할 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-514">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="bea42-515"><paramref name="timeout" /> 매개 변수의 값(밀리초)이 음수이고 <see cref="F:System.Threading.Timeout.Infinite" />(-1밀리초)를 나타내지 않거나 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-515">The value of the <paramref name="timeout" /> parameter in milliseconds is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (-1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="bea42-516">관리되는 스레딩</span><span class="sxs-lookup"><span data-stu-id="bea42-516">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * int * bool -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="bea42-517">대기할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-517">The object on which to wait.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="bea42-518">스레드가 준비된 큐에 들어가기 전에 대기할 시간(밀리초)입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-518">The number of milliseconds to wait before the thread enters the ready queue.</span></span></param>
        <param name="exitContext"><span data-ttu-id="bea42-519">대기 전에 컨텍스트의 동기화 도메인(동기화된 컨텍스트에 있는 경우)을 끝내고 다시 가져오면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-519"><see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="bea42-520">개체의 잠금을 해제한 다음 잠금을 다시 가져올 때까지 현재 스레드를 차단합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-520">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span> <span data-ttu-id="bea42-521">지정된 시간 제한 간격이 지나면 스레드가 준비된 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-521">If the specified time-out interval elapses, the thread enters the ready queue.</span></span> <span data-ttu-id="bea42-522">또한 이 메서드는 컨텍스트의 동기화 도메인(동기화된 컨텍스트에 있는 경우)을 대기 전에 종료하고 나중에 다시 가져오는지 여부도 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-522">This method also specifies whether the synchronization domain for the context (if in a synchronized context) is exited before the wait and reacquired afterward.</span></span></summary>
        <returns><span data-ttu-id="bea42-523">지정된 시간이 경과하기 전에 잠금을 다시 가져오면 <see langword="true" />이고, 지정된 시간이 경과한 후에 잠금을 다시 가져오면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-523"><see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span></span> <span data-ttu-id="bea42-524">이 메서드는 잠금을 다시 가져올 때까지 반환하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-524">The method does not return until the lock is reacquired.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bea42-525">배타적 잠금을 다시 가져올 때까지이 메서드를 반환 하지 않습니다는 `obj` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-525">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="bea42-526">지정된 된 개체에 대 한 잠금을 현재 소유한 스레드가 다른 스레드에서 액세스할 수 있도록 개체를 해제 하기 위해이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-526">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="bea42-527">호출자가 잠금을 획득 하려고 대기 하는 동안 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-527">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="bea42-528">이 메서드는 호출자가 다른 스레드의 작업의 결과로 발생 하는 상태가 변경 될 때까지 기다려야 하는 경우 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-528">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="bea42-529">제한 시간이 다른 스레드가 먼저 호출 하지 않고 잠금을 해제 하는 경우 현재 스레드의 무기한으로 차단 되지 않습니다 보장 합니다 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="bea42-529">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="bea42-530">또한 스레드는 잠금을 더 빨리 다시 가져올 수 있도록 대기 큐의 다른 스레드에 앞서 무시 하 고, 준비 된 큐로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-530">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="bea42-531">스레드의 반환 값을 테스트할 수는 <xref:System.Threading.Monitor.Wait%2A> 제한 하기 전에 잠금을 다시 가져왔는지 여부를 결정 하는 방법입니다. 스레드는 대기를 일으킨 조건을 평가할 수 경우에 필요한 호출을 <xref:System.Threading.Monitor.Wait%2A> 메서드를 다시 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-531">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="bea42-532">호출 하면 스레드 `Wait`, 잠금을 해제 하 고 대기 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-532">When a thread calls `Wait`, it releases the lock and enters the waiting queue.</span></span> <span data-ttu-id="bea42-533">이 시점에서 준비 된 큐에 있는 다음 스레드 (있는 경우)는 제어할 수 있게 잠금.</span><span class="sxs-lookup"><span data-stu-id="bea42-533">At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</span></span> <span data-ttu-id="bea42-534">호출한 스레드에서 `Wait` 잠금을 보유 하는 스레드 호출 될 때까지 대기 중인 큐에 남아 <xref:System.Threading.Monitor.PulseAll%2A>, 또는 큐에서 다음 이므로 잠금을 보유 하는 스레드 호출 <xref:System.Threading.Monitor.Pulse%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-534">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="bea42-535">그러나 경우 `millisecondsTimeout` 경과할 때까지이 개체를 호출 하는 다른 스레드가 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A> 잠금의 권한을 다시 얻기 위해 메서드를 원래 스레드가 준비 큐로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-535">However, if `millisecondsTimeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bea42-536">경우 <xref:System.Threading.Timeout.Infinite> 에 대해 지정 된 된 `millisecondsTimeout` 매개 변수를이 메서드에 무기한 차단 잠금 소유자를 호출 하지 않는 경우 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-536">If <xref:System.Threading.Timeout.Infinite> is specified for the `millisecondsTimeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="bea42-537">하는 경우 `millisecondsTimeout` 가 0을 호출 하는 스레드 `Wait` 잠금을 해제 한 다음 잠금의 권한을 다시 얻기 위해 즉시 준비 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-537">If `millisecondsTimeout` equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="bea42-538">호출자에 게 실행 `Wait` 횟수에 관계 없이 한 번 <xref:System.Threading.Monitor.Enter%2A> 지정 된 개체를 호출 했습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-538">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="bea42-539">개념적으로 `Wait` 메서드는 호출자가 호출한 횟수를 저장 <xref:System.Threading.Monitor.Enter%2A> 개체에서 호출 <xref:System.Threading.Monitor.Exit%2A> 잠겨 있는 개체를 완전히 해제 하는 데 필요한 횟수 만큼 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-539">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="bea42-540">개체를 획득 하려고 대기 하는 동안 호출자를 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-540">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="bea42-541">시스템 호출 호출자가 잠금을 다시 가져오면 <xref:System.Threading.Monitor.Enter%2A> 는 저장 된 복원 하는 데 필요한 횟수 만큼 <xref:System.Threading.Monitor.Enter%2A> 호출자에 대 한 수입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-541">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="bea42-542">호출 `Wait` 지정된 된 개체에 대 한 잠금을 해제 되지 않습니다 호출자에 게 다른 개체에 대 한 잠금의 소유자 인 경우 이러한 잠금은 해제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-542">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bea42-543">동기화 된 개체를 현재 잠금, 잠금을 획득할 수 있는 스레드를 포함 하는 준비 된 큐에 대 한 참조 및 포함 하는 대기 중인 큐에 대 한 참조를 보유 하는 스레드에 대 한 참조를 포함 하 여 여러 개의 참조가 포함 된 개체의 상태 변경에 대 한 알림을 대기 중인 스레드입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-543">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="bea42-544">합니다 <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, 및 `Wait` 동기화 된 코드 블록 내에서 메서드를 호출할 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-544">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="bea42-545">에 대 한 설명을 합니다 <xref:System.Threading.Monitor.Pulse%2A> 메서드 상황을 설명 하는 경우 <xref:System.Threading.Monitor.Pulse%2A> 대기 중인 스레드가 없을 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-545">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="bea42-546">종료 컨텍스트에 대 한 참고 사항</span><span class="sxs-lookup"><span data-stu-id="bea42-546">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="bea42-547">합니다`exitContext` 매개 변수 효과가 있습니다를 <xref:System.Threading.Monitor.Wait%2A> 기본이 아닌 관리 되는 컨텍스트 내에서 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-547">The`exitContext` parameter has no effect unless the <xref:System.Threading.Monitor.Wait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="bea42-548">파생 된 클래스의 인스턴스로 호출 내에서 스레드 경우 발생할 수 있습니다 <xref:System.ContextBoundObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-548">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="bea42-549">파생 되지 않은 클래스에 메서드를 현재 실행 중인 경우에 <xref:System.ContextBoundObject>같은 <xref:System.String>, 기본이 아닌 컨텍스트에서 할 경우를 <xref:System.ContextBoundObject> 가 현재 응용 프로그램 도메인에서 스택에 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-549">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="bea42-550">사용자 코드가 아닌 컨텍스트에서 실행 되는 경우를 지정 하 `true` 에 대 한 `exitContext` 기본값이 아닌 관리 되는 컨텍스트를 종료 하려면 스레드 (즉, 기본 컨텍스트로 전환)를 실행 하기 전에 <xref:System.Threading.Monitor.Wait%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="bea42-550">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.Monitor.Wait%2A> method.</span></span> <span data-ttu-id="bea42-551">호출 후 원래 컨텍스트로 돌아갑니다는 <xref:System.Threading.Monitor.Wait%2A> 메서드를 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-551">It returns to the original nondefault context after the call to the <xref:System.Threading.Monitor.Wait%2A> method completes.</span></span>  
  
 <span data-ttu-id="bea42-552">컨텍스트 바인딩 클래스에 유용할 수 있습니다는 <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> 특성을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-552">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied.</span></span> <span data-ttu-id="bea42-553">이 경우 클래스의 멤버에 대 한 모든 호출을 자동으로 동기화 및 동기화 도메인 클래스에 대 한 코드의 전체 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-553">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="bea42-554">멤버의 호출 스택의 코드를 호출 하는 경우는 <xref:System.Threading.Monitor.Wait%2A> 메서드를 지정 하 고 `true` 에 대 한 `exitContext`, 스레드가 종료 동기화 도메인을 계속 하려면 개체의 모든 멤버에 대 한 호출에서 차단 된 스레드를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-554">If code in the call stack of a member calls the <xref:System.Threading.Monitor.Wait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="bea42-555">경우는 <xref:System.Threading.Monitor.Wait%2A> 메서드를 호출 하는 스레드 컨텍스트의 동기화 도메인을 다시 입력 하기 위해 대기 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-555">When the <xref:System.Threading.Monitor.Wait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="bea42-556"><paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-556">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="bea42-557"><see langword="Wait" />가 동기화된 코드 블록 내에서 호출되지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-557"><see langword="Wait" /> is not invoked from within a synchronized block of code.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="bea42-558"><see langword="Wait" />를 호출하는 스레드가 나중에 대기 상태에서 중단된 경우.</span><span class="sxs-lookup"><span data-stu-id="bea42-558">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span></span> <span data-ttu-id="bea42-559">이 예외는 다른 스레드가 이 스레드의 <see cref="M:System.Threading.Thread.Interrupt" /> 메서드를 호출할 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-559">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="bea42-560"><paramref name="millisecondsTimeout" /> 매개 변수의 값이 음이고 <see cref="F:System.Threading.Timeout.Infinite" />와 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-560">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="bea42-561">관리되는 스레딩</span><span class="sxs-lookup"><span data-stu-id="bea42-561">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * TimeSpan * bool -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="bea42-562">대기할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-562">The object on which to wait.</span></span></param>
        <param name="timeout"><span data-ttu-id="bea42-563">스레드가 준비된 큐에 들어가기 전에 대기할 시간을 나타내는 <see cref="T:System.TimeSpan" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-563">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</span></span></param>
        <param name="exitContext"><span data-ttu-id="bea42-564">대기 전에 컨텍스트의 동기화 도메인(동기화된 컨텍스트에 있는 경우)을 끝내고 다시 가져오면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-564"><see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="bea42-565">개체의 잠금을 해제한 다음 잠금을 다시 가져올 때까지 현재 스레드를 차단합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-565">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span> <span data-ttu-id="bea42-566">지정된 시간 제한 간격이 지나면 스레드가 준비된 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-566">If the specified time-out interval elapses, the thread enters the ready queue.</span></span> <span data-ttu-id="bea42-567">필요에 따라 동기화된 컨텍스트의 동기화 도메인을 대기 전에 종료하고 나중에 해당 도메인을 다시 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-567">Optionally exits the synchronization domain for the synchronized context before the wait and reacquires the domain afterward.</span></span></summary>
        <returns><span data-ttu-id="bea42-568">지정된 시간이 경과하기 전에 잠금을 다시 가져오면 <see langword="true" />이고, 지정된 시간이 경과한 후에 잠금을 다시 가져오면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-568"><see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span></span> <span data-ttu-id="bea42-569">이 메서드는 잠금을 다시 가져올 때까지 반환하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-569">The method does not return until the lock is reacquired.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bea42-570">배타적 잠금을 다시 가져올 때까지이 메서드를 반환 하지 않습니다는 `obj` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-570">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="bea42-571">지정된 된 개체에 대 한 잠금을 현재 소유한 스레드가 다른 스레드에서 액세스할 수 있도록 개체를 해제 하기 위해이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-571">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="bea42-572">호출자가 잠금을 획득 하려고 대기 하는 동안 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-572">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="bea42-573">이 메서드는 호출자가 다른 스레드의 작업의 결과로 발생 하는 상태가 변경 될 때까지 기다려야 하는 경우 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-573">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="bea42-574">제한 시간이 다른 스레드가 먼저 호출 하지 않고 잠금을 해제 하는 경우 현재 스레드의 무기한으로 차단 되지 않습니다 보장 합니다 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="bea42-574">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="bea42-575">또한 스레드는 잠금을 더 빨리 다시 가져올 수 있도록 대기 큐의 다른 스레드에 앞서 무시 하 고, 준비 된 큐로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-575">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="bea42-576">스레드의 반환 값을 테스트할 수는 <xref:System.Threading.Monitor.Wait%2A> 제한 하기 전에 잠금을 다시 가져왔는지 여부를 결정 하는 방법입니다. 스레드는 대기를 일으킨 조건을 평가할 수 경우에 필요한 호출을 <xref:System.Threading.Monitor.Wait%2A> 메서드를 다시 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-576">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="bea42-577">호출 하면 스레드 `Wait`, 잠금을 해제 하 고 대기 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-577">When a thread calls `Wait`, it releases the lock and enters the waiting queue.</span></span> <span data-ttu-id="bea42-578">이 시점에서 준비 된 큐에 있는 다음 스레드 (있는 경우)는 제어할 수 있게 잠금.</span><span class="sxs-lookup"><span data-stu-id="bea42-578">At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</span></span> <span data-ttu-id="bea42-579">호출한 스레드에서 `Wait` 잠금을 보유 하는 스레드 호출 될 때까지 대기 중인 큐에 남아 <xref:System.Threading.Monitor.PulseAll%2A>, 또는 큐에서 다음 이므로 잠금을 보유 하는 스레드 호출 <xref:System.Threading.Monitor.Pulse%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-579">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="bea42-580">그러나 경우 `timeout` 시간 (밀리초)는 다른 스레드가이 개체를 호출 하기 전에 경과 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A> 잠금의 권한을 다시 얻기 위해 메서드를 원래 스레드가 준비 큐로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-580">However, if `timeout` milliseconds elapse before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bea42-581">경우는 <xref:System.TimeSpan> 에 대해 지정 된-1 밀리초를 나타내는 합니다 `timeout` 매개 변수를이 메서드에 무기한 차단 잠금 소유자를 호출 하지 않는 경우 <xref:System.Threading.Monitor.Pulse%2A> 또는 <xref:System.Threading.Monitor.PulseAll%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-581">If a <xref:System.TimeSpan> representing -1 millisecond is specified for the `timeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="bea42-582">하는 경우 `timeout` 은 0 밀리초를 호출 하는 스레드 `Wait` 잠금을 해제 한 다음 잠금의 권한을 다시 얻기 위해 즉시 준비 큐에 들어갑니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-582">If `timeout` is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="bea42-583">호출자에 게 실행 `Wait` 횟수에 관계 없이 한 번 <xref:System.Threading.Monitor.Enter%2A> 지정 된 개체를 호출 했습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-583">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="bea42-584">개념적으로 `Wait` 메서드는 호출자가 호출한 횟수를 저장 <xref:System.Threading.Monitor.Enter%2A> 개체에서 호출 <xref:System.Threading.Monitor.Exit%2A> 잠겨 있는 개체를 완전히 해제 하는 데 필요한 횟수 만큼 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-584">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="bea42-585">개체를 획득 하려고 대기 하는 동안 호출자를 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-585">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="bea42-586">시스템 호출 호출자가 잠금을 다시 가져오면 <xref:System.Threading.Monitor.Enter%2A> 는 저장 된 복원 하는 데 필요한 횟수 만큼 <xref:System.Threading.Monitor.Enter%2A> 호출자에 대 한 수입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-586">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="bea42-587">호출 `Wait` 지정된 된 개체에 대 한 잠금을 해제 되지 않습니다 호출자에 게 다른 개체에 대 한 잠금의 소유자 인 경우 이러한 잠금은 해제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-587">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bea42-588">동기화 된 개체를 현재 잠금, 잠금을 획득할 수 있는 스레드를 포함 하는 준비 된 큐에 대 한 참조 및 포함 하는 대기 중인 큐에 대 한 참조를 보유 하는 스레드에 대 한 참조를 포함 하 여 여러 개의 참조가 포함 된 개체의 상태 변경에 대 한 알림을 대기 중인 스레드입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-588">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="bea42-589">합니다 <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, 및 `Wait` 동기화 된 코드 블록 내에서 메서드를 호출할 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-589">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="bea42-590">에 대 한 설명을 합니다 <xref:System.Threading.Monitor.Pulse%2A> 메서드 상황을 설명 하는 경우 <xref:System.Threading.Monitor.Pulse%2A> 대기 중인 스레드가 없을 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-590">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="bea42-591">종료 컨텍스트에 대 한 참고 사항</span><span class="sxs-lookup"><span data-stu-id="bea42-591">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="bea42-592">합니다`exitContext` 매개 변수 효과가 있습니다를 <xref:System.Threading.Monitor.Wait%2A> 기본이 아닌 관리 되는 컨텍스트 내에서 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-592">The`exitContext` parameter has no effect unless the <xref:System.Threading.Monitor.Wait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="bea42-593">파생 된 클래스의 인스턴스로 호출 내에서 스레드 경우 발생할 수 있습니다 <xref:System.ContextBoundObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-593">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="bea42-594">파생 되지 않은 클래스에 메서드를 현재 실행 중인 경우에 <xref:System.ContextBoundObject>같은 <xref:System.String>, 기본이 아닌 컨텍스트에서 할 경우를 <xref:System.ContextBoundObject> 가 현재 응용 프로그램 도메인에서 스택에 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-594">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="bea42-595">사용자 코드가 아닌 컨텍스트에서 실행 되는 경우를 지정 하 `true` 에 대 한 `exitContext` 기본값이 아닌 관리 되는 컨텍스트를 종료 하려면 스레드 (즉, 기본 컨텍스트로 전환)를 실행 하기 전에 <xref:System.Threading.Monitor.Wait%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="bea42-595">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.Monitor.Wait%2A> method.</span></span> <span data-ttu-id="bea42-596">호출 후 원래 컨텍스트로 돌아갑니다는 <xref:System.Threading.Monitor.Wait%2A> 메서드를 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-596">It returns to the original nondefault context after the call to the <xref:System.Threading.Monitor.Wait%2A> method completes.</span></span>  
  
 <span data-ttu-id="bea42-597">컨텍스트 바인딩 클래스에 유용할 수 있습니다는 <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> 특성을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-597">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied.</span></span> <span data-ttu-id="bea42-598">이 경우 클래스의 멤버에 대 한 모든 호출을 자동으로 동기화 및 동기화 도메인 클래스에 대 한 코드의 전체 본문입니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-598">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="bea42-599">멤버의 호출 스택의 코드를 호출 하는 경우는 <xref:System.Threading.Monitor.Wait%2A> 메서드를 지정 하 고 `true` 에 대 한 `exitContext`, 스레드가 종료 동기화 도메인을 계속 하려면 개체의 모든 멤버에 대 한 호출에서 차단 된 스레드를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-599">If code in the call stack of a member calls the <xref:System.Threading.Monitor.Wait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="bea42-600">경우는 <xref:System.Threading.Monitor.Wait%2A> 메서드를 호출 하는 스레드 컨텍스트의 동기화 도메인을 다시 입력 하기 위해 대기 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-600">When the <xref:System.Threading.Monitor.Wait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="bea42-601"><paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-601">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="bea42-602"><see langword="Wait" />가 동기화된 코드 블록 내에서 호출되지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-602"><see langword="Wait" /> is not invoked from within a synchronized block of code.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="bea42-603">Wait를 호출하는 스레드가 나중에 대기 상태에서 중단된 경우.</span><span class="sxs-lookup"><span data-stu-id="bea42-603">The thread that invokes Wait is later interrupted from the waiting state.</span></span> <span data-ttu-id="bea42-604">이 예외는 다른 스레드가 이 스레드의 <see cref="M:System.Threading.Thread.Interrupt" /> 메서드를 호출할 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="bea42-604">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="bea42-605"><paramref name="timeout" /> 매개 변수가 음수이고 <see cref="F:System.Threading.Timeout.Infinite" />(-1밀리초)를 나타내지 않거나 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="bea42-605">The <paramref name="timeout" /> parameter is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (-1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="bea42-606">관리되는 스레딩</span><span class="sxs-lookup"><span data-stu-id="bea42-606">Managed Threading</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>