<Type Name="SpinWait" FullName="System.Threading.SpinWait">
  <Metadata><Meta Name="ms.openlocfilehash" Value="938fd6351832676af696f9d8c6b9201189b24868" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56386601" /></Metadata><TypeSignature Language="C#" Value="public struct SpinWait" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SpinWait extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.SpinWait" />
  <TypeSignature Language="VB.NET" Value="Public Structure SpinWait" />
  <TypeSignature Language="C++ CLI" Value="public value class SpinWait" />
  <TypeSignature Language="F#" Value="type SpinWait = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="3a57d-101">회전 기반 대기를 지원합니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-101">Provides support for spin-based waiting.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a57d-102"><xref:System.Threading.SpinWait> 일반적인 회전 논리를 캡슐화합니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-102"><xref:System.Threading.SpinWait> encapsulates common spinning logic.</span></span> <span data-ttu-id="3a57d-103">단일 프로세서 컴퓨터에서 생성 되는 트랜잭션 사용 중 대기 하는 대신 항상 사용 됩니다 및 Hyper-threading technology를 사용 하는 Intel 프로세서를 사용 하 여 컴퓨터 하드웨어 스레드 부족 문제를 막을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-103">On single-processor machines, yields are always used instead of busy waits, and on computers with Intel processors employing Hyper-Threading technology, it helps to prevent hardware thread starvation.</span></span> <span data-ttu-id="3a57d-104">SpinWait 회전 및 true 생성 좋은 혼합을 캡슐화합니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-104">SpinWait encapsulates a good mixture of spinning and true yielding.</span></span>  
  
 <span data-ttu-id="3a57d-105"><xref:System.Threading.SpinWait> 즉, 하위 수준의 코드 SpinWait 불필요 한 할당 오버 헤드의 걱정 없이 활용할 수는 값 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-105"><xref:System.Threading.SpinWait> is a value type, which means that low-level code can utilize SpinWait without fear of unnecessary allocation overheads.</span></span> <span data-ttu-id="3a57d-106">SpinWait 일반 애플리케이션에 일반적으로 유용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-106">SpinWait is not generally useful for ordinary applications.</span></span> <span data-ttu-id="3a57d-107">대부분의 경우에서와 같은.NET Framework에서 제공 되는 동기화 클래스 사용 해야 <xref:System.Threading.Monitor>합니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-107">In most cases, you should use the synchronization classes provided by the .NET Framework, such as <xref:System.Threading.Monitor>.</span></span> <span data-ttu-id="3a57d-108">하지만 스핀 대기 인 필요 대부분의 용도 <xref:System.Threading.SpinWait> 형식 보다 선호 해야는 <xref:System.Threading.Thread.SpinWait%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3a57d-108">For most purposes where spin waiting is required, however, the <xref:System.Threading.SpinWait> type should be preferred over the <xref:System.Threading.Thread.SpinWait%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a57d-109">다음 예제에서는 사용 하는 방법을 보여 줍니다는 <xref:System.Threading.SpinWait>:</span><span class="sxs-lookup"><span data-stu-id="3a57d-109">The following example shows how to use a <xref:System.Threading.SpinWait>:</span></span>  
  
 [!code-csharp[System.Threading.SpinWait#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.spinwait/cs/spinwait.cs#01)]
 [!code-vb[System.Threading.SpinWait#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.spinwait/vb/spinwait.vb#01)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="3a57d-110">하지만 <see cref="T:System.Threading.SpinWait" /> 는 동시 애플리케이션에서 사용할 수 있도록 설계를 설계 되지는 않았습니다 여러 스레드에서 동시에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-110">While <see cref="T:System.Threading.SpinWait" /> is designed to be used in concurrent applications, it is not designed to be used from multiple threads concurrently.</span></span> <span data-ttu-id="3a57d-111"><see cref="T:System.Threading.SpinWait" /> 멤버는 스레드로부터 안전 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-111"><see cref="T:System.Threading.SpinWait" /> members are not thread-safe.</span></span> <span data-ttu-id="3a57d-112">여러 스레드가 실행 해야 하는 경우에 고유한 인스턴스를 사용 하 여 다음 작업을 해야 각 <see cref="T:System.Threading.SpinWait" />합니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-112">If multiple threads must spin, each should use its own instance of <see cref="T:System.Threading.SpinWait" />.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/threading/spinwait.md"><span data-ttu-id="3a57d-113">SpinWait</span><span class="sxs-lookup"><span data-stu-id="3a57d-113">SpinWait</span></span></related>
    <related type="Article" href="~/docs/standard/threading/how-to-use-spinwait-to-implement-a-two-phase-wait-operation.md"><span data-ttu-id="3a57d-114">방법: SpinWait을 사용하여 2단계 대기 작업 구현</span><span class="sxs-lookup"><span data-stu-id="3a57d-114">How to: Use SpinWait to Implement a Two-Phase Wait Operation</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinWait.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Threading.SpinWait.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a57d-115">이 인스턴스에서 <see cref="M:System.Threading.SpinWait.SpinOnce" />가 호출된 횟수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-115">Gets the number of times <see cref="M:System.Threading.SpinWait.SpinOnce" /> has been called on this instance.</span></span></summary>
        <value><span data-ttu-id="3a57d-116">이 인스턴스에서 <see cref="M:System.Threading.SpinWait.SpinOnce" />가 호출된 횟수를 나타내는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-116">Returns an integer that represents the number of times <see cref="M:System.Threading.SpinWait.SpinOnce" /> has been called on this instance.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/36012f42-34e5-4f86-adf4-973f433ed6c6"><span data-ttu-id="3a57d-117">SpinWait</span><span class="sxs-lookup"><span data-stu-id="3a57d-117">SpinWait</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/b2ac4e4a-051a-4f65-b4b9-f8e103aff195"><span data-ttu-id="3a57d-118">방법: SpinWait을 사용하여 2단계 대기 작업 구현</span><span class="sxs-lookup"><span data-stu-id="3a57d-118">How to: Use SpinWait to Implement a Two-Phase Wait Operation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="NextSpinWillYield">
      <MemberSignature Language="C#" Value="public bool NextSpinWillYield { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NextSpinWillYield" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinWait.NextSpinWillYield" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NextSpinWillYield As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NextSpinWillYield { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.NextSpinWillYield : bool" Usage="System.Threading.SpinWait.NextSpinWillYield" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a57d-119">다음 <see cref="M:System.Threading.SpinWait.SpinOnce" /> 호출이 프로세서를 생성하여 강제 컨텍스트 전환을 트리거할지 여부를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-119">Gets whether the next call to <see cref="M:System.Threading.SpinWait.SpinOnce" /> will yield the processor, triggering a forced context switch.</span></span></summary>
        <value><span data-ttu-id="3a57d-120">다음 <see cref="M:System.Threading.SpinWait.SpinOnce" /> 호출이 프로세서를 생성하여 강제 컨텍스트 전환을 트리거할지 여부입니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-120">Whether the next call to <see cref="M:System.Threading.SpinWait.SpinOnce" /> will yield the processor, triggering a forced context switch.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a57d-121">단일 CPU 컴퓨터에서 <xref:System.Threading.SpinWait.SpinOnce%2A> 항상 프로세서를 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-121">On a single-CPU machine, <xref:System.Threading.SpinWait.SpinOnce%2A> always yields the processor.</span></span> <span data-ttu-id="3a57d-122">여러 Cpu가 있는 컴퓨터에서 <xref:System.Threading.SpinWait.SpinOnce%2A> 호출 수를 지정 하지 않은 후 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-122">On machines with multiple CPUs, <xref:System.Threading.SpinWait.SpinOnce%2A> may yield after an unspecified number of calls.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/36012f42-34e5-4f86-adf4-973f433ed6c6"><span data-ttu-id="3a57d-123">SpinWait</span><span class="sxs-lookup"><span data-stu-id="3a57d-123">SpinWait</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/b2ac4e4a-051a-4f65-b4b9-f8e103aff195"><span data-ttu-id="3a57d-124">방법: SpinWait을 사용하여 2단계 대기 작업 구현</span><span class="sxs-lookup"><span data-stu-id="3a57d-124">How to: Use SpinWait to Implement a Two-Phase Wait Operation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="spinWait.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a57d-125">회전 수를 다시 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-125">Resets the spin counter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a57d-126">따라서 <xref:System.Threading.SpinWait.SpinOnce%2A> 하 고 <xref:System.Threading.SpinWait.NextSpinWillYield%2A> 동작에 대 한 호출 처럼 <xref:System.Threading.SpinWait.SpinOnce%2A> 이 인스턴스에서 실행 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-126">This makes <xref:System.Threading.SpinWait.SpinOnce%2A> and <xref:System.Threading.SpinWait.NextSpinWillYield%2A> behave as though no calls to <xref:System.Threading.SpinWait.SpinOnce%2A> had been issued on this instance.</span></span> <span data-ttu-id="3a57d-127">경우는 <xref:System.Threading.SpinWait> 인스턴스를 여러 번 다시 사용, 너무 빨리 생성을 방지 하기 위해를 다시 설정 하려면 유용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-127">If a <xref:System.Threading.SpinWait> instance is reused many times, it may be useful to reset it to avoid yielding too soon.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a57d-128">다음은 간단한 잠금 해제 스택 구현에서 SpinWait을 사용 하는 예제입니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-128">The following is an example of using SpinWait in a simple lock-free stack implementation.</span></span> <span data-ttu-id="3a57d-129">(이것이 예로 든 것일 뿐입니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-129">(This is just an example.</span></span> <span data-ttu-id="3a57d-130">효율적이 고 스레드로부터 안전한 스택에 필요한 경우 ConcurrentStack를 사용 하는 것이 좋습니다.)</span><span class="sxs-lookup"><span data-stu-id="3a57d-130">If an efficient, thread-safe stack is needed, consider using ConcurrentStack.)</span></span>  
  
 `// C#`  
  
 `public class LockFreeStack<T>`  
  
 `{`  
  
 `private volatile Node m_head;`  
  
 `private class Node { public Node Next; public T Value; }`  
  
 `public void Push(T item)`  
  
 `{`  
  
 `var spin = new SpinWait();`  
  
 `Node node = new Node { Value = item }, head;`  
  
 `while (true)`  
  
 `{`  
  
 `head = m_head;`  
  
 `node.Next = head;`  
  
 `if (Interlocked.CompareExchange(ref m_head, node, head) == head) break;`  
  
 `spin.SpinOnce();`  
  
 `}`  
  
 `}`  
  
 `public bool TryPop(out T result)`  
  
 `{`  
  
 `result = default(T);`  
  
 `var spin = new SpinWait();`  
  
 `Node head;`  
  
 `while (true)`  
  
 `{`  
  
 `head = m_head;`  
  
 `if (head == null) return false;`  
  
 `if (Interlocked.CompareExchange(ref m_head, head.Next, head) == head)`  
  
 `{`  
  
 `result = head.Value;`  
  
 `return true;`  
  
 `}`  
  
 `spin.SpinOnce();`  
  
 `}`  
  
 `}`  
  
 `}`  
  
 `' Visual Basic`  
  
 `Public Class LockFreeStack(Of T)`  
  
 `Private m_head As Node`  
  
 `Private Class Node`  
  
 `Public [Next] As Node`  
  
 `Public Value As T`  
  
 `End Class`  
  
 `Public Sub Push(ByVal item As T)`  
  
 `Dim spin As New SpinWait()`  
  
 `Dim head As Node, node As New Node With {.Value = item}`  
  
 `While True`  
  
 `Thread.MemoryBarrier()`  
  
 `head = m_head`  
  
 `node.Next = head`  
  
 `If Interlocked.CompareExchange(m_head, node, head) Is head Then Exit While`  
  
 `spin.SpinOnce()`  
  
 `End While`  
  
 `End Sub`  
  
 `Public Function TryPop(ByRef result As T) As Boolean`  
  
 `result = CType(Nothing, T)`  
  
 `Dim spin As New SpinWait()`  
  
 `Dim head As Node`  
  
 `While True`  
  
 `Thread.MemoryBarrier()`  
  
 `head = m_head`  
  
 `If head Is Nothing Then Return False`  
  
 `If Interlocked.CompareExchange(m_head, head.Next, head) Is head Then`  
  
 `result = head.Value`  
  
 `Return True`  
  
 `End If`  
  
 `spin.SpinOnce()`  
  
 `End While`  
  
 `End Function`  
  
 `End Class`  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/36012f42-34e5-4f86-adf4-973f433ed6c6"><span data-ttu-id="3a57d-131">SpinWait</span><span class="sxs-lookup"><span data-stu-id="3a57d-131">SpinWait</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/b2ac4e4a-051a-4f65-b4b9-f8e103aff195"><span data-ttu-id="3a57d-132">방법: SpinWait을 사용하여 2단계 대기 작업 구현</span><span class="sxs-lookup"><span data-stu-id="3a57d-132">How to: Use SpinWait to Implement a Two-Phase Wait Operation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SpinOnce">
      <MemberSignature Language="C#" Value="public void SpinOnce ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpinOnce() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.SpinOnce" />
      <MemberSignature Language="VB.NET" Value="Public Sub SpinOnce ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpinOnce();" />
      <MemberSignature Language="F#" Value="member this.SpinOnce : unit -&gt; unit" Usage="spinWait.SpinOnce " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a57d-133">단일 회전을 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-133">Performs a single spin.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a57d-134">이 일반적으로 루프에서 호출 및 횟수에 따라 동작이 변경 될 수 있습니다는 <xref:System.Threading.SpinWait.SpinOnce%2A> 가이 인스턴스에서 지금 호출 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-134">This is typically called in a loop, and may change in behavior based on the number of times a <xref:System.Threading.SpinWait.SpinOnce%2A> has been called thus far on this instance.</span></span> <span data-ttu-id="3a57d-135">각 회전의 결과 <xref:System.Threading.Thread.SpinWait%2A> 메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-135">Each spin results in the <xref:System.Threading.Thread.SpinWait%2A> method being called.</span></span> <span data-ttu-id="3a57d-136">횟수의 개수를 유지 <xref:System.Threading.SpinWait.SpinOnce%2A> 가 호출 임계값 개수에 도달한 후는 <xref:System.Threading.Thread.Yield%2A> 메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-136">A count is kept of the number of times <xref:System.Threading.SpinWait.SpinOnce%2A> is called, and after a threshold count is reached, the <xref:System.Threading.Thread.Yield%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/36012f42-34e5-4f86-adf4-973f433ed6c6"><span data-ttu-id="3a57d-137">SpinWait</span><span class="sxs-lookup"><span data-stu-id="3a57d-137">SpinWait</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/b2ac4e4a-051a-4f65-b4b9-f8e103aff195"><span data-ttu-id="3a57d-138">방법: SpinWait을 사용하여 2단계 대기 작업 구현</span><span class="sxs-lookup"><span data-stu-id="3a57d-138">How to: Use SpinWait to Implement a Two-Phase Wait Operation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SpinOnce">
      <MemberSignature Language="C#" Value="public void SpinOnce (int sleep1Threshold);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpinOnce(int32 sleep1Threshold) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.SpinOnce(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SpinOnce (sleep1Threshold As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpinOnce(int sleep1Threshold);" />
      <MemberSignature Language="F#" Value="member this.SpinOnce : int -&gt; unit" Usage="spinWait.SpinOnce sleep1Threshold" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sleep1Threshold" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="sleep1Threshold">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SpinUntil">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3a57d-139">지정된 조건이 충족될 때까지 회전합니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-139">Spins until the specified condition is satisfied.</span></span></summary>
        <related type="Article" href="https://msdn.microsoft.com/library/36012f42-34e5-4f86-adf4-973f433ed6c6"><span data-ttu-id="3a57d-140">SpinWait</span><span class="sxs-lookup"><span data-stu-id="3a57d-140">SpinWait</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/b2ac4e4a-051a-4f65-b4b9-f8e103aff195"><span data-ttu-id="3a57d-141">방법: SpinWait을 사용하여 2단계 대기 작업 구현</span><span class="sxs-lookup"><span data-stu-id="3a57d-141">How to: Use SpinWait to Implement a Two-Phase Wait Operation</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="SpinUntil">
      <MemberSignature Language="C#" Value="public static void SpinUntil (Func&lt;bool&gt; condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SpinUntil(class System.Func`1&lt;bool&gt; condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SpinUntil (condition As Func(Of Boolean))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SpinUntil(Func&lt;bool&gt; ^ condition);" />
      <MemberSignature Language="F#" Value="static member SpinUntil : Func&lt;bool&gt; -&gt; unit" Usage="System.Threading.SpinWait.SpinUntil condition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Func&lt;System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="condition"><span data-ttu-id="3a57d-142">true를 반환할 때까지 계속 실행되는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-142">A delegate to be executed over and over until it returns true.</span></span></param>
        <summary><span data-ttu-id="3a57d-143">지정된 조건이 충족될 때까지 회전합니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-143">Spins until the specified condition is satisfied.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3a57d-144"><paramref name="condition" /> 인수가 null입니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-144">The <paramref name="condition" /> argument is null.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/36012f42-34e5-4f86-adf4-973f433ed6c6"><span data-ttu-id="3a57d-145">SpinWait</span><span class="sxs-lookup"><span data-stu-id="3a57d-145">SpinWait</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/b2ac4e4a-051a-4f65-b4b9-f8e103aff195"><span data-ttu-id="3a57d-146">방법: SpinWait을 사용하여 2단계 대기 작업 구현</span><span class="sxs-lookup"><span data-stu-id="3a57d-146">How to: Use SpinWait to Implement a Two-Phase Wait Operation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SpinUntil">
      <MemberSignature Language="C#" Value="public static bool SpinUntil (Func&lt;bool&gt; condition, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SpinUntil(class System.Func`1&lt;bool&gt; condition, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SpinUntil (condition As Func(Of Boolean), millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SpinUntil(Func&lt;bool&gt; ^ condition, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member SpinUntil : Func&lt;bool&gt; * int -&gt; bool" Usage="System.Threading.SpinWait.SpinUntil (condition, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Func&lt;System.Boolean&gt;" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="condition"><span data-ttu-id="3a57d-147">true를 반환할 때까지 계속 실행되는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-147">A delegate to be executed over and over until it returns true.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="3a57d-148">대기할 시간(밀리초)이거나, 무기한 대기할 경우 <see cref="F:System.Threading.Timeout.Infinite" />(-1)입니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-148">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="3a57d-149">지정된 조건이 충족되거나 지정된 제한 시간이 만료될 때까지 회전합니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-149">Spins until the specified condition is satisfied or until the specified timeout is expired.</span></span></summary>
        <returns><span data-ttu-id="3a57d-150">제한 시간 내에 지정된 조건이 충족되면 true이고, 그렇지 않으면 false입니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-150">True if the condition is satisfied within the timeout; otherwise, false</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3a57d-151"><paramref name="condition" /> 인수가 null입니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-151">The <paramref name="condition" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3a57d-152"><paramref name="millisecondsTimeout" />이 시간 제한 없음을 나타내는 -1 이외의 음수인 경우</span><span class="sxs-lookup"><span data-stu-id="3a57d-152"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/36012f42-34e5-4f86-adf4-973f433ed6c6"><span data-ttu-id="3a57d-153">SpinWait</span><span class="sxs-lookup"><span data-stu-id="3a57d-153">SpinWait</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/b2ac4e4a-051a-4f65-b4b9-f8e103aff195"><span data-ttu-id="3a57d-154">방법: SpinWait을 사용하여 2단계 대기 작업 구현</span><span class="sxs-lookup"><span data-stu-id="3a57d-154">How to: Use SpinWait to Implement a Two-Phase Wait Operation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SpinUntil">
      <MemberSignature Language="C#" Value="public static bool SpinUntil (Func&lt;bool&gt; condition, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SpinUntil(class System.Func`1&lt;bool&gt; condition, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SpinUntil (condition As Func(Of Boolean), timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SpinUntil(Func&lt;bool&gt; ^ condition, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member SpinUntil : Func&lt;bool&gt; * TimeSpan -&gt; bool" Usage="System.Threading.SpinWait.SpinUntil (condition, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Func&lt;System.Boolean&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="condition"><span data-ttu-id="3a57d-155">true를 반환할 때까지 계속 실행되는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-155">A delegate to be executed over and over until it returns true.</span></span></param>
        <param name="timeout"><span data-ttu-id="3a57d-156">대기할 시간(밀리초)을 나타내는 <see cref="T:System.TimeSpan" />이거나, 무한 대기하도록 -1밀리초를 나타내는 TimeSpan입니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-156">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="3a57d-157">지정된 조건이 충족되거나 지정된 제한 시간이 만료될 때까지 회전합니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-157">Spins until the specified condition is satisfied or until the specified timeout is expired.</span></span></summary>
        <returns><span data-ttu-id="3a57d-158">제한 시간 내에 지정된 조건이 충족되면 true이고, 그렇지 않으면 false입니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-158">True if the condition is satisfied within the timeout; otherwise, false</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3a57d-159"><paramref name="condition" /> 인수가 null입니다.</span><span class="sxs-lookup"><span data-stu-id="3a57d-159">The <paramref name="condition" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3a57d-160"><paramref name="timeout" />이 무기한 시간 제한을 나타내는 -1밀리초 이외의 음수이거나 시간 제한이 <see cref="F:System.Int32.MaxValue" />보다 큰 경우.</span><span class="sxs-lookup"><span data-stu-id="3a57d-160"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/36012f42-34e5-4f86-adf4-973f433ed6c6"><span data-ttu-id="3a57d-161">SpinWait</span><span class="sxs-lookup"><span data-stu-id="3a57d-161">SpinWait</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/b2ac4e4a-051a-4f65-b4b9-f8e103aff195"><span data-ttu-id="3a57d-162">방법: SpinWait을 사용하여 2단계 대기 작업 구현</span><span class="sxs-lookup"><span data-stu-id="3a57d-162">How to: Use SpinWait to Implement a Two-Phase Wait Operation</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>