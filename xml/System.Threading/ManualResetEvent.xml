<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6ef7963b99d115f4a7f54e535f80eb38d73ee365" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56394154" /></Metadata><TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type ManualResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="c471f-101">신호를 받을 때 수동으로 재설정되어야 하는 스레드 동기화 이벤트를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="c471f-101">Represents a thread synchronization event that, when signaled, must be reset manually.</span></span> <span data-ttu-id="c471f-102">이 클래스는 상속될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c471f-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

 <span data-ttu-id="c471f-103">사용할 `ManualResetEvent`, <xref:System.Threading.AutoResetEvent>, 및 <xref:System.Threading.EventWaitHandle> 스레드 상호 작용 (또는 스레드 신호).</span><span class="sxs-lookup"><span data-stu-id="c471f-103">You use `ManualResetEvent`, <xref:System.Threading.AutoResetEvent>, and <xref:System.Threading.EventWaitHandle> for thread interaction (or thread signaling).</span></span> <span data-ttu-id="c471f-104">자세한 내용은 참조 하세요. 합니다 [상호 작용 또는 신호 스레드](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling) 섹션을 [동기화 기본 형식 개요](~/docs/standard/threading/overview-of-synchronization-primitives.md) 문서.</span><span class="sxs-lookup"><span data-stu-id="c471f-104">For more information, see the [Thread interaction, or signaling](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling) section of the [Overview of synchronization primitives](~/docs/standard/threading/overview-of-synchronization-primitives.md) article.</span></span>  

 <span data-ttu-id="c471f-105">스레드가 계속, 호출 스레드가 다른 먼저 완료 되어야 하는 작업을 시작할 때 [ManualResetEvent.Reset](xref:System.Threading.EventWaitHandle.Reset%2A) 삽입할 `ManualResetEvent` 신호 없음 상태에서입니다.</span><span class="sxs-lookup"><span data-stu-id="c471f-105">When a thread begins an activity that must complete before other threads proceed, it calls [ManualResetEvent.Reset](xref:System.Threading.EventWaitHandle.Reset%2A) to put `ManualResetEvent` in the non-signaled state.</span></span> <span data-ttu-id="c471f-106">이 스레드의 제어로 간주할 수는 `ManualResetEvent`합니다.</span><span class="sxs-lookup"><span data-stu-id="c471f-106">This thread can be thought of as controlling the `ManualResetEvent`.</span></span> <span data-ttu-id="c471f-107">호출 하는 스레드가 [ManualResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A) 블록에 신호를 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="c471f-107">Threads that call [ManualResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A) block, awaiting the signal.</span></span> <span data-ttu-id="c471f-108">제어 스레드가 작업 완료를 호출 [ManualResetEvent.Set](xref:System.Threading.EventWaitHandle.Set%2A) 신호 대기 중인 스레드를 진행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c471f-108">When the controlling thread completes the activity, it calls [ManualResetEvent.Set](xref:System.Threading.EventWaitHandle.Set%2A) to signal that the waiting threads can proceed.</span></span> <span data-ttu-id="c471f-109">모든 대기 스레드가 해제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c471f-109">All waiting threads are released.</span></span>  

 <span data-ttu-id="c471f-110">이 신호를 받은 후 `ManualResetEvent` 수동으로 호출 하 여 다시 설정할 때까지 신호를 <xref:System.Threading.EventWaitHandle.Reset> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c471f-110">Once it has been signaled, `ManualResetEvent` remains signaled until it is manually reset by calling the <xref:System.Threading.EventWaitHandle.Reset> method.</span></span> <span data-ttu-id="c471f-111">즉, 호출 <xref:System.Threading.WaitHandle.WaitOne%2A> 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c471f-111">That is, calls to <xref:System.Threading.WaitHandle.WaitOne%2A> return immediately.</span></span>  

 <span data-ttu-id="c471f-112">초기 상태를 제어할 수 있습니다.는 `ManualResetEvent` 부울 값을 생성자에 전달 하 여: `true` 초기 상태를 신호를 받으면 및 `false` 그렇지 않은 경우.</span><span class="sxs-lookup"><span data-stu-id="c471f-112">You can control the initial state of a `ManualResetEvent` by passing a Boolean value to the constructor: `true` if the initial state is signaled, and `false` otherwise.</span></span>  
 
 <span data-ttu-id="c471f-113">`ManualResetEvent` 사용 하 여 사용할 수도 있습니다는 `static` <xref:System.Threading.WaitHandle.WaitAll%2A> 고 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c471f-113">`ManualResetEvent` can also be used with the `static` <xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods.</span></span>  
  
 <span data-ttu-id="c471f-114">.NET Framework 버전 2.0 부터는 <xref:System.Threading.ManualResetEvent> 에서 파생 되는 <xref:System.Threading.EventWaitHandle> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c471f-114">Beginning with the .NET Framework version 2.0, <xref:System.Threading.ManualResetEvent> derives from the <xref:System.Threading.EventWaitHandle> class.</span></span> <span data-ttu-id="c471f-115">A <xref:System.Threading.ManualResetEvent> 기능적으로 <xref:System.Threading.EventWaitHandle> 사용 하 여 만든 <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="c471f-115">A <xref:System.Threading.ManualResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
> <span data-ttu-id="c471f-116">와 달리 합니다 <xref:System.Threading.ManualResetEvent> 클래스는 <xref:System.Threading.EventWaitHandle> 클래스는 명명 된 시스템 동기화 이벤트에 대 한 액세스를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="c471f-116">Unlike the <xref:System.Threading.ManualResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.</span></span>  

 <span data-ttu-id="c471f-117">.NET Framework 버전 4.0 사용 하 여 시작 합니다 <xref:System.Threading.ManualResetEventSlim?displayProperty=nameWithType> 클래스의 경량 대체는 <xref:System.Threading.ManualResetEvent>합니다.</span><span class="sxs-lookup"><span data-stu-id="c471f-117">Beginning with the .NET Framework version 4.0, the <xref:System.Threading.ManualResetEventSlim?displayProperty=nameWithType> class is a lightweight alternative to <xref:System.Threading.ManualResetEvent>.</span></span>    
   
   
  
## Examples  
 <span data-ttu-id="c471f-118">다음 예제에서는 어떻게 <xref:System.Threading.ManualResetEvent> 작동 합니다.</span><span class="sxs-lookup"><span data-stu-id="c471f-118">The following example demonstrates how <xref:System.Threading.ManualResetEvent> works.</span></span> <span data-ttu-id="c471f-119">이 예제에서는 시작을 <xref:System.Threading.ManualResetEvent> 알림에서 신호 알림 해제 상태로 (즉, `false` 생성자에 전달 됩니다).</span><span class="sxs-lookup"><span data-stu-id="c471f-119">The example starts with a <xref:System.Threading.ManualResetEvent> in the unsignaled state (that is, `false` is passed to the constructor).</span></span> <span data-ttu-id="c471f-120">예제에서는 세 개를 만든 스레드를 각 블록에는 <xref:System.Threading.ManualResetEvent> 를 호출 하 여 해당 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c471f-120">The example creates three threads, each of which blocks on the <xref:System.Threading.ManualResetEvent> by calling its <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="c471f-121">누를 때를 **Enter** 예제에서는 키를 <xref:System.Threading.EventWaitHandle.Set%2A> 메서드를 세 개의 스레드를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="c471f-121">When the user presses the **Enter** key, the example calls the <xref:System.Threading.EventWaitHandle.Set%2A> method, which releases all three threads.</span></span> <span data-ttu-id="c471f-122">동작을 사용 하 여이 대조해 보세요는 <xref:System.Threading.AutoResetEvent> 릴리스할 때마다 자동으로 재설정 한 번에 스레드 하나를 해제 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c471f-122">Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class, which releases threads one at a time, resetting automatically after each release.</span></span>  
  
 <span data-ttu-id="c471f-123">키를 눌러 합니다 **Enter** 키 다시 함을 합니다 <xref:System.Threading.ManualResetEvent> 될 때까지 신호를 받은 상태로 유지 됩니다 해당 <xref:System.Threading.EventWaitHandle.Reset%2A> 메서드는: 이 예제에서는 두 개 더 많은 스레드를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="c471f-123">Pressing the **Enter** key again demonstrates that the <xref:System.Threading.ManualResetEvent> remains in the signaled state until its <xref:System.Threading.EventWaitHandle.Reset%2A> method is called: The example starts two more threads.</span></span> <span data-ttu-id="c471f-124">호출할 때 이러한 스레드가 차단 되지 않는 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드를 대신 완료 될 때까지 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="c471f-124">These threads do not block when they call the <xref:System.Threading.WaitHandle.WaitOne%2A> method, but instead run to completion.</span></span>  
  
 <span data-ttu-id="c471f-125">키를 눌러 합니다 **Enter** 키를 다시 설정 하면 예제를 호출 하는 <xref:System.Threading.EventWaitHandle.Reset%2A> 메서드를 호출할 때 차단 하는 한 더 많은 스레드를 시작 하 고 <xref:System.Threading.WaitHandle.WaitOne%2A>.</span><span class="sxs-lookup"><span data-stu-id="c471f-125">Pressing the **Enter** key again causes the example to call the <xref:System.Threading.EventWaitHandle.Reset%2A> method and to start one more thread, which blocks when it calls <xref:System.Threading.WaitHandle.WaitOne%2A>.</span></span> <span data-ttu-id="c471f-126">키를 눌러 합니다 **Enter** 최종적으로 호출 하나 키 <xref:System.Threading.EventWaitHandle.Set%2A> 릴리스는 마지막 스레드가 및 프로그램을 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="c471f-126">Pressing the **Enter** key one final time calls <xref:System.Threading.EventWaitHandle.Set%2A> to release the last thread, and the program ends.</span></span>  
  
 [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="c471f-127">이 클래스는 스레드로부터 안전 합니다.</span><span class="sxs-lookup"><span data-stu-id="c471f-127">This class is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="c471f-128">관리되는 스레딩</span><span class="sxs-lookup"><span data-stu-id="c471f-128">Managed Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="c471f-129">동기화 기본 형식 개요</span><span class="sxs-lookup"><span data-stu-id="c471f-129">Overview of synchronization primitives</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.ManualResetEvent : bool -&gt; System.Threading.ManualResetEvent" Usage="new System.Threading.ManualResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState"><span data-ttu-id="c471f-130">초기 상태를 신호 받음으로 설정하려면 <see langword="true" />를 사용하고 초기 상태를 신호 없음으로 설정하려면 <see langword="false" />를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="c471f-130"><see langword="true" /> to set the initial state signaled; <see langword="false" /> to set the initial state to nonsignaled.</span></span></param>
        <summary><span data-ttu-id="c471f-131">초기 상태를 신호 받음으로 설정할지 여부를 나타내는 부울 값을 사용하여 <see cref="T:System.Threading.ManualResetEvent" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="c471f-131">Initializes a new instance of the <see cref="T:System.Threading.ManualResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c471f-132">경우의 초기 상태를 <xref:System.Threading.ManualResetEvent> 신호를 받는 (전달 하 여 만들어진 경우에, 즉 `true` 에 대 한 `initialState`)를 기다리는 스레드는 <xref:System.Threading.ManualResetEvent> 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c471f-132">If the initial state of a <xref:System.Threading.ManualResetEvent> is signaled (that is, if it is created by passing `true` for `initialState`), threads that wait on the <xref:System.Threading.ManualResetEvent> do not block.</span></span> <span data-ttu-id="c471f-133">스레드가 차단 될 때까지 초기 상태를 신호 하는 경우는 <xref:System.Threading.EventWaitHandle.Set%2A> 메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c471f-133">If the initial state is nonsignaled, threads block until the <xref:System.Threading.EventWaitHandle.Set%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="c471f-134">관리되는 스레딩</span><span class="sxs-lookup"><span data-stu-id="c471f-134">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="c471f-135">동기화 기본 형식 개요</span><span class="sxs-lookup"><span data-stu-id="c471f-135">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="manualResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c471f-136">스레드가 차단되도록 이벤트 상태를 신호 없음으로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="c471f-136">Sets the state of the event to nonsignaled, which causes threads to block.</span></span></summary>
        <returns><span data-ttu-id="c471f-137">작업이 성공적으로 수행되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c471f-137"><see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="manualResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c471f-138">하나 이상의 대기 중인 스레드가 계속 진행되도록 이벤트 상태를 신호 받음으로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="c471f-138">Sets the state of the event to signaled, which allows one or more waiting threads to proceed.</span></span></summary>
        <returns><span data-ttu-id="c471f-139">작업이 성공적으로 수행되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c471f-139"><see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="c471f-140">Set 메서드를 호출 대기 핸들 될 때까지 신호를 받은 상태 유지를 <xref:System.Threading.ManualResetEvent.Reset> 메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c471f-140">Calling the Set method leaves the wait handle in a signaled state until the <xref:System.Threading.ManualResetEvent.Reset> method is called.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>