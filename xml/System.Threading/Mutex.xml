<Type Name="Mutex" FullName="System.Threading.Mutex">
  <Metadata><Meta Name="ms.openlocfilehash" Value="30925d1ed481842882180e068760ea83b7059bc8" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57920471" /></Metadata><TypeSignature Language="C#" Value="public sealed class Mutex : System.Threading.WaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Mutex extends System.Threading.WaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Mutex" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Mutex&#xA;Inherits WaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class Mutex sealed : System::Threading::WaitHandle" />
  <TypeSignature Language="F#" Value="type Mutex = class&#xA;    inherit WaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="5deed-101">프로세스 간 동기화에 사용할 수도 있는 동기화 기본 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-101">A synchronization primitive that can also be used for interprocess synchronization.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5deed-102">두 개 이상의 스레드를 동시에 공유 리소스에 액세스 해야 하는 경우 시스템 리소스를 한 번에 하나의 스레드만 사용 되도록 동기화 메커니즘이 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-102">When two or more threads need to access a shared resource at the same time, the system needs a synchronization mechanism to ensure that only one thread at a time uses the resource.</span></span> <span data-ttu-id="5deed-103"><xref:System.Threading.Mutex> 하나의 스레드만 공유 리소스에 대 한 단독 액세스를 부여 하는 기본 동기화 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-103"><xref:System.Threading.Mutex> is a synchronization primitive that grants exclusive access to the shared resource to only one thread.</span></span> <span data-ttu-id="5deed-104">스레드가 뮤텍스를 획득 하 고 두 번째 스레드는 뮤텍스를 획득 하는 첫 번째 스레드가 뮤텍스를 해제할 때까지 일시 중단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-104">If a thread acquires a mutex, the second thread that wants to acquire that mutex is suspended until the first thread releases the mutex.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="5deed-105">이 형식이 구현 하는 <xref:System.IDisposable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-105">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="5deed-106">형식을 사용 하 여 마쳤으면 직접 또는 간접적으로의 삭제 해야 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-106">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="5deed-107">직접 형식의 dispose 호출 해당 <xref:System.IDisposable.Dispose%2A> 의 메서드를 `try` / `catch` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-107">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="5deed-108">삭제 하지 직접, 언어 구문 같은 사용 `using` (C#에서) 또는 `Using` (Visual Basic에서는).</span><span class="sxs-lookup"><span data-stu-id="5deed-108">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="5deed-109">자세한 내용은 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하세요.를 <xref:System.IDisposable> 인터페이스 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-109">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="5deed-110">사용할 수는 <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> 뮤텍스의 소유권을 요청 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="5deed-110">You can use the <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> method to request ownership of a mutex.</span></span> <span data-ttu-id="5deed-111">해당 호출 스레드는 차단 중 하나가 발생할 때까지:</span><span class="sxs-lookup"><span data-stu-id="5deed-111">The calling thread blocks until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="5deed-112">뮤텍스는 신호를 소유 하지 않은 것을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-112">The mutex is signaled to indicate that it is not owned.</span></span> <span data-ttu-id="5deed-113">이 경우는 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드가 반환 되는 `true`, 호출 스레드가 뮤텍스의 소유권을 가정 하 고 뮤텍스 하 여 보호 되는 리소스에 액세스 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-113">When this happens, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true`, and the calling thread assumes ownership of the mutex and accesses the resource protected by the mutex.</span></span> <span data-ttu-id="5deed-114">스레드 호출 해야 리소스에 액세스할 완료 될 때를 <xref:System.Threading.Mutex.ReleaseMutex%2A> 뮤텍스의 소유권을 해제 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-114">When it has finished accessing the resource, the thread must call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method to release ownership of the mutex.</span></span> <span data-ttu-id="5deed-115">예제 섹션의 첫 번째 예제에서는이 패턴을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-115">The first example in the Examples section illustrates this pattern.</span></span>  
  
-   <span data-ttu-id="5deed-116">에 대 한 호출에 지정 된 시간 제한 간격을 <xref:System.Threading.WaitHandle.WaitOne%2A> 있는 메서드를 `millisecondsTimeout` 또는 `timeout` 매개 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-116">The time-out interval specified in the call to a <xref:System.Threading.WaitHandle.WaitOne%2A> method that has a `millisecondsTimeout` or `timeout` parameter has elapsed.</span></span> <span data-ttu-id="5deed-117">이 경우는 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드가 반환 되는 `false`, 호출 스레드가 뮤텍스의 소유권을 가져오려고 시도 하지 추가 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-117">When this happens, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `false`, and the calling thread makes no further attempt to acquire ownership of the mutex.</span></span> <span data-ttu-id="5deed-118">이 경우 호출 스레드가 뮤텍스로 보호 되는 리소스에 대 한 액세스가 거부 되었습니다 있도록 코드를 구성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-118">In this case, you should structure your code so that access to the resource that is protected by the mutex is denied to the calling thread.</span></span> <span data-ttu-id="5deed-119">호출 하지 않아야 되지 스레드가 뮤텍스의 소유권을 획득 하기 때문에 <xref:System.Threading.Mutex.ReleaseMutex%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5deed-119">Because the thread never acquired ownership of the mutex, it must not call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span> <span data-ttu-id="5deed-120">예제 섹션의 두 번째 예제에서는이 패턴을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-120">The second example in the Examples section illustrates this pattern.</span></span>  
  
 <span data-ttu-id="5deed-121"><xref:System.Threading.Mutex> 뮤텍스를 획득 하는 스레드에 의해서만 해제 될 수 있으므로 클래스는 스레드 id를 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-121">The <xref:System.Threading.Mutex> class enforces thread identity, so a mutex can be released only by the thread that acquired it.</span></span> <span data-ttu-id="5deed-122">반면,는 <xref:System.Threading.Semaphore> 클래스는 스레드 id를 적용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-122">By contrast, the <xref:System.Threading.Semaphore> class does not enforce thread identity.</span></span> <span data-ttu-id="5deed-123">뮤텍스는 응용 프로그램 도메인 경계를 넘어 전달할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-123">A mutex can also be passed across application domain boundaries.</span></span>  
  
 <span data-ttu-id="5deed-124">뮤텍스를 소유 하는 스레드를 반복된 호출에서 동일한 뮤텍스를 요청할 수 <xref:System.Threading.WaitHandle.WaitOne%2A> 실행을 차단 하지 않고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-124">The thread that owns a mutex can request the same mutex in repeated calls to <xref:System.Threading.WaitHandle.WaitOne%2A> without blocking its execution.</span></span> <span data-ttu-id="5deed-125">그러나 스레드가 호출 해야 합니다는 <xref:System.Threading.Mutex.ReleaseMutex%2A> 메서드 뮤텍스의 소유권을 해제 하려면 동일한 횟수입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-125">However, the thread must call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method the same number of times to release ownership of the mutex.</span></span>  
  
 <span data-ttu-id="5deed-126">때문에 <xref:System.Threading.Mutex> 클래스에서 상속 <xref:System.Threading.WaitHandle>, 정적 호출할 수도 있습니다 <xref:System.Threading.WaitHandle.WaitAll%2A?displayProperty=nameWithType> 고 <xref:System.Threading.WaitHandle.WaitAny%2A?displayProperty=nameWithType> 보호 된 리소스에 대 한 액세스를 동기화 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="5deed-126">Because the <xref:System.Threading.Mutex> class inherits from <xref:System.Threading.WaitHandle>, you can also call the static <xref:System.Threading.WaitHandle.WaitAll%2A?displayProperty=nameWithType> and <xref:System.Threading.WaitHandle.WaitAny%2A?displayProperty=nameWithType> methods to synchronize access to a protected resource.</span></span>  
  
 <span data-ttu-id="5deed-127">스레드가 뮤텍스를 소유 하는 동안 종료 하는 경우 뮤텍스는 중단 될 있다고 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-127">If a thread terminates while owning a mutex, the mutex is said to be abandoned.</span></span> <span data-ttu-id="5deed-128">뮤텍스의 상태 신호 설정 되 고 대기 스레드는 소유권을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-128">The state of the mutex is set to signaled, and the next waiting thread gets ownership.</span></span> <span data-ttu-id="5deed-129">.NET Framework 버전 2.0부터는 <xref:System.Threading.AbandonedMutexException> 중단된 된 뮤텍스를 획득 하는 다음 스레드에서 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-129">Beginning in version 2.0 of the .NET Framework, an <xref:System.Threading.AbandonedMutexException> is thrown in the next thread that acquires the abandoned mutex.</span></span> <span data-ttu-id="5deed-130">.NET Framework 버전 2.0 전에 예외가 throw 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-130">Before version 2.0 of the .NET Framework, no exception was thrown.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="5deed-131">중단 된 뮤텍스는 종종 코드에서 심각한 오류를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-131">An abandoned mutex often indicates a serious error in the code.</span></span> <span data-ttu-id="5deed-132">스레드가 뮤텍스를 해제 하지 않고 종료 되 면 뮤텍스의 보호를 받는 데이터 구조 상태가 일관 되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-132">When a thread exits without releasing the mutex, the data structures protected by the mutex might not be in a consistent state.</span></span> <span data-ttu-id="5deed-133">뮤텍스의 소유권을 요청 하는 다음 스레드에서이 예외를 처리 하 고 데이터 구조의 무결성을 확인할 수 있으면 계속할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-133">The next thread to request ownership of the mutex can handle this exception and proceed, if the integrity of the data structures can be verified.</span></span>  
  
 <span data-ttu-id="5deed-134">시스템 차원 뮤텍스의 경우 중단된 뮤텍스는 애플리케이션이 갑자기 종료되었음을 나타낼 수 있습니다(예: Windows 작업 관리자를 사용하여).</span><span class="sxs-lookup"><span data-stu-id="5deed-134">In the case of a system-wide mutex, an abandoned mutex might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span>  
  
 <span data-ttu-id="5deed-135">뮤텍스는 두 가지 유형이: 명명 되지 않은, 되 고 시스템 뮤텍스를 명명 된 로컬 뮤텍스입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-135">Mutexes are of two types: local mutexes, which are unnamed, and named system mutexes.</span></span> <span data-ttu-id="5deed-136">로컬 뮤텍스는 프로세스 내에만 존재합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-136">A local mutex exists only within your process.</span></span> <span data-ttu-id="5deed-137">에 대 한 참조가 있는 프로세스의 모든 스레드에서 사용할 수는 <xref:System.Threading.Mutex> 뮤텍스를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-137">It can be used by any thread in your process that has a reference to the <xref:System.Threading.Mutex> object that represents the mutex.</span></span> <span data-ttu-id="5deed-138">명명 되지 않은 각 <xref:System.Threading.Mutex> 별도 로컬 뮤텍스 개체를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-138">Each unnamed <xref:System.Threading.Mutex> object represents a separate local mutex.</span></span>  
  
 <span data-ttu-id="5deed-139">명명 된 시스템 뮤텍스는 운영 체제 전체에서 볼 수 있으며 사용 하 여 프로세스 작업을 동기화 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-139">Named system mutexes are visible throughout the operating system, and can be used to synchronize the activities of processes.</span></span> <span data-ttu-id="5deed-140">만들 수는 <xref:System.Threading.Mutex> 이름을 허용 하는 생성자를 사용 하 여 명명된 된 시스템 뮤텍스를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-140">You can create a <xref:System.Threading.Mutex> object that represents a named system mutex by using a constructor that accepts a name.</span></span> <span data-ttu-id="5deed-141">동시에 운영 체제 개체를 만들 수 있습니다 또는 만들기 전에 존재할 수는 <xref:System.Threading.Mutex> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-141">The operating-system object can be created at the same time, or it can exist before the creation of the <xref:System.Threading.Mutex> object.</span></span> <span data-ttu-id="5deed-142">동일한 명명된 시스템 뮤텍스를 나타내는 여러 <xref:System.Threading.Mutex> 개체를 만들 수 있으며 <xref:System.Threading.Mutex.OpenExisting%2A> 메서드를 사용하여 기존 명명된 시스템 뮤텍스를 열 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-142">You can create multiple <xref:System.Threading.Mutex> objects that represent the same named system mutex, and you can use the <xref:System.Threading.Mutex.OpenExisting%2A> method to open an existing named system mutex.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5deed-143">터미널 서비스를 실행 하는 서버에서 명명된 된 시스템 뮤텍스는 두 가지 수준의 표시 유형 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-143">On a server that is running Terminal Services, a named system mutex can have two levels of visibility.</span></span> <span data-ttu-id="5deed-144">해당 이름 접두사로 시작 하는 경우 "Global\\", 뮤텍스 모든 터미널 서버 세션에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-144">If its name begins with the prefix "Global\\", the mutex is visible in all terminal server sessions.</span></span> <span data-ttu-id="5deed-145">해당 이름 접두사로 시작 하는 경우 "로컬\\", 뮤텍스 만들어진 터미널 서버 세션에만 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-145">If its name begins with the prefix "Local\\", the mutex is visible only in the terminal server session where it was created.</span></span> <span data-ttu-id="5deed-146">이 경우 각 서버에서 다른 터미널 서버 세션에서 동일한 이름 가진 별도 뮤텍스 존재할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-146">In that case, a separate mutex with the same name can exist in each of the other terminal server sessions on the server.</span></span> <span data-ttu-id="5deed-147">명명된 된 뮤텍스를 만들 때 접두사를 지정 하지 않으면 접두사가 사용 "로컬\\"입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-147">If you do not specify a prefix when you create a named mutex, it takes the prefix "Local\\".</span></span> <span data-ttu-id="5deed-148">터미널 서버 세션에서 이름이 해당 접두사만 다른 두 뮤텍스는 별도 뮤텍스 및 터미널 서버 세션에서 모든 프로세스에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-148">Within a terminal server session, two mutexes whose names differ only by their prefixes are separate mutexes, and both are visible to all processes in the terminal server session.</span></span> <span data-ttu-id="5deed-149">즉, 접두사 이름을 "Global\\" 및 "로컬\\" 터미널 서버 세션을 기준으로, 프로세스 관련 되지 뮤텍스 이름 범위에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-149">That is, the prefix names "Global\\" and "Local\\" describe the scope of the mutex name relative to terminal server sessions, not relative to processes.</span></span>  
  
[!INCLUDE[backslash-mutex-note](~/includes/backslash-mutex.md)]

  
## Examples  
 <span data-ttu-id="5deed-150">이 예에서는 로컬 <xref:System.Threading.Mutex> 개체는 보호 된 리소스에 대 한 액세스를 동기화 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-150">This example shows how a local <xref:System.Threading.Mutex> object is used to synchronize access to a protected resource.</span></span> <span data-ttu-id="5deed-151">각 호출 스레드가 뮤텍스의 소유권을 가져올 때까지 차단 하기 때문에 호출 해야 합니다는 <xref:System.Threading.Mutex.ReleaseMutex%2A> 스레드는 소유권을 해제 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-151">Because each calling thread is blocked until it acquires ownership of the mutex, it must call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method to release ownership of the thread.</span></span>  
  
 [!code-csharp[System.Threading.Mutex.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.mutex.class/cs/example1.cs#1)]
 [!code-vb[System.Threading.Mutex.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.mutex.class/vb/example1.vb#1)]  
  
 <span data-ttu-id="5deed-152">다음 예제에서는 각 스레드 호출을 <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%29> 뮤텍스를 획득 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-152">In the following example, each thread calls the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%29> method to acquire the mutex.</span></span> <span data-ttu-id="5deed-153">메서드가 반환 하는 경우 시간 제한 간격이 경과 하면 `false`, 스레드가 뮤텍스를 획득 아니고 뮤텍스를 보호 하는 리소스에 대 한 액세스를 향상 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-153">If the time-out interval elapses, the method returns `false`, and the thread neither acquires the mutex nor gains access to the resource the mutex protects.</span></span> <span data-ttu-id="5deed-154"><xref:System.Threading.Mutex.ReleaseMutex%2A> 뮤텍스를 획득 하는 스레드에서 메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-154">The <xref:System.Threading.Mutex.ReleaseMutex%2A> method is called only by the thread that acquires the mutex.</span></span>  
  
 [!code-csharp[System.Threading.Mutex.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.mutex.class/cs/example2.cs#2)]
 [!code-vb[System.Threading.Mutex.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.mutex.class/vb/example2.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="5deed-155">이 형식은 스레드로부터 안전합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-155">This type is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <altmember cref="T:System.Threading.Thread" />
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="5deed-156">관리되는 스레딩</span><span class="sxs-lookup"><span data-stu-id="5deed-156">Managed Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/mutexes.md"><span data-ttu-id="5deed-157">뮤텍스</span><span class="sxs-lookup"><span data-stu-id="5deed-157">Mutexes</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5deed-158"><see cref="T:System.Threading.Mutex" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-158">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5deed-159">기본 속성을 사용하여 <see cref="T:System.Threading.Mutex" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-159">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with default properties.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5deed-160">이 생성자 오버 로드는 호출에서와 동일 합니다 <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> 생성자 오버 로드 하 고 지정 `false` 뮤텍스의 초기 소유권에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-160">Calling this constructor overload is the same as calling the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> constructor overload and specifying `false` for initial ownership of the mutex.</span></span> <span data-ttu-id="5deed-161">즉, 호출 스레드가 뮤텍스를 소유 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-161">That is, the calling thread does not own the mutex.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5deed-162">다음 코드 예제에서는 어떻게 로컬 <xref:System.Threading.Mutex> 개체는 보호 된 리소스에 대 한 액세스를 동기화 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-162">The following code example shows how a local <xref:System.Threading.Mutex> object is used to synchronize access to a protected resource.</span></span> <span data-ttu-id="5deed-163">뮤텍스를 만드는 스레드는 소유 하지 않는 처음에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-163">The thread that creates the mutex does not own it initially.</span></span>  
  
 [!code-cpp[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="5deed-164">관리되는 스레딩</span><span class="sxs-lookup"><span data-stu-id="5deed-164">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/mutexes.md"><span data-ttu-id="5deed-165">뮤텍스</span><span class="sxs-lookup"><span data-stu-id="5deed-165">Mutexes</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex (bool initiallyOwned);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initiallyOwned) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initiallyOwned As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex(bool initiallyOwned);" />
      <MemberSignature Language="F#" Value="new System.Threading.Mutex : bool -&gt; System.Threading.Mutex" Usage="new System.Threading.Mutex initiallyOwned" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initiallyOwned" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initiallyOwned"><span data-ttu-id="5deed-166">호출한 스레드에 뮤텍스의 초기 소유권을 부여하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-166"><see langword="true" /> to give the calling thread initial ownership of the mutex; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="5deed-167">호출한 스레드가 뮤텍스의 초기 소유권을 가져야 할지 여부를 나타내는 부울 값을 사용하여 <see cref="T:System.Threading.Mutex" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-167">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="5deed-168">다음 코드 예제에서는 어떻게 로컬 <xref:System.Threading.Mutex> 개체는 보호 된 리소스에 대 한 액세스를 동기화 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-168">The following code example shows how a local <xref:System.Threading.Mutex> object is used to synchronize access to a protected resource.</span></span> <span data-ttu-id="5deed-169">만드는 스레드는는 <xref:System.Threading.Mutex> 처음 소유 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-169">The thread that creates the <xref:System.Threading.Mutex> owns it initially.</span></span>  
  
 [!code-cpp[System.Threading.Mutex 1Arg Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex 1Arg Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex 1Arg Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex 1Arg Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex 1Arg Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex 1Arg Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="5deed-170">관리되는 스레딩</span><span class="sxs-lookup"><span data-stu-id="5deed-170">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/mutexes.md"><span data-ttu-id="5deed-171">뮤텍스</span><span class="sxs-lookup"><span data-stu-id="5deed-171">Mutexes</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex (bool initiallyOwned, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initiallyOwned, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initiallyOwned As Boolean, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex(bool initiallyOwned, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Threading.Mutex : bool * string -&gt; System.Threading.Mutex" Usage="new System.Threading.Mutex (initiallyOwned, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initiallyOwned" Type="System.Boolean" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="initiallyOwned"><span data-ttu-id="5deed-172">이 호출의 결과로 명명된 시스템 뮤텍스가 만들어지는 경우 호출한 스레드에 명명된 시스템 뮤텍스의 초기 소유권을 부여하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-172"><see langword="true" /> to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, <see langword="false" />.</span></span></param>
        <param name="name"><span data-ttu-id="5deed-173"><see cref="T:System.Threading.Mutex" />의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-173">The name of the <see cref="T:System.Threading.Mutex" />.</span></span> <span data-ttu-id="5deed-174">값이 <see langword="null" />이면 <see cref="T:System.Threading.Mutex" />이(가) 명명되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-174">If the value is <see langword="null" />, the <see cref="T:System.Threading.Mutex" /> is unnamed.</span></span></param>
        <summary><span data-ttu-id="5deed-175">호출 스레드가 뮤텍스의 초기 소유권을 가져야 할지 여부를 나타내는 부울 값과 뮤텍스 이름인 문자열을 사용하여 <see cref="T:System.Threading.Mutex" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-175">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, and a string that is the name of the mutex.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5deed-176">경우 `name` 아닙니다 `null` 하 고 `initiallyOwned` 는 `true`,이 호출의 결과로 명명된 된 시스템 뮤텍스가 만들어진 경우에 호출 스레드가 뮤텍스를 소유 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-176">If `name` is not `null` and `initiallyOwned` is `true`, the calling thread owns the mutex only if the named system mutex was created as a result of this call.</span></span> <span data-ttu-id="5deed-177">명명된 된 시스템 뮤텍스에 만들어졌는지 여부를 결정 하는 메커니즘이 없습니다 이므로 것이 좋습니다 지정할 `false` 에 대 한 `initiallyOwned` 이 생성자 오버 로드를 호출 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="5deed-177">Since there is no mechanism for determining whether the named system mutex was created, it is better to specify `false` for `initiallyOwned` when calling this constructor overload.</span></span> <span data-ttu-id="5deed-178">사용할 수는 <xref:System.Threading.Mutex.%23ctor%28System.Boolean%2CSystem.String%2CSystem.Boolean%40%29> 초기 소유권을 확인 하는 경우에 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-178">You can use the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%2CSystem.String%2CSystem.Boolean%40%29> constructor if you need to determine initial ownership.</span></span>  
  
 <span data-ttu-id="5deed-179">이 생성자는 <xref:System.Threading.Mutex> 명명된 된 시스템 뮤텍스를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-179">This constructor initializes a <xref:System.Threading.Mutex> object that represents a named system mutex.</span></span> <span data-ttu-id="5deed-180">여러 개 만들 수 있습니다 <xref:System.Threading.Mutex> 명명 된 시스템 뮤텍스가 동일한를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-180">You can create multiple <xref:System.Threading.Mutex> objects that represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="5deed-181">명명된 된 뮤텍스에 액세스 제어 보안을 사용 하 여 이미 생성 하 고 호출자에 게 없는 경우 <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType>, 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-181">If the named mutex has already been created with access control security, and the caller does not have <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType>, an exception is thrown.</span></span> <span data-ttu-id="5deed-182">기존 스레드 활동을 동기화 하는 데 필요한 권한만 사용 하 여 명명 된 뮤텍스를 열려면 참조를 <xref:System.Threading.Mutex.OpenExisting%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5deed-182">To open an existing named mutex with only those permissions needed for synchronizing thread activities, see the <xref:System.Threading.Mutex.OpenExisting%2A> method.</span></span>  
  
 <span data-ttu-id="5deed-183">지정 하는 경우 `null` 또는 빈 문자열로 `name`, 로컬 뮤텍스가 만들어진 호출한 것 처럼는 <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-183">If you specify `null` or an empty string for `name`, a local mutex is created, as if you had called the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="5deed-184">이 예에서 `createdNew` 항상 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-184">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="5deed-185">시스템 차원의 되므로 프로세스 경계를 넘어 리소스 사용을 조정 하기 위해 명명 된 뮤텍스를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-185">Because they are system-wide, named mutexes can be used to coordinate resource use across process boundaries.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5deed-186">터미널 서비스를 실행 하는 서버에서 명명된 된 시스템 뮤텍스는 두 가지 수준의 표시 유형 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-186">On a server that is running Terminal Services, a named system mutex can have two levels of visibility.</span></span> <span data-ttu-id="5deed-187">해당 이름 접두사로 시작 하는 경우 "Global\\", 뮤텍스 모든 터미널 서버 세션에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-187">If its name begins with the prefix "Global\\", the mutex is visible in all terminal server sessions.</span></span> <span data-ttu-id="5deed-188">해당 이름 접두사로 시작 하는 경우 "로컬\\", 뮤텍스 만들어진 터미널 서버 세션에만 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-188">If its name begins with the prefix "Local\\", the mutex is visible only in the terminal server session where it was created.</span></span> <span data-ttu-id="5deed-189">이 경우 각 서버에서 다른 터미널 서버 세션에서 동일한 이름 가진 별도 뮤텍스 존재할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-189">In that case, a separate mutex with the same name can exist in each of the other terminal server sessions on the server.</span></span> <span data-ttu-id="5deed-190">명명된 된 뮤텍스를 만들 때 접두사를 지정 하지 않으면 접두사가 사용 "로컬\\"입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-190">If you do not specify a prefix when you create a named mutex, it takes the prefix "Local\\".</span></span> <span data-ttu-id="5deed-191">터미널 서버 세션에서 이름이 해당 접두사만 다른 두 뮤텍스는 별도 뮤텍스 및 터미널 서버 세션에서 모든 프로세스에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-191">Within a terminal server session, two mutexes whose names differ only by their prefixes are separate mutexes, and both are visible to all processes in the terminal server session.</span></span> <span data-ttu-id="5deed-192">즉, 접두사 이름을 "Global\\" 및 "로컬\\" 터미널 서버 세션을 기준으로, 프로세스 관련 되지 뮤텍스 이름 범위에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-192">That is, the prefix names "Global\\" and "Local\\" describe the scope of the mutex name relative to terminal server sessions, not relative to processes.</span></span>  
  
[!INCLUDE[backslash-mutex-note](~/includes/backslash-mutex.md)]

## Examples  
 <span data-ttu-id="5deed-193">다음 예제에서는 두 개의 별도 프로세스에서 실행 되는 스레드 간의 신호를 보낼 명명된 된 뮤텍스는 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-193">The following example shows how a named mutex is used to signal between threads running in two separate processes.</span></span>  
  
 <span data-ttu-id="5deed-194">두 개 이상의 명령 창에서이 프로그램을 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-194">Run this program from two or more command windows.</span></span> <span data-ttu-id="5deed-195">각 프로세스는 한 <xref:System.Threading.Mutex> 명명 된 뮤텍스를 나타내는 `MyMutex`합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-195">Each process creates a <xref:System.Threading.Mutex> object that represents the named mutex `MyMutex`.</span></span> <span data-ttu-id="5deed-196">명명 된 뮤텍스 수명이의 수명으로 제한 된 시스템 개체 인지를 <xref:System.Threading.Mutex> 뮤텍스를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-196">The named mutex is a system object whose lifetime is bounded by the lifetimes of the <xref:System.Threading.Mutex> objects that represent it.</span></span> <span data-ttu-id="5deed-197">명명 된 뮤텍스는 첫 번째 프로세스를 만들 때 만들어집니다 해당 <xref:System.Threading.Mutex> 개체;이 예제에서는 명명 된 뮤텍스는 프로그램을 실행 하는 첫 번째 프로세스에서 소유 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-197">The named mutex is created when the first process creates its <xref:System.Threading.Mutex> object; in this example, the named mutex is owned by the first process that runs the program.</span></span> <span data-ttu-id="5deed-198">명명 된 뮤텍스 소멸 될 때 모든는 <xref:System.Threading.Mutex> 릴리스된 것을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-198">The named mutex is destroyed when all the <xref:System.Threading.Mutex> objects that represent it have been released.</span></span>  
  
 <span data-ttu-id="5deed-199">이 예제에서 사용 하는 생성자 오버 로드 호출 스레드 명명 된 뮤텍스의 초기 소유권이 부여 되었는지 여부를 확인할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-199">The constructor overload used in this example cannot tell the calling thread whether initial ownership of the named mutex was granted.</span></span> <span data-ttu-id="5deed-200">하지 할 특정 스레드 명명 된 뮤텍스 만든 경우가 아니면 시스템 뮤텍스의 초기 소유권을 요청 하려면이 생성자를 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-200">You should not use this constructor to request initial ownership unless you can be certain that the thread will create the named mutex.</span></span>  
  
 [!code-cpp[System.Threading.Mutex 2Arg Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex 2Arg Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex 2Arg Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex 2Arg Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex 2Arg Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex 2Arg Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="5deed-201">명명된 뮤텍스가 존재하고 이 뮤텍스에 액세스 제어 보안이 있지만, 사용자에게 <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-201">The named mutex exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="5deed-202">Win32 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-202">A Win32 error occurred.</span></span></exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException"><span data-ttu-id="5deed-203">아마도 다른 형식의 대기 핸들에 동일한 이름이 있어서 명명된 뮤텍스를 만들 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-203">The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5deed-204"><paramref name="name" />이 260자 보다 긴 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-204"><paramref name="name" /> is longer than 260 characters.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="5deed-205">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-205">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="5deed-206">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-206">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="5deed-207">관리되는 스레딩</span><span class="sxs-lookup"><span data-stu-id="5deed-207">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/mutexes.md"><span data-ttu-id="5deed-208">뮤텍스</span><span class="sxs-lookup"><span data-stu-id="5deed-208">Mutexes</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex (bool initiallyOwned, string name, out bool createdNew);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initiallyOwned, string name, [out] bool&amp; createdNew) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initiallyOwned As Boolean, name As String, ByRef createdNew As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex(bool initiallyOwned, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew);" />
      <MemberSignature Language="F#" Value="new System.Threading.Mutex : bool * string *  -&gt; System.Threading.Mutex" Usage="new System.Threading.Mutex (initiallyOwned, name, createdNew)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initiallyOwned" Type="System.Boolean" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="initiallyOwned"><span data-ttu-id="5deed-209">이 호출의 결과로 명명된 시스템 뮤텍스가 만들어지는 경우 호출한 스레드에 명명된 시스템 뮤텍스의 초기 소유권을 부여하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-209"><see langword="true" /> to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, <see langword="false" />.</span></span></param>
        <param name="name"><span data-ttu-id="5deed-210"><see cref="T:System.Threading.Mutex" />의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-210">The name of the <see cref="T:System.Threading.Mutex" />.</span></span> <span data-ttu-id="5deed-211">값이 <see langword="null" />이면 <see cref="T:System.Threading.Mutex" />이(가) 명명되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-211">If the value is <see langword="null" />, the <see cref="T:System.Threading.Mutex" /> is unnamed.</span></span></param>
        <param name="createdNew"><span data-ttu-id="5deed-212">이 메서드가 반환될 때 로컬 뮤텍스가 만들어진 경우(즉, <paramref name="name" />이(가) <see langword="null" />이거나 빈 문자열인 경우)나 지정된 명명된 시스템 뮤텍스가 만들어진 경우에는 <see langword="true" />인 부울이 포함되고, 지정된 명명된 시스템 뮤텍스가 이미 있는 경우에는 <see langword="false" />이(가) 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-212">When this method returns, contains a Boolean that is <see langword="true" /> if a local mutex was created (that is, if <paramref name="name" /> is <see langword="null" /> or an empty string) or if the specified named system mutex was created; <see langword="false" /> if the specified named system mutex already existed.</span></span> <span data-ttu-id="5deed-213">이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-213">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="5deed-214">호출한 스레드가 뮤텍스의 초기 소유권을 가져야 할지를 나타내는 부울 값, 뮤텍스의 이름인 문자열 및 메서드에서 반환할 때 호출한 스레드에 뮤텍스의 초기 소유권이 부여되었는지를 나타내는 부울 값을 사용하여 <see cref="T:System.Threading.Mutex" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-214">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, a string that is the name of the mutex, and a Boolean value that, when the method returns, indicates whether the calling thread was granted initial ownership of the mutex.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5deed-215">하는 경우 `name` 아닙니다 `null` 및 `initiallyOwned` 됩니다 `true`, 경우에만 명명 된 뮤텍스를 소유 하는 호출 스레드 `createdNew` 는 `true` 호출 후 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-215">If `name` is not `null` and `initiallyOwned` is `true`, the calling thread owns the named mutex only if `createdNew` is `true` after the call.</span></span> <span data-ttu-id="5deed-216">스레드를 호출 하 여 뮤텍스를 요청할 수이 고, 그렇지는 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5deed-216">Otherwise the thread can request the mutex by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span>  
  
 <span data-ttu-id="5deed-217">이 생성자는 <xref:System.Threading.Mutex> 명명된 된 시스템 뮤텍스를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-217">This constructor initializes a <xref:System.Threading.Mutex> object that represents a named system mutex.</span></span> <span data-ttu-id="5deed-218">여러 개 만들 수 있습니다 <xref:System.Threading.Mutex> 명명 된 시스템 뮤텍스가 동일한를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-218">You can create multiple <xref:System.Threading.Mutex> objects that represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="5deed-219">명명된 된 뮤텍스에 액세스 제어 보안을 사용 하 여 이미 생성 하 고 호출자에 게 없는 경우 <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType> 권한 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-219">If the named mutex has already been created with access control security, and the caller does not have <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType> rights, an exception is thrown.</span></span> <span data-ttu-id="5deed-220">기존 스레드 활동을 동기화 하는 데 필요한 권한만 사용 하 여 명명 된 뮤텍스를 열려면 참조를 <xref:System.Threading.Mutex.OpenExisting%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5deed-220">To open an existing named mutex with only those permissions needed for synchronizing thread activities, see the <xref:System.Threading.Mutex.OpenExisting%2A> method.</span></span>  
  
 <span data-ttu-id="5deed-221">지정 하는 경우 `null` 또는 빈 문자열로 `name`, 로컬 뮤텍스가 만들어진 호출한 것 처럼는 <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-221">If you specify `null` or an empty string for `name`, a local mutex is created, as if you had called the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="5deed-222">이 예에서 `createdNew` 항상 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-222">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="5deed-223">시스템 차원의 되므로 프로세스 경계를 넘어 리소스 사용을 조정 하기 위해 명명 된 뮤텍스를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-223">Because they are system-wide, named mutexes can be used to coordinate resource use across process boundaries.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5deed-224">터미널 서비스를 실행 하는 서버에서 명명된 된 시스템 뮤텍스는 두 가지 수준의 표시 유형 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-224">On a server that is running Terminal Services, a named system mutex can have two levels of visibility.</span></span> <span data-ttu-id="5deed-225">해당 이름 접두사로 시작 하는 경우 "Global\\", 뮤텍스 모든 터미널 서버 세션에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-225">If its name begins with the prefix "Global\\", the mutex is visible in all terminal server sessions.</span></span> <span data-ttu-id="5deed-226">해당 이름 접두사로 시작 하는 경우 "로컬\\", 뮤텍스 만들어진 터미널 서버 세션에만 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-226">If its name begins with the prefix "Local\\", the mutex is visible only in the terminal server session where it was created.</span></span> <span data-ttu-id="5deed-227">이 경우 각 서버에서 다른 터미널 서버 세션에서 동일한 이름 가진 별도 뮤텍스 존재할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-227">In that case, a separate mutex with the same name can exist in each of the other terminal server sessions on the server.</span></span> <span data-ttu-id="5deed-228">명명된 된 뮤텍스를 만들 때 접두사를 지정 하지 않으면 접두사가 사용 "로컬\\"입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-228">If you do not specify a prefix when you create a named mutex, it takes the prefix "Local\\".</span></span> <span data-ttu-id="5deed-229">터미널 서버 세션에서 이름이 해당 접두사만 다른 두 뮤텍스는 별도 뮤텍스 및 터미널 서버 세션에서 모든 프로세스에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-229">Within a terminal server session, two mutexes whose names differ only by their prefixes are separate mutexes, and both are visible to all processes in the terminal server session.</span></span> <span data-ttu-id="5deed-230">즉, 접두사 이름을 "Global\\" 및 "로컬\\" 터미널 서버 세션을 기준으로, 프로세스 관련 되지 뮤텍스 이름 범위에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-230">That is, the prefix names "Global\\" and "Local\\" describe the scope of the mutex name relative to terminal server sessions, not relative to processes.</span></span>  

[!INCLUDE[backslash-mutex-note](~/includes/backslash-mutex.md)]   
  
## Examples  
 <span data-ttu-id="5deed-231">다음 코드 예제에서는 명명된 된 뮤텍스는 프로세스 또는 스레드 간에 신호를 보내는 데 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-231">The following code example shows how a named mutex is used to signal between processes or threads.</span></span> <span data-ttu-id="5deed-232">두 개 이상의 명령 창에서이 프로그램을 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-232">Run this program from two or more command windows.</span></span> <span data-ttu-id="5deed-233">각 프로세스는는 <xref:System.Threading.Mutex> "인 MyMutex" 명명 된 뮤텍스를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-233">Each process creates a <xref:System.Threading.Mutex> object that represents the named mutex "MyMutex".</span></span> <span data-ttu-id="5deed-234">명명 된 뮤텍스 시스템 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-234">The named mutex is a system object.</span></span> <span data-ttu-id="5deed-235">이 예제에서는 수명이의 수명으로 제한 됩니다는 <xref:System.Threading.Mutex> 뮤텍스를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-235">In this example, its lifetime is bounded by the lifetimes of the <xref:System.Threading.Mutex> objects that represent it.</span></span> <span data-ttu-id="5deed-236">첫 번째 프로세스는 로컬에서 명명 된 뮤텍스 생성 됩니다 <xref:System.Threading.Mutex> 개체를 제거 하는 경우 모든는 <xref:System.Threading.Mutex> 릴리스된 것을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-236">The named mutex is created when the first process creates its local <xref:System.Threading.Mutex> object, and destroyed when all the <xref:System.Threading.Mutex> objects that represent it have been released.</span></span> <span data-ttu-id="5deed-237">명명 된 뮤텍스는 처음에 첫 번째 프로세스에 의해 소유 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-237">The named mutex is initially owned by the first process.</span></span> <span data-ttu-id="5deed-238">두 번째 프로세스 및 모든 후속 프로세스가 이전 프로세스를 명명 된 뮤텍스를 해제 될 때까지 기다립니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-238">The second process and any subsequent processes wait for earlier processes to release the named mutex.</span></span>  
  
 [!code-cpp[System.Threading.Mutex 3Arg Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex 3Arg Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex 3Arg Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex 3Arg Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex 3Arg Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex 3Arg Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="5deed-239">명명된 뮤텍스가 존재하고 이 뮤텍스에 액세스 제어 보안이 있지만, 사용자에게 <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-239">The named mutex exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="5deed-240">Win32 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-240">A Win32 error occurred.</span></span></exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException"><span data-ttu-id="5deed-241">아마도 다른 형식의 대기 핸들에 동일한 이름이 있어서 명명된 뮤텍스를 만들 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-241">The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5deed-242"><paramref name="name" />이 260자 보다 긴 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-242"><paramref name="name" /> is longer than 260 characters.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="5deed-243">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-243">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="5deed-244">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-244">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="5deed-245">관리되는 스레딩</span><span class="sxs-lookup"><span data-stu-id="5deed-245">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/mutexes.md"><span data-ttu-id="5deed-246">뮤텍스</span><span class="sxs-lookup"><span data-stu-id="5deed-246">Mutexes</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex (bool initiallyOwned, string name, out bool createdNew, System.Security.AccessControl.MutexSecurity mutexSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initiallyOwned, string name, [out] bool&amp; createdNew, class System.Security.AccessControl.MutexSecurity mutexSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@,System.Security.AccessControl.MutexSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex(bool initiallyOwned, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew, System::Security::AccessControl::MutexSecurity ^ mutexSecurity);" />
      <MemberSignature Language="F#" Value="new System.Threading.Mutex : bool * string *  * System.Security.AccessControl.MutexSecurity -&gt; System.Threading.Mutex" Usage="new System.Threading.Mutex (initiallyOwned, name, createdNew, mutexSecurity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initiallyOwned" Type="System.Boolean" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="createdNew" Type="System.Boolean" RefType="out" Index="2" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="mutexSecurity" Type="System.Security.AccessControl.MutexSecurity" Index="3" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="initiallyOwned"><span data-ttu-id="5deed-247">이 호출의 결과로 명명된 시스템 뮤텍스가 만들어지는 경우 호출한 스레드에 명명된 시스템 뮤텍스의 초기 소유권을 부여하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-247"><see langword="true" /> to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, <see langword="false" />.</span></span></param>
        <param name="name"><span data-ttu-id="5deed-248">시스템 뮤텍스의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-248">The name of the system mutex.</span></span> <span data-ttu-id="5deed-249">값이 <see langword="null" />이면 <see cref="T:System.Threading.Mutex" />이(가) 명명되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-249">If the value is <see langword="null" />, the <see cref="T:System.Threading.Mutex" /> is unnamed.</span></span></param>
        <param name="createdNew"><span data-ttu-id="5deed-250">이 메서드가 반환될 때 로컬 뮤텍스가 만들어진 경우(즉, <paramref name="name" />이(가) <see langword="null" />이거나 빈 문자열인 경우)나 지정된 명명된 시스템 뮤텍스가 만들어진 경우에는 <see langword="true" />인 부울이 포함되고, 지정된 명명된 시스템 뮤텍스가 이미 있는 경우에는 <see langword="false" />이(가) 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-250">When this method returns, contains a Boolean that is <see langword="true" /> if a local mutex was created (that is, if <paramref name="name" /> is <see langword="null" /> or an empty string) or if the specified named system mutex was created; <see langword="false" /> if the specified named system mutex already existed.</span></span> <span data-ttu-id="5deed-251">이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-251">This parameter is passed uninitialized.</span></span></param>
        <param name="mutexSecurity"><span data-ttu-id="5deed-252">명명된 시스템 뮤텍스에 적용할 액세스 제어 보안을 나타내는 <see cref="T:System.Security.AccessControl.MutexSecurity" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-252">A <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security to be applied to the named system mutex.</span></span></param>
        <summary><span data-ttu-id="5deed-253">호출한 스레드가 뮤텍스의 초기 소유권을 가져야 할지를 나타내는 부울 값, 뮤텍스의 이름인 문자열 및 메서드에서 반환할 때 호출한 스레드에 뮤텍스의 초기 소유권이 부여되었는지와 명명된 뮤텍스에 적용할 액세스 제어 보안을 나타내는 부울 변수를 사용하여 <see cref="T:System.Threading.Mutex" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-253">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, a string that is the name of the mutex, a Boolean variable that, when the method returns, indicates whether the calling thread was granted initial ownership of the mutex, and the access control security to be applied to the named mutex.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5deed-254">하는 경우 `name` 아닙니다 `null` 및 `initiallyOwned` 됩니다 `true`, 경우에만 명명 된 뮤텍스를 소유 하는 호출 스레드 `createdNew` 는 `true` 호출 후 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-254">If `name` is not `null` and `initiallyOwned` is `true`, the calling thread owns the named mutex only if `createdNew` is `true` after the call.</span></span> <span data-ttu-id="5deed-255">스레드를 호출 하 여 뮤텍스를 요청할 수이 고, 그렇지는 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5deed-255">Otherwise the thread can request the mutex by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span>  
  
 <span data-ttu-id="5deed-256">뮤텍스의 제어 인해 다른 코드를 만들 때 명명 된 시스템 뮤텍스에 액세스 제어 보안을 적용 하려면이 생성자를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-256">Use this constructor to apply access control security to a named system mutex when it is created, preventing other code from taking control of the mutex.</span></span>  
  
 <span data-ttu-id="5deed-257">이 생성자는 <xref:System.Threading.Mutex> 명명된 된 시스템 뮤텍스를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-257">This constructor initializes a <xref:System.Threading.Mutex> object that represents a named system mutex.</span></span> <span data-ttu-id="5deed-258">여러 개 만들 수 있습니다 <xref:System.Threading.Mutex> 명명 된 시스템 뮤텍스가 동일한를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-258">You can create multiple <xref:System.Threading.Mutex> objects that represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="5deed-259">명명된 된 시스템 뮤텍스가 존재 하지 않는 경우 지정 된 액세스 제어 보안을 사용 하 여 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-259">If the named system mutex does not exist, it is created with the specified access control security.</span></span> <span data-ttu-id="5deed-260">명명 된 뮤텍스가 존재 하는 경우 지정 된 액세스 제어 보안 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-260">If the named mutex exists, the specified access control security is ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5deed-261">호출자에 게 완전히 제어할 새로 만든된 <xref:System.Threading.Mutex> 경우에도 개체 `mutexSecurity` 거부 하거나 현재 사용자에 게 일부 액세스 권한을 부여 하지 못했습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-261">The caller has full control over the newly created <xref:System.Threading.Mutex> object even if `mutexSecurity` denies or fails to grant some access rights to the current user.</span></span> <span data-ttu-id="5deed-262">그러나 현재 사용자가 다른 <xref:System.Threading.Mutex> 개체를 나타내는 동일한 명명 된 뮤텍스를 사용 하 여 생성자 또는 <xref:System.Threading.Mutex.OpenExisting%2A> 메서드를 Windows 액세스 제어 보안이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-262">However, if the current user attempts to get another <xref:System.Threading.Mutex> object to represent the same named mutex, using either a constructor or the <xref:System.Threading.Mutex.OpenExisting%2A> method, Windows access control security is applied.</span></span>  
  
 <span data-ttu-id="5deed-263">명명된 된 뮤텍스에 액세스 제어 보안을 사용 하 여 이미 생성 하 고 호출자에 게 없는 경우 <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType>, 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-263">If the named mutex has already been created with access control security, and the caller does not have <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType>, an exception is thrown.</span></span> <span data-ttu-id="5deed-264">기존 스레드 활동을 동기화 하는 데 필요한 권한만 사용 하 여 명명 된 뮤텍스를 열려면 참조를 <xref:System.Threading.Mutex.OpenExisting%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5deed-264">To open an existing named mutex with only those permissions needed for synchronizing thread activities, see the <xref:System.Threading.Mutex.OpenExisting%2A> method.</span></span>  
  
 <span data-ttu-id="5deed-265">지정 하는 경우 `null` 또는 빈 문자열로 `name`, 로컬 뮤텍스가 만들어진 호출한 것 처럼는 <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-265">If you specify `null` or an empty string for `name`, a local mutex is created, as if you had called the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="5deed-266">이 예에서 `createdNew` 항상 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-266">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="5deed-267">시스템 차원의 되므로 프로세스 경계를 넘어 리소스 사용을 조정 하기 위해 명명 된 뮤텍스를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-267">Because they are system-wide, named mutexes can be used to coordinate resource use across process boundaries.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5deed-268">터미널 서비스를 실행 하는 서버에서 명명된 된 시스템 뮤텍스는 두 가지 수준의 표시 유형 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-268">On a server that is running Terminal Services, a named system mutex can have two levels of visibility.</span></span> <span data-ttu-id="5deed-269">해당 이름 접두사로 시작 하는 경우 "Global\\", 뮤텍스 모든 터미널 서버 세션에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-269">If its name begins with the prefix "Global\\", the mutex is visible in all terminal server sessions.</span></span> <span data-ttu-id="5deed-270">해당 이름 접두사로 시작 하는 경우 "로컬\\", 뮤텍스 만들어진 터미널 서버 세션에만 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-270">If its name begins with the prefix "Local\\", the mutex is visible only in the terminal server session where it was created.</span></span> <span data-ttu-id="5deed-271">이 경우 각 서버에서 다른 터미널 서버 세션에서 동일한 이름 가진 별도 뮤텍스 존재할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-271">In that case, a separate mutex with the same name can exist in each of the other terminal server sessions on the server.</span></span> <span data-ttu-id="5deed-272">명명된 된 뮤텍스를 만들 때 접두사를 지정 하지 않으면 접두사가 사용 "로컬\\"입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-272">If you do not specify a prefix when you create a named mutex, it takes the prefix "Local\\".</span></span> <span data-ttu-id="5deed-273">터미널 서버 세션에서 이름이 해당 접두사만 다른 두 뮤텍스는 별도 뮤텍스 및 터미널 서버 세션에서 모든 프로세스에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-273">Within a terminal server session, two mutexes whose names differ only by their prefixes are separate mutexes, and both are visible to all processes in the terminal server session.</span></span> <span data-ttu-id="5deed-274">즉, 접두사 이름을 "Global\\" 및 "로컬\\" 터미널 서버 세션을 기준으로, 프로세스 관련 되지 뮤텍스 이름 범위에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-274">That is, the prefix names "Global\\" and "Local\\" describe the scope of the mutex name relative to terminal server sessions, not relative to processes.</span></span>  

[!INCLUDE[backslash-mutex-note](~/includes/backslash-mutex.md)]  
   
  
## Examples  
 <span data-ttu-id="5deed-275">다음 코드 예제에서는 액세스 제어 보안을 사용 하 여 명명 된 뮤텍스의 프로세스 간 동작을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-275">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="5deed-276">이 예제에서는 사용 된 <xref:System.Threading.Mutex.OpenExisting%28System.String%29> 메서드 오버 로드를 명명 된 뮤텍스가 존재 여부를 테스트 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-276">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="5deed-277">뮤텍스 존재 하지 않는 경우 시스템 뮤텍스의 초기 소유권 및 뮤텍스를 사용할 수 있는 권한이 현재 사용자를 거부 하지만 읽고 뮤텍스 사용 권한을 변경할 수 있는 권한을 부여 하는 액세스 제어 보안을 사용 하 여 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-277">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="5deed-278">두 번째 복사본에 대 한 호출에는 액세스 위반 예외를 throw 합니다 두 개의 명령 창에서 컴파일된 예제를 실행 하는 경우 <xref:System.Threading.Mutex.OpenExisting%28System.String%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-278">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="5deed-279">예외 포착 되 고이 예제에서는 사용 된 <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> 메서드 오버 로드를 읽고 사용 권한을 변경 하는 데 필요한 권한을 사용 하 여 뮤텍스를 엽니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-279">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="5deed-280">권한이 변경 된 후에 뮤텍스 입력 하 고 해제 하는 데 필요한 권한으로 열려 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-280">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="5deed-281">세 번째 명령 창에서 컴파일된 예제를 실행 하는 경우 새 권한을 사용 하 여 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-281">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="5deed-282">Win32 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-282">A Win32 error occurred.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="5deed-283">명명된 뮤텍스가 존재하고 이 뮤텍스에 액세스 제어 보안이 있지만, 사용자에게 <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-283">The named mutex exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span></span></exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException"><span data-ttu-id="5deed-284">아마도 다른 형식의 대기 핸들에 동일한 이름이 있어서 명명된 뮤텍스를 만들 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-284">The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5deed-285"><paramref name="name" />이 260자 보다 긴 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-285"><paramref name="name" /> is longer than 260 characters.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="5deed-286">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-286">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="5deed-287">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-287">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.MutexSecurity GetAccessControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.AccessControl.MutexSecurity GetAccessControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.GetAccessControl" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessControl () As MutexSecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::AccessControl::MutexSecurity ^ GetAccessControl();" />
      <MemberSignature Language="F#" Value="member this.GetAccessControl : unit -&gt; System.Security.AccessControl.MutexSecurity" Usage="mutex.GetAccessControl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.MutexSecurity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5deed-288">명명된 뮤텍스에 대한 액세스 제어 보안을 나타내는 <see cref="T:System.Security.AccessControl.MutexSecurity" /> 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-288">Gets a <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security for the named mutex.</span></span></summary>
        <returns><span data-ttu-id="5deed-289">명명된 뮤텍스에 대한 액세스 제어 보안을 나타내는 <see cref="T:System.Security.AccessControl.MutexSecurity" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-289">A <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security for the named mutex.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5deed-290"><xref:System.Threading.Mutex.GetAccessControl%2A> 메서드는 다음과 같은 조합을 플래그 (비트 OR 연산을 사용 하 여 결합)를 사용 하 여 사용 권한을 검색할: <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>, <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>, 및 <xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-290">The <xref:System.Threading.Mutex.GetAccessControl%2A> method uses the following combination of flags (combined using the bitwise OR operation) to search for permissions: <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>, <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>, and <xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="5deed-291">사용자에 게 <xref:System.Security.AccessControl.MutexRights.ReadPermissions?displayProperty=nameWithType> 뮤텍스가이 메서드를 호출 하려면 열려 있어야와 <xref:System.Security.AccessControl.MutexRights.ReadPermissions?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-291">The user must have <xref:System.Security.AccessControl.MutexRights.ReadPermissions?displayProperty=nameWithType> to call this method, and the mutex must have been opened with <xref:System.Security.AccessControl.MutexRights.ReadPermissions?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5deed-292">다음 코드 예제에서는 액세스 제어 보안을 사용 하 여 명명 된 뮤텍스의 프로세스 간 동작을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-292">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="5deed-293">이 예제에서는 사용 된 <xref:System.Threading.Mutex.OpenExisting%28System.String%29> 메서드 오버 로드를 명명 된 뮤텍스가 존재 여부를 테스트 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-293">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="5deed-294">뮤텍스 존재 하지 않는 경우 시스템 뮤텍스의 초기 소유권 및 뮤텍스를 사용할 수 있는 권한이 현재 사용자를 거부 하지만 읽고 뮤텍스 사용 권한을 변경할 수 있는 권한을 부여 하는 액세스 제어 보안을 사용 하 여 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-294">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="5deed-295">두 번째 복사본에 대 한 호출에는 액세스 위반 예외를 throw 합니다 두 개의 명령 창에서 컴파일된 예제를 실행 하는 경우 <xref:System.Threading.Mutex.OpenExisting%28System.String%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-295">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="5deed-296">예외 포착 되 고이 예제에서는 사용 합니다 <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> 읽고 사용 하 여 사용 권한을 변경 하는 데 필요한 권한을 사용 하 여 뮤텍스를 열려는 메서드 오버 로드를 <xref:System.Threading.Mutex.GetAccessControl%2A> 및 <xref:System.Threading.Mutex.SetAccessControl%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5deed-296">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions, using the <xref:System.Threading.Mutex.GetAccessControl%2A> and <xref:System.Threading.Mutex.SetAccessControl%2A> methods.</span></span>  
  
 <span data-ttu-id="5deed-297">권한이 변경 된 후에 뮤텍스 입력 하 고 해제 하는 데 필요한 권한으로 열려 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-297">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="5deed-298">세 번째 명령 창에서 컴파일된 예제를 실행 하는 경우 새 권한을 사용 하 여 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-298">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="5deed-299">현재 <see cref="T:System.Threading.Mutex" /> 개체가 명명된 시스템 뮤텍스를 나타내지만 사용자에게 <see cref="F:System.Security.AccessControl.MutexRights.ReadPermissions" />가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-299">The current <see cref="T:System.Threading.Mutex" /> object represents a named system mutex, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.ReadPermissions" />.</span></span>  
  
<span data-ttu-id="5deed-300">또는</span><span class="sxs-lookup"><span data-stu-id="5deed-300">-or-</span></span> 
<span data-ttu-id="5deed-301">현재 <see cref="T:System.Threading.Mutex" /> 개체가 명명된 시스템 뮤텍스를 나타내지만 <see cref="F:System.Security.AccessControl.MutexRights.ReadPermissions" />를 사용하여 열리지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-301">The current <see cref="T:System.Threading.Mutex" /> object represents a named system mutex, and was not opened with <see cref="F:System.Security.AccessControl.MutexRights.ReadPermissions" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5deed-302">Windows 98 또는 Windows Millennium Edition에서 지원되지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-302">Not supported for Windows 98 or Windows Millennium Edition.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5deed-303">이미 있는 경우 지정한 명명된 뮤텍스를 엽니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-303">Opens a specified named mutex, if it already exists.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Mutex OpenExisting (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Mutex OpenExisting(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.OpenExisting(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String) As Mutex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Mutex ^ OpenExisting(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member OpenExisting : string -&gt; System.Threading.Mutex" Usage="System.Threading.Mutex.OpenExisting name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Mutex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="5deed-304">열려는 시스템 뮤텍스의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-304">The name of the system mutex to open.</span></span></param>
        <summary><span data-ttu-id="5deed-305">이미 있는 경우 지정한 명명된 뮤텍스를 엽니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-305">Opens the specified named mutex, if it already exists.</span></span></summary>
        <returns><span data-ttu-id="5deed-306">명명된 시스템 뮤텍스를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-306">An object that represents the named system mutex.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5deed-307"><xref:System.Threading.Mutex.OpenExisting%2A> 메서드 명명 된 시스템 뮤텍스가 된를 열려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-307">The <xref:System.Threading.Mutex.OpenExisting%2A> method tries to open the specified named system mutex.</span></span> <span data-ttu-id="5deed-308">된 시스템 뮤텍스가 존재 하지 않는 경우이 메서드는 시스템 개체를 만드는 대신 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-308">If the system mutex does not exist, this method throws an exception instead of creating the system object.</span></span> <span data-ttu-id="5deed-309">시스템 뮤텍스를 만들려면 이미 존재 하지 않을 경우 중 하나를 사용 합니다 <xref:System.Threading.Mutex.%23ctor%2A> 에 생성자를 `name` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-309">To create the system mutex when it does not already exist, use one of the <xref:System.Threading.Mutex.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="5deed-310">에 대해 동일한 값을 사용 하는이 메서드를 여러 번 호출 `name` 동일한 반드시 반환 하지 않는 <xref:System.Threading.Mutex> 개체를 반환 하는 개체가 같은 명명 된 시스템 뮤텍스를 나타내는 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-310">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Mutex> object, even though the objects that are returned represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="5deed-311">이 메서드 오버 로드는 호출에 해당 하는 <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> 메서드 오버 로드 하 고 지정 <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> 및 <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> 권한, 비트 OR 연산을 사용 하 여 결합 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-311">This method overload is equivalent to calling the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload and specifying <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> and <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> rights, combined by using the bitwise OR operation.</span></span>  
  
 <span data-ttu-id="5deed-312">지정 하는 <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> 플래그 허용 스레드는 뮤텍스에서 대기를 지정 하 고는 <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> 플래그는 스레드가 호출 될 수 있습니다는 <xref:System.Threading.Mutex.ReleaseMutex%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5deed-312">Specifying the <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flag allows a thread to wait on the mutex, and specifying the <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flag allows a thread to call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span>  
  
 <span data-ttu-id="5deed-313">이 메서드 뮤텍스의 소유권을 요청 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-313">This method does not request ownership of the mutex.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5deed-314">다음 코드 예제에서는 액세스 제어 보안을 사용 하 여 명명 된 뮤텍스의 프로세스 간 동작을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-314">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="5deed-315">이 예제에서는 사용 된 <xref:System.Threading.Mutex.OpenExisting%28System.String%29> 메서드 오버 로드를 명명 된 뮤텍스가 존재 여부를 테스트 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-315">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="5deed-316">뮤텍스 존재 하지 않는 경우 시스템 뮤텍스의 초기 소유권 및 뮤텍스를 사용할 수 있는 권한이 현재 사용자를 거부 하지만 읽고 뮤텍스 사용 권한을 변경할 수 있는 권한을 부여 하는 액세스 제어 보안을 사용 하 여 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-316">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="5deed-317">두 번째 복사본에 대 한 호출에는 액세스 위반 예외를 throw 합니다 두 개의 명령 창에서 컴파일된 예제를 실행 하는 경우 <xref:System.Threading.Mutex.OpenExisting%28System.String%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-317">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="5deed-318">예외 포착 되 고이 예제에서는 사용 된 <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> 메서드 오버 로드를 읽고 사용 권한을 변경 하는 데 필요한 권한을 사용 하 여 뮤텍스를 엽니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-318">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="5deed-319">권한이 변경 된 후에 뮤텍스 입력 하 고 해제 하는 데 필요한 권한으로 열려 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-319">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="5deed-320">세 번째 명령 창에서 컴파일된 예제를 실행 하는 경우 새 권한을 사용 하 여 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-320">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5deed-321"><paramref name="name" />이 빈 문자열인 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-321"><paramref name="name" /> is an empty string.</span></span>  
  
<span data-ttu-id="5deed-322">또는</span><span class="sxs-lookup"><span data-stu-id="5deed-322">-or-</span></span> 
 <span data-ttu-id="5deed-323"><paramref name="name" />이 260자 보다 긴 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-323"><paramref name="name" /> is longer than 260 characters.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5deed-324"><paramref name="name" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-324"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException"><span data-ttu-id="5deed-325">명명된 뮤텍스가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-325">The named mutex does not exist.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="5deed-326">Win32 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-326">A Win32 error occurred.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="5deed-327">명명된 뮤텍스가 있으나 사용자에게 이를 사용하는 데 필요한 보안 액세스 권한이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-327">The named mutex exists, but the user does not have the security access required to use it.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="5deed-328">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-328">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="5deed-329">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-329">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Mutex OpenExisting (string name, System.Security.AccessControl.MutexRights rights);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Mutex OpenExisting(string name, valuetype System.Security.AccessControl.MutexRights rights) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.OpenExisting(System.String,System.Security.AccessControl.MutexRights)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String, rights As MutexRights) As Mutex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Mutex ^ OpenExisting(System::String ^ name, System::Security::AccessControl::MutexRights rights);" />
      <MemberSignature Language="F#" Value="static member OpenExisting : string * System.Security.AccessControl.MutexRights -&gt; System.Threading.Mutex" Usage="System.Threading.Mutex.OpenExisting (name, rights)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Mutex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="rights" Type="System.Security.AccessControl.MutexRights" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="5deed-330">열려는 시스템 뮤텍스의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-330">The name of the system mutex to open.</span></span></param>
        <param name="rights"><span data-ttu-id="5deed-331">원하는 보안 액세스 권한을 나타내는 열거형 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-331">A bitwise combination of the enumeration values that represent the desired security access.</span></span></param>
        <summary><span data-ttu-id="5deed-332">이미 있는 경우 지정한 명명된 뮤텍스를 원하는 보안 액세스로 엽니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-332">Opens the specified named mutex, if it already exists, with the desired security access.</span></span></summary>
        <returns><span data-ttu-id="5deed-333">명명된 시스템 뮤텍스를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-333">An object that represents the named system mutex.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5deed-334">`rights` 매개 변수에 포함 되어야 합니다 <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> 스레드가 뮤텍스를 대기할 수 있게 하는 플래그 및 <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> 호출 스레드를 허용 하도록 플래그를 <xref:System.Threading.Mutex.ReleaseMutex%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5deed-334">The `rights` parameter must include the <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flag to allow threads to wait on the mutex, and the <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flag to allow threads to call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span>  
  
 <span data-ttu-id="5deed-335"><xref:System.Threading.Mutex.OpenExisting%2A> 메서드는 기존 명명 된 뮤텍스를 열려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-335">The <xref:System.Threading.Mutex.OpenExisting%2A> method tries to open an existing named mutex.</span></span> <span data-ttu-id="5deed-336">된 시스템 뮤텍스가 존재 하지 않는 경우이 메서드는 시스템 개체를 만드는 대신 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-336">If the system mutex does not exist, this method throws an exception instead of creating the system object.</span></span> <span data-ttu-id="5deed-337">시스템 뮤텍스를 만들려면 이미 존재 하지 않을 경우 중 하나를 사용 합니다 <xref:System.Threading.Mutex.%23ctor%2A> 에 생성자를 `name` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-337">To create the system mutex when it does not already exist, use one of the <xref:System.Threading.Mutex.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="5deed-338">에 대해 동일한 값을 사용 하는이 메서드를 여러 번 호출 `name` 동일한 반드시 반환 하지 않는 <xref:System.Threading.Mutex> 개체를 반환 하는 개체가 같은 명명 된 시스템 뮤텍스를 나타내는 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-338">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Mutex> object, even though the objects that are returned represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="5deed-339">이 메서드 뮤텍스의 소유권을 요청 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-339">This method does not request ownership of the mutex.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5deed-340">다음 코드 예제에서는 액세스 제어 보안을 사용 하 여 명명 된 뮤텍스의 프로세스 간 동작을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-340">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="5deed-341">이 예제에서는 사용 된 <xref:System.Threading.Mutex.OpenExisting%28System.String%29> 메서드 오버 로드를 명명 된 뮤텍스가 존재 여부를 테스트 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-341">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="5deed-342">뮤텍스 존재 하지 않는 경우 시스템 뮤텍스의 초기 소유권 및 뮤텍스를 사용할 수 있는 권한이 현재 사용자를 거부 하지만 읽고 뮤텍스 사용 권한을 변경할 수 있는 권한을 부여 하는 액세스 제어 보안을 사용 하 여 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-342">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="5deed-343">두 번째 복사본에 대 한 호출에는 액세스 위반 예외를 throw 합니다 두 개의 명령 창에서 컴파일된 예제를 실행 하는 경우 <xref:System.Threading.Mutex.OpenExisting%28System.String%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-343">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="5deed-344">예외 포착 되 고이 예제에서는 사용 된 <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> 메서드 오버 로드를 읽고 사용 권한을 변경 하는 데 필요한 권한을 사용 하 여 뮤텍스를 엽니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-344">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="5deed-345">권한이 변경 된 후에 뮤텍스 입력 하 고 해제 하는 데 필요한 권한으로 열려 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-345">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="5deed-346">세 번째 명령 창에서 컴파일된 예제를 실행 하는 경우 새 권한을 사용 하 여 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-346">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5deed-347"><paramref name="name" />이 빈 문자열인 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-347"><paramref name="name" /> is an empty string.</span></span>  
  
<span data-ttu-id="5deed-348">또는</span><span class="sxs-lookup"><span data-stu-id="5deed-348">-or-</span></span> 
 <span data-ttu-id="5deed-349"><paramref name="name" />이 260자 보다 긴 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-349"><paramref name="name" /> is longer than 260 characters.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5deed-350"><paramref name="name" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-350"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException"><span data-ttu-id="5deed-351">명명된 뮤텍스가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-351">The named mutex does not exist.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="5deed-352">Win32 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-352">A Win32 error occurred.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="5deed-353">명명된 뮤텍스가 있지만 사용자에게 필요한 보안 액세스가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-353">The named mutex exists, but the user does not have the desired security access.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="5deed-354">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-354">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="5deed-355">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-355">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMutex">
      <MemberSignature Language="C#" Value="public void ReleaseMutex ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseMutex() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.ReleaseMutex" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseMutex ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseMutex();" />
      <MemberSignature Language="F#" Value="member this.ReleaseMutex : unit -&gt; unit" Usage="mutex.ReleaseMutex " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5deed-356"><see cref="T:System.Threading.Mutex" />을(를) 한 번 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-356">Releases the <see cref="T:System.Threading.Mutex" /> once.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5deed-357">스레드가 뮤텍스를 획득 될 때마다 (예를 들어, 호출 하 여 해당 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드)를 이후에 호출 해야 합니다 <xref:System.Threading.Mutex.ReleaseMutex%2A> 뮤텍스의 소유권을 포기 하 고 뮤텍스의 소유권 권한을 얻으려고 시도 하는 다른 스레드의 차단을 해제 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-357">Whenever a thread acquires a mutex (for example, by calling its <xref:System.Threading.WaitHandle.WaitOne%2A> method), it must subsequently call <xref:System.Threading.Mutex.ReleaseMutex%2A> to relinquish ownership of the mutex and unblock other threads that are trying to gain ownership of the mutex.</span></span> <span data-ttu-id="5deed-358">뮤텍스의 소유권을 가져오려는 시도가 실패 하는 경우 (예를 들어, 경우에 대 한 호출을 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드를 `millisecondsTimeout` 또는 `timeout` 매개 변수를 반환 `false` 요청 시간이 초과 하기 때문에), 스레드 호출 해서는 안 됩니다 <xref:System.Threading.Mutex.ReleaseMutex%2A>,이 경우 스레드는 또한 허용 되지 뮤텍스의 보호를 받는, 다음 예제와 같이 리소스에 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-358">If the attempt to get ownership of the mutex fails (for example, when a call to the <xref:System.Threading.WaitHandle.WaitOne%2A> method with a `millisecondsTimeout` or a `timeout` parameter returns `false` because the request times out), the thread shouldn't call <xref:System.Threading.Mutex.ReleaseMutex%2A>, In this case, the thread should also not be allowed to access the resource protected by the mutex, as the following example shows.</span></span>  
  
 [!code-csharp[System.Threading.Mutex.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.mutex.class/cs/example2.cs#2)]
 [!code-vb[System.Threading.Mutex.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.mutex.class/vb/example2.vb#2)]  
  
 <span data-ttu-id="5deed-359">뮤텍스를 소유 하는 스레드 실행을 차단 하지 않고 반복된 대기 함수 호출에서 동일한 뮤텍스를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-359">A thread that owns a mutex can specify the same mutex in repeated wait function calls without blocking its execution.</span></span> <span data-ttu-id="5deed-360">공용 언어 런타임에 의해 호출 수가 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-360">The number of calls is kept by the common language runtime.</span></span> <span data-ttu-id="5deed-361">스레드에서 <xref:System.Threading.Mutex.ReleaseMutex%2A> 뮤텍스의 소유권을 해제 하려면 동일한 횟수입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-361">The thread must call <xref:System.Threading.Mutex.ReleaseMutex%2A> the same number of times to release ownership of the mutex.</span></span>  
  
 <span data-ttu-id="5deed-362">스레드가 뮤텍스를 소유 하는 동안 종료 하는 경우 뮤텍스는 중단 될 있다고 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-362">If a thread terminates while owning a mutex, the mutex is said to be abandoned.</span></span> <span data-ttu-id="5deed-363">뮤텍스의 상태를 signaled로 설정 되 고 대기 스레드는 소유권을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-363">The state of the mutex is set to signaled and the next waiting thread gets ownership.</span></span> <span data-ttu-id="5deed-364">뮤텍스를 소유 아무도 뮤텍스의 상태 신호입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-364">If no one owns the mutex, the state of the mutex is signaled.</span></span> <span data-ttu-id="5deed-365">.NET Framework 버전 2.0부터는 <xref:System.Threading.AbandonedMutexException> 뮤텍스를 획득 하는 다음 스레드에서 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-365">Beginning in version 2.0 of the .NET Framework, an <xref:System.Threading.AbandonedMutexException> is thrown in the next thread that acquires the mutex.</span></span> <span data-ttu-id="5deed-366">이전 버전의.NET Framework 2.0에서는 예외가 throw 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-366">Prior to version 2.0 of the .NET Framework, no exception was thrown.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="5deed-367">중단 된 뮤텍스는 종종 코드에서 심각한 오류를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-367">An abandoned mutex often indicates a serious error in the code.</span></span> <span data-ttu-id="5deed-368">스레드가 뮤텍스를 해제 하지 않고 종료 되 면 뮤텍스의 보호를 받는 데이터 구조 상태가 일관 되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-368">When a thread exits without releasing the mutex, the data structures protected by the mutex might not be in a consistent state.</span></span> <span data-ttu-id="5deed-369">뮤텍스의 소유권을 요청 하는 다음 스레드에서이 예외를 처리 하 고 데이터 구조의 무결성을 확인할 수 있으면 계속할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-369">The next thread to request ownership of the mutex can handle this exception and proceed, if the integrity of the data structures can be verified.</span></span>  
  
 <span data-ttu-id="5deed-370">시스템 차원 뮤텍스의 경우 중단된 뮤텍스는 애플리케이션이 갑자기 종료되었음을 나타낼 수 있습니다(예: Windows 작업 관리자를 사용하여).</span><span class="sxs-lookup"><span data-stu-id="5deed-370">In the case of a system-wide mutex, an abandoned mutex might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5deed-371">다음 예제에서는 어떻게 로컬 <xref:System.Threading.Mutex> 개체는 보호 된 리소스에 대 한 액세스를 동기화 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-371">The following example shows how a local <xref:System.Threading.Mutex> object is used to synchronize access to a protected resource.</span></span> <span data-ttu-id="5deed-372">뮤텍스를 만드는 스레드는 소유 하지 않는 처음에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-372">The thread that creates the mutex does not own it initially.</span></span> <span data-ttu-id="5deed-373"><xref:System.Threading.Mutex.ReleaseMutex%2A> 메서드는 더 이상 필요 없는 뮤텍스를 해제 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-373">The <xref:System.Threading.Mutex.ReleaseMutex%2A> method is used to release the mutex when it is no longer needed.</span></span>  
  
 [!code-cpp[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="5deed-374">호출 스레드가 뮤텍스를 소유하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-374">The calling thread does not own the mutex.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5deed-375">현재 인스턴스가 이미 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-375">The current instance has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="5deed-376">관리되는 스레딩</span><span class="sxs-lookup"><span data-stu-id="5deed-376">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/mutexes.md"><span data-ttu-id="5deed-377">뮤텍스</span><span class="sxs-lookup"><span data-stu-id="5deed-377">Mutexes</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetAccessControl">
      <MemberSignature Language="C#" Value="public void SetAccessControl (System.Security.AccessControl.MutexSecurity mutexSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessControl(class System.Security.AccessControl.MutexSecurity mutexSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.SetAccessControl(System.Security.AccessControl.MutexSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessControl(System::Security::AccessControl::MutexSecurity ^ mutexSecurity);" />
      <MemberSignature Language="F#" Value="member this.SetAccessControl : System.Security.AccessControl.MutexSecurity -&gt; unit" Usage="mutex.SetAccessControl mutexSecurity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mutexSecurity" Type="System.Security.AccessControl.MutexSecurity" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="mutexSecurity"><span data-ttu-id="5deed-378">명명된 시스템 뮤텍스에 적용할 액세스 제어 보안을 나타내는 <see cref="T:System.Security.AccessControl.MutexSecurity" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-378">A <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security to be applied to the named system mutex.</span></span></param>
        <summary><span data-ttu-id="5deed-379">명명된 시스템 뮤텍스에 액세스 제어 보안을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-379">Sets the access control security for a named system mutex.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5deed-380">사용자에 게 <xref:System.Security.AccessControl.MutexRights.ChangePermissions?displayProperty=nameWithType> 이 메서드를 호출 하는 뮤텍스에 대 한 권한을 사용 하 여 열려 있어야 <xref:System.Security.AccessControl.MutexRights.ChangePermissions?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-380">The user must have <xref:System.Security.AccessControl.MutexRights.ChangePermissions?displayProperty=nameWithType> rights to call this method, and the mutex must have been opened with <xref:System.Security.AccessControl.MutexRights.ChangePermissions?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5deed-381">다음 코드 예제에서는 액세스 제어 보안을 사용 하 여 명명 된 뮤텍스의 프로세스 간 동작을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-381">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="5deed-382">이 예제에서는 사용 된 <xref:System.Threading.Mutex.OpenExisting%28System.String%29> 메서드 오버 로드를 명명 된 뮤텍스가 존재 여부를 테스트 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-382">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="5deed-383">뮤텍스 존재 하지 않는 경우 시스템 뮤텍스의 초기 소유권 및 뮤텍스를 사용할 수 있는 권한이 현재 사용자를 거부 하지만 읽고 뮤텍스 사용 권한을 변경할 수 있는 권한을 부여 하는 액세스 제어 보안을 사용 하 여 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-383">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="5deed-384">두 번째 복사본에 대 한 호출에는 액세스 위반 예외를 throw 합니다 두 개의 명령 창에서 컴파일된 예제를 실행 하는 경우 <xref:System.Threading.Mutex.OpenExisting%28System.String%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-384">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="5deed-385">예외 포착 되 고이 예제에서는 사용 합니다 <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> 읽고 사용 하 여 사용 권한을 변경 하는 데 필요한 권한을 사용 하 여 뮤텍스를 열려는 메서드 오버 로드를 <xref:System.Threading.Mutex.GetAccessControl%2A> 및 <xref:System.Threading.Mutex.SetAccessControl%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5deed-385">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions, using the <xref:System.Threading.Mutex.GetAccessControl%2A> and <xref:System.Threading.Mutex.SetAccessControl%2A> methods.</span></span>  
  
 <span data-ttu-id="5deed-386">권한이 변경 된 후에 뮤텍스 입력 하 고 해제 하는 데 필요한 권한으로 열려 있습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-386">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="5deed-387">세 번째 명령 창에서 컴파일된 예제를 실행 하는 경우 새 권한을 사용 하 여 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-387">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5deed-388"><paramref name="mutexSecurity" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-388"><paramref name="mutexSecurity" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="5deed-389">사용자에게 <see cref="F:System.Security.AccessControl.MutexRights.ChangePermissions" />가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-389">The user does not have <see cref="F:System.Security.AccessControl.MutexRights.ChangePermissions" />.</span></span>  
  
<span data-ttu-id="5deed-390">또는</span><span class="sxs-lookup"><span data-stu-id="5deed-390">-or-</span></span> 
<span data-ttu-id="5deed-391">뮤텍스가 <see cref="F:System.Security.AccessControl.MutexRights.ChangePermissions" />를 사용하여 열리지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-391">The mutex was not opened with <see cref="F:System.Security.AccessControl.MutexRights.ChangePermissions" />.</span></span></exception>
        <exception cref="T:System.SystemException"><span data-ttu-id="5deed-392">현재 <see cref="T:System.Threading.Mutex" /> 개체가 명명된 시스템 뮤텍스를 나타내지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-392">The current <see cref="T:System.Threading.Mutex" /> object does not represent a named system mutex.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryOpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5deed-393">지정된 명명된 mutex(이미 존재하는 경우)를 열고 작업이 성공적으로 수행되었는지를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-393">Opens a specified named mutex, if it already exists, and returns a value that indicates whether the operation succeeded.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, out System.Threading.Mutex result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, [out] class System.Threading.Mutex&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.TryOpenExisting(System.String,System.Threading.Mutex@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, ByRef result As Mutex) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, [Runtime::InteropServices::Out] System::Threading::Mutex ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryOpenExisting : string *  -&gt; bool" Usage="System.Threading.Mutex.TryOpenExisting (name, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.Threading.Mutex" RefType="out" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="5deed-394">열려는 시스템 뮤텍스의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-394">The name of the system mutex to open.</span></span></param>
        <param name="result"><span data-ttu-id="5deed-395">이 메서드가 반환될 때 호출이 성공적으로 실행된 경우 이름이 지정된 뮤텍스를 나타내는 <see cref="T:System.Threading.Mutex" /> 개체를 포함하고 호출에 실패한 경우는 <see langword="null" />을(를) 포함해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-395">When this method returns, contains a <see cref="T:System.Threading.Mutex" /> object that represents the named mutex if the call succeeded, or <see langword="null" /> if the call failed.</span></span> <span data-ttu-id="5deed-396">이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-396">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="5deed-397">지정한 명명된 뮤텍스(이미 존재하는 경우)를 열고 작업이 수행되었는지를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-397">Opens the specified named mutex, if it already exists, and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="5deed-398">명명된 뮤텍스를 열었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-398"><see langword="true" /> if the named mutex was opened successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5deed-399">명명 된 뮤텍스가 존재 하지 않는 경우이 메서드 만들어지지는지 않습니다 것입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-399">If the named mutex does not exist, this method does not create it.</span></span> <span data-ttu-id="5deed-400">시스템 뮤텍스를 만들려면 이미 존재 하지 않을 경우 중 하나를 사용 합니다 <xref:System.Threading.Mutex.%23ctor%2A> 에 생성자를 `name` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-400">To create the system mutex when it does not already exist, use one of the <xref:System.Threading.Mutex.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="5deed-401">명명된 된 뮤텍스 있는지 확실 하지 않은 경우 대신이 메서드 오버 로드를 사용 합니다 <xref:System.Threading.Mutex.OpenExisting%28System.String%29> 뮤텍스가 존재 하지 않는 경우 예외를 throw 하는 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-401">If you are uncertain whether a named mutex exists, use this method overload instead of the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload, which throws an exception if the mutex does not exist.</span></span>  
  
 <span data-ttu-id="5deed-402">에 대해 동일한 값을 사용 하는이 메서드를 여러 번 호출 `name` 동일한 반드시 반환 하지 않는 <xref:System.Threading.Mutex> 개체를 반환 하는 개체가 같은 명명 된 시스템 뮤텍스를 나타내는 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-402">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Mutex> object, even though the objects that are returned represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="5deed-403">이 메서드 오버 로드는 호출에 해당 하는 <xref:System.Threading.Mutex.TryOpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%2CSystem.Threading.Mutex%40%29> 메서드 오버 로드 하 고 지정 <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> 및 <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> 권한, 비트 OR 연산을 사용 하 여 결합 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-403">This method overload is equivalent to calling the <xref:System.Threading.Mutex.TryOpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%2CSystem.Threading.Mutex%40%29> method overload and specifying <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> and <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> rights, combined by using the bitwise OR operation.</span></span> <span data-ttu-id="5deed-404">지정 하는 <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> 플래그 허용 스레드는 뮤텍스에서 대기를 지정 하 고는 <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> 플래그는 스레드가 호출 될 수 있습니다는 <xref:System.Threading.Mutex.ReleaseMutex%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5deed-404">Specifying the <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flag allows a thread to wait on the mutex, and specifying the <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flag allows a thread to call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span>  
  
 <span data-ttu-id="5deed-405">이 메서드 뮤텍스의 소유권을 요청 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-405">This method does not request ownership of the mutex.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5deed-406"><paramref name="name" />이 빈 문자열인 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-406"><paramref name="name" /> is an empty string.</span></span>  
  
<span data-ttu-id="5deed-407">또는</span><span class="sxs-lookup"><span data-stu-id="5deed-407">-or-</span></span> 
 <span data-ttu-id="5deed-408"><paramref name="name" />이 260자 보다 긴 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-408"><paramref name="name" /> is longer than 260 characters.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5deed-409"><paramref name="name" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-409"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="5deed-410">Win32 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-410">A Win32 error occurred.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="5deed-411">명명된 뮤텍스가 있으나 사용자에게 이를 사용하는 데 필요한 보안 액세스 권한이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-411">The named mutex exists, but the user does not have the security access required to use it.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="5deed-412">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-412">requires full trust for the immediate caller.</span></span> <span data-ttu-id="5deed-413">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-413">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, System.Security.AccessControl.MutexRights rights, out System.Threading.Mutex result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, valuetype System.Security.AccessControl.MutexRights rights, [out] class System.Threading.Mutex&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.TryOpenExisting(System.String,System.Security.AccessControl.MutexRights,System.Threading.Mutex@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, rights As MutexRights, ByRef result As Mutex) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, System::Security::AccessControl::MutexRights rights, [Runtime::InteropServices::Out] System::Threading::Mutex ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryOpenExisting : string * System.Security.AccessControl.MutexRights *  -&gt; bool" Usage="System.Threading.Mutex.TryOpenExisting (name, rights, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="rights" Type="System.Security.AccessControl.MutexRights" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.Threading.Mutex" RefType="out" Index="2" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="5deed-414">열려는 시스템 뮤텍스의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-414">The name of the system mutex to open.</span></span></param>
        <param name="rights"><span data-ttu-id="5deed-415">원하는 보안 액세스 권한을 나타내는 열거형 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-415">A bitwise combination of the enumeration values that represent the desired security access.</span></span></param>
        <param name="result"><span data-ttu-id="5deed-416">이 메서드가 반환될 때 호출이 성공적으로 실행된 경우 이름이 지정된 뮤텍스를 나타내는 <see cref="T:System.Threading.Mutex" /> 개체를 포함하고 호출에 실패한 경우는 <see langword="null" />을(를) 포함해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-416">When this method returns, contains a <see cref="T:System.Threading.Mutex" /> object that represents the named mutex if the call succeeded, or <see langword="null" /> if the call failed.</span></span> <span data-ttu-id="5deed-417">이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-417">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="5deed-418">지정된 명명된 뮤텍스를 원하는 보안 액세스 상태에서 열고 작업이 수행되었는지를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-418">Opens the specified named mutex, if it already exists, with the desired security access, and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="5deed-419">명명된 뮤텍스를 열었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-419"><see langword="true" /> if the named mutex was opened successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5deed-420">명명 된 뮤텍스가 존재 하지 않는 경우이 메서드 만들어지지는지 않습니다 것입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-420">If the named mutex does not exist, this method does not create it.</span></span> <span data-ttu-id="5deed-421">시스템 뮤텍스를 만들려면 이미 존재 하지 않을 경우 중 하나를 사용 합니다 <xref:System.Threading.Mutex.%23ctor%2A> 에 생성자를 `name` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-421">To create the system mutex when it does not already exist, use one of the <xref:System.Threading.Mutex.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="5deed-422">명명된 된 뮤텍스 있는지 확실 하지 않은 경우 대신이 메서드 오버 로드를 사용 합니다 <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> 뮤텍스가 존재 하지 않는 경우 예외를 throw 하는 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-422">If you are uncertain whether a named mutex exists, use this method overload instead of the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload, which throws an exception if the mutex does not exist.</span></span>  
  
 <span data-ttu-id="5deed-423">`rights` 매개 변수에 포함 되어야 합니다 <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> 스레드가 뮤텍스를 대기할 수 있게 하는 플래그 및 <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> 호출 스레드를 허용 하도록 플래그를 <xref:System.Threading.Mutex.ReleaseMutex%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="5deed-423">The `rights` parameter must include the <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flag to allow threads to wait on the mutex, and the <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flag to allow threads to call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span>  
  
 <span data-ttu-id="5deed-424">에 대해 동일한 값을 사용 하는이 메서드를 여러 번 호출 `name` 동일한 반드시 반환 하지 않는 <xref:System.Threading.Mutex> 개체를 반환 하는 개체가 같은 명명 된 시스템 뮤텍스를 나타내는 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-424">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Mutex> object, even though the objects that are returned represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="5deed-425">이 메서드 뮤텍스의 소유권을 요청 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-425">This method does not request ownership of the mutex.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5deed-426"><paramref name="name" />이 빈 문자열인 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-426"><paramref name="name" /> is an empty string.</span></span>  
  
<span data-ttu-id="5deed-427">또는</span><span class="sxs-lookup"><span data-stu-id="5deed-427">-or-</span></span> 
 <span data-ttu-id="5deed-428"><paramref name="name" />이 260자 보다 긴 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-428"><paramref name="name" /> is longer than 260 characters.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5deed-429"><paramref name="name" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-429"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="5deed-430">Win32 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-430">A Win32 error occurred.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="5deed-431">명명된 뮤텍스가 있으나 사용자에게 이를 사용하는 데 필요한 보안 액세스 권한이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="5deed-431">The named mutex exists, but the user does not have the security access required to use it.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="5deed-432">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-432">requires full trust for the immediate caller.</span></span> <span data-ttu-id="5deed-433">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="5deed-433">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
  </Members>
</Type>