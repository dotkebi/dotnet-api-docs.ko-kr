<Type Name="ParameterizedThreadStart" FullName="System.Threading.ParameterizedThreadStart">
  <Metadata><Meta Name="ms.openlocfilehash" Value="33bf1e7037d4fd595a1fa1ff8e3d19fffbfa234b" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58740077" /></Metadata><TypeSignature Language="C#" Value="public delegate void ParameterizedThreadStart(object obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ParameterizedThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ParameterizedThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ParameterizedThreadStart(obj As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ParameterizedThreadStart(System::Object ^ obj);" />
  <TypeSignature Language="F#" Value="type ParameterizedThreadStart = delegate of obj -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="obj" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="obj"><span data-ttu-id="a5fd5-101">스레드 프로시저의 데이터가 들어 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="a5fd5-101">An object that contains data for the thread procedure.</span></span></param>
    <summary><span data-ttu-id="a5fd5-102"><see cref="T:System.Threading.Thread" />에서 실행되는 메서드를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a5fd5-102">Represents the method that executes on a <see cref="T:System.Threading.Thread" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a5fd5-103">관리 되는 스레드를 만들면 스레드에서 실행 되는 메서드는으로 표현 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a5fd5-103">When a managed thread is created, the method that executes on the thread is represented by:</span></span>  
  
-   <span data-ttu-id="a5fd5-104">A <xref:System.Threading.ThreadStart> 에 전달 되는 대리자는 <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="a5fd5-104">A <xref:System.Threading.ThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> constructor.</span></span>  <span data-ttu-id="a5fd5-105">매개 변수가 없는 메서드를 반환 하는 `void` C# 또는 `Sub` Visual Basic의 프로시저 대리자를 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a5fd5-105">Any method that has no parameters and that returns `void` in C# or is a `Sub` procedure in Visual Basic can represent the delegate.</span></span>  
  
-   <span data-ttu-id="a5fd5-106">A <xref:System.Threading.ParameterizedThreadStart> 에 전달 되는 대리자는 <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="a5fd5-106">A <xref:System.Threading.ParameterizedThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="a5fd5-107">형식의 단일 매개 변수가 있는 메서드 <xref:System.Object> C#의 void 반환 되거나는 Visual Basic의 Sub 프로시저 대리자를 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a5fd5-107">Any method that has a single parameter of type <xref:System.Object> and that returns void in C# or is a Sub procedure in Visual Basic can represent the delegate.</span></span>  
  
 <span data-ttu-id="a5fd5-108">스레드가 실행 될 때까지 시작 하지는 <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> 메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a5fd5-108">The thread does not begin executing until the <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="a5fd5-109">합니다 <xref:System.Threading.ThreadStart> 또는 <xref:System.Threading.ParameterizedThreadStart> 대리자 스레드에서 호출 되 고 대리자가 나타내는 메서드의 첫 번째 줄에서 실행을 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="a5fd5-109">The <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate is invoked on the thread, and execution begins at the first line of the method represented by the delegate.</span></span> <span data-ttu-id="a5fd5-110">경우에 <xref:System.Threading.ParameterizedThreadStart> 대리자에 전달 되는 개체는 <xref:System.Threading.Thread.Start%28System.Object%29> 메서드에 대리자에 전달 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a5fd5-110">In the case of the <xref:System.Threading.ParameterizedThreadStart> delegate, the object that is passed to the <xref:System.Threading.Thread.Start%28System.Object%29> method is passed to the delegate.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a5fd5-111">Visual Basic 및 C# 사용자를 생략할 수는 <xref:System.Threading.ThreadStart> 또는 <xref:System.Threading.ParameterizedThreadStart> 스레드를 만드는 경우 대리자 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="a5fd5-111">Visual Basic and C# users can omit the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate constructor when creating a thread.</span></span> <span data-ttu-id="a5fd5-112">Visual Basic에서 사용 하 여는 `AddressOf` 메서드를 전달 하는 경우 연산자는 <xref:System.Threading.Thread.%23ctor%2A> 생성자; 예를 들어 `Dim t As New Thread(AddressOf ThreadProc)`합니다.</span><span class="sxs-lookup"><span data-stu-id="a5fd5-112">In Visual Basic, use the `AddressOf` operator when passing your method to the <xref:System.Threading.Thread.%23ctor%2A> constructor; for example, `Dim t As New Thread(AddressOf ThreadProc)`.</span></span> <span data-ttu-id="a5fd5-113">C#에서 스레드 프로시저의 이름을 지정 하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a5fd5-113">In C#, simply specify the name of the thread procedure.</span></span> <span data-ttu-id="a5fd5-114">컴파일러는 올바른 대리자 생성자를 선택 합니다.</span><span class="sxs-lookup"><span data-stu-id="a5fd5-114">The compiler selects the correct delegate constructor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a5fd5-115">만들 때는 <xref:System.Threading.ParameterizedThreadStart> c + +에서는 생성자의 첫 번째 매개 변수는 인스턴스 메서드는 인스턴스 변수에 대 한 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="a5fd5-115">When you create a <xref:System.Threading.ParameterizedThreadStart> delegate for an instance method in C++, the first parameter of the constructor is the instance variable.</span></span> <span data-ttu-id="a5fd5-116">정적 메서드를 생성자의 첫 번째 매개 변수는 0입니다.</span><span class="sxs-lookup"><span data-stu-id="a5fd5-116">For a static method, the first parameter of the constructor is zero.</span></span> <span data-ttu-id="a5fd5-117">정적 메서드를 대리자 생성자 매개 변수는 하나만 필요 합니다: 콜백 메서드, 클래스 이름으로 정규화 된 주소입니다.</span><span class="sxs-lookup"><span data-stu-id="a5fd5-117">For a static method, the delegate constructor requires only one parameter: the address of the callback method, qualified by the class name.</span></span>  
  
 <span data-ttu-id="a5fd5-118">합니다 <xref:System.Threading.ParameterizedThreadStart> 위임 하며 <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> 메서드 오버 로드 쉽게 스레드 프로시저에 데이터를 전달할 수 있지만이 기술은 형식이 안전 하지 않은 모든 개체를 전달할 수 있으므로 <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="a5fd5-118">The <xref:System.Threading.ParameterizedThreadStart> delegate and the <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> method overload make it easy to pass data to a thread procedure, but this technique is not type safe because any object can be passed to <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="a5fd5-119">스레드 프로시저에 데이터를 전달 하는 보다 강력한 방법 작업자 개체로 스레드 프로시저 및 데이터 필드를 배치 하는 경우</span><span class="sxs-lookup"><span data-stu-id="a5fd5-119">A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object.</span></span> <span data-ttu-id="a5fd5-120">자세한 내용은 [스레드 만들기 및 시작 시 데이터 전달](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a5fd5-120">For more information, see [Creating Threads and Passing Data at Start Time](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span></span>  
  
 <span data-ttu-id="a5fd5-121"><xref:System.Threading.ParameterizedThreadStart> 대리자는 단일 매개 변수만 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="a5fd5-121">The <xref:System.Threading.ParameterizedThreadStart> delegate supports only a single parameter.</span></span> <span data-ttu-id="a5fd5-122">여러 데이터 항목을 전달할 수 있습니다는 <xref:System.Threading.ParameterizedThreadStart> 다음 중 하나는 매개 변수를 만들어:</span><span class="sxs-lookup"><span data-stu-id="a5fd5-122">You can pass multiple data items to the <xref:System.Threading.ParameterizedThreadStart> by making that parameter one of the following:</span></span>  
  
-   <span data-ttu-id="a5fd5-123">배열입니다.</span><span class="sxs-lookup"><span data-stu-id="a5fd5-123">An array.</span></span>  
  
-   <span data-ttu-id="a5fd5-124">컬렉션 형식-동일한 형식의 경우 모든 데이터 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="a5fd5-124">A collection type, if all of the data items are of the same type.</span></span>  
  
-   <span data-ttu-id="a5fd5-125">와 같은 튜플 형식 <xref:System.Tuple%602> 또는 <xref:System.Tuple%604>합니다.</span><span class="sxs-lookup"><span data-stu-id="a5fd5-125">A tuple type, such as <xref:System.Tuple%602> or <xref:System.Tuple%604>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a5fd5-126">다음 코드 예제에서는 <xref:System.Threading.ParameterizedThreadStart> 정적 메서드와 인스턴스 메서드를 실행할 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="a5fd5-126">The following code example uses a <xref:System.Threading.ParameterizedThreadStart> delegate to execute a static method and an instance method.</span></span> <span data-ttu-id="a5fd5-127">첫 번째 <xref:System.Threading.ParameterizedThreadStart> 대리자는 정적으로 표시 됩니다 `DoWork` 메서드 및 두 번째 인스턴스에 의해 표현 됩니다 `DoMoreWork` 메서드.</span><span class="sxs-lookup"><span data-stu-id="a5fd5-127">The first <xref:System.Threading.ParameterizedThreadStart> delegate is represented by the static `DoWork` method and the second is represented by the instance `DoMoreWork` method.</span></span> <span data-ttu-id="a5fd5-128">두 방법 모두 일치 합니다 <xref:System.Threading.ParameterizedThreadStart> 대리자 시그니처; 형식의 단일 매개 변수가 있는 즉, <xref:System.Object> 있으며 값을 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a5fd5-128">Both methods match the <xref:System.Threading.ParameterizedThreadStart> delegate signature; that is, they have a single parameter of type <xref:System.Object> and don't return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a5fd5-129">Visual Basic 및 C# 컴파일러에서 유추를 <xref:System.Threading.ParameterizedThreadStart> 서명을에서 위임 합니다 `DoWork` 및 `DoMoreWork` 메서드 및 올바른 생성자 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="a5fd5-129">The Visual Basic and C# compilers infer the <xref:System.Threading.ParameterizedThreadStart> delegate from the signatures of the `DoWork` and `DoMoreWork` methods, and call the correct constructor.</span></span> <span data-ttu-id="a5fd5-130">따라서 코드에서 명시적 생성자를 호출 하지 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a5fd5-130">Thus, there is no explicit constructor call in the code.</span></span>  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
    <related type="Article" href="~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md"><span data-ttu-id="a5fd5-131">스레드 만들기</span><span class="sxs-lookup"><span data-stu-id="a5fd5-131">Creating Threads</span></span></related>
  </Docs>
</Type>