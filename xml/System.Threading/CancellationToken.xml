<Type Name="CancellationToken" FullName="System.Threading.CancellationToken">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e3d7f1b32c93ee6a846ae19f351082e292a90426" /><Meta Name="ms.sourcegitcommit" Value="2dd0eede6edd6dd3d2aa8f79010848658b967609" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="04/18/2019" /><Meta Name="ms.locfileid" Value="58874555" /></Metadata><TypeSignature Language="C#" Value="public struct CancellationToken" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit CancellationToken extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.CancellationToken" />
  <TypeSignature Language="VB.NET" Value="Public Structure CancellationToken" />
  <TypeSignature Language="C++ CLI" Value="public value class CancellationToken" />
  <TypeSignature Language="F#" Value="type CancellationToken = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("IsCancellationRequested = {IsCancellationRequested}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f9329-101">작업을 취소하지 않아야 함을 전파합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-101">Propagates notification that operations should be canceled.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9329-102">A <xref:System.Threading.CancellationToken> 스레드를 스레드 풀 작업 항목 간 협조적 취소를 사용 하도록 설정 하거나 <xref:System.Threading.Tasks.Task> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-102">A <xref:System.Threading.CancellationToken> enables cooperative cancellation between threads, thread pool work items, or <xref:System.Threading.Tasks.Task> objects.</span></span> <span data-ttu-id="f9329-103">취소 토큰을 인스턴스화하여 만들를 <xref:System.Threading.CancellationTokenSource> 에서 취소 토큰을 관리 하는 개체를 검색할 해당 <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType> 속성.</span><span class="sxs-lookup"><span data-stu-id="f9329-103">You create a cancellation token by instantiating a <xref:System.Threading.CancellationTokenSource> object, which manages cancellation tokens retrieved from its <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="f9329-104">그런 다음 임의 개수의 스레드, 작업 또는 취소의 통지를 수신 해야 하는 작업에 취소 토큰을 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-104">You then  pass the cancellation token to any number of threads, tasks, or operations that should receive notice of cancellation.</span></span> <span data-ttu-id="f9329-105">취소를 시작 하는 토큰을 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-105">The token cannot be used to initiate cancellation.</span></span> <span data-ttu-id="f9329-106">소유 하는 개체를 호출 하면 <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType>의 <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> 취소 토큰의 모든 복사본에 대 한 속성이 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-106">When the owning object calls <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType>, the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property on every copy of the cancellation token is set to `true`.</span></span> <span data-ttu-id="f9329-107">알림을 수신 하는 개체는 적절 한 방식으로 응답할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-107">The objects that receive the notification can respond in whatever manner is appropriate.</span></span>  
  
 <span data-ttu-id="f9329-108">자세한 내용과 코드 예제를 참조 하세요. [관리 되는 스레드의 취소](~/docs/standard/threading/cancellation-in-managed-threads.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-108">For more information and code examples see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9329-109">다음 예제에서는 정수 값 10 11 개의 다양 한 계측에서 읽는 데이터 컬렉션 응용 프로그램을 에뮬레이트 하려면 난수 생성기를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-109">The following example uses a random number generator to emulate a data collection application that reads 10 integral values from eleven different instruments.</span></span> <span data-ttu-id="f9329-110">0 값 작업을 취소 해야 하는 경우와 없는 전체 평균을 계산 해야 하는 하나의 계측에 대 한 측정에 실패 했음을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-110">A value of zero indicates that the measurement has failed for one instrument, in which case the operation should be cancelled and no overall mean should be computed.</span></span>  
  
 <span data-ttu-id="f9329-111">이 예제에서는 작업의 가능한 취소를 처리 하려면 인스턴스화합니다를 <xref:System.Threading.CancellationTokenSource> 에 전달 되는 취소 토큰을 생성 하는 개체를 <xref:System.Threading.Tasks.TaskFactory> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-111">To handle the possible cancellation of the operation, the example instantiates a <xref:System.Threading.CancellationTokenSource> object that generates a cancellation token which is passed to a <xref:System.Threading.Tasks.TaskFactory> object.</span></span> <span data-ttu-id="f9329-112"><xref:System.Threading.Tasks.TaskFactory> 개체 취소 토큰에 전달 작업을 각각 특정 계측에 대 한 정보를 수집 하는 일을 담당 합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-112">The <xref:System.Threading.Tasks.TaskFactory> object in turn passes the cancellation token to each of the tasks responsible for collecting readings for a particular instrument.</span></span> <span data-ttu-id="f9329-113"><xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> 메서드는 평균은 모든 자료 성공적으로 수집한 후에 계산 되도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-113">The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method is called to ensure that the mean is computed only after all readings have been gathered successfully.</span></span> <span data-ttu-id="f9329-114">작업은 취소 되었으므로 때문이 아니라 있으면에 대 한 호출을 <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType> 메서드에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-114">If a task has not because it has been cancelled, the call to the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType> method throws an exception.</span></span>  
  
 [!code-csharp[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/cs/cancel1.cs#1)]
 [!code-vb[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/vb/cancel1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="f9329-115">모든 public 및 protected 멤버만 <see cref="T:System.Threading.CancellationToken" /> 는 스레드로부터 안전 하 고 여러 스레드에서 동시에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-115">All public and protected members of <see cref="T:System.Threading.CancellationToken" /> are thread-safe and may be used concurrently from multiple threads.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="f9329-116">취소</span><span class="sxs-lookup"><span data-stu-id="f9329-116">Cancellation</span></span></related>
    <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="f9329-117">작업 취소</span><span class="sxs-lookup"><span data-stu-id="f9329-117">Task Cancellation</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CancellationToken (bool canceled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool canceled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (canceled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CancellationToken(bool canceled);" />
      <MemberSignature Language="F#" Value="new System.Threading.CancellationToken : bool -&gt; System.Threading.CancellationToken" Usage="new System.Threading.CancellationToken canceled" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="canceled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="canceled"><span data-ttu-id="f9329-118">토큰의 취소된 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-118">The canceled state for the token.</span></span></param>
        <summary><span data-ttu-id="f9329-119"><see cref="T:System.Threading.CancellationToken" />을 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-119">Initializes the <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9329-120">이 생성자를 사용 하 여 만든 토큰으로 지정 된 취소 된 상태로 남아는 `canceled` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-120">Tokens created with this constructor will remain in the canceled state specified by the `canceled` parameter.</span></span> <span data-ttu-id="f9329-121">경우 `canceled` 됩니다 `false`모두 <xref:System.Threading.CancellationToken.CanBeCanceled%2A> 하 고 <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> 됩니다 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-121">If `canceled` is `false`, both <xref:System.Threading.CancellationToken.CanBeCanceled%2A> and <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will be `false`.</span></span>  
  
 <span data-ttu-id="f9329-122">경우 `canceled` 됩니다 `true`모두 <xref:System.Threading.CancellationToken.CanBeCanceled%2A> 하 고 <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> 됩니다 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-122">If `canceled` is `true`, both <xref:System.Threading.CancellationToken.CanBeCanceled%2A> and <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will be `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="f9329-123">취소</span><span class="sxs-lookup"><span data-stu-id="f9329-123">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="f9329-124">작업 취소</span><span class="sxs-lookup"><span data-stu-id="f9329-124">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CanBeCanceled">
      <MemberSignature Language="C#" Value="public bool CanBeCanceled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanBeCanceled" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.CanBeCanceled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanBeCanceled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanBeCanceled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanBeCanceled : bool" Usage="System.Threading.CancellationToken.CanBeCanceled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f9329-125">이 토큰이 취소된 상태로 있을 수 있는지 여부를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-125">Gets whether this token is capable of being in the canceled state.</span></span></summary>
        <value><span data-ttu-id="f9329-126">이 토큰이 취소된 상태로 있을 수 있으면.<see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-126"><see langword="true" /> if this token is capable of being in the canceled state; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9329-127">하는 경우 <xref:System.Threading.CancellationToken.CanBeCanceled%2A> 반환 `false`에 토큰은 전환 되지 않습니다 취소 된 상태로, 즉 반드시 <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> 반환 하지 것입니다 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-127">If <xref:System.Threading.CancellationToken.CanBeCanceled%2A> returns `false`, it is guaranteed that the token will never transition into a canceled state, meaning that <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will never return `true`.</span></span> <span data-ttu-id="f9329-128">취소 토큰을 취소할 수 없습니다는 정적 반환한 <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-128">A cancellation token that cannot be canceled is returned by the static <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="f9329-129">값을 검사 하기 전에 취소 토큰을 취소할 수 있는지 여부를 확인 하려면이 속성을 선택적으로 사용할 수 있습니다는 <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> 취소 되었는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-129">You can optionally use this property to determine whether a cancellation token can be canceled before examining the value of the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property to determine whether it has been canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="f9329-130">취소</span><span class="sxs-lookup"><span data-stu-id="f9329-130">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="f9329-131">작업 취소</span><span class="sxs-lookup"><span data-stu-id="f9329-131">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f9329-132">현재 <see cref="T:System.Threading.CancellationToken" /> 인스턴스와 지정한 토큰이 같은지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-132">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified token.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (other As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="cancellationToken.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="f9329-133">이 인스턴스와 비교할 다른 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-133">The other object to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="f9329-134">현재 <see cref="T:System.Threading.CancellationToken" /> 인스턴스와 지정한 <see cref="T:System.Object" />가 같은지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-134">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified <see cref="T:System.Object" />.</span></span></summary>
        <returns><span data-ttu-id="f9329-135"><paramref name="other" />가 <see cref="T:System.Threading.CancellationToken" />이고 두 인스턴스가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-135"><see langword="true" /> if <paramref name="other" /> is a <see cref="T:System.Threading.CancellationToken" /> and if the two instances are equal; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="f9329-136">자세한 내용은 설명 부분을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="f9329-136">See the Remarks section for more information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="f9329-137">두 개의 취소 토큰은 다음 조건 중 하나라도 참인 경우:</span><span class="sxs-lookup"><span data-stu-id="f9329-137">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="f9329-138">에 연결 되어 동일한 <xref:System.Threading.CancellationTokenSource>입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-138">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="f9329-139">이러한 공용에서 생성 된 <xref:System.Threading.CancellationToken> 생성자 및 해당 <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> 값이 같으면 합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-139">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="f9329-140">모두 취소 토큰의 값은 <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-140">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f9329-141">연결된 <see cref="T:System.Threading.CancellationTokenSource" />가 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-141">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="f9329-142">취소</span><span class="sxs-lookup"><span data-stu-id="f9329-142">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="f9329-143">작업 취소</span><span class="sxs-lookup"><span data-stu-id="f9329-143">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Threading.CancellationToken other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Threading.CancellationToken other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Threading::CancellationToken other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Threading.CancellationToken -&gt; bool" Usage="cancellationToken.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="f9329-144">이 인스턴스와 비교할 다른 <see cref="T:System.Threading.CancellationToken" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-144">The other <see cref="T:System.Threading.CancellationToken" /> to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="f9329-145">현재 <see cref="T:System.Threading.CancellationToken" /> 인스턴스와 지정한 토큰이 같은지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-145">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified token.</span></span></summary>
        <returns><span data-ttu-id="f9329-146">인스턴스가 서로 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-146"><see langword="true" /> if the instances are equal; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="f9329-147">자세한 내용은 설명 부분을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="f9329-147">See the Remarks section for more information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="f9329-148">두 개의 취소 토큰은 다음 조건 중 하나라도 참인 경우:</span><span class="sxs-lookup"><span data-stu-id="f9329-148">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="f9329-149">에 연결 되어 동일한 <xref:System.Threading.CancellationTokenSource>입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-149">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="f9329-150">이러한 공용에서 생성 된 <xref:System.Threading.CancellationToken> 생성자 및 해당 <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> 값이 같으면 합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-150">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="f9329-151">모두 취소 토큰의 값은 <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-151">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>

       ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="f9329-152">취소</span><span class="sxs-lookup"><span data-stu-id="f9329-152">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="f9329-153">작업 취소</span><span class="sxs-lookup"><span data-stu-id="f9329-153">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="cancellationToken.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f9329-154"><see cref="T:System.Threading.CancellationToken" />의 해시 함수 역할을 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-154">Serves as a hash function for a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="f9329-155">현재 <see cref="T:System.Threading.CancellationToken" /> 인스턴스에 대한 해시 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-155">A hash code for the current <see cref="T:System.Threading.CancellationToken" /> instance.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCancellationRequested">
      <MemberSignature Language="C#" Value="public bool IsCancellationRequested { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCancellationRequested" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.IsCancellationRequested" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCancellationRequested As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCancellationRequested { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCancellationRequested : bool" Usage="System.Threading.CancellationToken.IsCancellationRequested" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f9329-156">이 토큰의 취소가 요청되었는지 여부를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-156">Gets whether cancellation has been requested for this token.</span></span></summary>
        <value><span data-ttu-id="f9329-157">이 토큰에 대해 취소가 요청되었으며 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-157"><see langword="true" /> if cancellation has been requested for this token; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9329-158">이 속성을 호출 하거나 처음에 취소 된 상태로 생성 되는 토큰을 통해이 토큰의 취소가 요청 되었는지 여부를 나타냅니다 <xref:System.Threading.CancellationTokenSource.Cancel%2A> 에 연결 된 토큰의 <xref:System.Threading.CancellationTokenSource>합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-158">This property indicates whether cancellation has been requested for this token, either through the token initially being constructed in a canceled state, or through calling <xref:System.Threading.CancellationTokenSource.Cancel%2A> on the token's associated <xref:System.Threading.CancellationTokenSource>.</span></span>  
  
 <span data-ttu-id="f9329-159">이 속성이 `true`, 취소가 요청 되었는지만 보장 합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-159">If this property is `true`, it only guarantees that cancellation has been requested.</span></span> <span data-ttu-id="f9329-160">모든 등록 된 처리기가 실행을 완료 하거나 취소 요청 모든 등록 된 처리기에 완전히 전파 완료를 보장 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-160">It does not guarantee that every registered handler has finished executing, nor that cancellation requests have finished propagating to all registered handlers.</span></span> <span data-ttu-id="f9329-161">추가 동기화 관련된 개체를 동시에 취소 되는 위치는 상황에서 특히 필요할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-161">Additional synchronization may be required, particularly in situations where related objects are being canceled concurrently.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9329-162">다음은 될 때까지 서버 프로세스를 실행 하는 간단한 예는 <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> 속성이 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-162">The following is a simple example that executes a server process until the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property returns `true`.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.CancellationToken.IsCancellationRequested#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Tasks.CancellationToken.IsCancellationRequested/cs/cancellation.cs#12)]
 [!code-vb[System.Threading.Tasks.CancellationToken.IsCancellationRequested#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Tasks.CancellationToken.IsCancellationRequested/vb/cancelthreads.vb#12)]  
  
 <span data-ttu-id="f9329-163">이 예제에서는 인스턴스화합니다는 <xref:System.Threading.CancellationTokenSource> 취소 토큰에 대 한 액세스를 제어 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-163">The example instantiates a <xref:System.Threading.CancellationTokenSource> object, which controls access to the cancellation token.</span></span> <span data-ttu-id="f9329-164">다음 두 개의 스레드 프로시저를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-164">It then defines two thread procedures.</span></span> <span data-ttu-id="f9329-165">키보드를 풀 하 고 "C" 키를 누를 때 호출 하는 람다 식으로 정의 된 첫 번째 <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> 취소 토큰이 취소 된 상태로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-165">The first is defined as a lambda expression that pools the keyboard and, when the "C" key is pressed, calls <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> to set the cancellation token to the cancelled state.</span></span> <span data-ttu-id="f9329-166">두 번째 매개 변수가 있는 메서드인지 `ServerClass.StaticMethod`, 될 때까지 루프를 실행 하는 <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> 속성은 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-166">The second is a parameterized method, `ServerClass.StaticMethod`, that executes a loop until the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="f9329-167">주 스레드가 시작한 블록이 고 두 개의 스레드를 실행 하는 스레드가 될 때까지 `ServerClass.StaticMethod` 메서드를 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-167">The main thread then starts the two threads and blocks until the thread that executes the `ServerClass.StaticMethod` method terminates.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="f9329-168">취소</span><span class="sxs-lookup"><span data-stu-id="f9329-168">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="f9329-169">작업 취소</span><span class="sxs-lookup"><span data-stu-id="f9329-169">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static System.Threading.CancellationToken None { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Threading.CancellationToken None" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property None As CancellationToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::CancellationToken None { System::Threading::CancellationToken get(); };" />
      <MemberSignature Language="F#" Value="member this.None : System.Threading.CancellationToken" Usage="System.Threading.CancellationToken.None" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f9329-170">빈 <see cref="T:System.Threading.CancellationToken" /> 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-170">Returns an empty <see cref="T:System.Threading.CancellationToken" /> value.</span></span></summary>
        <value><span data-ttu-id="f9329-171">빈 취소 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-171">An empty cancellation token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9329-172">이 속성에 의해 반환 되는 취소 토큰을 취소할 수 없습니다. 즉, 해당 <xref:System.Threading.CancellationToken.CanBeCanceled%2A> 속성은 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-172">The cancellation token returned by this property cannot be canceled; that is, its <xref:System.Threading.CancellationToken.CanBeCanceled%2A> property is `false`.</span></span>  
  
 <span data-ttu-id="f9329-173">C# 사용할 수도 있습니다 [default(CancellationToken)](~/docs/csharp/language-reference/keywords/default.md) 문이 빈 취소 토큰을 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-173">You can also use the C#  [default(CancellationToken)](~/docs/csharp/language-reference/keywords/default.md) statement to create an empty cancellation token.</span></span> 

 <span data-ttu-id="f9329-174">두 빈 취소 토큰은 항상 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-174">Two empty cancellation tokens are always equal.</span></span>
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="f9329-175">취소</span><span class="sxs-lookup"><span data-stu-id="f9329-175">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="f9329-176">작업 취소</span><span class="sxs-lookup"><span data-stu-id="f9329-176">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Threading.CancellationToken left, System.Threading.CancellationToken right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Threading.CancellationToken left, valuetype System.Threading.CancellationToken right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As CancellationToken, right As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Threading::CancellationToken left, System::Threading::CancellationToken right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Threading.CancellationToken * System.Threading.CancellationToken -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Threading.CancellationToken" />
        <Parameter Name="right" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="f9329-177">첫 번째 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-177">The first instance.</span></span></param>
        <param name="right"><span data-ttu-id="f9329-178">두 번째 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-178">The second instance.</span></span></param>
        <summary><span data-ttu-id="f9329-179">두 개의 <see cref="T:System.Threading.CancellationToken" /> 인스턴스가 같은지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-179">Determines whether two <see cref="T:System.Threading.CancellationToken" /> instances are equal.</span></span></summary>
        <returns><span data-ttu-id="f9329-180">인스턴스가 동일한 경우 <see langword="true" />이며, 그렇지 않은 경우 <see langword="false" />입니다. 자세한 내용은 설명 섹션을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="f9329-180"><see langword="true" /> if the instances are equal; otherwise, <see langword="false" /> See the Remarks section for more information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="f9329-181">두 개의 취소 토큰은 다음 조건 중 하나라도 참인 경우:</span><span class="sxs-lookup"><span data-stu-id="f9329-181">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="f9329-182">에 연결 되어 동일한 <xref:System.Threading.CancellationTokenSource>입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-182">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="f9329-183">이러한 공용에서 생성 된 <xref:System.Threading.CancellationToken> 생성자 및 해당 <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> 값이 같으면 합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-183">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="f9329-184">모두 취소 토큰의 값은 <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-184">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>
       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f9329-185">연결된 <see cref="T:System.Threading.CancellationTokenSource" />가 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-185">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="f9329-186">취소</span><span class="sxs-lookup"><span data-stu-id="f9329-186">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="f9329-187">작업 취소</span><span class="sxs-lookup"><span data-stu-id="f9329-187">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Threading.CancellationToken left, System.Threading.CancellationToken right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Threading.CancellationToken left, valuetype System.Threading.CancellationToken right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As CancellationToken, right As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Threading::CancellationToken left, System::Threading::CancellationToken right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Threading.CancellationToken * System.Threading.CancellationToken -&gt; bool" Usage="System.Threading.CancellationToken.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Threading.CancellationToken" />
        <Parameter Name="right" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="f9329-188">첫 번째 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-188">The first instance.</span></span></param>
        <param name="right"><span data-ttu-id="f9329-189">두 번째 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-189">The second instance.</span></span></param>
        <summary><span data-ttu-id="f9329-190">두 <see cref="T:System.Threading.CancellationToken" /> 인스턴스가 서로 다른지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-190">Determines whether two <see cref="T:System.Threading.CancellationToken" /> instances are not equal.</span></span></summary>
        <returns><span data-ttu-id="f9329-191">인스턴스가 서로 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-191"><see langword="true" /> if the instances are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="f9329-192">같음의 정의 대 한 참조를 <xref:System.Threading.CancellationToken.Equals%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="f9329-192">For the definition of equality, see the <xref:System.Threading.CancellationToken.Equals%2A> method.</span></span> 
       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f9329-193">연결된 <see cref="T:System.Threading.CancellationTokenSource" />가 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-193">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="f9329-194">취소</span><span class="sxs-lookup"><span data-stu-id="f9329-194">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="f9329-195">작업 취소</span><span class="sxs-lookup"><span data-stu-id="f9329-195">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Register">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f9329-196">이 <see cref="T:System.Threading.CancellationToken" />이 취소될 때 호출할 대리자를 등록합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-196">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="f9329-197">취소</span><span class="sxs-lookup"><span data-stu-id="f9329-197">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="f9329-198">작업 취소</span><span class="sxs-lookup"><span data-stu-id="f9329-198">Task Cancellation</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Register : Action -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="f9329-199"><see cref="T:System.Threading.CancellationToken" />이 취소될 때 실행할 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-199">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></param>
        <summary><span data-ttu-id="f9329-200">이 <see cref="T:System.Threading.CancellationToken" />이 취소될 때 호출할 대리자를 등록합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-200">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <returns><span data-ttu-id="f9329-201">콜백 등록을 취소하는 데 사용할 수 있는 <see cref="T:System.Threading.CancellationTokenRegistration" /> 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-201">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9329-202">이 토큰이 취소 된 상태로 이미 경우 대리자는 즉시 하 고 동기적으로 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-202">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="f9329-203">이 메서드 호출에서 대리자를 생성 하는 모든 예외를 전파 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-203">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="f9329-204">현재 <xref:System.Threading.ExecutionContext> 대리자와 함께 캡처됩니다 하 고 실행 하는 경우 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-204">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="f9329-205">현재 <xref:System.Threading.SynchronizationContext> 식이 캡처되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-205">The current <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
 
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f9329-206">연결된 <see cref="T:System.Threading.CancellationTokenSource" />가 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-206">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f9329-207"><paramref name="callback" />가 null입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-207"><paramref name="callback" /> is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="f9329-208">취소</span><span class="sxs-lookup"><span data-stu-id="f9329-208">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="f9329-209">작업 취소</span><span class="sxs-lookup"><span data-stu-id="f9329-209">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8838dd75-18ed-4b8b-b322-cd4531faac64"><span data-ttu-id="f9329-210">방법: 취소 요청에 대한 콜백 등록</span><span class="sxs-lookup"><span data-stu-id="f9329-210">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action callback, bool useSynchronizationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action callback, bool useSynchronizationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action, useSynchronizationContext As Boolean) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action ^ callback, bool useSynchronizationContext);" />
      <MemberSignature Language="F#" Value="member this.Register : Action * bool -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register (callback, useSynchronizationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="useSynchronizationContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="f9329-211"><see cref="T:System.Threading.CancellationToken" />이 취소될 때 실행할 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-211">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></param>
        <param name="useSynchronizationContext"><span data-ttu-id="f9329-212">현재 <see cref="T:System.Threading.SynchronizationContext" />를 캡처하여 <paramref name="callback" />을 호출할 때 사용할지 여부를 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-212">A value that indicates whether to capture the current <see cref="T:System.Threading.SynchronizationContext" /> and use it when invoking the <paramref name="callback" />.</span></span></param>
        <summary><span data-ttu-id="f9329-213">이 <see cref="T:System.Threading.CancellationToken" />이 취소될 때 호출할 대리자를 등록합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-213">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <returns><span data-ttu-id="f9329-214">콜백 등록을 취소하는 데 사용할 수 있는 <see cref="T:System.Threading.CancellationTokenRegistration" /> 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-214">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9329-215">이 토큰이 취소 된 상태로 이미 경우 대리자는 즉시 하 고 동기적으로 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-215">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="f9329-216">이 메서드 호출에서 대리자를 생성 하는 모든 예외를 전파 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-216">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="f9329-217">현재 <xref:System.Threading.ExecutionContext> 대리자와 함께 캡처됩니다 하 고 실행 하는 경우 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-217">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="f9329-218">경우 `useSynchronizationContext` 됩니다 `true`, 현재 <xref:System.Threading.SynchronizationContext>, 경우 하나, 대리자와 함께 캡처됩니다 수도 있고 실행 때 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-218">If `useSynchronizationContext` is `true`, the current <xref:System.Threading.SynchronizationContext>, if one exists, is also captured along with the delegate and will be used when executing it.</span></span> <span data-ttu-id="f9329-219">그렇지 않으면 <xref:System.Threading.SynchronizationContext> 식이 캡처되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-219">Otherwise, <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f9329-220">연결된 <see cref="T:System.Threading.CancellationTokenSource" />가 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-220">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f9329-221"><paramref name="callback" />가 null입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-221"><paramref name="callback" /> is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="f9329-222">취소</span><span class="sxs-lookup"><span data-stu-id="f9329-222">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="f9329-223">작업 취소</span><span class="sxs-lookup"><span data-stu-id="f9329-223">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8838dd75-18ed-4b8b-b322-cd4531faac64"><span data-ttu-id="f9329-224">방법: 취소 요청에 대한 콜백 등록</span><span class="sxs-lookup"><span data-stu-id="f9329-224">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action&lt;object&gt; callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action`1&lt;object&gt; callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action(Of Object), state As Object) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action&lt;System::Object ^&gt; ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.Register : Action&lt;obj&gt; * obj -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="f9329-225"><see cref="T:System.Threading.CancellationToken" />이 취소될 때 실행할 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-225">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></param>
        <param name="state"><span data-ttu-id="f9329-226">대리자가 호출될 때 <paramref name="callback" />에 전달할 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-226">The state to pass to the <paramref name="callback" /> when the delegate is invoked.</span></span> <span data-ttu-id="f9329-227">null일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-227">This may be null.</span></span></param>
        <summary><span data-ttu-id="f9329-228">이 <see cref="T:System.Threading.CancellationToken" />이 취소될 때 호출할 대리자를 등록합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-228">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <returns><span data-ttu-id="f9329-229">콜백 등록을 취소하는 데 사용할 수 있는 <see cref="T:System.Threading.CancellationTokenRegistration" /> 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-229">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9329-230">이 토큰이 취소 된 상태로 이미 경우 대리자는 즉시 하 고 동기적으로 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-230">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="f9329-231">이 메서드 호출에서 대리자를 생성 하는 모든 예외를 전파 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-231">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="f9329-232">현재 <xref:System.Threading.ExecutionContext> 대리자와 함께 캡처됩니다 하 고 실행 하는 경우 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-232">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="f9329-233">현재 <xref:System.Threading.SynchronizationContext> 식이 캡처되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-233">The current <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f9329-234">연결된 <see cref="T:System.Threading.CancellationTokenSource" />가 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-234">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f9329-235"><paramref name="callback" />가 null입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-235"><paramref name="callback" /> is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="f9329-236">취소</span><span class="sxs-lookup"><span data-stu-id="f9329-236">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="f9329-237">작업 취소</span><span class="sxs-lookup"><span data-stu-id="f9329-237">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8838dd75-18ed-4b8b-b322-cd4531faac64"><span data-ttu-id="f9329-238">방법: 취소 요청에 대한 콜백 등록</span><span class="sxs-lookup"><span data-stu-id="f9329-238">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action&lt;object&gt; callback, object state, bool useSynchronizationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action`1&lt;object&gt; callback, object state, bool useSynchronizationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action(Of Object), state As Object, useSynchronizationContext As Boolean) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action&lt;System::Object ^&gt; ^ callback, System::Object ^ state, bool useSynchronizationContext);" />
      <MemberSignature Language="F#" Value="member this.Register : Action&lt;obj&gt; * obj * bool -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register (callback, state, useSynchronizationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="useSynchronizationContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="f9329-239"><see cref="T:System.Threading.CancellationToken" />이 취소될 때 실행할 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-239">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></param>
        <param name="state"><span data-ttu-id="f9329-240">대리자가 호출될 때 <paramref name="callback" />에 전달할 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-240">The state to pass to the <paramref name="callback" /> when the delegate is invoked.</span></span> <span data-ttu-id="f9329-241">null일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-241">This may be null.</span></span></param>
        <param name="useSynchronizationContext"><span data-ttu-id="f9329-242">현재 <see cref="T:System.Threading.SynchronizationContext" />를 캡처하여 <paramref name="callback" />을 호출할 때 사용할지 여부를 나타내는 부울 값입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-242">A Boolean value that indicates whether to capture the current <see cref="T:System.Threading.SynchronizationContext" /> and use it when invoking the <paramref name="callback" />.</span></span></param>
        <summary><span data-ttu-id="f9329-243">이 <see cref="T:System.Threading.CancellationToken" />이 취소될 때 호출할 대리자를 등록합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-243">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <returns><span data-ttu-id="f9329-244">콜백 등록을 취소하는 데 사용할 수 있는 <see cref="T:System.Threading.CancellationTokenRegistration" /> 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-244">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9329-245">이 토큰이 취소 된 상태로 이미 경우 대리자는 즉시 하 고 동기적으로 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-245">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="f9329-246">이 메서드 호출에서 대리자를 생성 하는 모든 예외를 전파 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-246">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="f9329-247">현재 <xref:System.Threading.ExecutionContext> 대리자와 함께 캡처됩니다 하 고 실행 하는 경우 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-247">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="f9329-248">경우 `useSynchronizationContext` 됩니다 `true`, 현재 <xref:System.Threading.SynchronizationContext>, 경우 하나, 대리자와 함께 캡처됩니다 수도 있고 실행 때 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-248">If `useSynchronizationContext` is `true`, the current <xref:System.Threading.SynchronizationContext>, if one exists, is also captured along with the delegate and will be used when executing it.</span></span> <span data-ttu-id="f9329-249">그렇지 않으면 <xref:System.Threading.SynchronizationContext> 식이 캡처되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-249">Otherwise, <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f9329-250">연결된 <see cref="T:System.Threading.CancellationTokenSource" />가 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-250">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f9329-251"><paramref name="callback" />가 null입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-251"><paramref name="callback" /> is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="f9329-252">취소</span><span class="sxs-lookup"><span data-stu-id="f9329-252">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="f9329-253">작업 취소</span><span class="sxs-lookup"><span data-stu-id="f9329-253">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8838dd75-18ed-4b8b-b322-cd4531faac64"><span data-ttu-id="f9329-254">방법: 취소 요청에 대한 콜백 등록</span><span class="sxs-lookup"><span data-stu-id="f9329-254">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ThrowIfCancellationRequested">
      <MemberSignature Language="C#" Value="public void ThrowIfCancellationRequested ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ThrowIfCancellationRequested() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.ThrowIfCancellationRequested" />
      <MemberSignature Language="VB.NET" Value="Public Sub ThrowIfCancellationRequested ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ThrowIfCancellationRequested();" />
      <MemberSignature Language="F#" Value="member this.ThrowIfCancellationRequested : unit -&gt; unit" Usage="cancellationToken.ThrowIfCancellationRequested " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f9329-255">이 토큰의 취소가 요청된 경우 <see cref="T:System.OperationCanceledException" />이 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-255">Throws a <see cref="T:System.OperationCanceledException" /> if this token has had cancellation requested.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9329-256">이 메서드는 동일한 기능을을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-256">This method provides functionality equivalent to:</span></span>  
  
 <span data-ttu-id="f9329-257">C#</span><span class="sxs-lookup"><span data-stu-id="f9329-257">C#</span></span>  
  
```csharp  
if (token.IsCancellationRequested)   
    throw new OperationCanceledException(token);  
```  
  
```vb  
If token.IsCancellationRequested Then  
    Throw New OperationCanceledException(token)  
End If  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="f9329-258">이 토큰의 취소가 요청되었습니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-258">The token has had cancellation requested.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f9329-259">연결된 <see cref="T:System.Threading.CancellationTokenSource" />가 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-259">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="f9329-260">취소</span><span class="sxs-lookup"><span data-stu-id="f9329-260">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="f9329-261">작업 취소</span><span class="sxs-lookup"><span data-stu-id="f9329-261">Task Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-cancel-a-task-and-its-children.md"><span data-ttu-id="f9329-262">방법: 작업 및 해당 자식 취소</span><span class="sxs-lookup"><span data-stu-id="f9329-262">How to: Cancel a Task and Its Children</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegister">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration UnsafeRegister (Action&lt;object&gt; callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration UnsafeRegister(class System.Action`1&lt;object&gt; callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.UnsafeRegister(System.Action{System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function UnsafeRegister (callback As Action(Of Object), state As Object) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration UnsafeRegister(Action&lt;System::Object ^&gt; ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.UnsafeRegister : Action&lt;obj&gt; * obj -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.UnsafeRegister (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Object&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="callback">To be added.</param>
        <param name="state">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle WaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle WaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.WaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ WaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WaitHandle : System.Threading.WaitHandle" Usage="System.Threading.CancellationToken.WaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f9329-263">토큰이 취소될 때 신호를 받는 <see cref="T:System.Threading.WaitHandle" />을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-263">Gets a <see cref="T:System.Threading.WaitHandle" /> that is signaled when the token is canceled.</span></span></summary>
        <value><span data-ttu-id="f9329-264">토큰이 취소될 때 신호를 받는 <see cref="T:System.Threading.WaitHandle" />입니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-264">A <see cref="T:System.Threading.WaitHandle" /> that is signaled when the token is canceled.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9329-265">이 속성에 액세스 하면를 <xref:System.Threading.WaitHandle> 인스턴스화할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-265">Accessing this property causes a <xref:System.Threading.WaitHandle> to be instantiated.</span></span> <span data-ttu-id="f9329-266">것이 더 좋습니다만 필요한 경우이 속성을 사용 하 고 연결을 삭제 <xref:System.Threading.CancellationTokenSource> 인스턴스 최대한 이른 시일 (원본이 할당 된 핸들의 dispose는 삭제).</span><span class="sxs-lookup"><span data-stu-id="f9329-266">It is preferable to only use this property when necessary, and to then dispose the associated <xref:System.Threading.CancellationTokenSource> instance at the earliest opportunity (disposing the source will dispose of this allocated handle).</span></span> <span data-ttu-id="f9329-267">핸들을 닫히거나 직접 삭제 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-267">The handle should not be closed or disposed directly.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f9329-268">연결된 <see cref="T:System.Threading.CancellationTokenSource" />가 삭제되었습니다.</span><span class="sxs-lookup"><span data-stu-id="f9329-268">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="f9329-269">취소</span><span class="sxs-lookup"><span data-stu-id="f9329-269">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="f9329-270">작업 취소</span><span class="sxs-lookup"><span data-stu-id="f9329-270">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/6e2aa49b-fc84-4bcf-962b-17db98b7edcb"><span data-ttu-id="f9329-271">방법: 대기 핸들이 있는 취소 요청 수신 대기</span><span class="sxs-lookup"><span data-stu-id="f9329-271">How to: Listen for Cancellation Requests That Have Wait Handles</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>