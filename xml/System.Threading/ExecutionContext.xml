<Type Name="ExecutionContext" FullName="System.Threading.ExecutionContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3cfaa98de4ece3152a22c89f238f5f826392ec3a" /><Meta Name="ms.sourcegitcommit" Value="3f21796619d6e69ad383c958cc013ce44c0678de" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/11/2019" /><Meta Name="ms.locfileid" Value="56067790" /></Metadata><TypeSignature Language="C#" Value="public sealed class ExecutionContext : IDisposable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ExecutionContext extends System.Object implements class System.IDisposable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ExecutionContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ExecutionContext&#xA;Implements IDisposable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExecutionContext sealed : IDisposable, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type ExecutionContext = class&#xA;    interface IDisposable&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="36c02-101">현재 스레드의 실행 컨텍스트를 관리합니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-101">Manages the execution context for the current thread.</span></span> <span data-ttu-id="36c02-102">이 클래스는 상속될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36c02-103"><xref:System.Threading.ExecutionContext> 클래스는 실행의 논리적 스레드 관련 된 모든 정보에 대 한 단일 컨테이너를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-103">The <xref:System.Threading.ExecutionContext> class provides a single container for all information relevant to a logical thread of execution.</span></span> <span data-ttu-id="36c02-104">보안 컨텍스트, 호출 컨텍스트 및 동기화 컨텍스트가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-104">This includes security context, call context, and synchronization context.</span></span>  
  
 <span data-ttu-id="36c02-105"><xref:System.Threading.ExecutionContext> 클래스 캡처 및 사용자 정의 비동기 지점 간을이 컨텍스트를 전송 하는 사용자 코드에 대 한 기능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-105">The <xref:System.Threading.ExecutionContext> class provides the functionality for user code to capture and transfer this context across user-defined asynchronous points.</span></span> <span data-ttu-id="36c02-106">공용 언어 런타임 되도록는 <xref:System.Threading.ExecutionContext> 일관 되 게 관리 되는 프로세스 내에서 런타임에서 정의한 비동기 지점 간을 전송 됩니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-106">The common language runtime ensures that the <xref:System.Threading.ExecutionContext> is consistently transferred across runtime-defined asynchronous points within the managed process.</span></span>  
  
 <span data-ttu-id="36c02-107">실행 컨텍스트를 관리 되는 COM 아파트 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-107">An execution context is the managed equivalent of a COM apartment.</span></span> <span data-ttu-id="36c02-108">애플리케이션 도메인 내에서 전체 실행 컨텍스트 스레드가 전송 될 때마다 전송 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-108">Within an application domain, the entire execution context must be transferred whenever a thread is transferred.</span></span> <span data-ttu-id="36c02-109">이 이런 수행한 전송 중에 발생 합니다 <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> 메서드, 대부분의 스레드 풀 작업 및 Windows Forms는 Windows 메시지 펌프를 통해 마샬링할 스레드입니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-109">This situation occurs during transfers made by the <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> method, most thread pool operations, and Windows Forms thread marshaling through the Windows message pump.</span></span> <span data-ttu-id="36c02-110">안전 하지 않은 스레드 풀 관련 작업에서 발생 하지 않습니다 (같은 <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> 메서드), 압축된 된 스택을 전송 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-110">It does not occur in unsafe thread pool operations (such as the <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> method), which do not transfer the compressed stack.</span></span> <span data-ttu-id="36c02-111">압축된 된 스택을 flows를 어디서 나 관리 되는 보안 주체, 동기화, 로캘 및 사용자 컨텍스트 전달할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-111">Wherever the compressed stack flows, the managed principal, synchronization, locale, and user context also flow.</span></span> <span data-ttu-id="36c02-112">합니다 <xref:System.Threading.ExecutionContext> 클래스를 제공 합니다 <xref:System.Threading.ExecutionContext.Capture%2A> 및 <xref:System.Threading.ExecutionContext.CreateCopy%2A> 실행 컨텍스트를 가져오기 위한 메서드 및 <xref:System.Threading.ExecutionContext.Run%2A> 현재 스레드의 실행 컨텍스트를 설정 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="36c02-112">The <xref:System.Threading.ExecutionContext> class provides the <xref:System.Threading.ExecutionContext.Capture%2A> and <xref:System.Threading.ExecutionContext.CreateCopy%2A> methods to get the execution context and the <xref:System.Threading.ExecutionContext.Run%2A> method to set the execution context for the current thread.</span></span>  
  
 <span data-ttu-id="36c02-113"><xref:System.Threading.ExecutionContext> 연결 된 스레드와 다른 스레드에서 설정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-113">An <xref:System.Threading.ExecutionContext> that is associated with a thread cannot be set on another thread.</span></span> <span data-ttu-id="36c02-114">이렇게 하려고 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-114">Attempting to do so will result in an exception being thrown.</span></span> <span data-ttu-id="36c02-115">전파는 <xref:System.Threading.ExecutionContext> 다른 한 스레드에서 복사본을 만듭니다는 <xref:System.Threading.ExecutionContext>합니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-115">To propagate the <xref:System.Threading.ExecutionContext> from one thread to another, make a copy of the <xref:System.Threading.ExecutionContext>.</span></span>  
  
 <span data-ttu-id="36c02-116">내부적으로 <xref:System.Threading.ExecutionContext> 연관 된 모든 데이터를 저장 합니다 <xref:System.Runtime.Remoting.Messaging.LogicalCallContext>합니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-116">Internally, the <xref:System.Threading.ExecutionContext> stores all data that is associated with the <xref:System.Runtime.Remoting.Messaging.LogicalCallContext>.</span></span> <span data-ttu-id="36c02-117">따라서 합니다 <xref:System.Runtime.Remoting.Messaging.LogicalCallContext> 경우 전파 하는 데이터는 <xref:System.Threading.ExecutionContext> 복사 되 고 전송 합니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-117">This allows the <xref:System.Runtime.Remoting.Messaging.LogicalCallContext> data to be propagated when the <xref:System.Threading.ExecutionContext> is copied and transferred.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Capture">
      <MemberSignature Language="C#" Value="public static System.Threading.ExecutionContext Capture ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.ExecutionContext Capture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ExecutionContext.Capture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Capture () As ExecutionContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::ExecutionContext ^ Capture();" />
      <MemberSignature Language="F#" Value="static member Capture : unit -&gt; System.Threading.ExecutionContext" Usage="System.Threading.ExecutionContext.Capture " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.ExecutionContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="36c02-118">현재 스레드에서 실행 컨텍스트를 캡처합니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-118">Captures the execution context from the current thread.</span></span></summary>
        <returns><span data-ttu-id="36c02-119">현재 스레드의 실행 컨텍스트를 나타내는 <see cref="T:System.Threading.ExecutionContext" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-119">An <see cref="T:System.Threading.ExecutionContext" /> object representing the execution context for the current thread.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36c02-120">캡처된 실행 컨텍스트를 사용할 수 있습니다 합니다 `executionContext` 에 대 한 매개 변수는 <xref:System.Threading.ExecutionContext.Run%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="36c02-120">The captured execution context can be used as the `executionContext` parameter for the <xref:System.Threading.ExecutionContext.Run%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCopy">
      <MemberSignature Language="C#" Value="public System.Threading.ExecutionContext CreateCopy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.ExecutionContext CreateCopy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ExecutionContext.CreateCopy" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateCopy () As ExecutionContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::ExecutionContext ^ CreateCopy();" />
      <MemberSignature Language="F#" Value="member this.CreateCopy : unit -&gt; System.Threading.ExecutionContext" Usage="executionContext.CreateCopy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.ExecutionContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="36c02-121">현재 실행 컨텍스트의 복사본을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-121">Creates a copy of the current execution context.</span></span></summary>
        <returns><span data-ttu-id="36c02-122">현재 실행 컨텍스트를 나타내는 <see cref="T:System.Threading.ExecutionContext" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-122">An <see cref="T:System.Threading.ExecutionContext" /> object representing the current execution context.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36c02-123">이 메서드는 다른 스레드 간에서 실행 컨텍스트를 전파 하는 데 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-123">This method is useful for propagating an execution context from one thread to another.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="36c02-124">이 컨텍스트가 사용되기 때문에 복사할 수 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="36c02-124">This context cannot be copied because it is used.</span></span> <span data-ttu-id="36c02-125">새로 캡처한 컨텍스트만 복사할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-125">Only newly captured contexts can be copied.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ExecutionContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="executionContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="36c02-126"><see cref="T:System.Threading.ExecutionContext" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-126">Releases all resources used by the current instance of the <see cref="T:System.Threading.ExecutionContext" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36c02-127">`Dispose` 사용을 마치면 <xref:System.Threading.ExecutionContext>를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-127">Call `Dispose` when you are finished using the <xref:System.Threading.ExecutionContext>.</span></span> <span data-ttu-id="36c02-128">`Dispose` 메서드를 사용하면 <xref:System.Threading.ExecutionContext>를 사용할 수 없게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-128">The `Dispose` method leaves the <xref:System.Threading.ExecutionContext> in an unusable state.</span></span> <span data-ttu-id="36c02-129">호출한 후 `Dispose`에 대 한 모든 참조를 해제 해야 합니다 <xref:System.Threading.ExecutionContext> 가비지 수집기에서 메모리를 회수할 수 있도록 하는 <xref:System.Threading.ExecutionContext> 차지한 합니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-129">After calling `Dispose`, you must release all references to the <xref:System.Threading.ExecutionContext> so the garbage collector can reclaim the memory that the <xref:System.Threading.ExecutionContext> was occupying.</span></span>  
  
 <span data-ttu-id="36c02-130">자세한 내용은 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 하 고 [Dispose 메서드 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-130">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="36c02-131">`Dispose`에 대한 마지막 참조를 해제하기 전에 반드시 <xref:System.Threading.ExecutionContext>를 호출하십시오.</span><span class="sxs-lookup"><span data-stu-id="36c02-131">Always call `Dispose` before you release your last reference to the <xref:System.Threading.ExecutionContext>.</span></span> <span data-ttu-id="36c02-132">이렇게 하지 않으면 가비지 수집기가 <xref:System.Threading.ExecutionContext> 개체의 `Finalize` 메서드를 호출할 때까지 사용 중인 리소스가 해제되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-132">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.ExecutionContext> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/unmanaged.md"><span data-ttu-id="36c02-133">관리되지 않는 리소스 정리</span><span class="sxs-lookup"><span data-stu-id="36c02-133">Cleaning Up Unmanaged Resources</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ExecutionContext.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="executionContext.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="36c02-134">serialization 정보로 채울 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-134">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object to be populated with serialization information.</span></span></param>
        <param name="context"><span data-ttu-id="36c02-135">serialization의 대상 컨텍스트를 나타내는 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 구조체입니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-135">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure representing the destination context of the serialization.</span></span></param>
        <summary><span data-ttu-id="36c02-136">현재 실행 컨텍스트의 인스턴스를 다시 만드는 데 필요한 논리 컨텍스트 정보를 사용하여 지정된 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-136">Sets the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the logical context information needed to recreate an instance of the current execution context.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36c02-137"><xref:System.Threading.ExecutionContext.GetObjectData%2A> 설정 된 <xref:System.Runtime.Serialization.SerializationInfo> 논리를 사용 하 여 컨텍스트 정보를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-137"><xref:System.Threading.ExecutionContext.GetObjectData%2A> sets a <xref:System.Runtime.Serialization.SerializationInfo> with the logical call context information.</span></span> <span data-ttu-id="36c02-138">Deserialization 도중 실행 컨텍스트 개체에서 다시 구성 됩니다는 <xref:System.Runtime.Serialization.SerializationInfo> 스트림을 통해 전송 합니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-138">During deserialization, the execution context object is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> transmitted over the stream.</span></span>  
  
 <span data-ttu-id="36c02-139">자세한 내용은 <xref:System.Runtime.Serialization.SerializationInfo>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="36c02-139">For more information, see <xref:System.Runtime.Serialization.SerializationInfo>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36c02-140"><paramref name="info" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-140"><paramref name="info" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="36c02-141">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-141">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="36c02-142">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-142">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md"><span data-ttu-id="36c02-143">XML 및 SOAP Serialization</span><span class="sxs-lookup"><span data-stu-id="36c02-143">XML and SOAP Serialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsFlowSuppressed">
      <MemberSignature Language="C#" Value="public static bool IsFlowSuppressed ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsFlowSuppressed() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ExecutionContext.IsFlowSuppressed" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsFlowSuppressed () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsFlowSuppressed();" />
      <MemberSignature Language="F#" Value="static member IsFlowSuppressed : unit -&gt; bool" Usage="System.Threading.ExecutionContext.IsFlowSuppressed " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="36c02-144">실행 컨텍스트의 흐름이 현재 억제되는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-144">Indicates whether the flow of the execution context is currently suppressed.</span></span></summary>
        <returns><span data-ttu-id="36c02-145">해당 흐름이 억제되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-145"><see langword="true" /> if the flow is suppressed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36c02-146">합니다 <xref:System.Threading.ExecutionContext.IsFlowSuppressed%2A> 메서드를 전송 하는지 여부를 확인 하려면 인프라 구성 요소에서 사용 됩니다는 <xref:System.Threading.ExecutionContext> 비동기 작업 중입니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-146">The <xref:System.Threading.ExecutionContext.IsFlowSuppressed%2A> method is used by infrastructure components to determine whether to transfer the <xref:System.Threading.ExecutionContext> during asynchronous operations.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreFlow">
      <MemberSignature Language="C#" Value="public static void RestoreFlow ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RestoreFlow() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ExecutionContext.RestoreFlow" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RestoreFlow ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RestoreFlow();" />
      <MemberSignature Language="F#" Value="static member RestoreFlow : unit -&gt; unit" Usage="System.Threading.ExecutionContext.RestoreFlow " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="36c02-147">여러 비동기 스레드 사이의 실행 컨텍스트 흐름을 복원합니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-147">Restores the flow of the execution context across asynchronous threads.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36c02-148"><xref:System.Threading.ExecutionContext.RestoreFlow%2A> 이전을 취소 <xref:System.Threading.ExecutionContext.SuppressFlow%2A> 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-148"><xref:System.Threading.ExecutionContext.RestoreFlow%2A> reverses the effect of a prior <xref:System.Threading.ExecutionContext.SuppressFlow%2A> method call.</span></span>  
  
 <span data-ttu-id="36c02-149">이 메서드는 합니다 <xref:System.Threading.AsyncFlowControl.Undo%2A> 메서드를 <xref:System.Threading.AsyncFlowControl> 반환한 구조는 <xref:System.Threading.ExecutionContext.SuppressFlow%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="36c02-149">This method is called by the <xref:System.Threading.AsyncFlowControl.Undo%2A> method of the <xref:System.Threading.AsyncFlowControl> structure returned by the <xref:System.Threading.ExecutionContext.SuppressFlow%2A> method.</span></span>  <span data-ttu-id="36c02-150">사용 해야 합니다 <xref:System.Threading.AsyncFlowControl.Undo%2A> 없습니다 실행 컨텍스트의 흐름을 복원 하는 방법의 <xref:System.Threading.ExecutionContext.RestoreFlow%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="36c02-150">You should use the <xref:System.Threading.AsyncFlowControl.Undo%2A> method to restore the flow of the execution context, not the <xref:System.Threading.ExecutionContext.RestoreFlow%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="36c02-151">현재 억제되어 있지 않아 컨텍스트 흐름을 복원할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="36c02-151">The context flow cannot be restored because it is not being suppressed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run (System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run(class System.Threading.ExecutionContext executionContext, class System.Threading.ContextCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run(System::Threading::ExecutionContext ^ executionContext, System::Threading::ContextCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="static member Run : System.Threading.ExecutionContext * System.Threading.ContextCallback * obj -&gt; unit" Usage="System.Threading.ExecutionContext.Run (executionContext, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executionContext" Type="System.Threading.ExecutionContext" />
        <Parameter Name="callback" Type="System.Threading.ContextCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="executionContext"><span data-ttu-id="36c02-152">설정할 <see cref="T:System.Threading.ExecutionContext" />입니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-152">The <see cref="T:System.Threading.ExecutionContext" /> to set.</span></span></param>
        <param name="callback"><span data-ttu-id="36c02-153">제공된 실행 컨텍스트에서 실행할 메서드를 나타내는 <see cref="T:System.Threading.ContextCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-153">A <see cref="T:System.Threading.ContextCallback" /> delegate that represents the method to be run in the provided execution context.</span></span></param>
        <param name="state"><span data-ttu-id="36c02-154">콜백 메서드로 전달할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-154">The object to pass to the callback method.</span></span></param>
        <summary><span data-ttu-id="36c02-155">현재 스레드의 지정된 실행 컨텍스트에서 메서드를 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-155">Runs a method in a specified execution context on the current thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36c02-156">메서드가 완료 되 면 실행 컨텍스트를 이전 상태로 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-156">The execution context is returned to its previous state when the method completes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="36c02-157"><paramref name="executionContext" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-157"><paramref name="executionContext" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="36c02-158">또는</span><span class="sxs-lookup"><span data-stu-id="36c02-158">-or-</span></span> 
 <span data-ttu-id="36c02-159">캡처 작업을 통해 <paramref name="executionContext" />를 가져오지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="36c02-159"><paramref name="executionContext" /> was not acquired through a capture operation.</span></span>  
  
<span data-ttu-id="36c02-160">또는</span><span class="sxs-lookup"><span data-stu-id="36c02-160">-or-</span></span> 
 <span data-ttu-id="36c02-161"><paramref name="executionContext" />가 이미 <see cref="M:System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)" /> 호출의 인수로 사용된 경우</span><span class="sxs-lookup"><span data-stu-id="36c02-161"><paramref name="executionContext" /> has already been used as the argument to a <see cref="M:System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)" /> call.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="36c02-162">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-162">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="36c02-163">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-163">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SuppressFlow">
      <MemberSignature Language="C#" Value="public static System.Threading.AsyncFlowControl SuppressFlow ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.AsyncFlowControl SuppressFlow() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ExecutionContext.SuppressFlow" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SuppressFlow () As AsyncFlowControl" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::AsyncFlowControl SuppressFlow();" />
      <MemberSignature Language="F#" Value="static member SuppressFlow : unit -&gt; System.Threading.AsyncFlowControl" Usage="System.Threading.ExecutionContext.SuppressFlow " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.AsyncFlowControl</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="36c02-164">여러 비동기 스레드 사이의 실행 컨텍스트 흐름을 억제합니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-164">Suppresses the flow of the execution context across asynchronous threads.</span></span></summary>
        <returns><span data-ttu-id="36c02-165">흐름을 복원하기 위한 <see cref="T:System.Threading.AsyncFlowControl" /> 구조체입니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-165">An <see cref="T:System.Threading.AsyncFlowControl" /> structure for restoring the flow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36c02-166">이 메서드를 사용 하 여 흐름을 표시 하지 않으려면는 <xref:System.Threading.ExecutionContext> 현재 스레드에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-166">Use this method to suppress the flow of the <xref:System.Threading.ExecutionContext> on the current thread.</span></span>  
  
 <span data-ttu-id="36c02-167">사용 해야 합니다는 <xref:System.Threading.AsyncFlowControl.Undo%2A> 메서드는 반환 된 <xref:System.Threading.AsyncFlowControl> 흐름을 복원 하는 구조는 <xref:System.Threading.ExecutionContext>합니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-167">You must use the <xref:System.Threading.AsyncFlowControl.Undo%2A> method on the returned <xref:System.Threading.AsyncFlowControl> structure to restore the flow of the <xref:System.Threading.ExecutionContext>.</span></span>  
  
 <span data-ttu-id="36c02-168">이 방법을 사용 하 여 보호 되는 <xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType> 에 대 한 <xref:System.Security.Permissions.SecurityPermissionFlag.Infrastructure?displayProperty=nameWithType> 권한.</span><span class="sxs-lookup"><span data-stu-id="36c02-168">This method is protected with a <xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType> for <xref:System.Security.Permissions.SecurityPermissionFlag.Infrastructure?displayProperty=nameWithType> permission.</span></span> <span data-ttu-id="36c02-169">완전히 신뢰할 수 있는 구성 요소 흐름을 표시 하지 않으려면이 메서드를 호출할 수는 <xref:System.Threading.ExecutionContext> 비동기 호출 중입니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-169">A fully trusted component can call this method to suppress the flow of the <xref:System.Threading.ExecutionContext> during asynchronous calls.</span></span> <span data-ttu-id="36c02-170">흐름이 억제 되는 동안 합니다 <xref:System.Security.SecurityContext.Capture%2A> 메서드가 반환 되는 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-170">While the flow is suppressed, the <xref:System.Security.SecurityContext.Capture%2A> method returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="36c02-171">컨텍스트 흐름이 이미 억제되어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="36c02-171">The context flow is already suppressed.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="36c02-172">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-172">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="36c02-173">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="36c02-173">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="T:System.Threading.AsyncFlowControl" />
      </Docs>
    </Member>
  </Members>
</Type>