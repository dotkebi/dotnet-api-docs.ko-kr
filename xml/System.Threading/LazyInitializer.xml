<Type Name="LazyInitializer" FullName="System.Threading.LazyInitializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9c6cb826eb4c9cc7e7c2970010b6d3cbdc3d09f8" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57932067" /></Metadata><TypeSignature Language="C#" Value="public static class LazyInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LazyInitializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Class LazyInitializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class LazyInitializer abstract sealed" />
  <TypeSignature Language="F#" Value="type LazyInitializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="b0bd2-101">초기화 지연 루틴을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-101">Provides lazy initialization routines.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0bd2-102">이러한 루틴은 할당할 필요가 전용된 초기화 지연의 인스턴스를 대신 참조를 사용 하 여 대상이 액세스 될 때 초기화 되었는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-102">These routines avoid needing to allocate a dedicated, lazy-initialization instance, instead using references to ensure targets have been initialized as they are accessed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0bd2-103">다음 예제에서는 EnsureInitialized 지연 초기화가 이미 발생 했는지 여부를 추적 하는 부울 값을 사용 하 여 값을 초기화 하 고 상호 배제 잠금으로 사용할 개체를 사용 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-103">The following example demonstrates how to use EnsureInitialized to lazily initialize a value using a Boolean value to track whether initialization has already happened and an object to use as the mutual exclusion lock.</span></span>  
  
```vb  
Dim _data As ExpensiveData = Nothing  
Dim _dataInitialized As Boolean = False  
Dim _dataLock As Object = Nothing  
'    ...  
Dim name = LazyInitializer.EnsureInitialized(_data, _dataInitialized, _dataLock)  
```  
  
```csharp  
ExpensiveData _data = null;  
                     bool _dataInitialized = false;  
                     object _dataLock = new object();  
                  //  ...  
  
                    ExpensiveData dataToUse = LazyInitializer.EnsureInitialized(ref _data, ref _dataInitialized, ref _dataLock);  
```  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="b0bd2-104">메서드 <see cref="T:System.Threading.LazyInitializer" /> 는 스레드로부터 안전 하며 여러 스레드에서 동시에 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-104">The methods of <see cref="T:System.Threading.LazyInitializer" /> are thread-safe and may be called from multiple threads concurrently.</span></span></threadsafe>
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="b0bd2-105">초기화 지연</span><span class="sxs-lookup"><span data-stu-id="b0bd2-105">Lazy Initialization</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="EnsureInitialized&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b0bd2-106">아직 초기화되지 않은 대상 유형을 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-106">Initializes a target type if it hasn't already been initialized.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="b0bd2-107">초기화할 참조의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-107">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="b0bd2-108">아직 초기화되지 않은 경우 초기화할 <c>T</c> 형식의 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-108">A reference of type <c>T</c> to initialize if it has not already been initialized.</span></span></param>
        <summary><span data-ttu-id="b0bd2-109">아직 초기화되지 않은 경우 형식의 기본 생성자를 사용하여 대상 참조 형식을 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-109">Initializes a target reference type with the type's default constructor if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="b0bd2-110">초기화된 <paramref name="T" /> 형식의 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-110">The initialized reference of type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0bd2-111">이 메서드는 참조 형식에 사용할 수만 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-111">This method may only be used on reference types.</span></span> <span data-ttu-id="b0bd2-112">값 형식의 초기화 되도록 EnsureInitialized 다른 오버 로드를 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-112">To ensure initialization of value types, see other overloads of EnsureInitialized.</span></span>  
  
 <span data-ttu-id="b0bd2-113">이 메서드가 데 사용할 수 있습니다 동시에 여러 스레드에서 초기화 `target`합니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-113">This method may be used concurrently by multiple threads to initialize `target`.</span></span>  
  
 <span data-ttu-id="b0bd2-114">여러 스레드에서이 메서드에 액세스 동시에 여러 개 있는지 `T` 를 만들 수 있지만에 저장 하는 하나의 됩니다 `target`합니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-114">In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target`.</span></span> <span data-ttu-id="b0bd2-115">이러한 발생에 저장 되지 않은 개체의이 메서드 삭제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-115">In such an occurrence, this method will not dispose of the objects that were not stored.</span></span> <span data-ttu-id="b0bd2-116">이러한 개체를 삭제 해야 하는 경우 호출자가 개체를 사용 하지 않았습니다 하는 경우를 확인 하 고 다음 개체를 적절 하 게 삭제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-116">If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="b0bd2-117">형식 <paramref name="T" />의 생성자에 액세스할 수 있는 권한이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-117">Permissions to access the constructor of type <paramref name="T" /> were missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="b0bd2-118">형식 <paramref name="T" />에 기본 생성자가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="b0bd2-118">Type <paramref name="T" /> does not have a default constructor.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="b0bd2-119">초기화 지연</span><span class="sxs-lookup"><span data-stu-id="b0bd2-119">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, Func&lt;T&gt; valueFactory) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  * Func&lt;'T (requires 'T : null)&gt; -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="b0bd2-120">초기화할 참조의 참조 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-120">The reference type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="b0bd2-121">아직 초기화되지 않은 경우 초기화할 <c>T</c> 형식의 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-121">The reference of type <c>T</c> to initialize if it hasn't already been initialized.</span></span></param>
        <param name="valueFactory"><span data-ttu-id="b0bd2-122">참조를 초기화하기 위해 호출되는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-122">The function that is called to initialize the reference.</span></span></param>
        <summary><span data-ttu-id="b0bd2-123">아직 초기화되지 않은 경우 지정된 함수를 사용하여 대상 참조 형식을 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-123">Initializes a target reference type by using a specified function if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="b0bd2-124">초기화된 <paramref name="T" /> 형식의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-124">The initialized value of type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0bd2-125">이 메서드는 참조 형식에만 사용 수 있습니다 및 `valueFactory` null 참조 (Visual Basic의 경우 Nothing)를 반환 하지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-125">This method may only be used on reference types, and `valueFactory` may not return a null reference (Nothing in Visual Basic).</span></span> <span data-ttu-id="b0bd2-126">값 형식의 초기화 또는 null 참조 형식을 허용 하도록 EnsureInitialized 다른 오버 로드를 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-126">To ensure initialization of value types or to allow null reference types, see other overloads of EnsureInitialized.</span></span>  
  
 <span data-ttu-id="b0bd2-127">이 메서드가 데 사용할 수 있습니다 동시에 여러 스레드에서 초기화 `target`합니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-127">This method may be used concurrently by multiple threads to initialize `target`.</span></span>  
  
 <span data-ttu-id="b0bd2-128">여러 스레드에서이 메서드에 액세스 동시에 여러 개 있는지 `T` 를 만들 수 있지만에 저장 하는 하나의 됩니다 `target`합니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-128">In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target`.</span></span> <span data-ttu-id="b0bd2-129">이러한 발생에 저장 되지 않은 개체의이 메서드 삭제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-129">In such an occurrence, this method will not dispose of the objects that were not stored.</span></span> <span data-ttu-id="b0bd2-130">이러한 개체를 삭제 해야 하는 경우 호출자가 개체를 사용 하지 않았습니다 하는 경우를 확인 하 고 다음 개체를 적절 하 게 삭제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-130">If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="b0bd2-131">형식 <paramref name="T" />에 기본 생성자가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="b0bd2-131">Type <paramref name="T" /> does not have a default constructor.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b0bd2-132"><paramref name="valueFactory" />가 null을 반환합니다(Visual Basic의 경우 Nothing).</span><span class="sxs-lookup"><span data-stu-id="b0bd2-132"><paramref name="valueFactory" /> returned null (Nothing in Visual Basic).</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="b0bd2-133">초기화 지연</span><span class="sxs-lookup"><span data-stu-id="b0bd2-133">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref bool initialized, ref object syncLock);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;T&gt;(!!T&amp; target, bool&amp; initialized, object&amp; syncLock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T) (ByRef target As T, ByRef initialized As Boolean, ByRef syncLock As Object) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T EnsureInitialized(T % target, bool % initialized, System::Object ^ % syncLock);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  *  *  -&gt; 'T" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, initialized, syncLock)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
        <Parameter Name="initialized" Type="System.Boolean" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="b0bd2-134">초기화할 참조의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-134">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="b0bd2-135">아직 초기화되지 않은 경우 초기화할 <c>T</c> 형식의 참조 또는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-135">A reference or value of type <c>T</c> to initialize if it hasn't already been initialized.</span></span></param>
        <param name="initialized"><span data-ttu-id="b0bd2-136">대상이 이미 초기화되었는지 여부를 결정하는 부울 값에 대한 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-136">A reference to a Boolean value that determines whether the target has already been initialized.</span></span></param>
        <param name="syncLock"><span data-ttu-id="b0bd2-137"><paramref name="target" />을 초기화할 때 상호 배타적인 잠금으로 사용할 개체에 대한 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-137">A reference to an object used as the mutually exclusive lock for initializing <paramref name="target" />.</span></span> <span data-ttu-id="b0bd2-138"><paramref name="syncLock" />이 <see langword="null" />이면 새 개체를 인스턴스화할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-138">If <paramref name="syncLock" /> is <see langword="null" />, a new object will be instantiated.</span></span></param>
        <summary><span data-ttu-id="b0bd2-139">아직 초기화되지 않은 경우 해당 기본 생성자를 사용하여 대상 참조 또는 값 형식을 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-139">Initializes a target reference or value type with its default constructor if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="b0bd2-140">초기화된 <paramref name="T" /> 형식의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-140">The initialized value of type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0bd2-141">경우 `intialized` 초기화가 더 이상 발생을 true로 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-141">If `intialized` is specified as true, then no further initialization occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="b0bd2-142">형식 <paramref name="T" />의 생성자에 액세스할 수 있는 권한이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-142">Permissions to access the constructor of type <paramref name="T" /> were missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="b0bd2-143">형식 <paramref name="T" />에 기본 생성자가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="b0bd2-143">Type <paramref name="T" /> does not have a default constructor.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="b0bd2-144">초기화 지연</span><span class="sxs-lookup"><span data-stu-id="b0bd2-144">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref object syncLock, Func&lt;T&gt; valueFactory) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target, object&amp; syncLock, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Object@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T, ByRef syncLock As Object, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target, System::Object ^ % syncLock, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  *  * Func&lt;'T (requires 'T : null)&gt; -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, syncLock, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="syncLock" Type="System.Object" RefType="ref" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="target">To be added.</param>
        <param name="syncLock">To be added.</param>
        <param name="valueFactory">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref bool initialized, ref object syncLock, Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;T&gt;(!!T&amp; target, bool&amp; initialized, object&amp; syncLock, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T) (ByRef target As T, ByRef initialized As Boolean, ByRef syncLock As Object, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T EnsureInitialized(T % target, bool % initialized, System::Object ^ % syncLock, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  *  *  * Func&lt;'T&gt; -&gt; 'T" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, initialized, syncLock, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
        <Parameter Name="initialized" Type="System.Boolean" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="b0bd2-145">초기화할 참조의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-145">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="b0bd2-146">아직 초기화되지 않은 경우 초기화할 <c>T</c> 형식의 참조 또는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-146">A reference or value of type <c>T</c> to initialize if it hasn't already been initialized.</span></span></param>
        <param name="initialized"><span data-ttu-id="b0bd2-147">대상이 이미 초기화되었는지 여부를 결정하는 부울 값에 대한 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-147">A reference to a Boolean value that determines whether the target has already been initialized.</span></span></param>
        <param name="syncLock"><span data-ttu-id="b0bd2-148"><paramref name="target" />을 초기화할 때 상호 배타적인 잠금으로 사용할 개체에 대한 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-148">A reference to an object used as the mutually exclusive lock for initializing <paramref name="target" />.</span></span> <span data-ttu-id="b0bd2-149"><paramref name="syncLock" />이 <see langword="null" />이면 새 개체를 인스턴스화할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-149">If <paramref name="syncLock" /> is <see langword="null" />, a new object will be instantiated.</span></span></param>
        <param name="valueFactory"><span data-ttu-id="b0bd2-150">참조 또는 값을 초기화하기 위해 호출되는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-150">The function that is called to initialize the reference or value.</span></span></param>
        <summary><span data-ttu-id="b0bd2-151">아직 초기화되지 않은 경우 지정된 함수를 사용하여 대상 참조 또는 값 형식을 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-151">Initializes a target reference or value type by using a specified function if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="b0bd2-152">초기화된 <paramref name="T" /> 형식의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-152">The initialized value of type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0bd2-153">경우 `intialized` 초기화가 더 이상 발생을 true로 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-153">If `intialized` is specified as true, then no further initialization occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="b0bd2-154">형식 <paramref name="T" />의 생성자에 액세스할 수 있는 권한이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="b0bd2-154">Permissions to access the constructor of type <paramref name="T" /> were missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="b0bd2-155">형식 <paramref name="T" />에 기본 생성자가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="b0bd2-155">Type <paramref name="T" /> does not have a default constructor.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="b0bd2-156">초기화 지연</span><span class="sxs-lookup"><span data-stu-id="b0bd2-156">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>