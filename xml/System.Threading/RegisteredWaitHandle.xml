<Type Name="RegisteredWaitHandle" FullName="System.Threading.RegisteredWaitHandle">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1d2a0abe2a08c8fb97e52944aa1dee531acf9e1f" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58692819" /></Metadata><TypeSignature Language="C#" Value="public sealed class RegisteredWaitHandle : MarshalByRefObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegisteredWaitHandle extends System.MarshalByRefObject" />
  <TypeSignature Language="DocId" Value="T:System.Threading.RegisteredWaitHandle" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegisteredWaitHandle&#xA;Inherits MarshalByRefObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegisteredWaitHandle sealed : MarshalByRefObject" />
  <TypeSignature Language="F#" Value="type RegisteredWaitHandle = class&#xA;    inherit MarshalByRefObject" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="3199b-101"><see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />을 호출할 때 등록된 핸들을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="3199b-101">Represents a handle that has been registered when calling <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />.</span></span> <span data-ttu-id="3199b-102">이 클래스는 상속될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3199b-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3199b-103">다음 예제에서는 사용 하는 방법을 보여 줍니다는 <xref:System.Threading.RegisteredWaitHandle> 콜백 메서드가 호출 되는 이유 및 대기 핸들 신호가 전달 되어 콜백이 발생 한 경우 작업을 등록 하는 방법을 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="3199b-103">The following example shows how to use a <xref:System.Threading.RegisteredWaitHandle> to determine why a callback method is called, and how to unregister a task if the callback occurred because the wait handle was signaled.</span></span>  
  
 <span data-ttu-id="3199b-104">또한이 예제에서는 사용 하는 방법의 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 지정한 대기 핸들이 신호를 받을 때 지정된 된 콜백 메서드를 실행 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3199b-104">The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled.</span></span> <span data-ttu-id="3199b-105">이 예제에서는 콜백 메서드는 `WaitProc`, 및 대기 핸들은는 <xref:System.Threading.AutoResetEvent>합니다.</span><span class="sxs-lookup"><span data-stu-id="3199b-105">In this example, the callback method is `WaitProc`, and the wait handle is an <xref:System.Threading.AutoResetEvent>.</span></span>  
  
 <span data-ttu-id="3199b-106">이 예제에서는 정의 `TaskInfo` 실행 될 때 콜백에 전달 되는 정보를 보유 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3199b-106">The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes.</span></span> <span data-ttu-id="3199b-107">이 예에서는 만듭니다는 `TaskInfo` 개체 및 문자열 데이터를 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="3199b-107">The example creates a `TaskInfo` object and assigns it some string data.</span></span> <span data-ttu-id="3199b-108"><xref:System.Threading.RegisteredWaitHandle> 에서 반환 하는 합니다 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 에 메서드가 할당 됩니다는 `Handle` 필드를 `TaskInfo` 콜백 메서드가에 액세스할 수 있도록 개체를 <xref:System.Threading.RegisteredWaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="3199b-108">The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.</span></span>  
  
 <span data-ttu-id="3199b-109">지정 하는 것 외에도 `TaskInfo` 콜백 메서드 호출에 전달할 개체로 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 메서드를 지정는 <xref:System.Threading.AutoResetEvent> 에 대 한 작업에서 대기 하는 <xref:System.Threading.WaitOrTimerCallback> 나타내는 대리자입니다는 `WaitProc` 콜백 메서드를 1 초 제한 시간 간격 및 여러 콜백 합니다.</span><span class="sxs-lookup"><span data-stu-id="3199b-109">In addition to specifying `TaskInfo` as the object to pass to the callback method, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> that the task will wait for, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one second time-out interval, and multiple callbacks.</span></span>  
  
 <span data-ttu-id="3199b-110">주 스레드가 신호 하는 경우는 <xref:System.Threading.AutoResetEvent> 호출 하 여 해당 <xref:System.Threading.EventWaitHandle.Set%2A> 메서드를를 <xref:System.Threading.WaitOrTimerCallback> 대리자가 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="3199b-110">When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked.</span></span> <span data-ttu-id="3199b-111">합니다 `WaitProc` 메서드를 테스트 <xref:System.Threading.RegisteredWaitHandle> 제한 시간에 발생 한 것인지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="3199b-111">The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a time-out occurred.</span></span> <span data-ttu-id="3199b-112">대기 핸들 신호가 전달 되어 콜백이 호출 되는 경우는 `WaitProc` 메서드를 등록 취소를 <xref:System.Threading.RegisteredWaitHandle>, 콜백을 추가 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="3199b-112">If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping additional callbacks.</span></span> <span data-ttu-id="3199b-113">시간 제한의 경우 작업이 계속 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="3199b-113">In the case of a time-out, the task continues to wait.</span></span> <span data-ttu-id="3199b-114">`WaitProc` 메서드가 콘솔에 메시지를 인쇄 하 여 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="3199b-114">The `WaitProc` method ends by printing a message to the console.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="3199b-115">이 형식은 스레드로부터 안전합니다.</span><span class="sxs-lookup"><span data-stu-id="3199b-115">This type is thread safe.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md"><span data-ttu-id="3199b-116">관리되는 스레드 풀</span><span class="sxs-lookup"><span data-stu-id="3199b-116">The managed thread pool</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~RegisteredWaitHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.RegisteredWaitHandle.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!RegisteredWaitHandle ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="registeredWaitHandle.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public bool Unregister (System.Threading.WaitHandle waitObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Unregister(class System.Threading.WaitHandle waitObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Unregister (waitObject As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Unregister(System::Threading::WaitHandle ^ waitObject);" />
      <MemberSignature Language="F#" Value="member this.Unregister : System.Threading.WaitHandle -&gt; bool" Usage="registeredWaitHandle.Unregister waitObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="waitObject"><span data-ttu-id="3199b-117">신호를 받을 <see cref="T:System.Threading.WaitHandle" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3199b-117">The <see cref="T:System.Threading.WaitHandle" /> to be signaled.</span></span></param>
        <summary><span data-ttu-id="3199b-118"><see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /> 메서드에서 발생한 등록된 대기 작업을 취소합니다.</span><span class="sxs-lookup"><span data-stu-id="3199b-118">Cancels a registered wait operation issued by the <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /> method.</span></span></summary>
        <returns><span data-ttu-id="3199b-119">작업이 성공적으로 수행되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="3199b-119"><see langword="true" /> if the function succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3199b-120">경우 `waitObject` 는 신호를 받은 경우에 지정 된 된 <xref:System.Threading.RegisteredWaitHandle> 성공적으로 등록 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="3199b-120">If `waitObject` is specified, it is signaled only if the <xref:System.Threading.RegisteredWaitHandle> is successfully unregistered.</span></span> <span data-ttu-id="3199b-121">콜백 메서드는 진행 중인 경우 때 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A> 실행 `waitObject` 가 콜백 메서드가 완료 될 때까지 통보 합니다.</span><span class="sxs-lookup"><span data-stu-id="3199b-121">If a callback method is in progress when <xref:System.Threading.RegisteredWaitHandle.Unregister%2A> executes, `waitObject` is not signaled until the callback method completes.</span></span> <span data-ttu-id="3199b-122">콜백 메서드를 실행 하는 경우 특히에서 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A>, `waitObject` 가 해당 콜백 메서드가 완료 될 때까지 통보 합니다.</span><span class="sxs-lookup"><span data-stu-id="3199b-122">In particular, if a callback method executes <xref:System.Threading.RegisteredWaitHandle.Unregister%2A>, `waitObject` is not signaled until that callback method completes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3199b-123">다음 예제에서는 사용 하는 방법의 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A> 대기 핸들이 신호를 받은 콜백이 발생 하는 경우 작업의 등록을 취소 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3199b-123">The following example shows how to use the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A> method to unregister a task if a callback occurred because the wait handle was signaled.</span></span>  
  
 <span data-ttu-id="3199b-124">또한이 예제에서는 사용 하는 방법의 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 지정한 대기 핸들이 신호를 받을 때 지정된 된 콜백 메서드를 실행 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3199b-124">The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled.</span></span> <span data-ttu-id="3199b-125">이 예제에서는 콜백 메서드는 `WaitProc`, 및 대기 핸들은는 <xref:System.Threading.AutoResetEvent>합니다.</span><span class="sxs-lookup"><span data-stu-id="3199b-125">In this example, the callback method is `WaitProc`, and the wait handle is an <xref:System.Threading.AutoResetEvent>.</span></span>  
  
 <span data-ttu-id="3199b-126">이 예제에서는 정의 `TaskInfo` 실행 될 때 콜백에 전달 되는 정보를 보유 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3199b-126">The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes.</span></span> <span data-ttu-id="3199b-127">이 예에서는 만듭니다는 `TaskInfo` 개체 및 문자열 데이터를 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="3199b-127">The example creates a `TaskInfo` object and assigns it some string data.</span></span> <span data-ttu-id="3199b-128"><xref:System.Threading.RegisteredWaitHandle> 에서 반환 하는 합니다 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 에 메서드가 할당 됩니다는 `Handle` 필드를 `TaskInfo` 콜백 메서드가에 액세스할 수 있도록 개체를 <xref:System.Threading.RegisteredWaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="3199b-128">The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.</span></span>  
  
 <span data-ttu-id="3199b-129">지정 하는 것 외에도 `TaskInfo` 콜백 메서드 호출에 전달할 개체로 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 메서드를 지정는 <xref:System.Threading.AutoResetEvent> 에 대 한 작업에서 대기 하는 <xref:System.Threading.WaitOrTimerCallback> 나타내는 대리자입니다는 `WaitProc` 콜백 메서드를 1 초 제한 시간 간격 및 여러 콜백 합니다.</span><span class="sxs-lookup"><span data-stu-id="3199b-129">In addition to specifying `TaskInfo` as the object to pass to the callback method, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> that the task will wait for, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one second time-out interval, and multiple callbacks.</span></span>  
  
 <span data-ttu-id="3199b-130">주 스레드가 신호 하는 경우는 <xref:System.Threading.AutoResetEvent> 호출 하 여 해당 <xref:System.Threading.EventWaitHandle.Set%2A> 메서드를를 <xref:System.Threading.WaitOrTimerCallback> 대리자가 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="3199b-130">When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked.</span></span> <span data-ttu-id="3199b-131">합니다 `WaitProc` 메서드를 테스트 <xref:System.Threading.RegisteredWaitHandle> 제한 시간에 발생 한 것인지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="3199b-131">The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a time-out occurred.</span></span> <span data-ttu-id="3199b-132">대기 핸들 신호가 전달 되어 콜백이 호출 되는 경우는 `WaitProc` 메서드를 등록 취소를 <xref:System.Threading.RegisteredWaitHandle>, 콜백을 추가 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="3199b-132">If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping additional callbacks.</span></span> <span data-ttu-id="3199b-133">시간 제한의 경우 작업이 계속 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="3199b-133">In the case of a time-out, the task continues to wait.</span></span> <span data-ttu-id="3199b-134">`WaitProc` 메서드가 콘솔에 메시지를 인쇄 하 여 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="3199b-134">The `WaitProc` method ends by printing a message to the console.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md"><span data-ttu-id="3199b-135">관리되는 스레드 풀</span><span class="sxs-lookup"><span data-stu-id="3199b-135">The managed thread pool</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>