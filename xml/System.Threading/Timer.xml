<Type Name="Timer" FullName="System.Threading.Timer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5f5514bf512db37c78e68399a108c5126414fd2d" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56369771" /></Metadata><TypeSignature Language="C#" Value="public sealed class Timer : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Timer extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Timer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Timer&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer sealed : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Timer</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;dotnet-uwp-10.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="87b9b-101">지정된 간격으로 스레드 풀 스레드에 대해 메서드를 실행하는 메커니즘을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-101">Provides a mechanism for executing a method on a thread pool thread at specified intervals.</span></span> <span data-ttu-id="87b9b-102">이 클래스는 상속될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b9b-103">사용 하 여는 <xref:System.Threading.TimerCallback> 메서드를 지정 하는 대리자는 <xref:System.Threading.Timer> 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-103">Use a <xref:System.Threading.TimerCallback> delegate to specify the method you want the <xref:System.Threading.Timer> to execute.</span></span> <span data-ttu-id="87b9b-104">시그니처는 <xref:System.Threading.TimerCallback> 대리자는:</span><span class="sxs-lookup"><span data-stu-id="87b9b-104">The signature of the <xref:System.Threading.TimerCallback> delegate is:</span></span>  
  
```csharp  
void TimerCallback(Object state)  
```  
  
```cpp  
void TimerCallback(Object state)  
```  
  
```vb  
Sub TimerCallback(state As Object)  
```  
  
 <span data-ttu-id="87b9b-105">타이머 대리자는 타이머를 생성 하 고 변경할 수 없습니다 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-105">The timer delegate is specified when the timer is constructed, and cannot be changed.</span></span> <span data-ttu-id="87b9b-106">메서드는 타이머;를 만든 스레드에서 실행 되지 않습니다. 실행을 <xref:System.Threading.ThreadPool> 시스템에서 제공 하는 스레드입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-106">The method does not execute on the thread that created the timer; it executes on a <xref:System.Threading.ThreadPool> thread supplied by the system.</span></span>  
  
> [!TIP]
> <span data-ttu-id="87b9b-107">라는 4 개의 클래스를 포함 하는.NET `Timer`각각 서로 다른 기능을 제공 하는 중:</span><span class="sxs-lookup"><span data-stu-id="87b9b-107">.NET includes four classes named `Timer`, each of which offers different functionality:</span></span>  
>
> - <span data-ttu-id="87b9b-108"><xref:System.Timers.Timer?displayProperty=nameWithType>또는 정기적으로 더 많은 이벤트 싱크 이벤트가 발생 하며 하나에서 코드를 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-108"><xref:System.Timers.Timer?displayProperty=nameWithType>, which fires an event and executes the code in one or more event sinks at regular intervals.</span></span> <span data-ttu-id="87b9b-109">클래스는 다중 스레드 환경에서 서비스 구성 요소 또는 서버를 기반으로 사용 하기 위한 것 사용자 인터페이스가 없는 하 고 런타임 시 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-109">The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>
> - <span data-ttu-id="87b9b-110"><xref:System.Threading.Timer?displayProperty=nameWithType>를 정기적으로 스레드 풀 스레드에서 단일 콜백 메서드를 실행 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-110"><xref:System.Threading.Timer?displayProperty=nameWithType>, which executes a single callback method on a thread pool thread at regular intervals.</span></span> <span data-ttu-id="87b9b-111">타이머 인스턴스화되고 변경할 수 없는 경우 콜백 메서드가 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-111">The callback method is defined when the timer is instantiated and cannot be changed.</span></span> <span data-ttu-id="87b9b-112">같은 <xref:System.Timers.Timer?displayProperty=nameWithType> 클래스는 다중 스레드 환경에서 서버 기반 또는 서비스 구성 요소로 사용 하기 위해이 클래스를 사용 하며 사용자 인터페이스가 없는 런타임에 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-112">Like the <xref:System.Timers.Timer?displayProperty=nameWithType> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>
> - <span data-ttu-id="87b9b-113"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET framework만 해당), 이벤트가 발생 하 고 정기적으로 이벤트 싱크를 하나 이상에서 코드를 실행 하는 Windows Forms 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-113"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET Framework only), a Windows Forms component that fires an event and executes the code in one or more event sinks at regular intervals.</span></span> <span data-ttu-id="87b9b-114">구성 요소 사용자 인터페이스가 없는 및 단일 스레드 환경에 사용 하도록 설계 된 UI 스레드에서 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-114">The component has no user interface and is designed for use in a single-threaded environment; it executes on the UI thread.</span></span>
> - <span data-ttu-id="87b9b-115"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET framework만 해당), 일정 한 간격으로 비동기 또는 동기 웹 페이지 포스트백을 수행 하는 ASP.NET 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-115"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET Framework only), an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.</span></span>
  
 <span data-ttu-id="87b9b-116">타이머를 만들면 메서드의 첫 번째 실행 하기 전에 대기할 시간을 지정할 수 있습니다 (기한) 및 후속 실행 (마침표) 사이 대기할 시간입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-116">When you create a timer, you can specify an amount of time to wait before the first execution of the method (due time), and an amount of time to wait between subsequent executions (period).</span></span> <span data-ttu-id="87b9b-117"><xref:System.Threading.Timer> 클래스 시스템 클록으로 동일한 해상도 가진 합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-117">The <xref:System.Threading.Timer> class has the same resolution as the system clock.</span></span> <span data-ttu-id="87b9b-118">즉, 기간을 사용 하면 시스템 클록의 해상도 보다 작으면는 <xref:System.Threading.TimerCallback> 대리자 약 15 밀리초 Windows 7 및 Windows 8 시스템에서 시스템 클록을 확인 하 여 정의 된 간격으로 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-118">This means that if the period is less than the resolution of the system clock, the <xref:System.Threading.TimerCallback> delegate will execute at intervals defined by the resolution of the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems.</span></span> <span data-ttu-id="87b9b-119">지불을 변경할 수 있습니다 시간 및 기간 또는 사용 안 함, 사용 하 여 타이머를 <xref:System.Threading.Timer.Change%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="87b9b-119">You can change the due time and period, or disable the timer, by using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87b9b-120">사용 하는 그대로 <xref:System.Threading.Timer>에 대 한 참조를 유지 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-120">As long as you are using a <xref:System.Threading.Timer>, you must keep a reference to it.</span></span> <span data-ttu-id="87b9b-121">관리 되는 개체와 마찬가지로 <xref:System.Threading.Timer> 에 대 한 참조가 없는 경우 가비지 수집의 대상이 됩니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-121">As with any managed object, a <xref:System.Threading.Timer> is subject to garbage collection when there are no references to it.</span></span> <span data-ttu-id="87b9b-122">팩트는는 <xref:System.Threading.Timer> 여전히 활성 해도 수집 됩니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-122">The fact that a <xref:System.Threading.Timer> is still active does not prevent it from being collected.</span></span>  
  
 <span data-ttu-id="87b9b-123">사용 하 여 타이머를 더 이상 필요 하면는 <xref:System.Threading.Timer.Dispose%2A> 타이머에서 메서드는 리소스를 보유 합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-123">When a timer is no longer needed, use the <xref:System.Threading.Timer.Dispose%2A> method to free the resources held by the timer.</span></span> <span data-ttu-id="87b9b-124">콜백 후 발생할 수 있습니다는 <xref:System.Threading.Timer.Dispose> 메서드 오버 로드를 호출한 타이머 스레드 풀 스레드에 의해 실행에 대 한 콜백을 큐 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-124">Note that callbacks can occur after the <xref:System.Threading.Timer.Dispose> method overload has been called, because the timer queues callbacks for execution by thread pool threads.</span></span> <span data-ttu-id="87b9b-125">사용할 수는 <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> 메서드 오버 로드를 모든 콜백이 완료 될 때까지 기다립니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-125">You can use the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload to wait until all callbacks have completed.</span></span>  
  
 <span data-ttu-id="87b9b-126">호출 되므로 타이머가 실행 콜백 메서드를 재진입할 수 있으며, 해야 <xref:System.Threading.ThreadPool> 스레드입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-126">The callback method executed by the timer should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="87b9b-127">콜백은 타이머 간격이 콜백을 실행 하는 데 필요한 시간 보다 작은 경우 또는 모든 스레드 풀 스레드가 사용 되 고 콜백을 여러 번 큐에 대기는 두 개의 스레드 풀 스레드에서 동시에 실행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-127">The callback can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the callback, or if all thread pool threads are in use and the callback is queued multiple times.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87b9b-128"><xref:System.Threading.Timer?displayProperty=nameWithType> 콜백 메서드를 사용 하는 스레드 풀에서 제공 하는 간단한 타이머가입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-128"><xref:System.Threading.Timer?displayProperty=nameWithType> is a simple, lightweight timer that uses callback methods and is served by thread pool threads.</span></span> <span data-ttu-id="87b9b-129">좋지 않습니다 Windows Forms에서 사용에 대 한 사용자 인터페이스 스레드에서 해당 콜백이 발생 하지 않기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-129">It is not recommended for use with Windows Forms, because its callbacks do not occur on the user interface thread.</span></span> <span data-ttu-id="87b9b-130"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> Windows Forms에 사용할 더 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-130"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> is a better choice for use with Windows Forms.</span></span> <span data-ttu-id="87b9b-131">서버 기반 타이머 기능을 사용해 보십시오 <xref:System.Timers.Timer?displayProperty=nameWithType>, 이벤트를 발생 하며 추가 기능이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-131">For server-based timer functionality, you might consider using <xref:System.Timers.Timer?displayProperty=nameWithType>, which raises events and has additional features.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87b9b-132">다음 예제에서는 정의 `StatusChecker` 포함 하는 클래스를 `CheckStatus` 메서드 시그니처가 동일으로 <xref:System.Threading.TimerCallback> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-132">The following example defines a `StatusChecker` class  that includes a `CheckStatus` method whose signature is the same as the <xref:System.Threading.TimerCallback> delegate.</span></span> <span data-ttu-id="87b9b-133">합니다 `state` 인수를 `CheckStatus` 메서드는는 <xref:System.Threading.AutoResetEvent> 동기화 하는 애플리케이션 스레드를 스레드 풀 스레드가 콜백 대리자를 실행 하는 데 사용 되는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-133">The  `state` argument of the `CheckStatus` method is an <xref:System.Threading.AutoResetEvent> object that is used to synchronize the application thread and the thread pool thread that executes the callback delegate.</span></span> <span data-ttu-id="87b9b-134">`StatusChecker` 클래스도 두 개의 상태 변수를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-134">The `StatusChecker` class also includes two state variables:</span></span>  
  
 `invokeCount`  
 <span data-ttu-id="87b9b-135">콜백 메서드가 호출 된 횟수를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-135">Indicates the number of times the callback method has been invoked.</span></span>  
  
 `maxCount`  
 <span data-ttu-id="87b9b-136">콜백 메서드를 호출 해야 하는 최대 횟수를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-136">Determines the maximum number of times the callback method should be invoked.</span></span>  
  
 <span data-ttu-id="87b9b-137">애플리케이션 스레드에 1 초를 기다린 다음 실행 하는 타이머를 만듭니다는 `CheckStatus` 콜백 메서드 250 밀리초 마다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-137">The application thread creates the timer, which waits one second and then executes  the `CheckStatus` callback method every 250 milliseconds.</span></span> <span data-ttu-id="87b9b-138">될 때까지 애플리케이션 스레드를 차단 합니다 <xref:System.Threading.AutoResetEvent> 개체의 신호를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-138">The application thread then blocks until the <xref:System.Threading.AutoResetEvent> object is signaled.</span></span> <span data-ttu-id="87b9b-139">경우는 `CheckStatus` 콜백 메서드가 실행 될 `maxCount` 번 호출 합니다 `AutoResetEvent.Set` 의 상태를 설정 하는 방법은 <xref:System.Threading.AutoResetEvent> 개체가 신호를.</span><span class="sxs-lookup"><span data-stu-id="87b9b-139">When the `CheckStatus` callback method executes `maxCount` times, it calls the `AutoResetEvent.Set` method to set the state of the <xref:System.Threading.AutoResetEvent> object to signaled.</span></span> <span data-ttu-id="87b9b-140">처음 이런 애플리케이션 스레드 호출을 <xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29> 메서드 콜백 메서드는 이제 0.5 초 마다 실행 되도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-140">The first time this happens, the application thread calls the <xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29> method so that the callback method now executes every half second.</span></span> <span data-ttu-id="87b9b-141">다시 한 번까지 차단는 <xref:System.Threading.AutoResetEvent> 개체의 신호를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-141">It once again blocks until the <xref:System.Threading.AutoResetEvent> object is signaled.</span></span> <span data-ttu-id="87b9b-142">이 경우 타이머를 호출 하 여 소멸 됩니다 해당 <xref:System.Threading.Timer.Dispose%2A> 메서드 및 애플리케이션을 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-142">When this happens, the timer is destroyed by calling its <xref:System.Threading.Timer.Dispose%2A> method, and the application terminates.</span></span>  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="87b9b-143">이 형식은 스레드로부터 안전합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-143">This type is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Threading.TimerCallback" />
    <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="87b9b-144">타이머</span><span class="sxs-lookup"><span data-stu-id="87b9b-144">Timers</span></span></related>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md"><span data-ttu-id="87b9b-145">관리되는 스레드 풀</span><span class="sxs-lookup"><span data-stu-id="87b9b-145">The Managed Thread Pool</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87b9b-146"><see langword="Timer" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-146">Initializes a new instance of the <see langword="Timer" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback -&gt; System.Threading.Timer" Usage="new System.Threading.Timer callback" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="87b9b-147">실행할 메서드를 나타내는 <see cref="T:System.Threading.TimerCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-147">A <see cref="T:System.Threading.TimerCallback" /> delegate representing a method to be executed.</span></span></param>
        <summary><span data-ttu-id="87b9b-148">새로 만든 <see cref="T:System.Threading.Timer" /> 개체를 상태 개체로 사용하고 무한 기간 및 무한 만료 예정 시간을 지정하여 <see cref="T:System.Threading.Timer" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-148">Initializes a new instance of the <see cref="T:System.Threading.Timer" /> class with an infinite period and an infinite due time, using the newly created <see cref="T:System.Threading.Timer" /> object as the state object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b9b-149">사용 하려는 경우이 생성자를 호출 합니다 <xref:System.Threading.Timer> 를 상태 개체로 개체 자체입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-149">Call this constructor when you want to use the <xref:System.Threading.Timer> object itself as the state object.</span></span> <span data-ttu-id="87b9b-150">타이머를 만든 후 사용 하 여는 <xref:System.Threading.Timer.Change%2A> 간격 및 만료 시간을 설정 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-150">After creating the timer, use the <xref:System.Threading.Timer.Change%2A> method to set the interval and due time.</span></span>  
  
 <span data-ttu-id="87b9b-151">이 생성자 지정 무한 만료 예정 시간 후 첫 번째 콜백 및 첫 번째 콜백 하기 전에 발생 하지 않도록 하기 위해 콜백 간에 무한 간격을 <xref:System.Threading.Timer> 개체 상태 개체에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-151">This constructor specifies an infinite due time before the first callback and an infinite interval between callbacks, in order to prevent the first callback from occurring before the <xref:System.Threading.Timer> object is assigned to the state object.</span></span>  
  
 <span data-ttu-id="87b9b-152">에 대 한 지정 된 메서드 `callback` 에서 호출 되므로 재진입 되어야 <xref:System.Threading.ThreadPool> 스레드입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-152">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="87b9b-153">메서드가는 타이머 간격이 메서드를 실행 하는 데 필요한 시간 보다 작은 경우 또는 모든 스레드 풀 스레드가 사용에서 되며 메서드를 여러 번 큐에 대기 하는 경우 두 개의 스레드 풀 스레드에서 동시에 실행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-153">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87b9b-154">다음 코드 예제에서는 자체 타이머를 상태 개체로 사용 하 여 새 타이머를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-154">The following code example creates a new timer, using the timer itself as the state object.</span></span> <span data-ttu-id="87b9b-155"><xref:System.Threading.Timer.Change%2A> 메서드를 사용 하 여 타이머를 시작 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-155">The <xref:System.Threading.Timer.Change%2A> method is used to start the timer.</span></span> <span data-ttu-id="87b9b-156">타이머 콜백이 발생 하면 타이머를 해제 하려면 상태 개체 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-156">When the timer callback occurs, the state object is used to turn the timer off.</span></span>  
  
 [!code-csharp[TimerSelfCtor#1](~/samples/snippets/csharp/VS_Snippets_Misc/timerSelfCtor/CS/source.cs#1)]
 [!code-vb[TimerSelfCtor#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/timerSelfCtor/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Integer, period As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, int dueTime, int period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int * int -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="87b9b-157">실행할 메서드를 나타내는 <see cref="T:System.Threading.TimerCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-157">A <see cref="T:System.Threading.TimerCallback" /> delegate representing a method to be executed.</span></span></param>
        <param name="state"><span data-ttu-id="87b9b-158">콜백 메서드에서 사용할 정보가 포함된 개체를 반환하거나 <see langword="null" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-158">An object containing information to be used by the callback method, or <see langword="null" />.</span></span></param>
        <param name="dueTime"><span data-ttu-id="87b9b-159"><paramref name="callback" />이 호출되기 전에 지연할 시간(밀리초)입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-159">The amount of time to delay before <paramref name="callback" /> is invoked, in milliseconds.</span></span> <span data-ttu-id="87b9b-160">타이머가 시작되지 않도록 하려면 <see cref="F:System.Threading.Timeout.Infinite" />를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-160">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting.</span></span> <span data-ttu-id="87b9b-161">타이머를 즉시 시작하려면 0을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-161">Specify zero (0) to start the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="87b9b-162"><paramref name="callback" /> 호출 사이의 시간 간격(밀리초)입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-162">The time interval between invocations of <paramref name="callback" />, in milliseconds.</span></span> <span data-ttu-id="87b9b-163">정기적으로 신호를 보내지 않도록 하려면 <see cref="F:System.Threading.Timeout.Infinite" />를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-163">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="87b9b-164">부호 있는 32비트 정수로 시간 간격을 지정하여 <see langword="Timer" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-164">Initializes a new instance of the <see langword="Timer" /> class, using a 32-bit signed integer to specify the time interval.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b9b-165">지정 된 대리자를 `callback` 후 매개 변수를 호출 `dueTime` 경과 되 고, 각 시간 이후에 `period` 시간 간격이 경과할 합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-165">The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.</span></span>  
  
 <span data-ttu-id="87b9b-166">하는 경우 `dueTime` 영 (0)은 `callback` 즉시 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-166">If `dueTime` is zero (0), `callback` is invoked immediately.</span></span> <span data-ttu-id="87b9b-167">경우 `dueTime` 됩니다 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` 가 호출 되지 않습니다; 타이머 비활성화 되지만 호출 하 여 다시 활성화할 수 있습니다는 <xref:System.Threading.Timer.Change%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="87b9b-167">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="87b9b-168">때문에 합니다 <xref:System.Threading.Timer> 클래스에는 약 15 밀리초 Windows 7 및 Windows 8 시스템에서 시스템 클록으로 동일한 해상도 `callback` 대리자를 실행 하는 경우 시스템 클록을 확인 하 여 정의 된 간격 `period`시스템 클록의 해상도 보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-168">Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock.</span></span> <span data-ttu-id="87b9b-169">하는 경우 `period` 은 영 (0) 또는 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> 및 `dueTime` 아닙니다 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` 가 호출 됩니다 타이머의 정기적인 동작 비활성화 되지만 사용 하 여 다시 활성화할 수 있습니다은 한 번의 <xref:System.Threading.Timer.Change%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="87b9b-169">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="87b9b-170">에 대 한 지정 된 메서드 `callback` 에서 호출 되므로 재진입 되어야 <xref:System.Threading.ThreadPool> 스레드입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-170">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="87b9b-171">메서드가는 타이머 간격이 메서드를 실행 하는 데 필요한 시간 보다 작은 경우 또는 모든 스레드 풀 스레드가 사용에서 되며 메서드를 여러 번 큐에 대기 하는 경우 두 개의 스레드 풀 스레드에서 동시에 실행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-171">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87b9b-172">다음 코드 예제에서는 만드는 방법을 보여 줍니다.는 `TimerCallback` 대리자 및의 새 인스턴스를 초기화 합니다 `Timer` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-172">The following code example shows how to create a `TimerCallback` delegate and initialize a new instance of the `Timer` class.</span></span>  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="87b9b-173"><paramref name="dueTime" /> 또는 <paramref name="period" /> 매개 변수가 음수이고 <see cref="F:System.Threading.Timeout.Infinite" />와 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="87b9b-173">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="87b9b-174"><paramref name="callback" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="87b9b-174">The <paramref name="callback" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="87b9b-175">타이머</span><span class="sxs-lookup"><span data-stu-id="87b9b-175">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Long, period As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, long dueTime, long period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int64 * int64 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int64" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="87b9b-176">실행할 메서드를 나타내는 <see cref="T:System.Threading.TimerCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-176">A <see cref="T:System.Threading.TimerCallback" /> delegate representing a method to be executed.</span></span></param>
        <param name="state"><span data-ttu-id="87b9b-177">콜백 메서드에서 사용할 정보가 포함된 개체를 반환하거나 <see langword="null" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-177">An object containing information to be used by the callback method, or <see langword="null" />.</span></span></param>
        <param name="dueTime"><span data-ttu-id="87b9b-178"><paramref name="callback" />이 호출되기 전에 지연할 시간(밀리초)입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-178">The amount of time to delay before <paramref name="callback" /> is invoked, in milliseconds.</span></span> <span data-ttu-id="87b9b-179">타이머가 시작되지 않도록 하려면 <see cref="F:System.Threading.Timeout.Infinite" />를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-179">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting.</span></span> <span data-ttu-id="87b9b-180">타이머를 즉시 시작하려면 0을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-180">Specify zero (0) to start the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="87b9b-181"><paramref name="callback" /> 호출 사이의 시간 간격(밀리초)입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-181">The time interval between invocations of <paramref name="callback" />, in milliseconds.</span></span> <span data-ttu-id="87b9b-182">정기적으로 신호를 보내지 않도록 하려면 <see cref="F:System.Threading.Timeout.Infinite" />를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-182">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="87b9b-183">부호 있는 64비트 정수로 시간 간격을 측정하여 <see langword="Timer" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-183">Initializes a new instance of the <see langword="Timer" /> class, using 64-bit signed integers to measure time intervals.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b9b-184">지정 된 대리자를 `callback` 후 매개 변수를 호출 `dueTime` 경과 되 고, 각 시간 이후에 `period` 시간 간격이 경과할 합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-184">The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.</span></span>  
  
 <span data-ttu-id="87b9b-185">하는 경우 `dueTime` 영 (0)은 `callback` 즉시 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-185">If `dueTime` is zero (0), `callback` is invoked immediately.</span></span> <span data-ttu-id="87b9b-186">경우 `dueTime` 됩니다 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` 가 호출 되지 않습니다; 타이머 비활성화 되지만 호출 하 여 다시 활성화할 수 있습니다는 <xref:System.Threading.Timer.Change%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="87b9b-186">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="87b9b-187">때문에 합니다 <xref:System.Threading.Timer> 클래스에는 약 15 밀리초 Windows 7 및 Windows 8 시스템에서 시스템 클록으로 동일한 해상도 `callback` 대리자를 실행 하는 경우 시스템 클록을 확인 하 여 정의 된 간격 `period`시스템 클록의 해상도 보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-187">Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock.</span></span> <span data-ttu-id="87b9b-188">하는 경우 `period` 은 영 (0) 또는 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> 및 `dueTime` 아닙니다 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` 가 호출 됩니다 타이머의 정기적인 동작 비활성화 되지만 사용 하 여 다시 활성화할 수 있습니다은 한 번의 <xref:System.Threading.Timer.Change%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="87b9b-188">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="87b9b-189">에 대 한 지정 된 메서드 `callback` 에서 호출 되므로 재진입 되어야 <xref:System.Threading.ThreadPool> 스레드입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-189">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="87b9b-190">메서드가는 타이머 간격이 메서드를 실행 하는 데 필요한 시간 보다 작은 경우 또는 모든 스레드 풀 스레드가 사용에서 되며 메서드를 여러 번 큐에 대기 하는 경우 두 개의 스레드 풀 스레드에서 동시에 실행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-190">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="87b9b-191"><paramref name="dueTime" /> 또는 <paramref name="period" /> 매개 변수가 음수이고 <see cref="F:System.Threading.Timeout.Infinite" />와 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="87b9b-191">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="87b9b-192"><paramref name="dueTime" /> 또는 <paramref name="period" /> 매개 변수가 4294967294보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="87b9b-192">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is greater than 4294967294.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="87b9b-193">타이머</span><span class="sxs-lookup"><span data-stu-id="87b9b-193">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As TimeSpan, period As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * TimeSpan * TimeSpan -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="87b9b-194">실행할 메서드를 나타내는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-194">A delegate representing a method to be executed.</span></span></param>
        <param name="state"><span data-ttu-id="87b9b-195">콜백 메서드에서 사용할 정보가 포함된 개체를 반환하거나 <see langword="null" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-195">An object containing information to be used by the callback method, or <see langword="null" />.</span></span></param>
        <param name="dueTime"><span data-ttu-id="87b9b-196"><paramref name="callback" /> 매개 변수에서 해당 메서드를 호출하기 전에 지연될 시간입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-196">The amount of time to delay before the <paramref name="callback" /> parameter invokes its methods.</span></span> <span data-ttu-id="87b9b-197">타이머가 시작되지 않게 하려면 -1밀리초를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-197">Specify negative one (-1) milliseconds to prevent the timer from starting.</span></span> <span data-ttu-id="87b9b-198">타이머를 즉시 시작하려면 0을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-198">Specify zero (0) to start the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="87b9b-199"><paramref name="callback" />에서 참조하는 메서드 호출 사이의 시간 간격입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-199">The time interval between invocations of the methods referenced by <paramref name="callback" />.</span></span> <span data-ttu-id="87b9b-200">정기적으로 신호를 보내지 않도록 하려면 -1밀리초를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-200">Specify negative one (-1) milliseconds to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="87b9b-201"><see cref="T:System.TimeSpan" /> 값을 사용하여 시간 간격을 측정하여 <see langword="Timer" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-201">Initializes a new instance of the <see langword="Timer" /> class, using <see cref="T:System.TimeSpan" /> values to measure time intervals.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b9b-202">지정 된 대리자를 `callback` 후 매개 변수를 호출 `dueTime` 경과 되 고, 각 시간 이후에 `period` 시간 간격이 경과할 합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-202">The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.</span></span>  
  
 <span data-ttu-id="87b9b-203">하는 경우 `dueTime` 영 (0)은 `callback` 즉시 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-203">If `dueTime` is zero (0), `callback` is invoked immediately.</span></span> <span data-ttu-id="87b9b-204">하는 경우 `dueTime` 이-1 밀리초를 `callback` 가 호출 되지 않습니다; 타이머 비활성화 되지만 호출 하 여 다시 활성화할 수 있습니다는 <xref:System.Threading.Timer.Change%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="87b9b-204">If `dueTime` is negative one (-1) milliseconds, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="87b9b-205">때문에 합니다 <xref:System.Threading.Timer> 클래스에는 약 15 밀리초 Windows 7 및 Windows 8 시스템에서 시스템 클록으로 동일한 해상도 `callback` 대리자를 실행 하는 경우 시스템 클록을 확인 하 여 정의 된 간격 `period`시스템 클록의 해상도 보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-205">Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock.</span></span> <span data-ttu-id="87b9b-206">경우 `period` 가 영 (0) 또는-1 밀리초 및 `dueTime` 가 양수 이면 `callback` 가 호출 됩니다 타이머의 정기적인 동작 비활성화 되지만 사용 하 여 다시 활성화할 수 있습니다은 한 번의 <xref:System.Threading.Timer.Change%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="87b9b-206">If `period` is zero (0) or negative one (-1) milliseconds and `dueTime` is positive, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="87b9b-207">에 대 한 지정 된 메서드 `callback` 에서 호출 되므로 재진입 되어야 <xref:System.Threading.ThreadPool> 스레드입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-207">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="87b9b-208">메서드가는 타이머 간격이 메서드를 실행 하는 데 필요한 시간 보다 작은 경우 또는 모든 스레드 풀 스레드가 사용에서 되며 메서드를 여러 번 큐에 대기 하는 경우 두 개의 스레드 풀 스레드에서 동시에 실행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-208">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87b9b-209">다음 코드 예제에서는 만드는 방법을 보여 줍니다.는 `TimerCallback` 대리자 및의 새 인스턴스를 초기화 합니다 `Timer` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-209">The following code example shows how to create a `TimerCallback` delegate and initialize a new instance of the `Timer` class.</span></span>  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="87b9b-210"><paramref name="dueTime" /> 또는 <paramref name="period" /> 값의 밀리초 수가 음수이고 <see cref="F:System.Threading.Timeout.Infinite" />와 같지 않거나 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="87b9b-210">The number of milliseconds in the value of <paramref name="dueTime" /> or <paramref name="period" /> is negative and not equal to <see cref="F:System.Threading.Timeout.Infinite" />, or is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="87b9b-211"><paramref name="callback" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="87b9b-211">The <paramref name="callback" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="87b9b-212">타이머</span><span class="sxs-lookup"><span data-stu-id="87b9b-212">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As UInteger, period As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * uint32 * uint32 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.UInt32" />
        <Parameter Name="period" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="87b9b-213">실행할 메서드를 나타내는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-213">A delegate representing a method to be executed.</span></span></param>
        <param name="state"><span data-ttu-id="87b9b-214">콜백 메서드에서 사용할 정보가 포함된 개체를 반환하거나 <see langword="null" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-214">An object containing information to be used by the callback method, or <see langword="null" />.</span></span></param>
        <param name="dueTime"><span data-ttu-id="87b9b-215"><paramref name="callback" />이 호출되기 전에 지연할 시간(밀리초)입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-215">The amount of time to delay before <paramref name="callback" /> is invoked, in milliseconds.</span></span> <span data-ttu-id="87b9b-216">타이머가 시작되지 않도록 하려면 <see cref="F:System.Threading.Timeout.Infinite" />를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-216">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting.</span></span> <span data-ttu-id="87b9b-217">타이머를 즉시 시작하려면 0을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-217">Specify zero (0) to start the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="87b9b-218"><paramref name="callback" /> 호출 사이의 시간 간격(밀리초)입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-218">The time interval between invocations of <paramref name="callback" />, in milliseconds.</span></span> <span data-ttu-id="87b9b-219">정기적으로 신호를 보내지 않도록 하려면 <see cref="F:System.Threading.Timeout.Infinite" />를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-219">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="87b9b-220">부호 있는 32비트 정수로 시간 간격을 측정하여 <see langword="Timer" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-220">Initializes a new instance of the <see langword="Timer" /> class, using 32-bit unsigned integers to measure time intervals.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b9b-221">지정 된 대리자를 `callback` 후 매개 변수를 호출 `dueTime` 경과 되 고, 각 시간 이후에 `period` 시간 간격이 경과할 합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-221">The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.</span></span>  
  
 <span data-ttu-id="87b9b-222">하는 경우 `dueTime` 영 (0)은 `callback` 즉시 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-222">If `dueTime` is zero (0), `callback` is invoked immediately.</span></span> <span data-ttu-id="87b9b-223">경우 `dueTime` 됩니다 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` 가 호출 되지 않습니다; 타이머 비활성화 되지만 호출 하 여 다시 활성화할 수 있습니다는 <xref:System.Threading.Timer.Change%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="87b9b-223">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="87b9b-224">때문에 합니다 <xref:System.Threading.Timer> 클래스에는 약 15 밀리초 Windows 7 및 Windows 8 시스템에서 시스템 클록으로 동일한 해상도 `callback` 대리자를 실행 하는 경우 시스템 클록을 확인 하 여 정의 된 간격 `period`시스템 클록의 해상도 보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-224">Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock.</span></span> <span data-ttu-id="87b9b-225">하는 경우 `period` 은 영 (0) 또는 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> 및 `dueTime` 아닙니다 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` 가 호출 됩니다 타이머의 정기적인 동작 비활성화 되지만 사용 하 여 다시 활성화할 수 있습니다은 한 번의 <xref:System.Threading.Timer.Change%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="87b9b-225">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="87b9b-226">에 대 한 지정 된 메서드 `callback` 에서 호출 되므로 재진입 되어야 <xref:System.Threading.ThreadPool> 스레드입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-226">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="87b9b-227">메서드가는 타이머 간격이 메서드를 실행 하는 데 필요한 시간 보다 작은 경우 또는 모든 스레드 풀 스레드가 사용에서 되며 메서드를 여러 번 큐에 대기 하는 경우 두 개의 스레드 풀 스레드에서 동시에 실행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-227">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="87b9b-228"><paramref name="dueTime" /> 또는 <paramref name="period" /> 매개 변수가 음수이고 <see cref="F:System.Threading.Timeout.Infinite" />와 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="87b9b-228">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="87b9b-229"><paramref name="callback" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="87b9b-229">The <paramref name="callback" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="87b9b-230">타이머</span><span class="sxs-lookup"><span data-stu-id="87b9b-230">Timers</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Change">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87b9b-231">타이머 시작 시간 및 메서드 호출 사이의 간격을 변경합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-231">Changes the start time and the interval between method invocations for a timer.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Integer, period As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(int dueTime, int period);" />
      <MemberSignature Language="F#" Value="member this.Change : int * int -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dueTime"><span data-ttu-id="87b9b-232"><see cref="T:System.Threading.Timer" />가 구성될 때 지정되는 콜백 메서드를 호출하기 전의 지연 시간(밀리초)입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-232">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span></span> <span data-ttu-id="87b9b-233">타이머가 다시 시작되지 않도록 하려면 <see cref="F:System.Threading.Timeout.Infinite" />를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-233">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting.</span></span> <span data-ttu-id="87b9b-234">타이머를 즉시 시작하려면 0을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-234">Specify zero (0) to restart the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="87b9b-235"><see cref="T:System.Threading.Timer" />가 생성되었을 때 지정된 콜백 메서드 호출 사이의 간격(밀리초)입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-235">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span></span> <span data-ttu-id="87b9b-236">정기적으로 신호를 보내지 않도록 하려면 <see cref="F:System.Threading.Timeout.Infinite" />를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-236">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="87b9b-237">부호 있는 32비트 정수로 시간 간격을 측정하여 타이머 시작 시간 및 메서드 호출 사이의 간격을 변경합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-237">Changes the start time and the interval between method invocations for a timer, using 32-bit signed integers to measure time intervals.</span></span></summary>
        <returns><span data-ttu-id="87b9b-238">타이머가 성공적으로 업데이트되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-238"><see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b9b-239">콜백 메서드 후 한 번 `dueTime` 지정 된 시간 간격을 시간 경과 되 고, 그 후 각 `period` 경과 합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-239">The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.</span></span>  
  
 <span data-ttu-id="87b9b-240">경우 `dueTime` 은 영 (0), 콜백 메서드를 즉시 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-240">If `dueTime` is zero (0), the callback method is invoked immediately.</span></span> <span data-ttu-id="87b9b-241">하는 경우 `dueTime` 됩니다 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, 콜백 메서드가 호출 되지 않습니다 타이머를 사용 하지 않도록 설정 하지만 수 호출 하 여 다시 활성화할 수 <xref:System.Threading.Timer.Change%2A> 양수 값을 지정 하 고 `dueTime`입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-241">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.</span></span>  
  
 <span data-ttu-id="87b9b-242">하는 경우 `period` 은 영 (0) 또는 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, 및 `dueTime` 되지 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>수는 콜백 메서드는 한 번 호출; 주기적 타이머의 동작을 사용 하지 않도록 설정 되지만 호출 하 여 다시 활성화할 수 <xref:System.Threading.Timer.Change%2A> 양수 값을 지정 하 고 `period`.</span><span class="sxs-lookup"><span data-stu-id="87b9b-242">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`.</span></span>  
  
 <span data-ttu-id="87b9b-243">합니다 <xref:System.Threading.Timer.Change%2A> 에서 메서드를 호출할 수는 <xref:System.Threading.TimerCallback> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-243">The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87b9b-244">다음 코드 예제에는 시작 하는 방법을 보여 줍니다.는 `Timer` 고 일정 한 개수의 호출을 이후 해당 기간을 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-244">The following code example demonstrates how to start a `Timer` and, after a set number of invocations, change its period.</span></span>  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="87b9b-245"><see cref="T:System.Threading.Timer" />가 이미 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="87b9b-245">The <see cref="T:System.Threading.Timer" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="87b9b-246"><paramref name="dueTime" /> 또는 <paramref name="period" /> 매개 변수가 음수이고 <see cref="F:System.Threading.Timeout.Infinite" />와 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="87b9b-246">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="87b9b-247">타이머</span><span class="sxs-lookup"><span data-stu-id="87b9b-247">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Long, period As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(long dueTime, long period);" />
      <MemberSignature Language="F#" Value="member this.Change : int64 * int64 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int64" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dueTime"><span data-ttu-id="87b9b-248"><see cref="T:System.Threading.Timer" />가 구성될 때 지정되는 콜백 메서드를 호출하기 전의 지연 시간(밀리초)입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-248">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span></span> <span data-ttu-id="87b9b-249">타이머가 다시 시작되지 않도록 하려면 <see cref="F:System.Threading.Timeout.Infinite" />를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-249">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting.</span></span> <span data-ttu-id="87b9b-250">타이머를 즉시 시작하려면 0을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-250">Specify zero (0) to restart the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="87b9b-251"><see cref="T:System.Threading.Timer" />가 생성되었을 때 지정된 콜백 메서드 호출 사이의 간격(밀리초)입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-251">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span></span> <span data-ttu-id="87b9b-252">정기적으로 신호를 보내지 않도록 하려면 <see cref="F:System.Threading.Timeout.Infinite" />를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-252">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="87b9b-253">부호 있는 64비트 정수로 시간 간격을 측정하여 타이머 시작 시간 및 메서드 호출 사이의 간격을 변경합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-253">Changes the start time and the interval between method invocations for a timer, using 64-bit signed integers to measure time intervals.</span></span></summary>
        <returns><span data-ttu-id="87b9b-254">타이머가 성공적으로 업데이트되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-254"><see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b9b-255">콜백 메서드 후 한 번 `dueTime` 지정 된 시간 간격을 시간 경과 되 고, 그 후 각 `period` 경과 합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-255">The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.</span></span>  
  
 <span data-ttu-id="87b9b-256">경우 `dueTime` 은 영 (0), 콜백 메서드를 즉시 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-256">If `dueTime` is zero (0), the callback method is invoked immediately.</span></span> <span data-ttu-id="87b9b-257">하는 경우 `dueTime` 됩니다 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, 콜백 메서드가 호출 되지 않습니다 타이머를 사용 하지 않도록 설정 하지만 수 호출 하 여 다시 활성화할 수 <xref:System.Threading.Timer.Change%2A> 양수 값을 지정 하 고 `dueTime`입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-257">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.</span></span>  
  
 <span data-ttu-id="87b9b-258">하는 경우 `period` 은 영 (0) 또는 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, 및 `dueTime` 되지 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>수는 콜백 메서드는 한 번 호출; 주기적 타이머의 동작을 사용 하지 않도록 설정 되지만 호출 하 여 다시 활성화할 수 <xref:System.Threading.Timer.Change%2A> 양수 값을 지정 하 고 `period`.</span><span class="sxs-lookup"><span data-stu-id="87b9b-258">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`.</span></span>  
  
 <span data-ttu-id="87b9b-259">합니다 <xref:System.Threading.Timer.Change%2A> 에서 메서드를 호출할 수는 <xref:System.Threading.TimerCallback> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-259">The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="87b9b-260"><see cref="T:System.Threading.Timer" />가 이미 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="87b9b-260">The <see cref="T:System.Threading.Timer" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="87b9b-261"><paramref name="dueTime" /> 또는 <paramref name="period" /> 매개 변수 값이 -1 미만인 경우</span><span class="sxs-lookup"><span data-stu-id="87b9b-261">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is less than -1.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="87b9b-262"><paramref name="dueTime" /> 또는 <paramref name="period" /> 매개 변수가 4294967294보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="87b9b-262">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is greater than 4294967294.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="87b9b-263">타이머</span><span class="sxs-lookup"><span data-stu-id="87b9b-263">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As TimeSpan, period As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="member this.Change : TimeSpan * TimeSpan -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dueTime"><span data-ttu-id="87b9b-264"><see cref="T:System.TimeSpan" />가 구성될 때 지정되는 콜백 메서드를 호출하기 전의 지연 시간을 나타내는 <see cref="T:System.Threading.Timer" />입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-264">A <see cref="T:System.TimeSpan" /> representing the amount of time to delay before invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed.</span></span> <span data-ttu-id="87b9b-265">타이머가 다시 시작되지 않게 하려면 -1밀리초를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-265">Specify negative one (-1) milliseconds to prevent the timer from restarting.</span></span> <span data-ttu-id="87b9b-266">타이머를 즉시 시작하려면 0을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-266">Specify zero (0) to restart the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="87b9b-267"><see cref="T:System.Threading.Timer" />가 생성되었을 때 지정된 콜백 메서드 호출 사이의 간격입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-267">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed.</span></span> <span data-ttu-id="87b9b-268">정기적으로 신호를 보내지 않도록 하려면 -1밀리초를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-268">Specify negative one (-1) milliseconds to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="87b9b-269"><see cref="T:System.TimeSpan" /> 값으로 시간 간격을 측정하여 타이머 시작 시간 및 메서드 호출 사이의 간격을 변경합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-269">Changes the start time and the interval between method invocations for a timer, using <see cref="T:System.TimeSpan" /> values to measure time intervals.</span></span></summary>
        <returns><span data-ttu-id="87b9b-270">타이머가 성공적으로 업데이트되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-270"><see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b9b-271">콜백 메서드 후 한 번 `dueTime` 지정 된 시간 간격을 시간 경과 되 고, 그 후 각 `period` 경과 합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-271">The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.</span></span>  
  
 <span data-ttu-id="87b9b-272">경우 `dueTime` 은 영 (0), 콜백 메서드를 즉시 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-272">If `dueTime` is zero (0), the callback method is invoked immediately.</span></span> <span data-ttu-id="87b9b-273">하는 경우 `dueTime` -1 밀리초, 콜백 메서드가 호출 되지 않습니다 타이머를 사용 하지 않도록 설정 하지만 수를 호출 하 여 다시 활성화할 수 <xref:System.Threading.Timer.Change%2A> 양수 값을 지정 하 고 `dueTime`입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-273">If `dueTime` is negative one (-1) milliseconds, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.</span></span>  
  
 <span data-ttu-id="87b9b-274">하는 경우 `period` 가 영 (0) 또는-1 밀리초, 및 `dueTime` 이 양수인 경우 콜백 메서드는 한 번 호출; 타이머의 정기적인 동작 비활성화 되지만 호출 하 여 다시 활성화할 수 있습니다 <xref:System.Threading.Timer.Change%2A> 보다 큰 값을 지정 하 고 0 `period`합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-274">If `period` is zero (0) or negative one (-1) milliseconds, and `dueTime` is positive, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a value greater than zero for `period`.</span></span>  
  
 <span data-ttu-id="87b9b-275">합니다 <xref:System.Threading.Timer.Change%2A> 에서 메서드를 호출할 수는 <xref:System.Threading.TimerCallback> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-275">The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87b9b-276">다음 코드 예제에는 시작 하는 방법을 보여 줍니다.는 `Timer` 고 일정 한 개수의 호출을 이후 해당 기간을 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-276">The following code example demonstrates how to start a `Timer` and, after a set number of invocations, change its period.</span></span>  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="87b9b-277"><see cref="T:System.Threading.Timer" />가 이미 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="87b9b-277">The <see cref="T:System.Threading.Timer" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="87b9b-278"><paramref name="dueTime" /> 또는 <paramref name="period" /> 매개 변수 값이 -1밀리초 미만인 경우</span><span class="sxs-lookup"><span data-stu-id="87b9b-278">The <paramref name="dueTime" /> or <paramref name="period" /> parameter, in milliseconds, is less than -1.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="87b9b-279"><paramref name="dueTime" /> 또는 <paramref name="period" /> 매개 변수 값이 4294967294밀리초보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="87b9b-279">The <paramref name="dueTime" /> or <paramref name="period" /> parameter, in milliseconds, is greater than 4294967294.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="87b9b-280">타이머</span><span class="sxs-lookup"><span data-stu-id="87b9b-280">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As UInteger, period As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="member this.Change : uint32 * uint32 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.UInt32" />
        <Parameter Name="period" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="dueTime"><span data-ttu-id="87b9b-281"><see cref="T:System.Threading.Timer" />가 구성될 때 지정되는 콜백 메서드를 호출하기 전의 지연 시간(밀리초)입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-281">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span></span> <span data-ttu-id="87b9b-282">타이머가 다시 시작되지 않도록 하려면 <see cref="F:System.Threading.Timeout.Infinite" />를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-282">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting.</span></span> <span data-ttu-id="87b9b-283">타이머를 즉시 시작하려면 0을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-283">Specify zero (0) to restart the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="87b9b-284"><see cref="T:System.Threading.Timer" />가 생성되었을 때 지정된 콜백 메서드 호출 사이의 간격(밀리초)입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-284">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span></span> <span data-ttu-id="87b9b-285">정기적으로 신호를 보내지 않도록 하려면 <see cref="F:System.Threading.Timeout.Infinite" />를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-285">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="87b9b-286">부호 없는 32비트 정수로 시간 간격을 측정하여 타이머 시작 시간 및 메서드 호출 사이의 간격을 변경합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-286">Changes the start time and the interval between method invocations for a timer, using 32-bit unsigned integers to measure time intervals.</span></span></summary>
        <returns><span data-ttu-id="87b9b-287">타이머가 성공적으로 업데이트되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-287"><see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b9b-288">콜백 메서드 후 한 번 `dueTime` 지정 된 시간 간격을 시간 경과 되 고, 그 후 각 `period` 경과 합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-288">The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.</span></span>  
  
 <span data-ttu-id="87b9b-289">경우 `dueTime` 은 영 (0), 콜백 메서드를 즉시 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-289">If `dueTime` is zero (0), the callback method is invoked immediately.</span></span> <span data-ttu-id="87b9b-290">하는 경우 `dueTime` 됩니다 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, 콜백 메서드가 호출 되지 않습니다 타이머를 사용 하지 않도록 설정 하지만 수 호출 하 여 다시 활성화할 수 <xref:System.Threading.Timer.Change%2A> 양수 값을 지정 하 고 `dueTime`입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-290">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.</span></span>  
  
 <span data-ttu-id="87b9b-291">하는 경우 `period` 은 영 (0) 또는 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, 및 `dueTime` 되지 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>수는 콜백 메서드는 한 번 호출; 주기적 타이머의 동작을 사용 하지 않도록 설정 되지만 호출 하 여 다시 활성화할 수 <xref:System.Threading.Timer.Change%2A> 양수 값을 지정 하 고 `period`.</span><span class="sxs-lookup"><span data-stu-id="87b9b-291">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`.</span></span>  
  
 <span data-ttu-id="87b9b-292">합니다 <xref:System.Threading.Timer.Change%2A> 에서 메서드를 호출할 수는 <xref:System.Threading.TimerCallback> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-292">The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="87b9b-293"><see cref="T:System.Threading.Timer" />가 이미 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="87b9b-293">The <see cref="T:System.Threading.Timer" /> has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="87b9b-294">타이머</span><span class="sxs-lookup"><span data-stu-id="87b9b-294">Timers</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87b9b-295"><see cref="T:System.Threading.Timer" />의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-295">Releases all resources used by the current instance of <see cref="T:System.Threading.Timer" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="timer.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="87b9b-296"><see cref="T:System.Threading.Timer" />의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-296">Releases all resources used by the current instance of <see cref="T:System.Threading.Timer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b9b-297">호출 `Dispose` 에서 사용 하는 리소스는 <xref:System.Threading.Timer> 다른 용도로 다시 할당 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-297">Calling `Dispose` allows the resources used by the <xref:System.Threading.Timer> to be reallocated for other purposes.</span></span> <span data-ttu-id="87b9b-298">에 대 한 자세한 내용은 `Dispose`를 참조 하세요 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-298">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87b9b-299">콜백 후 발생할 수 있습니다는 <xref:System.Threading.Timer.Dispose> 메서드 오버 로드를 호출한 타이머 스레드 풀 스레드에 의해 실행에 대 한 콜백을 큐 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-299">Callbacks can occur after the <xref:System.Threading.Timer.Dispose> method overload has been called, because the timer queues callbacks for execution by thread pool threads.</span></span> <span data-ttu-id="87b9b-300">사용할 수는 <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> 메서드 오버 로드를 모든 콜백이 완료 될 때까지 기다립니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-300">You can use the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload to wait until all callbacks have completed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87b9b-301">다음 코드 예제에서 보유 한 리소스를 해제 하는 방법을 보여 줍니다는 `Timer`합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-301">The following code example shows how to free the resources held by a `Timer`.</span></span>  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="87b9b-302">타이머</span><span class="sxs-lookup"><span data-stu-id="87b9b-302">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public bool Dispose (System.Threading.WaitHandle notifyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Dispose(class System.Threading.WaitHandle notifyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dispose (notifyObject As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Dispose(System::Threading::WaitHandle ^ notifyObject);" />
      <MemberSignature Language="F#" Value="member this.Dispose : System.Threading.WaitHandle -&gt; bool" Usage="timer.Dispose notifyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notifyObject" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="notifyObject"><span data-ttu-id="87b9b-303"><see langword="Timer" />가 삭제되면 신호를 받을 <see cref="T:System.Threading.WaitHandle" />입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-303">The <see cref="T:System.Threading.WaitHandle" /> to be signaled when the <see langword="Timer" /> has been disposed of.</span></span></param>
        <summary><span data-ttu-id="87b9b-304"><see cref="T:System.Threading.Timer" />의 현재 인스턴스에서 사용하는 모든 리소스를 해제하고 타이머가 삭제되면 신호를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-304">Releases all resources used by the current instance of <see cref="T:System.Threading.Timer" /> and signals when the timer has been disposed of.</span></span></summary>
        <returns><span data-ttu-id="87b9b-305">작업이 성공적으로 수행되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-305"><see langword="true" /> if the function succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87b9b-306">호출 `Dispose` 에서 사용 하는 리소스는 <xref:System.Threading.Timer> 다른 용도로 다시 할당 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-306">Calling `Dispose` allows the resources used by the <xref:System.Threading.Timer> to be reallocated for other purposes.</span></span> <span data-ttu-id="87b9b-307">에 대 한 자세한 내용은 `Dispose`를 참조 하세요 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-307">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 <span data-ttu-id="87b9b-308">이 메서드가 완료 되 면 신호를 보냅니다.는 <xref:System.Threading.WaitHandle> 에 지정 된 된 `notifyObject` 매개 변수입니다. 이 오버 로드를 사용 합니다 <xref:System.Threading.Timer.Dispose%2A> 메서드 특정 타이머가 삭제 될 때까지 차단 하는 일을 할 수 있도록 하려는 경우.</span><span class="sxs-lookup"><span data-stu-id="87b9b-308">When this method completes, it signals the <xref:System.Threading.WaitHandle> specified by the `notifyObject` parameter.Use this overload of the <xref:System.Threading.Timer.Dispose%2A> method if you want to be able to block until you are certain that the timer has been disposed.</span></span> <span data-ttu-id="87b9b-309">모든 현재 대기 중인된 콜백이 완료 될 때까지 타이머가 삭제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="87b9b-309">The timer is not disposed until all currently queued callbacks have completed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87b9b-310">콜백을 사용 하는 경우는 <xref:System.Threading.Timer.Change%2A> 설정 하는 방법 합니다 `dueTime` 매개 변수를 0로 경합 상태가 발생할 수 있습니다 때를 <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> 메서드 오버 로드를 호출한: 타이머 큐 하기 전에 새 콜백 하는 경우는 <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> 메서드 오버 로드 존재 하는 검색 없는 콜백이 큐에 대기 중이면 <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> 계속 해 서 차단; 새 콜백이 큐에 대기 중임을 하는 동안 고 타이머가 삭제 되는 고, 그렇지 <xref:System.ObjectDisposedException> 새 콜백을 호출 하는 경우 throw 되는 <xref:System.Threading.Timer.Change%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="87b9b-310">If the callback uses the <xref:System.Threading.Timer.Change%2A> method to set the `dueTime` parameter to zero, a race condition can occur when the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload is called: If the timer queues a new callback before the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload detects that there are no callbacks queued, <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> continues to block; otherwise, the timer is disposed while the new callback is being queued, and an <xref:System.ObjectDisposedException> is thrown when the new callback calls the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="87b9b-311"><paramref name="notifyObject" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="87b9b-311">The <paramref name="notifyObject" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md"><span data-ttu-id="87b9b-312">타이머</span><span class="sxs-lookup"><span data-stu-id="87b9b-312">Timers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="member this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="timer.DisposeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Timer ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="timer.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>