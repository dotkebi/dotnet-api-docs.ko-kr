<Type Name="SocketType" FullName="System.Net.Sockets.SocketType">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4fff213d60f5c047e16c54905ef3d7682da06b89" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58688777" /></Metadata><TypeSignature Language="C#" Value="public enum SocketType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed SocketType extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.SocketType" />
  <TypeSignature Language="VB.NET" Value="Public Enum SocketType" />
  <TypeSignature Language="C++ CLI" Value="public enum class SocketType" />
  <TypeSignature Language="F#" Value="type SocketType = " />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary><span data-ttu-id="18257-101"><see cref="T:System.Net.Sockets.Socket" /> 클래스의 인스턴스가 나타내는 소켓의 종류를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="18257-101">Specifies the type of socket that an instance of the <see cref="T:System.Net.Sockets.Socket" /> class represents.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18257-102">전에 <xref:System.Net.Sockets.Socket> 보낼 수 데이터를 수신 하 고 먼저 만들어야 합니다를 사용 하 여는 <xref:System.Net.Sockets.AddressFamily>, <xref:System.Net.Sockets.SocketType>, 및 <xref:System.Net.Sockets.ProtocolType>합니다.</span><span class="sxs-lookup"><span data-stu-id="18257-102">Before a <xref:System.Net.Sockets.Socket> can send and receive data, it must first be created using an <xref:System.Net.Sockets.AddressFamily>, a <xref:System.Net.Sockets.SocketType>, and a <xref:System.Net.Sockets.ProtocolType>.</span></span> <span data-ttu-id="18257-103">합니다 <xref:System.Net.Sockets.SocketType> 열거형 형식의 정의 대 한 몇 가지 옵션을 제공 <xref:System.Net.Sockets.Socket> 을 엽니다.</span><span class="sxs-lookup"><span data-stu-id="18257-103">The <xref:System.Net.Sockets.SocketType> enumeration provides several options for defining the type of <xref:System.Net.Sockets.Socket> that you intend to open.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="18257-104"><xref:System.Net.Sockets.SocketType> 경우에 따라 암시적으로 나타냅니다 <xref:System.Net.Sockets.ProtocolType> 내에서 사용 되는 <xref:System.Net.Sockets.AddressFamily>합니다.</span><span class="sxs-lookup"><span data-stu-id="18257-104"><xref:System.Net.Sockets.SocketType> sometimes implicitly indicates which <xref:System.Net.Sockets.ProtocolType> is used within an <xref:System.Net.Sockets.AddressFamily>.</span></span> <span data-ttu-id="18257-105">예를 들어 경우는 <xref:System.Net.Sockets.SocketType?displayProperty=nameWithType> 됩니다 <xref:System.Net.Sockets.SocketType.Dgram?displayProperty=nameWithType>, <xref:System.Net.Sockets.ProtocolType?displayProperty=nameWithType> 항상 <xref:System.Net.Sockets.ProtocolType.Udp?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="18257-105">For example, when the <xref:System.Net.Sockets.SocketType?displayProperty=nameWithType> is <xref:System.Net.Sockets.SocketType.Dgram?displayProperty=nameWithType>, the <xref:System.Net.Sockets.ProtocolType?displayProperty=nameWithType> is always <xref:System.Net.Sockets.ProtocolType.Udp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="18257-106">경우는 <xref:System.Net.Sockets.SocketType?displayProperty=nameWithType> 됩니다 <xref:System.Net.Sockets.SocketType.Stream?displayProperty=nameWithType>, <xref:System.Net.Sockets.ProtocolType?displayProperty=nameWithType> 는 항상 <xref:System.Net.Sockets.ProtocolType.Tcp?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="18257-106">When the <xref:System.Net.Sockets.SocketType?displayProperty=nameWithType> is <xref:System.Net.Sockets.SocketType.Stream?displayProperty=nameWithType>, the <xref:System.Net.Sockets.ProtocolType?displayProperty=nameWithType> is always <xref:System.Net.Sockets.ProtocolType.Tcp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="18257-107">만들려고 하는 경우는 <xref:System.Net.Sockets.Socket> 는 호환 되지 않는 조합을 사용 하 여 <xref:System.Net.Sockets.Socket> throw를 <xref:System.Net.Sockets.SocketException>입니다.</span><span class="sxs-lookup"><span data-stu-id="18257-107">If you try to create a <xref:System.Net.Sockets.Socket> with an incompatible combination, <xref:System.Net.Sockets.Socket> throws a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18257-108">다음 예제에서는 <xref:System.Net.Sockets.SocketType.Stream?displayProperty=nameWithType> 매개 변수로 <xref:System.Net.Sockets.Socket> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="18257-108">The following example uses <xref:System.Net.Sockets.SocketType.Stream?displayProperty=nameWithType> as a parameter to the <xref:System.Net.Sockets.Socket> constructor.</span></span>  
  
 [!code-cpp[SelectModeExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SelectModeExample/CPP/source.cpp#1)]
 [!code-csharp[SelectModeExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SelectModeExample/CS/source.cs#1)]
 [!code-vb[SelectModeExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SelectModeExample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Net.Sockets.AddressFamily" />
    <altmember cref="T:System.Net.Sockets.ProtocolType" />
    <altmember cref="T:System.Net.Sockets.Socket" />
  </Docs>
  <Members>
    <Member MemberName="Dgram">
      <MemberSignature Language="C#" Value="Dgram" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Sockets.SocketType Dgram = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Sockets.SocketType.Dgram" />
      <MemberSignature Language="VB.NET" Value="Dgram" />
      <MemberSignature Language="C++ CLI" Value="Dgram" />
      <MemberSignature Language="F#" Value="Dgram = 2" Usage="System.Net.Sockets.SocketType.Dgram" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketType</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><span data-ttu-id="18257-109">고정된 최대 길이(대개 작음)의 신뢰할 수 없고 연결 없는 메시지인 데이터그램을 지원합니다.</span><span class="sxs-lookup"><span data-stu-id="18257-109">Supports datagrams, which are connectionless, unreliable messages of a fixed (typically small) maximum length.</span></span> <span data-ttu-id="18257-110">메시지가 손실되거나 중복될 수 있으며 메시지 순서가 잘못될 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="18257-110">Messages might be lost or duplicated and might arrive out of order.</span></span> <span data-ttu-id="18257-111"><see cref="T:System.Net.Sockets.Socket" /> 종류의 <see cref="F:System.Net.Sockets.SocketType.Dgram" />은 데이터를 보내고 받기 전에 연결하지 않고도 여러 피어와 통신할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="18257-111">A <see cref="T:System.Net.Sockets.Socket" /> of type <see cref="F:System.Net.Sockets.SocketType.Dgram" /> requires no connection prior to sending and receiving data, and can communicate with multiple peers.</span></span> <span data-ttu-id="18257-112"><see cref="F:System.Net.Sockets.SocketType.Dgram" />은 Datagram Protocol(<see langword="ProtocolType" />.<see cref="F:System.Net.Sockets.ProtocolType.Udp" />)과 <see langword="AddressFamily" />.<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /></span><span class="sxs-lookup"><span data-stu-id="18257-112"><see cref="F:System.Net.Sockets.SocketType.Dgram" /> uses the Datagram Protocol (<see langword="ProtocolType" />.<see cref="F:System.Net.Sockets.ProtocolType.Udp" />) and the <see langword="AddressFamily" />.<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /></span></span> <span data-ttu-id="18257-113">주소 패밀리를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="18257-113">address family.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Raw">
      <MemberSignature Language="C#" Value="Raw" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Sockets.SocketType Raw = int32(3)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Sockets.SocketType.Raw" />
      <MemberSignature Language="VB.NET" Value="Raw" />
      <MemberSignature Language="C++ CLI" Value="Raw" />
      <MemberSignature Language="F#" Value="Raw = 3" Usage="System.Net.Sockets.SocketType.Raw" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketType</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary><span data-ttu-id="18257-114">내부 전송 프로토콜에 대한 액세스를 지원합니다.</span><span class="sxs-lookup"><span data-stu-id="18257-114">Supports access to the underlying transport protocol.</span></span> <span data-ttu-id="18257-115"><see cref="F:System.Net.Sockets.SocketType.Raw" />를 사용하면 Internet Control Message Protocol(<see langword="ProtocolType" />.<see cref="F:System.Net.Sockets.ProtocolType.Icmp" />) 및 Internet Group Management Protocol(<see langword="ProtocolType" />.<see cref="F:System.Net.Sockets.ProtocolType.Igmp" />) 같은 프로토콜을 사용하여 통신할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="18257-115">Using <see cref="F:System.Net.Sockets.SocketType.Raw" />, you can communicate using protocols like Internet Control Message Protocol (<see langword="ProtocolType" />.<see cref="F:System.Net.Sockets.ProtocolType.Icmp" />) and Internet Group Management Protocol (<see langword="ProtocolType" />.<see cref="F:System.Net.Sockets.ProtocolType.Igmp" />).</span></span> <span data-ttu-id="18257-116">응용 프로그램은 전송 시 전체 IP 헤더를 제공해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="18257-116">Your application must provide a complete IP header when sending.</span></span> <span data-ttu-id="18257-117">받은 데이터그램은 변경되지 않은 IP 헤더 및 옵션과 함께 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="18257-117">Received datagrams return with the IP header and options intact.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Rdm">
      <MemberSignature Language="C#" Value="Rdm" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Sockets.SocketType Rdm = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Sockets.SocketType.Rdm" />
      <MemberSignature Language="VB.NET" Value="Rdm" />
      <MemberSignature Language="C++ CLI" Value="Rdm" />
      <MemberSignature Language="F#" Value="Rdm = 4" Usage="System.Net.Sockets.SocketType.Rdm" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketType</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary><span data-ttu-id="18257-118">연결 없고, 메시지 지향적이고, 신뢰성 있게 배달되는 메시지를 지원하고, 데이터 내의 메시지 경계를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="18257-118">Supports connectionless, message-oriented, reliably delivered messages, and preserves message boundaries in data.</span></span> <span data-ttu-id="18257-119">RDM(Reliably Delivered Message) 메시지는 복제되지 않은 상태로 순서에 따라 도착합니다.</span><span class="sxs-lookup"><span data-stu-id="18257-119">Rdm (Reliably Delivered Messages) messages arrive unduplicated and in order.</span></span> <span data-ttu-id="18257-120">또한 메시지가 손실되면 보낸 사람에게 알립니다.</span><span class="sxs-lookup"><span data-stu-id="18257-120">Furthermore, the sender is notified if messages are lost.</span></span> <span data-ttu-id="18257-121"><see cref="F:System.Net.Sockets.SocketType.Rdm" />을 사용하여 <see cref="T:System.Net.Sockets.Socket" />을 초기화하면 데이터를 보내고 받기 전에 원격 호스트에 연결하지 않아도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="18257-121">If you initialize a <see cref="T:System.Net.Sockets.Socket" /> using <see cref="F:System.Net.Sockets.SocketType.Rdm" />, you do not require a remote host connection before sending and receiving data.</span></span> <span data-ttu-id="18257-122">또한 <see cref="F:System.Net.Sockets.SocketType.Rdm" />을 사용하면 여러 피어와 통신할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="18257-122">With <see cref="F:System.Net.Sockets.SocketType.Rdm" />, you can communicate with multiple peers.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Seqpacket">
      <MemberSignature Language="C#" Value="Seqpacket" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Sockets.SocketType Seqpacket = int32(5)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Sockets.SocketType.Seqpacket" />
      <MemberSignature Language="VB.NET" Value="Seqpacket" />
      <MemberSignature Language="C++ CLI" Value="Seqpacket" />
      <MemberSignature Language="F#" Value="Seqpacket = 5" Usage="System.Net.Sockets.SocketType.Seqpacket" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketType</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary><span data-ttu-id="18257-123">네트워크를 통해 연결 지향적이고, 양방향으로 신뢰성 있게 전송되며, 순서가 지정된 바이트 스트림을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="18257-123">Provides connection-oriented and reliable two-way transfer of ordered byte streams across a network.</span></span> <span data-ttu-id="18257-124"><see cref="F:System.Net.Sockets.SocketType.Seqpacket" />은 데이터를 중복하지 않고 데이터 스트림 내의 경계를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="18257-124"><see cref="F:System.Net.Sockets.SocketType.Seqpacket" /> does not duplicate data, and it preserves boundaries within the data stream.</span></span> <span data-ttu-id="18257-125"><see cref="F:System.Net.Sockets.SocketType.Seqpacket" /> 종류의 <see cref="T:System.Net.Sockets.Socket" />은 단일 피어와 통신하며 통신을 시작하기 전에 원격 호스트에 연결해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="18257-125">A <see cref="T:System.Net.Sockets.Socket" /> of type <see cref="F:System.Net.Sockets.SocketType.Seqpacket" /> communicates with a single peer and requires a remote host connection before communication can begin.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Stream">
      <MemberSignature Language="C#" Value="Stream" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Sockets.SocketType Stream = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Sockets.SocketType.Stream" />
      <MemberSignature Language="VB.NET" Value="Stream" />
      <MemberSignature Language="C++ CLI" Value="Stream" />
      <MemberSignature Language="F#" Value="Stream = 1" Usage="System.Net.Sockets.SocketType.Stream" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketType</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="18257-126">데이터 중복이나 경계 유지 없이 신뢰성 있는 양방향 연결 기반의 바이트 스트림을 지원합니다.</span><span class="sxs-lookup"><span data-stu-id="18257-126">Supports reliable, two-way, connection-based byte streams without the duplication of data and without preservation of boundaries.</span></span> <span data-ttu-id="18257-127">이 종류의 <see cref="T:System.Net.Sockets.Socket" />은 단일 피어와 통신하며 이 소켓을 사용할 경우 통신을 시작하기 전에 원격 호스트에 연결해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="18257-127">A <see cref="T:System.Net.Sockets.Socket" /> of this type communicates with a single peer and requires a remote host connection before communication can begin.</span></span> <span data-ttu-id="18257-128"><see cref="F:System.Net.Sockets.SocketType.Stream" />은 Transmission Control Protocol(<see langword="ProtocolType" />.<see cref="F:System.Net.Sockets.ProtocolType.Tcp" />) 및 <see langword="AddressFamily" />.<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /></span><span class="sxs-lookup"><span data-stu-id="18257-128"><see cref="F:System.Net.Sockets.SocketType.Stream" /> uses the Transmission Control Protocol (<see langword="ProtocolType" />.<see cref="F:System.Net.Sockets.ProtocolType.Tcp" />) and the <see langword="AddressFamily" />.<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /></span></span> <span data-ttu-id="18257-129">주소 패밀리를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="18257-129">address family.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Unknown">
      <MemberSignature Language="C#" Value="Unknown" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Sockets.SocketType Unknown = int32(-1)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Sockets.SocketType.Unknown" />
      <MemberSignature Language="VB.NET" Value="Unknown" />
      <MemberSignature Language="C++ CLI" Value="Unknown" />
      <MemberSignature Language="F#" Value="Unknown = -1" Usage="System.Net.Sockets.SocketType.Unknown" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketType</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="18257-130">알 수 없는 <see cref="T:System.Net.Sockets.Socket" /> 종류를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="18257-130">Specifies an unknown <see cref="T:System.Net.Sockets.Socket" /> type.</span></span></summary>
      </Docs>
    </Member>
  </Members>
</Type>