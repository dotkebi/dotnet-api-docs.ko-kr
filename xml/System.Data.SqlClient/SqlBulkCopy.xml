<Type Name="SqlBulkCopy" FullName="System.Data.SqlClient.SqlBulkCopy">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c2245419dca31dcc8fa93f103a021ddcfb28d779" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56791045" /></Metadata><TypeSignature Language="C#" Value="public sealed class SqlBulkCopy : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlBulkCopy extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlBulkCopy" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlBulkCopy&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlBulkCopy sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SqlBulkCopy = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.4.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="9bf64-101">다른 소스의 데이터를 사용하여 SQL Server 테이블을 대량으로 로드할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-101">Lets you efficiently bulk load a SQL Server table with data from another source.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bf64-102">Microsoft SQL Server 명명 된 인기 있는 명령 프롬프트 유틸리티를 포함 **bcp** 서버 간 또는 단일 서버에 있는지 여부를 다른 데이터를에서 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-102">Microsoft SQL Server includes a popular command-prompt utility named **bcp** for moving data from one table to another, whether on a single server or between servers.</span></span> <span data-ttu-id="9bf64-103"><xref:System.Data.SqlClient.SqlBulkCopy> 클래스를 사용 하면 비슷한 기능을 제공 하는 관리 코드 솔루션을 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-103">The <xref:System.Data.SqlClient.SqlBulkCopy> class lets you write managed code solutions that provide similar functionality.</span></span> <span data-ttu-id="9bf64-104">가지 다른 방법 (INSERT 문, 예를 들어), SQL Server 테이블로 데이터를 로드 하지만 <xref:System.Data.SqlClient.SqlBulkCopy> 가져갈 상당한 성능 이점을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-104">There are other ways to load data into a SQL Server table (INSERT statements, for example), but <xref:System.Data.SqlClient.SqlBulkCopy> offers a significant performance advantage over them.</span></span>  
  
 <span data-ttu-id="9bf64-105"><xref:System.Data.SqlClient.SqlBulkCopy> 클래스를 사용하면 SQL Server 테이블에만 데이터를 쓸 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-105">The <xref:System.Data.SqlClient.SqlBulkCopy> class can be used to write data only to SQL Server tables.</span></span> <span data-ttu-id="9bf64-106">그러나 데이터 원본 SQL server에 제한 되지 않습니다. 데이터를 로드할 수 있다면 모든 데이터 원본을 사용할 수 있습니다는 <xref:System.Data.DataTable> 인스턴스 또는 읽기는 <xref:System.Data.IDataReader> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="9bf64-106">However, the data source is not limited to SQL Server; any data source can be used, as long as the data can be loaded to a <xref:System.Data.DataTable> instance or read with a <xref:System.Data.IDataReader> instance.</span></span>  
  
 <span data-ttu-id="9bf64-107"><xref:System.Data.SqlClient.SqlBulkCopy> 대량 로드는 <xref:System.Data.DataTable> 형식의 열 <xref:System.Data.SqlTypes.SqlDateTime> SQL server 열 형식의 날짜/시간 형식 중 하나는 SQL Server 2008에 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-107"><xref:System.Data.SqlClient.SqlBulkCopy> will fail when bulk loading a <xref:System.Data.DataTable> column of type <xref:System.Data.SqlTypes.SqlDateTime> into a SQL Server column whose type is one of the date/time types added in SQL Server 2008.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9bf64-108">다음 콘솔 애플리케이션에서는 <xref:System.Data.SqlClient.SqlBulkCopy> 클래스를 사용하여 데이터를 로드하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-108">The following console application demonstrates how to load data using the <xref:System.Data.SqlClient.SqlBulkCopy> class.</span></span> <span data-ttu-id="9bf64-109">이 예제에서는 <xref:System.Data.SqlClient.SqlDataReader> 에서 데이터를 복사 하는 데 사용 되는 **Production.Product** SQL Server의 테이블 **AdventureWorks** 동일한 데이터베이스의 유사한 테이블에는 데이터베이스입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-109">In this example, a <xref:System.Data.SqlClient.SqlDataReader> is used to copy data from the **Production.Product** table in the SQL Server **AdventureWorks** database to a similar table in the same database.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9bf64-110">이 샘플에 설명 된 대로 작업 테이블을 만든 경우가 아니면 실행 되지 것입니다 [대량 복사 예제 설정](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-110">This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md).</span></span> <span data-ttu-id="9bf64-111">이 코드는 사용 하는 구문을 보여 주기 위해 제공 됩니다 **SqlBulkCopy** 만 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-111">This code is provided to demonstrate the syntax for using **SqlBulkCopy** only.</span></span> <span data-ttu-id="9bf64-112">쉽고 빠르게 TRANSACT-SQL을 사용 하는 원본 테이블과 대상 테이블에 동일한 SQL Server 인스턴스에 있는 경우 `INSERT … SELECT` 문은 데이터를 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-112">If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.</span></span>  
  
 [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b"><span data-ttu-id="9bf64-113">Performing Bulk Copy Operations</span><span class="sxs-lookup"><span data-stu-id="9bf64-113">Performing Bulk Copy Operations</span></span></related>
    <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md"><span data-ttu-id="9bf64-114">ADO.NET 개요</span><span class="sxs-lookup"><span data-stu-id="9bf64-114">ADO.NET Overview</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9bf64-115"><see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-115">Initializes a new instance of the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> class.</span></span></summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md"><span data-ttu-id="9bf64-116">ADO.NET 개요</span><span class="sxs-lookup"><span data-stu-id="9bf64-116">ADO.NET Overview</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As SqlConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::Data::SqlClient::SqlConnection ^ connection);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : System.Data.SqlClient.SqlConnection -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy connection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
      </Parameters>
      <Docs>
        <param name="connection"><span data-ttu-id="9bf64-117">대량 복사를 수행하는 데 사용될 이미 열려 있는 <see cref="T:System.Data.SqlClient.SqlConnection" /> 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-117">The already open <see cref="T:System.Data.SqlClient.SqlConnection" /> instance that will be used to perform the bulk copy operation.</span></span> <span data-ttu-id="9bf64-118">연결 문자열이 <see langword="Integrated Security = true" />를 사용하지 않는 경우 <see cref="T:System.Data.SqlClient.SqlCredential" />을 사용하여 사용자 ID와 암호를 연결 문자열에 텍스트로 지정하는 것보다 더 안전하게 사용자 ID와 암호를 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-118">If your connection string does not use <see langword="Integrated Security = true" />, you can use <see cref="T:System.Data.SqlClient.SqlCredential" /> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.</span></span></param>
        <summary><span data-ttu-id="9bf64-119"><see cref="T:System.Data.SqlClient.SqlConnection" />의 지정된 열린 인스턴스를 사용하여 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-119">Initializes a new instance of the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> class using the specified open instance of <see cref="T:System.Data.SqlClient.SqlConnection" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bf64-120">연결이 이미 열려 있으므로 때 합니다 <xref:System.Data.SqlClient.SqlBulkCopy> 인스턴스가 초기화 되었는지, 연결 후 열린 상태로 유지 됩니다는 <xref:System.Data.SqlClient.SqlBulkCopy> 인스턴스가 닫혀 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-120">Because the connection is already open when the <xref:System.Data.SqlClient.SqlBulkCopy> instance is initialized, the connection remains open after the <xref:System.Data.SqlClient.SqlBulkCopy> instance is closed.</span></span>  
  
 <span data-ttu-id="9bf64-121">경우는 `connection` 인수가 null는 <xref:System.ArgumentNullException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-121">If the `connection` argument is null, an <xref:System.ArgumentNullException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9bf64-122">다음 콘솔 애플리케이션 데이터 대량 로드는 이미 열려 있는 연결을 사용 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-122">The following console application demonstrates how to bulk load data using a connection that is already open.</span></span> <span data-ttu-id="9bf64-123">이 예제에서는 <xref:System.Data.SqlClient.SqlDataReader> 에서 데이터를 복사 하는 데 사용 되는 **Production.Product** SQL Server의 테이블 **AdventureWorks** 동일한 데이터베이스의 유사한 테이블에는 데이터베이스입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-123">In this example, a <xref:System.Data.SqlClient.SqlDataReader> is used to copy data from the **Production.Product** table in the SQL Server **AdventureWorks** database to a similar table in the same database.</span></span> <span data-ttu-id="9bf64-124">이 예제는 데모용으로만 제공됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-124">This example is for demonstration purposes only.</span></span> <span data-ttu-id="9bf64-125">사용 하지 않을 `SqlBulkCopy` 프로덕션 애플리케이션에서 동일한 데이터베이스에서 다른 한 테이블에서 데이터를 이동 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-125">You would not use `SqlBulkCopy` to move data from one table to another in the same database in a production application.</span></span> <span data-ttu-id="9bf64-126">원본 데이터를 SQL 서버에 있이 필요가 없습니다 읽을 수 있는 모든 데이터 원본을 사용할 수 있습니다는 <xref:System.Data.IDataReader> 하기 위해 로드 또는 <xref:System.Data.DataTable>합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-126">Note that the source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9bf64-127">이 샘플에 설명 된 대로 작업 테이블을 만든 경우가 아니면 실행 되지 것입니다 [대량 복사 예제 설정](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-127">This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md).</span></span> <span data-ttu-id="9bf64-128">이 코드는 사용 하는 구문을 보여 주기 위해 제공 됩니다 **SqlBulkCopy** 만 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-128">This code is provided to demonstrate the syntax for using **SqlBulkCopy** only.</span></span> <span data-ttu-id="9bf64-129">쉽고 빠르게 TRANSACT-SQL을 사용 하는 원본 테이블과 대상 테이블에 동일한 SQL Server 인스턴스에 있는 경우 `INSERT … SELECT` 문은 데이터를 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-129">If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.</span></span>  
  
 [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b"><span data-ttu-id="9bf64-130">Performing Bulk Copy Operations</span><span class="sxs-lookup"><span data-stu-id="9bf64-130">Performing Bulk Copy Operations</span></span></related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md"><span data-ttu-id="9bf64-131">ADO.NET 개요</span><span class="sxs-lookup"><span data-stu-id="9bf64-131">ADO.NET Overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::String ^ connectionString);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : string -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy connectionString" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString"><span data-ttu-id="9bf64-132"><see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 인스턴스에서 사용하기 위해 열리는 연결을 정의하는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-132">The string defining the connection that will be opened for use by the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> instance.</span></span> <span data-ttu-id="9bf64-133">연결 문자열이 <see langword="Integrated Security = true" />를 사용하지 않는 경우 <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> 또는 <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> 및 <see cref="T:System.Data.SqlClient.SqlCredential" />을 사용하여 사용자 ID와 암호를 연결 문자열에 텍스트로 지정하는 것보다 더 안전하게 사용자 ID와 암호를 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-133">If your connection string does not use <see langword="Integrated Security = true" />, you can use <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> or <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> and <see cref="T:System.Data.SqlClient.SqlCredential" /> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.</span></span></param>
        <summary><span data-ttu-id="9bf64-134">제공된 <paramref name="connectionString" />을 기반으로 <see cref="T:System.Data.SqlClient.SqlConnection" />의 새 인스턴스를 초기화하고 엽니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-134">Initializes and opens a new instance of <see cref="T:System.Data.SqlClient.SqlConnection" /> based on the supplied <paramref name="connectionString" />.</span></span> <span data-ttu-id="9bf64-135">이 생성자는 <see cref="T:System.Data.SqlClient.SqlConnection" />을 사용하여 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-135">The constructor uses the <see cref="T:System.Data.SqlClient.SqlConnection" /> to initialize a new instance of the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bf64-136">연결 끝의 대량 복사 작업을 자동으로 닫혀 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-136">The connection is automatically closed at the end of the bulk copy operation.</span></span>  
  
 <span data-ttu-id="9bf64-137">하는 경우 `connectionString` 가 null을 <xref:System.ArgumentNullException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-137">If `connectionString` is null, an <xref:System.ArgumentNullException> is thrown.</span></span> <span data-ttu-id="9bf64-138">하는 경우 `connectionString` 빈 문자열이 면는 <xref:System.ArgumentException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-138">If `connectionString` is an empty string, an <xref:System.ArgumentException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9bf64-139">다음 콘솔 애플리케이션에는 문자열로 지정 된 연결을 사용 하 여 데이터 대량 로드 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-139">The following console application demonstrates how to bulk load data by using a connection specified as a string.</span></span> <span data-ttu-id="9bf64-140">연결이 자동으로 닫힐 때는 <xref:System.Data.SqlClient.SqlBulkCopy> 인스턴스가 닫혀 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-140">The connection is automatically closed when the <xref:System.Data.SqlClient.SqlBulkCopy> instance is closed.</span></span>  
  
 <span data-ttu-id="9bf64-141">이 예제에서는 원본 데이터를 SQL Server 테이블에서 읽을 먼저를 <xref:System.Data.SqlClient.SqlDataReader> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="9bf64-141">In this example, the source data is first read from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance.</span></span> <span data-ttu-id="9bf64-142">원본 데이터를 SQL 서버에 있이 필요가 없습니다. 읽을 수 있는 모든 데이터 원본을 사용할 수 있습니다는 <xref:System.Data.IDataReader> 하기 위해 로드 또는 <xref:System.Data.DataTable>합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-142">The source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9bf64-143">이 샘플에 설명 된 대로 작업 테이블을 만든 경우가 아니면 실행 되지 것입니다 [대량 복사 예제 설정](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-143">This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md).</span></span> <span data-ttu-id="9bf64-144">이 코드는 사용 하는 구문을 보여 주기 위해 제공 됩니다 **SqlBulkCopy** 만 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-144">This code is provided to demonstrate the syntax for using **SqlBulkCopy** only.</span></span> <span data-ttu-id="9bf64-145">쉽고 빠르게 TRANSACT-SQL을 사용 하는 원본 테이블과 대상 테이블에 동일한 SQL Server 인스턴스에 있는 경우 `INSERT … SELECT` 문은 데이터를 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-145">If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.</span></span>  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b"><span data-ttu-id="9bf64-146">SQL Server에서 대량 복사 작업</span><span class="sxs-lookup"><span data-stu-id="9bf64-146">Bulk Copy Operations in SQL Server</span></span></related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md"><span data-ttu-id="9bf64-147">ADO.NET 개요</span><span class="sxs-lookup"><span data-stu-id="9bf64-147">ADO.NET Overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString, System.Data.SqlClient.SqlBulkCopyOptions copyOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, copyOptions As SqlBulkCopyOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::String ^ connectionString, System::Data::SqlClient::SqlBulkCopyOptions copyOptions);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : string * System.Data.SqlClient.SqlBulkCopyOptions -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy (connectionString, copyOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
      </Parameters>
      <Docs>
        <param name="connectionString"><span data-ttu-id="9bf64-148"><see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 인스턴스에서 사용하기 위해 열리는 연결을 정의하는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-148">The string defining the connection that will be opened for use by the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> instance.</span></span> <span data-ttu-id="9bf64-149">연결 문자열이 <see langword="Integrated Security = true" />를 사용하지 않는 경우 <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> 또는 <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> 및 <see cref="T:System.Data.SqlClient.SqlCredential" />을 사용하여 사용자 ID와 암호를 연결 문자열에 텍스트로 지정하는 것보다 더 안전하게 사용자 ID와 암호를 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-149">If your connection string does not use <see langword="Integrated Security = true" />, you can use <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> or <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> and <see cref="T:System.Data.SqlClient.SqlCredential" /> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.</span></span></param>
        <param name="copyOptions"><span data-ttu-id="9bf64-150">대상 테이블에 복사되는 데이터 소스 행을 결정하는 <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> 열거형의 값 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-150">A combination of values from the <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> enumeration that determines which data source rows are copied to the destination table.</span></span></param>
        <summary><span data-ttu-id="9bf64-151">제공된 <paramref name="connectionString" />을 기반으로 <see cref="T:System.Data.SqlClient.SqlConnection" />의 새 인스턴스를 초기화하고 엽니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-151">Initializes and opens a new instance of <see cref="T:System.Data.SqlClient.SqlConnection" /> based on the supplied <paramref name="connectionString" />.</span></span> <span data-ttu-id="9bf64-152">이 생성자는 해당 <see cref="T:System.Data.SqlClient.SqlConnection" />을 사용하여 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-152">The constructor uses that <see cref="T:System.Data.SqlClient.SqlConnection" /> to initialize a new instance of the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> class.</span></span> <span data-ttu-id="9bf64-153"><see cref="T:System.Data.SqlClient.SqlConnection" /> 인스턴스는 <paramref name="copyOptions" /> 매개 변수에 제공된 옵션에 따라 동작합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-153">The <see cref="T:System.Data.SqlClient.SqlConnection" /> instance behaves according to options supplied in the <paramref name="copyOptions" /> parameter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bf64-154">모든 대량 복사 옵션에 대 한 자세한 정보를 가져올 수 있습니다는 <xref:System.Data.SqlClient.SqlBulkCopyOptions> 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-154">You can obtain detailed information about all the bulk copy options in the <xref:System.Data.SqlClient.SqlBulkCopyOptions> topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9bf64-155">다음 콘솔 애플리케이션에는 문자열로 지정 된 연결을 사용 하 여 대량 로드를 수행 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-155">The following console application demonstrates how to perform a bulk load by using a connection specified as a string.</span></span> <span data-ttu-id="9bf64-156">옵션은 대상 테이블을 로드 하는 경우 원본 테이블의 id 열에 값을 사용 하도록 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-156">An option is set to use the value in the identity column of the source table when you load the destination table.</span></span> <span data-ttu-id="9bf64-157">이 예제에서는 원본 데이터를 SQL Server 테이블에서 읽을 먼저를 <xref:System.Data.SqlClient.SqlDataReader> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="9bf64-157">In this example, the source data is first read from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance.</span></span> <span data-ttu-id="9bf64-158">원본 테이블 및 대상 테이블에는 각 Id 열을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-158">The source table and destination table each include an Identity column.</span></span> <span data-ttu-id="9bf64-159">기본적으로 새 값을 **Identity** 추가 된 각 행에 대 한 대상 테이블의 열이 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-159">By default, a new value for the **Identity** column is generated in the destination table for each row added.</span></span> <span data-ttu-id="9bf64-160">이 예제에서는 옵션을 사용 하는 대량 로드 프로세스를 강제로 수행 하는 연결이 열릴 때 설정 된 **Identity** 대신 원본 테이블의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-160">In this example, an option is set when the connection is opened that forces the bulk load process to use the **Identity** values from the source table instead.</span></span> <span data-ttu-id="9bf64-161">옵션에 따라 대량 로드 작업이 작동 하는 방식을 확인 합니다 **dbo입니다. BulkCopyDemoMatchingColumns** 빈 테이블입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-161">To see how the option changes the way the bulk load works, run the sample with the **dbo.BulkCopyDemoMatchingColumns** table empty.</span></span> <span data-ttu-id="9bf64-162">모든 행이 소스에서 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-162">All rows load from the source.</span></span> <span data-ttu-id="9bf64-163">테이블을 지우지 않고 샘플을 다시 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-163">Then run the sample again without emptying the table.</span></span> <span data-ttu-id="9bf64-164">예외가 발생 하 고 코드는 primary key 제약 조건 위반으로 인해 행이 추가 되지 있는지 여부를 알리는 콘솔에 메시지를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-164">An exception is thrown and the code writes a message to the console notifying you that rows weren't added because of primary key constraint violations.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9bf64-165">이 샘플에 설명 된 대로 작업 테이블을 만든 경우가 아니면 실행 되지 것입니다 [대량 복사 예제 설정](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-165">This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md).</span></span> <span data-ttu-id="9bf64-166">이 코드는 사용 하는 구문을 보여 주기 위해 제공 됩니다 **SqlBulkCopy** 만 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-166">This code is provided to demonstrate the syntax for using **SqlBulkCopy** only.</span></span> <span data-ttu-id="9bf64-167">쉽고 빠르게 TRANSACT-SQL을 사용 하는 원본 테이블과 대상 테이블에 동일한 SQL Server 인스턴스에 있는 경우 `INSERT … SELECT` 문은 데이터를 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-167">If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.</span></span>  
  
 [!code-csharp[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b"><span data-ttu-id="9bf64-168">Performing Bulk Copy Operations</span><span class="sxs-lookup"><span data-stu-id="9bf64-168">Performing Bulk Copy Operations</span></span></related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md"><span data-ttu-id="9bf64-169">ADO.NET 개요</span><span class="sxs-lookup"><span data-stu-id="9bf64-169">ADO.NET Overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlBulkCopyOptions copyOptions, System.Data.SqlClient.SqlTransaction externalTransaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions, class System.Data.SqlClient.SqlTransaction externalTransaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As SqlConnection, copyOptions As SqlBulkCopyOptions, externalTransaction As SqlTransaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::Data::SqlClient::SqlConnection ^ connection, System::Data::SqlClient::SqlBulkCopyOptions copyOptions, System::Data::SqlClient::SqlTransaction ^ externalTransaction);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : System.Data.SqlClient.SqlConnection * System.Data.SqlClient.SqlBulkCopyOptions * System.Data.SqlClient.SqlTransaction -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy (connection, copyOptions, externalTransaction)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
        <Parameter Name="externalTransaction" Type="System.Data.SqlClient.SqlTransaction" />
      </Parameters>
      <Docs>
        <param name="connection"><span data-ttu-id="9bf64-170">대량 복사를 수행하는 데 사용될 이미 열려 있는 <see cref="T:System.Data.SqlClient.SqlConnection" /> 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-170">The already open <see cref="T:System.Data.SqlClient.SqlConnection" /> instance that will be used to perform the bulk copy.</span></span> <span data-ttu-id="9bf64-171">연결 문자열이 <see langword="Integrated Security = true" />를 사용하지 않는 경우 <see cref="T:System.Data.SqlClient.SqlCredential" />을 사용하여 사용자 ID와 암호를 연결 문자열에 텍스트로 지정하는 것보다 더 안전하게 사용자 ID와 암호를 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-171">If your connection string does not use <see langword="Integrated Security = true" />, you can use <see cref="T:System.Data.SqlClient.SqlCredential" /> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.</span></span></param>
        <param name="copyOptions"><span data-ttu-id="9bf64-172">대상 테이블에 복사되는 데이터 소스 행을 결정하는 <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> 열거형의 값 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-172">A combination of values from the <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> enumeration that determines which data source rows are copied to the destination table.</span></span></param>
        <param name="externalTransaction"><span data-ttu-id="9bf64-173">대량 복사가 발생할 기존 <see cref="T:System.Data.SqlClient.SqlTransaction" /> 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-173">An existing <see cref="T:System.Data.SqlClient.SqlTransaction" /> instance under which the bulk copy will occur.</span></span></param>
        <summary><span data-ttu-id="9bf64-174">제공된 기존에 열려 있는 <see cref="T:System.Data.SqlClient.SqlConnection" />의 인스턴스를 사용하여 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-174">Initializes a new instance of the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> class using the supplied existing open instance of <see cref="T:System.Data.SqlClient.SqlConnection" />.</span></span> <span data-ttu-id="9bf64-175"><see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 인스턴스는 <paramref name="copyOptions" /> 매개 변수에 제공된 옵션에 따라 동작합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-175">The <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> instance behaves according to options supplied in the <paramref name="copyOptions" /> parameter.</span></span> <span data-ttu-id="9bf64-176">null이 아닌 <see cref="T:System.Data.SqlClient.SqlTransaction" />이 제공된 경우 복사 작업이 해당 트랜잭션 내에서 수행됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-176">If a non-null <see cref="T:System.Data.SqlClient.SqlTransaction" /> is supplied, the copy operations will be performed within that transaction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bf64-177">옵션을 포함 하는 경우 `UseInternalTransaction` 하며 `externalTransaction` 인수가 null을 **InvalidArgumentException** throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-177">If options include `UseInternalTransaction` and the `externalTransaction` argument is not null, an **InvalidArgumentException** is thrown.</span></span>  
  
 <span data-ttu-id="9bf64-178">예를 사용 하는 방법을 보여 주는 `SqlBulkCopy` 트랜잭션에서 참조 [트랜잭션 및 대량 복사 작업](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-178">For examples demonstrating how to use `SqlBulkCopy` in a transaction, see [Transaction and Bulk Copy Operations](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b"><span data-ttu-id="9bf64-179">Performing Bulk Copy Operations</span><span class="sxs-lookup"><span data-stu-id="9bf64-179">Performing Bulk Copy Operations</span></span></related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md"><span data-ttu-id="9bf64-180">ADO.NET 개요</span><span class="sxs-lookup"><span data-stu-id="9bf64-180">ADO.NET Overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BatchSize">
      <MemberSignature Language="C#" Value="public int BatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Property BatchSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BatchSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BatchSize : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.BatchSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9bf64-181">각 일괄 처리의 행 수입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-181">Number of rows in each batch.</span></span> <span data-ttu-id="9bf64-182">각 일괄 처리의 끝에서 일괄 처리의 행이 서버로 전송됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-182">At the end of each batch, the rows in the batch are sent to the server.</span></span></summary>
        <value><span data-ttu-id="9bf64-183"><see cref="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" /> 속성의 정수 값, 또는 값이 설정되지 않은 경우 0입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-183">The integer value of the <see cref="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" /> property, or zero if no value has been set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bf64-184">일괄 처리는 전체 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> 행이 처리 된 없거나 대상 데이터 원본에 보낼 행이 더 이상 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-184">A batch is complete when <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> rows have been processed or there are no more rows to send to the destination data source.</span></span>  
  
 <span data-ttu-id="9bf64-185">0 (기본값) 각 나타냅니다 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 작업이 단일 일괄 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-185">Zero (the default) indicates that each <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operation is a single batch.</span></span>  
  
 <span data-ttu-id="9bf64-186">경우는 <xref:System.Data.SqlClient.SqlBulkCopy> 인스턴스 없이 선언 된 합니다 <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> 옵션 행은 서버에 전송할 실제로 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> 행 시간만 없는 트랜잭션 관련 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-186">If the <xref:System.Data.SqlClient.SqlBulkCopy> instance has been declared without the <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> option in effect, rows are sent to the server <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> rows at a time, but no transaction-related action is taken.</span></span> <span data-ttu-id="9bf64-187">경우 <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> 가 적용 된 경우 행의 각 일괄 처리는 별도 트랜잭션으로 삽입 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-187">If <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> is in effect, each batch of rows is inserted as a separate transaction.</span></span>  
  
 <span data-ttu-id="9bf64-188"><xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> 언제 든 지 속성을 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-188">The <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> property can be set at any time.</span></span> <span data-ttu-id="9bf64-189">대량 복사 하는 이미 진행 중이면 현재 일괄 처리가 이전 일괄 처리 크기에 따라 크기가 조정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-189">If a bulk copy is already in progress, the current batch is sized according to the previous batch size.</span></span> <span data-ttu-id="9bf64-190">새 크기를 사용 하는 후속 배치 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-190">Subsequent batches use the new size.</span></span> <span data-ttu-id="9bf64-191">경우는 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> 은 처음에 0 및 변경 하는 동안는 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 작업이 이미 진행 중에서, 작업을 단일 일괄 처리로 데이터를 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-191">If the <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> is initially zero and changed while a <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operation is already in progress, that operation loads the data as a single batch.</span></span> <span data-ttu-id="9bf64-192">모든 후속 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 동일한 operations <xref:System.Data.SqlClient.SqlBulkCopy> 인스턴스를 사용 하 여 새 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-192">Any subsequent <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operations on the same <xref:System.Data.SqlClient.SqlBulkCopy> instance use the new <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9bf64-193">다음 콘솔 애플리케이션에는 대량 50 개 행 일괄 처리로 데이터를 로드 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-193">The following console application demonstrates how to bulk load data in batches of 50 rows.</span></span> <span data-ttu-id="9bf64-194">보여 주는 예제는 어떻게 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> 트랜잭션 사용 하 여 참조 [트랜잭션 및 대량 복사 작업](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-194">For an example illustrating how <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> works with a transaction, see [Transaction and Bulk Copy Operations](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md).</span></span>  
  
 <span data-ttu-id="9bf64-195">이 예제에서는 원본 데이터를 SQL Server 테이블에서 읽을 먼저를 <xref:System.Data.SqlClient.SqlDataReader> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="9bf64-195">In this example, the source data is first read from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance.</span></span> <span data-ttu-id="9bf64-196">원본 데이터를 SQL 서버에 있이 필요가 없습니다. 읽을 수 있는 모든 데이터 원본을 사용할 수 있습니다는 <xref:System.Data.IDataReader> 하기 위해 로드 또는 <xref:System.Data.DataTable>합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-196">The source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9bf64-197">이 샘플에 설명 된 대로 작업 테이블을 만든 경우가 아니면 실행 되지 것입니다 [대량 복사 예제 설정](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-197">This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md).</span></span> <span data-ttu-id="9bf64-198">이 코드는 사용 하는 구문을 보여 주기 위해 제공 됩니다 **SqlBulkCopy** 만 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-198">This code is provided to demonstrate the syntax for using **SqlBulkCopy** only.</span></span> <span data-ttu-id="9bf64-199">쉽고 빠르게 TRANSACT-SQL을 사용 하는 원본 테이블과 대상 테이블에 동일한 SQL Server 인스턴스에 있는 경우 `INSERT … SELECT` 문은 데이터를 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-199">If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.</span></span>  
  
 [!code-csharp[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b"><span data-ttu-id="9bf64-200">SQL Server에서 대량 복사 작업</span><span class="sxs-lookup"><span data-stu-id="9bf64-200">Bulk Copy Operations in SQL Server</span></span></related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md"><span data-ttu-id="9bf64-201">ADO.NET 개요</span><span class="sxs-lookup"><span data-stu-id="9bf64-201">ADO.NET Overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BulkCopyTimeout">
      <MemberSignature Language="C#" Value="public int BulkCopyTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BulkCopyTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property BulkCopyTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BulkCopyTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BulkCopyTimeout : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9bf64-202">제한 시간이 초과되기 전에 작업이 완료되기 위한 시간(초)입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-202">Number of seconds for the operation to complete before it times out.</span></span></summary>
        <value><span data-ttu-id="9bf64-203"><see cref="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" /> 속성의 정수 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-203">The integer value of the <see cref="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" /> property.</span></span> <span data-ttu-id="9bf64-204">기본값은 30초입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-204">The default is 30 seconds.</span></span> <span data-ttu-id="9bf64-205">0값은 제한이 없음을 나타냅니다. 대량 복사는 무기한 대기합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-205">A value of 0 indicates no limit; the bulk copy will wait indefinitely.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bf64-206">작업 시간이 초과 경우 트랜잭션이 커밋되지 않습니다 및 복사 되는 모든 행이 대상 테이블에서 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-206">If the operation does time out, the transaction is not committed and all copied rows are removed from the destination table.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9bf64-207">다음 콘솔 애플리케이션에는 60 초 제한 시간을 수정 하는 방법을 보여 줍니다. 대량 데이터를 로드 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="9bf64-207">The following console application demonstrates how to modify the time-out to 60 seconds when bulk loading data.</span></span>  
  
 <span data-ttu-id="9bf64-208">이 예제에서는 원본 데이터를 SQL Server 테이블에서 읽을 먼저를 <xref:System.Data.SqlClient.SqlDataReader> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="9bf64-208">In this example, the source data is first read from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance.</span></span> <span data-ttu-id="9bf64-209">원본 데이터를 SQL 서버에 있이 필요가 없습니다. 읽을 수 있는 모든 데이터 원본을 사용할 수 있습니다는 <xref:System.Data.IDataReader> 하기 위해 로드 또는 <xref:System.Data.DataTable>합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-209">The source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9bf64-210">이 샘플에 설명 된 대로 작업 테이블을 만든 경우가 아니면 실행 되지 것입니다 [대량 복사 예제 설정](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-210">This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md).</span></span> <span data-ttu-id="9bf64-211">이 코드는 사용 하는 구문을 보여 주기 위해 제공 됩니다 **SqlBulkCopy** 만 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-211">This code is provided to demonstrate the syntax for using **SqlBulkCopy** only.</span></span> <span data-ttu-id="9bf64-212">쉽고 빠르게 사용 하는 원본 테이블과 대상 테이블에 동일한 SQL Server 인스턴스에 있는 경우는 [!INCLUDE[tsql](~/includes/tsql-md.md)] `INSERT … SELECT` 문은 데이터를 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-212">If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a [!INCLUDE[tsql](~/includes/tsql-md.md)]`INSERT … SELECT` statement to copy the data.</span></span>  
  
 [!code-csharp[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b"><span data-ttu-id="9bf64-213">Performing Bulk Copy Operations</span><span class="sxs-lookup"><span data-stu-id="9bf64-213">Performing Bulk Copy Operations</span></span></related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md"><span data-ttu-id="9bf64-214">ADO.NET 개요</span><span class="sxs-lookup"><span data-stu-id="9bf64-214">ADO.NET Overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="sqlBulkCopy.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9bf64-215"><see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 인스턴스를 닫습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-215">Closes the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bf64-216">호출한 후는 <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> 에 <xref:System.Data.SqlClient.SqlBulkCopy> 개체를 다른 작업이 성공 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-216">After you call a <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> on the <xref:System.Data.SqlClient.SqlBulkCopy> object, no other operation will succeed.</span></span> <span data-ttu-id="9bf64-217">에 대 한 호출을 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 메서드는 throw는 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-217">Calls to the <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> method will throw an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="9bf64-218">호출 합니다 <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> 메서드에서 <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> 이벤트는 <xref:System.InvalidOperationException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-218">Calling the <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> method from the <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> event causes an <xref:System.InvalidOperationException> to be thrown.</span></span>  
  
 <span data-ttu-id="9bf64-219">열리는 유의 <xref:System.Data.SqlClient.SqlBulkCopy> 인스턴스는 끝에 암시적으로 닫혀는 `using` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-219">Note that open <xref:System.Data.SqlClient.SqlBulkCopy> instances are closed implicitly at the end of a `using` block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9bf64-220">다음 예제에서는 동일한 <xref:System.Data.SqlClient.SqlBulkCopy> 인스턴스를 두 개의 대상 테이블에 판매 주문 및 관련된 세부 정보를 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-220">The following example uses the same <xref:System.Data.SqlClient.SqlBulkCopy> instance to add sales orders and their associated details to two destination tables.</span></span> <span data-ttu-id="9bf64-221">때문에 합니다 **AdventureWorks** 판매 주문 테이블은 큰 샘플만 주문서 읽고 특정 계정 번호를 하 고 해당 주문 및 세부 정보 대상 테이블에 대량 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-221">Because the **AdventureWorks** sales order tables are large, the sample reads only orders placed by a certain account number and bulk copies those orders and details to the destination tables.</span></span> <span data-ttu-id="9bf64-222"><xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> 대량 복사 작업이 모두 완료 된 후에 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-222">The <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> method is used only after both bulk copy operations are complete.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9bf64-223">이 샘플에 설명 된 대로 작업 테이블을 만든 경우가 아니면 실행 되지 것입니다 [대량 복사 예제 설정](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-223">This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md).</span></span> <span data-ttu-id="9bf64-224">이 코드는 사용 하는 구문을 보여 주기 위해 제공 됩니다 **SqlBulkCopy** 만 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-224">This code is provided to demonstrate the syntax for using **SqlBulkCopy** only.</span></span> <span data-ttu-id="9bf64-225">쉽고 빠르게 TRANSACT-SQL을 사용 하는 원본 테이블과 대상 테이블에 동일한 SQL Server 인스턴스에 있는 경우 `INSERT … SELECT` 문은 데이터를 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-225">If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.</span></span>  
  
 [!code-csharp[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b"><span data-ttu-id="9bf64-226">Performing Bulk Copy Operations</span><span class="sxs-lookup"><span data-stu-id="9bf64-226">Performing Bulk Copy Operations</span></span></related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md"><span data-ttu-id="9bf64-227">ADO.NET 개요</span><span class="sxs-lookup"><span data-stu-id="9bf64-227">ADO.NET Overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ColumnMappings">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.ColumnMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ColumnMappings As SqlBulkCopyColumnMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlBulkCopyColumnMappingCollection ^ ColumnMappings { System::Data::SqlClient::SqlBulkCopyColumnMappingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ColumnMappings : System.Data.SqlClient.SqlBulkCopyColumnMappingCollection" Usage="System.Data.SqlClient.SqlBulkCopy.ColumnMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlBulkCopyColumnMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9bf64-228"><see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />은 항목의 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-228">Returns a collection of <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> items.</span></span> <span data-ttu-id="9bf64-229">열 매핑은 데이터 원본의 열과 대상의 열 간 관계를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-229">Column mappings define the relationships between columns in the data source and columns in the destination.</span></span></summary>
        <value><span data-ttu-id="9bf64-230">열 매핑의 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-230">A collection of column mappings.</span></span> <span data-ttu-id="9bf64-231">기본적으로 빈 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-231">By default, it is an empty collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bf64-232">데이터 원본 및 대상 테이블 열에 동일한 수 있고 데이터 원본 내에서 각 원본 열의 서 수 위치에 해당 대상 열의 서 수 위치와 일치 하는 경우는 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> 컬렉션이 필요 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-232">If the data source and the destination table have the same number of columns, and the ordinal position of each source column within the data source matches the ordinal position of the corresponding destination column, the <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> collection is unnecessary.</span></span> <span data-ttu-id="9bf64-233">그러나 열 수가 다를 경우 서 수 위치를 일치 하지 않습니다. 사용 해야 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> 올바른 열으로 데이터 복사 되도록 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-233">However, if the column counts differ, or the ordinal positions are not consistent, you must use <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> to make sure that data is copied into the correct columns.</span></span>  
  
 <span data-ttu-id="9bf64-234">대량 복사 작업을 실행 하는 동안이 컬렉션에 액세스할 수 있지만 변경할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-234">During the execution of a bulk copy operation, this collection can be accessed, but it cannot be changed.</span></span> <span data-ttu-id="9bf64-235">변경 하려고 시킵니다는 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-235">Any attempt to change it will throw an <xref:System.InvalidOperationException>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b"><span data-ttu-id="9bf64-236">Performing Bulk Copy Operations</span><span class="sxs-lookup"><span data-stu-id="9bf64-236">Performing Bulk Copy Operations</span></span></related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md"><span data-ttu-id="9bf64-237">ADO.NET 개요</span><span class="sxs-lookup"><span data-stu-id="9bf64-237">ADO.NET Overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DestinationTableName">
      <MemberSignature Language="C#" Value="public string DestinationTableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DestinationTableName" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
      <MemberSignature Language="VB.NET" Value="Public Property DestinationTableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DestinationTableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DestinationTableName : string with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9bf64-238">서버에 있는 대상 테이블의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-238">Name of the destination table on the server.</span></span></summary>
        <value><span data-ttu-id="9bf64-239"><see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 속성의 문자열 값이거나, 제공된 값이 없으면 null입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-239">The string value of the <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> property, or null if none as been supplied.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bf64-240">하는 경우 <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> 설정 되지 않은 경우 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 호출 되는 <xref:System.ArgumentNullException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-240">If <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> has not been set when <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> is called, an <xref:System.ArgumentNullException> is thrown.</span></span>  
  
 <span data-ttu-id="9bf64-241">하는 경우 <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> 수정 되는 동안는 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 작업이 실행 되 고, 변경 작업을 현재 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-241">If <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> is modified while a <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operation is running, the change does not affect the current operation.</span></span> <span data-ttu-id="9bf64-242">새 <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> 값 다음에 사용 되는 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-242">The new <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> value is used the next time a <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> method is called.</span></span>  
  
 <span data-ttu-id="9bf64-243"><xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> 세 부분으로 이루어진 이름입니다 (`<database>.<owningschema>.<name>`).</span><span class="sxs-lookup"><span data-stu-id="9bf64-243"><xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> is a three-part name (`<database>.<owningschema>.<name>`).</span></span> <span data-ttu-id="9bf64-244">선택 하면 해당 데이터베이스 및 소유 스키마를 사용 하 여 테이블 이름을 한정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-244">You can qualify the table name with its database and owning schema if you choose.</span></span> <span data-ttu-id="9bf64-245">그러나 테이블 이름에 밑줄 ("_") 또는 기타 특수 문자를 사용 하는 경우과 같이 괄호를 사용 하 여 이름을 이스케이프 해야 합니다 (`[<database>.<owningschema>.<name_01>]`).</span><span class="sxs-lookup"><span data-stu-id="9bf64-245">However, if the table name uses an underscore ("_") or any other special characters, you must escape the name using surrounding brackets as in (`[<database>.<owningschema>.<name_01>]`).</span></span> <span data-ttu-id="9bf64-246">자세한 내용은 [Database Identifiers](/sql/relational-databases/databases/database-identifiers)을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="9bf64-246">For more information, see [Database Identifiers](/sql/relational-databases/databases/database-identifiers).</span></span>  
  
 <span data-ttu-id="9bf64-247">같은 값을 사용 하 여 임시 테이블에 대량 복사 데이터를 수 있습니다 `tempdb..#table` 나 `tempdb.<owner>.#table` 에 대 한는 <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-247">You can bulk-copy data to a temporary table by using a value such as `tempdb..#table` or `tempdb.<owner>.#table` for the <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9bf64-248">다음 콘솔 애플리케이션 데이터 대량 로드는 이미 열려 있는 연결을 사용 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-248">The following console application demonstrates how to bulk load data using a connection that is already open.</span></span> <span data-ttu-id="9bf64-249">대상 테이블은 테이블에는 **AdventureWorks** 데이터베이스입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-249">The destination table is a table in the **AdventureWorks** database.</span></span>  
  
 <span data-ttu-id="9bf64-250">이 예제에서는 연결을 처음 사용할 SQL Server 테이블에서 데이터를 읽을 수는 <xref:System.Data.SqlClient.SqlDataReader> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="9bf64-250">In this example, the connection is first used to read data from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance.</span></span> <span data-ttu-id="9bf64-251">원본 데이터를 SQL 서버에 있이 필요가 없습니다. 읽을 수 있는 모든 데이터 원본을 사용할 수 있습니다는 <xref:System.Data.IDataReader> 하기 위해 로드 또는 <xref:System.Data.DataTable>합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-251">The source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9bf64-252">이 샘플에 설명 된 대로 작업 테이블을 만든 경우가 아니면 실행 되지 것입니다 [대량 복사 예제 설정](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-252">This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md).</span></span> <span data-ttu-id="9bf64-253">이 코드는 사용 하는 구문을 보여 주기 위해 제공 됩니다 **SqlBulkCopy** 만 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-253">This code is provided to demonstrate the syntax for using **SqlBulkCopy** only.</span></span> <span data-ttu-id="9bf64-254">쉽고 빠르게 TRANSACT-SQL을 사용 하는 원본 테이블과 대상 테이블에 동일한 SQL Server 인스턴스에 있는 경우 `INSERT … SELECT` 문은 데이터를 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-254">If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.</span></span>  
  
 [!code-csharp[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b"><span data-ttu-id="9bf64-255">Performing Bulk Copy Operations</span><span class="sxs-lookup"><span data-stu-id="9bf64-255">Performing Bulk Copy Operations</span></span></related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md"><span data-ttu-id="9bf64-256">ADO.NET 개요</span><span class="sxs-lookup"><span data-stu-id="9bf64-256">ADO.NET Overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EnableStreaming">
      <MemberSignature Language="C#" Value="public bool EnableStreaming { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableStreaming" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.EnableStreaming" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableStreaming As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableStreaming { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableStreaming : bool with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.EnableStreaming" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9bf64-257"><see cref="T:System.Data.IDataReader" /> 개체의 데이터를 스트리밍할 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체를 사용하거나 사용하지 않도록 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-257">Enables or disables a <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> object to stream data from an <see cref="T:System.Data.IDataReader" /> object</span></span></summary>
        <value><span data-ttu-id="9bf64-258"><see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체가 <see cref="T:System.Data.IDataReader" /> 개체에서 데이터를 스트리밍할 수 있으면 <see langword="true" />이고, 그러지 않으면 false입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-258"><see langword="true" /> if a <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> object can stream data from an <see cref="T:System.Data.IDataReader" /> object; otherwise, false.</span></span> <span data-ttu-id="9bf64-259">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-259">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bf64-260">때 <xref:System.Data.SqlClient.SqlBulkCopy.EnableStreaming%2A> 는 `true`, <xref:System.Data.SqlClient.SqlBulkCopy> 에서 읽습니다는 <xref:System.Data.IDataReader> 개체를 사용 하 여 <xref:System.Data.CommandBehavior.SequentialAccess>를 사용 하 여 메모리 사용량을 최적화는 <xref:System.Data.IDataReader> 스트리밍 기능.</span><span class="sxs-lookup"><span data-stu-id="9bf64-260">When <xref:System.Data.SqlClient.SqlBulkCopy.EnableStreaming%2A> is `true`, <xref:System.Data.SqlClient.SqlBulkCopy> reads from an <xref:System.Data.IDataReader> object using <xref:System.Data.CommandBehavior.SequentialAccess>, optimizing memory usage by using the <xref:System.Data.IDataReader> streaming capabilities.</span></span> <span data-ttu-id="9bf64-261">False로 설정 된 경우에 <xref:System.Data.SqlClient.SqlBulkCopy> 클래스에서 반환 된 모든 데이터를 로드 합니다 <xref:System.Data.IDataReader> SQL Server 또는 SQL Azure 보내기 전에 메모리에 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-261">When it's set to false, the <xref:System.Data.SqlClient.SqlBulkCopy> class loads all the data returned by the <xref:System.Data.IDataReader> object into memory before sending it to SQL Server or SQL Azure.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyAfter">
      <MemberSignature Language="C#" Value="public int NotifyAfter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NotifyAfter" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyAfter As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NotifyAfter { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyAfter : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9bf64-262">알림 이벤트를 생성하기 전에 처리할 행 수를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-262">Defines the number of rows to be processed before generating a notification event.</span></span></summary>
        <value><span data-ttu-id="9bf64-263"><see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" /> 속성의 정수 값이며, 설정 되지 않은 경우 0입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-263">The integer value of the <see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" /> property, or zero if the property has not been set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bf64-264">이 속성은 대량 복사 작업의 진행률을 보여 주는 사용자 인터페이스 구성 요소에 대 한 설계 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-264">This property is designed for user interface components that illustrate the progress of a bulk copy operation.</span></span> <span data-ttu-id="9bf64-265">알림 이벤트를 생성 하기 전에 처리할 행 수를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-265">It indicates the number of rows to be processed before generating a notification event.</span></span> <span data-ttu-id="9bf64-266"><xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> 대량 복사 작업을 진행 중인 동안에 언제 든 지 속성을 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-266">The <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> property can be set at any time, even while a bulk copy operation is underway.</span></span> <span data-ttu-id="9bf64-267">대량 복사 작업 중에 변경한 다음 알림 후에 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-267">Changes made during a bulk copy operation take effect after the next notification.</span></span> <span data-ttu-id="9bf64-268">동일한 인스턴스에 대 한 모든 후속 작업에 새 설정이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-268">The new setting applies to all subsequent operations on the same instance.</span></span>  
  
 <span data-ttu-id="9bf64-269">하는 경우 <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> 가 0 보다 작은 숫자로 설정, <xref:System.ArgumentOutOfRangeException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-269">If <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> is set to a number less than zero, an <xref:System.ArgumentOutOfRangeException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9bf64-270">다음 콘솔 애플리케이션 데이터 대량 로드는 이미 열려 있는 연결을 사용 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-270">The following console application demonstrates how to bulk load data using a connection that is already open.</span></span> <span data-ttu-id="9bf64-271"><xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> 속성이 모든 50 개의 행이 테이블에 복사 된 이벤트 처리기가 호출 되도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-271">The <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> property is set so that the event handler is called after every 50 rows copied to the table.</span></span>  
  
 <span data-ttu-id="9bf64-272">이 예제에서는 연결을 처음 사용할 SQL Server 테이블에서 데이터를 읽을 수는 <xref:System.Data.SqlClient.SqlDataReader> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="9bf64-272">In this example, the connection is first used to read data from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance.</span></span> <span data-ttu-id="9bf64-273">그런 다음 대량 데이터를 복사 하려면 두 번째 연결이 열려 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-273">Then a second connection is opened to bulk copy the data.</span></span> <span data-ttu-id="9bf64-274">원본 데이터를 SQL 서버에 있이 필요가 없습니다 읽을 수 있는 모든 데이터 원본을 사용할 수 있습니다는 <xref:System.Data.IDataReader> 하기 위해 로드 또는 <xref:System.Data.DataTable>합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-274">Note that the source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9bf64-275">이 샘플에 설명 된 대로 작업 테이블을 만든 경우가 아니면 실행 되지 것입니다 [대량 복사 예제 설정](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-275">This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md).</span></span> <span data-ttu-id="9bf64-276">이 코드는 사용 하는 구문을 보여 주기 위해 제공 됩니다 **SqlBulkCopy** 만 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-276">This code is provided to demonstrate the syntax for using **SqlBulkCopy** only.</span></span> <span data-ttu-id="9bf64-277">쉽고 빠르게 TRANSACT-SQL을 사용 하는 원본 테이블과 대상 테이블에 동일한 SQL Server 인스턴스에 있는 경우 `INSERT … SELECT` 문은 데이터를 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-277">If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.</span></span>  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b"><span data-ttu-id="9bf64-278">Performing Bulk Copy Operations</span><span class="sxs-lookup"><span data-stu-id="9bf64-278">Performing Bulk Copy Operations</span></span></related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md"><span data-ttu-id="9bf64-279">ADO.NET 개요</span><span class="sxs-lookup"><span data-stu-id="9bf64-279">ADO.NET Overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SqlRowsCopied">
      <MemberSignature Language="C#" Value="public event System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied" />
      <MemberSignature Language="DocId" Value="E:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SqlRowsCopied As SqlRowsCopiedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::SqlClient::SqlRowsCopiedEventHandler ^ SqlRowsCopied;" />
      <MemberSignature Language="F#" Value="member this.SqlRowsCopied : System.Data.SqlClient.SqlRowsCopiedEventHandler " Usage="member this.SqlRowsCopied : System.Data.SqlClient.SqlRowsCopiedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlRowsCopiedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9bf64-280"><see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" /> 속성으로 지정된 행 수가 처리될 때마다 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-280">Occurs every time that the number of rows specified by the <see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" /> property have been processed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bf64-281">설정을 <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> 고 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> 독립적입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-281">Note that the settings of <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> and <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> are independent.</span></span> <span data-ttu-id="9bf64-282">확인을 <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> 모든 행을 서버로 전송 되었거나 커밋는 이벤트를 의미 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-282">Receipt of a <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> event does not imply that any rows have been sent to the server or committed.</span></span>  
  
 <span data-ttu-id="9bf64-283">SqlBulkCopy.Close 호출할 수 없습니다 (<xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>) 또는 SqlConnection.Close (<xref:System.Data.SqlClient.SqlConnection.Close%2A>)이이 이벤트에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-283">You cannot call SqlBulkCopy.Close (<xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>) or SqlConnection.Close (<xref:System.Data.SqlClient.SqlConnection.Close%2A>) from this event.</span></span> <span data-ttu-id="9bf64-284">이렇게 하면를 <xref:System.InvalidOperationException> throw 되 고 <xref:System.Data.SqlClient.SqlBulkCopy> 개체 상태 변경 되지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-284">Doing this will cause an <xref:System.InvalidOperationException> being thrown, and the <xref:System.Data.SqlClient.SqlBulkCopy> object state will not change.</span></span> <span data-ttu-id="9bf64-285">사용자 이벤트의 작업을 취소 하려는 경우는 <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> 의 속성을 <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs> 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-285">If the user wants to cancel the operation from the event, the <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> property of the <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs> can be used.</span></span> <span data-ttu-id="9bf64-286">(참조 [트랜잭션 및 대량 복사 작업](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md) 사용 하는 예는 <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> 속성입니다.)</span><span class="sxs-lookup"><span data-stu-id="9bf64-286">(See [Transaction and Bulk Copy Operations](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md) for examples that use the <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> property.)</span></span>  
  
 <span data-ttu-id="9bf64-287">트랜잭션 작업과 같은 조치가 대량 복사 작업을 실행 하는 동안 연결에서 지원 되 고 하는 동안 사용 되는 동일한 연결이 사용 하지 않는 것이 좋습니다는 <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-287">No action, such as transaction activity, is supported in the connection during the execution of the bulk copy operation, and it is recommended that you not use the same connection used during the <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> event.</span></span> <span data-ttu-id="9bf64-288">그러나 다른 연결을 열 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-288">However, you can open a different connection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9bf64-289">다음 콘솔 애플리케이션 데이터 대량 로드는 이미 열려 있는 연결을 사용 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-289">The following console application demonstrates how to bulk load data using a connection that is already open.</span></span> <span data-ttu-id="9bf64-290"><xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> 속성이 모든 50 개의 행이 테이블에 복사 된 이벤트 처리기가 호출 되도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-290">The <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> property is set so that the event handler is called after every 50 rows copied to the table.</span></span>  
  
 <span data-ttu-id="9bf64-291">이 예제에서는 연결을 처음 사용할 SQL Server 테이블에서 데이터를 읽을 수는 <xref:System.Data.SqlClient.SqlDataReader> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="9bf64-291">In this example, the connection is first used to read data from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance.</span></span> <span data-ttu-id="9bf64-292">원본 데이터를 SQL 서버에 있이 필요가 없습니다 읽을 수 있는 모든 데이터 원본을 사용할 수 있습니다는 <xref:System.Data.IDataReader> 하기 위해 로드 또는 <xref:System.Data.DataTable>합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-292">Note that the source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9bf64-293">이 샘플에 설명 된 대로 작업 테이블을 만든 경우가 아니면 실행 되지 것입니다 [대량 복사 예제 설정](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-293">This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md).</span></span> <span data-ttu-id="9bf64-294">이 코드는 사용 하는 구문을 보여 주기 위해 제공 됩니다 **SqlBulkCopy** 만 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-294">This code is provided to demonstrate the syntax for using **SqlBulkCopy** only.</span></span> <span data-ttu-id="9bf64-295">쉽고 빠르게 TRANSACT-SQL을 사용 하는 원본 테이블과 대상 테이블에 동일한 SQL Server 인스턴스에 있는 경우 `INSERT … SELECT` 문은 데이터를 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-295">If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.</span></span>  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b"><span data-ttu-id="9bf64-296">Performing Bulk Copy Operations</span><span class="sxs-lookup"><span data-stu-id="9bf64-296">Performing Bulk Copy Operations</span></span></related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md"><span data-ttu-id="9bf64-297">ADO.NET 개요</span><span class="sxs-lookup"><span data-stu-id="9bf64-297">ADO.NET Overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9bf64-298"><see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-298">Releases all resources used by the current instance of the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bf64-299">`Dispose` 사용을 마치면 <xref:System.Data.SqlClient.SqlBulkCopy>를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-299">Call `Dispose` when you are finished using the <xref:System.Data.SqlClient.SqlBulkCopy>.</span></span> <span data-ttu-id="9bf64-300">`Dispose` 메서드를 사용하면 <xref:System.Data.SqlClient.SqlBulkCopy>를 사용할 수 없게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-300">The `Dispose` method leaves the <xref:System.Data.SqlClient.SqlBulkCopy> in an unusable state.</span></span> <span data-ttu-id="9bf64-301">호출한 후 `Dispose`에 대 한 모든 참조를 해제 해야 합니다 <xref:System.Data.SqlClient.SqlBulkCopy> 가비지 수집기에서 메모리를 회수할 수 있도록 하는 <xref:System.Data.SqlClient.SqlBulkCopy> 차지한 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-301">After calling `Dispose`, you must release all references to the <xref:System.Data.SqlClient.SqlBulkCopy> so the garbage collector can reclaim the memory that the <xref:System.Data.SqlClient.SqlBulkCopy> was occupying.</span></span>  
  
 <span data-ttu-id="9bf64-302">자세한 내용은 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 하 고 [Dispose 메서드 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-302">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9bf64-303">`Dispose`에 대한 마지막 참조를 해제하기 전에 반드시 <xref:System.Data.SqlClient.SqlBulkCopy>를 호출하십시오.</span><span class="sxs-lookup"><span data-stu-id="9bf64-303">Always call `Dispose` before you release your last reference to the <xref:System.Data.SqlClient.SqlBulkCopy>.</span></span> <span data-ttu-id="9bf64-304">이렇게 하지 않으면 가비지 수집기가 <xref:System.Data.SqlClient.SqlBulkCopy> 개체의 `Finalize` 메서드를 호출할 때까지 사용 중인 리소스가 해제되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-304">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Data.SqlClient.SqlBulkCopy> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md"><span data-ttu-id="9bf64-305">ADO.NET 개요</span><span class="sxs-lookup"><span data-stu-id="9bf64-305">ADO.NET Overview</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServer">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9bf64-306">데이터 소스의 모든 행을 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체의 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 속성에 의해 지정된 대상 테이블로 복사합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-306">Copies all rows from a data source to a destination table specified by the <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> property of the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bf64-307">여러 활성 결과 집합 (MARS) 사용 하지 않으면 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 사용 중인 연결을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-307">If multiple active result sets (MARS) is disabled, <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> makes the connection busy.</span></span> <span data-ttu-id="9bf64-308">MARS를 사용 하는 경우에 대 한 호출을 인터리브할 수 있습니다 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 동일한 연결에서 다른 명령을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-308">If MARS is enabled, you can interleave calls to <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> with other commands in the same connection.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b"><span data-ttu-id="9bf64-309">Performing Bulk Copy Operations</span><span class="sxs-lookup"><span data-stu-id="9bf64-309">Performing Bulk Copy Operations</span></span></related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md"><span data-ttu-id="9bf64-310">ADO.NET 개요</span><span class="sxs-lookup"><span data-stu-id="9bf64-310">ADO.NET Overview</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (reader As DbDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.Common.DbDataReader -&gt; unit" Usage="sqlBulkCopy.WriteToServer reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="9bf64-311">해당 행이 대상 테이블에 복사될 <see cref="T:System.Data.Common.DbDataReader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-311">A <see cref="T:System.Data.Common.DbDataReader" /> whose rows will be copied to the destination table.</span></span></param>
        <summary><span data-ttu-id="9bf64-312">제공된 <see cref="T:System.Data.Common.DbDataReader" /> 배열의 모든 행을 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체의 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 속성에 지정된 대상 테이블로 복사합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-312">Copies all rows from the supplied <see cref="T:System.Data.Common.DbDataReader" /> array to a destination table specified by the <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> property of the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (rows As DataRow())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataRow[] -&gt; unit" Usage="sqlBulkCopy.WriteToServer rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="rows"><span data-ttu-id="9bf64-313">대상 테이블로 복사될 <see cref="T:System.Data.DataRow" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-313">An array of <see cref="T:System.Data.DataRow" /> objects that will be copied to the destination table.</span></span></param>
        <summary><span data-ttu-id="9bf64-314">제공된 <see cref="T:System.Data.DataRow" /> 배열의 모든 행을 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체의 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 속성에 지정된 대상 테이블로 복사합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-314">Copies all rows from the supplied <see cref="T:System.Data.DataRow" /> array to a destination table specified by the <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> property of the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bf64-315">대량 복사 작업을 연관 된 대상으로 진행에서 되는 동안 <xref:System.Data.SqlClient.SqlConnection> , 사용 중인 서비스는 및 연결에 없는 다른 작업을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-315">While the bulk copy operation is in progress, the associated destination <xref:System.Data.SqlClient.SqlConnection> is busy serving it, and no other operations can be performed on the connection.</span></span>  
  
 <span data-ttu-id="9bf64-316"><xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> 컬렉션에서 매핑하는 <xref:System.Data.DataRow> 대상 데이터베이스 테이블 열입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-316">The <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> collection maps from the <xref:System.Data.DataRow> columns to the destination database table.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9bf64-317">다음 콘솔 애플리케이션 데이터 대량 로드에서 하는 방법에 설명 된 <xref:System.Data.DataRow> 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-317">The following console application demonstrates how to bulk load data from a <xref:System.Data.DataRow> array.</span></span> <span data-ttu-id="9bf64-318">대상 테이블은 테이블에는 **AdventureWorks** 데이터베이스입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-318">The destination table is a table in the **AdventureWorks** database.</span></span>  
  
 <span data-ttu-id="9bf64-319">이 예제는 <xref:System.Data.DataTable> 런타임 시 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-319">In this example, a <xref:System.Data.DataTable> is created at run time.</span></span> <span data-ttu-id="9bf64-320">단일 행을 선택 합니다 <xref:System.Data.DataTable> 대상 테이블로 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-320">A single row is selected from the <xref:System.Data.DataTable> to copy to the destination table.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9bf64-321">이 샘플에 설명 된 대로 작업 테이블을 만든 경우가 아니면 실행 되지 것입니다 [대량 복사 예제 설정](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-321">This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md).</span></span> <span data-ttu-id="9bf64-322">이 코드는 사용 하는 구문을 보여 주기 위해 제공 됩니다 **SqlBulkCopy** 만 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-322">This code is provided to demonstrate the syntax for using **SqlBulkCopy** only.</span></span> <span data-ttu-id="9bf64-323">쉽고 빠르게 TRANSACT-SQL을 사용 하는 원본 테이블과 대상 테이블에 동일한 SQL Server 인스턴스에 있는 경우 `INSERT … SELECT` 문은 데이터를 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-323">If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.</span></span>  
  
 [!code-csharp[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b"><span data-ttu-id="9bf64-324">Performing Bulk Copy Operations</span><span class="sxs-lookup"><span data-stu-id="9bf64-324">Performing Bulk Copy Operations</span></span></related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md"><span data-ttu-id="9bf64-325">ADO.NET 개요</span><span class="sxs-lookup"><span data-stu-id="9bf64-325">ADO.NET Overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (table As DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataTable -&gt; unit" Usage="sqlBulkCopy.WriteToServer table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="table"><span data-ttu-id="9bf64-326">해당 행이 대상 테이블에 복사될 <see cref="T:System.Data.DataTable" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-326">A <see cref="T:System.Data.DataTable" /> whose rows will be copied to the destination table.</span></span></param>
        <summary><span data-ttu-id="9bf64-327">제공된 <see cref="T:System.Data.DataTable" />의 모든 행을 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체의 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 속성에 지정된 대상 테이블로 복사합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-327">Copies all rows in the supplied <see cref="T:System.Data.DataTable" /> to a destination table specified by the <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> property of the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bf64-328">모든 행을 <xref:System.Data.DataTable> 제외 하 고 삭제 된 대상 테이블로 복사 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-328">All rows in the <xref:System.Data.DataTable> are copied to the destination table except those that have been deleted.</span></span>  
  
 <span data-ttu-id="9bf64-329">대량 복사 작업을 연관 된 대상으로 진행에서 되는 동안 <xref:System.Data.SqlClient.SqlConnection> , 사용 중인 서비스는 및 연결에 없는 다른 작업을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-329">While the bulk copy operation is in progress, the associated destination <xref:System.Data.SqlClient.SqlConnection> is busy serving it, and no other operations can be performed on the connection.</span></span>  
  
 <span data-ttu-id="9bf64-330"><xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> 컬렉션에서 매핑하는 <xref:System.Data.DataTable> 대상 데이터베이스 테이블 열입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-330">The <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> collection maps from the <xref:System.Data.DataTable> columns to the destination database table.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9bf64-331">다음 콘솔 애플리케이션 데이터 대량 로드에서 하는 방법에 설명 된 <xref:System.Data.DataTable>합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-331">The following Console application demonstrates how to bulk load data from a <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="9bf64-332">대상 테이블은 테이블에는 **AdventureWorks** 데이터베이스입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-332">The destination table is a table in the **AdventureWorks** database.</span></span>  
  
 <span data-ttu-id="9bf64-333">이 예제는 <xref:System.Data.DataTable> 런타임에 생성 되 고의 원본인는 `SqlBulkCopy` 작업.</span><span class="sxs-lookup"><span data-stu-id="9bf64-333">In this example, a <xref:System.Data.DataTable> is created at run time and is the source of the `SqlBulkCopy` operation.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9bf64-334">이 샘플에 설명 된 대로 작업 테이블을 만든 경우가 아니면 실행 되지 것입니다 [대량 복사 예제 설정](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-334">This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md).</span></span> <span data-ttu-id="9bf64-335">이 코드는 사용 하는 구문을 보여 주기 위해 제공 됩니다 **SqlBulkCopy** 만 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-335">This code is provided to demonstrate the syntax for using **SqlBulkCopy** only.</span></span> <span data-ttu-id="9bf64-336">쉽고 빠르게 TRANSACT-SQL을 사용 하는 원본 테이블과 대상 테이블에 동일한 SQL Server 인스턴스에 있는 경우 `INSERT … SELECT` 문은 데이터를 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-336">If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.</span></span>  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b"><span data-ttu-id="9bf64-337">Performing Bulk Copy Operations</span><span class="sxs-lookup"><span data-stu-id="9bf64-337">Performing Bulk Copy Operations</span></span></related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md"><span data-ttu-id="9bf64-338">ADO.NET 개요</span><span class="sxs-lookup"><span data-stu-id="9bf64-338">ADO.NET Overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (reader As IDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::IDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.IDataReader -&gt; unit" Usage="sqlBulkCopy.WriteToServer reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="9bf64-339">해당 행이 대상 테이블에 복사될 <see cref="T:System.Data.IDataReader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-339">A <see cref="T:System.Data.IDataReader" /> whose rows will be copied to the destination table.</span></span></param>
        <summary><span data-ttu-id="9bf64-340">제공된 <see cref="T:System.Data.IDataReader" />의 모든 행을 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체의 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 속성에 지정된 대상 테이블로 복사합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-340">Copies all rows in the supplied <see cref="T:System.Data.IDataReader" /> to a destination table specified by the <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> property of the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bf64-341">판독기에서 사용 가능한 다음 행에서 복사 작업이 시작 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-341">The copy operation starts at the next available row in the reader.</span></span> <span data-ttu-id="9bf64-342">대부분의 경우 판독기가 반환 하 여 <xref:System.Data.IDbCommand.ExecuteReader%2A> 이나 유사한 호출에서 사용 가능한 다음 행은 첫 번째 행.</span><span class="sxs-lookup"><span data-stu-id="9bf64-342">Most of the time, the reader was just returned by <xref:System.Data.IDbCommand.ExecuteReader%2A> or a similar call, so the next available row is the first row.</span></span> <span data-ttu-id="9bf64-343">여러 결과 처리 하려면 호출 <xref:System.Data.IDataReader.NextResult%2A> 호출에 데이터 판독기 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 다시 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-343">To process multiple results, call <xref:System.Data.IDataReader.NextResult%2A> on the data reader and call <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> again.</span></span>  
  
 <span data-ttu-id="9bf64-344">사용 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 판독기의 상태를 수정 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-344">Note that using <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> modifies the state of the reader.</span></span> <span data-ttu-id="9bf64-345">메서드를 호출 합니다 <xref:System.Data.IDataReader.Read%2A> false를 반환 하면 작업이 중단 되, 오류가 발생 될 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-345">The method will call <xref:System.Data.IDataReader.Read%2A> until it returns false, the operation is aborted, or an error occurs.</span></span> <span data-ttu-id="9bf64-346">데이터 판독기를 결과 집합의 끝 위치 하 게 다른 상태의 수를 의미이 경우는 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 작업이 완료 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-346">This means that the data reader will be in a different state, probably at the end of the result set, when the <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operation is complete.</span></span>  
  
 <span data-ttu-id="9bf64-347">대량 복사 작업을 연관 된 대상으로 진행에서 되는 동안 <xref:System.Data.SqlClient.SqlConnection> , 사용 중인 서비스는 및 연결에 없는 다른 작업을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-347">While the bulk copy operation is in progress, the associated destination <xref:System.Data.SqlClient.SqlConnection> is busy serving it, and no other operations can be performed on the connection.</span></span>  
  
 <span data-ttu-id="9bf64-348"><xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> 컬렉션 열을 매핑합니다 데이터에서 판독기 대상 데이터베이스 테이블에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-348">The <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> collection maps from the data reader columns to the destination database table.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9bf64-349">다음 콘솔 애플리케이션 데이터 대량 로드에서 하는 방법에 설명 된 <xref:System.Data.SqlClient.SqlDataReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-349">The following console application demonstrates how to bulk load data from a <xref:System.Data.SqlClient.SqlDataReader>.</span></span> <span data-ttu-id="9bf64-350">대상 테이블은 테이블에는 **AdventureWorks** 데이터베이스입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-350">The destination table is a table in the **AdventureWorks** database.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9bf64-351">이 샘플에 설명 된 대로 작업 테이블을 만든 경우가 아니면 실행 되지 것입니다 [대량 복사 예제 설정](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-351">This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md).</span></span> <span data-ttu-id="9bf64-352">이 코드는 사용 하는 구문을 보여 주기 위해 제공 됩니다 **SqlBulkCopy** 만 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-352">This code is provided to demonstrate the syntax for using **SqlBulkCopy** only.</span></span> <span data-ttu-id="9bf64-353">쉽고 빠르게 TRANSACT-SQL을 사용 하는 원본 테이블과 대상 테이블에 동일한 SQL Server 인스턴스에 있는 경우 `INSERT … SELECT` 문은 데이터를 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-353">If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.</span></span>  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b"><span data-ttu-id="9bf64-354">Performing Bulk Copy Operations</span><span class="sxs-lookup"><span data-stu-id="9bf64-354">Performing Bulk Copy Operations</span></span></related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md"><span data-ttu-id="9bf64-355">ADO.NET 개요</span><span class="sxs-lookup"><span data-stu-id="9bf64-355">ADO.NET Overview</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (table As DataTable, rowState As DataRowState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::DataTable ^ table, System::Data::DataRowState rowState);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataTable * System.Data.DataRowState -&gt; unit" Usage="sqlBulkCopy.WriteToServer (table, rowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="table"><span data-ttu-id="9bf64-356">해당 행이 대상 테이블에 복사될 <see cref="T:System.Data.DataTable" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-356">A <see cref="T:System.Data.DataTable" /> whose rows will be copied to the destination table.</span></span></param>
        <param name="rowState"><span data-ttu-id="9bf64-357"><see cref="T:System.Data.DataRowState" /> 열거형의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-357">A value from the <see cref="T:System.Data.DataRowState" /> enumeration.</span></span> <span data-ttu-id="9bf64-358">행 상태와 일치하는 행만 대상으로 복사됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-358">Only rows matching the row state are copied to the destination.</span></span></param>
        <summary><span data-ttu-id="9bf64-359">제공된 <see cref="T:System.Data.DataTable" />의 제공된 행 상태와 일치하는 행만 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체의 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 속성에 지정된 대상 테이블로 복사합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-359">Copies only rows that match the supplied row state in the supplied <see cref="T:System.Data.DataTable" /> to a destination table specified by the <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> property of the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bf64-360">행만 합니다 <xref:System.Data.DataTable> 에 지정 된 상태에는 `rowState` 인수 삭제 되지 않은 및 대상 테이블에 복사 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-360">Only rows in the <xref:System.Data.DataTable> that are in the states indicated in the `rowState` argument and have not been deleted are copied to the destination table.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9bf64-361">경우 <xref:System.Data.DataRowState.Deleted> 지정 된 모든 <xref:System.Data.DataRowState.Unchanged>, <xref:System.Data.DataRowState.Added>, 및 <xref:System.Data.DataRowState.Modified> 행은 서버에도 복사 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-361">If <xref:System.Data.DataRowState.Deleted> is specified, any <xref:System.Data.DataRowState.Unchanged>, <xref:System.Data.DataRowState.Added>, and <xref:System.Data.DataRowState.Modified> rows will also be copied to the server.</span></span> <span data-ttu-id="9bf64-362">예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-362">No exception will be raised.</span></span>  
  
 <span data-ttu-id="9bf64-363">대량 복사 작업을 연관 된 대상으로 진행에서 되는 동안 <xref:System.Data.SqlClient.SqlConnection> , 사용 중인 서비스는 및 연결에 없는 다른 작업을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-363">While the bulk copy operation is in progress, the associated destination <xref:System.Data.SqlClient.SqlConnection> is busy serving it, and no other operations can be performed on the connection.</span></span>  
  
 <span data-ttu-id="9bf64-364"><xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> 컬렉션에서 매핑하는 <xref:System.Data.DataTable> 대상 데이터베이스 테이블 열입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-364">The <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> collection maps from the <xref:System.Data.DataTable> columns to the destination database table.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9bf64-365">다음 콘솔 애플리케이션에는 대량으로 하는 방법을 보여 줍니다.의 행만 로드는 <xref:System.Data.DataTable> 와 일치 하는 지정된 된 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-365">The following Console application demonstrates how to bulk load only the rows in a <xref:System.Data.DataTable> that match a specified state.</span></span> <span data-ttu-id="9bf64-366">이 경우 변경 되지 않은 행만 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-366">In this case, only unchanged rows are added.</span></span> <span data-ttu-id="9bf64-367">대상 테이블은 테이블에는 **AdventureWorks** 데이터베이스입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-367">The destination table is a table in the **AdventureWorks** database.</span></span>  
  
 <span data-ttu-id="9bf64-368">이 예제에서는 <xref:System.Data.DataTable> 런타임 및 3에서 만들어진 행에 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-368">In this example, a <xref:System.Data.DataTable> is created at run time and three rows are added to it.</span></span> <span data-ttu-id="9bf64-369">전에 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 메서드 실행, 편집 하는 행 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-369">Before the <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> method is executed, one of the rows is edited.</span></span> <span data-ttu-id="9bf64-370">합니다 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 메서드를 호출을 `DataRowState.Unchanged` `rowState` 인수를 변경 되지 않은 두 개의 행만 대상에 대량 복사 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-370">The <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> method is called with a `DataRowState.Unchanged` `rowState` argument, so only the two unchanged rows are bulk copied to the destination.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9bf64-371">이 샘플에 설명 된 대로 작업 테이블을 만든 경우가 아니면 실행 되지 것입니다 [대량 복사 예제 설정](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-371">This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md).</span></span> <span data-ttu-id="9bf64-372">이 코드는 사용 하는 구문을 보여 주기 위해 제공 됩니다 **SqlBulkCopy** 만 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-372">This code is provided to demonstrate the syntax for using **SqlBulkCopy** only.</span></span> <span data-ttu-id="9bf64-373">쉽고 빠르게 TRANSACT-SQL을 사용 하는 원본 테이블과 대상 테이블에 동일한 SQL Server 인스턴스에 있는 경우 `INSERT … SELECT` 문은 데이터를 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-373">If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.</span></span>  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataRowState" />
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b"><span data-ttu-id="9bf64-374">Performing Bulk Copy Operations</span><span class="sxs-lookup"><span data-stu-id="9bf64-374">Performing Bulk Copy Operations</span></span></related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md"><span data-ttu-id="9bf64-375">ADO.NET 개요</span><span class="sxs-lookup"><span data-stu-id="9bf64-375">ADO.NET Overview</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServerAsync">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9bf64-376">데이터 소스의 모든 행을 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체의 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 속성에 지정된 대상 테이블로 복사하는 <see cref="Overload:System.Data.SqlClient.SqlBulkCopy.WriteToServer" />의 비동기 버전입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-376">An asynchronous version of <see cref="Overload:System.Data.SqlClient.SqlBulkCopy.WriteToServer" />, which copies all rows from a data source to a destination table specified by the <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> property of the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bf64-377">여러 활성 결과 집합 (MARS) 사용 하지 않으면 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 사용 중인 연결을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-377">If multiple active result sets (MARS) is disabled, <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> makes the connection busy.</span></span> <span data-ttu-id="9bf64-378">MARS를 사용 하는 경우에 대 한 호출을 인터리브할 수 있습니다 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 동일한 연결에서 다른 명령을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-378">If MARS is enabled, you can interleave calls to <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> with other commands in the same connection.</span></span>  
  
 <span data-ttu-id="9bf64-379">롤백되 하나에 오류가 발생 하는 행 수가 몇 가지 작업에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-379">The number of rows that are rolled back when one fails depends on several things:</span></span>  
  
-   <span data-ttu-id="9bf64-380">경우 <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-380">If <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> is specified.</span></span>  
  
-   <span data-ttu-id="9bf64-381">사용자 고유의 트랜잭션이 있으면 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-381">If you have your own transaction.</span></span>  
  
-   <span data-ttu-id="9bf64-382"><xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>의 값</span><span class="sxs-lookup"><span data-stu-id="9bf64-382">The value of <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>.</span></span>  
  
 <span data-ttu-id="9bf64-383">현재 일괄 처리 서버에 데이터를 보내는 동안 오류가 발생 하는 경우 (지정 된 대로 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>) 롤백됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-383">When there is an error while sending data to the server, the current batch (as specified by <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>) will be rolled back.</span></span> <span data-ttu-id="9bf64-384">경우 <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> 지정 하지 않으면 및 고유한 트랜잭션이 전체 트랜잭션이 롤백됩니다 (포함 하는 모든 이전 일괄 처리도).</span><span class="sxs-lookup"><span data-stu-id="9bf64-384">If <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> is not specified and you have your own transaction, the entire transaction will be rolled back (which includes all previous batches as well).</span></span>  
  
 <span data-ttu-id="9bf64-385">사용 하 여 <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> 서버로 복사 된 행의 수를 알아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-385">Use <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> to know how many rows were copied to the server.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As DbDataReader) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.Common.DbDataReader -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="9bf64-386">해당 행이 대상 테이블에 복사될 <see cref="T:System.Data.Common.DbDataReader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-386">A <see cref="T:System.Data.Common.DbDataReader" /> whose rows will be copied to the destination table.</span></span></param>
        <summary><span data-ttu-id="9bf64-387">제공된 <see cref="T:System.Data.Common.DbDataReader" /> 배열의 모든 행을 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체의 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 속성으로 지정된 대상 테이블에 복사하는 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />의 비동기 버전입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-387">The asynchronous version of <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />, which copies all rows from the supplied <see cref="T:System.Data.Common.DbDataReader" /> array to a destination table specified by the <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> property of the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> object.</span></span></summary>
        <returns><span data-ttu-id="9bf64-388">비동기 작업(operation)을 나타내는 작업(task)입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-388">A task representing the asynchronous operation.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (rows As DataRow()) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataRow[] -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="rows"><span data-ttu-id="9bf64-389">대상 테이블로 복사될 <see cref="T:System.Data.DataRow" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-389">An array of <see cref="T:System.Data.DataRow" /> objects that will be copied to the destination table.</span></span></param>
        <summary><span data-ttu-id="9bf64-390">제공된 <see cref="T:System.Data.DataRow" /> 배열의 모든 행을 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체의 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 속성으로 지정된 대상 테이블에 복사하는 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />의 비동기 버전입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-390">The asynchronous version of <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />, which copies all rows from the supplied <see cref="T:System.Data.DataRow" /> array to a destination table specified by the <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> property of the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> object.</span></span></summary>
        <returns><span data-ttu-id="9bf64-391">비동기 작업(operation)을 나타내는 작업(task)입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-391">A task representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bf64-392">비동기 프로그래밍에.NET Framework Data Provider for SQL Server에 대 한 자세한 내용은 참조 하세요. [비동기 프로그래밍](~/docs/framework/data/adonet/asynchronous-programming.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-392">For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see [Asynchronous Programming](~/docs/framework/data/adonet/asynchronous-programming.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9bf64-393">작업 완료 전에 동일한 인스턴스에 대해 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />를 여러 번 호출</span><span class="sxs-lookup"><span data-stu-id="9bf64-393">Calling <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> multiple times for the same instance before task completion.</span></span>  
  
<span data-ttu-id="9bf64-394">작업 완료 전에 동일한 인스턴스에 대해 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> 및 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> 호출</span><span class="sxs-lookup"><span data-stu-id="9bf64-394">Calling <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> and <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> for the same instance before task completion.</span></span>  
  
<span data-ttu-id="9bf64-395"><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> 실행 동안 연결이 삭제되거나 닫힙니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-395">The connection drops or is closed during <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> execution.</span></span>  
  
<span data-ttu-id="9bf64-396">작업 개체에서 반환됩니다. 메서드 실행 중에 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체가 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-396">Returned in the task object, the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> object was closed during the method execution.</span></span>  
  
<span data-ttu-id="9bf64-397">작업 개체에서 반환됩니다. 연결 풀 제한 시간이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-397">Returned in the task object, there was a connection pool timeout.</span></span>  
  
<span data-ttu-id="9bf64-398">작업 개체에서 반환됩니다. <see cref="T:System.Data.SqlClient.SqlConnection" /> 개체는 메서드 실행 전에 닫힙니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-398">Returned in the task object, the <see cref="T:System.Data.SqlClient.SqlConnection" /> object is closed before method execution.</span></span>  
  
 <span data-ttu-id="9bf64-399"><see langword="Context Connection=true" />가 연결 문자열에 지정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-399"><see langword="Context Connection=true" /> is specified in the connection string.</span></span></exception>
        <exception cref="T:System.Data.SqlClient.SqlException"><span data-ttu-id="9bf64-400">작업 개체에서 반환됩니다. 연결을 여는 동안 발생한 SQL Server에 의해 오류가 반환되었습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-400">Returned in the task object, any error returned by SQL Server that occurred while opening the connection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table"><span data-ttu-id="9bf64-401">해당 행이 대상 테이블에 복사될 <see cref="T:System.Data.DataTable" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-401">A <see cref="T:System.Data.DataTable" /> whose rows will be copied to the destination table.</span></span></param>
        <summary><span data-ttu-id="9bf64-402">제공된 <see cref="T:System.Data.DataTable" />의 모든 행을 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체의 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 속성으로 지정된 대상 테이블에 복사하는 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />의 비동기 버전입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-402">The asynchronous version of <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />, which copies all rows in the supplied <see cref="T:System.Data.DataTable" /> to a destination table specified by the <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> property of the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> object.</span></span></summary>
        <returns><span data-ttu-id="9bf64-403">비동기 작업(operation)을 나타내는 작업(task)입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-403">A task representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bf64-404">비동기 프로그래밍에.NET Framework Data Provider for SQL Server에 대 한 자세한 내용은 참조 하세요. [비동기 프로그래밍](~/docs/framework/data/adonet/asynchronous-programming.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-404">For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see [Asynchronous Programming](~/docs/framework/data/adonet/asynchronous-programming.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9bf64-405">작업 완료 전에 동일한 인스턴스에 대해 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />를 여러 번 호출</span><span class="sxs-lookup"><span data-stu-id="9bf64-405">Calling <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> multiple times for the same instance before task completion.</span></span>  
  
<span data-ttu-id="9bf64-406">작업 완료 전에 동일한 인스턴스에 대해 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> 및 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> 호출</span><span class="sxs-lookup"><span data-stu-id="9bf64-406">Calling <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> and <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> for the same instance before task completion.</span></span>  
  
<span data-ttu-id="9bf64-407"><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> 실행 동안 연결이 삭제되거나 닫힙니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-407">The connection drops or is closed during <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> execution.</span></span>  
  
<span data-ttu-id="9bf64-408">작업 개체에서 반환됩니다. 메서드 실행 중에 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체가 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-408">Returned in the task object, the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> object was closed during the method execution.</span></span>  
  
<span data-ttu-id="9bf64-409">작업 개체에서 반환됩니다. 연결 풀 제한 시간이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-409">Returned in the task object, there was a connection pool timeout.</span></span>  
  
<span data-ttu-id="9bf64-410">작업 개체에서 반환됩니다. <see cref="T:System.Data.SqlClient.SqlConnection" /> 개체는 메서드 실행 전에 닫힙니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-410">Returned in the task object, the <see cref="T:System.Data.SqlClient.SqlConnection" /> object is closed before method execution.</span></span>  
  
 <span data-ttu-id="9bf64-411"><see langword="Context Connection=true" />가 연결 문자열에 지정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-411"><see langword="Context Connection=true" /> is specified in the connection string.</span></span></exception>
        <exception cref="T:System.Data.SqlClient.SqlException"><span data-ttu-id="9bf64-412">작업 개체에서 반환됩니다. 연결을 여는 동안 발생한 SQL Server에 의해 오류가 반환되었습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-412">Returned in the task object, any error returned by SQL Server that occurred while opening the connection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As IDataReader) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::IDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.IDataReader -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="9bf64-413">해당 행이 대상 테이블에 복사될 <see cref="T:System.Data.IDataReader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-413">A <see cref="T:System.Data.IDataReader" /> whose rows will be copied to the destination table.</span></span></param>
        <summary><span data-ttu-id="9bf64-414">제공된 <see cref="T:System.Data.IDataReader" />의 모든 행을 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체의 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 속성으로 지정된 대상 테이블에 복사하는 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />의 비동기 버전입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-414">The asynchronous version of <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />, which copies all rows in the supplied <see cref="T:System.Data.IDataReader" /> to a destination table specified by the <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> property of the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> object.</span></span></summary>
        <returns><span data-ttu-id="9bf64-415">비동기 작업(operation)을 나타내는 작업(task)입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-415">A task representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bf64-416">비동기 프로그래밍에.NET Framework Data Provider for SQL Server에 대 한 자세한 내용은 참조 하세요. [비동기 프로그래밍](~/docs/framework/data/adonet/asynchronous-programming.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-416">For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see [Asynchronous Programming](~/docs/framework/data/adonet/asynchronous-programming.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9bf64-417">작업 완료 전에 동일한 인스턴스에 대해 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />를 여러 번 호출</span><span class="sxs-lookup"><span data-stu-id="9bf64-417">Calling <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> multiple times for the same instance before task completion.</span></span>  
  
<span data-ttu-id="9bf64-418">작업 완료 전에 동일한 인스턴스에 대해 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> 및 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> 호출</span><span class="sxs-lookup"><span data-stu-id="9bf64-418">Calling <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> and <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> for the same instance before task completion.</span></span>  
  
<span data-ttu-id="9bf64-419"><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> 실행 동안 연결이 삭제되거나 닫힙니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-419">The connection drops or is closed during <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> execution.</span></span>  
  
<span data-ttu-id="9bf64-420">작업 개체에서 반환됩니다. 메서드 실행 중에 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체가 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-420">Returned in the task object, the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> object was closed during the method execution.</span></span>  
  
<span data-ttu-id="9bf64-421">작업 개체에서 반환됩니다. 연결 풀 제한 시간이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-421">Returned in the task object, there was a connection pool timeout.</span></span>  
  
<span data-ttu-id="9bf64-422">작업 개체에서 반환됩니다. <see cref="T:System.Data.SqlClient.SqlConnection" /> 개체는 메서드 실행 전에 닫힙니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-422">Returned in the task object, the <see cref="T:System.Data.SqlClient.SqlConnection" /> object is closed before method execution.</span></span>  
  
<span data-ttu-id="9bf64-423">완료된 <see cref="T:System.Threading.Tasks.Task" />가 반환되기 전에 <see cref="T:System.Data.IDataReader" />가 닫혔습니다. </span><span class="sxs-lookup"><span data-stu-id="9bf64-423">The <see cref="T:System.Data.IDataReader" /> was closed before the completed <see cref="T:System.Threading.Tasks.Task" /> returned.</span></span>  
  
<span data-ttu-id="9bf64-424">완료된 <see cref="T:System.Threading.Tasks.Task" />가 반환되기 전에 <see cref="T:System.Data.IDataReader" />와 관련된 연결이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-424">The <see cref="T:System.Data.IDataReader" />'s associated connection was closed before the completed <see cref="T:System.Threading.Tasks.Task" /> returned.</span></span>  
  
 <span data-ttu-id="9bf64-425"><see langword="Context Connection=true" />가 연결 문자열에 지정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-425"><see langword="Context Connection=true" /> is specified in the connection string.</span></span></exception>
        <exception cref="T:System.Data.SqlClient.SqlException"><span data-ttu-id="9bf64-426">작업 개체에서 반환됩니다. 연결을 여는 동안 발생한 SQL Server에 의해 오류가 반환되었습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-426">Returned in the task object, any error returned by SQL Server that occurred while opening the connection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::Common::DbDataReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.Common.DbDataReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (reader, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="9bf64-427">해당 행이 대상 테이블에 복사될 <see cref="T:System.Data.Common.DbDataReader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-427">A <see cref="T:System.Data.Common.DbDataReader" /> whose rows will be copied to the destination table.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="9bf64-428">취소 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-428">The cancellation instruction.</span></span> <span data-ttu-id="9bf64-429">이 매개 변수의 <see cref="P:System.Threading.CancellationToken.None" /> 값이 이 메서드를 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" /> 동일하게 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-429">A <see cref="P:System.Threading.CancellationToken.None" /> value in this parameter makes this method equivalent to <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" />.</span></span></param>
        <summary><span data-ttu-id="9bf64-430">제공된 <see cref="T:System.Data.Common.DbDataReader" /> 배열의 모든 행을 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체의 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 속성으로 지정된 대상 테이블에 복사하는 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />의 비동기 버전입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-430">The asynchronous version of <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />, which copies all rows from the supplied <see cref="T:System.Data.Common.DbDataReader" /> array to a destination table specified by the <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> property of the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> object.</span></span></summary>
        <returns><span data-ttu-id="9bf64-431"><see cref="T:System.Threading.Tasks.Task" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-431">Returns <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(cli::array &lt;System::Data::DataRow ^&gt; ^ rows, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataRow[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (rows, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="rows"><span data-ttu-id="9bf64-432">대상 테이블로 복사될 <see cref="T:System.Data.DataRow" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-432">An array of <see cref="T:System.Data.DataRow" /> objects that will be copied to the destination table.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="9bf64-433">취소 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-433">The cancellation instruction.</span></span> <span data-ttu-id="9bf64-434">이 매개 변수의 <see cref="P:System.Threading.CancellationToken.None" /> 값이 이 메서드를 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> 동일하게 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-434">A <see cref="P:System.Threading.CancellationToken.None" /> value in this parameter makes this method equivalent to <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</span></span></param>
        <summary><span data-ttu-id="9bf64-435">제공된 <see cref="T:System.Data.DataRow" /> 배열의 모든 행을 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체의 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 속성으로 지정된 대상 테이블에 복사하는 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />의 비동기 버전입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-435">The asynchronous version of <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />, which copies all rows from the supplied <see cref="T:System.Data.DataRow" /> array to a destination table specified by the <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> property of the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> object.</span></span>  
  
<span data-ttu-id="9bf64-436">취소 토큰은 명령 제한 시간이 경과하기 전에 작업을 중단하는 요청에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-436">The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.</span></span>  <span data-ttu-id="9bf64-437">예외는 반환된 작업 개체를 통해 보고됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-437">Exceptions will be reported via the returned Task object.</span></span></summary>
        <returns><span data-ttu-id="9bf64-438">비동기 작업(operation)을 나타내는 작업(task)입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-438">A task representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bf64-439">비동기 프로그래밍에.NET Framework Data Provider for SQL Server에 대 한 자세한 내용은 참조 하세요. [비동기 프로그래밍](~/docs/framework/data/adonet/asynchronous-programming.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-439">For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see [Asynchronous Programming](~/docs/framework/data/adonet/asynchronous-programming.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9bf64-440">작업 완료 전에 동일한 인스턴스에 대해 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />를 여러 번 호출</span><span class="sxs-lookup"><span data-stu-id="9bf64-440">Calling <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> multiple times for the same instance before task completion.</span></span>  
  
<span data-ttu-id="9bf64-441">작업 완료 전에 동일한 인스턴스에 대해 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> 및 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> 호출</span><span class="sxs-lookup"><span data-stu-id="9bf64-441">Calling <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> and <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> for the same instance before task completion.</span></span>  
  
<span data-ttu-id="9bf64-442"><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> 실행 동안 연결이 삭제되거나 닫힙니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-442">The connection drops or is closed during <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> execution.</span></span>  
  
<span data-ttu-id="9bf64-443">작업 개체에서 반환됩니다. 메서드 실행 중에 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체가 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-443">Returned in the task object, the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> object was closed during the method execution.</span></span>  
  
<span data-ttu-id="9bf64-444">작업 개체에서 반환됩니다. 연결 풀 제한 시간이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-444">Returned in the task object, there was a connection pool timeout.</span></span>  
  
<span data-ttu-id="9bf64-445">작업 개체에서 반환됩니다. <see cref="T:System.Data.SqlClient.SqlConnection" /> 개체는 메서드 실행 전에 닫힙니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-445">Returned in the task object, the <see cref="T:System.Data.SqlClient.SqlConnection" /> object is closed before method execution.</span></span>  
  
 <span data-ttu-id="9bf64-446"><see langword="Context Connection=true" />가 연결 문자열에 지정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-446"><see langword="Context Connection=true" /> is specified in the connection string.</span></span></exception>
        <exception cref="T:System.Data.SqlClient.SqlException"><span data-ttu-id="9bf64-447">작업 개체에서 반환됩니다. 연결을 여는 동안 발생한 SQL Server에 의해 오류가 반환되었습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-447">Returned in the task object, any error returned by SQL Server that occurred while opening the connection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable, rowState As DataRowState) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Data::DataRowState rowState);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Data.DataRowState -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, rowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table"><span data-ttu-id="9bf64-448">해당 행이 대상 테이블에 복사될 <see cref="T:System.Data.DataTable" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-448">A <see cref="T:System.Data.DataTable" /> whose rows will be copied to the destination table.</span></span></param>
        <param name="rowState"><span data-ttu-id="9bf64-449"><see cref="T:System.Data.DataRowState" /> 열거형의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-449">A value from the <see cref="T:System.Data.DataRowState" /> enumeration.</span></span> <span data-ttu-id="9bf64-450">행 상태와 일치하는 행만 대상으로 복사됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-450">Only rows matching the row state are copied to the destination.</span></span></param>
        <summary><span data-ttu-id="9bf64-451">제공된 <see cref="T:System.Data.DataTable" />의 제공된 행 상태와 일치하는 행만 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체의 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 속성으로 지정된 대상 테이블에 복사하는 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />의 비동기 버전입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-451">The asynchronous version of <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />, which copies only rows that match the supplied row state in the supplied <see cref="T:System.Data.DataTable" /> to a destination table specified by the <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> property of the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> object.</span></span></summary>
        <returns><span data-ttu-id="9bf64-452">비동기 작업(operation)을 나타내는 작업(task)입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-452">A task representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bf64-453">비동기 프로그래밍에.NET Framework Data Provider for SQL Server에 대 한 자세한 내용은 참조 하세요. [비동기 프로그래밍](~/docs/framework/data/adonet/asynchronous-programming.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-453">For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see [Asynchronous Programming](~/docs/framework/data/adonet/asynchronous-programming.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9bf64-454">작업 완료 전에 동일한 인스턴스에 대해 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />를 여러 번 호출</span><span class="sxs-lookup"><span data-stu-id="9bf64-454">Calling <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> multiple times for the same instance before task completion.</span></span>  
  
<span data-ttu-id="9bf64-455">작업 완료 전에 동일한 인스턴스에 대해 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> 및 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> 호출</span><span class="sxs-lookup"><span data-stu-id="9bf64-455">Calling <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> and <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> for the same instance before task completion.</span></span>  
  
<span data-ttu-id="9bf64-456"><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> 실행 동안 연결이 삭제되거나 닫힙니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-456">The connection drops or is closed during <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> execution.</span></span>  
  
<span data-ttu-id="9bf64-457">작업 개체에서 반환됩니다. 메서드 실행 중에 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체가 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-457">Returned in the task object, the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> object was closed during the method execution.</span></span>  
  
<span data-ttu-id="9bf64-458">작업 개체에서 반환됩니다. 연결 풀 제한 시간이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-458">Returned in the task object, there was a connection pool timeout.</span></span>  
  
<span data-ttu-id="9bf64-459">작업 개체에서 반환됩니다. <see cref="T:System.Data.SqlClient.SqlConnection" /> 개체는 메서드 실행 전에 닫힙니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-459">Returned in the task object, the <see cref="T:System.Data.SqlClient.SqlConnection" /> object is closed before method execution.</span></span>  
  
 <span data-ttu-id="9bf64-460"><see langword="Context Connection=true" />가 연결 문자열에 지정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-460"><see langword="Context Connection=true" /> is specified in the connection string.</span></span></exception>
        <exception cref="T:System.Data.SqlClient.SqlException"><span data-ttu-id="9bf64-461">작업 개체에서 반환됩니다. 연결을 여는 동안 발생한 SQL Server에 의해 오류가 반환되었습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-461">Returned in the task object, any error returned by SQL Server that occurred while opening the connection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table"><span data-ttu-id="9bf64-462">해당 행이 대상 테이블에 복사될 <see cref="T:System.Data.DataTable" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-462">A <see cref="T:System.Data.DataTable" /> whose rows will be copied to the destination table.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="9bf64-463">취소 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-463">The cancellation instruction.</span></span> <span data-ttu-id="9bf64-464">이 매개 변수의 <see cref="P:System.Threading.CancellationToken.None" /> 값이 이 메서드를 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> 동일하게 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-464">A <see cref="P:System.Threading.CancellationToken.None" /> value in this parameter makes this method equivalent to <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</span></span></param>
        <summary><span data-ttu-id="9bf64-465">제공된 <see cref="T:System.Data.DataTable" />의 모든 행을 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체의 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 속성으로 지정된 대상 테이블에 복사하는 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />의 비동기 버전입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-465">The asynchronous version of <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />, which copies all rows in the supplied <see cref="T:System.Data.DataTable" /> to a destination table specified by the <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> property of the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> object.</span></span>  
  
<span data-ttu-id="9bf64-466">취소 토큰은 명령 제한 시간이 경과하기 전에 작업을 중단하는 요청에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-466">The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.</span></span>  <span data-ttu-id="9bf64-467">예외는 반환된 작업 개체를 통해 보고됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-467">Exceptions will be reported via the returned Task object.</span></span></summary>
        <returns><span data-ttu-id="9bf64-468">비동기 작업(operation)을 나타내는 작업(task)입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-468">A task representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bf64-469">비동기 프로그래밍에.NET Framework Data Provider for SQL Server에 대 한 자세한 내용은 참조 하세요. [비동기 프로그래밍](~/docs/framework/data/adonet/asynchronous-programming.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-469">For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see [Asynchronous Programming](~/docs/framework/data/adonet/asynchronous-programming.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9bf64-470">작업 완료 전에 동일한 인스턴스에 대해 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />를 여러 번 호출</span><span class="sxs-lookup"><span data-stu-id="9bf64-470">Calling <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> multiple times for the same instance before task completion.</span></span>  
  
<span data-ttu-id="9bf64-471">작업 완료 전에 동일한 인스턴스에 대해 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> 및 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> 호출</span><span class="sxs-lookup"><span data-stu-id="9bf64-471">Calling <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> and <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> for the same instance before task completion.</span></span>  
  
<span data-ttu-id="9bf64-472"><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> 실행 동안 연결이 삭제되거나 닫힙니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-472">The connection drops or is closed during <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> execution.</span></span>  
  
<span data-ttu-id="9bf64-473">작업 개체에서 반환됩니다. 메서드 실행 중에 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체가 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-473">Returned in the task object, the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> object was closed during the method execution.</span></span>  
  
<span data-ttu-id="9bf64-474">작업 개체에서 반환됩니다. 연결 풀 제한 시간이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-474">Returned in the task object, there was a connection pool timeout.</span></span>  
  
<span data-ttu-id="9bf64-475">작업 개체에서 반환됩니다. <see cref="T:System.Data.SqlClient.SqlConnection" /> 개체는 메서드 실행 전에 닫힙니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-475">Returned in the task object, the <see cref="T:System.Data.SqlClient.SqlConnection" /> object is closed before method execution.</span></span>  
  
 <span data-ttu-id="9bf64-476"><see langword="Context Connection=true" />가 연결 문자열에 지정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-476"><see langword="Context Connection=true" /> is specified in the connection string.</span></span></exception>
        <exception cref="T:System.Data.SqlClient.SqlException"><span data-ttu-id="9bf64-477">작업 개체에서 반환됩니다. 연결을 여는 동안 발생한 SQL Server에 의해 오류가 반환되었습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-477">Returned in the task object, any error returned by SQL Server that occurred while opening the connection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::IDataReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.IDataReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (reader, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="9bf64-478">해당 행이 대상 테이블에 복사될 <see cref="T:System.Data.IDataReader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-478">A <see cref="T:System.Data.IDataReader" /> whose rows will be copied to the destination table.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="9bf64-479">취소 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-479">The cancellation instruction.</span></span> <span data-ttu-id="9bf64-480">이 매개 변수의 <see cref="P:System.Threading.CancellationToken.None" /> 값이 이 메서드를 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> 동일하게 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-480">A <see cref="P:System.Threading.CancellationToken.None" /> value in this parameter makes this method equivalent to <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</span></span></param>
        <summary><span data-ttu-id="9bf64-481">제공된 <see cref="T:System.Data.IDataReader" />의 모든 행을 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체의 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 속성으로 지정된 대상 테이블에 복사하는 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />의 비동기 버전입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-481">The asynchronous version of <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />, which copies all rows in the supplied <see cref="T:System.Data.IDataReader" /> to a destination table specified by the <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> property of the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> object.</span></span>  
  
<span data-ttu-id="9bf64-482">취소 토큰은 명령 제한 시간이 경과하기 전에 작업을 중단하는 요청에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-482">The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.</span></span>  <span data-ttu-id="9bf64-483">예외는 반환된 작업 개체를 통해 보고됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-483">Exceptions will be reported via the returned Task object.</span></span></summary>
        <returns><span data-ttu-id="9bf64-484">비동기 작업(operation)을 나타내는 작업(task)입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-484">A task representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bf64-485">비동기 프로그래밍에.NET Framework Data Provider for SQL Server에 대 한 자세한 내용은 참조 하세요. [비동기 프로그래밍](~/docs/framework/data/adonet/asynchronous-programming.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-485">For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see [Asynchronous Programming](~/docs/framework/data/adonet/asynchronous-programming.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9bf64-486">작업 완료 전에 동일한 인스턴스에 대해 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />를 여러 번 호출</span><span class="sxs-lookup"><span data-stu-id="9bf64-486">Calling <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> multiple times for the same instance before task completion.</span></span>  
  
<span data-ttu-id="9bf64-487">작업 완료 전에 동일한 인스턴스에 대해 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> 및 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> 호출</span><span class="sxs-lookup"><span data-stu-id="9bf64-487">Calling <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> and <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> for the same instance before task completion.</span></span>  
  
<span data-ttu-id="9bf64-488"><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> 실행 동안 연결이 삭제되거나 닫힙니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-488">The connection drops or is closed during <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> execution.</span></span>  
  
<span data-ttu-id="9bf64-489">작업 개체에서 반환됩니다. 메서드 실행 중에 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체가 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-489">Returned in the task object, the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> object was closed during the method execution.</span></span>  
  
<span data-ttu-id="9bf64-490">작업 개체에서 반환됩니다. 연결 풀 제한 시간이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-490">Returned in the task object, there was a connection pool timeout.</span></span>  
  
<span data-ttu-id="9bf64-491">작업 개체에서 반환됩니다. <see cref="T:System.Data.SqlClient.SqlConnection" /> 개체는 메서드 실행 전에 닫힙니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-491">Returned in the task object, the <see cref="T:System.Data.SqlClient.SqlConnection" /> object is closed before method execution.</span></span>  
  
<span data-ttu-id="9bf64-492">완료된 <see cref="T:System.Threading.Tasks.Task" />가 반환되기 전에 <see cref="T:System.Data.IDataReader" />가 닫혔습니다. </span><span class="sxs-lookup"><span data-stu-id="9bf64-492">The <see cref="T:System.Data.IDataReader" /> was closed before the completed <see cref="T:System.Threading.Tasks.Task" /> returned.</span></span>  
  
<span data-ttu-id="9bf64-493">완료된 <see cref="T:System.Threading.Tasks.Task" />가 반환되기 전에 <see cref="T:System.Data.IDataReader" />와 관련된 연결이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-493">The <see cref="T:System.Data.IDataReader" />'s associated connection was closed before the completed <see cref="T:System.Threading.Tasks.Task" /> returned.</span></span>  
  
 <span data-ttu-id="9bf64-494"><see langword="Context Connection=true" />가 연결 문자열에 지정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-494"><see langword="Context Connection=true" /> is specified in the connection string.</span></span></exception>
        <exception cref="T:System.Data.SqlClient.SqlException"><span data-ttu-id="9bf64-495">작업 개체에서 반환됩니다. 연결을 여는 동안 발생한 SQL Server에 의해 오류가 반환되었습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-495">Returned in the task object, any error returned by SQL Server that occurred while opening the connection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Data::DataRowState rowState, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Data.DataRowState * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, rowState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table"><span data-ttu-id="9bf64-496">해당 행이 대상 테이블에 복사될 <see cref="T:System.Data.DataTable" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-496">A <see cref="T:System.Data.DataTable" /> whose rows will be copied to the destination table.</span></span></param>
        <param name="rowState"><span data-ttu-id="9bf64-497"><see cref="T:System.Data.DataRowState" /> 열거형의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-497">A value from the <see cref="T:System.Data.DataRowState" /> enumeration.</span></span> <span data-ttu-id="9bf64-498">행 상태와 일치하는 행만 대상으로 복사됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-498">Only rows matching the row state are copied to the destination.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="9bf64-499">취소 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-499">The cancellation instruction.</span></span> <span data-ttu-id="9bf64-500">이 매개 변수의 <see cref="P:System.Threading.CancellationToken.None" /> 값이 이 메서드를 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> 동일하게 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-500">A <see cref="P:System.Threading.CancellationToken.None" /> value in this parameter makes this method equivalent to <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</span></span></param>
        <summary><span data-ttu-id="9bf64-501">제공된 <see cref="T:System.Data.DataTable" />의 제공된 행 상태와 일치하는 행만 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체의 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 속성으로 지정된 대상 테이블에 복사하는 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />의 비동기 버전입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-501">The asynchronous version of <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />, which copies only rows that match the supplied row state in the supplied <see cref="T:System.Data.DataTable" /> to a destination table specified by the <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> property of the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> object.</span></span>  
  
<span data-ttu-id="9bf64-502">취소 토큰은 명령 제한 시간이 경과하기 전에 작업을 중단하는 요청에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-502">The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.</span></span>  <span data-ttu-id="9bf64-503">예외는 반환된 작업 개체를 통해 보고됩니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-503">Exceptions will be reported via the returned Task object.</span></span></summary>
        <returns><span data-ttu-id="9bf64-504">비동기 작업(operation)을 나타내는 작업(task)입니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-504">A task representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bf64-505">비동기 프로그래밍에.NET Framework Data Provider for SQL Server에 대 한 자세한 내용은 참조 하세요. [비동기 프로그래밍](~/docs/framework/data/adonet/asynchronous-programming.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-505">For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see [Asynchronous Programming](~/docs/framework/data/adonet/asynchronous-programming.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9bf64-506">작업 완료 전에 동일한 인스턴스에 대해 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />를 여러 번 호출</span><span class="sxs-lookup"><span data-stu-id="9bf64-506">Calling <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> multiple times for the same instance before task completion.</span></span>  
  
<span data-ttu-id="9bf64-507">작업 완료 전에 동일한 인스턴스에 대해 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> 및 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> 호출</span><span class="sxs-lookup"><span data-stu-id="9bf64-507">Calling <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> and <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> for the same instance before task completion.</span></span>  
  
<span data-ttu-id="9bf64-508"><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> 실행 동안 연결이 삭제되거나 닫힙니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-508">The connection drops or is closed during <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> execution.</span></span>  
  
<span data-ttu-id="9bf64-509">작업 개체에서 반환됩니다. 메서드 실행 중에 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체가 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-509">Returned in the task object, the <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> object was closed during the method execution.</span></span>  
  
<span data-ttu-id="9bf64-510">작업 개체에서 반환됩니다. 연결 풀 제한 시간이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-510">Returned in the task object, there was a connection pool timeout.</span></span>  
  
<span data-ttu-id="9bf64-511">작업 개체에서 반환됩니다. <see cref="T:System.Data.SqlClient.SqlConnection" /> 개체는 메서드 실행 전에 닫힙니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-511">Returned in the task object, the <see cref="T:System.Data.SqlClient.SqlConnection" /> object is closed before method execution.</span></span>  
  
 <span data-ttu-id="9bf64-512"><see langword="Context Connection=true" />가 연결 문자열에 지정되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-512"><see langword="Context Connection=true" /> is specified in the connection string.</span></span></exception>
        <exception cref="T:System.Data.SqlClient.SqlException"><span data-ttu-id="9bf64-513">작업 개체에서 반환됩니다. 연결을 여는 동안 발생한 SQL Server에 의해 오류가 반환되었습니다.</span><span class="sxs-lookup"><span data-stu-id="9bf64-513">Returned in the task object, any error returned by SQL Server that occurred while opening the connection.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>