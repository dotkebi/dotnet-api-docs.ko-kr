<Type Name="SqlColumnEncryptionKeyStoreProvider" FullName="System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="13ee95b36f301a3a340e02b143c81564739b56a3" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57950410" /></Metadata><TypeSignature Language="C#" Value="public abstract class SqlColumnEncryptionKeyStoreProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SqlColumnEncryptionKeyStoreProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SqlColumnEncryptionKeyStoreProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlColumnEncryptionKeyStoreProvider abstract" />
  <TypeSignature Language="F#" Value="type SqlColumnEncryptionKeyStoreProvider = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="06824-101">모든 키 저장소 공급자의 기본 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="06824-101">Base class for all key store providers.</span></span> <span data-ttu-id="06824-102">사용자 지정 공급자는 이 클래스에서 파생되어야 하며, 해당 멤버 함수를 재정의한 후 SqlConnection.RegisterColumnEncryptionKeyStoreProviders()를 사용하여 등록해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="06824-102">A custom provider must derive from this class and override its member functions and then register it using SqlConnection.RegisterColumnEncryptionKeyStoreProviders().</span></span> <span data-ttu-id="06824-103">자세한 내용은 <see href="https://docs.microsoft.com/sql/relational-databases/security/encryption/always-encrypted-database-engine">Always Encrypted</see>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="06824-103">For details see, <see href="https://docs.microsoft.com/sql/relational-databases/security/encryption/always-encrypted-database-engine">Always Encrypted</see>.</span></span></summary>
    <remarks>To be added.</remarks>
    <related type="ExternalDocumentation" href="https://blogs.msdn.com/b/sqlsecurity/archive/tags/always+encrypted/"><span data-ttu-id="06824-104">상시 암호화 블로그</span><span class="sxs-lookup"><span data-stu-id="06824-104">Always Encrypted Blog</span></span></related>
    <related type="ExternalDocumentation" href="/sql/relational-databases/security/encryption/always-encrypted-client-development"><span data-ttu-id="06824-105">상시 암호화 (클라이언트 개발)</span><span class="sxs-lookup"><span data-stu-id="06824-105">Always Encrypted (client development)</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SqlColumnEncryptionKeyStoreProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SqlColumnEncryptionKeyStoreProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="06824-106">SqlColumnEncryptionKeyStoreProviderClass의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="06824-106">Initializes a new instance of the SqlColumnEncryptionKeyStoreProviderClass.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DecryptColumnEncryptionKey">
      <MemberSignature Language="C#" Value="public abstract byte[] DecryptColumnEncryptionKey (string masterKeyPath, string encryptionAlgorithm, byte[] encryptedColumnEncryptionKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] DecryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, unsigned int8[] encryptedColumnEncryptionKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider.DecryptColumnEncryptionKey(System.String,System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function DecryptColumnEncryptionKey (masterKeyPath As String, encryptionAlgorithm As String, encryptedColumnEncryptionKey As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Byte&gt; ^ DecryptColumnEncryptionKey(System::String ^ masterKeyPath, System::String ^ encryptionAlgorithm, cli::array &lt;System::Byte&gt; ^ encryptedColumnEncryptionKey);" />
      <MemberSignature Language="F#" Value="abstract member DecryptColumnEncryptionKey : string * string * byte[] -&gt; byte[]" Usage="sqlColumnEncryptionKeyStoreProvider.DecryptColumnEncryptionKey (masterKeyPath, encryptionAlgorithm, encryptedColumnEncryptionKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="masterKeyPath" Type="System.String" />
        <Parameter Name="encryptionAlgorithm" Type="System.String" />
        <Parameter Name="encryptedColumnEncryptionKey" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="masterKeyPath"><span data-ttu-id="06824-107">마스터 키 경로입니다.</span><span class="sxs-lookup"><span data-stu-id="06824-107">The master key path.</span></span></param>
        <param name="encryptionAlgorithm"><span data-ttu-id="06824-108">암호화 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="06824-108">The encryption algorithm.</span></span></param>
        <param name="encryptedColumnEncryptionKey"><span data-ttu-id="06824-109">암호화된 열 암호화 키입니다.</span><span class="sxs-lookup"><span data-stu-id="06824-109">The encrypted column encryption key.</span></span></param>
        <summary><span data-ttu-id="06824-110">열 암호화 키의 지정된 암호화된 값의 암호를 해독합니다.</span><span class="sxs-lookup"><span data-stu-id="06824-110">Decrypts the specified encrypted value of a column encryption key.</span></span> <span data-ttu-id="06824-111">지정된 키 경로를 포함한 열 마스터 키와 지정된 알고리즘을 사용하여 암호화된 값을 암호화해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="06824-111">The encrypted value is expected to be encrypted using the column master key with the specified key path and using the specified algorithm.</span></span></summary>
        <returns><span data-ttu-id="06824-112"><see cref="T:System.Byte" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="06824-112">Returns <see cref="T:System.Byte" />.</span></span>   
<span data-ttu-id="06824-113">암호 해독된 열 암호화 키입니다.</span><span class="sxs-lookup"><span data-stu-id="06824-113">The decrypted column encryption key.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncryptColumnEncryptionKey">
      <MemberSignature Language="C#" Value="public abstract byte[] EncryptColumnEncryptionKey (string masterKeyPath, string encryptionAlgorithm, byte[] columnEncryptionKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] EncryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, unsigned int8[] columnEncryptionKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider.EncryptColumnEncryptionKey(System.String,System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function EncryptColumnEncryptionKey (masterKeyPath As String, encryptionAlgorithm As String, columnEncryptionKey As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Byte&gt; ^ EncryptColumnEncryptionKey(System::String ^ masterKeyPath, System::String ^ encryptionAlgorithm, cli::array &lt;System::Byte&gt; ^ columnEncryptionKey);" />
      <MemberSignature Language="F#" Value="abstract member EncryptColumnEncryptionKey : string * string * byte[] -&gt; byte[]" Usage="sqlColumnEncryptionKeyStoreProvider.EncryptColumnEncryptionKey (masterKeyPath, encryptionAlgorithm, columnEncryptionKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="masterKeyPath" Type="System.String" />
        <Parameter Name="encryptionAlgorithm" Type="System.String" />
        <Parameter Name="columnEncryptionKey" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="masterKeyPath"><span data-ttu-id="06824-114">마스터 키 경로입니다.</span><span class="sxs-lookup"><span data-stu-id="06824-114">The master key path.</span></span></param>
        <param name="encryptionAlgorithm"><span data-ttu-id="06824-115">암호화 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="06824-115">The encryption algorithm.</span></span></param>
        <param name="columnEncryptionKey"><span data-ttu-id="06824-116">암호화된 열 암호화 키입니다.</span><span class="sxs-lookup"><span data-stu-id="06824-116">The encrypted column encryption key.</span></span></param>
        <summary><span data-ttu-id="06824-117">지정된 키 경로를 포함한 열 마스터 키와 지정된 알고리즘을 사용하여 열 암호화 키를 암호화합니다.</span><span class="sxs-lookup"><span data-stu-id="06824-117">Encrypts a column encryption key using the column master key with the specified key path and using the specified algorithm.</span></span></summary>
        <returns><span data-ttu-id="06824-118"><see cref="T:System.Byte" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="06824-118">Returns <see cref="T:System.Byte" />.</span></span>   
<span data-ttu-id="06824-119">암호화된 열 암호화 키입니다.</span><span class="sxs-lookup"><span data-stu-id="06824-119">The encrypted column encryption key.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignColumnMasterKeyMetadata">
      <MemberSignature Language="C#" Value="public virtual byte[] SignColumnMasterKeyMetadata (string masterKeyPath, bool allowEnclaveComputations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] SignColumnMasterKeyMetadata(string masterKeyPath, bool allowEnclaveComputations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider.SignColumnMasterKeyMetadata(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SignColumnMasterKeyMetadata (masterKeyPath As String, allowEnclaveComputations As Boolean) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ SignColumnMasterKeyMetadata(System::String ^ masterKeyPath, bool allowEnclaveComputations);" />
      <MemberSignature Language="F#" Value="abstract member SignColumnMasterKeyMetadata : string * bool -&gt; byte[]&#xA;override this.SignColumnMasterKeyMetadata : string * bool -&gt; byte[]" Usage="sqlColumnEncryptionKeyStoreProvider.SignColumnMasterKeyMetadata (masterKeyPath, allowEnclaveComputations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="masterKeyPath" Type="System.String" Index="0" FrameworkAlternate="netframework-4.7.2;netframework-4.8" />
        <Parameter Name="allowEnclaveComputations" Type="System.Boolean" Index="1" FrameworkAlternate="netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="masterKeyPath"><span data-ttu-id="06824-120">열 마스터 키 경로</span><span class="sxs-lookup"><span data-stu-id="06824-120">The column master key path.</span></span></param>
        <param name="allowEnclaveComputations"><span data-ttu-id="06824-121">열 마스터 키가 enclave 계산을 지원할 경우 <see langword="true" />가 표시되며 지원하지 않는 경우 <see langword="false" />가 표시됩니다.</span><span class="sxs-lookup"><span data-stu-id="06824-121"><see langword="true" /> to indicate that the column master key supports enclave computations; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="06824-122">파생 클래스에서 구현되는 경우 <paramref name="masterKeyPath" /> 매개 변수로 참조되는 열 마스터 키를 사용하여 열 마스터 키 메타데이터에 디지털 서명합니다.</span><span class="sxs-lookup"><span data-stu-id="06824-122">When implemented in a derived class, digitally signs the column master key metadata with the column master key referenced by the <paramref name="masterKeyPath" /> parameter.</span></span> <span data-ttu-id="06824-123">서명을 생성하는 데 사용되는 입력 값은 <paramref name="masterKeyPath" /> 및 <paramref name="allowEnclaveComputations" /> 매개 변수의 지정된 값이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="06824-123">The input values used to generate the signature should be the specified values of the <paramref name="masterKeyPath" /> and <paramref name="allowEnclaveComputations" /> parameters.</span></span></summary>
        <returns><span data-ttu-id="06824-124">열 마스터 키 메타데이터의 서명</span><span class="sxs-lookup"><span data-stu-id="06824-124">The signature of the column master key metadata.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06824-125">되도록 합니다 <xref:System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider.SignColumnMasterKeyMetadata%2A> 메서드는 이전 API를 사용 하는 응용 프로그램을 중단 하지 않습니다, throw를 <xref:System.NotImplementedException> 기본적으로 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="06824-125">To ensure that the <xref:System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider.SignColumnMasterKeyMetadata%2A> method doesn't break applications that rely on an old API, it throws a <xref:System.NotImplementedException> exception by default.</span></span>  
  
 <span data-ttu-id="06824-126"><xref:System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider.SignColumnMasterKeyMetadata%2A> 메서드가 고객에 대 한 열 마스터 키 (CMK)를 생성 하는 클라이언트 도구에서 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="06824-126">The <xref:System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider.SignColumnMasterKeyMetadata%2A> method will be used by client tools that generate Column Master Keys (CMK) for customers.</span></span> <span data-ttu-id="06824-127"><xref:System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider.SignColumnMasterKeyMetadata%2A> 사용 하 여 enclaves 사용 하려는 해당 키 저장소 공급자에 의해 구현 되어야 [Always Encrypted](https://docs.microsoft.com/sql/relational-databases/security/encryption/always-encrypted-database-engine)합니다.</span><span class="sxs-lookup"><span data-stu-id="06824-127"><xref:System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider.SignColumnMasterKeyMetadata%2A> must be implemented by the corresponding key store providers that wish to use enclaves with [Always Encrypted](https://docs.microsoft.com/sql/relational-databases/security/encryption/always-encrypted-database-engine).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="06824-128">모든 경우</span><span class="sxs-lookup"><span data-stu-id="06824-128">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyColumnMasterKeyMetadata">
      <MemberSignature Language="C#" Value="public virtual bool VerifyColumnMasterKeyMetadata (string masterKeyPath, bool allowEnclaveComputations, byte[] signature);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool VerifyColumnMasterKeyMetadata(string masterKeyPath, bool allowEnclaveComputations, unsigned int8[] signature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider.VerifyColumnMasterKeyMetadata(System.String,System.Boolean,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VerifyColumnMasterKeyMetadata (masterKeyPath As String, allowEnclaveComputations As Boolean, signature As Byte()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool VerifyColumnMasterKeyMetadata(System::String ^ masterKeyPath, bool allowEnclaveComputations, cli::array &lt;System::Byte&gt; ^ signature);" />
      <MemberSignature Language="F#" Value="abstract member VerifyColumnMasterKeyMetadata : string * bool * byte[] -&gt; bool&#xA;override this.VerifyColumnMasterKeyMetadata : string * bool * byte[] -&gt; bool" Usage="sqlColumnEncryptionKeyStoreProvider.VerifyColumnMasterKeyMetadata (masterKeyPath, allowEnclaveComputations, signature)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="masterKeyPath" Type="System.String" Index="0" FrameworkAlternate="netframework-4.7.2;netframework-4.8" />
        <Parameter Name="allowEnclaveComputations" Type="System.Boolean" Index="1" FrameworkAlternate="netframework-4.7.2;netframework-4.8" />
        <Parameter Name="signature" Type="System.Byte[]" Index="2" FrameworkAlternate="netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="masterKeyPath"><span data-ttu-id="06824-129">열 마스터 키 경로</span><span class="sxs-lookup"><span data-stu-id="06824-129">The column master key path.</span></span></param>
        <param name="allowEnclaveComputations"><span data-ttu-id="06824-130">열 마스터 키의 enclave 계산 지원 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="06824-130">Indicates whether the column master key supports enclave computations.</span></span></param>
        <param name="signature"><span data-ttu-id="06824-131">열 마스터 키 메타데이터의 서명</span><span class="sxs-lookup"><span data-stu-id="06824-131">The signature of the column master key metadata.</span></span></param>
        <summary><span data-ttu-id="06824-132">파생 클래스에서 구현되는 경우 지정된 키 경로와 enclave 동작이 있는 열 마스터 키에 대해 지정된 서명이 유효한지 이 메서드를 통해 확인해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="06824-132">When implemented in a derived class, this method is expected to verify the specified signature is valid for the column master key with the specified key path and the specified enclave behavior.</span></span> <span data-ttu-id="06824-133">기본 구현은 NotImplementedException을 throw합니다.</span><span class="sxs-lookup"><span data-stu-id="06824-133">The default implementation throws NotImplementedException.</span></span></summary>
        <returns><span data-ttu-id="06824-134">파생 클래스에서 구현되는 경우 이 메서드가 지정된 서명이 유효하면 true를 반환하거나 지정된 서명이 유효하지 않은 경우 false를 반환해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="06824-134">When implemented in a derived class, the method is expected to return true if the specified signature is valid, or false if the specified signature is not valid.</span></span> <span data-ttu-id="06824-135">기본 구현은 NotImplementedException을 throw합니다.</span><span class="sxs-lookup"><span data-stu-id="06824-135">The default implementation throws NotImplementedException.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>