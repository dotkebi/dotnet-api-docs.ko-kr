<Type Name="CodeTypeDeclaration" FullName="System.CodeDom.CodeTypeDeclaration">
  <Metadata><Meta Name="ms.openlocfilehash" Value="42248b06ac1fa179439385ec22e10bd4ab4b5a36" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56764797" /></Metadata><TypeSignature Language="C#" Value="public class CodeTypeDeclaration : System.CodeDom.CodeTypeMember" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeTypeDeclaration extends System.CodeDom.CodeTypeMember" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.CodeTypeDeclaration" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeTypeDeclaration&#xA;Inherits CodeTypeMember" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeTypeDeclaration : System::CodeDom::CodeTypeMember" />
  <TypeSignature Language="F#" Value="type CodeTypeDeclaration = class&#xA;    inherit CodeTypeMember" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeTypeMember</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="2b21d-101">클래스, 구조체, 인터페이스 또는 열거형의 형식 선언을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-101">Represents a type declaration for a class, structure, interface, or enumeration.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b21d-102"><xref:System.CodeDom.CodeTypeDeclaration> 클래스, 구조체, 인터페이스 또는 열거형을 선언 하는 코드를 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-102"><xref:System.CodeDom.CodeTypeDeclaration> can be used to represent code that declares a class, structure, interface, or enumeration.</span></span> <span data-ttu-id="2b21d-103"><xref:System.CodeDom.CodeTypeDeclaration> 다른 형식 내에 중첩 된 형식을 선언 하 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-103"><xref:System.CodeDom.CodeTypeDeclaration> can be used to declare a type that is nested within another type.</span></span>  
  
 <span data-ttu-id="2b21d-104"><xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> 기본 형식 또는 선언 되는 형식의 기본 형식 속성을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-104">The <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> property specifies the base type or base types of the type being declared.</span></span> <span data-ttu-id="2b21d-105"><xref:System.CodeDom.CodeTypeDeclaration.Members%2A> 속성 메서드, 필드, 속성, 주석 및 기타 형식을 포함할 수 있는 형식 멤버에 포함 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-105">The <xref:System.CodeDom.CodeTypeDeclaration.Members%2A> property contains the type members, which can include methods, fields, properties, comments and other types.</span></span> <span data-ttu-id="2b21d-106">합니다 <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> 속성을 나타냅니다는 <xref:System.Reflection.TypeAttributes> 형식 선언에 대 한 형식의 형식 범주를 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-106">The <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> property indicates the <xref:System.Reflection.TypeAttributes> values for the type declaration, which indicate the type category of the type.</span></span> <span data-ttu-id="2b21d-107">합니다 <xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A>를 <xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A>, 및 <xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A> 메서드 형식이 인지 클래스, 구조체, 열거형 또는 인터페이스 형식 각각 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-107">The <xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A>, and <xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A> methods indicate whether the type is a class, structure, enumeration, or interface type, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b21d-108">일부 프로그래밍 언어 참조 형식 또는 클래스의 선언을 지원합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-108">Some programming languages only support the declaration of reference types, or classes.</span></span> <span data-ttu-id="2b21d-109">인터페이스, 열거형 또는 값 형식 선언에 대 한 지원에 대 한 언어별 CodeDOM 코드 생성기를 확인 하려면 호출을 <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> 적절 한 테스트 방법 <xref:System.CodeDom.Compiler.GeneratorSupport> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-109">To check a language-specific CodeDOM code generator for support for declaring interfaces, enumerations, or value types, call the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method to test for the appropriate <xref:System.CodeDom.Compiler.GeneratorSupport> flags.</span></span> <span data-ttu-id="2b21d-110"><xref:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces> 인터페이스에 대 한 지원을 나타냅니다 <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums> 열거형에 대 한 지원을 나타냅니다 및 <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes> 구조와 같은 값 형식에 대 한 지원을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-110"><xref:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces> indicates support for interfaces, <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums> indicates support for enumerations, and <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes> indicates support for value types such as structures.</span></span>  
  
 <span data-ttu-id="2b21d-111">클래스 또는 구조체 구현을 하나의 완전 한 선언, 빌드할 수도 있고 여러 선언으로 분할할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-111">You can build a class or a structure implementation in one complete declaration, or spread the implementation across multiple declarations.</span></span> <span data-ttu-id="2b21d-112"><xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> 속성 형식 선언 전체 또는 부분 인지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-112">The <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property indicates whether the type declaration is complete or partial.</span></span> <span data-ttu-id="2b21d-113">일부 코드 생성기를 호출 하 여이 지원에 대 한 테스트 해야 하므로 부분 형식 선언을 지원 합니다 <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> 플래그를 사용 하 여 메서드 <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-113">Not all code generators support partial type declarations, so you should test for this support by calling the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method with the flag <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b21d-114">이 예제에서는 <xref:System.CodeDom.CodeTypeDeclaration> 형식을 선언할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-114">This example demonstrates using a <xref:System.CodeDom.CodeTypeDeclaration> to declare a type.</span></span>  
  
 [!code-cpp[CodeTypeDeclarationExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CodeTypeDeclarationExample/CPP/codetypedeclarationexample.cpp#2)]
 [!code-csharp[CodeTypeDeclarationExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CodeTypeDeclarationExample/CS/codetypedeclarationexample.cs#2)]
 [!code-vb[CodeTypeDeclarationExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeTypeDeclarationExample/VB/codetypedeclarationexample.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.CodeDom.CodeTypeDeclarationCollection" />
    <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2b21d-115"><see cref="T:System.CodeDom.CodeTypeDeclaration" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-115">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclaration" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeDeclaration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeDeclaration.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeDeclaration();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2b21d-116"><see cref="T:System.CodeDom.CodeTypeDeclaration" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-116">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclaration" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeDeclaration (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeDeclaration(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.CodeDom.CodeTypeDeclaration : string -&gt; System.CodeDom.CodeTypeDeclaration" Usage="new System.CodeDom.CodeTypeDeclaration name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="2b21d-117">새 형식의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-117">The name for the new type.</span></span></param>
        <summary><span data-ttu-id="2b21d-118">지정된 이름을 사용하여 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-118">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclaration" /> class with the specified name.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseTypes">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReferenceCollection BaseTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeReferenceCollection BaseTypes" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseTypes As CodeTypeReferenceCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeReferenceCollection ^ BaseTypes { System::CodeDom::CodeTypeReferenceCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseTypes : System.CodeDom.CodeTypeReferenceCollection" Usage="System.CodeDom.CodeTypeDeclaration.BaseTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReferenceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2b21d-119">해당 형식의 기본 형식을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-119">Gets the base types of the type.</span></span></summary>
        <value><span data-ttu-id="2b21d-120">형식의 기본 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-120">A <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> object that indicates the base types of the type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b21d-121">기본 형식에서 상속 하지 않습니다 하지만 하나 이상의 인터페이스를 구현 하는 Visual Basic에서 클래스를 생성 하려면 포함 해야 <xref:System.Object> 에서 첫 번째 항목으로는 <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-121">To generate a class in Visual Basic that does not inherit from a base type, but that does implement one or more interfaces, you must include <xref:System.Object> as the first item in the <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b21d-122">.NET framework 버전 2.0 않아도 합니다 <xref:System.CodeDom.CodeTypeReference> 에 대 한 <xref:System.Object> 이미 구현 하는 인터페이스 및 형식에서 참조 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="2b21d-122">In the .NET Framework version 2.0 you do not need the <xref:System.CodeDom.CodeTypeReference> for <xref:System.Object> if the interface you are implementing already exists and you are referring to it by type.</span></span> <span data-ttu-id="2b21d-123">예를 들어, 구현 하는 경우는 <xref:System.Collections.ICollection> 인터페이스와이 문 사용 하 여 컬렉션에 추가할 `ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`, 위의 않아도 `ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))` 문입니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-123">For example, if you are implementing the <xref:System.Collections.ICollection> interface and add it to the collection with this statement, `ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`, you do not need the preceding `ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))` statement.</span></span>  
  
 <span data-ttu-id="2b21d-124">다음 코드에서는 추가 된 <xref:System.CodeDom.CodeTypeReference> 를 참조 하는 컬렉션에 <xref:System.Object>합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-124">The following code illustrates the addition of a <xref:System.CodeDom.CodeTypeReference> to the collection that refers to <xref:System.Object>.</span></span>  
  
```vb  
Dim ctd As New CodeTypeDeclaration("Class1")  
ctd.IsClass = True  
ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))  
ctd.BaseTypes.Add(New CodeTypeReference("Interface1"))  
```  
  
```csharp  
CodeTypeDeclaration ctd = new CodeTypeDeclaration("Class1");  
ctd.IsClass = true;  
ctd.BaseTypes.Add(new CodeTypeReference(typeof(Object)));  
ctd.BaseTypes.Add(new CodeTypeReference("Interface1"));  
```  
  
 <span data-ttu-id="2b21d-125">앞의 코드를 표현한 다음 Visual Basic 코드를 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-125">The preceding code generates the equivalent of the following Visual Basic code.</span></span>  
  
```vb  
Public Class Class1  
Implements Interface1  
```  
  
 <span data-ttu-id="2b21d-126">그러나 실제로 생성 되는 Visual Basic 코드는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-126">However, the Visual Basic code actually generated is the following.</span></span>  
  
```vb  
Public Class Class1  
Inherits Object  
Implements Interface1  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeTypeReferenceCollection" />
      </Docs>
    </Member>
    <Member MemberName="IsClass">
      <MemberSignature Language="C#" Value="public bool IsClass { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClass" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsClass" />
      <MemberSignature Language="VB.NET" Value="Public Property IsClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClass { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsClass : bool with get, set" Usage="System.CodeDom.CodeTypeDeclaration.IsClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2b21d-127">해당 형식이 클래스인지 또는 참조 형식인지를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-127">Gets or sets a value indicating whether the type is a class or reference type.</span></span></summary>
        <value><span data-ttu-id="2b21d-128">형식이 클래스 또는 참조 형식이면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-128"><see langword="true" /> if the type is a class or reference type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public bool IsEnum { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnum" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsEnum" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnum As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnum { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnum : bool with get, set" Usage="System.CodeDom.CodeTypeDeclaration.IsEnum" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2b21d-129">해당 형식이 열거형인지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-129">Gets or sets a value indicating whether the type is an enumeration.</span></span></summary>
        <value><span data-ttu-id="2b21d-130">형식이 열거형이면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-130"><see langword="true" /> if the type is an enumeration; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInterface">
      <MemberSignature Language="C#" Value="public bool IsInterface { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInterface" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsInterface" />
      <MemberSignature Language="VB.NET" Value="Public Property IsInterface As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInterface { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsInterface : bool with get, set" Usage="System.CodeDom.CodeTypeDeclaration.IsInterface" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2b21d-131">해당 형식이 인터페이스인지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-131">Gets or sets a value indicating whether the type is an interface.</span></span></summary>
        <value><span data-ttu-id="2b21d-132">형식이 인터페이스이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-132"><see langword="true" /> if the type is an interface; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPartial">
      <MemberSignature Language="C#" Value="public bool IsPartial { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPartial" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsPartial" />
      <MemberSignature Language="VB.NET" Value="Public Property IsPartial As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPartial { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsPartial : bool with get, set" Usage="System.CodeDom.CodeTypeDeclaration.IsPartial" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2b21d-133">형식 선언이 완전한지 또는 부분적인지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-133">Gets or sets a value indicating whether the type declaration is complete or partial.</span></span></summary>
        <value><span data-ttu-id="2b21d-134">클래스 또는 구조체 선언이 부분적인 구현을 나타내면 <see langword="true" />이고, 완전한 구현이면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-134"><see langword="true" /> if the class or structure declaration is a partial representation of the implementation; <see langword="false" /> if the declaration is a complete implementation of the class or structure.</span></span> <span data-ttu-id="2b21d-135">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-135">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b21d-136">전체 선언 하나에서 클래스 또는 구조체 구현을 수도 있고 여러 선언으로 분할할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-136">You can build a class or structure implementation in one complete declaration, or spread the implementation across multiple declarations.</span></span> <span data-ttu-id="2b21d-137">구현이 하나의 완전 한 형식 선언에서 일반적으로 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-137">Implementations are commonly supplied in one complete type declaration.</span></span> <span data-ttu-id="2b21d-138">이 경우 형식 선언을 설정 <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> 속성을 `false`, 형식 선언의 클래스 또는 구조체 구현에 대 한 모든 세부 정보를 나타내도록 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-138">In this case, set the type declaration <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property to `false`, which indicates that the type declaration represents all details for the class or structure implementation.</span></span>  
  
 <span data-ttu-id="2b21d-139">부분 형식 선언을 쉽게 애플리케이션의 다른 모듈에서 클래스 또는 구조체 구현 다른 부분을 빌드할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-139">A partial type declaration makes it easier to build different portions of a class or structure implementation in different modules of your application.</span></span> <span data-ttu-id="2b21d-140">부분 형식 선언은 하나의 소스 파일에 저장 또는 최종적으로 컴파일되는 함께 결합 된 형식 구현을 구성 하는 여러 소스 파일을 분산할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-140">The partial type declarations can be stored in one source file, or spread across multiple source files that are eventually compiled together to form the combined type implementation.</span></span>  
  
 <span data-ttu-id="2b21d-141">C# 언어에서 클래스의 부분 형식 선언을 지원함와 통해 구조체는 `partial` 키워드입니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-141">The C# language supports partial type declarations of classes and structures through the `partial` keyword.</span></span> <span data-ttu-id="2b21d-142">Visual Basic에서 클래스의 부분 형식 선언을 지원함 및 사용 하 여 구조를 `Partial` 키워드입니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-142">Visual Basic supports partial type declarations of classes and structures with the `Partial` keyword.</span></span> <span data-ttu-id="2b21d-143">일부 코드 생성기를 호출 하 여이 지원에 대 한 테스트 해야 하므로 부분 형식 선언을 지원 합니다 <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> 플래그를 사용 하 여 메서드 <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-143">Not all code generators support partial type declarations, so you should test for this support by calling the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method with the flag <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b21d-144">부분 형식 선언은 클래스와 구조체에 대 한 지원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-144">Partial type declarations are supported for classes and structures.</span></span> <span data-ttu-id="2b21d-145">부분 형식 선언을 열거형 또는 인터페이스를 지정 하는 경우 생성된 된 코드는 컴파일러 오류를 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-145">If you specify a partial type declaration for an enumeration or interface, the generated code produces compiler errors.</span></span>  
  
 <span data-ttu-id="2b21d-146">여러 선언에서 클래스 또는 구조체 구현 제공을 설정 합니다 <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> 속성을 `true` 초기 선언을 및 모든 추가 선언 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-146">When supplying a class or structure implementation across multiple declarations, set the <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property to `true` for the initial declaration and all supplemental declarations.</span></span> <span data-ttu-id="2b21d-147">초기 선언의 형식을 완전히 지정 해야 서명 액세스 한정자를 포함 하 여 상속 된 형식 및 인터페이스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-147">The initial declaration must fully specify the type signature, including access modifiers, inherited types, and implemented interfaces.</span></span> <span data-ttu-id="2b21d-148">추가 선언 형식 시그니처를 다시 지정할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-148">The supplementary declarations do not need to re-specify the type signature.</span></span> <span data-ttu-id="2b21d-149">컴파일러 오류는 일반적으로 보조 선언에서 형식 시그니처를 재정의 하는 경우에 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-149">A compiler error typically results if you redefine the type signature in a supplementary declaration.</span></span>  
  
 <span data-ttu-id="2b21d-150">Visual Studio 2005 디자이너 코드에서 사용자 생성 코드를 분리 하 부분 형식을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-150">Visual Studio 2005 uses partial types to separate user-generated code from designer code.</span></span> <span data-ttu-id="2b21d-151">Visual Basic Windows 애플리케이션 프로젝트의 경우 사용자 코드에서 정규화 되지 않은 partial 클래스에 배치 되는 `Partial` 키워드를 디자이너에서 제공 코드가 있는 partial 클래스에 표시는 `Partial` 키워드입니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-151">In Visual Basic Windows Application projects, the user code is placed in a partial class that is not qualified by the `Partial` keyword; the designer-provided code appears in the partial class that has the `Partial` keyword.</span></span> <span data-ttu-id="2b21d-152">C# 사용자 코드와 디자이너 코드 모두에 표시로 식별 되는 partial 클래스는 `partial` 키워드입니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-152">In C#, both the user code and designer code appear in partial classes identified by the `partial` keyword.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b21d-153">이 예제에서는 <xref:System.CodeDom.CodeTypeDeclaration> 여러 선언에서 클래스 구현을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-153">This example demonstrates using a <xref:System.CodeDom.CodeTypeDeclaration> to supply a class implementation across multiple declarations.</span></span> <span data-ttu-id="2b21d-154">예제 초기 클래스 선언 문을 작성 하 고 설정 합니다 <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> 속성을 `true`.</span><span class="sxs-lookup"><span data-stu-id="2b21d-154">The example builds the initial class declaration statement and sets the <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property to `true`.</span></span>  
  
 [!code-cpp[CodeDomPartialTypeExample#3](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomPartialTypeExample/CPP/source.cpp#3)]
 [!code-csharp[CodeDomPartialTypeExample#3](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomPartialTypeExample/CS/source.cs#3)]
 [!code-vb[CodeDomPartialTypeExample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomPartialTypeExample/VB/source.vb#3)]  
  
 <span data-ttu-id="2b21d-155">예제에서 다른 메서드는 클래스 구현을 확장합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-155">A different method in the example extends the class implementation.</span></span> <span data-ttu-id="2b21d-156">이 메서드는 기존 클래스와 집합에 대 한 새 형식을 선언 문을 작성 합니다 <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> 속성을 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-156">This method builds a new type declaration statement for the existing class and sets the <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property to `true`.</span></span> <span data-ttu-id="2b21d-157">컴파일러는 완전 한 클래스 구현에 함께 두 개의 부분 형식 선언을 결합합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-157">The compiler combines the two partial type declarations together for the complete class implementation.</span></span>  
  
 [!code-cpp[CodeDomPartialTypeExample#7](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomPartialTypeExample/CPP/source.cpp#7)]
 [!code-csharp[CodeDomPartialTypeExample#7](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomPartialTypeExample/CS/source.cs#7)]
 [!code-vb[CodeDomPartialTypeExample#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomPartialTypeExample/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.CodeDom.Compiler.GeneratorSupport.PartialTypes" />
      </Docs>
    </Member>
    <Member MemberName="IsStruct">
      <MemberSignature Language="C#" Value="public bool IsStruct { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStruct" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsStruct" />
      <MemberSignature Language="VB.NET" Value="Public Property IsStruct As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStruct { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsStruct : bool with get, set" Usage="System.CodeDom.CodeTypeDeclaration.IsStruct" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2b21d-158">형식이 값 형식(구조체)인지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-158">Gets or sets a value indicating whether the type is a value type (struct).</span></span></summary>
        <value><span data-ttu-id="2b21d-159">형식이 값 형식이면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-159"><see langword="true" /> if the type is a value type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Members">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeMemberCollection Members { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeMemberCollection Members" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.Members" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Members As CodeTypeMemberCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeMemberCollection ^ Members { System::CodeDom::CodeTypeMemberCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Members : System.CodeDom.CodeTypeMemberCollection" Usage="System.CodeDom.CodeTypeDeclaration.Members" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeMemberCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2b21d-160">표시된 형식에 대한 클래스 멤버의 컬렉션을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-160">Gets the collection of class members for the represented type.</span></span></summary>
        <value><span data-ttu-id="2b21d-161">클래스 멤버를 나타내는 <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-161">A <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> object that indicates the class members.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeTypeMemberCollection" />
      </Docs>
    </Member>
    <Member MemberName="PopulateBaseTypes">
      <MemberSignature Language="C#" Value="public event EventHandler PopulateBaseTypes;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PopulateBaseTypes" />
      <MemberSignature Language="DocId" Value="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PopulateBaseTypes As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PopulateBaseTypes;" />
      <MemberSignature Language="F#" Value="member this.PopulateBaseTypes : EventHandler " Usage="member this.PopulateBaseTypes : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2b21d-162"><see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /> 컬렉션에 처음 액세스할 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-162">Occurs when the <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /> collection is accessed for the first time.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopulateMembers">
      <MemberSignature Language="C#" Value="public event EventHandler PopulateMembers;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PopulateMembers" />
      <MemberSignature Language="DocId" Value="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PopulateMembers As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PopulateMembers;" />
      <MemberSignature Language="F#" Value="member this.PopulateMembers : EventHandler " Usage="member this.PopulateMembers : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2b21d-163"><see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /> 컬렉션에 처음 액세스할 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-163">Occurs when the <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /> collection is accessed for the first time.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeAttributes">
      <MemberSignature Language="C#" Value="public System.Reflection.TypeAttributes TypeAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.TypeAttributes TypeAttributes" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeAttributes As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::TypeAttributes TypeAttributes { System::Reflection::TypeAttributes get(); void set(System::Reflection::TypeAttributes value); };" />
      <MemberSignature Language="F#" Value="member this.TypeAttributes : System.Reflection.TypeAttributes with get, set" Usage="System.CodeDom.CodeTypeDeclaration.TypeAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2b21d-164">형식의 특성을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-164">Gets or sets the attributes of the type.</span></span></summary>
        <value><span data-ttu-id="2b21d-165">형식의 특성을 나타내는 <see cref="T:System.Reflection.TypeAttributes" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-165">A <see cref="T:System.Reflection.TypeAttributes" /> object that indicates the attributes of the type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b21d-166">합니다 <xref:System.Reflection.TypeAttributes> 속성에서 사용 되는 값의 동일한 형식이 포함 <xref:System.Reflection> 런타임에 형식을 조사 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="2b21d-166">The <xref:System.Reflection.TypeAttributes> property contains the same type of values used by <xref:System.Reflection> when investigating a type at run time.</span></span> <span data-ttu-id="2b21d-167">이러한 플래그 많은 일부 언어의 형식 선언 구문은 일치 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-167">Many of these flags do not correspond to the type declaration syntax for some languages.</span></span> <span data-ttu-id="2b21d-168">플래그만 중요 한 것은 결과적으로, <xref:System.CodeDom.CodeTypeDeclaration> : <xref:System.Reflection.TypeAttributes.Class>, <xref:System.Reflection.TypeAttributes.Interface>, <xref:System.Reflection.TypeAttributes.Abstract>, <xref:System.Reflection.TypeAttributes.Sealed>를 <xref:System.Reflection.TypeAttributes.Public>, <xref:System.Reflection.TypeAttributes.NotPublic>를 <xref:System.Reflection.TypeAttributes.NestedPublic>, 및 <xref:System.Reflection.TypeAttributes.NestedPrivate>합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-168">As a result, only the following flags are significant to <xref:System.CodeDom.CodeTypeDeclaration> : <xref:System.Reflection.TypeAttributes.Class>, <xref:System.Reflection.TypeAttributes.Interface>, <xref:System.Reflection.TypeAttributes.Abstract>, <xref:System.Reflection.TypeAttributes.Sealed>, <xref:System.Reflection.TypeAttributes.Public>, <xref:System.Reflection.TypeAttributes.NotPublic>, <xref:System.Reflection.TypeAttributes.NestedPublic>, and <xref:System.Reflection.TypeAttributes.NestedPrivate>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b21d-169">플래그와 같은 일부 <xref:System.Reflection.TypeAttributes.Abstract> 플래그의 의미와 겹칠 합니다 <xref:System.CodeDom.CodeTypeMember.Attributes%2A> 속성을 <xref:System.CodeDom.CodeTypeDeclaration> 에서 상속 된 <xref:System.CodeDom.CodeTypeMember>합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-169">Some of the flags such as <xref:System.Reflection.TypeAttributes.Abstract> overlap with the meaning of flags in the <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property of <xref:System.CodeDom.CodeTypeDeclaration> that is inherited from <xref:System.CodeDom.CodeTypeMember>.</span></span> <span data-ttu-id="2b21d-170"><xref:System.CodeDom.CodeTypeMember.Attributes%2A> 속성의 부작용은는 <xref:System.CodeDom.CodeTypeDeclaration> 클래스에서 상속 <xref:System.CodeDom.CodeTypeMember> 클래스는 중첩 될 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-170">The <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property is a side effect of the <xref:System.CodeDom.CodeTypeDeclaration> class inheriting from <xref:System.CodeDom.CodeTypeMember> so that classes can be nested.</span></span> <span data-ttu-id="2b21d-171">플래그를 <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> 속성의 플래그를 대신 사용 해야는 <xref:System.CodeDom.CodeTypeMember.Attributes%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-171">The flags in the <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> property should be used instead of the flags in the <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b21d-172">표시 유형 플래그를 설정 하기 위한 패턴 (단어를 포함 하는 플래그 `Public` 또는 `Nested`)를 마스킹 모든 표시 유형 플래그를 사용 하 여는 <xref:System.Reflection.TypeAttributes.VisibilityMask> 원하는 표시 유형 플래그를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-172">The pattern for setting the visibility flags (flags containing the words `Public` or `Nested`) is to mask out all visibility flags using the <xref:System.Reflection.TypeAttributes.VisibilityMask> and then set the desired visibility flag.</span></span> <span data-ttu-id="2b21d-173">예를 들어 C# 코드 문을 식별 하는 <xref:System.CodeDom.CodeTypeDeclaration> (라는 `cd`) 하는 내부 클래스는 `cd.TypeAttributes = (cd.TypeAttributes & ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-173">For example, the C# code statement to identify the <xref:System.CodeDom.CodeTypeDeclaration> (named `cd`) as an internal class is `cd.TypeAttributes = (cd.TypeAttributes & ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`.</span></span>  <span data-ttu-id="2b21d-174">Visual Basic에서 동일한 값을 설정 하는 코드는 `cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-174">The code to set the same value in Visual Basic is `cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`.</span></span> <span data-ttu-id="2b21d-175">설정 된 <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> 표시 유형 플래그를 직접 속성 (`cd.TypeAttributes = TypeAttributes.NotPublic;`) 설정 되어 있는 다른 모든 플래그를 지웁니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-175">Setting the <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> property directly to a visibility flag (`cd.TypeAttributes = TypeAttributes.NotPublic;`) erases all other flags that might be set.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="TypeParameters">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeParameterCollection TypeParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeParameterCollection TypeParameters" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.TypeParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeParameters As CodeTypeParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeParameterCollection ^ TypeParameters { System::CodeDom::CodeTypeParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeParameters : System.CodeDom.CodeTypeParameterCollection" Usage="System.CodeDom.CodeTypeDeclaration.TypeParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2b21d-176">형식 선언에 대한 형식 매개 변수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-176">Gets the type parameters for the type declaration.</span></span></summary>
        <value><span data-ttu-id="2b21d-177">형식 선언에 대한 형식 매개 변수가 들어 있는 <see cref="T:System.CodeDom.CodeTypeParameterCollection" />입니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-177">A <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> that contains the type parameters for the type declaration.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b21d-178">제네릭 형식 선언에 하나 또는 자세히 지정 되지 않은 형식 매개 변수 라고 하는 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-178">A generic type declaration contains one or more unspecified types known as type parameters.</span></span> <span data-ttu-id="2b21d-179">형식 매개 변수 이름은 제네릭 선언의 본문 안에 있는 형식을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-179">A type parameter name stands for the type within the body of the generic declaration.</span></span> <span data-ttu-id="2b21d-180">예를 들어 제네릭 선언에는 <xref:System.Collections.Generic.List%601> 형식 매개 변수를 포함 하는 클래스 `T`합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-180">For example, the generic declaration for the <xref:System.Collections.Generic.List%601> class contains the type parameter `T`.</span></span>  
  
 <span data-ttu-id="2b21d-181">제네릭에 대 한 자세한 내용은 참조 하세요. [.NET Framework 클래스 라이브러리의 제네릭](~/docs/csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="2b21d-181">For more information on generics, see [Generics in the .NET Framework Class Library](~/docs/csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeTypeParameterCollection" />
        <altmember cref="T:System.CodeDom.CodeTypeParameter" />
      </Docs>
    </Member>
  </Members>
</Type>