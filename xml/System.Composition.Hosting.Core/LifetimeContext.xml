<Type Name="LifetimeContext" FullName="System.Composition.Hosting.Core.LifetimeContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="83777aa7a78ab4e6309de80c934ef73bbabb1983" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56793684" /></Metadata><TypeSignature Language="C#" Value="public sealed class LifetimeContext : System.Composition.CompositionContext, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LifetimeContext extends System.Composition.CompositionContext implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Composition.Hosting.Core.LifetimeContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LifetimeContext&#xA;Inherits CompositionContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class LifetimeContext sealed : System::Composition::CompositionContext, IDisposable" />
  <TypeSignature Language="F#" Value="type LifetimeContext = class&#xA;    inherit CompositionContext&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Composition.Hosting</AssemblyName>
    <AssemblyVersion>1.0.31.0</AssemblyVersion>
    <AssemblyVersion>1.0.32.0</AssemblyVersion>
    <AssemblyVersion>1.0.33.0</AssemblyVersion>
    <AssemblyVersion>1.0.34.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Composition.CompositionContext</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="810e0-101">수명 트리에 있는 노드를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-101">Represents a node in the lifetime tree.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="810e0-102"><xref:System.Composition.Hosting.Core.LifetimeContext> 개체는 공유 파트에 대 한 공유의 단위입니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-102">The <xref:System.Composition.Hosting.Core.LifetimeContext> object is the unit of sharing for shared parts.</span></span> <span data-ttu-id="810e0-103">바인딩된 부분 삭제를 제어 하 고 기존 컴퍼지션 작업의 일부로 또는 새 컴퍼지션 작업을 기준으로 인스턴스를 검색 하려면 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-103">It controls the disposal of bound parts and can be used to retrieve instances, either as part of an existing composition operation or as the basis of a new composition operation.</span></span> <span data-ttu-id="810e0-104">특정 공유 경계에 의해 제한 되는 파트를 포함 하는 개별 수명 컨텍스트를 표시할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-104">An individual lifetime context can be marked to contain parts that are constrained by particular sharing boundaries.</span></span>

<span data-ttu-id="810e0-105">이 개체는 두 가지 독립적으로 보호 된 공유 상태를 포함: 파트 인스턴스를 공유 하 고 파트 인스턴스를 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-105">This object contains two pieces of independently protected shared state: shared part instances and bound part instances.</span></span> <span data-ttu-id="810e0-106">공유 파트 인스턴스를 잠금 해제, 읽을 수 이며 삭제 중에 추가 되 면 문제가 되지는지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-106">A shared part instance is lock-free, readable, and does not result in issues if it is added to during disposal.</span></span> <span data-ttu-id="810e0-107">자체 잠기는으로 보호 됩니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-107">It is protected by being locked itself.</span></span> <span data-ttu-id="810e0-108">활성화 논리는 필연적이 잠금 상태에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-108">Activation logic is unavoidably called under this lock.</span></span> <span data-ttu-id="810e0-109">바인딩된 파트 인스턴스를 항상 잠금으로 보호 됩니다 <see langword="this" />를 삭제 한 후에 기록 되지 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-109">A bound part instance is always protected by locking <see langword="this" />, and should never be written to after disposal.</span></span> <span data-ttu-id="810e0-110">바인딩된 파트 인스턴스를로 <see langword="null" /> 잠금에 <xref:System.Composition.Hosting.Core.LifetimeContext.Dispose> 메서드.</span><span class="sxs-lookup"><span data-stu-id="810e0-110">A bound part instance is set to <see langword="null" /> under a lock in the <xref:System.Composition.Hosting.Core.LifetimeContext.Dispose> method.</span></span> <span data-ttu-id="810e0-111">작성 된 후에 바인딩된 파트 인스턴스를 허용 되는 경우 해제 되지 삭제 가능한 파트에 초래 합니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-111">If writing were allowed after disposal for a bound part instance, it would result in disposable parts not being released.</span></span> <span data-ttu-id="810e0-112">바인딩된 파트의 dispose 메서드는 잠금을 외부에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-112">The dispose method on a bound part is called outside of the lock.</span></span> 
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBoundInstance">
      <MemberSignature Language="C#" Value="public void AddBoundInstance (IDisposable instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddBoundInstance(class System.IDisposable instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.AddBoundInstance(System.IDisposable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBoundInstance (instance As IDisposable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBoundInstance(IDisposable ^ instance);" />
      <MemberSignature Language="F#" Value="member this.AddBoundInstance : IDisposable -&gt; unit" Usage="lifetimeContext.AddBoundInstance instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.IDisposable" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="810e0-113">파트입니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-113">The part.</span></span></param>
        <summary><span data-ttu-id="810e0-114">삭제 가능한 파트의 수명을 이 수명 컨텍스트에 바인딩합니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-114">Binds the lifetime of a disposable part to this lifetime context.</span></span></summary>
        <remarks></remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="810e0-115">삭제된 개체에서 작업이 수행되었습니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-115">The operation was performed on a disposed object.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AllocateSharingId">
      <MemberSignature Language="C#" Value="public static int AllocateSharingId ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 AllocateSharingId() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.AllocateSharingId" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AllocateSharingId () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AllocateSharingId();" />
      <MemberSignature Language="F#" Value="static member AllocateSharingId : unit -&gt; int" Usage="System.Composition.Hosting.Core.LifetimeContext.AllocateSharingId " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="810e0-116">공유 파트 인스턴스를 찾는 데 사용할 수 있는 식별자를 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-116">Generates an identifier that can be used to locate shared part instances.</span></span></summary>
        <returns><span data-ttu-id="810e0-117">새 고유 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-117">A new unique identifier.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="lifetimeContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="810e0-118">수명 컨텍스트와 여기에 바인딩된 파트 인스턴스를 모두 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-118">Releases the lifetime context and any part instances bound to it.</span></span></summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="FindContextWithin">
      <MemberSignature Language="C#" Value="public System.Composition.Hosting.Core.LifetimeContext FindContextWithin (string sharingBoundary);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Hosting.Core.LifetimeContext FindContextWithin(string sharingBoundary) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.FindContextWithin(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindContextWithin (sharingBoundary As String) As LifetimeContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Hosting::Core::LifetimeContext ^ FindContextWithin(System::String ^ sharingBoundary);" />
      <MemberSignature Language="F#" Value="member this.FindContextWithin : string -&gt; System.Composition.Hosting.Core.LifetimeContext" Usage="lifetimeContext.FindContextWithin sharingBoundary" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Hosting.Core.LifetimeContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sharingBoundary" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sharingBoundary"><span data-ttu-id="810e0-119">내부에서 수명 컨텍스트를 찾는 공유 경계입니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-119">The sharing boundary to find a lifetime context within.</span></span></param>
        <summary><span data-ttu-id="810e0-120">지정된 모든 공유 경계 내에서 가장 넓은 수명 컨텍스트를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-120">Finds the broadest lifetime context within all of the specified sharing boundaries.</span></span></summary>
        <returns><span data-ttu-id="810e0-121">지정된 모든 공유 경계 내에서 가장 넓은 수명 컨텍스트입니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-121">The broadest lifetime context within all of the specified sharing boundaries.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="810e0-122">현재 루트 경계 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-122">Currently, the root cannot be a boundary.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrCreate">
      <MemberSignature Language="C#" Value="public object GetOrCreate (int sharingId, System.Composition.Hosting.Core.CompositionOperation operation, System.Composition.Hosting.Core.CompositeActivator creator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetOrCreate(int32 sharingId, class System.Composition.Hosting.Core.CompositionOperation operation, class System.Composition.Hosting.Core.CompositeActivator creator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.GetOrCreate(System.Int32,System.Composition.Hosting.Core.CompositionOperation,System.Composition.Hosting.Core.CompositeActivator)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOrCreate (sharingId As Integer, operation As CompositionOperation, creator As CompositeActivator) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetOrCreate(int sharingId, System::Composition::Hosting::Core::CompositionOperation ^ operation, System::Composition::Hosting::Core::CompositeActivator ^ creator);" />
      <MemberSignature Language="F#" Value="member this.GetOrCreate : int * System.Composition.Hosting.Core.CompositionOperation * System.Composition.Hosting.Core.CompositeActivator -&gt; obj" Usage="lifetimeContext.GetOrCreate (sharingId, operation, creator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sharingId" Type="System.Int32" />
        <Parameter Name="operation" Type="System.Composition.Hosting.Core.CompositionOperation" />
        <Parameter Name="creator" Type="System.Composition.Hosting.Core.CompositeActivator" />
      </Parameters>
      <Docs>
        <param name="sharingId"><span data-ttu-id="810e0-123">공유 파트의 ID입니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-123">The ID of the shared part.</span></span></param>
        <param name="operation"><span data-ttu-id="810e0-124">필요한 경우 파트를 만들 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-124">An operation in which to create a part, if necessary.</span></span></param>
        <param name="creator"><span data-ttu-id="810e0-125">필요한 경우에 새 파트 인스턴스를 활성화할 수 있는 활성기입니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-125">An activator that can activate a new part instance, if necessary.</span></span></param>
        <summary><span data-ttu-id="810e0-126">지정된 ID 사용하여 공유 파트 인스턴스를 검색하거나, 파트 인스턴스를 찾을 수 없는 경우 지정된 작업 내에서 지정된 생성자를 사용하여 파트 인스턴스를 만들고 공유합니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-126">Retrieves a shared part instance with the specified ID, or if the part instance can not be found, creates and shares a part instance using the specified creator within the specified operation.</span></span></summary>
        <returns><span data-ttu-id="810e0-127">새로운 파트 또는 검색된 파트입니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-127">The new or retrieved part.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="810e0-128">이 방법은 파트 인스턴스에 이미 있는 경우 잠금 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-128">This method is lock-free if the part instance already exists.</span></span> <span data-ttu-id="810e0-129">파트 인스턴스를 만들어야 하는 경우 잠금이 수행 될 하는 (동시 읽기 작업은 계속 안전 하 고 잠금 해제 되도록)이이 메서드를 사용 하는 다른 쓰기 serialize 됩니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-129">If the part instance must be created, a lock will be taken that will serialize other writes that use this method (concurrent reads will continue to be safe and lock-free).</span></span> <span data-ttu-id="810e0-130">것이 중요 하는 컴퍼지션 및 따라서 잠금 획득은 엄격 하 게 리프-에-수명 트리 루트입니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-130">It is important that the composition, and thus lock acquisition, is strictly leaf-to-root in the lifetime tree.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="lifetimeContext.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="810e0-131">이 <see cref="T:System.Composition.Hosting.Core.LifetimeContext" /> 개체의 문자열 표현을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-131">Returns the string representation of this <see cref="T:System.Composition.Hosting.Core.LifetimeContext" /> object.</span></span></summary>
        <returns><span data-ttu-id="810e0-132">이 <see cref="T:System.Composition.Hosting.Core.LifetimeContext" /> 개체의 문자열 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-132">The string representation of this <see cref="T:System.Composition.Hosting.Core.LifetimeContext" /> object.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetExport">
      <MemberSignature Language="C#" Value="public override bool TryGetExport (System.Composition.Hosting.Core.CompositionContract contract, out object export);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool TryGetExport(class System.Composition.Hosting.Core.CompositionContract contract, [out] object&amp; export) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.TryGetExport(System.Composition.Hosting.Core.CompositionContract,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function TryGetExport (contract As CompositionContract, ByRef export As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool TryGetExport(System::Composition::Hosting::Core::CompositionContract ^ contract, [Runtime::InteropServices::Out] System::Object ^ % export);" />
      <MemberSignature Language="F#" Value="override this.TryGetExport : System.Composition.Hosting.Core.CompositionContract *  -&gt; bool" Usage="lifetimeContext.TryGetExport (contract, export)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contract" Type="System.Composition.Hosting.Core.CompositionContract" />
        <Parameter Name="export" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="contract"><span data-ttu-id="810e0-133">계약입니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-133">The contract.</span></span></param>
        <param name="export"><span data-ttu-id="810e0-134">가능한 경우 이 메서드가 반환된 후 계약 인스턴스를 포함합니다. 그렇지 않으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-134">After this method returns, contains the contract instance if available; otherwise, <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="810e0-135">컴퍼지션 컨텍스트에서 계약 인스턴스를 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-135">Retrieves a contract instance from the composition context.</span></span></summary>
        <returns><span data-ttu-id="810e0-136">인스턴스가 검색되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="810e0-136"><see langword="true" /> if the instance was retrieved; otherwise, <see langword="false" />.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
  </Members>
</Type>