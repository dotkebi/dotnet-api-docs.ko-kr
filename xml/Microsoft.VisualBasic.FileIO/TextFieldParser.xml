<Type Name="TextFieldParser" FullName="Microsoft.VisualBasic.FileIO.TextFieldParser">
  <Metadata><Meta Name="ms.openlocfilehash" Value="251998b4c7a9190590f9c7993a8dcb43382f15e8" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56393140" /></Metadata><TypeSignature Language="C#" Value="public class TextFieldParser : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi TextFieldParser extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
  <TypeSignature Language="VB.NET" Value="Public Class TextFieldParser&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextFieldParser : IDisposable" />
  <TypeSignature Language="F#" Value="type TextFieldParser = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="9b70f-101">구조화된 텍스트 파일을 구문 분석하기 위한 메서드와 속성을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-101">Provides methods and properties for parsing structured text files.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b70f-102">`TextFieldParser` 구조화 된 텍스트 파일 구문 분석에 대 한 속성 및 메서드를 제공 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-102">The `TextFieldParser` object provides methods and properties for parsing structured text files.</span></span> <span data-ttu-id="9b70f-103">사용 하 여 텍스트 파일을 구문 분석 합니다 `TextFieldParser` 텍스트 파일을 반복 하는 것과 비슷합니다 하는 동안는 `ReadFields` 텍스트 필드를 추출 하는 메서드는 문자열을 분할 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-103">Parsing a text file with the `TextFieldParser` is similar to iterating over a text file, while the `ReadFields` method to extract fields of text is similar to splitting the strings.</span></span>  
  
 <span data-ttu-id="9b70f-104">`TextFieldParser` 두 가지 유형의 파일을 구문 분석할 수 있습니다: 구분 기호로 분리 된 파일 인지 또는 고정 너비입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-104">The `TextFieldParser` can parse two types of files: delimited or fixed-width.</span></span> <span data-ttu-id="9b70f-105">일부 속성을 같은 `Delimiters` 및 `HasFieldsEnclosedInQuotes` 만 의미 하는 동안 구분 기호로 분리 된 파일을 사용 하는 경우는 `FieldWidths` 속성은 고정 너비 파일을 사용 하는 경우에 의미가.</span><span class="sxs-lookup"><span data-stu-id="9b70f-105">Some properties, such as `Delimiters` and `HasFieldsEnclosedInQuotes` are meaningful only when working with delimited files, while the `FieldWidths` property is meaningful only when working with fixed-width files.</span></span>  
  
 <span data-ttu-id="9b70f-106">다음 표에서 관련 된 작업의 예제는 `Microsoft.VisualBasic.FileIO.TextFieldParser` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-106">The following table lists examples of tasks involving the `Microsoft.VisualBasic.FileIO.TextFieldParser` object.</span></span>  
  
|<span data-ttu-id="9b70f-107">대상</span><span class="sxs-lookup"><span data-stu-id="9b70f-107">To</span></span>|<span data-ttu-id="9b70f-108">참조</span><span class="sxs-lookup"><span data-stu-id="9b70f-108">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="9b70f-109">구분 기호로 분리 된 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-109">Read from a delimited text file</span></span>|[<span data-ttu-id="9b70f-110">방법: 쉼표로 구분된 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-110">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="9b70f-111">고정 너비 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-111">Read from a fixed-width text file</span></span>|[<span data-ttu-id="9b70f-112">방법: 고정 너비 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-112">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|<span data-ttu-id="9b70f-113">여러 형식의 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-113">Read from a text file with multiple formats</span></span>|[<span data-ttu-id="9b70f-114">방법: 여러 형식의 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-114">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="9b70f-115">이 예제에서는 탭으로 구분 된 텍스트 파일을 구문 분석 `Bigfile`합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-115">This example parses through a tab-delimited text file, `Bigfile`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#17)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
    <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="9b70f-116">개체(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-116">Objects (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="9b70f-117">TextFieldParser 개체를 사용하여 텍스트 파일 구문 분석</span><span class="sxs-lookup"><span data-stu-id="9b70f-117">Parsing Text Files with the TextFieldParser Object</span></span></related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/2ewecs64(v=vs.85)"><span data-ttu-id="9b70f-118">예외 문제 해결: Microsoft.VisualBasic.FileIO.TextFieldParser.MalformedLineException</span><span class="sxs-lookup"><span data-stu-id="9b70f-118">Troubleshooting Exceptions: Microsoft.VisualBasic.FileIO.TextFieldParser.MalformedLineException</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9b70f-119"><see langword="TextFieldParser" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-119">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="9b70f-120">개체(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-120">Objects (Visual Basic)</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.Stream -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="9b70f-121"><see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="9b70f-121"><see cref="T:System.IO.Stream" />.</span></span> <span data-ttu-id="9b70f-122">구문 분석할 스트림입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-122">The stream to be parsed.</span></span></param>
        <summary><span data-ttu-id="9b70f-123"><see langword="TextFieldParser" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-123">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b70f-124">새로 만듭니다 `TextFieldParser` 파일을 구문 분석 하거나 스트림으로 개체를 나타내는 `stream` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-124">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9b70f-125"><paramref name="stream" />가 <see langword="Nothing" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-125"><paramref name="stream" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9b70f-126"><paramref name="stream" />을 읽을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-126"><paramref name="stream" /> cannot be read from.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="9b70f-127">개체(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-127">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="9b70f-128">방법: Visual Basic에서 쉼표로 구분 된 텍스트 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-128">How to: Read From Comma-Delimited Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="9b70f-129">방법: Visual Basic에서 고정 너비 텍스트 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-129">How to: Read From Fixed-width Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="9b70f-130">방법: Visual Basic에서 여러 형식의 텍스트 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-130">How to: Read From Text Files with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::TextReader ^ reader);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.TextReader -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser reader" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="9b70f-131"><see cref="T:System.IO.TextReader" />.</span><span class="sxs-lookup"><span data-stu-id="9b70f-131"><see cref="T:System.IO.TextReader" />.</span></span> <span data-ttu-id="9b70f-132">구분 분석할 <see cref="T:System.IO.TextReader" /> 스트림입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-132">The <see cref="T:System.IO.TextReader" /> stream to be parsed.</span></span></param>
        <summary><span data-ttu-id="9b70f-133"><see langword="TextFieldParser" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-133">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b70f-134">새로 만듭니다 `TextFieldParser` 파일을 구문 분석 하거나 스트림으로 개체를 나타내는 `reader` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-134">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `reader` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9b70f-135"><paramref name="reader" />가 <see langword="Nothing" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-135"><paramref name="reader" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="9b70f-136">개체(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-136">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="9b70f-137">방법: Visual Basic에서 쉼표로 구분 된 텍스트 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-137">How to: Read From Comma-Delimited Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="9b70f-138">방법: Visual Basic에서 고정 너비 텍스트 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-138">How to: Read From Fixed-width Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="9b70f-139">방법: Visual Basic에서 여러 형식의 텍스트 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-139">How to: Read From Text Files with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : string -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="9b70f-140"><see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="9b70f-140"><see langword="String" />.</span></span> <span data-ttu-id="9b70f-141">구문 분석할 파일의 전체 경로입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-141">The complete path of the file to be parsed.</span></span></param>
        <summary><span data-ttu-id="9b70f-142"><see langword="TextFieldParser" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-142">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b70f-143">새로 만듭니다 `TextFieldParser` 하 여 지정 된 파일을 구문 분석할 개체는 `path` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-143">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9b70f-144"><paramref name="path" />이 빈 문자열인 경우</span><span class="sxs-lookup"><span data-stu-id="9b70f-144"><paramref name="path" /> is an empty string.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="9b70f-145">개체(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-145">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="9b70f-146">방법: Visual Basic에서 쉼표로 구분 된 텍스트 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-146">How to: Read From Comma-Delimited Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="9b70f-147">방법: Visual Basic에서 고정 너비 텍스트 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-147">How to: Read From Fixed-width Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="9b70f-148">방법: Visual Basic에서 여러 형식의 텍스트 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-148">How to: Read From Text Files with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.Stream * System.Text.Encoding -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (stream, defaultEncoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="9b70f-149"><see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="9b70f-149"><see cref="T:System.IO.Stream" />.</span></span> <span data-ttu-id="9b70f-150">구문 분석할 스트림입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-150">The stream to be parsed.</span></span></param>
        <param name="defaultEncoding"><span data-ttu-id="9b70f-151"><see cref="T:System.Text.Encoding" />.</span><span class="sxs-lookup"><span data-stu-id="9b70f-151"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="9b70f-152">파일에서 인코딩을 확인할 수 없는 경우 사용할 문자 인코딩입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-152">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="9b70f-153">기본값은 <see cref="P:System.Text.Encoding.UTF8" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-153">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <summary><span data-ttu-id="9b70f-154"><see langword="TextFieldParser" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-154">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b70f-155">새로 만듭니다 `TextFieldParser` 파일을 구문 분석 하거나 스트림으로 개체를 나타내는 `stream` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-155">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="9b70f-156">문자 집합을 특정 문화권 설정을 사용 하 여 컴파일하고 하면 서로 다른 문화권 설정 사용 하 여 동일한 문자 검색 문자를 해석할 수 없어 및 throw 예외가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-156">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9b70f-157"><paramref name="stream" /> 또는 <paramref name="defaultEncoding" />가 <see langword="Nothing" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9b70f-157"><paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9b70f-158"><paramref name="stream" />을 읽을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-158"><paramref name="stream" /> cannot be read from.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="9b70f-159">개체(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-159">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="9b70f-160">방법: Visual Basic에서 쉼표로 구분 된 텍스트 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-160">How to: Read From Comma-Delimited Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="9b70f-161">방법: Visual Basic에서 고정 너비 텍스트 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-161">How to: Read From Fixed-width Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="9b70f-162">방법: Visual Basic에서 여러 형식의 텍스트 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-162">How to: Read From Text Files with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path, System.Text.Encoding defaultEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, defaultEncoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path, System::Text::Encoding ^ defaultEncoding);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : string * System.Text.Encoding -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (path, defaultEncoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="9b70f-163"><see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="9b70f-163"><see langword="String" />.</span></span> <span data-ttu-id="9b70f-164">구문 분석할 파일의 전체 경로입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-164">The complete path of the file to be parsed.</span></span></param>
        <param name="defaultEncoding"><span data-ttu-id="9b70f-165"><see cref="T:System.Text.Encoding" />.</span><span class="sxs-lookup"><span data-stu-id="9b70f-165"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="9b70f-166">파일에서 인코딩을 확인할 수 없는 경우 사용할 문자 인코딩입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-166">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="9b70f-167">기본값은 <see cref="P:System.Text.Encoding.UTF8" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-167">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <summary><span data-ttu-id="9b70f-168"><see langword="TextFieldParser" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-168">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b70f-169">새로 만듭니다 `TextFieldParser` 하 여 지정 된 파일을 구문 분석할 개체는 `path` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-169">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="9b70f-170">문자 집합을 특정 문화권 설정을 사용 하 여 컴파일하고 하면 서로 다른 문화권 설정 사용 하 여 동일한 문자 검색 문자를 해석할 수 없어 및 throw 예외가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-170">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9b70f-171"><paramref name="path" />가 빈 문자열이거나 <paramref name="defaultEncoding" />이 <see langword="Nothing" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-171"><paramref name="path" /> is an empty string or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="9b70f-172">개체(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-172">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="9b70f-173">방법: Visual Basic에서 쉼표로 구분 된 텍스트 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-173">How to: Read From Comma-Delimited Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="9b70f-174">방법: Visual Basic에서 고정 너비 텍스트 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-174">How to: Read From Fixed-width Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="9b70f-175">방법: Visual Basic에서 여러 형식의 텍스트 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-175">How to: Read From Text Files with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.Stream * System.Text.Encoding * bool -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (stream, defaultEncoding, detectEncoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="9b70f-176"><see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="9b70f-176"><see cref="T:System.IO.Stream" />.</span></span> <span data-ttu-id="9b70f-177">구문 분석할 스트림입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-177">The stream to be parsed.</span></span></param>
        <param name="defaultEncoding"><span data-ttu-id="9b70f-178"><see cref="T:System.Text.Encoding" />.</span><span class="sxs-lookup"><span data-stu-id="9b70f-178"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="9b70f-179">파일에서 인코딩을 확인할 수 없는 경우 사용할 문자 인코딩입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-179">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="9b70f-180">기본값은 <see cref="P:System.Text.Encoding.UTF8" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-180">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <param name="detectEncoding"><span data-ttu-id="9b70f-181"><see langword="Boolean" />.</span><span class="sxs-lookup"><span data-stu-id="9b70f-181"><see langword="Boolean" />.</span></span> <span data-ttu-id="9b70f-182">파일의 시작 부분에서 바이트 순서 표시를 찾을지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-182">Indicates whether to look for byte order marks at the beginning of the file.</span></span> <span data-ttu-id="9b70f-183">기본값은 <see langword="True" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-183">Default is <see langword="True" />.</span></span></param>
        <summary><span data-ttu-id="9b70f-184"><see langword="TextFieldParser" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-184">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b70f-185">새로 만듭니다 `TextFieldParser` 파일을 구문 분석 하거나 스트림으로 개체를 나타내는 `stream` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-185">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 <span data-ttu-id="9b70f-186">경우는 `detectEncoding` 매개 변수는 `True`,이 생성자를 파일이 나 스트림에의 처음 세 바이트를 확인 하 여 인코딩을 검색 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-186">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="9b70f-187">자동으로 인식 u t F-8, little endian Unicode 및 big endian 유니코드 텍스트 파일을 적절 한 바이트 순서 표시를 사용 하 여 시작 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="9b70f-187">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="9b70f-188">그렇지 않으면에서 지정 된 인코딩을 `defaultEncoding` 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-188">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="9b70f-189">문자 집합을 특정 문화권 설정을 사용 하 여 컴파일하고 하면 서로 다른 문화권 설정 사용 하 여 동일한 문자 검색 문자를 해석할 수 없어 및 throw 예외가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-189">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9b70f-190"><paramref name="stream" /> 또는 <paramref name="defaultEncoding" />가 <see langword="Nothing" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9b70f-190"><paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9b70f-191"><paramref name="stream" />을 읽을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-191"><paramref name="stream" /> cannot be read from.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="9b70f-192">개체(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-192">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="9b70f-193">방법: Visual Basic에서 쉼표로 구분 된 텍스트 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-193">How to: Read From Comma-Delimited Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="9b70f-194">방법: Visual Basic에서 고정 너비 텍스트 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-194">How to: Read From Fixed-width Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="9b70f-195">방법: Visual Basic에서 여러 형식의 텍스트 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-195">How to: Read From Text Files with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path, System.Text.Encoding defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, defaultEncoding As Encoding, detectEncoding As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path, System::Text::Encoding ^ defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : string * System.Text.Encoding * bool -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (path, defaultEncoding, detectEncoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="9b70f-196"><see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="9b70f-196"><see langword="String" />.</span></span> <span data-ttu-id="9b70f-197">구문 분석할 파일의 전체 경로입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-197">The complete path of the file to be parsed.</span></span></param>
        <param name="defaultEncoding"><span data-ttu-id="9b70f-198"><see cref="T:System.Text.Encoding" />.</span><span class="sxs-lookup"><span data-stu-id="9b70f-198"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="9b70f-199">파일에서 인코딩을 확인할 수 없는 경우 사용할 문자 인코딩입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-199">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="9b70f-200">기본값은 <see cref="P:System.Text.Encoding.UTF8" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-200">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <param name="detectEncoding"><span data-ttu-id="9b70f-201"><see langword="Boolean" />.</span><span class="sxs-lookup"><span data-stu-id="9b70f-201"><see langword="Boolean" />.</span></span> <span data-ttu-id="9b70f-202">파일의 시작 부분에서 바이트 순서 표시를 찾을지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-202">Indicates whether to look for byte order marks at the beginning of the file.</span></span> <span data-ttu-id="9b70f-203">기본값은 <see langword="True" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-203">Default is <see langword="True" />.</span></span></param>
        <summary><span data-ttu-id="9b70f-204"><see langword="TextFieldParser" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-204">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b70f-205">새로 만듭니다 `TextFieldParser` 하 여 지정 된 파일을 구문 분석할 개체는 `path` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-205">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
 <span data-ttu-id="9b70f-206">경우는 `detectEncoding` 매개 변수는 `True`,이 생성자를 파일이 나 스트림에의 처음 세 바이트를 확인 하 여 인코딩을 검색 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-206">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="9b70f-207">자동으로 인식 u t F-8, little endian Unicode 및 big endian 유니코드 텍스트 파일을 적절 한 바이트 순서 표시를 사용 하 여 시작 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="9b70f-207">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="9b70f-208">그렇지 않으면에서 지정 된 인코딩을 `defaultEncoding` 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-208">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="9b70f-209">문자 집합을 특정 문화권 설정을 사용 하 여 컴파일하고 하면 서로 다른 문화권 설정 사용 하 여 동일한 문자 검색 문자를 해석할 수 없어 및 throw 예외가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-209">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9b70f-210"><paramref name="path" />가 빈 문자열이거나 <paramref name="defaultEncoding" />이 <see langword="Nothing" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-210"><paramref name="path" /> is an empty string or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="9b70f-211">개체(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-211">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="9b70f-212">방법: Visual Basic에서 쉼표로 구분 된 텍스트 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-212">How to: Read From Comma-Delimited Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="9b70f-213">방법: Visual Basic에서 고정 너비 텍스트 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-213">How to: Read From Fixed-width Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="9b70f-214">방법: Visual Basic에서 여러 형식의 텍스트 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-214">How to: Read From Text Files with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding, bool detectEncoding, bool leaveOpen);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.Stream * System.Text.Encoding * bool * bool -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (stream, defaultEncoding, detectEncoding, leaveOpen)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
        <Parameter Name="leaveOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="9b70f-215"><see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="9b70f-215"><see cref="T:System.IO.Stream" />.</span></span> <span data-ttu-id="9b70f-216">구문 분석할 스트림입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-216">The stream to be parsed.</span></span></param>
        <param name="defaultEncoding"><span data-ttu-id="9b70f-217"><see cref="T:System.Text.Encoding" />.</span><span class="sxs-lookup"><span data-stu-id="9b70f-217"><see cref="T:System.Text.Encoding" />.</span></span> <span data-ttu-id="9b70f-218">파일에서 인코딩을 확인할 수 없는 경우 사용할 문자 인코딩입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-218">The character encoding to use if encoding is not determined from file.</span></span> <span data-ttu-id="9b70f-219">기본값은 <see cref="P:System.Text.Encoding.UTF8" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-219">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span></span></param>
        <param name="detectEncoding"><span data-ttu-id="9b70f-220"><see langword="Boolean" />.</span><span class="sxs-lookup"><span data-stu-id="9b70f-220"><see langword="Boolean" />.</span></span> <span data-ttu-id="9b70f-221">파일의 시작 부분에서 바이트 순서 표시를 찾을지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-221">Indicates whether to look for byte order marks at the beginning of the file.</span></span> <span data-ttu-id="9b70f-222">기본값은 <see langword="True" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-222">Default is <see langword="True" />.</span></span></param>
        <param name="leaveOpen"><span data-ttu-id="9b70f-223"><see langword="Boolean" />.</span><span class="sxs-lookup"><span data-stu-id="9b70f-223"><see langword="Boolean" />.</span></span> <span data-ttu-id="9b70f-224"><see langword="TextFieldParser" /> 개체가 닫힐 때 <paramref name="stream" />을 열어둘지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-224">Indicates whether to leave <paramref name="stream" /> open when the <see langword="TextFieldParser" /> object is closed.</span></span> <span data-ttu-id="9b70f-225">기본값은 <see langword="False" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-225">Default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="9b70f-226"><see langword="TextFieldParser" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-226">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b70f-227">새로 만듭니다 `TextFieldParser` 파일을 구문 분석 하거나 스트림으로 개체를 나타내는 `stream` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-227">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 <span data-ttu-id="9b70f-228">경우는 `detectEncoding` 매개 변수는 `True`,이 생성자를 파일이 나 스트림에의 처음 세 바이트를 확인 하 여 인코딩을 검색 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-228">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="9b70f-229">자동으로 인식 u t F-8, little endian Unicode 및 big endian 유니코드 텍스트 파일을 적절 한 바이트 순서 표시를 사용 하 여 시작 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="9b70f-229">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="9b70f-230">그렇지 않으면에서 지정 된 인코딩을 `defaultEncoding` 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-230">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="9b70f-231">문자 집합을 특정 문화권 설정을 사용 하 여 컴파일하고 하면 서로 다른 문화권 설정 사용 하 여 동일한 문자 검색 문자를 해석할 수 없어 및 throw 예외가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-231">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9b70f-232"><paramref name="stream" /> 또는 <paramref name="defaultEncoding" />가 <see langword="Nothing" />인 경우</span><span class="sxs-lookup"><span data-stu-id="9b70f-232"><paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9b70f-233"><paramref name="stream" />을 읽을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-233"><paramref name="stream" /> cannot be read from.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="9b70f-234">개체(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-234">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="9b70f-235">방법: Visual Basic에서 쉼표로 구분 된 텍스트 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-235">How to: Read From Comma-Delimited Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="9b70f-236">방법: Visual Basic에서 고정 너비 텍스트 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-236">How to: Read From Fixed-width Text Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="9b70f-237">방법: Visual Basic에서 여러 형식의 텍스트 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-237">How to: Read From Text Files with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="textFieldParser.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9b70f-238">현재 <see langword="TextFieldParser" /> 개체를 닫습니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-238">Closes the current <see langword="TextFieldParser" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9b70f-239">이 예제에서는 닫습니다는 `TextFieldParser.FileReader`합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-239">This example closes the `TextFieldParser.FileReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="9b70f-240">개체(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-240">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="9b70f-241">TextFieldParser 개체를 사용하여 텍스트 파일 구문 분석</span><span class="sxs-lookup"><span data-stu-id="9b70f-241">Parsing Text Files with the TextFieldParser Object</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CommentTokens">
      <MemberSignature Language="C#" Value="public string[] CommentTokens { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] CommentTokens" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens" />
      <MemberSignature Language="VB.NET" Value="Public Property CommentTokens As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ CommentTokens { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommentTokens : string[] with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9b70f-242">주석 토큰을 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-242">Defines comment tokens.</span></span> <span data-ttu-id="9b70f-243">주석 토큰은 줄 시작 부분에서 해당 줄이 주석이므로 파서에서 무시해야 함을 나타내는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-243">A comment token is a string that, when placed at the beginning of a line, indicates that the line is a comment and should be ignored by the parser.</span></span></summary>
        <value><span data-ttu-id="9b70f-244"><see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 개체의 모든 주석 토큰이 들어 있는 문자열 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-244">A string array that contains all of the comment tokens for the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b70f-245">이 메서드는 고급 멤버; 클릭 하지 않으면 IntelliSense에 표시 되지 않습니다 합니다 **모든** 탭 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-245">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="9b70f-246">길이가 0 인 주석 토큰은 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-246">Zero-length comment tokens are ignored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9b70f-247">이 예제에 대 한 지정 된 `TextFieldParser`, `FileReader` 작은따옴표 (')로 시작 하는 줄을 무시 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-247">This example specifies that for the `TextFieldParser`, `FileReader` lines beginning with a single quotation mark (') should be ignored.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9b70f-248">주석 토큰에 공백을 포함하고 있는 경우</span><span class="sxs-lookup"><span data-stu-id="9b70f-248">A comment token includes white space.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="9b70f-249">개체(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-249">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="9b70f-250">방법: Visual Basic에서 쉼표로 구분 된 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-250">How to: Read From a Comma-Delimited Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="9b70f-251">방법: Visual Basic에서 고정 너비 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-251">How to: Read From a Fixed-width Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="9b70f-252">방법: Visual Basic에서 여러 형식의 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-252">How to: Read From a Text File with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Delimiters">
      <MemberSignature Language="C#" Value="public string[] Delimiters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Delimiters" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
      <MemberSignature Language="VB.NET" Value="Public Property Delimiters As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ Delimiters { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Delimiters : string[] with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9b70f-253">텍스트 파일의 구분 기호를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-253">Defines the delimiters for a text file.</span></span></summary>
        <value><span data-ttu-id="9b70f-254"><see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 개체의 모든 필드 구분 기호가 들어 있는 문자열 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-254">A string array that contains all of the field delimiters for the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b70f-255">이 속성은 의미 있는 경우에만 합니다 <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> 속성이 `FieldType.Delimited`합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-255">This property is meaningful only if the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> property is set to `FieldType.Delimited`.</span></span>  
  
 <span data-ttu-id="9b70f-256">텍스트 파일을 사용 하 여 수행할 수도 있습니다에 대 한 구분 기호를 정의 합니다 <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9b70f-256">Defining the delimiters for a text file can also be accomplished with the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A> method.</span></span>  
  
 <span data-ttu-id="9b70f-257">다음 표에서 관련 된 작업의 예로 `Delimiters` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-257">The following table lists an example of a task involving the `Delimiters` property.</span></span>  
  
|<span data-ttu-id="9b70f-258">대상</span><span class="sxs-lookup"><span data-stu-id="9b70f-258">To</span></span>|<span data-ttu-id="9b70f-259">참조</span><span class="sxs-lookup"><span data-stu-id="9b70f-259">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="9b70f-260">구분 기호로 분리 된 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-260">Read from a delimited text file</span></span>|[<span data-ttu-id="9b70f-261">방법: 쉼표로 구분된 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-261">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="9b70f-262">이 예제에서는 지정에 대 한 구분 기호는 `TextFieldParser` 개체를 `FileReader`은 쉼표 (,)입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-262">This example specifies that the delimiter for the `TextFieldParser` object, `FileReader`, is a comma (,).</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9b70f-263">구분기호는 줄 바꿈 문자, 빈 문자열 또는 <see langword="Nothing" />으로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-263">A delimiter value is set to a newline character, an empty string, or <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="9b70f-264">개체(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-264">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="9b70f-265">TextFieldParser 개체를 사용하여 텍스트 파일 구문 분석</span><span class="sxs-lookup"><span data-stu-id="9b70f-265">Parsing Text Files with the TextFieldParser Object</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9b70f-266">해당 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 개체에서 사용하는 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-266">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></summary>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="9b70f-267">개체(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-267">Objects (Visual Basic)</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose() = IDisposable::Dispose;" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="textFieldParser.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9b70f-268">해당 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 개체에서 사용하는 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-268">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="9b70f-269">개체(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-269">Objects (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="textFieldParser.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="9b70f-270">부울.</span><span class="sxs-lookup"><span data-stu-id="9b70f-270">Boolean.</span></span> <span data-ttu-id="9b70f-271"><see langword="True" />는 관리되는 리소스와 관리되지 않는 리소스를 모두 해제합니다. <see langword="False" />는 관리되지 않는 리소스만 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-271"><see langword="True" /> releases both managed and unmanaged resources; <see langword="False" /> releases only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="9b70f-272">해당 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 개체에서 사용하는 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-272">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="9b70f-273">개체(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-273">Objects (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EndOfData">
      <MemberSignature Language="C#" Value="public bool EndOfData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EndOfData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndOfData As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EndOfData { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.EndOfData : bool" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9b70f-274">현재 커서 위치와 파일 끝 사이에 공백 또는 주석이 없는 줄이 있는 경우 <see langword="True" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-274">Returns <see langword="True" /> if there are no non-blank, non-comment lines between the current cursor position and the end of the file.</span></span></summary>
        <value><span data-ttu-id="9b70f-275">읽을 데이터가 더 이상 없으면 <see langword="True" />이고, 그렇지 않으면 <see langword="False" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-275"><see langword="True" /> if there is no more data to read; otherwise, <see langword="False" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b70f-276">이 속성 읽을 데이터의 끝을 확인 하려면 파일에서 읽을 때 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-276">This property can be used when reading from files to determine the end of the data being read.</span></span>  
  
 <span data-ttu-id="9b70f-277">다음 표에서 관련 된 작업의 예제는 `EndOfData` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-277">The following table lists examples of tasks involving the `EndOfData` property.</span></span>  
  
|<span data-ttu-id="9b70f-278">대상</span><span class="sxs-lookup"><span data-stu-id="9b70f-278">To</span></span>|<span data-ttu-id="9b70f-279">참조</span><span class="sxs-lookup"><span data-stu-id="9b70f-279">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="9b70f-280">구분 기호로 분리 된 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-280">Read from a delimited file</span></span>|[<span data-ttu-id="9b70f-281">방법: 쉼표로 구분된 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-281">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="9b70f-282">고정 폭 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-282">Read from a fixed-width file</span></span>|[<span data-ttu-id="9b70f-283">방법: 고정 너비 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-283">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="9b70f-284">이 예제에서는 합니다 `EndofData` 속성을 사용 하 여 파일의 모든 필드를 반복 합니다 `TextFieldReader`, `FileReader`합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-284">This example uses the `EndofData` property to loop through all the fields in the file with the `TextFieldReader`, `FileReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="9b70f-285">개체(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-285">Objects (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ErrorLine">
      <MemberSignature Language="C#" Value="public string ErrorLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ErrorLine" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorLine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ErrorLine { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ErrorLine : string" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9b70f-286">최신 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 예외를 발생시킨 줄을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-286">Returns the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span></span></summary>
        <value><span data-ttu-id="9b70f-287">최신 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 예외를 발생시킨 줄입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-287">The line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b70f-288">없으면 <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> 예외 throw 빈 문자열이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-288">If no <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exceptions have been thrown, an empty string is returned.</span></span>  
  
 <span data-ttu-id="9b70f-289"><xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A> 예외를 발생 시킨 줄의 수를 표시 하려면 속성을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-289">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A> property can be used to display the number of the line that caused the exception.</span></span>  
  
 <span data-ttu-id="9b70f-290">다음 표에서 관련 된 작업의 예제는 `ErrorLine` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-290">The following table lists examples of tasks involving the `ErrorLine` property.</span></span>  
  
|<span data-ttu-id="9b70f-291">대상</span><span class="sxs-lookup"><span data-stu-id="9b70f-291">To</span></span>|<span data-ttu-id="9b70f-292">참조</span><span class="sxs-lookup"><span data-stu-id="9b70f-292">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="9b70f-293">구분 기호로 분리 된 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-293">Read from a delimited file</span></span>|[<span data-ttu-id="9b70f-294">방법: 쉼표로 구분된 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-294">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="9b70f-295">고정 폭 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-295">Read from a fixed-width file</span></span>|[<span data-ttu-id="9b70f-296">방법: 고정 너비 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-296">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="9b70f-297">이 예제에서는 합니다 `ErrorLine` 현재 발생 시키는 줄을 표시 하는 속성 <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-297">This example uses the `ErrorLine` property to display the line causing the current <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="9b70f-298">개체(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-298">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="9b70f-299">TextFieldParser 개체를 사용하여 텍스트 파일 구문 분석</span><span class="sxs-lookup"><span data-stu-id="9b70f-299">Parsing Text Files with the TextFieldParser Object</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="9b70f-300">방법: Visual Basic에서 여러 형식의 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-300">How to: Read From a Text File with Multiple Formats in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="9b70f-301">방법: Visual Basic에서 고정 너비 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-301">How to: Read From a Fixed-width Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="9b70f-302">방법: Visual Basic에서 쉼표로 구분 된 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-302">How to: Read From a Comma-Delimited Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md"><span data-ttu-id="9b70f-303">Try...Catch...Finally 문(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-303">Try...Catch...Finally Statement (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ErrorLineNumber">
      <MemberSignature Language="C#" Value="public long ErrorLineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ErrorLineNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorLineNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ErrorLineNumber { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ErrorLineNumber : int64" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9b70f-304">최신 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 예외를 발생시킨 줄 번호를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-304">Returns the number of the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span></span></summary>
        <value><span data-ttu-id="9b70f-305">최신 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 예외를 발생시킨 줄의 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-305">The number of the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b70f-306">없으면 <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> 예외가 throw 되었습니다,-1이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-306">If no <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exceptions have been thrown, -1 is returned.</span></span>  
  
 <span data-ttu-id="9b70f-307"><xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A> 예외를 발생 시킨 줄의 수를 표시 하려면 속성을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-307">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A> property can be used to display the number of the line that caused the exception.</span></span> <span data-ttu-id="9b70f-308">줄 번호를 확인 하는 경우에 빈 줄 및 주석이 무시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-308">Blank lines and comments are not ignored when determining the line number.</span></span>  
  
 <span data-ttu-id="9b70f-309">다음 표에서 관련 된 작업의 예제는 `ErrorLineNumber` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-309">The following table lists examples of tasks involving the `ErrorLineNumber` property.</span></span>  
  
|<span data-ttu-id="9b70f-310">대상</span><span class="sxs-lookup"><span data-stu-id="9b70f-310">To</span></span>|<span data-ttu-id="9b70f-311">참조</span><span class="sxs-lookup"><span data-stu-id="9b70f-311">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="9b70f-312">구분 기호로 분리 된 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-312">Read from a delimited file</span></span>|[<span data-ttu-id="9b70f-313">방법: 쉼표로 구분된 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-313">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="9b70f-314">고정 폭 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-314">Read from a fixed-width file</span></span>|[<span data-ttu-id="9b70f-315">방법: 고정 너비 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-315">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="9b70f-316">이 예제에서는 합니다 `ErrorLineNumber` 현재 원인이 된 줄의 위치를 표시 하는 속성 <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-316">This example uses the `ErrorLineNumber` property to display the location of the line causing the current <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="9b70f-317">개체(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-317">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="9b70f-318">TextFieldParser 개체를 사용하여 텍스트 파일 구문 분석</span><span class="sxs-lookup"><span data-stu-id="9b70f-318">Parsing Text Files with the TextFieldParser Object</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="9b70f-319">방법: Visual Basic에서 여러 형식의 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-319">How to: Read From a Text File with Multiple Formats in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="9b70f-320">방법: Visual Basic에서 고정 너비 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-320">How to: Read From a Fixed-width Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="9b70f-321">방법: Visual Basic에서 쉼표로 구분 된 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-321">How to: Read From a Comma-Delimited Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md"><span data-ttu-id="9b70f-322">Try...Catch...Finally 문(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-322">Try...Catch...Finally Statement (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FieldWidths">
      <MemberSignature Language="C#" Value="public int[] FieldWidths { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] FieldWidths" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
      <MemberSignature Language="VB.NET" Value="Public Property FieldWidths As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ FieldWidths { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FieldWidths : int[] with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9b70f-323">구문 분석되는 텍스트 파일에서 각 열의 너비를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-323">Denotes the width of each column in the text file being parsed.</span></span></summary>
        <value><span data-ttu-id="9b70f-324">구문 분석되는 텍스트 파일에 있는 각 열의 너비가 들어 있는 정수 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-324">An integer array that contains the width of each column in the text file that is being parsed.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b70f-325">이 속성은 의미 있는 경우에만 합니다 <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> 속성이 `FieldType.FixedWidth`합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-325">This property is meaningful only if the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> property is set to `FieldType.FixedWidth`.</span></span> <span data-ttu-id="9b70f-326">0 보다 작거나 배열의 마지막 항목 이면 필드는 가변 너비로로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-326">If the last entry in the array is less than or equal to zero, the field is assumed to be of variable width.</span></span>  
  
 <span data-ttu-id="9b70f-327"><xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A> 메서드 필드 너비 설정에 사용할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-327">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A> method can also be used to set field widths.</span></span>  
  
 <span data-ttu-id="9b70f-328">다음 표에서 관련 된 작업의 예제는 `FieldWidths` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-328">The following table lists examples of tasks involving the `FieldWidths` property.</span></span>  
  
|<span data-ttu-id="9b70f-329">대상</span><span class="sxs-lookup"><span data-stu-id="9b70f-329">To</span></span>|<span data-ttu-id="9b70f-330">참조</span><span class="sxs-lookup"><span data-stu-id="9b70f-330">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="9b70f-331">고정 너비 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-331">Read from a fixed-width text file</span></span>|[<span data-ttu-id="9b70f-332">방법: 고정 너비 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-332">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="9b70f-333">이 예제에서는 파일을 읽고 `ParserText.txt`, 너비를 지정 하는 첫 번째 열은 너비가 5 자, 두 번째는 10는 11 세 번째 및 네 번째는 가변 너비</span><span class="sxs-lookup"><span data-stu-id="9b70f-333">This example reads the file `ParserText.txt`, specifying the widths; the first column is 5 characters wide, the second is 10, the third is 11, and the fourth is of variable width</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9b70f-334">배열의 마지막 항목을 제외한 위치의 너비 값이 0 이하인 경우</span><span class="sxs-lookup"><span data-stu-id="9b70f-334">A width value in any location other than the last entry of the array is less than or equal to zero.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FieldType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="9b70f-335">개체(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-335">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="9b70f-336">방법: Visual Basic에서 고정 너비 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-336">How to: Read From a Fixed-width Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="9b70f-337">방법: Visual Basic에서 쉼표로 구분 된 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-337">How to: Read From a Comma-Delimited Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="9b70f-338">방법: Visual Basic에서 여러 형식의 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-338">How to: Read From a Text File with Multiple Formats in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="9b70f-339">TextFieldParser 개체를 사용하여 텍스트 파일 구문 분석</span><span class="sxs-lookup"><span data-stu-id="9b70f-339">Parsing Text Files with the TextFieldParser Object</span></span></related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/2ewecs64(v=vs.85)"><span data-ttu-id="9b70f-340">예외 문제 해결: Microsoft.VisualBasic.FileIO.TextFieldParser.MalformedLineException</span><span class="sxs-lookup"><span data-stu-id="9b70f-340">Troubleshooting Exceptions: Microsoft.VisualBasic.FileIO.TextFieldParser.MalformedLineException</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TextFieldParser ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!TextFieldParser ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="textFieldParser.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9b70f-341">가비지 수집기에서 회수하기 전에 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 개체가 리소스를 해제하고 다른 정리 작업을 수행할 수 있게 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-341">Allows the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object to attempt to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="9b70f-342">개체(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-342">Objects (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="HasFieldsEnclosedInQuotes">
      <MemberSignature Language="C#" Value="public bool HasFieldsEnclosedInQuotes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFieldsEnclosedInQuotes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes" />
      <MemberSignature Language="VB.NET" Value="Public Property HasFieldsEnclosedInQuotes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasFieldsEnclosedInQuotes { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HasFieldsEnclosedInQuotes : bool with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9b70f-343">구분된 파일을 구문 분석할 때 필드가 따옴표로 묶여 있는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-343">Denotes whether fields are enclosed in quotation marks when a delimited file is being parsed.</span></span></summary>
        <value><span data-ttu-id="9b70f-344">필드가 따옴표로 묶여 있으면 <see langword="True" />이고, 그렇지 않으면 <see langword="False" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-344"><see langword="True" /> if fields are enclosed in quotation marks; otherwise, <see langword="False" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b70f-345">이 메서드는 고급 멤버; 클릭 하지 않으면 IntelliSense에 표시 되지 않습니다 합니다 **모든** 탭 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-345">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="9b70f-346">속성이 `True`, 파서가 필드가 따옴표로 묶여 있는지 가정 ("") 이며 줄 끝을 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-346">If the property is `True`, the parser assumes that fields are enclosed in quotation marks (" ") and may contain line endings.</span></span>  
  
 <span data-ttu-id="9b70f-347">예를 들어, 필드를 따옴표에 포함 되어 있으면 `abc, "field2a,field2b", field3` 이 속성은 `True`, 다음은 따옴표로 묶인 모든 텍스트가 반환 됩니다;이 예제에서는 반환 `abc|field2a,field2b|field3`합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-347">If a field is enclosed in quotation marks, for example, `abc, "field2a,field2b", field3` and this property is `True`, then all text enclosed in quotation marks will be returned as is; this example would return `abc|field2a,field2b|field3`.</span></span> <span data-ttu-id="9b70f-348">이 속성을 설정 `False` 이 예제에서는 반환 없게 `abc|"field2a|field2b"|field3`합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-348">Setting this property to `False` would make this example return `abc|"field2a|field2b"|field3`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9b70f-349">이 예제에서는 설정 된 `HasFieldsEnclosedInQuotes` 속성을 `True` 에 대 한 `myReader`합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-349">This example sets the `HasFieldsEnclosedInQuotes` property to `True` for `myReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="9b70f-350">개체(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-350">Objects (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LineNumber">
      <MemberSignature Language="C#" Value="public long LineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 LineNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LineNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long LineNumber { long get(); };" />
      <MemberSignature Language="F#" Value="member this.LineNumber : int64" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9b70f-351">현재 줄 번호를 반환하거나 스트림에서 더 이상 문자를 사용할 수 없으면 -1을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-351">Returns the current line number, or returns -1 if no more characters are available in the stream.</span></span></summary>
        <value><span data-ttu-id="9b70f-352">현재 줄 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-352">The current line number.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b70f-353">이 메서드는 고급 멤버; 클릭 하지 않으면 IntelliSense에 표시 되지 않습니다 합니다 **모든** 탭 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-353">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="9b70f-354">줄 번호를 확인 하는 경우에 빈 줄 및 주석이 무시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-354">Blank lines and comments are not ignored when determining the line number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9b70f-355">텍스트 파일의 이름을 "Jones"를 검색 하 고 보고 어떤 줄에서 발생 하는이 예제.</span><span class="sxs-lookup"><span data-stu-id="9b70f-355">This example searches for the name "Jones" in the text file and reports what line(s) it occurs on.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="9b70f-356">개체(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-356">Objects (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PeekChars">
      <MemberSignature Language="C#" Value="public string PeekChars (int numberOfChars);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string PeekChars(int32 numberOfChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function PeekChars (numberOfChars As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PeekChars(int numberOfChars);" />
      <MemberSignature Language="F#" Value="member this.PeekChars : int -&gt; string" Usage="textFieldParser.PeekChars numberOfChars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="numberOfChars" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="numberOfChars"><span data-ttu-id="9b70f-357"><see langword="Int32" />.</span><span class="sxs-lookup"><span data-stu-id="9b70f-357"><see langword="Int32" />.</span></span> <span data-ttu-id="9b70f-358">읽을 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-358">Number of characters to read.</span></span> <span data-ttu-id="9b70f-359">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="9b70f-359">Required.</span></span></param>
        <summary><span data-ttu-id="9b70f-360">커서를 앞으로 이동하지 않고 지정한 문자 수를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-360">Reads the specified number of characters without advancing the cursor.</span></span></summary>
        <returns><span data-ttu-id="9b70f-361">지정된 수의 읽을 문자가 포함된 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-361">A string that contains the specified number of characters read.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b70f-362">`numberOfChars` 값은 총 줄의 문자 수보다 작아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-362">The `numberOfChars` value must be less than the total number of characters in the line.</span></span> <span data-ttu-id="9b70f-363">반환한 문자열 그렇지 않은 경우 `PeekChars` 줄의 길이로 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-363">If it is not, the string returned by `PeekChars` will be truncated to the length of the line.</span></span>  
  
 <span data-ttu-id="9b70f-364">빈 줄은 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-364">Blank lines are ignored.</span></span>  
  
 <span data-ttu-id="9b70f-365">줄 끝 문자 반환 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-365">End-of-line characters are not returned.</span></span>  
  
 <span data-ttu-id="9b70f-366">`PeekChars` 메서드 수행 구문 분석 하지 않으면 구분된 된 필드에서 줄의 끝 문자를 실제 줄 끝으로 해석 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-366">The `PeekChars` method performs no parsing; an end-of- line character within a delimited field is interpreted as the actual end of the line.</span></span>  
  
 <span data-ttu-id="9b70f-367">다음 표에서 관련 된 작업의 예제는 `PeekChars` 메서드.</span><span class="sxs-lookup"><span data-stu-id="9b70f-367">The following table lists examples of tasks involving the `PeekChars` method.</span></span>  
  
|<span data-ttu-id="9b70f-368">대상</span><span class="sxs-lookup"><span data-stu-id="9b70f-368">To</span></span>|<span data-ttu-id="9b70f-369">참조</span><span class="sxs-lookup"><span data-stu-id="9b70f-369">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="9b70f-370">필드의 형식을 구문 분석 하기 전에 확인</span><span class="sxs-lookup"><span data-stu-id="9b70f-370">Determine the format of a field before parsing it</span></span>|[<span data-ttu-id="9b70f-371">방법: 여러 형식의 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-371">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="9b70f-372">이 예제에서는 `PeekChars` 데이터의 끝을 확인 하 여 해당 지점에서 파일을 구문 분석을 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-372">This example uses `PeekChars` to find the end of the data and stop parsing the file at that point.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9b70f-373"><paramref name="numberOfChars" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-373"><paramref name="numberOfChars" /> is less than 0.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="9b70f-374">개체(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-374">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="9b70f-375">TextFieldParser 개체를 사용하여 텍스트 파일 구문 분석</span><span class="sxs-lookup"><span data-stu-id="9b70f-375">Parsing Text Files with the TextFieldParser Object</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="9b70f-376">Visual Basic에서 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-376">Reading from Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadFields">
      <MemberSignature Language="C#" Value="public string[] ReadFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string[] ReadFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadFields () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ ReadFields();" />
      <MemberSignature Language="F#" Value="member this.ReadFields : unit -&gt; string[]" Usage="textFieldParser.ReadFields " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9b70f-377">현재 줄의 모든 필드를 읽고 문자열 배열로서 반환한 다음 데이터가 포함된 다음 줄로 커서를 이동합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-377">Reads all fields on the current line, returns them as an array of strings, and advances the cursor to the next line containing data.</span></span></summary>
        <returns><span data-ttu-id="9b70f-378">현재 줄의 필드 값이 들어 있는 문자열 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-378">An array of strings that contains field values for the current line.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b70f-379">여러 형식의 텍스트 파일을 구문 분석할 수 있도록 하기 위해 합니다 `ReadFields` 의 값을 검사 하는 메서드 `TextFieldType`, `Delimiters`, 및 `FieldWidths`이면 지정 된 경우 호출 될 때마다 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-379">In order to allow users to parse text files in multiple formats, the `ReadFields` method examines the values of `TextFieldType`, `Delimiters`, and `FieldWidths`, if they are specified, each time it is called.</span></span> <span data-ttu-id="9b70f-380">사용자가 올바르게 구성 해야 합니다 `TextFieldType` 하 고 `FieldWidths` 또는 `Delimiters` 속성을 적절 하 게 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-380">Users need to correctly configure the `TextFieldType` and `FieldWidths` or `Delimiters` properties, as appropriate.</span></span> <span data-ttu-id="9b70f-381">하는 경우 `TextFieldType` 로 설정 된 `Delimited`, 및 `Delimiters` 을 설정 하지 않으면 이거나 `TextFieldType` 로 설정 되어 `FixedWidth` 및 `FieldWidths`, 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-381">If `TextFieldType` is set to `Delimited`, and `Delimiters` is not set, or if `TextFieldType` is set to `FixedWidth` and `FieldWidths`, an exception is thrown.</span></span>  
  
 <span data-ttu-id="9b70f-382">경우 `ReadFields` 을 건너뛰고 다음 줄이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-382">If `ReadFields` encounters blank lines, they are skipped and the next non-blank line is returned.</span></span>  
  
 <span data-ttu-id="9b70f-383">경우는 `ReadFields` 메서드 현재 줄을 구문 분석할 수 없습니다, 예외가 발생 하 고 다음 줄으로 이동 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-383">If the `ReadFields` method cannot parse the current line, it raises an exception and does not move to the next line.</span></span> <span data-ttu-id="9b70f-384">이 통해 애플리케이션을 다시 줄을 구문 분석 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-384">This enables your application to attempt to parse the line again.</span></span>  
  
 <span data-ttu-id="9b70f-385">다음 표에서 관련 된 작업의 예제는 `ReadFields` 메서드.</span><span class="sxs-lookup"><span data-stu-id="9b70f-385">The following table lists examples of tasks involving the `ReadFields` method.</span></span>  
  
|<span data-ttu-id="9b70f-386">대상</span><span class="sxs-lookup"><span data-stu-id="9b70f-386">To</span></span>|<span data-ttu-id="9b70f-387">참조</span><span class="sxs-lookup"><span data-stu-id="9b70f-387">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="9b70f-388">구분 기호로 분리 된 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-388">Read from a delimited file</span></span>|[<span data-ttu-id="9b70f-389">방법: 쉼표로 구분된 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-389">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="9b70f-390">고정 폭 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-390">Read from a fixed-width file</span></span>|[<span data-ttu-id="9b70f-391">방법: 고정 너비 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-391">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="9b70f-392">이 예제에서는 합니다 `ReadFields` 쉼표로 구분 된 파일에서 읽는 방법 `ParserText.txt`합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-392">This example uses the `ReadFields` method to read from the comma-delimited file `ParserText.txt`.</span></span> <span data-ttu-id="9b70f-393">이 예제에서는 기록 필드를 `Testfile.txt`입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-393">The example writes the fields to `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException"><span data-ttu-id="9b70f-394">지정된 형식을 사용하여 필드를 구문 분석할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="9b70f-394">A field cannot be parsed by using the specified format.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="9b70f-395">연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="9b70f-395">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9b70f-396">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="9b70f-396">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="9b70f-397">개체(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-397">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="9b70f-398">방법: Visual Basic에서 쉼표로 구분 된 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-398">How to: Read From a Comma-Delimited Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="9b70f-399">방법: Visual Basic에서 고정 너비 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-399">How to: Read From a Fixed-width Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="9b70f-400">방법: Visual Basic에서 여러 형식의 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-400">How to: Read From a Text File with Multiple Formats in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="9b70f-401">TextFieldParser 개체를 사용하여 텍스트 파일 구문 분석</span><span class="sxs-lookup"><span data-stu-id="9b70f-401">Parsing Text Files with the TextFieldParser Object</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadLine">
      <MemberSignature Language="C#" Value="public string ReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLine () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadLine();" />
      <MemberSignature Language="F#" Value="member this.ReadLine : unit -&gt; string" Usage="textFieldParser.ReadLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9b70f-402">현재 줄을 문자열로 반환하고 커서를 다음 줄로 이동합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-402">Returns the current line as a string and advances the cursor to the next line.</span></span></summary>
        <returns><span data-ttu-id="9b70f-403">파일 또는 스트림의 현재 줄입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-403">The current line from the file or stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b70f-404">`ReadLine` 메서드 수행 구문 분석 하지 않으면 구분된 된 필드에서 줄의 끝 문자를 실제 줄 끝으로 해석 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-404">The `ReadLine` method performs no parsing; an end-of-line character within a delimited field is interpreted as the actual end of the line.</span></span>  
  
 <span data-ttu-id="9b70f-405">`Nothing` 파일의 끝에 도달한 경우 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-405">`Nothing` is returned if the end of the file is reached.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9b70f-406">이 예제에서는 파일을 읽는다는 `ParserText.txt` 에 씁니다 `Testfile.txt`합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-406">This example reads through the file `ParserText.txt` and writes it to `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#15)]  
  
 <span data-ttu-id="9b70f-407">경우 `Testfile.txt` 존재 하지 않는 하 여 생성 된 `WriteAllText` 메서드.</span><span class="sxs-lookup"><span data-stu-id="9b70f-407">If `Testfile.txt` does not exist, it is created by the `WriteAllText` method.</span></span>  
  
 <span data-ttu-id="9b70f-408">이 예제에서는 단일 문자열로; 필드를 작성 각 줄을 대상 파일의 자체 줄에 표시 하는 `VbCrLf` 각 줄의 끝 문자를 추가 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-408">This example writes the fields as a single string; to have each line display on its own line in the destination file, a `VbCrLf` character should be appended at the end of each line.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="9b70f-409">개체(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-409">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="9b70f-410">TextFieldParser 개체를 사용하여 텍스트 파일 구문 분석</span><span class="sxs-lookup"><span data-stu-id="9b70f-410">Parsing Text Files with the TextFieldParser Object</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadToEnd">
      <MemberSignature Language="C#" Value="public string ReadToEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadToEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadToEnd () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadToEnd();" />
      <MemberSignature Language="F#" Value="member this.ReadToEnd : unit -&gt; string" Usage="textFieldParser.ReadToEnd " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9b70f-411">텍스트 파일의 나머지를 읽고 문자열로 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-411">Reads the remainder of the text file and returns it as a string.</span></span></summary>
        <returns><span data-ttu-id="9b70f-412">파일 또는 스트림의 나머지 텍스트입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-412">The remaining text from the file or stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b70f-413">이 메서드는 고급 멤버; 클릭 하지 않으면 IntelliSense에 표시 되지 않습니다 합니다 **모든** 탭 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-413">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="9b70f-414">더 이상 읽을 파일의 끝에 도달 하기 때문에 내용이 없는 경우 `Nothing` 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-414">If there is nothing more to read because the end of the file has been reached, `Nothing` is returned.</span></span>  
  
 <span data-ttu-id="9b70f-415">`ReadToEnd` 빈 줄 및 주석이 메서드를 무시 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-415">The `ReadToEnd` method does not ignore blank lines and comments.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9b70f-416">이 예제에서는 합니다 `ReadToEnd` 전체 파일을 읽는 방법 `ParserText.txt` 파일에 쓸 `Testfile.txt`합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-416">This example uses the `ReadToEnd` method to read the entire file `ParserText.txt` and write it to the file `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#10)]  
  
 <span data-ttu-id="9b70f-417">경우 `Testfile.txt` 존재 하지 않는 하 여 생성 된 `WriteAllText` 메서드.</span><span class="sxs-lookup"><span data-stu-id="9b70f-417">If `Testfile.txt` does not exist, it is created by the `WriteAllText` method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="9b70f-418">개체(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-418">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="9b70f-419">TextFieldParser 개체를 사용하여 텍스트 파일 구문 분석</span><span class="sxs-lookup"><span data-stu-id="9b70f-419">Parsing Text Files with the TextFieldParser Object</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetDelimiters">
      <MemberSignature Language="C#" Value="public void SetDelimiters (params string[] delimiters);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetDelimiters(string[] delimiters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetDelimiters (ParamArray delimiters As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetDelimiters(... cli::array &lt;System::String ^&gt; ^ delimiters);" />
      <MemberSignature Language="F#" Value="member this.SetDelimiters : string[] -&gt; unit" Usage="textFieldParser.SetDelimiters delimiters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delimiters" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delimiters"><span data-ttu-id="9b70f-420"><see langword="String" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-420">Array of type <see langword="String" />.</span></span></param>
        <summary><span data-ttu-id="9b70f-421">판독기의 구분 기호를 지정된 값으로 설정하고 필드 형식을 <see langword="Delimited" />로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-421">Sets the delimiters for the reader to the specified values, and sets the field type to <see langword="Delimited" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b70f-422">기존 내용에는 `Delimiters` 이 메서드에 설정 된 경우 속성이 지워집니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-422">The existing contents of the `Delimiters` property are cleared when this method is set.</span></span>  
  
 <span data-ttu-id="9b70f-423">이 메서드는 배열을 만들지 않고 구분 기호를 설정 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-423">This method provides a way to set delimiters without creating an array.</span></span>  
  
 <span data-ttu-id="9b70f-424">다음 표에서 관련 된 작업의 예로 `SetDelimiters` 메서드.</span><span class="sxs-lookup"><span data-stu-id="9b70f-424">The following table lists an example of a task involving the `SetDelimiters` method.</span></span>  
  
|<span data-ttu-id="9b70f-425">대상</span><span class="sxs-lookup"><span data-stu-id="9b70f-425">To</span></span>|<span data-ttu-id="9b70f-426">참조</span><span class="sxs-lookup"><span data-stu-id="9b70f-426">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="9b70f-427">텍스트 파일 구문 분석</span><span class="sxs-lookup"><span data-stu-id="9b70f-427">Parse a text file</span></span>|[<span data-ttu-id="9b70f-428">TextFieldParser 개체를 사용하여 텍스트 파일 구문 분석</span><span class="sxs-lookup"><span data-stu-id="9b70f-428">Parsing Text Files with the TextFieldParser Object</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)|  
  
   
  
## Examples  
 <span data-ttu-id="9b70f-429">구분 기호를 정의 하는이 예제 텍스트 필드 파서를 열고 `vbTab`합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-429">This example opens a text field parser and defines the delimiter as `vbTab`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#4)]  
  
 <span data-ttu-id="9b70f-430">경로 `C:\logs\test.log` 를 구문 분석할 파일의 이름과 경로 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-430">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9b70f-431">구분 기호의 길이가 0인 경우</span><span class="sxs-lookup"><span data-stu-id="9b70f-431">A delimiter is zero-length.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="9b70f-432">개체(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-432">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="9b70f-433">TextFieldParser 개체를 사용하여 텍스트 파일 구문 분석</span><span class="sxs-lookup"><span data-stu-id="9b70f-433">Parsing Text Files with the TextFieldParser Object</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="9b70f-434">방법: Visual Basic에서 쉼표로 구분 된 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-434">How to: Read From a Comma-Delimited Text File in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetFieldWidths">
      <MemberSignature Language="C#" Value="public void SetFieldWidths (params int[] fieldWidths);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetFieldWidths(int32[] fieldWidths) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetFieldWidths (ParamArray fieldWidths As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFieldWidths(... cli::array &lt;int&gt; ^ fieldWidths);" />
      <MemberSignature Language="F#" Value="member this.SetFieldWidths : int[] -&gt; unit" Usage="textFieldParser.SetFieldWidths fieldWidths" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldWidths" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="fieldWidths"><span data-ttu-id="9b70f-435"><see langword="Integer" />의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-435">Array of <see langword="Integer" />.</span></span></param>
        <summary><span data-ttu-id="9b70f-436">지정한 값에 대한 판독기의 구분 기호를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-436">Sets the delimiters for the reader to the specified values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b70f-437">기존 내용에는 `Delimiters` 이렇게 설정 하면 속성이 지워집니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-437">The existing contents of the `Delimiters` property are cleared when this is set.</span></span>  
  
 <span data-ttu-id="9b70f-438">이 메서드는 배열을 만들지 않고 구분 기호를 설정 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-438">This method provides a way to set delimiters without creating an array.</span></span>  
  
 <span data-ttu-id="9b70f-439">다음 표에서 관련 된 작업의 예제는 `SetFieldWidths` 메서드.</span><span class="sxs-lookup"><span data-stu-id="9b70f-439">The following table lists example of tasks involving the `SetFieldWidths` method.</span></span>  
  
|<span data-ttu-id="9b70f-440">대상</span><span class="sxs-lookup"><span data-stu-id="9b70f-440">To</span></span>|<span data-ttu-id="9b70f-441">참조</span><span class="sxs-lookup"><span data-stu-id="9b70f-441">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="9b70f-442">텍스트 파일 구문 분석 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-442">Parse a text file.</span></span>|[<span data-ttu-id="9b70f-443">TextFieldParser 개체를 사용하여 텍스트 파일 구문 분석</span><span class="sxs-lookup"><span data-stu-id="9b70f-443">Parsing Text Files with the TextFieldParser Object</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)|  
  
   
  
## Examples  
 <span data-ttu-id="9b70f-444">로 필드 너비를 정의 하는이 예제 텍스트 필드 파서를 열고 `5`합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-444">This example opens a text-field parser and defines the field width as `5`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#12)]  
  
 <span data-ttu-id="9b70f-445">경로 `C:\logs\test.log` 를 구문 분석할 파일의 이름과 경로 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-445">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 <span data-ttu-id="9b70f-446">다음 예제에서는 텍스트 필드 파서를 열고로 필드 너비가 정의 `5`, `10`, 및 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-446">The following example opens a text-field parser and defines the field widths as `5`, `10`, and variable.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#13)]  
  
 <span data-ttu-id="9b70f-447">경로 `C:\logs\test.log` 를 구문 분석할 파일의 이름과 경로 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-447">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="9b70f-448">개체(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-448">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="9b70f-449">TextFieldParser 개체를 사용하여 텍스트 파일 구문 분석</span><span class="sxs-lookup"><span data-stu-id="9b70f-449">Parsing Text Files with the TextFieldParser Object</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFieldType">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.FieldType TextFieldType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.FileIO.FieldType TextFieldType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFieldType As FieldType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::FileIO::FieldType TextFieldType { Microsoft::VisualBasic::FileIO::FieldType get(); void set(Microsoft::VisualBasic::FileIO::FieldType value); };" />
      <MemberSignature Language="F#" Value="member this.TextFieldType : Microsoft.VisualBasic.FileIO.FieldType with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.FieldType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9b70f-450">구문 분석할 파일이 구분된 파일인지 또는 고정 너비 파일인지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-450">Indicates whether the file to be parsed is delimited or fixed-width.</span></span></summary>
        <value><span data-ttu-id="9b70f-451">구문 분석할 파일이 구분된 파일인지 또는 고정 너비 파일인지를 나타내는 <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-451">A <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" /> value that indicates whether the file to be parsed is delimited or fixed-width.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b70f-452">이 속성의 기본값을 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-452">The default value of this property is delimited.</span></span>  
  
 <span data-ttu-id="9b70f-453">다음 표에서 관련 된 작업의 예제는 `TextFieldType` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-453">The following table lists examples of tasks involving the `TextFieldType` property.</span></span>  
  
|<span data-ttu-id="9b70f-454">대상</span><span class="sxs-lookup"><span data-stu-id="9b70f-454">To</span></span>|<span data-ttu-id="9b70f-455">참조</span><span class="sxs-lookup"><span data-stu-id="9b70f-455">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="9b70f-456">구분 기호로 분리 된 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-456">Read from a delimited text file</span></span>|[<span data-ttu-id="9b70f-457">방법: 쉼표로 구분된 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-457">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="9b70f-458">고정 너비 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-458">Read from a fixed-width text file</span></span>|[<span data-ttu-id="9b70f-459">방법: 고정 너비 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-459">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|<span data-ttu-id="9b70f-460">여러 형식의 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-460">Read from a text file with multiple formats</span></span>|[<span data-ttu-id="9b70f-461">방법: 여러 형식의 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-461">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="9b70f-462">만드는이 예제는 `TextFieldParser`, `FileReader`, 구분 됩니다 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-462">This example creates a `TextFieldParser`, `FileReader`, and specifies that it is delimited.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#19)]  
  
 <span data-ttu-id="9b70f-463">만드는이 예제는 `TextFieldParser`, `FileReader`, 고정 너비 임을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-463">This example creates a `TextFieldParser`, `FileReader`, and specifies that it is fixed-width.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FieldType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="9b70f-464">개체(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-464">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="9b70f-465">TextFieldParser 개체를 사용하여 텍스트 파일 구문 분석</span><span class="sxs-lookup"><span data-stu-id="9b70f-465">Parsing Text Files with the TextFieldParser Object</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="9b70f-466">방법: Visual Basic에서 쉼표로 구분 된 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-466">How to: Read From a Comma-Delimited Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="9b70f-467">방법: Visual Basic에서 고정 너비 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-467">How to: Read From a Fixed-width Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="9b70f-468">방법: Visual Basic에서 여러 형식의 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-468">How to: Read From a Text File with Multiple Formats in Visual Basic</span></span></related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/2ewecs64(v=vs.85)"><span data-ttu-id="9b70f-469">예외 문제 해결: Microsoft.VisualBasic.FileIO.TextFieldParser.MalformedLineException</span><span class="sxs-lookup"><span data-stu-id="9b70f-469">Troubleshooting Exceptions: Microsoft.VisualBasic.FileIO.TextFieldParser.MalformedLineException</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TrimWhiteSpace">
      <MemberSignature Language="C#" Value="public bool TrimWhiteSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TrimWhiteSpace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property TrimWhiteSpace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TrimWhiteSpace { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.TrimWhiteSpace : bool with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9b70f-470">필드 값에서 선행 및 후행 공백이 삭제되어야 하는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-470">Indicates whether leading and trailing white space should be trimmed from field values.</span></span></summary>
        <value><span data-ttu-id="9b70f-471">필드 값에서 선행 및 후행 공백을 삭제해야 하는 경우 <see langword="True" />이고, 그렇지 않으면 <see langword="False" />입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-471"><see langword="True" /> if leading and trailing white space should be trimmed from field values; otherwise, <see langword="False" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b70f-472">이 속성의 기본값은 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="9b70f-472">The default value for this property is `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9b70f-473">이 예제에서는 `TextFieldParser`, `FileReader`를 설정 합니다 `TrimWhiteSpace` 속성을 `True`.</span><span class="sxs-lookup"><span data-stu-id="9b70f-473">This example creates a `TextFieldParser`, `FileReader`, and sets the `TrimWhiteSpace` property to `True`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md"><span data-ttu-id="9b70f-474">개체(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9b70f-474">Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md"><span data-ttu-id="9b70f-475">TextFieldParser 개체를 사용하여 텍스트 파일 구문 분석</span><span class="sxs-lookup"><span data-stu-id="9b70f-475">Parsing Text Files with the TextFieldParser Object</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md"><span data-ttu-id="9b70f-476">방법: Visual Basic에서 쉼표로 구분 된 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-476">How to: Read From a Comma-Delimited Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md"><span data-ttu-id="9b70f-477">방법: Visual Basic에서 고정 너비 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-477">How to: Read From a Fixed-width Text File in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md"><span data-ttu-id="9b70f-478">방법: Visual Basic에서 여러 형식의 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="9b70f-478">How to: Read From a Text File with Multiple Formats in Visual Basic</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>