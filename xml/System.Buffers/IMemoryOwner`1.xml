<Type Name="IMemoryOwner&lt;T&gt;" FullName="System.Buffers.IMemoryOwner&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c65114bc31d595b318fd8b25e11e92583234d593" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58725627" /></Metadata><TypeSignature Language="C#" Value="public interface IMemoryOwner&lt;T&gt; : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMemoryOwner`1&lt;T&gt; implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Buffers.IMemoryOwner`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMemoryOwner(Of T)&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IMemoryOwner : IDisposable" />
  <TypeSignature Language="F#" Value="type IMemoryOwner&lt;'T&gt; = interface&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T"><span data-ttu-id="f58a3-101">메모리에 저장할 수 있는 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="f58a3-101">The type of elements to store in memory.</span></span></typeparam>
    <summary><span data-ttu-id="f58a3-102">기본 메모리를 적절하게 처리해야 하는 메모리 블록의 소유자를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="f58a3-102">Identifies the owner of a block of memory who is responsible for disposing of the underlying memory appropriately.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

<span data-ttu-id="f58a3-103">합니다 `IMemoryOwner<T>` 인터페이스의 수명 관리를 담당 소유자를 정의를 사용 하는 <xref:System.Memory%601> 버퍼입니다.</span><span class="sxs-lookup"><span data-stu-id="f58a3-103">The `IMemoryOwner<T>` interface is used to define the owner responsible for the lifetime management of a <xref:System.Memory%601> buffer.</span></span> <span data-ttu-id="f58a3-104">인스턴스를 `IMemoryOwner<T>` 인터페이스에서 반환 되는 <xref:System.Buffers.MemoryPool%601.Rent%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="f58a3-104">An instance of the `IMemoryOwner<T>` interface is returned by the <xref:System.Buffers.MemoryPool%601.Rent%2A?displayProperty=nameWithType> method.</span></span> 

<span data-ttu-id="f58a3-105">버퍼를 여러 소비자를 가질 수 있지만 언제 든 지 소유자가 하나만 있을 수 것.</span><span class="sxs-lookup"><span data-stu-id="f58a3-105">While a buffer can have multiple consumers, it can only have a single owner at any given time.</span></span> <span data-ttu-id="f58a3-106">소유자는 다음 작업을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f58a3-106">The owner can:</span></span>

- <span data-ttu-id="f58a3-107">직접 또는 팩터리 메서드를 호출 하 여 버퍼를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="f58a3-107">Create the buffer either directly or by calling a factory method.</span></span>

- <span data-ttu-id="f58a3-108">다른 소비자에 게 소유권을 전송 합니다.</span><span class="sxs-lookup"><span data-stu-id="f58a3-108">Transfer ownership to another consumer.</span></span> <span data-ttu-id="f58a3-109">이 경우 이전 소유자는 버퍼를 더 이상 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f58a3-109">In this case, the previous owner should no longer use the buffer.</span></span>

- <span data-ttu-id="f58a3-110">가 더 이상 사용 하 여 버퍼를 삭제 합니다.</span><span class="sxs-lookup"><span data-stu-id="f58a3-110">Destroy the buffer when it is no longer in use.</span></span>

<span data-ttu-id="f58a3-111">때문에 합니다 `IMemoryOwner<T>` 구현 개체를 <xref:System.IDisposable> 를 호출 해야 인터페이스를 해당 <xref:System.IDisposable.Dispose%2A> 메서드 한 후에 메모리 버퍼는 더 이상 필요 하지 없습니다 파괴 했을 것입니다.</span><span class="sxs-lookup"><span data-stu-id="f58a3-111">Because the `IMemoryOwner<T>` object implements the <xref:System.IDisposable> interface, you should call its <xref:System.IDisposable.Dispose%2A> method only after the memory buffer is no longer needed and you have destroyed it.</span></span> <span data-ttu-id="f58a3-112">수행 해야 합니다 *되지* 삭제는 `IMemoryOwner<T>` 해당 메모리에 대 한 참조를 사용할 수 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f58a3-112">You should *not* dispose of the `IMemoryOwner<T>` object while a reference to its memory is available.</span></span> <span data-ttu-id="f58a3-113">즉, 형식입니다 `IMemoryOwner<T>` 선언 없어야를 <xref:System.Object.Finalize%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="f58a3-113">This means that the type in which `IMemoryOwner<T>` is declared should not have a <xref:System.Object.Finalize%2A> method.</span></span>

   ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Memory">
      <MemberSignature Language="C#" Value="public Memory&lt;T&gt; Memory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Memory`1&lt;!T&gt; Memory" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.IMemoryOwner`1.Memory" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Memory As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Memory&lt;T&gt; Memory { Memory&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Memory : Memory&lt;'T&gt;" Usage="System.Buffers.IMemoryOwner&lt;'T&gt;.Memory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f58a3-114">이 소유자에 속하는 메모리를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="f58a3-114">Gets the memory belonging to this owner.</span></span></summary>
        <value><span data-ttu-id="f58a3-115">이 소유자에 속하는 메모리.</span><span class="sxs-lookup"><span data-stu-id="f58a3-115">The memory belonging to this owner.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>