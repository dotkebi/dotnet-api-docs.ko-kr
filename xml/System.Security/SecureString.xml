<Type Name="SecureString" FullName="System.Security.SecureString">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fe25203598008b380f581e3ca68f53880bebef3f" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56346215" /></Metadata><TypeSignature Language="C#" Value="public sealed class SecureString : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed SecureString extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Security.SecureString" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SecureString&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecureString sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SecureString = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Security.SecureString</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="ca6ca-101">더 이상 필요 없게 되면 컴퓨터 메모리에서 삭제되는 텍스트처럼 기밀을 유지해야 하는 텍스트를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-101">Represents text that should be kept confidential, such as by deleting it from computer memory when no longer needed.</span></span> <span data-ttu-id="ca6ca-102">이 클래스는 상속될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

> [!IMPORTANT]
>  <span data-ttu-id="ca6ca-103">사용 하는 권장 하지 않습니다는 `SecureString` 새로운 개발에 대 한 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-103">We don't recommend that you use the `SecureString` class for new development.</span></span> <span data-ttu-id="ca6ca-104">자세한 내용은 [SecureString을 사용 하지 말아야](https://github.com/dotnet/platform-compat/blob/master/docs/DE0001.md) github입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-104">For more information, see [SecureString shouldn't be used](https://github.com/dotnet/platform-compat/blob/master/docs/DE0001.md) on GitHub.</span></span>

 <span data-ttu-id="ca6ca-105"><xref:System.Security.SecureString> 보안 조치를 제공 하는 문자열 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-105"><xref:System.Security.SecureString> is a string type that provides a measure of security.</span></span> <span data-ttu-id="ca6ca-106">일반 텍스트로 프로세스 메모리에 잠재적으로 중요 한 문자열을 저장 하지 않도록 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-106">It tries to avoid storing potentially sensitive strings in process memory as plain text.</span></span>  <span data-ttu-id="ca6ca-107">그러나 (참조 제한 사항에 대 한 합니다 [SecureString은 얼마나 안전?](#HowSecure) 섹션입니다.) 인스턴스의 값 <xref:System.Security.SecureString> 인스턴스가 초기화 될 때 또는 값을 수정할 때 내부 플랫폼에서 지원 되는 메커니즘을 사용 하 여 자동으로 보호 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-107">(For limitations, however, see the [How secure is SecureString?](#HowSecure) section.) The value of an instance of <xref:System.Security.SecureString> is automatically protected using a mechanism supported by the underlying platform when the instance is initialized or when the value is modified.</span></span> <span data-ttu-id="ca6ca-108">애플리케이션 인스턴스를 변경할 수 없는 렌더링을 호출 하 여 더 이상 수정할 수는 <xref:System.Security.SecureString.MakeReadOnly%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-108">Your application can render the instance immutable and prevent further modification by invoking the <xref:System.Security.SecureString.MakeReadOnly%2A> method.</span></span>  
  
 <span data-ttu-id="ca6ca-109">최대 길이 <xref:System.Security.SecureString> 인스턴스가 65,536 개의 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-109">The maximum length of a <xref:System.Security.SecureString> instance is 65,536 characters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ca6ca-110">이 형식이 구현 하는 <xref:System.IDisposable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-110">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="ca6ca-111">형식의 인스턴스를 사용 하 여 마쳤으면 직접 또는 간접적으로으로 삭제 해야 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-111">When you have finished using an instance of the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="ca6ca-112">직접 형식의 dispose 호출 해당 <xref:System.IDisposable.Dispose%2A> 의 메서드를 `try` / `catch` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-112">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="ca6ca-113">삭제 하지 직접, 언어 구문 같은 사용 `using` (C#에서) 또는 `Using` (Visual Basic에서는).</span><span class="sxs-lookup"><span data-stu-id="ca6ca-113">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="ca6ca-114">자세한 내용은 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하세요.를 <xref:System.IDisposable> 인터페이스 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-114">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="ca6ca-115"><xref:System.Security.SecureString> 클래스 및 해당 멤버 COM에 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-115">The <xref:System.Security.SecureString> class and its members are not visible to COM.</span></span> <span data-ttu-id="ca6ca-116">자세한 내용은 <xref:System.Runtime.InteropServices.ComVisibleAttribute>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-116">For more information, see <xref:System.Runtime.InteropServices.ComVisibleAttribute>.</span></span>  
  
 <span data-ttu-id="ca6ca-117">섹션 내용</span><span class="sxs-lookup"><span data-stu-id="ca6ca-117">In this section:</span></span>  
  
 <span data-ttu-id="ca6ca-118">[Vs는 문자열입니다. SecureString](#vsString) </span><span class="sxs-lookup"><span data-stu-id="ca6ca-118">[String vs. SecureString](#vsString) </span></span>  
 <span data-ttu-id="ca6ca-119">[SecureString 작업](#Ops) </span><span class="sxs-lookup"><span data-stu-id="ca6ca-119">[SecureString operations](#Ops) </span></span>  
 <span data-ttu-id="ca6ca-120">[SecureString 및 interop](#interop) </span><span class="sxs-lookup"><span data-stu-id="ca6ca-120">[SecureString and interop](#interop) </span></span>  
 [<span data-ttu-id="ca6ca-121">SecureString은 얼마나 안전?</span><span class="sxs-lookup"><span data-stu-id="ca6ca-121">How secure is  SecureString?</span></span>](#HowSecure)  
  
<a name="vsString"></a>   
## <a name="string-versus-securestring"></a><span data-ttu-id="ca6ca-122">SecureString 및 문자열</span><span class="sxs-lookup"><span data-stu-id="ca6ca-122">String versus SecureString</span></span>  
 <span data-ttu-id="ca6ca-123">인스턴스는 <xref:System.String?displayProperty=nameWithType> 즉, 인스턴스가 읽기 전용인 지를 만든 후 언제 인스턴스 수를 예측할 수 없는; 클래스는 변경할 수 없는 더 이상 필요 없는 프로그래밍 방식으로 예약 될 가비지 컬렉션에 대 한 컴퓨터 메모리에서 삭제 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-123">An instance of the <xref:System.String?displayProperty=nameWithType> class is both immutable and, when no longer needed, cannot be programmatically scheduled for garbage collection; that is, the instance is read-only after it is created, and it is not possible to predict when the instance will be deleted from computer memory.</span></span> <span data-ttu-id="ca6ca-124">때문에 <xref:System.String?displayProperty=nameWithType> 인스턴스를 변경할 수 없는 경우, 기존 인스턴스를 수정 하는 작업은 실제로 조작 되도록의 복사본을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-124">Because <xref:System.String?displayProperty=nameWithType> instances are immutable, operations that appear to modify an existing instance  actually create a copy of it to manipulate.</span></span> <span data-ttu-id="ca6ca-125">따라서 경우는 <xref:System.String> 암호, 신용 카드 번호 또는 개인 데이터와 같은 중요 한 정보를 포함 하는 개체, 애플리케이션 컴퓨터 메모리에서 데이터를 삭제할 수 없으므로 사용 후 정보 누설 될 위험이 있습니다 .</span><span class="sxs-lookup"><span data-stu-id="ca6ca-125">Consequently, if a <xref:System.String> object contains sensitive information such as a password, credit card number, or personal data, there is a risk the information could be revealed after it is used because your application cannot delete the data from computer memory.</span></span>  
  
 <span data-ttu-id="ca6ca-126"><xref:System.Security.SecureString> 개체는 비슷합니다는 <xref:System.String> 있는 텍스트 값 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-126">A <xref:System.Security.SecureString> object is similar to a <xref:System.String> object in that it has a text value.</span></span> <span data-ttu-id="ca6ca-127">그러나 값을 <xref:System.Security.SecureString> 메모리에 고정 되어 개체, 애플리케이션 읽기 전용으로 표시 될 때까지 기본 운영 체제에서 제공 하는 암호화를 수정할 수와 같은 보호 메커니즘을 사용할 수 있고 컴퓨터 메모리에서 삭제할 수 있습니다 애플리케이션 호출 하 여는 <xref:System.Security.SecureString.Dispose%2A> 메서드 또는.NET Framework 가비지 수집기에 의해 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-127">However, the value of a <xref:System.Security.SecureString> object is pinned in memory, may use a protection mechanism, such as encryption, provided by the underlying operating system, can be modified until your application marks it as read-only, and can be deleted from computer memory either by your application calling the <xref:System.Security.SecureString.Dispose%2A> method  or by the .NET Framework garbage collector.</span></span>  
  
 <span data-ttu-id="ca6ca-128">제한 사항에 대 한 내용은 합니다 <xref:System.Security.SecureString> 클래스를 참조 하십시오 합니다 [SecureString은 얼마나 안전?](#HowSecure) 섹션입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-128">For a discussion of the limitations of the <xref:System.Security.SecureString> class, see the [How secure is  SecureString?](#HowSecure) section.</span></span>  
  
 [<span data-ttu-id="ca6ca-129">맨 위로 이동</span><span class="sxs-lookup"><span data-stu-id="ca6ca-129">Back to top</span></span>](#top)  
  
<a name="Ops"></a>   
## <a name="securestring-operations"></a><span data-ttu-id="ca6ca-130">SecureString 작업</span><span class="sxs-lookup"><span data-stu-id="ca6ca-130">SecureString operations</span></span>  
 <span data-ttu-id="ca6ca-131"><xref:System.Security.SecureString> 클래스는 다음 작업을 수행할 수 있는 멤버를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-131">The <xref:System.Security.SecureString> class includes members that allow you to do the following:</span></span>  
  
 <span data-ttu-id="ca6ca-132">인스턴스화하는 <xref:System.Security.SecureString> 개체</span><span class="sxs-lookup"><span data-stu-id="ca6ca-132">Instantiate a <xref:System.Security.SecureString> object</span></span>  
 <span data-ttu-id="ca6ca-133">인스턴스화하는 <xref:System.Security.SecureString> 매개 변수가 없는 생성자를 호출 하 여 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-133">You instantiate a <xref:System.Security.SecureString> object by calling its parameterless constructor.</span></span>  
  
 <span data-ttu-id="ca6ca-134">추가 문자를 <xref:System.Security.SecureString> 개체</span><span class="sxs-lookup"><span data-stu-id="ca6ca-134">Add characters to a <xref:System.Security.SecureString> object</span></span>  
 <span data-ttu-id="ca6ca-135">한 번에 단일 문자를 추가할 수 있습니다는 <xref:System.Security.SecureString> 개체를 호출 하 여 해당 <xref:System.Security.SecureString.AppendChar%2A> 또는 <xref:System.Security.SecureString.InsertAt%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-135">You can add a single character at a time to a <xref:System.Security.SecureString> object  by calling its <xref:System.Security.SecureString.AppendChar%2A> or <xref:System.Security.SecureString.InsertAt%2A> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ca6ca-136">A <xref:System.Security.SecureString> 개체에서 생성 되지 해야를 <xref:System.String>이므로 중요 한 데이터를 변경할 수 없는 작업의 메모리 지 속성 결과 따라 이미 <xref:System.String> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-136">A <xref:System.Security.SecureString> object should never be constructed from a <xref:System.String>, because the sensitive data is already subject to the memory persistence consequences of the immutable <xref:System.String> class.</span></span> <span data-ttu-id="ca6ca-137">생성 하는 가장 좋은 방법은 <xref:System.Security.SecureString> 와 같은 관리 되지 않는 문자 타임 원본에서 개체는는 <xref:System.Console.ReadKey%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-137">The best way to construct a <xref:System.Security.SecureString> object is from a character-at-a-time unmanaged source, such as the <xref:System.Console.ReadKey%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="ca6ca-138">문자를 제거는 <xref:System.Security.SecureString> 개체</span><span class="sxs-lookup"><span data-stu-id="ca6ca-138">Remove characters from a <xref:System.Security.SecureString> object</span></span>  
 <span data-ttu-id="ca6ca-139">호출 하 여 개별 문자를 바꿀 수 있습니다는 <xref:System.Security.SecureString.SetAt%2A> 메서드를 호출 하 여 개별 문자를 제거 합니다 <xref:System.Security.SecureString.RemoveAt%2A> 메서드 또는 모든 문자를 제거는 <xref:System.Security.SecureString> 호출 하 여 인스턴스를 <xref:System.Security.SecureString.Clear%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-139">You can replace an individual character by calling the <xref:System.Security.SecureString.SetAt%2A> method, remove an individual character by calling the <xref:System.Security.SecureString.RemoveAt%2A> method, or remove all characters from the <xref:System.Security.SecureString> instance by calling the  <xref:System.Security.SecureString.Clear%2A> method.</span></span>  
  
 <span data-ttu-id="ca6ca-140">확인 된 <xref:System.Security.SecureString> 읽기 전용 개체</span><span class="sxs-lookup"><span data-stu-id="ca6ca-140">Make the <xref:System.Security.SecureString> object read-only</span></span>  
 <span data-ttu-id="ca6ca-141">문자열을 정의한 후는 <xref:System.Security.SecureString> 개체가 나타내는 호출 하면 해당 <xref:System.Security.SecureString.MakeReadOnly%2A> 읽기 전용 문자열을 설정 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-141">Once you have defined the string that the <xref:System.Security.SecureString> object represents, you call its  <xref:System.Security.SecureString.MakeReadOnly%2A> method to make the string read-only.</span></span>  
  
 <span data-ttu-id="ca6ca-142">에 대 한 정보를 가져오기는 <xref:System.Security.SecureString> 개체</span><span class="sxs-lookup"><span data-stu-id="ca6ca-142">Get information about the <xref:System.Security.SecureString> object</span></span>  
 <span data-ttu-id="ca6ca-143"><xref:System.Security.SecureString> 클래스에는 문자열에 대 한 정보를 제공 하는 두 명의 멤버: 해당 <xref:System.Security.SecureString.Length%2A> 문자열에서 UTF16 인코딩된 코드 단위 수를 나타내는 속성 및 <xref:System.Security.SecureString.IsReadOnly%2A>, 인스턴스가 있는지 여부를 나타내는 메서드 읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-143">The <xref:System.Security.SecureString> class has only two members that provide information about the string: its <xref:System.Security.SecureString.Length%2A> property, which indicates the number of UTF16-encoded code units in the string; and the <xref:System.Security.SecureString.IsReadOnly%2A>, method, which indicates whether the instance is read-only.</span></span>  
  
 <span data-ttu-id="ca6ca-144">할당 된 메모리를 해제 합니다 <xref:System.Security.SecureString> 인스턴스</span><span class="sxs-lookup"><span data-stu-id="ca6ca-144">Release the memory allocated to the <xref:System.Security.SecureString> instance</span></span>  
 <span data-ttu-id="ca6ca-145">때문에 <xref:System.Security.SecureString> 구현 합니다 <xref:System.IDisposable> 인터페이스를 호출 하 여 해당 메모리를 해제 합니다 <xref:System.Security.SecureString.Dispose%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-145">Because <xref:System.Security.SecureString> implements the <xref:System.IDisposable> interface, you release its memory by calling the <xref:System.Security.SecureString.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="ca6ca-146">합니다 <xref:System.Security.SecureString> 클래스에는 검사, 비교, 또는 값으로 변환 하는 멤버가 없습니다를 <xref:System.Security.SecureString>입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-146">The <xref:System.Security.SecureString> class has no members that inspect, compare, or convert the value of a <xref:System.Security.SecureString>.</span></span> <span data-ttu-id="ca6ca-147">이러한 멤버가 없으므로 우발적 이거나 악의적인 노출 로부터 인스턴스의 값을 보호할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-147">The absence of such members helps protect the value of the instance from accidental or malicious exposure.</span></span> <span data-ttu-id="ca6ca-148">적절 한 멤버를 사용 합니다 <xref:System.Runtime.InteropServices.Marshal?displayProperty=nameWithType> 클래스와 같은 <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> 의 값을 조작 하는 메서드인을 <xref:System.Security.SecureString> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-148">Use appropriate members of the <xref:System.Runtime.InteropServices.Marshal?displayProperty=nameWithType> class, such as the <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> method, to manipulate the value of a <xref:System.Security.SecureString> object.</span></span>  
  
 <span data-ttu-id="ca6ca-149">.NET Framework 클래스 라이브러리를 사용 하 여 일반적으로 <xref:System.Security.SecureString> 다음과 같은 방법으로 인스턴스:</span><span class="sxs-lookup"><span data-stu-id="ca6ca-149">The .NET Framework Class Library commonly uses <xref:System.Security.SecureString> instances in the following ways:</span></span>  
  
-   <span data-ttu-id="ca6ca-150">사용 하 여 프로세스에 대 한 암호 정보를 제공 하는 <xref:System.Diagnostics.ProcessStartInfo> 구조체 또는 오버 로드를 호출 하는 <xref:System.Diagnostics.Process.Start%2A?displayProperty=nameWithType> 형식의 매개 변수가 있는 메서드에 <xref:System.Security.SecureString>합니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-150">To provide password information to a process by using the <xref:System.Diagnostics.ProcessStartInfo> structure or by calling an overload of the <xref:System.Diagnostics.Process.Start%2A?displayProperty=nameWithType> method that has a parameter of type <xref:System.Security.SecureString>.</span></span>  
  
-   <span data-ttu-id="ca6ca-151">호출 하 여 네트워크 암호 정보를 제공 하는 <xref:System.Net.NetworkCredential> 형식의 매개 변수가 있는 클래스 생성자 <xref:System.Security.SecureString> 또는 사용 하 여는 <xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-151">To provide network password information by calling a <xref:System.Net.NetworkCredential> class constructor that has a parameter of type <xref:System.Security.SecureString> or by using the <xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="ca6ca-152">호출 하 여 SQL Server 인증에 대 한 암호 정보를 제공 하는 <xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=nameWithType> 생성자 또는 값을 검색 하는 <xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-152">To provide password information for SQL Server Authentication by calling the <xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=nameWithType> constructor or retrieving the value of the <xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="ca6ca-153">비관리 코드에 문자열로 전달.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-153">To pass a string to unmanaged code.</span></span> <span data-ttu-id="ca6ca-154">자세한 내용은 참조는 [SecureString 및 interop](#interop) 섹션입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-154">For more information, see the [SecureString and interop](#interop) section.</span></span>  
  
 [<span data-ttu-id="ca6ca-155">맨 위로 이동</span><span class="sxs-lookup"><span data-stu-id="ca6ca-155">Back to top</span></span>](#top)  
  
<a name="interop"></a>   
## <a name="securestring-and-interop"></a><span data-ttu-id="ca6ca-156">SecureString 및 interop</span><span class="sxs-lookup"><span data-stu-id="ca6ca-156">SecureString and interop</span></span>  
 <span data-ttu-id="ca6ca-157">운영 체제에서 직접 지원 하지 않으므로 <xref:System.Security.SecureString>를 값으로 변환 해야 합니다는 <xref:System.Security.SecureString> 개체를 문자열 기본 메서드를 전달 하기 전에 필수 문자열 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-157">Because the operating system does not  directly support <xref:System.Security.SecureString>, you must convert the value of the <xref:System.Security.SecureString> object to the required string type before passing the string to a native method.</span></span>  <span data-ttu-id="ca6ca-158"><xref:System.Runtime.InteropServices.Marshal> 클래스에 5 개의 메서드는이 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-158">The <xref:System.Runtime.InteropServices.Marshal> class has five methods that do this:</span></span>  
  
-   <span data-ttu-id="ca6ca-159"><xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType>를 변환 합니다 <xref:System.Security.SecureString> 문자열 com 인식 이진 문자열 (BSTR) 값</span><span class="sxs-lookup"><span data-stu-id="ca6ca-159"><xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType>, which converts the <xref:System.Security.SecureString> string value to a binary string (BSTR) recognized by COM.</span></span>  
  
-   <span data-ttu-id="ca6ca-160"><xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType> 및 <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType>에 복사를 <xref:System.Security.SecureString> 문자열 관리 되지 않는 메모리는 ANSI 문자열 값입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-160"><xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType> and <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType>, which copy the <xref:System.Security.SecureString> string value to an ANSI string in unmanaged memory.</span></span>  
  
-   <span data-ttu-id="ca6ca-161"><xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType> 및 <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>에 복사를 <xref:System.Security.SecureString> 문자열 관리 되지 않는 메모리에서 유니코드 문자열 값입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-161"><xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType> and <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>, which copy the <xref:System.Security.SecureString> string value to a Unicode string in unmanaged memory.</span></span>  
  
 <span data-ttu-id="ca6ca-162">이러한 메서드의 관리 되지 않는 메모리에서 일반 텍스트 문자열을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-162">Each of these methods creates a clear-text string in unmanaged memory.</span></span> <span data-ttu-id="ca6ca-163">것을 비우고 해당 메모리를 확보 하 여 더 이상 필요 없는 즉시 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-163">It is the responsibility of the developer to zero out and free that memory as soon as it is no longer needed.</span></span> <span data-ttu-id="ca6ca-164">각 문자열 변환과 메모리 할당 메서드에 해당 하는 메서드를 비우고 할당된 된 메모리:</span><span class="sxs-lookup"><span data-stu-id="ca6ca-164">Each of the string conversion and memory allocation methods has a corresponding method to zero out and free the allocated memory:</span></span>  
  
|<span data-ttu-id="ca6ca-165">할당 및 변환 메서드</span><span class="sxs-lookup"><span data-stu-id="ca6ca-165">Allocation and conversion method</span></span>|<span data-ttu-id="ca6ca-166">0과 free 메서드</span><span class="sxs-lookup"><span data-stu-id="ca6ca-166">Zero and free method</span></span>|  
|--------------------------------------|--------------------------|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=nameWithType>|  
  
 [<span data-ttu-id="ca6ca-167">맨 위로 이동</span><span class="sxs-lookup"><span data-stu-id="ca6ca-167">Back to top</span></span>](#top)  
  
<a name="HowSecure"></a>   
## <a name="how-secure-is-securestring"></a><span data-ttu-id="ca6ca-168">SecureString은 얼마나 안전?</span><span class="sxs-lookup"><span data-stu-id="ca6ca-168">How secure is SecureString?</span></span>  
 <span data-ttu-id="ca6ca-169">제대로 만들어지면를 <xref:System.Security.SecureString> 보다 더 많은 데이터 보호를 제공 하는 인스턴스는 <xref:System.String>합니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-169">When created properly, a <xref:System.Security.SecureString> instance provides more data protection than a <xref:System.String>.</span></span> <span data-ttu-id="ca6ca-170">문자 타임 원본에서 문자열을 만들 때 <xref:System.String> 여러 중간 메모리에 만듭니다. 반면 <xref:System.Security.SecureString> 바로 단일 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-170">When creating a string from a character-at-a-time source, <xref:System.String> creates multiple intermediate in memory, whereas  <xref:System.Security.SecureString> creates just a single instance.</span></span>  <span data-ttu-id="ca6ca-171">가비지 수집이 <xref:System.String> 개체 명확 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-171">Garbage collection of <xref:System.String> objects  is non-deterministic.</span></span> <span data-ttu-id="ca6ca-172">또한 해당 메모리를 고정 되어 있지 않은, 때문에 가비지 수집기는 복사본 추가 <xref:System.String> 값을 이동 하 고 메모리를 압축 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-172">In addition, because its memory is not pinned, the garbage collector will make additional copies of <xref:System.String> values when moving and compacting memory.</span></span> <span data-ttu-id="ca6ca-173">메모리를 할당 하는 반면를 <xref:System.Security.SecureString> 개체가 고정 되어 및 호출 하 여 해당 메모리를 해제할 수는 <xref:System.Security.SecureString.Dispose%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-173">In contrast, the memory allocated to a <xref:System.Security.SecureString> object is pinned,  and that memory can be freed by calling the <xref:System.Security.SecureString.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="ca6ca-174">데이터에 저장 되지만 <xref:System.Security.SecureString> 인스턴스가에 저장 된 데이터 보다 더 안전를 <xref:System.String> 인스턴스를 얼마나 안전에 중요 한 제한이 있습니다를 <xref:System.Security.SecureString> 인스턴스가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-174">Although data stored in a <xref:System.Security.SecureString> instance is more secure than data stored in a <xref:System.String> instance, there are significant limitations on how secure a <xref:System.Security.SecureString> instance is.</span></span> <span data-ttu-id="ca6ca-175">여기에는 다음이 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-175">These include:</span></span>  
  
 <span data-ttu-id="ca6ca-176">플랫폼</span><span class="sxs-lookup"><span data-stu-id="ca6ca-176">Platform</span></span>  
 <span data-ttu-id="ca6ca-177">Windows 운영 체제의 콘텐츠는 <xref:System.Security.SecureString> 인스턴스의 내부 문자 배열 암호화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-177">On the Windows operating system, the contents of a <xref:System.Security.SecureString> instance's internal character array are encrypted.</span></span> <span data-ttu-id="ca6ca-178">그러나 누락 된 Api 또는 주요 관리 문제를 인해 여부 암호화가 모든 플랫폼에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-178">However, whether because of missing APIs or key management issues,  encryption is not available on all platforms.</span></span> <span data-ttu-id="ca6ca-179">이 플랫폼 종속성으로 인해 <xref:System.Security.SecureString>은 Windows 플랫폼 이외의 내부 스토리지를 암호화하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-179">Because of this platform dependency, <xref:System.Security.SecureString> does not encrypt the internal storage on non-Windows platform.</span></span> <span data-ttu-id="ca6ca-180">다른 기술은 추가 보호를 제공할 해당 플랫폼에 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-180">Other techniques are used on those platforms to provide additional protection.</span></span>
  
 <span data-ttu-id="ca6ca-181">기간</span><span class="sxs-lookup"><span data-stu-id="ca6ca-181">Duration</span></span>  
 <span data-ttu-id="ca6ca-182">경우에를 <xref:System.Security.SecureString> 구현은 암호화를 활용 하려면 수에 할당 된 일반 텍스트를 <xref:System.Security.SecureString> 인스턴스는 다양 한 시간에 노출 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-182">Even if the <xref:System.Security.SecureString> implementation is able to take advantage of encryption, the plain text assigned to the <xref:System.Security.SecureString> instance may be exposed at various times:</span></span>  
  
-   <span data-ttu-id="ca6ca-183">Windows 운영 체제 수준에서는 보안 문자열 구현을 제공 하지 않습니다,.NET Framework도 하기 때문에 사용 하기 위해 보안 문자열 값을 텍스트로 표현으로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-183">Because Windows doesn't offer a secure string implementation at the operating system level, the .NET Framework still has to convert the secure string value to its plain text representation in order to use it.</span></span>  
  
-   <span data-ttu-id="ca6ca-184">때마다 보안 문자열의 값은 수정 메서드에서 같은 <xref:System.Security.SecureString.AppendChar%2A> 또는 <xref:System.Security.SecureString.RemoveAt%2A>, 해당 암호를 해독 해야 (즉, 다시 일반 텍스트로 변환), 수정 및 다시 암호화 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-184">Whenever the value of the secure string is modified by methods such as <xref:System.Security.SecureString.AppendChar%2A> or <xref:System.Security.SecureString.RemoveAt%2A>, it must be decrypted (that is, converted back to plain text), modified, and then encrypted again.</span></span>  
  
-   <span data-ttu-id="ca6ca-185">보안 문자열은 interop 호출에 사용 하는 경우 ANSI 문자열, 유니코드 문자열 또는 이진 문자열 (BSTR)을 변환 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-185">If the secure string is used in an interop call, it must be converted to an ANSI string, a Unicode string, or a binary string (BSTR).</span></span> <span data-ttu-id="ca6ca-186">자세한 내용은 참조는 [SecureString 및 interop](#interop) 섹션입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-186">For more information, see the [SecureString and interop](#interop) section.</span></span>  
  
 <span data-ttu-id="ca6ca-187">시간 간격을 <xref:System.Security.SecureString> 인스턴스의 값은 노출 비교 단순히 단축 됩니다는 <xref:System.String> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-187">The time interval for which the <xref:System.Security.SecureString> instance's value is exposed  is merely shortened in comparison to the <xref:System.String> class.</span></span>  
  
 <span data-ttu-id="ca6ca-188">스토리지 및 사용</span><span class="sxs-lookup"><span data-stu-id="ca6ca-188">Storage versus usage</span></span>  
 <span data-ttu-id="ca6ca-189">보다 일반적으로 <xref:System.Security.SecureString> 클래스는 보호되거나 기밀로 유지되어야 하는 문자열 값에 대한 스토리지 메커니즘을 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-189">More generally, the <xref:System.Security.SecureString> class defines a storage mechanism for string values that should be protected or kept confidential.</span></span> <span data-ttu-id="ca6ca-190">그러나.NET Framework 자체 외부에서 사용 현황 메커니즘이 없습니다 지원 <xref:System.Security.SecureString>합니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-190">However, outside of the .NET Framework itself, no usage mechanism supports <xref:System.Security.SecureString>.</span></span> <span data-ttu-id="ca6ca-191">이 보안 문자열은 해당 대상에 의해 인식 될 수 있는 사용 가능한 형식 (일반적으로 일반 텍스트 형식)으로 변환 해야 하 고 암호 해독 및 변환 사용자 공간에서 발생 해야 한다고 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-191">This means that the secure string must be converted to a usable form (typically a clear text form) that can be recognized by its target, and     that decryption and conversion must occur in user space.</span></span>  
  
 <span data-ttu-id="ca6ca-192">전반적으로 <xref:System.Security.SecureString> 보다 더 안전  <xref:System.String> /소문자 구분 문자열 데이터의 노출을 제한 하므로 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-192">Overall, <xref:System.Security.SecureString> is more secure than <xref:System.String> because it limits the exposure of sensitive string data.</span></span> <span data-ttu-id="ca6ca-193">그러나 이러한 문자열 프로세스 또는 호스트 컴퓨터, 프로세스 덤프 또는 사용자가 볼 수 있는 스왑 파일을 실행 하 여 악의적인 프로세스와 같은 원시 메모리에 액세스할 수 있는 작업이 여전히 노출 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-193">However, those strings may still be exposed to any process or operation that has access to raw memory, such as a malicious process running on the host computer, a process dump, or a user-viewable swap file.</span></span> <span data-ttu-id="ca6ca-194">사용 하는 대신 <xref:System.Security.SecureString> 암호를 보호 하는 것이 좋습니다 불투명 핸들은 프로세스 외부에서 저장 된 자격 증명을 사용 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-194">Instead of using <xref:System.Security.SecureString> to protect passwords, the recommended alternative is to use an opaque handle to credentials that are stored outside of the process.</span></span>  
  
 [<span data-ttu-id="ca6ca-195">맨 위로 이동</span><span class="sxs-lookup"><span data-stu-id="ca6ca-195">Back to top</span></span>](#top)  
  
   
  
## Examples  
 <span data-ttu-id="ca6ca-196">다음 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Security.SecureString> 새 프로세스를 시작 하려면 자격 증명으로 사용 하 여에 대 한 사용자의 암호를 보호 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-196">The following example demonstrates how to use a <xref:System.Security.SecureString> to secure a user's password for use as a credential to start a new process.</span></span>  
  
 [!code-csharp[System.Security.SecureString.Ctor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/ctor4.cs#4)]
 [!code-vb[System.Security.SecureString.Ctor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/ctor4.vb#4)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.InteropServices.ComVisibleAttribute" />
    <altmember cref="T:System.Runtime.InteropServices.Marshal" />
    <altmember cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
    <altmember cref="T:System.IDisposable" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ca6ca-197"><see cref="T:System.Security.SecureString" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-197">Initializes a new instance of the <see cref="T:System.Security.SecureString" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecureString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SecureString();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ca6ca-198"><see cref="T:System.Security.SecureString" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-198">Initializes a new instance of the <see cref="T:System.Security.SecureString" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ca6ca-199">다음 예제에서는 기본 (또는 매개 변수가 없는) 생성자를 인스턴스화하는 새 <xref:System.Security.SecureString> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-199">The following example uses the default (or parameterless) constructor to instantiate a new <xref:System.Security.SecureString> object.</span></span> <span data-ttu-id="ca6ca-200">그런 다음 호출 하 여 <xref:System.Security.SecureString.AppendChar%2A> 문자의 배열에 추가 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-200">It then calls the <xref:System.Security.SecureString.AppendChar%2A> method to add an array of characters to it.</span></span>  
  
 [!code-cpp[System.Security.SecureString.Ctor#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cpp/Ctor2.cpp#2)]
 [!code-csharp[System.Security.SecureString.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/Ctor2.cs#2)]
 [!code-vb[System.Security.SecureString.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/ctor2.vb#2)]  
  
 <span data-ttu-id="ca6ca-201">다음 예제에서는 한 <xref:System.Security.SecureString> 값에서 개체를 <xref:System.String> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-201">The following example creates a <xref:System.Security.SecureString> object from the value of a <xref:System.String> object.</span></span>  
  
 [!code-cpp[System.Security.SecureString.Ctor#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cpp/Ctor3.cpp#3)]
 [!code-csharp[System.Security.SecureString.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/Ctor3.cs#3)]
 [!code-vb[System.Security.SecureString.Ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/Ctor3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ca6ca-202">이 인스턴스의 값을 보호하거나 보호 해제하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-202">An error occurred while protecting or unprotecting the value of this instance.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="ca6ca-203">이 작업이 이 플랫폼에서 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-203">This operation is not supported on this platform.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecureString (char* value, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char* value, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SecureString(char* value, int length);" />
      <MemberSignature Language="F#" Value="new System.Security.SecureString : nativeptr&lt;char&gt; * int -&gt; System.Security.SecureString" Usage="new System.Security.SecureString (value, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char*" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ca6ca-204"><see cref="T:System.Char" /> 개체의 배열에 대한 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-204">A pointer to an array of <see cref="T:System.Char" /> objects.</span></span></param>
        <param name="length"><span data-ttu-id="ca6ca-205">새 인스턴스에 포함할 <paramref name="value" />의 요소 수입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-205">The number of elements of <paramref name="value" /> to include in the new instance.</span></span></param>
        <summary><span data-ttu-id="ca6ca-206"><see cref="T:System.Char" /> 개체의 하위 배열에서 <see cref="T:System.Security.SecureString" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-206">Initializes a new instance of the <see cref="T:System.Security.SecureString" /> class from a subarray of <see cref="T:System.Char" /> objects.</span></span>  
  
<span data-ttu-id="ca6ca-207">이 생성자는 CLS 규격이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-207">This constructor is not CLS-compliant.</span></span> <span data-ttu-id="ca6ca-208">CLS 규격 대체 항목은 <see cref="M:System.Security.SecureString.#ctor" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-208">The CLS-compliant alternative is <see cref="M:System.Security.SecureString.#ctor" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca6ca-209">이 생성자는 새 <xref:System.Security.SecureString> 개체에 있는 문자의 수를 `value` 에 지정 된 `length`; 인스턴스의 값이 다음 암호화 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-209">This constructor initializes the new <xref:System.Security.SecureString> object to the number of characters in `value` specified by `length`; the value of the instance is then encrypted.</span></span>  
  
 <span data-ttu-id="ca6ca-210">C#에서는이 생성자는 안전 하지 않은 코드 컨텍스트에서 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-210">In C#, this constructor is defined only in the context of unsafe code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca6ca-211">다음 예제에서는 새 인스턴스화합니다 <xref:System.Security.SecureString> 문자 배열에 해당 생성자에 대 한 포인터를 전달 하 여 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-211">The following example instantiates a new <xref:System.Security.SecureString> object by passing its constructor a pointer to a character array.</span></span>  
  
 [!code-cpp[System.Security.SecureString.Ctor2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.security.securestring.ctor2/cpp/ctor1.cpp#1)]
 [!code-csharp[System.Security.SecureString.Ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.security.securestring.ctor2/cs/ctor1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ca6ca-212"><paramref name="value" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="ca6ca-212"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ca6ca-213"><paramref name="length" />가 0보다 작거나 65,536보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-213"><paramref name="length" /> is less than zero or greater than 65,536.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ca6ca-214">이 보안 문자열 값을 보호하거나 보호 해제하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-214">An error occurred while protecting or unprotecting the value of this secure string.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="ca6ca-215">이 작업이 이 플랫폼에서 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-215">This operation is not supported on this platform.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="ca6ca-216">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-216">requires full trust for the immediate caller.</span></span> <span data-ttu-id="ca6ca-217">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-217">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AppendChar">
      <MemberSignature Language="C#" Value="public void AppendChar (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendChar(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.AppendChar(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendChar (c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendChar(char c);" />
      <MemberSignature Language="F#" Value="member this.AppendChar : char -&gt; unit" Usage="secureString.AppendChar c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="ca6ca-218">이 보안 문자열에 추가할 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-218">A character to append to this secure string.</span></span></param>
        <summary><span data-ttu-id="ca6ca-219">현재 보안 문자열의 끝에 문자를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-219">Appends a character to the end of the current secure string.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca6ca-220">있는 경우이 보안 문자열의 값이; 보호 구현에는 암호화와 같은 보호 메커니즘을 사용 하는 경우 `c` 덧붙여집니다; 보안 문자열의 새 값은 다시 보호 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-220">If the implementation uses a protection mechanism, such as encryption, the value of this secure string, if any, is unprotected; `c` is appended; then the new value of the secure string is re-protected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca6ca-221">다음 예제에서는 하는 방법을 <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>를 <xref:System.Security.SecureString.RemoveAt%2A>를 <xref:System.Security.SecureString.SetAt%2A>, 및 <xref:System.Security.SecureString.Clear%2A> 메서드가 값에 영향을 <xref:System.Security.SecureString> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-221">The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.</span></span>  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 <span data-ttu-id="ca6ca-222">다음 예제에서는 하는 방법을 <xref:System.Security.SecureString.AppendChar%2A> 고 <xref:System.Security.SecureString.RemoveAt%2A> 메서드를 사용 하 여 암호의 문자를 수집할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-222">The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password.</span></span>  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="ca6ca-223">이 보안 문자열이 이미 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="ca6ca-223">This secure string has already been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ca6ca-224">이 보안 문자열이 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="ca6ca-224">This secure string is read-only.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ca6ca-225">이 작업을 수행하면 이 보안 문자열의 길이가 65536문자보다 커집니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-225">Performing this operation would make the length of this secure string greater than 65,536 characters.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ca6ca-226">이 보안 문자열 값을 보호하거나 보호 해제하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-226">An error occurred while protecting or unprotecting the value of this secure string.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="secureString.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ca6ca-227">현재 보안 문자열의 값을 삭제합니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-227">Deletes the value of the current secure string.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca6ca-228">이 보안 문자열의 값을 포함 하는 컴퓨터 메모리는 0, 다음이 보안 문자열 값의 길이 0으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-228">The computer memory that contains the value of this secure string is zeroed, then the length of the value of this secure string is set to zero.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca6ca-229">다음 예제에서는 하는 방법을 <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>를 <xref:System.Security.SecureString.RemoveAt%2A>를 <xref:System.Security.SecureString.SetAt%2A>, 및 <xref:System.Security.SecureString.Clear%2A> 메서드가 값에 영향을 <xref:System.Security.SecureString> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-229">The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.</span></span>  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="ca6ca-230">이 보안 문자열이 이미 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="ca6ca-230">This secure string has already been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ca6ca-231">이 보안 문자열이 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="ca6ca-231">This secure string is read-only.</span></span></exception>
        <altmember cref="P:System.Security.SecureString.Length" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.SecureString Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.SecureString Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As SecureString" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::SecureString ^ Copy();" />
      <MemberSignature Language="F#" Value="member this.Copy : unit -&gt; System.Security.SecureString" Usage="secureString.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.SecureString</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ca6ca-232">현재 보안 문자열의 복사본을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-232">Creates a copy of the current secure string.</span></span></summary>
        <returns><span data-ttu-id="ca6ca-233">이 보안 문자열의 복제본입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-233">A duplicate of this secure string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca6ca-234">인스턴스는 <xref:System.Security.SecureString> 는 읽기 전용으로 표시 되어 해당 인스턴스에 대 한 복사본 됩니다 읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-234">If an instance of a <xref:System.Security.SecureString> is marked read-only, the copy of that instance will not be read-only.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="ca6ca-235">이 보안 문자열이 이미 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="ca6ca-235">This secure string has already been disposed.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ca6ca-236">이 보안 문자열 값을 보호하거나 보호 해제하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-236">An error occurred while protecting or unprotecting the value of this secure string.</span></span></exception>
        <altmember cref="M:System.Security.SecureString.MakeReadOnly" />
        <altmember cref="M:System.Security.SecureString.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="secureString.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ca6ca-237">현재 <see cref="T:System.Security.SecureString" /> 개체에서 사용하는 모든 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-237">Releases all resources used by the current <see cref="T:System.Security.SecureString" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca6ca-238"><xref:System.Security.SecureString.Dispose%2A> 메서드는이 값을 포함 하는 할당된 된 메모리에 이진 0 씁니다 <xref:System.Security.SecureString> 개체를 만든 다음 할당 된 메모리를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-238">The <xref:System.Security.SecureString.Dispose%2A> method writes binary zeroes to the allocated memory that contains the value of this <xref:System.Security.SecureString> object, then frees the allocated memory.</span></span>  
  
 <span data-ttu-id="ca6ca-239">자세한 내용은 [가비지 수집](~/docs/standard/garbage-collection/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-239">For more information, see [Garbage Collection](~/docs/standard/garbage-collection/index.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAt">
      <MemberSignature Language="C#" Value="public void InsertAt (int index, char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertAt(int32 index, char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAt (index As Integer, c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertAt(int index, char c);" />
      <MemberSignature Language="F#" Value="member this.InsertAt : int * char -&gt; unit" Usage="secureString.InsertAt (index, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="ca6ca-240"><paramref name="c" /> 매개 변수가 삽입될 인덱스 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-240">The index position where parameter <paramref name="c" /> is inserted.</span></span></param>
        <param name="c"><span data-ttu-id="ca6ca-241">삽입할 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-241">The character to insert.</span></span></param>
        <summary><span data-ttu-id="ca6ca-242">이 보안 문자열의 지정한 인덱스 위치에 문자를 삽입합니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-242">Inserts a character in this secure string at the specified index position.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca6ca-243">인덱스는 0부터 시작 합니다. 이 보안 문자열에서 첫 번째 문자는 인덱스 위치 0입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-243">The index is zero-based; the first character in this secure string is at index position zero.</span></span>  
  
 <span data-ttu-id="ca6ca-244">있는 경우 보안 문자열의 값; 보호 된 구현을 암호화와 같은 보호 메커니즘을 사용 하는 경우 `c` 는 지정 된 인덱스 위치에 삽입 하는 새 값을 다시 보호 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-244">If the implementation uses a protection mechanism, such as encryption, the value of the secure string, if any, is unprotected; `c` is inserted at the specified index position; then the new value is re-protected.</span></span> <span data-ttu-id="ca6ca-245"><xref:System.Security.SecureString.InsertAt%2A> 메서드는 동일한 결과 생성 합니다 <xref:System.Security.SecureString.AppendChar%2A> 경우 보안 문자열의 끝 문자를 삽입 하는 메서드를를 `index` 의 매개 변수 <xref:System.Security.SecureString.InsertAt%2A> 이 인스턴스의 길이로.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-245">The <xref:System.Security.SecureString.InsertAt%2A> method yields the same results as the <xref:System.Security.SecureString.AppendChar%2A> method, which inserts a character at the end of a secure string, if the `index` parameter of <xref:System.Security.SecureString.InsertAt%2A> is set to the length of this instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca6ca-246">다음 예제에서는 하는 방법을 <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>를 <xref:System.Security.SecureString.RemoveAt%2A>를 <xref:System.Security.SecureString.SetAt%2A>, 및 <xref:System.Security.SecureString.Clear%2A> 메서드가 값에 영향을 <xref:System.Security.SecureString> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-246">The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.</span></span>  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="ca6ca-247">이 보안 문자열이 이미 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="ca6ca-247">This secure string has already been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ca6ca-248">이 보안 문자열이 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="ca6ca-248">This secure string is read-only.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ca6ca-249"><paramref name="index" />가 0보다 작거나 이 보안 문자열의 길이보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="ca6ca-249"><paramref name="index" /> is less than zero, or greater than the length of this secure string.</span></span>  
  
<span data-ttu-id="ca6ca-250">또는</span><span class="sxs-lookup"><span data-stu-id="ca6ca-250">-or-</span></span> 
<span data-ttu-id="ca6ca-251">이 작업을 수행하면 이 보안 문자열의 길이가 65536문자보다 커집니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-251">Performing this operation would make the length of this secure string greater than 65,536 characters.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ca6ca-252">이 보안 문자열 값을 보호하거나 보호 해제하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-252">An error occurred while protecting or unprotecting the value of this secure string.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReadOnly () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsReadOnly();" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : unit -&gt; bool" Usage="secureString.IsReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ca6ca-253">이 보안 문자열이 읽기 전용으로 표시되었는지를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-253">Indicates whether this secure string is marked read-only.</span></span></summary>
        <returns><span data-ttu-id="ca6ca-254">이 보안 문자열이 읽기 전용이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-254"><see langword="true" /> if this secure string is marked read-only; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca6ca-255">인스턴스 뒤 <xref:System.Security.SecureString> 읽기 전용으로 표시 되는 <xref:System.Security.SecureString.MakeReadOnly%2A> 인스턴스 throw의 값을 수정 하려고 하면 메서드는 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-255">After an instance of <xref:System.Security.SecureString> is marked read-only by the <xref:System.Security.SecureString.MakeReadOnly%2A> method, any attempt to modify the value of the instance throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="ca6ca-256">사용 하 여는 <xref:System.Security.SecureString.IsReadOnly%2A> 테스트할 메서드 있는지 여부를 <xref:System.Security.SecureString> 수정 하기 전에 읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-256">Use the <xref:System.Security.SecureString.IsReadOnly%2A> method to test whether a <xref:System.Security.SecureString> is read-only before attempting to modify it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="ca6ca-257">이 보안 문자열이 이미 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="ca6ca-257">This secure string has already been disposed.</span></span></exception>
        <altmember cref="M:System.Security.SecureString.MakeReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Security.SecureString.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Security.SecureString.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ca6ca-258">현재 보안 문자열의 문자 수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-258">Gets the number of characters in the current secure string.</span></span></summary>
        <value><span data-ttu-id="ca6ca-259">이 보안 문자열에 있는 <see cref="T:System.Char" /> 개체의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-259">The number of <see cref="T:System.Char" /> objects in this secure string.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca6ca-260"><xref:System.Security.SecureString.Length%2A> 속성의 수를 반환 합니다. <xref:System.Char> 이 인스턴스의 개체를 유니코드 문자 수가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-260">The <xref:System.Security.SecureString.Length%2A> property returns the number of <xref:System.Char> objects in this instance, not the number of Unicode characters.</span></span> <span data-ttu-id="ca6ca-261">둘 이상의 유니코드 문자를 나타낼 수 있습니다 <xref:System.Char> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-261">A Unicode character might be represented by more than one <xref:System.Char> object.</span></span>  
  
 <span data-ttu-id="ca6ca-262">최대 길이 <xref:System.Security.SecureString> 인스턴스가 65,536 개의 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-262">The maximum length of a <xref:System.Security.SecureString> instance is 65,536 characters.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="ca6ca-263">이 보안 문자열이 이미 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="ca6ca-263">This secure string has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MakeReadOnly">
      <MemberSignature Language="C#" Value="public void MakeReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MakeReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.MakeReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub MakeReadOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MakeReadOnly();" />
      <MemberSignature Language="F#" Value="member this.MakeReadOnly : unit -&gt; unit" Usage="secureString.MakeReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ca6ca-264">이 보안 문자열의 텍스트 값을 읽기 전용으로 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-264">Makes the text value of this secure string read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca6ca-265">텍스트 값의 인스턴스를 초기화를 <xref:System.Security.SecureString> 클래스를 <xref:System.Security.SecureString.%23ctor%2A> 생성자를 사용 하 여 값을 수정 하 고는 <xref:System.Security.SecureString.Clear%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, <xref:System.Security.SecureString.InsertAt%2A>, 및 <xref:System.Security.SecureString.AppendChar%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-265">Initialize the text value of an instance of the <xref:System.Security.SecureString> class with the <xref:System.Security.SecureString.%23ctor%2A> constructors, and modify the value with the <xref:System.Security.SecureString.Clear%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, <xref:System.Security.SecureString.InsertAt%2A>, and <xref:System.Security.SecureString.AppendChar%2A> methods.</span></span>  
  
 <span data-ttu-id="ca6ca-266">사용 하 여 최종 수정을 수행한 후의 <xref:System.Security.SecureString.MakeReadOnly%2A> 인스턴스의 값을 변경할 수 없는 확인 하는 방법 (읽기 전용).</span><span class="sxs-lookup"><span data-stu-id="ca6ca-266">After you have made your final modifications, use the <xref:System.Security.SecureString.MakeReadOnly%2A> method to make the value of the instance immutable (read-only).</span></span> <span data-ttu-id="ca6ca-267">더 이상 throw를 수정 하려고 값은 읽기 전용으로 표시 되 면 후는 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-267">After the value is marked as read-only, any further attempt to modify it throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="ca6ca-268">호출의 효과 <xref:System.Security.SecureString.MakeReadOnly%2A> 영구적 때문에 <xref:System.Security.SecureString> 클래스는 보안 문자열은 수정 가능 하 게 다시 없는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-268">The effect of invoking <xref:System.Security.SecureString.MakeReadOnly%2A> is permanent because the <xref:System.Security.SecureString> class provides no means to make the secure string modifiable again.</span></span> <span data-ttu-id="ca6ca-269">사용 합니다 <xref:System.Security.SecureString.IsReadOnly%2A> 인스턴스에 있는지 여부를 테스트 하는 방법 <xref:System.Security.SecureString> 읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-269">Use the <xref:System.Security.SecureString.IsReadOnly%2A> method to test whether an instance of <xref:System.Security.SecureString> is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca6ca-270">다음 예제에서는 하는 방법을 <xref:System.Security.SecureString.AppendChar%2A> 고 <xref:System.Security.SecureString.RemoveAt%2A> 메서드를 사용 하 여 암호의 문자를 수집할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-270">The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password.</span></span> <span data-ttu-id="ca6ca-271">암호를 수집한 후 읽기 전용으로 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-271">After the password is collected, it is made read-only.</span></span>  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="ca6ca-272">이 보안 문자열이 이미 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="ca6ca-272">This secure string has already been disposed.</span></span></exception>
        <altmember cref="M:System.Security.SecureString.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="member this.RemoveAt : int -&gt; unit" Usage="secureString.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="ca6ca-273">이 보안 문자열에서 문자의 인덱스 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-273">The index position of a character in this secure string.</span></span></param>
        <summary><span data-ttu-id="ca6ca-274">이 보안 문자열에서 지정한 인덱스 위치의 문자를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-274">Removes the character at the specified index position from this secure string.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca6ca-275">인덱스는 0부터 시작 합니다. 이 인스턴스에서 첫 번째 문자의 인덱스 위치 0에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="ca6ca-275">The index is zero-based; the first character in this instance is at index position zero.</span></span>  
  
 <span data-ttu-id="ca6ca-276">있는 경우이 보안 문자열의 값이; 보호 구현에는 암호화와 같은 보호 메커니즘을 사용 하는 경우 지정된 된 인덱스 위치에 있는 문자가 제거 됩니다. 그런 다음 새 값이 다시 보호 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-276">If the implementation uses a protection mechanism, such as encryption, the value of this secure string, if any, is unprotected; the character at the specified index position is removed; then the new value is re-protected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca6ca-277">다음 예제에서는 하는 방법을 <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>를 <xref:System.Security.SecureString.RemoveAt%2A>를 <xref:System.Security.SecureString.SetAt%2A>, 및 <xref:System.Security.SecureString.Clear%2A> 메서드가 값에 영향을 <xref:System.Security.SecureString> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-277">The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.</span></span>  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 <span data-ttu-id="ca6ca-278">다음 예제에서는 하는 방법을 <xref:System.Security.SecureString.AppendChar%2A> 고 <xref:System.Security.SecureString.RemoveAt%2A> 메서드를 사용 하 여 암호의 문자를 수집할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-278">The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password.</span></span>  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="ca6ca-279">이 보안 문자열이 이미 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="ca6ca-279">This secure string has already been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ca6ca-280">이 보안 문자열이 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="ca6ca-280">This secure string is read-only.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ca6ca-281"><paramref name="index" />가 0보다 작거나 이 보안 문자열의 길이보다 크거나 같은 경우</span><span class="sxs-lookup"><span data-stu-id="ca6ca-281"><paramref name="index" /> is less than zero, or greater than or equal to the length of this secure string.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ca6ca-282">이 보안 문자열 값을 보호하거나 보호 해제하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-282">An error occurred while protecting or unprotecting the value of this secure string.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetAt">
      <MemberSignature Language="C#" Value="public void SetAt (int index, char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAt(int32 index, char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.SetAt(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAt (index As Integer, c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAt(int index, char c);" />
      <MemberSignature Language="F#" Value="member this.SetAt : int * char -&gt; unit" Usage="secureString.SetAt (index, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="ca6ca-283">이 보안 문자열에서 기존 문자의 인덱스 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-283">The index position of an existing character in this secure string</span></span></param>
        <param name="c"><span data-ttu-id="ca6ca-284">기존 문자를 바꾸는 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-284">A character that replaces the existing character.</span></span></param>
        <summary><span data-ttu-id="ca6ca-285">지정한 인덱스 위치의 기존 문자를 다른 문자로 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-285">Replaces the existing character at the specified index position with another character.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca6ca-286">인덱스는 0부터 시작 합니다. 이 인스턴스에서 첫 번째 문자의 인덱스 위치 0에 있는 경우</span><span class="sxs-lookup"><span data-stu-id="ca6ca-286">The index is zero-based; the first character in this instance is at index position zero.</span></span>  
  
 <span data-ttu-id="ca6ca-287">있는 경우 보안 문자열의 값; 보호 된 구현을 암호화와 같은 보호 메커니즘을 사용 하는 경우 `c` 는 지정 된 인덱스 위치에 할당 된 새 값을 다시 보호 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-287">If the implementation uses a protection mechanism, such as encryption, the value of the secure string, if any, is unprotected; `c` is assigned to the specified index position; then the new value is re-protected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca6ca-288">다음 예제에서는 하는 방법을 <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>를 <xref:System.Security.SecureString.RemoveAt%2A>를 <xref:System.Security.SecureString.SetAt%2A>, 및 <xref:System.Security.SecureString.Clear%2A> 메서드가 값에 영향을 <xref:System.Security.SecureString> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-288">The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.</span></span>  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="ca6ca-289">이 보안 문자열이 이미 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="ca6ca-289">This secure string has already been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ca6ca-290">이 보안 문자열이 읽기 전용인 경우</span><span class="sxs-lookup"><span data-stu-id="ca6ca-290">This secure string is read-only.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ca6ca-291"><paramref name="index" />가 0보다 작거나 이 보안 문자열의 길이보다 크거나 같은 경우</span><span class="sxs-lookup"><span data-stu-id="ca6ca-291"><paramref name="index" /> is less than zero, or greater than or equal to the length of this secure string.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="ca6ca-292">이 보안 문자열 값을 보호하거나 보호 해제하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="ca6ca-292">An error occurred while protecting or unprotecting the value of this secure string.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>