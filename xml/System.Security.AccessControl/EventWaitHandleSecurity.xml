<Type Name="EventWaitHandleSecurity" FullName="System.Security.AccessControl.EventWaitHandleSecurity">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ded7513816f9e08c0ea0a32adb24931428a4731d" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56770193" /></Metadata><TypeSignature Language="C#" Value="public sealed class EventWaitHandleSecurity : System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EventWaitHandleSecurity extends System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.EventWaitHandleSecurity" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EventWaitHandleSecurity&#xA;Inherits NativeObjectSecurity" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventWaitHandleSecurity sealed : System::Security::AccessControl::NativeObjectSecurity" />
  <TypeSignature Language="F#" Value="type EventWaitHandleSecurity = class&#xA;    inherit NativeObjectSecurity" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.NativeObjectSecurity</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="b5d73-101">명명된 시스템 대기 핸들에 적용된 Windows 액세스 제어 보안을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-101">Represents the Windows access control security applied to a named system wait handle.</span></span> <span data-ttu-id="b5d73-102">이 클래스는 상속될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5d73-103"><xref:System.Security.AccessControl.EventWaitHandleSecurity> 액세스 명명 된 시스템 대기 핸들에 대 한 권한 및 액세스 시도 감사 하는 방법도 지정 개체를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-103">An <xref:System.Security.AccessControl.EventWaitHandleSecurity> object specifies access rights for a named system wait handle, and also specifies the way access attempts are audited.</span></span> <span data-ttu-id="b5d73-104">대기 핸들에 대 한 액세스 권한 규칙을 나타내는 각 액세스 규칙으로 표시 됩니다는 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-104">Access rights to the wait handle are expressed as rules, with each access rule represented by an <xref:System.Security.AccessControl.EventWaitHandleAccessRule> object.</span></span> <span data-ttu-id="b5d73-105">각 감사 규칙은 표현는 <xref:System.Security.AccessControl.EventWaitHandleAuditRule> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-105">Each auditing rule is represented by an <xref:System.Security.AccessControl.EventWaitHandleAuditRule> object.</span></span>  
  
 <span data-ttu-id="b5d73-106">이 미러링 각 보안 개체에 최대 하나의 임의 액세스 제어 목록 (DACL) 보안된 개체 및 최대 하나의 시스템 액세스 제어 목록 (SACL) 되는 액세스를 지정 하는 액세스를 제어 하는 기본 Windows 보안 시스템 시도 감사 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-106">This mirrors the underlying Windows security system, in which each securable object has at most one discretionary access control list (DACL) that controls access to the secured object, and at most one system access control list (SACL) that specifies which access attempts are audited.</span></span> <span data-ttu-id="b5d73-107">DACL과 SACL는 액세스 및 사용자 및 그룹에 대 한 감사를 지정 하는 액세스 제어 항목 (ACE) 목록을 정렬 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-107">The DACL and SACL are ordered lists of access control entries (ACE) that specify access and auditing for users and groups.</span></span> <span data-ttu-id="b5d73-108"><xref:System.Security.AccessControl.EventWaitHandleAccessRule> 또는 <xref:System.Security.AccessControl.EventWaitHandleAuditRule> 개체는 둘 이상의 ACE를 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-108">An <xref:System.Security.AccessControl.EventWaitHandleAccessRule> or <xref:System.Security.AccessControl.EventWaitHandleAuditRule> object might represent more than one ACE.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5d73-109"><xref:System.Threading.EventWaitHandle> 명명 된 시스템 대기 핸들 또는 개체에는 로컬 대기 핸들을 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-109">An <xref:System.Threading.EventWaitHandle> object can represent a local wait handle or a named system wait handle.</span></span> <span data-ttu-id="b5d73-110">Windows 액세스 제어 보안은 명명 된 시스템 대기 핸들에 대해서만 의미가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-110">Windows access control security is meaningful only for named system wait handles.</span></span>  
  
 <span data-ttu-id="b5d73-111"><xref:System.Security.AccessControl.EventWaitHandleSecurity>, <xref:System.Security.AccessControl.EventWaitHandleAccessRule>, 및 <xref:System.Security.AccessControl.EventWaitHandleAuditRule> 클래스 Acl 및 Ace의 구현 세부 정보를 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-111">The <xref:System.Security.AccessControl.EventWaitHandleSecurity>, <xref:System.Security.AccessControl.EventWaitHandleAccessRule>, and <xref:System.Security.AccessControl.EventWaitHandleAuditRule> classes hide the implementation details of ACLs and ACEs.</span></span> <span data-ttu-id="b5d73-112">그러면 17 다양 한 ACE 형식과 올바르게 상속 및 전파 액세스 권한 유지 관리의 복잡성을 무시할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-112">They allow you to ignore the seventeen different ACE types and the complexity of correctly maintaining inheritance and propagation of access rights.</span></span> <span data-ttu-id="b5d73-113">이러한 개체는 또한 다음과 같은 일반적인 액세스 제어 오류를 방지 하기 위해 설계 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-113">These objects are also designed to prevent the following common access control errors:</span></span>  
  
-   <span data-ttu-id="b5d73-114">Null DACL을 사용 하 여 보안 설명자를 만드는 중입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-114">Creating a security descriptor with a null DACL.</span></span> <span data-ttu-id="b5d73-115">DACL null 참조에는 모든 사용자를 잠재적 서비스 거부 공격을 만드는 개체에 대 한 액세스 규칙을 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-115">A null reference to a DACL allows any user to add access rules to an object, potentially creating a denial-of-service attack.</span></span> <span data-ttu-id="b5d73-116">새 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 개체는 항상 모든 사용자에 대 한 모든 액세스를 거부 하는 빈 DACL을 사용 하 여 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-116">A new <xref:System.Security.AccessControl.EventWaitHandleSecurity> object always starts with an empty DACL, which denies all access for all users.</span></span>  
  
-   <span data-ttu-id="b5d73-117">Ace의 정식 순서 위반 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-117">Violating the canonical ordering of ACEs.</span></span> <span data-ttu-id="b5d73-118">DACL의 ACE 목록이 정식 순서 대로 유지 되지 않으면, 사용자가 실수로에 부여 될 수 액세스 보안된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-118">If the ACE list in the DACL is not kept in the canonical order, users might inadvertently be given access to the secured object.</span></span> <span data-ttu-id="b5d73-119">예를 들어, 거부 된 액세스 권한은 항상 액세스 권한이 허용된 하기 전에 나타나야 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-119">For example, denied access rights must always appear before allowed access rights.</span></span> <span data-ttu-id="b5d73-120"><xref:System.Security.AccessControl.EventWaitHandleSecurity> 개체는 내부적으로 올바른 순서를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-120"><xref:System.Security.AccessControl.EventWaitHandleSecurity> objects maintain the correct order internally.</span></span>  
  
-   <span data-ttu-id="b5d73-121">리소스 관리자 제어만 해야 하는 보안 설명자 플래그를 조작 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-121">Manipulating security descriptor flags, which should be under resource manager control only.</span></span>  
  
-   <span data-ttu-id="b5d73-122">잘못 된 조합 ACE 플래그를 만드는 중입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-122">Creating invalid combinations of ACE flags.</span></span>  
  
-   <span data-ttu-id="b5d73-123">상속 된 Ace를 조작 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-123">Manipulating inherited ACEs.</span></span> <span data-ttu-id="b5d73-124">상속 및 전파 액세스 규칙과 감사 규칙의 변경에 대 한 응답에서 리소스 관리자에 의해 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-124">Inheritance and propagation are handled by the resource manager, in response to changes you make to access and audit rules.</span></span>  
  
-   <span data-ttu-id="b5d73-125">Acl에 의미 없는 Ace를 삽입 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-125">Inserting meaningless ACEs into ACLs.</span></span>  
  
 <span data-ttu-id="b5d73-126">.NET 보안 개체에 의해 지원 되지 않습니다만 기능 대부분의 같은 애플리케이션 개발자는 피해 야 하는 위험한 작업 같습니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-126">The only capabilities not supported by the .NET security objects are dangerous activities that should be avoided by the majority of application developers, such as the following:</span></span>  
  
-   <span data-ttu-id="b5d73-127">리소스 관리자가 일반적으로 수행 되는 하위 수준 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-127">Low-level tasks that are normally performed by the resource manager.</span></span>  
  
-   <span data-ttu-id="b5d73-128">추가 하거나 정식 순서를 유지 하지 않는 방식으로 액세스 제어 항목을 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-128">Adding or removing access control entries in ways that do not maintain the canonical ordering.</span></span>  
  
 <span data-ttu-id="b5d73-129">명명 된 대기 핸들에 대 한 Windows 액세스 제어 보안을 수정 하려면 사용 합니다 <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> 메서드를를 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-129">To modify Windows access control security for a named wait handle, use the <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> method to get the <xref:System.Security.AccessControl.EventWaitHandleSecurity> object.</span></span> <span data-ttu-id="b5d73-130">추가 및 규칙을 제거 하 여 보안 개체를 수정 하 고 다음 사용 된 <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType> 다시 연결 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-130">Modify the security object by adding and removing rules, and then use the <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType> method to reattach it.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b5d73-131">변경 하는 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 호출할 때까지 개체에서는 명명 된 대기 핸들의 액세스 수준을 주지 않습니다는 <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType> 명명 된 대기 핸들에 변경 된 보안 개체를 할당 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="b5d73-131">Changes you make to an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object do not affect the access levels of the named wait handle until you call the <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType> method to assign the altered security object to the named wait handle.</span></span>  
  
 <span data-ttu-id="b5d73-132">액세스 제어 보안 하나의 대기 핸들에서 다른 위치로 복사할를 사용 하 여 합니다 <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> 메서드를를 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 첫 번째 대기 핸들에 대 한 액세스 및 감사 규칙을 나타내는 개체를 사용 하 여는 <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType> 메서드 또는 허용 하는 생성자는 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 개체, 두 번째 대기 핸들에 이러한 규칙을 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-132">To copy access control security from one wait handle to another, use the <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> method to get an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object representing the access and audit rules for the first wait handle, and then use the <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType> method, or a constructor that accepts an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, to assign those rules to the second wait handle.</span></span>  
  
 <span data-ttu-id="b5d73-133">보안 설명자 정의 언어 (SDDL)에 대 한 투자를 사용 하 여 사용자가 사용할 수는 <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> 명명 된 대기 핸들에 대 한 액세스 규칙을 설정 하는 방법 및 <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> SDDL 형식의 액세스 규칙을 나타내는 문자열을 가져오는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-133">Users with an investment in the security descriptor definition language (SDDL) can use the <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> method to set access rules for a named wait handle, and the <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> method to obtain a string that represents the access rules in SDDL format.</span></span> <span data-ttu-id="b5d73-134">이 새로운 개발에 권장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-134">This is not recommended for new development.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5d73-135">다음 코드 예제를 구분 <xref:System.Security.AccessControl.AccessControlType.Allow> 규칙 및 <xref:System.Security.AccessControl.AccessControlType.Deny> 규칙과 호환 규칙에 권한의 조합을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-135">The following code example demonstrates the separation between <xref:System.Security.AccessControl.AccessControlType.Allow> rules and <xref:System.Security.AccessControl.AccessControlType.Deny> rules, and shows the combination of rights in compatible rules.</span></span> <span data-ttu-id="b5d73-136">이 예에서는 만듭니다는 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 개체를 허용 하 고 현재 사용자에 대 한 다양 한 권한을 거부 하는 규칙을 추가 하 고 결과 쌍 규칙을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-136">The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules.</span></span> <span data-ttu-id="b5d73-137">이 예제에서는 그런 다음 현재 사용자에 대 한 새 권한을 허용 하 고 새 권한이 기존 병합 되는 표시 하 고 결과 표시 <xref:System.Security.AccessControl.AccessControlType.Allow> 규칙입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-137">The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType.Allow> rule.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5d73-138">이 예제에서는 보안 개체를 연결 하지 않습니다는 <xref:System.Threading.EventWaitHandle> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-138">This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object.</span></span> <span data-ttu-id="b5d73-139">보안 개체를 연결 하는 예제를 찾을 수 있습니다 <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> 고 <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-139">Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" />
    <altmember cref="T:System.Security.AccessControl.EventWaitHandleAuditRule" />
    <altmember cref="T:System.Security.AccessControl.EventWaitHandleRights" />
    <altmember cref="M:System.Threading.EventWaitHandle.GetAccessControl" />
    <altmember cref="M:System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventWaitHandleSecurity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.EventWaitHandleSecurity.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventWaitHandleSecurity();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b5d73-140">기본값을 사용하여 <see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-140">Initializes a new instance of the <see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /> class with default values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5d73-141">새 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 개체는 항상 모든 사용자에 대 한 모든 액세스를 거부 되는 빈 임의 액세스 목록 (DACL)를 사용 하 여 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-141">A new <xref:System.Security.AccessControl.EventWaitHandleSecurity> object always starts with an empty discretionary access list (DACL), which denies all access for all users.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="b5d73-142">이 클래스는 Windows 98 또는 Windows Millennium Edition에서 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-142">This class is not supported on Windows 98 or Windows Millennium Edition.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AccessRightType">
      <MemberSignature Language="C#" Value="public override Type AccessRightType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRightType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AccessRightType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AccessRightType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessRightType : Type" Usage="System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b5d73-143"><see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /> 클래스가 액세스 권한을 나타내는 데 사용하는 열거형을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-143">Gets the enumeration type that the <see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /> class uses to represent access rights.</span></span></summary>
        <value><span data-ttu-id="b5d73-144"><see cref="T:System.Type" /> 열거형을 나타내는 <see cref="T:System.Security.AccessControl.EventWaitHandleRights" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-144">A <see cref="T:System.Type" /> object representing the <see cref="T:System.Security.AccessControl.EventWaitHandleRights" /> enumeration.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5d73-145">파생 된 클래스는 <xref:System.Security.AccessControl.ObjectSecurity> 재정의 클래스를 <xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> 속성 및 액세스 권한을 나타내는 데 사용 하는 형식 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-145">Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> property and return the type they use to represent access rights.</span></span> <span data-ttu-id="b5d73-146">배열 또는 여러 유형의 보안 개체를 포함 하는 컬렉션을 사용 하 여 작업할 때 각 보안 개체에 사용할 올바른 열거형 형식을 확인 하려면이 속성을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-146">When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct enumeration type to use with each security object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AccessRule AccessRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::AccessControl::AccessRule ^ AccessRuleFactory(System::Security::Principal::IdentityReference ^ identityReference, int accessMask, bool isInherited, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="override this.AccessRuleFactory : System.Security.Principal.IdentityReference * int * bool * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.AccessRule" Usage="eventWaitHandleSecurity.AccessRuleFactory (identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AccessRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identityReference"><span data-ttu-id="b5d73-147">규칙을 적용할 사용자 또는 그룹을 식별하는 <see cref="T:System.Security.Principal.IdentityReference" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-147">An <see cref="T:System.Security.Principal.IdentityReference" /> that identifies the user or group the rule applies to.</span></span></param>
        <param name="accessMask"><span data-ttu-id="b5d73-148">정수로 캐스팅된 허용하거나 거부할 액세스 권한을 지정하는 <see cref="T:System.Security.AccessControl.EventWaitHandleRights" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-148">A bitwise combination of <see cref="T:System.Security.AccessControl.EventWaitHandleRights" /> values specifying the access rights to allow or deny, cast to an integer.</span></span></param>
        <param name="isInherited"><span data-ttu-id="b5d73-149">명명된 대기 핸들에는 계층이 없으므로 의미가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-149">Meaningless for named wait handles, because they have no hierarchy.</span></span></param>
        <param name="inheritanceFlags"><span data-ttu-id="b5d73-150">명명된 대기 핸들에는 계층이 없으므로 의미가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-150">Meaningless for named wait handles, because they have no hierarchy.</span></span></param>
        <param name="propagationFlags"><span data-ttu-id="b5d73-151">명명된 대기 핸들에는 계층이 없으므로 의미가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-151">Meaningless for named wait handles, because they have no hierarchy.</span></span></param>
        <param name="type"><span data-ttu-id="b5d73-152">권한 허용 여부를 지정하는 <see cref="T:System.Security.AccessControl.AccessControlType" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-152">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> values specifying whether the rights are allowed or denied.</span></span></param>
        <summary><span data-ttu-id="b5d73-153">지정된 액세스 권한, 액세스 제어 및 플래그로 지정한 사용자의 새 액세스 제어 규칙을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-153">Creates a new access control rule for the specified user, with the specified access rights, access control, and flags.</span></span></summary>
        <returns><span data-ttu-id="b5d73-154">지정한 사용자의 지정한 권한을 나타내는 <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-154">An <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /> object representing the specified rights for the specified user.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5d73-155">액세스 제어 규칙 만들기에 대 한 권장 되는 방법은 생성자를 사용 하는 것은 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-155">The recommended way to create access control rules is to use the constructors of the <xref:System.Security.AccessControl.EventWaitHandleAccessRule> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5d73-156">상속 및 전파 플래그는 명명 된 이벤트에 대 한 의미가, 이지만 여전히 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-156">Although inheritance and propagation flags are meaningless for named events, it is still possible to specify them.</span></span> <span data-ttu-id="b5d73-157">권장 되지는 않습니다, 어렵게 불필요 하 게 유지 관리 규칙의 예를 들어 호환 될 수 있는 규칙의 조합은 방해 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-157">This is not recommended, because it needlessly complicates the maintenance of rules, for example by interfering with the combination of rules that would otherwise be compatible.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b5d73-158"><paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" /> 또는 <paramref name="type" />에 잘못된 값을 지정하는 경우</span><span class="sxs-lookup"><span data-stu-id="b5d73-158"><paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" />, or <paramref name="type" /> specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5d73-159"><paramref name="identityReference" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-159"><paramref name="identityReference" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5d73-160">또는</span><span class="sxs-lookup"><span data-stu-id="b5d73-160">-or-</span></span> 
 <span data-ttu-id="b5d73-161"><paramref name="accessMask" />가 0입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-161"><paramref name="accessMask" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5d73-162"><paramref name="identityReference" />의 형식이 <see cref="T:System.Security.Principal.SecurityIdentifier" />도 아니고 <see cref="T:System.Security.Principal.NTAccount" />와 같이 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 형식으로 변환할 수 있는 형식도 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="b5d73-162"><paramref name="identityReference" /> is neither of type <see cref="T:System.Security.Principal.SecurityIdentifier" />, nor of a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleType">
      <MemberSignature Language="C#" Value="public override Type AccessRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AccessRuleType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AccessRuleType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessRuleType : Type" Usage="System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b5d73-163"><see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /> 클래스가 액세스 규칙을 나타내는 데 사용하는 형식을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-163">Gets the type that the <see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /> class uses to represent access rules.</span></span></summary>
        <value><span data-ttu-id="b5d73-164"><see cref="T:System.Type" /> 클래스를 나타내는 <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-164">A <see cref="T:System.Type" /> object representing the <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /> class.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5d73-165">파생 된 클래스는 <xref:System.Security.AccessControl.ObjectSecurity> 재정의 클래스를 <xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> 속성과 액세스 규칙을 나타내는 데 사용 하는 형식 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-165">Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> property and return the type they use to represent access rules.</span></span> <span data-ttu-id="b5d73-166">배열 또는 여러 유형의 보안 개체를 포함 하는 컬렉션을 사용 하 여 작업할 때 사용할 각 보안 개체에 대 한 올바른 액세스 규칙을 확인 하려면이 속성을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-166">When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct access rule type to use with each security object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAccessRule">
      <MemberSignature Language="C#" Value="public void AddAccessRule (System.Security.AccessControl.EventWaitHandleAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAccessRule(class System.Security.AccessControl.EventWaitHandleAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAccessRule (rule As EventWaitHandleAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAccessRule(System::Security::AccessControl::EventWaitHandleAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.AddAccessRule : System.Security.AccessControl.EventWaitHandleAccessRule -&gt; unit" Usage="eventWaitHandleSecurity.AddAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.EventWaitHandleAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="b5d73-167">추가할 액세스 제어 규칙입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-167">The access control rule to add.</span></span></param>
        <summary><span data-ttu-id="b5d73-168">새 규칙을 병합할 수 있는 일치하는 액세스 제어 규칙을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-168">Searches for a matching access control rule with which the new rule can be merged.</span></span> <span data-ttu-id="b5d73-169">아무 것도 발견되지 않으면 새 규칙을 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-169">If none are found, adds the new rule.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5d73-170">합니다 <xref:System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule%2A> 메서드를 사용 하 여 동일한 사용자 또는 그룹 및 동일한 규칙에 대 한 검색 <xref:System.Security.AccessControl.AccessControlType> 으로 `rule`입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-170">The <xref:System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule%2A> method searches for rules with the same user or group and the same <xref:System.Security.AccessControl.AccessControlType> as `rule`.</span></span> <span data-ttu-id="b5d73-171">일치 항목이 없는 경우, `rule` 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-171">If none are found, `rule` is added.</span></span> <span data-ttu-id="b5d73-172">일치 하는 규칙 발견 되 면 rights in `rule` 기존 규칙을 사용 하 여 병합 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-172">If a matching rule is found, the rights in `rule` are merged with the existing rule.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5d73-173">다음 코드 예제를 구분 <xref:System.Security.AccessControl.AccessControlType.Allow> 규칙 및 <xref:System.Security.AccessControl.AccessControlType.Deny> 규칙과 호환 규칙에 권한의 조합을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-173">The following code example demonstrates the separation between <xref:System.Security.AccessControl.AccessControlType.Allow> rules and <xref:System.Security.AccessControl.AccessControlType.Deny> rules, and shows the combination of rights in compatible rules.</span></span> <span data-ttu-id="b5d73-174">이 예에서는 만듭니다는 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 개체를 허용 하 고 현재 사용자에 대 한 다양 한 권한을 거부 하는 규칙을 추가 하 고 결과 쌍 규칙을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-174">The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules.</span></span> <span data-ttu-id="b5d73-175">이 예제에서는 그런 다음 현재 사용자에 대 한 새 권한을 허용 하 고 새 권한이 기존 병합 되는 표시 하 고 결과 표시 <xref:System.Security.AccessControl.AccessControlType.Allow> 규칙입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-175">The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType.Allow> rule.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5d73-176">이 예제에서는 보안 개체를 연결 하지 않습니다는 <xref:System.Threading.EventWaitHandle> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-176">This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object.</span></span> <span data-ttu-id="b5d73-177">보안 개체를 연결 하는 예제를 찾을 수 있습니다 <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> 고 <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-177">Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5d73-178"><paramref name="rule" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-178"><paramref name="rule" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddAuditRule">
      <MemberSignature Language="C#" Value="public void AddAuditRule (System.Security.AccessControl.EventWaitHandleAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAuditRule(class System.Security.AccessControl.EventWaitHandleAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAuditRule (rule As EventWaitHandleAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAuditRule(System::Security::AccessControl::EventWaitHandleAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.AddAuditRule : System.Security.AccessControl.EventWaitHandleAuditRule -&gt; unit" Usage="eventWaitHandleSecurity.AddAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.EventWaitHandleAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="b5d73-179">추가할 감사 규칙입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-179">The audit rule to add.</span></span> <span data-ttu-id="b5d73-180">이 규칙에서 지정하는 사용자가 검색을 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-180">The user specified by this rule determines the search.</span></span></param>
        <summary><span data-ttu-id="b5d73-181">새 규칙을 병합할 수 있는 감사 규칙을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-181">Searches for an audit rule with which the new rule can be merged.</span></span> <span data-ttu-id="b5d73-182">아무 것도 발견되지 않으면 새 규칙을 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-182">If none are found, adds the new rule.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5d73-183">합니다 <xref:System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule%2A> 메서드를 같은 사용자 또는 그룹을 사용 하 여 규칙 검색 `rule`합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-183">The <xref:System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule%2A> method searches for rules with the same user or group as `rule`.</span></span> <span data-ttu-id="b5d73-184">일치 항목이 없는 경우, `rule` 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-184">If none are found, `rule` is added.</span></span> <span data-ttu-id="b5d73-185">일치 하는 규칙 발견 되 면에서 플래그 `rule` 기존 규칙에 병합 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-185">If a matching rule is found, the flags in `rule` are merged into the existing rule.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5d73-186"><paramref name="rule" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-186"><paramref name="rule" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AuditRule AuditRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::AccessControl::AuditRule ^ AuditRuleFactory(System::Security::Principal::IdentityReference ^ identityReference, int accessMask, bool isInherited, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AuditFlags flags);" />
      <MemberSignature Language="F#" Value="override this.AuditRuleFactory : System.Security.Principal.IdentityReference * int * bool * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AuditFlags -&gt; System.Security.AccessControl.AuditRule" Usage="eventWaitHandleSecurity.AuditRuleFactory (identityReference, accessMask, isInherited, inheritanceFlags, propagationFlags, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AuditRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identityReference"><span data-ttu-id="b5d73-187">규칙을 적용할 사용자 또는 그룹을 식별하는 <see cref="T:System.Security.Principal.IdentityReference" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-187">An <see cref="T:System.Security.Principal.IdentityReference" /> that identifies the user or group the rule applies to.</span></span></param>
        <param name="accessMask"><span data-ttu-id="b5d73-188">정수로 캐스팅된 감사할 액세스 권한을 지정하는 <see cref="T:System.Security.AccessControl.EventWaitHandleRights" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-188">A bitwise combination of <see cref="T:System.Security.AccessControl.EventWaitHandleRights" /> values specifying the access rights to audit, cast to an integer.</span></span></param>
        <param name="isInherited"><span data-ttu-id="b5d73-189">명명된 대기 핸들에는 계층이 없으므로 의미가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-189">Meaningless for named wait handles, because they have no hierarchy.</span></span></param>
        <param name="inheritanceFlags"><span data-ttu-id="b5d73-190">명명된 대기 핸들에는 계층이 없으므로 의미가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-190">Meaningless for named wait handles, because they have no hierarchy.</span></span></param>
        <param name="propagationFlags"><span data-ttu-id="b5d73-191">명명된 대기 핸들에는 계층이 없으므로 의미가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-191">Meaningless for named wait handles, because they have no hierarchy.</span></span></param>
        <param name="flags"><span data-ttu-id="b5d73-192">성공 또는 실패를 감사할지 아니면 둘 다 감사할지를 지정하는 <see cref="T:System.Security.AccessControl.AuditFlags" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-192">A bitwise combination of <see cref="T:System.Security.AccessControl.AuditFlags" /> values specifying whether to audit successful access, failed access, or both.</span></span></param>
        <summary><span data-ttu-id="b5d73-193">새 감사 규칙을 만들어 규칙을 적용할 사용자, 감사할 액세스 권한 및 감사 규칙을 트리거할 결과를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-193">Creates a new audit rule, specifying the user the rule applies to, the access rights to audit, and the outcome that triggers the audit rule.</span></span></summary>
        <returns><span data-ttu-id="b5d73-194">지정한 사용자의 지정한 감사 규칙을 나타내는 <see cref="T:System.Security.AccessControl.EventWaitHandleAuditRule" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-194">An <see cref="T:System.Security.AccessControl.EventWaitHandleAuditRule" /> object representing the specified audit rule for the specified user.</span></span> <span data-ttu-id="b5d73-195">메서드의 반환 형식은 기본 클래스 <see cref="T:System.Security.AccessControl.AuditRule" />이지만 반환 값은 파생 클래스로 안전하게 캐스팅할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-195">The return type of the method is the base class, <see cref="T:System.Security.AccessControl.AuditRule" />, but the return value can be cast safely to the derived class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5d73-196">감사 규칙을 만들기 위한 권장된 방법의 생성자를 사용 하는 것은 <xref:System.Security.AccessControl.EventWaitHandleAuditRule> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-196">The recommended way to create audit rules is to use the constructors of the <xref:System.Security.AccessControl.EventWaitHandleAuditRule> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5d73-197">상속 및 전파 플래그는 명명 된 이벤트에 대 한 의미가, 이지만 여전히 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-197">Although inheritance and propagation flags are meaningless for named events, it is still possible to specify them.</span></span> <span data-ttu-id="b5d73-198">권장 되지는 않습니다, 어렵게 불필요 하 게 유지 관리 규칙의 예를 들어 호환 될 수 있는 규칙의 조합은 방해 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-198">This is not recommended, because it needlessly complicates the maintenance of rules, for example by interfering with the combination of rules that would otherwise be compatible.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b5d73-199"><paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" /> 또는 <paramref name="flags" />에 잘못된 값을 지정하는 경우</span><span class="sxs-lookup"><span data-stu-id="b5d73-199"><paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" />, or <paramref name="flags" /> specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5d73-200"><paramref name="identityReference" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-200"><paramref name="identityReference" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5d73-201">또는</span><span class="sxs-lookup"><span data-stu-id="b5d73-201">-or-</span></span> 
 <span data-ttu-id="b5d73-202"><paramref name="accessMask" />가 0입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-202"><paramref name="accessMask" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5d73-203"><paramref name="identityReference" />의 형식이 <see cref="T:System.Security.Principal.SecurityIdentifier" />도 아니고 <see cref="T:System.Security.Principal.NTAccount" />와 같이 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 형식으로 변환할 수 있는 형식도 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="b5d73-203"><paramref name="identityReference" /> is neither of type <see cref="T:System.Security.Principal.SecurityIdentifier" />, nor of a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleType">
      <MemberSignature Language="C#" Value="public override Type AuditRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AuditRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AuditRuleType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ AuditRuleType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AuditRuleType : Type" Usage="System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b5d73-204"><see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /> 클래스에서 감사 규칙을 나타내는 데 사용하는 형식을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-204">Gets the type that the <see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /> class uses to represent audit rules.</span></span></summary>
        <value><span data-ttu-id="b5d73-205"><see cref="T:System.Type" /> 클래스를 나타내는 <see cref="T:System.Security.AccessControl.EventWaitHandleAuditRule" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-205">A <see cref="T:System.Type" /> object representing the <see cref="T:System.Security.AccessControl.EventWaitHandleAuditRule" /> class.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5d73-206">파생 된 클래스는 <xref:System.Security.AccessControl.ObjectSecurity> 재정의 클래스를 <xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> 속성과 감사 권한을 나타내는 데 사용 하는 형식 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-206">Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> property and return the type they use to represent audit rights.</span></span> <span data-ttu-id="b5d73-207">배열 또는 여러 유형의 보안 개체를 포함 하는 컬렉션을 사용 하 여 작업할 때 각 보안 개체에 사용할 올바른 감사 규칙을 확인 하려면이 속성을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-207">When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct audit rule type to use with each security object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRule">
      <MemberSignature Language="C#" Value="public bool RemoveAccessRule (System.Security.AccessControl.EventWaitHandleAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAccessRule(class System.Security.AccessControl.EventWaitHandleAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAccessRule (rule As EventWaitHandleAccessRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveAccessRule(System::Security::AccessControl::EventWaitHandleAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRule : System.Security.AccessControl.EventWaitHandleAccessRule -&gt; bool" Usage="eventWaitHandleSecurity.RemoveAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.EventWaitHandleAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="b5d73-208">검색할 사용자 및 <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" />을 비롯하여 일치하는 규칙(있다면)과 호환되어야 하는 상속 및 전파 플래그 집합을 지정하는 <see cref="T:System.Security.AccessControl.AccessControlType" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-208">An <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /> that specifies the user and <see cref="T:System.Security.AccessControl.AccessControlType" /> to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with.</span></span> <span data-ttu-id="b5d73-209">발견된 경우 호환되는 규칙에서 제거할 권한을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-209">Specifies the rights to remove from the compatible rule, if found.</span></span></param>
        <summary><span data-ttu-id="b5d73-210">지정한 액세스 규칙과 사용자 및 <see cref="T:System.Security.AccessControl.AccessControlType" />(허용 또는 거부)이 같고 상속 및 전파 플래그가 호환되는 액세스 제어 규칙을 검색합니다. 그러한 규칙이 있으면 지정한 액세스 규칙에 포함된 권한이 규칙에서 제거됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-210">Searches for an access control rule with the same user and <see cref="T:System.Security.AccessControl.AccessControlType" /> (allow or deny) as the specified access rule, and with compatible inheritance and propagation flags; if such a rule is found, the rights contained in the specified access rule are removed from it.</span></span></summary>
        <returns><span data-ttu-id="b5d73-211">호환 가능한 규칙이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-211"><see langword="true" /> if a compatible rule is found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5d73-212">현재 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 동일한 사용자와 동일한 규칙에 대 한 검색 됩니다 <xref:System.Security.AccessControl.AccessControlType> 값 `rule`합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-212">The current <xref:System.Security.AccessControl.EventWaitHandleSecurity> is searched for a rule that has the same user and the same <xref:System.Security.AccessControl.AccessControlType> value as `rule`.</span></span> <span data-ttu-id="b5d73-213">없는 이러한 규칙을 찾을 수 없는 작업을 수행 및 메서드 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-213">If no such rule is found, no action is taken, and the method returns `false`.</span></span> <span data-ttu-id="b5d73-214">일치 하는 규칙 발견 되 면 해당 상속 및 호환성 플래그에 지정 된 플래그를 사용 하 여 호환성을 위해 검사할지 `rule`합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-214">If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in `rule`.</span></span> <span data-ttu-id="b5d73-215">호환 가능한 규칙이 있으면 아무런 작업도 및 메서드 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-215">If no compatible rule is found, no action is taken, and the method returns `false`.</span></span> <span data-ttu-id="b5d73-216">에 지정 된 호환 플래그를 가진 규칙이 없으면 권한은 `rule` 호환 되는 규칙에서 제거 됩니다 메서드에서 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-216">If a rule with compatible flags is found, the rights specified in `rule` are removed from the compatible rule, and the method returns `true`.</span></span> <span data-ttu-id="b5d73-217">경우 `rule` 호환 되는 규칙에 포함 되지 않은 권한을 지정, 해당 권리에 대해 아무런 동작이 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-217">If `rule` specifies rights not contained in the compatible rule, no action is taken with respect to those rights.</span></span> <span data-ttu-id="b5d73-218">현재에서 전체 규칙을 제거할 모든 권리를 호환 되는 규칙에서 제거 하면 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-218">If all rights are removed from the compatible rule, the entire rule is removed from the current <xref:System.Security.AccessControl.EventWaitHandleSecurity> object.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b5d73-219">만들어 이벤트 액세스 규칙이 상속 및 전파 플래그를 지정할 수 있지만 <xref:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory%2A> 메서드를 권장 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-219">Although you can specify inheritance and propagation flags for event access rules, by creating them with the <xref:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory%2A> method, this is not recommended.</span></span> <span data-ttu-id="b5d73-220">상속 및 전파는 명명 된 이벤트에 대해 아무런 의미가 및 액세스 규칙의 유지 관리가 더욱 복잡 하 게 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-220">Inheritance and propagation have no meaning for named events, and they make the maintenance of access rules more complicated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5d73-221">다음 코드 예제에서는 합니다 <xref:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule%2A> 에서 권한을 제거 하는 메서드를 <xref:System.Security.AccessControl.AccessControlType.Allow> 의 규칙는 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-221">The following code example demonstrates the use of the <xref:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule%2A> method to remove rights from an <xref:System.Security.AccessControl.AccessControlType.Allow> rule in an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object.</span></span> <span data-ttu-id="b5d73-222">또한 다른 권한이 표시 `rule` 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-222">It also shows that other rights in `rule` are ignored.</span></span>  
  
 <span data-ttu-id="b5d73-223">이 예에서는 만듭니다는 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 개체 및 현재 사용자에 대 한 다양 한 권한을 허용 및 거부 하는 규칙을 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-223">The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object and adds rules that allow and deny various rights for the current user.</span></span> <span data-ttu-id="b5d73-224">허용 되는 권한에 포함 <xref:System.Security.AccessControl.EventWaitHandleRights.Modify>하십시오 <xref:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions>, 및 <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize>합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-224">The rights allowed include <xref:System.Security.AccessControl.EventWaitHandleRights.Modify>, <xref:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions>, and <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize>.</span></span> <span data-ttu-id="b5d73-225">현재 사용자에 대 한 새 규칙을 만듭니다 포함 하 여 <xref:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions> 및 <xref:System.Security.AccessControl.EventWaitHandleRights.TakeOwnership> 권한, 사용 하 여 해당 규칙을 사용 하는 <xref:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule%2A> 제거 하는 방법 <xref:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions> 에서 <xref:System.Security.AccessControl.AccessControlType.Allow> 의 규칙는 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 개체.</span><span class="sxs-lookup"><span data-stu-id="b5d73-225">The example then creates a new rule for the current user, including <xref:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions> and <xref:System.Security.AccessControl.EventWaitHandleRights.TakeOwnership> rights, and uses that rule with the <xref:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule%2A> method to remove <xref:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions> from the <xref:System.Security.AccessControl.AccessControlType.Allow> rule in the <xref:System.Security.AccessControl.EventWaitHandleSecurity> object.</span></span> <span data-ttu-id="b5d73-226">합니다 <xref:System.Security.AccessControl.EventWaitHandleRights.TakeOwnership> 에서 마우스 오른쪽 단추로 `rule` 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-226">The <xref:System.Security.AccessControl.EventWaitHandleRights.TakeOwnership> right in `rule` is ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5d73-227">이 예제에서는 보안 개체를 연결 하지 않습니다는 <xref:System.Threading.EventWaitHandle> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-227">This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object.</span></span> <span data-ttu-id="b5d73-228">보안 개체를 연결 하는 예제를 찾을 수 있습니다 <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> 고 <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-228">Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5d73-229"><paramref name="rule" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-229"><paramref name="rule" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleAll (System.Security.AccessControl.EventWaitHandleAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleAll(class System.Security.AccessControl.EventWaitHandleAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAccessRuleAll (rule As EventWaitHandleAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAccessRuleAll(System::Security::AccessControl::EventWaitHandleAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRuleAll : System.Security.AccessControl.EventWaitHandleAccessRule -&gt; unit" Usage="eventWaitHandleSecurity.RemoveAccessRuleAll rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.EventWaitHandleAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="b5d73-230">검색할 사용자 및 <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" />을 지정하는 <see cref="T:System.Security.AccessControl.AccessControlType" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-230">An <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /> that specifies the user and <see cref="T:System.Security.AccessControl.AccessControlType" /> to search for.</span></span> <span data-ttu-id="b5d73-231">이 규칙에서 지정한 모든 권한은 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-231">Any rights specified by this rule are ignored.</span></span></param>
        <summary><span data-ttu-id="b5d73-232">지정한 규칙과 사용자 및 <see cref="T:System.Security.AccessControl.AccessControlType" />(허용 또는 거부)이 같은 모든 액세스 제어 규칙을 검색하여 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-232">Searches for all access control rules with the same user and <see cref="T:System.Security.AccessControl.AccessControlType" /> (allow or deny) as the specified rule and, if found, removes them.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5d73-233">현재 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 는 동일한 사용자와 동일한 규칙에 대 한 검색 됩니다 <xref:System.Security.AccessControl.AccessControlType> 값 `rule`합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-233">The current <xref:System.Security.AccessControl.EventWaitHandleSecurity> is searched for rules that have the same user and the same <xref:System.Security.AccessControl.AccessControlType> value as `rule`.</span></span> <span data-ttu-id="b5d73-234">지정한 모든 권한은 `rule` 이 검색을 수행 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-234">Any rights specified by `rule` are ignored when performing this search.</span></span> <span data-ttu-id="b5d73-235">모든 일치 규칙 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-235">All matching rules are removed.</span></span> <span data-ttu-id="b5d73-236">일치 하는 규칙이 없습니다 발견 되 면 아무런 동작이 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-236">If no matching rules are found, no action is taken.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5d73-237">다음 코드 예에서는 합니다 <xref:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll%2A> 사용자와 일치 하는 모든 규칙을 제거 하는 메서드 및 <xref:System.Security.AccessControl.AccessControlType>, 권한을 무시 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-237">The following code example shows that the <xref:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll%2A> method removes all rules that match user and <xref:System.Security.AccessControl.AccessControlType>, ignoring rights.</span></span>  
  
 <span data-ttu-id="b5d73-238">이 예에서는 만듭니다는 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 개체를 허용 하 고 현재 사용자에 대 한 다양 한 권한을 거부 하는 규칙을 추가 하 고 다음에 추가 권한을 병합 합니다 <xref:System.Security.AccessControl.AccessControlType.Allow> 규칙입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-238">The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and then merges additional rights into the <xref:System.Security.AccessControl.AccessControlType.Allow> rule.</span></span> <span data-ttu-id="b5d73-239">현재 사용자가 소유권을 허용 하 고 해당 규칙을 사용 하 여 제거 하는 새 규칙을 만듭니다는 <xref:System.Security.AccessControl.AccessControlType.Allow> 에서 규칙을 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-239">The example then creates a new rule that allows the current user to take ownership, and uses that rule to remove the <xref:System.Security.AccessControl.AccessControlType.Allow> rule from the <xref:System.Security.AccessControl.EventWaitHandleSecurity> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5d73-240">이 예제에서는 보안 개체를 연결 하지 않습니다는 <xref:System.Threading.EventWaitHandle> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-240">This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object.</span></span> <span data-ttu-id="b5d73-241">보안 개체를 연결 하는 예제를 찾을 수 있습니다 <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> 고 <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-241">Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5d73-242"><paramref name="rule" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-242"><paramref name="rule" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleSpecific (System.Security.AccessControl.EventWaitHandleAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleSpecific(class System.Security.AccessControl.EventWaitHandleAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAccessRuleSpecific (rule As EventWaitHandleAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAccessRuleSpecific(System::Security::AccessControl::EventWaitHandleAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAccessRuleSpecific : System.Security.AccessControl.EventWaitHandleAccessRule -&gt; unit" Usage="eventWaitHandleSecurity.RemoveAccessRuleSpecific rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.EventWaitHandleAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="b5d73-243">제거할 <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-243">The <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /> to remove.</span></span></param>
        <summary><span data-ttu-id="b5d73-244">지정한 규칙과 정확히 일치하는 액세스 제어 규칙을 검색하여 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-244">Searches for an access control rule that exactly matches the specified rule and, if found, removes it.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5d73-245">규칙은 정확히 일치 하는 경우에 제거 됩니다 `rule` 모든 세부 정보에 플래그를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-245">The rule is removed only if it exactly matches `rule` in all details, including flags.</span></span> <span data-ttu-id="b5d73-246">사용자가 같은 다른 규칙 및 <xref:System.Security.AccessControl.AccessControlType> 영향을 받지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-246">Other rules with the same user and <xref:System.Security.AccessControl.AccessControlType> are not affected.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b5d73-247">규칙을 나타내는 하나 또는 자세한 기본 액세스 제어 항목 (ACE) 및 이러한 항목은 분할 되거나 사용자에 대 한 액세스 보안 규칙을 수정 하는 경우 필요에 따라 조합 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-247">A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the access security rules for a user.</span></span> <span data-ttu-id="b5d73-248">따라서 규칙을 더 이상 있을 경우에서 추가 될 때 특정 형식에는 <xref:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific%2A> 메서드는 제거할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-248">Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the <xref:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific%2A> method cannot remove it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5d73-249">다음 코드 예제에 따르면는 <xref:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific%2A> 메서드는 정확 하 게 일치 규칙을 제거 하기 위해 필요 하 고 권한을 허용 및 거부 하는 규칙은 서로 독립적입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-249">The following code example shows that the <xref:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific%2A> method requires an exact match in order to remove a rule, and that rules to allow and deny rights are independent of each other.</span></span>  
  
 <span data-ttu-id="b5d73-250">이 예에서는 만듭니다는 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 개체를 허용 하 고 현재 사용자에 대 한 다양 한 권한을 거부 하는 규칙을 추가 하 고 다음에 추가 권한을 병합 합니다 <xref:System.Security.AccessControl.AccessControlType.Allow> 액세스 규칙입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-250">The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and then merges additional rights into the <xref:System.Security.AccessControl.AccessControlType.Allow> access rule.</span></span> <span data-ttu-id="b5d73-251">그런 다음 원래 전달 <xref:System.Security.AccessControl.AccessControlType.Allow> 규칙을 <xref:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific%2A> 메서드와 아무 것도 삭제를 나타내는 결과 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-251">The example then passes the original <xref:System.Security.AccessControl.AccessControlType.Allow> rule to the <xref:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific%2A> method, and displays the results, showing that nothing is deleted.</span></span> <span data-ttu-id="b5d73-252">일치 하는 규칙을 구성 합니다 <xref:System.Security.AccessControl.AccessControlType.Allow> 의 규칙을 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 개체를 사용 하 여 성공적으로 <xref:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific%2A> 규칙을 제거 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="b5d73-252">The example then constructs a rule that matches the <xref:System.Security.AccessControl.AccessControlType.Allow> rule in the <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, and successfully uses the <xref:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific%2A> method to remove the rule.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5d73-253">이 예제에서는 보안 개체를 연결 하지 않습니다는 <xref:System.Threading.EventWaitHandle> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-253">This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object.</span></span> <span data-ttu-id="b5d73-254">보안 개체를 연결 하는 예제를 찾을 수 있습니다 <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> 고 <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-254">Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5d73-255"><paramref name="rule" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-255"><paramref name="rule" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRule">
      <MemberSignature Language="C#" Value="public bool RemoveAuditRule (System.Security.AccessControl.EventWaitHandleAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAuditRule(class System.Security.AccessControl.EventWaitHandleAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAuditRule (rule As EventWaitHandleAuditRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveAuditRule(System::Security::AccessControl::EventWaitHandleAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRule : System.Security.AccessControl.EventWaitHandleAuditRule -&gt; bool" Usage="eventWaitHandleSecurity.RemoveAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.EventWaitHandleAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="b5d73-256">검색할 사용자 및 일치하는 규칙(있다면)이 호환되어야 하는 상속 및 전파 플래그 집합을 지정하는 <see cref="T:System.Security.AccessControl.EventWaitHandleAuditRule" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-256">An <see cref="T:System.Security.AccessControl.EventWaitHandleAuditRule" /> that specifies the user to search for and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with.</span></span> <span data-ttu-id="b5d73-257">발견된 경우 호환되는 규칙에서 제거할 권한을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-257">Specifies the rights to remove from the compatible rule, if found.</span></span></param>
        <summary><span data-ttu-id="b5d73-258">지정한 규칙과 사용자가 같고 상속 및 전파 플래그가 호환되는 감사 규칙을 검색합니다. 호환되는 규칙이 있으면 지정한 규칙에 포함된 권한이 규칙에서 제거됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-258">Searches for an audit rule with the same user as the specified rule, and with compatible inheritance and propagation flags; if a compatible rule is found, the rights contained in the specified rule are removed from it.</span></span></summary>
        <returns><span data-ttu-id="b5d73-259">호환 가능한 규칙이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-259"><see langword="true" /> if a compatible rule is found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5d73-260">현재 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 사용자가 같은 있는 감사 규칙을 검색 하는 `rule`합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-260">The current <xref:System.Security.AccessControl.EventWaitHandleSecurity> is searched for an audit rule that has the same user as `rule`.</span></span> <span data-ttu-id="b5d73-261">없는 이러한 규칙을 찾을 수 없는 작업을 수행 및 메서드 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-261">If no such rule is found, no action is taken, and the method returns `false`.</span></span> <span data-ttu-id="b5d73-262">일치 하는 규칙 발견 되 면 해당 상속 및 호환성 플래그에 지정 된 플래그를 사용 하 여 호환성을 위해 검사할지 `rule`합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-262">If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in `rule`.</span></span> <span data-ttu-id="b5d73-263">호환 가능한 규칙이 있으면 아무런 작업도 및 메서드 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-263">If no compatible rule is found, no action is taken, and the method returns `false`.</span></span> <span data-ttu-id="b5d73-264">에 지정 된 호환 플래그를 가진 규칙이 없으면 권한은 `rule` 호환 되는 규칙에서 제거 됩니다 메서드에서 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-264">If a rule with compatible flags is found, the rights specified in `rule` are removed from the compatible rule, and the method returns `true`.</span></span> <span data-ttu-id="b5d73-265">경우 `rule` 호환 되는 규칙에 포함 되지 않은 권한을 지정, 해당 권리에 대해 아무런 동작이 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-265">If `rule` specifies rights not contained in the compatible rule, no action is taken with respect to those rights.</span></span> <span data-ttu-id="b5d73-266">현재에서 전체 규칙을 제거할 모든 권리를 호환 되는 규칙에서 제거 하면 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-266">If all rights are removed from the compatible rule, the entire rule is removed from the current <xref:System.Security.AccessControl.EventWaitHandleSecurity> object.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b5d73-267">만들어 이벤트 감사 규칙의 상속 및 전파 플래그를 지정할 수 있지만 <xref:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory%2A> 메서드를 권장 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-267">Although you can specify inheritance and propagation flags for event audit rules, by creating them with the <xref:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory%2A> method, this is not recommended.</span></span> <span data-ttu-id="b5d73-268">상속 및 전파는 명명 된 이벤트에 대해 아무런 의미가 및 감사 규칙의 유지 관리가 더욱 복잡 하 게 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-268">Inheritance and propagation have no meaning for named events, and they make the maintenance of audit rules more complicated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5d73-269"><paramref name="rule" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-269"><paramref name="rule" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleAll (System.Security.AccessControl.EventWaitHandleAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleAll(class System.Security.AccessControl.EventWaitHandleAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAuditRuleAll (rule As EventWaitHandleAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAuditRuleAll(System::Security::AccessControl::EventWaitHandleAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRuleAll : System.Security.AccessControl.EventWaitHandleAuditRule -&gt; unit" Usage="eventWaitHandleSecurity.RemoveAuditRuleAll rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.EventWaitHandleAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="b5d73-270">검색할 사용자를 지정하는 <see cref="T:System.Security.AccessControl.EventWaitHandleAuditRule" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-270">An <see cref="T:System.Security.AccessControl.EventWaitHandleAuditRule" /> that specifies the user to search for.</span></span> <span data-ttu-id="b5d73-271">이 규칙에서 지정한 모든 권한은 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-271">Any rights specified by this rule are ignored.</span></span></param>
        <summary><span data-ttu-id="b5d73-272">지정한 규칙과 같은 사용자를 가진 모든 감사 규칙을 검색하고 해당 규칙이 있을 경우 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-272">Searches for all audit rules with the same user as the specified rule and, if found, removes them.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5d73-273">현재 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 와 동일한 사용자에 게는 감사 규칙을 검색 하는 `rule`합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-273">The current <xref:System.Security.AccessControl.EventWaitHandleSecurity> is searched for audit rules that have the same user as `rule`.</span></span> <span data-ttu-id="b5d73-274">지정한 모든 권한은 `rule` 이 검색을 수행 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-274">Any rights specified by `rule` are ignored when performing this search.</span></span> <span data-ttu-id="b5d73-275">모든 일치 규칙 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-275">All matching rules are removed.</span></span> <span data-ttu-id="b5d73-276">일치 하는 규칙이 없습니다 발견 되 면 아무런 동작이 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-276">If no matching rules are found, no action is taken.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5d73-277"><paramref name="rule" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-277"><paramref name="rule" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleSpecific (System.Security.AccessControl.EventWaitHandleAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleSpecific(class System.Security.AccessControl.EventWaitHandleAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAuditRuleSpecific (rule As EventWaitHandleAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAuditRuleSpecific(System::Security::AccessControl::EventWaitHandleAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.RemoveAuditRuleSpecific : System.Security.AccessControl.EventWaitHandleAuditRule -&gt; unit" Usage="eventWaitHandleSecurity.RemoveAuditRuleSpecific rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.EventWaitHandleAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="b5d73-278">제거할 <see cref="T:System.Security.AccessControl.EventWaitHandleAuditRule" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-278">The <see cref="T:System.Security.AccessControl.EventWaitHandleAuditRule" /> to remove.</span></span></param>
        <summary><span data-ttu-id="b5d73-279">지정한 규칙과 정확히 일치하는 감사 규칙을 검색하여 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-279">Searches for an audit rule that exactly matches the specified rule and, if found, removes it.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5d73-280">규칙은 정확히 일치 하는 경우에 제거 됩니다 `rule` 모든 세부 정보에 플래그를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-280">The rule is removed only if it exactly matches `rule` in all details, including flags.</span></span> <span data-ttu-id="b5d73-281">동일한 사용자에 대 한 다른 감사 규칙을 받지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-281">Other audit rules for the same user are not affected.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b5d73-282">규칙을 나타내는 하나 또는 자세한 기본 액세스 제어 항목 (ACE) 및 이러한 항목은 분할 되거나 사용자에 대 한 감사 보안 규칙을 수정 하는 경우 필요에 따라 조합 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-282">A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the audit security rules for a user.</span></span> <span data-ttu-id="b5d73-283">따라서 규칙을 더 이상 있을 경우에서 추가 될 때 특정 형식에는 <xref:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific%2A> 메서드는 제거할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-283">Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the <xref:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific%2A> method cannot remove it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5d73-284"><paramref name="rule" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-284"><paramref name="rule" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ResetAccessRule">
      <MemberSignature Language="C#" Value="public void ResetAccessRule (System.Security.AccessControl.EventWaitHandleAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetAccessRule(class System.Security.AccessControl.EventWaitHandleAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetAccessRule (rule As EventWaitHandleAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetAccessRule(System::Security::AccessControl::EventWaitHandleAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.ResetAccessRule : System.Security.AccessControl.EventWaitHandleAccessRule -&gt; unit" Usage="eventWaitHandleSecurity.ResetAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.EventWaitHandleAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="b5d73-285">추가할 <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-285">The <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /> to add.</span></span> <span data-ttu-id="b5d73-286">이 규칙에서 지정하는 사용자가 이 규칙이 추가되기 전에 제거할 규칙을 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-286">The user specified by this rule determines the rules to remove before this rule is added.</span></span></param>
        <summary><span data-ttu-id="b5d73-287"><see cref="T:System.Security.AccessControl.AccessControlType" />과 상관없이 지정한 규칙과 사용자가 같은 모든 액세스 제어 규칙을 제거한 다음 지정한 규칙을 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-287">Removes all access control rules with the same user as the specified rule, regardless of <see cref="T:System.Security.AccessControl.AccessControlType" />, and then adds the specified rule.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5d73-288">사용자가 지정한 규칙과 일치 액세스 규칙이 있는 경우 `rule` 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-288">If there are no access rules whose user matches the specified rule, `rule` is added.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5d73-289">다음 코드 예제에서는 방법을 <xref:System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule%2A> 메서드는 일치 하는 지정 된 규칙과 일치 하는 사용자에 대 한 모든 규칙을 대체 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-289">The following code example shows how the <xref:System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule%2A> method replaces all rules for the matching user with the rule specified for the match.</span></span>  
  
 <span data-ttu-id="b5d73-290">이 예에서는 만듭니다는 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 개체 및 현재 사용자에 대 한 다양 한 권한을 허용 및 거부 하는 규칙을 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-290">The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object and adds rules that allow and deny various rights for the current user.</span></span> <span data-ttu-id="b5d73-291">현재 사용자에 게 전체 권한을 허용 하 고 사용 하는 새 규칙을 만듭니다는 <xref:System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule%2A> 새 규칙을 사용 하 여 기존 규칙을 모두 대체 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-291">The example then creates a new rule that allows the current user full control, and uses the <xref:System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule%2A> method to replace both of the existing rules with the new rule.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5d73-292">이 예제에서는 보안 개체를 연결 하지 않습니다는 <xref:System.Threading.EventWaitHandle> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-292">This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object.</span></span> <span data-ttu-id="b5d73-293">보안 개체를 연결 하는 예제를 찾을 수 있습니다 <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> 고 <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-293">Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5d73-294"><paramref name="rule" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-294"><paramref name="rule" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetAccessRule">
      <MemberSignature Language="C#" Value="public void SetAccessRule (System.Security.AccessControl.EventWaitHandleAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessRule(class System.Security.AccessControl.EventWaitHandleAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAccessRule (rule As EventWaitHandleAccessRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessRule(System::Security::AccessControl::EventWaitHandleAccessRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.SetAccessRule : System.Security.AccessControl.EventWaitHandleAccessRule -&gt; unit" Usage="eventWaitHandleSecurity.SetAccessRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.EventWaitHandleAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="b5d73-295">추가할 <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-295">The <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /> to add.</span></span> <span data-ttu-id="b5d73-296">이 규칙의 사용자 및 <see cref="T:System.Security.AccessControl.AccessControlType" />은 이 규칙이 추가되기 전에 제거할 규칙을 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-296">The user and <see cref="T:System.Security.AccessControl.AccessControlType" /> of this rule determine the rules to remove before this rule is added.</span></span></param>
        <summary><span data-ttu-id="b5d73-297">지정된 규칙과 사용자 및 <see cref="T:System.Security.AccessControl.AccessControlType" />(허용 또는 거부)이 같은 모든 액세스 제어 규칙을 제거한 다음 지정한 규칙을 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-297">Removes all access control rules with the same user and <see cref="T:System.Security.AccessControl.AccessControlType" /> (allow or deny) as the specified rule, and then adds the specified rule.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5d73-298">지정한 규칙에 있으면 <xref:System.Security.AccessControl.AccessControlType.Allow>,이 메서드의 결과 모두 제거 하는 <xref:System.Security.AccessControl.AccessControlType.Allow> 지정한 규칙으로 바꿔 지정된 된 사용자에 대 한 규칙입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-298">If the specified rule has <xref:System.Security.AccessControl.AccessControlType.Allow>, the effect of this method is to remove all <xref:System.Security.AccessControl.AccessControlType.Allow> rules for the specified user, replacing them with the specified rule.</span></span> <span data-ttu-id="b5d73-299">지정된 된 규칙에 있으면 <xref:System.Security.AccessControl.AccessControlType.Deny>모든 <xref:System.Security.AccessControl.AccessControlType.Deny> 지정된 된 사용자에 대 한 규칙은 지정 된 규칙을 사용 하 여 대체 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-299">If the specified rule has <xref:System.Security.AccessControl.AccessControlType.Deny>, all <xref:System.Security.AccessControl.AccessControlType.Deny> rules for the specified user are replaced with the specified rule.</span></span>  
  
 <span data-ttu-id="b5d73-300">규칙이 있는 경우 없는 사용자와 <xref:System.Security.AccessControl.AccessControlType> 지정한 규칙과 일치 `rule` 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-300">If there are no rules whose user and <xref:System.Security.AccessControl.AccessControlType> match the specified rule, `rule` is added.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5d73-301">다음 코드 예제에서는 하는 방법을 <xref:System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule%2A> 메서드 모두 사용자를 일치 하는 모든 규칙을 제거 하며 <xref:System.Security.AccessControl.AccessControlType> 의 `rule`를 대체 하 여 `rule`입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-301">The following code example shows how the <xref:System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule%2A> method removes all rules that match both the user and the <xref:System.Security.AccessControl.AccessControlType> of `rule`, replacing them with `rule`.</span></span>  
  
 <span data-ttu-id="b5d73-302">이 예에서는 만듭니다는 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 개체 및 현재 사용자에 대 한 다양 한 권한을 허용 및 거부 하는 규칙을 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-302">The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object and adds rules that allow and deny various rights for the current user.</span></span> <span data-ttu-id="b5d73-303">현재 사용자에 게 전체 권한을 허용 하 고 사용 하는 새 규칙을 만듭니다는 <xref:System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule%2A> 기존 대체 방법 <xref:System.Security.AccessControl.AccessControlType.Allow> 새 규칙을 사용 하 여 규칙입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-303">The example then creates a new rule that allows the current user full control, and uses the <xref:System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule%2A> method to replace the existing <xref:System.Security.AccessControl.AccessControlType.Allow> rule with the new rule.</span></span> <span data-ttu-id="b5d73-304">액세스를 거부 하는 규칙을 받지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-304">The rule that denies access is not affected.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5d73-305">이 예제에서는 보안 개체를 연결 하지 않습니다는 <xref:System.Threading.EventWaitHandle> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-305">This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object.</span></span> <span data-ttu-id="b5d73-306">보안 개체를 연결 하는 예제를 찾을 수 있습니다 <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> 고 <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-306">Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5d73-307"><paramref name="rule" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-307"><paramref name="rule" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetAuditRule">
      <MemberSignature Language="C#" Value="public void SetAuditRule (System.Security.AccessControl.EventWaitHandleAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAuditRule(class System.Security.AccessControl.EventWaitHandleAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAuditRule (rule As EventWaitHandleAuditRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAuditRule(System::Security::AccessControl::EventWaitHandleAuditRule ^ rule);" />
      <MemberSignature Language="F#" Value="override this.SetAuditRule : System.Security.AccessControl.EventWaitHandleAuditRule -&gt; unit" Usage="eventWaitHandleSecurity.SetAuditRule rule" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.EventWaitHandleAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule"><span data-ttu-id="b5d73-308">추가할 <see cref="T:System.Security.AccessControl.EventWaitHandleAuditRule" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-308">The <see cref="T:System.Security.AccessControl.EventWaitHandleAuditRule" /> to add.</span></span> <span data-ttu-id="b5d73-309">이 규칙에서 지정하는 사용자가 이 규칙이 추가되기 전에 제거할 규칙을 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-309">The user specified by this rule determines the rules to remove before this rule is added.</span></span></param>
        <summary><span data-ttu-id="b5d73-310"><see cref="T:System.Security.AccessControl.AuditFlags" /> 과 상관없이 지정한 규칙과 사용자가 같은 모든 감사 규칙을 제거한 다음 지정한 규칙을 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-310">Removes all audit rules with the same user as the specified rule, regardless of the <see cref="T:System.Security.AccessControl.AuditFlags" /> value, and then adds the specified rule.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5d73-311">사용자가 지정한 규칙과 일치 감사 규칙이 있는 경우 `rule` 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-311">If there are no audit rules whose user matches the specified rule, `rule` is added.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5d73-312"><paramref name="rule" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b5d73-312"><paramref name="rule" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>