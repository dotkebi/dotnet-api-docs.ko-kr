<Type Name="BasicHttpBinding" FullName="System.ServiceModel.BasicHttpBinding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ddf98863a96db3b485f580a4e1dba7ac57d06bbd" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57936769" /></Metadata><TypeSignature Language="C#" Value="public class BasicHttpBinding : System.ServiceModel.HttpBindingBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BasicHttpBinding extends System.ServiceModel.HttpBindingBase implements class System.ServiceModel.Channels.IBindingRuntimePreferences" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.BasicHttpBinding" />
  <TypeSignature Language="VB.NET" Value="Public Class BasicHttpBinding&#xA;Inherits HttpBindingBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class BasicHttpBinding : System::ServiceModel::HttpBindingBase" />
  <TypeSignature Language="F#" Value="type BasicHttpBinding = class&#xA;    inherit HttpBindingBase&#xA;    interface IBindingRuntimePreferences" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Http</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ServiceModel.HttpBindingBase</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-3.0">System.ServiceModel.Channels.Binding</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IBindingRuntimePreferences</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="ca425-101">WCF(Windows Communication Foundation) 서비스가 ASMX 기반 웹 서비스 및 클라이언트, 그리고 WS-I Basic Profile 1.1을 따르는 기타 서비스와 통신할 수 있는 엔드포인트를 구성 및 노출하는 데 사용할 수 있는 바인딩을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-101">Represents a binding that a Windows Communication Foundation (WCF) service can use to configure and expose endpoints that are able to communicate with ASMX-based Web services and clients and other services that conform to the WS-I Basic Profile 1.1.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca425-102"><xref:System.ServiceModel.BasicHttpBinding>은 SOAP 1.1 메시지를 보내기 위한 전송으로 HTTP를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-102">The <xref:System.ServiceModel.BasicHttpBinding> uses HTTP as the transport for sending SOAP 1.1 messages.</span></span> <span data-ttu-id="ca425-103">서비스는 이 바인딩을 사용하여 ASMX 클라이언트가 액세스하는 엔드포인트와 같이 WS-I BP 1.1을 따르는 엔드포인트를 노출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-103">A service can use this binding to expose endpoints that conform to WS-I BP 1.1, such as those that ASMX clients access.</span></span> <span data-ttu-id="ca425-104">마찬가지로, 클라이언트가 사용할 수는 <xref:System.ServiceModel.BasicHttpBinding> 따르는 끝점을 노출 하는 서비스와 통신할 수-I BP 1.1을 ASMX 웹 서비스 등으로 구성 된 Windows Communication Foundation (WCF) 서비스는 <xref:System.ServiceModel.BasicHttpBinding>합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-104">Similarly, a client can use the <xref:System.ServiceModel.BasicHttpBinding> to communicate with services exposing endpoints that conform to WS-I BP 1.1, such as ASMX Web services or Windows Communication Foundation (WCF) services configured with the <xref:System.ServiceModel.BasicHttpBinding>.</span></span>  
  
 <span data-ttu-id="ca425-105">보안은 기본적으로 해제되지만 <xref:System.ServiceModel.BasicHttpSecurityMode> 생성자에서 <xref:System.ServiceModel.BasicHttpSecurityMode.None>를 <xref:System.ServiceModel.BasicHttpBinding.%23ctor%28System.ServiceModel.BasicHttpSecurityMode%29> 이외의 값으로 설정하여 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-105">Security is turned off by default, but can be added setting the <xref:System.ServiceModel.BasicHttpSecurityMode> to a value other than <xref:System.ServiceModel.BasicHttpSecurityMode.None> in the <xref:System.ServiceModel.BasicHttpBinding.%23ctor%28System.ServiceModel.BasicHttpSecurityMode%29> constructor.</span></span> <span data-ttu-id="ca425-106">이 요소는 기본적으로 "텍스트" 메시지 인코딩 및 UTF-8 텍스트 인코딩을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-106">It uses a "Text" message encoding and UTF-8 text encoding by default.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca425-107">다음 예제에서는 응용 프로그램 구성 파일에서 <xref:System.ServiceModel.BasicHttpBinding>을 구성하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-107">The following example shows how to configure the <xref:System.ServiceModel.BasicHttpBinding> in an application configuration file.</span></span>  
  
  
  
 <span data-ttu-id="ca425-108">다음 예제에서는 <xref:System.ServiceModel.BasicHttpBinding>을 프로그래밍 방식으로 구성하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-108">The following example shows how to programmatically configure <xref:System.ServiceModel.BasicHttpBinding>.</span></span>  
  
 [!code-csharp[S_UEBasicHttpBinding#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_uebasichttpbinding/cs/service.cs#1)]
 [!code-vb[S_UEBasicHttpBinding#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uebasichttpbinding/vb/service.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ca425-109"><see cref="T:System.ServiceModel.BasicHttpBinding" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-109">Initializes a new instance of the <see cref="T:System.ServiceModel.BasicHttpBinding" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BasicHttpBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.BasicHttpBinding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BasicHttpBinding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ca425-110"><see cref="T:System.ServiceModel.BasicHttpBinding" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-110">Initializes a new instance of the <see cref="T:System.ServiceModel.BasicHttpBinding" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca425-111">사용된 <xref:System.ServiceModel.BasicHttpSecurityMode>의 기본값은 SOAP 메시지가 보호되지 않고 클라이언트가 인증되지 않도록 지정하는 <xref:System.ServiceModel.BasicHttpSecurityMode.None>입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-111">The default value of <xref:System.ServiceModel.BasicHttpSecurityMode> used is <xref:System.ServiceModel.BasicHttpSecurityMode.None>, which specifies that the SOAP message is not secured and the client is not authenticated.</span></span>  
  
   
  
## Examples  
 [!code-csharp[S_UEBasicHttpBinding#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_uebasichttpbinding/cs/service.cs#2)]
 [!code-vb[S_UEBasicHttpBinding#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uebasichttpbinding/vb/service.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BasicHttpBinding (System.ServiceModel.BasicHttpSecurityMode securityMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ServiceModel.BasicHttpSecurityMode securityMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.BasicHttpBinding.#ctor(System.ServiceModel.BasicHttpSecurityMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (securityMode As BasicHttpSecurityMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BasicHttpBinding(System::ServiceModel::BasicHttpSecurityMode securityMode);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.BasicHttpBinding : System.ServiceModel.BasicHttpSecurityMode -&gt; System.ServiceModel.BasicHttpBinding" Usage="new System.ServiceModel.BasicHttpBinding securityMode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="securityMode" Type="System.ServiceModel.BasicHttpSecurityMode" />
      </Parameters>
      <Docs>
        <param name="securityMode"><span data-ttu-id="ca425-112">클라이언트 및 SOAP 메시지에 사용되는 보안 형식을 지정하는 <see cref="T:System.ServiceModel.BasicHttpSecurityMode" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-112">The value of <see cref="T:System.ServiceModel.BasicHttpSecurityMode" /> that specifies the type of security that is used with the SOAP message and for the client.</span></span></param>
        <summary><span data-ttu-id="ca425-113">바인딩에서 사용하는 지정된 보안 형식을 사용하여 <see cref="T:System.ServiceModel.BasicHttpBinding" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-113">Initializes a new instance of the <see cref="T:System.ServiceModel.BasicHttpBinding" /> class with a specified type of security used by the binding.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca425-114">사용된 <xref:System.ServiceModel.BasicHttpSecurityMode>의 기본값은 SOAP 메시지가 보호되지 않고 클라이언트가 인증되지 않도록 지정하는 <xref:System.ServiceModel.BasicHttpSecurityMode.None>입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-114">The default value of <xref:System.ServiceModel.BasicHttpSecurityMode> used is <xref:System.ServiceModel.BasicHttpSecurityMode.None>, which specifies that the SOAP message is not secured and the client is not authenticated.</span></span>  
  
   
  
## Examples  
 [!code-csharp[S_UEBasicHttpBinding#3](~/samples/snippets/csharp/VS_Snippets_CFX/s_uebasichttpbinding/cs/snippets.cs#3)]
 [!code-vb[S_UEBasicHttpBinding#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uebasichttpbinding/vb/snippets.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BasicHttpBinding (string configurationName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string configurationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.BasicHttpBinding.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (configurationName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BasicHttpBinding(System::String ^ configurationName);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.BasicHttpBinding : string -&gt; System.ServiceModel.BasicHttpBinding" Usage="new System.ServiceModel.BasicHttpBinding configurationName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="configurationName" Type="System.String" Index="0" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="configurationName"><span data-ttu-id="ca425-115"><see cref="T:System.ServiceModel.Configuration.BasicHttpBindingElement" />의 바인딩 구성 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-115">The binding configuration name for the <see cref="T:System.ServiceModel.Configuration.BasicHttpBindingElement" />.</span></span></param>
        <summary><span data-ttu-id="ca425-116">구성 이름으로 지정된 바인딩을 사용하여 <see cref="T:System.ServiceModel.BasicHttpBinding" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-116">Initializes a new instance of the <see cref="T:System.ServiceModel.BasicHttpBinding" /> class with a binding specified by its configuration name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ca425-117">이 예제에서는 구성 이름 <xref:System.ServiceModel.BasicHttpBinding>으로 지정된 바인딩을 사용하여 새 `myBinding` 클래스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-117">This example initializes a new <xref:System.ServiceModel.BasicHttpBinding> class with a binding specified by the configuration name `myBinding`.</span></span> <span data-ttu-id="ca425-118">서비스의 구성 파일에서 바인딩 섹션을 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-118">You must create a bindings section in the service's configuration file.</span></span>  
  
 [!code-csharp[S_UEBasicHttpBinding#5](~/samples/snippets/csharp/VS_Snippets_CFX/s_uebasichttpbinding/cs/snippets.cs#5)]
 [!code-vb[S_UEBasicHttpBinding#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uebasichttpbinding/vb/snippets.vb#5)]  
  
 <span data-ttu-id="ca425-119">그런 다음 <xref:System.ServiceModel.BasicHttpBinding> 생성자에 대한 호출에 바인딩 구성의 이름을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-119">Then the name of the binding configuration is specified in the call to the <xref:System.ServiceModel.BasicHttpBinding> constructor.</span></span>  
  
 [!code-csharp[S_UEBasicHttpBinding#4](~/samples/snippets/csharp/VS_Snippets_CFX/s_uebasichttpbinding/cs/snippets.cs#4)]
 [!code-vb[S_UEBasicHttpBinding#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uebasichttpbinding/vb/snippets.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException"><span data-ttu-id="ca425-120">구성 이름이 <paramref name="configurationName" />인 바인딩을 찾을 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="ca425-120">The binding with the configuration name <paramref name="configurationName" /> was not found.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AllowCookies">
      <MemberSignature Language="C#" Value="public bool AllowCookies { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowCookies" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.AllowCookies" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowCookies As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowCookies { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowCookies : bool with get, set" Usage="System.ServiceModel.BasicHttpBinding.AllowCookies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ca425-121">클라이언트가 쿠키를 허용하고 이후 요청에서 이 쿠키를 전파하는지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-121">Gets or sets a value that indicates whether the client accepts cookies and propagates them on future requests.</span></span></summary>
        <value><span data-ttu-id="ca425-122">쿠키가 허용되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-122"><see langword="true" /> if cookies are allowed; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="ca425-123">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-123">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="ca425-124">이 속성은 쿠키를 사용하는 ASMX 웹 서비스와의 상호 작용에서의 편의를 위해 제공됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-124">This property is provided as a convenience for interacting with ASMX Web services that use cookies.</span></span> <span data-ttu-id="ca425-125">이 속성을 `true`로 설정하여 클라이언트가 쿠키를 허용할 경우, 서버에서 반환된 쿠키는 해당 서비스에 대한 이후의 모든 클라이언트 요청에 자동으로 복사됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-125">When cookies are accepted by the client by setting the property to `true`, cookies returned from the server are automatically copied to all future client requests to that service.</span></span>

## Examples

<span data-ttu-id="ca425-126">다음 예제에서는 서버의 모든 쿠키가 이후의 클라이언트 요청에 복사 되어야 함을 나타내도록이 속성을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-126">The following example sets this property to indicate that all cookies from the server should be copied to future client requests:</span></span>

```csharp
BasicHttpBinding binding = new BasicHttpBinding();
binding.AllowCookies = true;
```

<span data-ttu-id="ca425-127">이 속성의 값은 구성 파일에서 설정할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-127">The value of this property can also be set in the configuration file.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BuildChannelFactory&lt;TChannel&gt;">
      <MemberSignature Language="C#" Value="public override System.ServiceModel.Channels.IChannelFactory&lt;TChannel&gt; BuildChannelFactory&lt;TChannel&gt; (System.ServiceModel.Channels.BindingParameterCollection parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ServiceModel.Channels.IChannelFactory`1&lt;!!TChannel&gt; BuildChannelFactory&lt;TChannel&gt;(class System.ServiceModel.Channels.BindingParameterCollection parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.BasicHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function BuildChannelFactory(Of TChannel) (parameters As BindingParameterCollection) As IChannelFactory(Of TChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TChannel&gt;&#xA; override System::ServiceModel::Channels::IChannelFactory&lt;TChannel&gt; ^ BuildChannelFactory(System::ServiceModel::Channels::BindingParameterCollection ^ parameters);" />
      <MemberSignature Language="F#" Value="override this.BuildChannelFactory : System.ServiceModel.Channels.BindingParameterCollection -&gt; System.ServiceModel.Channels.IChannelFactory&lt;'Channel&gt;" Usage="basicHttpBinding.BuildChannelFactory parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.IChannelFactory&lt;TChannel&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TChannel" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="parameters" Type="System.ServiceModel.Channels.BindingParameterCollection" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TChannel"><span data-ttu-id="ca425-128">채널 팩터리에서 생성하는 채널 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-128">The type of channel the channel factory produces.</span></span></typeparam>
        <param name="parameters"><span data-ttu-id="ca425-129">생성되는 채널 팩터리에 대한 요구 사항을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-129">Specifies the requirements for the channel factory built.</span></span></param>
        <summary><span data-ttu-id="ca425-130">지정된 유형의 채널을 만들고 바인딩 매개 변수 컬렉션에서 지정된 기능을 충족하는 채널 팩터리 스택을 클라이언트에 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-130">Builds the channel factory stack on the client that creates a specified type of channel and that satisfies the features specified by a collection of binding parameters.</span></span></summary>
        <returns><span data-ttu-id="ca425-131">컬렉션에서 지정된 기능을 충족하는 <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" /> 형식의 <paramref name="TChannel" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-131">An <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" /> of type <paramref name="TChannel" /> that satisfies the features specified by the collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BypassProxyOnLocal">
      <MemberSignature Language="C#" Value="public bool BypassProxyOnLocal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BypassProxyOnLocal" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.BypassProxyOnLocal" />
      <MemberSignature Language="VB.NET" Value="Public Property BypassProxyOnLocal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BypassProxyOnLocal { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.BypassProxyOnLocal : bool with get, set" Usage="System.ServiceModel.BasicHttpBinding.BypassProxyOnLocal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ca425-132">로컬 주소에 대해 프록시 서버를 사용하지 않을 것인지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-132">Gets or sets a value that indicates whether to bypass the proxy server for local addresses.</span></span></summary>
        <value><span data-ttu-id="ca425-133">로컬 주소에 대해 프록시 서버를 사용하지 않으려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-133"><see langword="true" /> to bypass the proxy server for local addresses; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="ca425-134">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-134">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="ca425-135">주소가 로컬인 인터넷 리소스는 로컬 리소스입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-135">An Internet resource is local if it has a local address.</span></span> <span data-ttu-id="ca425-136">로컬 주소는 동일한 컴퓨터, 로컬 LAN 또는 인트라넷에 있는 식별 되 면 구문적으로 기간의 부족 하 여 (\.) Uri와 같이 `http://webserver/` 고 `http://localhost/`입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-136">A local address is one that is on same computer, the local LAN or intranet and is identified, syntactically, by the lack of a period (\.) as in the URIs `http://webserver/` and `http://localhost/`.</span></span>

<span data-ttu-id="ca425-137">BypassProxyOnLocal 설정 속성이 있는지 여부를 끝점으로 구성 확인을 <xref:System.ServiceModel.BasicHttpBinding> 로컬 리소스에 액세스할 때 프록시 서버를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-137">Setting the BypassProxyOnLocal property determines whether endpoints configured with the <xref:System.ServiceModel.BasicHttpBinding> use the proxy server when accessing local resources.</span></span>

<span data-ttu-id="ca425-138">BypassProxyOnLocal 이면 `true`, 로컬 인터넷 리소스에 대 한 요청 프록시 서버를 사용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-138">If BypassProxyOnLocal is `true`, requests to local Internet resources do not use the proxy server.</span></span> <span data-ttu-id="ca425-139">이 속성이 `localhost`로 설정된 경우 클라이언트가 동일한 시스템의 서비스와 통신할 때 프록시를 통하게 하려면 `true` 대신 호스트 이름을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-139">Use the host name (rather than `localhost`) if you want clients to go through a proxy when talking to services on the same machine when this property is set to `true`.</span></span>

<span data-ttu-id="ca425-140">BypassProxyOnLocal 경우 `false`를 모든 인터넷 요청이 localhost가 아닌 Uri 프록시 서버를 통해 이루어집니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-140">When BypassProxyOnLocal is `false`, all Internet requests to non-localhost URIs are made through the proxy server.</span></span> <span data-ttu-id="ca425-141">Localhost 사용 하 여 Uri 요청에서 BypassProxyOnLocal 설정에 관계 없이 프록시 서버를 사용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-141">Requests to URIs with localhost will not use the proxy server regardless of the BypassProxyOnLocal setting.</span></span>
  
## Examples

<span data-ttu-id="ca425-142">다음 예제에서는 로컬 리소스에 대해 프록시를 사용하지 않음을 나타내도록 이 속성을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-142">The following example sets this property to indicate that the proxy should be bypassed for local resources.</span></span>

```csharp
BasicHttpBinding binding = new BasicHttpBinding();
binding.BypassProxyOnLocal = true;
```

<span data-ttu-id="ca425-143">이 속성의 값은 구성 파일에서 설정할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-143">The value of this property can also be set in the configuration file.</span></span>

```xml
<configuration>
  <system.serviceModel>

    <bindings>
      <basicHttpBinding>
        <binding name="Binding1" 
                 bypassProxyOnLocal="true">
          <security mode="None" />
        </binding>
      </basicHttpBinding>
    </bindings>
  </system.serviceModel>

</configuration>
```

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBindingElements">
      <MemberSignature Language="C#" Value="public override System.ServiceModel.Channels.BindingElementCollection CreateBindingElements ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ServiceModel.Channels.BindingElementCollection CreateBindingElements() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.BasicHttpBinding.CreateBindingElements" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CreateBindingElements () As BindingElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::ServiceModel::Channels::BindingElementCollection ^ CreateBindingElements();" />
      <MemberSignature Language="F#" Value="override this.CreateBindingElements : unit -&gt; System.ServiceModel.Channels.BindingElementCollection" Usage="basicHttpBinding.CreateBindingElements " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.BindingElementCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ca425-144">현재 바인딩에 포함되어 있는 순서가 지정된 바인딩 요소 컬렉션을 만들고 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-144">Creates and returns an ordered collection of binding elements contained in the current binding.</span></span></summary>
        <returns><span data-ttu-id="ca425-145"><see cref="T:System.ServiceModel.Channels.BindingElementCollection" />에서 설명하는 순서가 지정된 바인딩 요소 스택을 포함하는 <see cref="T:System.ServiceModel.BasicHttpBinding" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-145">The <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> that contains the ordered stack of binding elements described by the <see cref="T:System.ServiceModel.BasicHttpBinding" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca425-146">바인딩 요소의 순서는 중요합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-146">The order of the binding elements is important.</span></span> <span data-ttu-id="ca425-147">바인딩 요소의 순서는 프로토콜 및 전송 채널이 생성되고 스택되는 순서를 반영합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-147">It reflects the order in which the protocol and transport channels are constructed and stacked.</span></span> <span data-ttu-id="ca425-148">이 바인딩 요소 컬렉션은 새 컬렉션이며 수정 후 사용하여 <xref:System.ServiceModel.Channels.CustomBinding>을 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-148">This collection of binding elements is a new collection and can be modified and then used to create a <xref:System.ServiceModel.Channels.CustomBinding>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca425-149">다음 예제에서는 현재 바인딩의 바인딩 요소로 구성하여 순서가 지정된 컬렉션을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-149">The following example creates an ordered collection of the binding elements in the current binding.</span></span>  
  
 [!code-csharp[S_UEBasicHttpBinding#26](~/samples/snippets/csharp/VS_Snippets_CFX/s_uebasichttpbinding/cs/client.cs#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableHttpCookieContainer">
      <MemberSignature Language="C#" Value="public bool EnableHttpCookieContainer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableHttpCookieContainer" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.EnableHttpCookieContainer" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableHttpCookieContainer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableHttpCookieContainer { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableHttpCookieContainer : bool with get, set" Usage="System.ServiceModel.BasicHttpBinding.EnableHttpCookieContainer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This property is obsolete. To enable Http CookieContainer, use the AllowCookies property instead.", false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ca425-150">HTTP 쿠키 컨테이너가 사용되는지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-150">Gets or sets a value that indicates whether HTTP cookie container is enabled.</span></span></summary>
        <value><span data-ttu-id="ca425-151">HTTP 쿠키 컨테이너를 사용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-151"><see langword="true" /> if HTTP cookie container is enabled; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnvelopeVersion">
      <MemberSignature Language="C#" Value="public System.ServiceModel.EnvelopeVersion EnvelopeVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.EnvelopeVersion EnvelopeVersion" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.EnvelopeVersion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EnvelopeVersion As EnvelopeVersion" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::EnvelopeVersion ^ EnvelopeVersion { System::ServiceModel::EnvelopeVersion ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EnvelopeVersion : System.ServiceModel.EnvelopeVersion" Usage="System.ServiceModel.BasicHttpBinding.EnvelopeVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.EnvelopeVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ca425-152">이 바인딩에서 처리한 메시지에 사용되는 SOAP 버전을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-152">Gets the version of SOAP that is used for messages that are processed by this binding.</span></span></summary>
        <value><span data-ttu-id="ca425-153">이 바인딩에 사용된 <see cref="T:System.ServiceModel.EnvelopeVersion" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-153">The value of the <see cref="T:System.ServiceModel.EnvelopeVersion" /> that is used with this binding.</span></span> <span data-ttu-id="ca425-154">값은 항상 SOAP 1.1입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-154">The value is always SOAP 1.1.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks  

<span data-ttu-id="ca425-155">SOAP 1.1은 이 바인딩에 사용할 수 있는 유일한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-155">SOAP 1.1 is the only value that can be used with this binding.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HostNameComparisonMode">
      <MemberSignature Language="C#" Value="public System.ServiceModel.HostNameComparisonMode HostNameComparisonMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceModel.HostNameComparisonMode HostNameComparisonMode" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.HostNameComparisonMode" />
      <MemberSignature Language="VB.NET" Value="Public Property HostNameComparisonMode As HostNameComparisonMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::HostNameComparisonMode HostNameComparisonMode { System::ServiceModel::HostNameComparisonMode get(); void set(System::ServiceModel::HostNameComparisonMode value); };" />
      <MemberSignature Language="F#" Value="member this.HostNameComparisonMode : System.ServiceModel.HostNameComparisonMode with get, set" Usage="System.ServiceModel.BasicHttpBinding.HostNameComparisonMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.HostNameComparisonMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ca425-156">URI 비교 시 서비스에 액세스하는 데 호스트 이름이 사용되는지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-156">Gets or sets a value that indicates whether the hostname is used to reach the service when matching the URI.</span></span></summary>
        <value><span data-ttu-id="ca425-157">URI 비교 시 서비스에 액세스하는 데 호스트 이름이 사용되는지 여부를 나타내는 <see cref="T:System.ServiceModel.HostNameComparisonMode" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-157">The <see cref="T:System.ServiceModel.HostNameComparisonMode" /> value that indicates whether the hostname is used to reach the service when matching on the URI.</span></span> <span data-ttu-id="ca425-158">기본값은 <see cref="F:System.ServiceModel.HostNameComparisonMode.StrongWildcard" />이며 이 값은 비교 시 호스트 이름을 무시합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-158">The default value is <see cref="F:System.ServiceModel.HostNameComparisonMode.StrongWildcard" />, which ignores the hostname in the match.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples

<span data-ttu-id="ca425-159">다음 예제에서는 이 속성을 설정하여 정확한 일치가 필요함을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-159">The following example sets this property to indicate that an exact match is required.</span></span>

```csharp
BasicHttpBinding binding = new BasicHttpBinding();
binding.HostNameComparisonMode = HostNameComparisonMode.Exact;
```

<span data-ttu-id="ca425-160">이 속성의 값은 구성 파일에서 설정할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-160">The value of this property can also be set in the configuration file.</span></span>

```xml
<configuration>
  <system.serviceModel>

    <bindings>
      <basicHttpBinding>
        <binding name="Binding1"
                 hostNameComparisonMode ="Exact">
          <security mode="None" />
        </binding>
      </basicHttpBinding>
    </bindings>

  </system.serviceModel>

</configuration>
```

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxBufferPoolSize">
      <MemberSignature Language="C#" Value="public long MaxBufferPoolSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxBufferPoolSize" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.MaxBufferPoolSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxBufferPoolSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxBufferPoolSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxBufferPoolSize : int64 with get, set" Usage="System.ServiceModel.BasicHttpBinding.MaxBufferPoolSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.DefaultValue(524288)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ca425-161">채널로부터 메시지를 수신하는 메시지 버퍼 관리자가 사용하도록 할당된 최대 메모리(바이트)를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-161">Gets or sets the maximum amount of memory, in bytes,  that is allocated for use by the manager of the message buffers that receive messages from the channel.</span></span></summary>
        <value><span data-ttu-id="ca425-162">메시지 버퍼 관리자가 사용할 수 있는 최대 메모리(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-162">The maximum amount of memory, in bytes, available for use by the message buffer manager.</span></span> <span data-ttu-id="ca425-163">기본값은 524288(0x80000)바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-163">The default value is 524288 (0x80000) bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="ca425-164"><xref:System.ServiceModel.Channels.BufferManager>는 버퍼 풀을 사용하여 버퍼 사용 비용을 최소화합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-164">The <xref:System.ServiceModel.Channels.BufferManager> minimizes the cost of using buffers by using a buffer pool.</span></span> <span data-ttu-id="ca425-165">버퍼는 메시지가 채널에서 나올 때 서비스를 이용하여 그 메시지를 처리해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-165">Buffers are required to process messages by the service when they come out of the channel.</span></span> <span data-ttu-id="ca425-166">버퍼 풀에 메시지 로드를 처리하기에 충분한 메모리가 없는 경우 <xref:System.ServiceModel.Channels.BufferManager>에서는 CLR 힙으로부터 추가 메모리를 할당해야 하며, 따라서 가비지 수집 오버헤드가 증가합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-166">If there is not sufficient memory in the buffer pool to process the message load, the <xref:System.ServiceModel.Channels.BufferManager> must allocate additional memory from the CLR heap, which increases the garbage collection overhead.</span></span> <span data-ttu-id="ca425-167">CLR 가비지 힙으로부터 다량의 할당이 이루어지는 경우 버퍼 풀 크기가 너무 작으면 MaxBufferPoolSize 제한을 늘려 더 크게 할당을 사용 하 여 성능을 개선할 수 있는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-167">Extensive allocation from the CLR garbage heap is an indication that the buffer pool size is too small and that performance can be improved with a larger allocation by increasing the MaxBufferPoolSize limit.</span></span>

## Examples

<span data-ttu-id="ca425-168">다음 예제에서는 이 속성을 기본값의 2배로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-168">The following example sets this property to twice the default value.</span></span>

```csharp
BasicHttpBinding binding = new BasicHttpBinding();
// Use double the default value
binding.MaxBufferPoolSize = 0x80000 * 2;
```

<span data-ttu-id="ca425-169">이 속성의 값은 구성 파일에서 설정할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-169">The value of this property can also be set in the configuration file.</span></span>

```xml
<configuration>
  <system.serviceModel>

    <bindings>
      <basicHttpBinding>
        <binding name="Binding1">

          <!-- set pool size to double default of 0x80000 -->
          maxBufferPoolSize = 0x100000

          <security mode="None" />
        </binding>
      </basicHttpBinding>
    </bindings>

  </system.serviceModel>

</configuration>
```

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxBufferSize">
      <MemberSignature Language="C#" Value="public int MaxBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.MaxBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxBufferSize : int with get, set" Usage="System.ServiceModel.BasicHttpBinding.MaxBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.DefaultValue(65536)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ca425-170">채널로부터 메시지를 수신하는 버퍼의 최대 크기(바이트)를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-170">Gets or sets the maximum size, in bytes, for a buffer that receives messages from the channel.</span></span></summary>
        <value><span data-ttu-id="ca425-171">이 바인딩으로 구성된 엔드포인트에 대해 메시지가 처리되는 동안 해당 메시지를 저장하는 버퍼의 최대 크기(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-171">The maximum size, in bytes, of a buffer that stores messages while they are processed for an endpoint configured with this binding.</span></span> <span data-ttu-id="ca425-172">기본값은 65,536바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-172">The default value is 65,536 bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="ca425-173">버퍼의 메모리가 부족하여 처리 중인 메시지를 저장할 수 없는 경우 CLR 힙으로부터 추가 메모리를 할당해야 하며, 이로 인해 가비지 수집 오버헤드가 증가합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-173">If there is not sufficient memory in the buffer to store the message while it is processed, more memory must be allocated from the CLR heap, which increases the garbage collection overhead.</span></span> <span data-ttu-id="ca425-174">CLR 가비지 힙으로부터 메모리가 다량 할당되는 경우에는 메시지 버퍼 풀 크기가 너무 작고, 버퍼를 더 많이 할당하여 성능이 향상될 수 있음을 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-174">Extensive allocation from the CLR garbage heap is an indication that the message buffer size is too small and that performance can be improved with a larger allocation.</span></span>

<span data-ttu-id="ca425-175">MaxBufferSize 속성 및 중요도 값 메시지 되 고 있는지 여부에 따라 다릅니다. 버퍼링 되거나 스트리밍되는지 받이 되는 채널에서:</span><span class="sxs-lookup"><span data-stu-id="ca425-175">The value of the MaxBufferSize property and its significance is different depending on whether the messages are being buffered or streamed on the channel through which they are being received:</span></span>

<span data-ttu-id="ca425-176">버퍼링 전송(<xref:System.ServiceModel.BasicHttpBinding.TransferMode>가 <xref:System.ServiceModel.TransferMode.Buffered>로 설정됨)의 경우</span><span class="sxs-lookup"><span data-stu-id="ca425-176">For buffered transports, (<xref:System.ServiceModel.BasicHttpBinding.TransferMode> set to <xref:System.ServiceModel.TransferMode.Buffered>).</span></span> <span data-ttu-id="ca425-177">이 값은 항상 <xref:System.ServiceModel.BasicHttpBinding.MaxReceivedMessageSize>에 지정된 값과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-177">This value is always equal to that specified by the <xref:System.ServiceModel.BasicHttpBinding.MaxReceivedMessageSize>.</span></span>

<span data-ttu-id="ca425-178">스트리밍 전송의 경우(<xref:System.ServiceModel.BasicHttpBinding.TransferMode>가 <xref:System.ServiceModel.TransferMode.Streamed>로 설정됨) SOAP 헤더만 버퍼링되어야 메시지를 생성할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-178">For streamed transports, (<xref:System.ServiceModel.BasicHttpBinding.TransferMode> set to <xref:System.ServiceModel.TransferMode.Streamed>), only the SOAP headers must be buffered to generate the message.</span></span> <span data-ttu-id="ca425-179">본문은 필요에 따라 스트리밍할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-179">The body can be streamed in on-demand.</span></span> <span data-ttu-id="ca425-180">이 경우 MaxBufferSize가 보다 작거나 같음 <xref:System.ServiceModel.BasicHttpBinding.MaxReceivedMessageSize>여기서 <xref:System.ServiceModel.BasicHttpBinding.MaxReceivedMessageSize> 전체 메시지 (헤더 및 본문)의 크기를 제한 및 MaxBufferSize는 SOAP 헤더의 크기만 제한 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-180">In this case, MaxBufferSize is less than or equal to <xref:System.ServiceModel.BasicHttpBinding.MaxReceivedMessageSize>, where <xref:System.ServiceModel.BasicHttpBinding.MaxReceivedMessageSize> bounds the size of the overall message (headers and body) and MaxBufferSize bounds only the size of the SOAP headers.</span></span>

<span data-ttu-id="ca425-181">여기서 설정한 버퍼 크기 제한은 메시지 교환의 성능을 최적화하는 데 목적이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-181">The limitations on buffer size set here are for optimizing the performance of message exchanges.</span></span> <span data-ttu-id="ca425-182">설정된 버퍼 최대값을 초과하는 메시지는 삭제됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-182">If a message exceeds the maximum value set for the buffer, it is not dropped.</span></span> <span data-ttu-id="ca425-183">그 대신 CLR 힙으로부터 추가 메모리가 요청되며 그로 인해 버퍼를 사용하는 경우보다 더 많은 가비지 컬렉션 오버헤드가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-183">Instead, more memory is requested from the CLR heap and this incurs more garbage collection overhead than using the buffers.</span></span>

> [!NOTE]
> <span data-ttu-id="ca425-184">MaxBufferSize 및 MaxReceivedMessageSize에 대 한 설정은 로컬 동작 설정입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-184">The settings for MaxBufferSize and MaxReceivedMessageSize, are local behavioral settings.</span></span> <span data-ttu-id="ca425-185">즉, 메타데이터 형태로 다른 엔드포인트에 전송되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-185">This means that they are not transmitted to other endpoints in metadata.</span></span> <span data-ttu-id="ca425-186">메타데이터에서 최대 메시지 크기를 2GB로 하여 서비스에 대한 프록시를 생성할 경우 그 프록시는 기본값인 64K를 계속 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-186">If you generate a proxy to a service with a maximum message size of 2GB from metadata, the proxy still has a default value of 64K.</span></span> <span data-ttu-id="ca425-187">메시지 및 메시지 버퍼 크기를 적절히 제한하는 것은 로컬 관리자의 업무입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-187">This leaves control of the appropriate bounds for message and message buffer size in the scope of local administrators.</span></span>
  
## Examples


<span data-ttu-id="ca425-188">다음 예제에서는 **MaxBufferSize** 를 1,000,000 바이트로 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-188">The following example sets **MaxBufferSize** to 1,000,000 bytes.</span></span>

```csharp
BasicHttpBinding binding = new BasicHttpBinding();
            
// set to one million
binding.MaxBufferSize = 1000000;
```

<span data-ttu-id="ca425-189">이 속성의 값은 구성 파일에서 설정할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-189">The value of this property can also be set in the configuration file.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxReceivedMessageSize">
      <MemberSignature Language="C#" Value="public long MaxReceivedMessageSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxReceivedMessageSize" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.MaxReceivedMessageSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxReceivedMessageSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxReceivedMessageSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxReceivedMessageSize : int64 with get, set" Usage="System.ServiceModel.BasicHttpBinding.MaxReceivedMessageSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.DefaultValue(65536)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ca425-190">이 바인딩으로 구성된 채널에서 수신할 수 있는 최대 메시지 크기(바이트)를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-190">Gets or sets the maximum size, in bytes, for a message that can be received on a channel configured with this binding.</span></span></summary>
        <value><span data-ttu-id="ca425-191">바인딩에서 처리하는 메시지의 최대 크기(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-191">The maximum size, in bytes, for a message that is processed by the binding.</span></span> <span data-ttu-id="ca425-192">기본값은 65,536바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-192">The default value is 65,536 bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="ca425-193">BasicHttpBinding을 사용 하 여 서비스 통신 중에 받을 수 있는 메시지의 크기는 각 메시지에 할당 된 메모리의 양으로 제한 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-193">The size of the messages that can be received on the wire by services using the BasicHttpBinding is bounded by the amount of memory allocated for each message.</span></span> <span data-ttu-id="ca425-194">이 메시지 크기 제한은 DoS 유형의 공격에 대한 노출을 막기 위한 것입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-194">This bound on message size is intended to limit exposure to DoS-style attacks.</span></span>

<span data-ttu-id="ca425-195">또한 <xref:System.ServiceModel.BasicHttpBinding.MaxBufferSize>에는 <xref:System.ServiceModel.BasicHttpBinding>속성이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-195">There is also a <xref:System.ServiceModel.BasicHttpBinding.MaxBufferSize> property on the <xref:System.ServiceModel.BasicHttpBinding>:</span></span>

<span data-ttu-id="ca425-196">버퍼링 전송(<xref:System.ServiceModel.BasicHttpBinding.TransferMode>가 <xref:System.ServiceModel.TransferMode.Buffered>로 설정됨)의 경우</span><span class="sxs-lookup"><span data-stu-id="ca425-196">For buffered transports, (<xref:System.ServiceModel.BasicHttpBinding.TransferMode> set to <xref:System.ServiceModel.TransferMode.Buffered>).</span></span> <span data-ttu-id="ca425-197">이 값은 항상 MaxReceivedMessageSize에 지정 된.</span><span class="sxs-lookup"><span data-stu-id="ca425-197">This value is always equal to that specified by the MaxReceivedMessageSize.</span></span>

<span data-ttu-id="ca425-198">스트리밍 전송의 경우(<xref:System.ServiceModel.BasicHttpBinding.TransferMode>가 <xref:System.ServiceModel.TransferMode.Streamed>로 설정됨) SOAP 헤더만 버퍼링되어야 메시지를 생성할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-198">For streamed transports (<xref:System.ServiceModel.BasicHttpBinding.TransferMode> set to <xref:System.ServiceModel.TransferMode.Streamed>), only the SOAP headers must be buffered to generate the message.</span></span> <span data-ttu-id="ca425-199">본문은 필요에 따라 스트리밍할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-199">The body can be streamed in on-demand.</span></span> <span data-ttu-id="ca425-200">이 예에서 <xref:System.ServiceModel.BasicHttpBinding.MaxBufferSize> MaxReceivedMessageSize, MaxReceivedMessageSize 전체 메시지 (헤더 및 본문)의 크기를 제한 하는 위치 보다 작거나 같음 및 <xref:System.ServiceModel.BasicHttpBinding.MaxBufferSize> SOAP 헤더의 크기를 제한 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-200">In this case, <xref:System.ServiceModel.BasicHttpBinding.MaxBufferSize> is less than or equal to MaxReceivedMessageSize, where MaxReceivedMessageSize bounds the size of the overall message (headers and body) and <xref:System.ServiceModel.BasicHttpBinding.MaxBufferSize> bounds the size of the SOAP headers.</span></span>

## Examples

<span data-ttu-id="ca425-201">다음 예제는 MaxReceivedMessageSize를 1,000,000 바이트로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-201">The following example sets MaxReceivedMessageSize to 1,000,000 bytes.</span></span>

```csharp
BasicHttpBinding binding = new BasicHttpBinding();

// Use double the default value
binding.MaxReceivedMessageSize = 65536 * 2;
```

<span data-ttu-id="ca425-202">이 속성의 값은 구성 파일에서 설정할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-202">The value of this property can also be set in the configuration file.</span></span>

```xml
<configuration>
  <system.serviceModel>

    <bindings>
      <basicHttpBinding>
        <binding name="Binding1"
                 maxReceivedMessageSize = "1000000">
          <security mode="None" />
        </binding>
      </basicHttpBinding>
    </bindings>

  </system.serviceModel>

</configuration>
```

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ca425-203">값이 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="ca425-203">The value is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MessageEncoding">
      <MemberSignature Language="C#" Value="public System.ServiceModel.WSMessageEncoding MessageEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceModel.WSMessageEncoding MessageEncoding" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.MessageEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Property MessageEncoding As WSMessageEncoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::WSMessageEncoding MessageEncoding { System::ServiceModel::WSMessageEncoding get(); void set(System::ServiceModel::WSMessageEncoding value); };" />
      <MemberSignature Language="F#" Value="member this.MessageEncoding : System.ServiceModel.WSMessageEncoding with get, set" Usage="System.ServiceModel.BasicHttpBinding.MessageEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.WSMessageEncoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ca425-204">SOAP 메시지 인코딩에 MTOM이 사용되는지 아니면 텍스트가 사용되는지를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-204">Gets or sets whether MTOM or Text is used to encode SOAP messages.</span></span></summary>
        <value><span data-ttu-id="ca425-205">SOAP 메시지 인코딩에 MTOM이 사용되는지 아니면 텍스트/XML이 사용되는지를 나타내는 <see cref="T:System.ServiceModel.WSMessageEncoding" />의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-205">The value of <see cref="T:System.ServiceModel.WSMessageEncoding" /> that indicates whether MTOM or Text/XML is used to encode SOAP messages.</span></span> <span data-ttu-id="ca425-206">기본값은 <see cref="F:System.ServiceModel.WSMessageEncoding.Text" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-206">The default value is <see cref="F:System.ServiceModel.WSMessageEncoding.Text" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ca425-207">다음 예제에서는 MessageEncoding을 텍스트로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-207">The following example sets MessageEncoding to Text.</span></span>  
  
 [!code-csharp[S_UEBasicHttpBinding#19](~/samples/snippets/csharp/VS_Snippets_CFX/s_uebasichttpbinding/cs/client.cs#19)]  
  
 <span data-ttu-id="ca425-208">이 속성의 값은 구성 파일에서 설정할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-208">The value of this property can also be set in the configuration file.</span></span>  
  
  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProxyAddress">
      <MemberSignature Language="C#" Value="public Uri ProxyAddress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri ProxyAddress" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.ProxyAddress" />
      <MemberSignature Language="VB.NET" Value="Public Property ProxyAddress As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ ProxyAddress { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProxyAddress : Uri with get, set" Usage="System.ServiceModel.BasicHttpBinding.ProxyAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.UriTypeConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ca425-209">HTTP 프록시의 URI 주소를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-209">Gets or sets the URI address of the HTTP proxy.</span></span></summary>
        <value><span data-ttu-id="ca425-210">HTTP 프록시의 주소로 사용되는 <see cref="T:System.Uri" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-210">A <see cref="T:System.Uri" /> that serves as the address of the HTTP proxy.</span></span> <span data-ttu-id="ca425-211">기본값은 null입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-211">The default value is null.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="ca425-212">경우는 <xref:System.ServiceModel.BasicHttpBinding.UseDefaultWebProxy> 로 설정 된 `true`기본 주소가 사용 되며, 및 ProxyAddress 집합의 값은 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-212">If the <xref:System.ServiceModel.BasicHttpBinding.UseDefaultWebProxy> is set to `true`, the default address is used and the value of the ProxyAddress set is ignored.</span></span>

## Examples

<span data-ttu-id="ca425-213">다음 예제에서는 응용 프로그램 설정에 ProxyAddress를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-213">The following example sets ProxyAddress to application settings.</span></span>

```csharp
// Get base address from app settings in configuration
Uri baseAddress = new Uri(ConfigurationManager.AppSettings["baseAddress"]);

BasicHttpBinding binding = new BasicHttpBinding();

binding.ProxyAddress = baseAddress;
```

<span data-ttu-id="ca425-214">이 속성의 값은 구성 파일에서 설정할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-214">The value of this property can also be set in the configuration file.</span></span>

```xml
<configuration>
  <system.serviceModel>

    <bindings>
      <basicHttpBinding>
        <binding name="Binding1"
                 proxyAddress = "http://myProxy">
          <security mode="None" />
        </binding>
      </basicHttpBinding>
    </bindings>

  </system.serviceModel>

</configuration>
```

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReaderQuotas">
      <MemberSignature Language="C#" Value="public System.Xml.XmlDictionaryReaderQuotas ReaderQuotas { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlDictionaryReaderQuotas ReaderQuotas" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.ReaderQuotas" />
      <MemberSignature Language="VB.NET" Value="Public Property ReaderQuotas As XmlDictionaryReaderQuotas" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlDictionaryReaderQuotas ^ ReaderQuotas { System::Xml::XmlDictionaryReaderQuotas ^ get(); void set(System::Xml::XmlDictionaryReaderQuotas ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ReaderQuotas : System.Xml.XmlDictionaryReaderQuotas with get, set" Usage="System.ServiceModel.BasicHttpBinding.ReaderQuotas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDictionaryReaderQuotas</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ca425-215">이 바인딩으로 구성된 엔드포인트에서 처리할 수 있는 SOAP 메시지의 복잡성에 대한 제약 조건을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-215">Gets or sets constraints on the complexity of SOAP messages that can be processed by endpoints configured with this binding.</span></span></summary>
        <value><span data-ttu-id="ca425-216">복잡성 제약 조건을 지정하는 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-216">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> that specifies the complexity constraints.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="ca425-217">복잡성 제약 조건을 사용하면 메시지 복잡성을 사용하여 엔드포인트 처리 리소스를 묶어 두려고 시도하는 일종의 DOS(서비스 거부) 공격으로부터 보호할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-217">The complexity constraints provide protection from denial of service (DOS) attacks that attempt to use message complexity to tie up endpoint processing resources.</span></span> <span data-ttu-id="ca425-218">다른 복잡성 제약 조건에는 최대 요소 깊이, 메시지 내 문자열 내용의 최대 길이 등이 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-218">Other complexity constraints include items such as a maximum element depth and a maximum length for string content within the message.</span></span>

## Examples

<span data-ttu-id="ca425-219">다음 예제에서는 응용 프로그램 설정에 ReaderQuotas를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-219">The following example sets ReaderQuotas to application settings.</span></span>

```csharp
BasicHttpBinding binding = new BasicHttpBinding();
XmlDictionaryReaderQuotas readerQuotas = new XmlDictionaryReaderQuotas();
readerQuotas.MaxArrayLength = 25 * 1024;
        
binding.ReaderQuotas = readerQuotas;
```

<span data-ttu-id="ca425-220">이 속성의 값은 구성 파일에서 설정할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-220">The value of this property can also be set in the configuration file.</span></span>

```xml
<configuration>
  <system.serviceModel>

    <bindings>
      <basicHttpBinding>
        <binding name="Binding1">
          <readerQuotas maxBytesPerRead ="1000" 
                        maxDepth="100"/>

          <security mode="None" />
        </binding>
      </basicHttpBinding>
    </bindings>

  </system.serviceModel>

</configuration>
```

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scheme">
      <MemberSignature Language="C#" Value="public override string Scheme { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Scheme" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.Scheme" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Scheme As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Scheme { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Scheme : string" Usage="System.ServiceModel.BasicHttpBinding.Scheme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ca425-221">이 바인딩으로 구성되는 채널과 수신기의 URI 전송 체계를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-221">Gets the URI transport scheme for the channels and listeners that are configured with this binding.</span></span></summary>
        <value><span data-ttu-id="ca425-222">전송 바인딩 요소의 보안 모드가 <see cref="F:System.ServiceModel.BasicHttpSecurityMode.Transport" /> 또는 <see cref="F:System.ServiceModel.BasicHttpSecurityMode.TransportWithMessageCredential" />로 설정되면 "https"이고, 그렇지 않으면 "http"입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-222">"https" if the security mode in the transport binding element is set to <see cref="F:System.ServiceModel.BasicHttpSecurityMode.Transport" /> or <see cref="F:System.ServiceModel.BasicHttpSecurityMode.TransportWithMessageCredential" />; "http" otherwise.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples

<span data-ttu-id="ca425-223">다음 예제에서는 현재 체계를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-223">The following example gets the current Scheme.</span></span>

```csharp
BasicHttpBinding binding = new BasicHttpBinding();
string thisScheme = binding.Scheme;
```

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Security">
      <MemberSignature Language="C#" Value="public System.ServiceModel.BasicHttpSecurity Security { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.BasicHttpSecurity Security" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.Security" />
      <MemberSignature Language="VB.NET" Value="Public Property Security As BasicHttpSecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::BasicHttpSecurity ^ Security { System::ServiceModel::BasicHttpSecurity ^ get(); void set(System::ServiceModel::BasicHttpSecurity ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Security : System.ServiceModel.BasicHttpSecurity with get, set" Usage="System.ServiceModel.BasicHttpBinding.Security" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.BasicHttpSecurity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ca425-224">이 바인딩과 함께 사용되는 보안 형식을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-224">Gets the type of security used with this binding.</span></span></summary>
        <value><span data-ttu-id="ca425-225">이 바인딩과 함께 사용되는 <see cref="T:System.ServiceModel.BasicHttpSecurity" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-225">The <see cref="T:System.ServiceModel.BasicHttpSecurity" /> that is used with this binding.</span></span> <span data-ttu-id="ca425-226">기본값은 <see cref="F:System.ServiceModel.BasicHttpSecurityMode.None" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-226">The default value is <see cref="F:System.ServiceModel.BasicHttpSecurityMode.None" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca425-227">기본적으로 SOAP 메시지의 보안이 유지되지 않고 클라이언트가 인증되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-227">By default, the SOAP message is not secured and the client is not authenticated.</span></span> <span data-ttu-id="ca425-228">기본 형식이 아닌 보안을 사용하려면 <xref:System.ServiceModel.BasicHttpBinding.%23ctor%28System.ServiceModel.BasicHttpSecurityMode%29> 생성자를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-228">To use a non-default type of security, use the <xref:System.ServiceModel.BasicHttpBinding.%23ctor%28System.ServiceModel.BasicHttpSecurityMode%29> constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ca425-229">다음 예제에서는 `Security` 속성을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-229">The following example gets the `Security` property.</span></span>  
  
 [!code-csharp[S_UEBasicHttpBinding#23](~/samples/snippets/csharp/VS_Snippets_CFX/s_uebasichttpbinding/cs/client.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeEnableHttpCookieContainer">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeEnableHttpCookieContainer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeEnableHttpCookieContainer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.BasicHttpBinding.ShouldSerializeEnableHttpCookieContainer" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeEnableHttpCookieContainer () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeEnableHttpCookieContainer();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeEnableHttpCookieContainer : unit -&gt; bool" Usage="basicHttpBinding.ShouldSerializeEnableHttpCookieContainer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ca425-230">http 쿠키 컨테이너가 serialization을 활성화해야 하는지 알려줍니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-230">Indicates whether the http cookie container should enable the serialization.</span></span></summary>
        <returns><span data-ttu-id="ca425-231">http 쿠키 컨테이너에서 serialization을 사용하도록 설정해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-231"><see langword="true" /> if the http cookie container should enable the serialization; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeReaderQuotas">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeReaderQuotas ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeReaderQuotas() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.BasicHttpBinding.ShouldSerializeReaderQuotas" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeReaderQuotas () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeReaderQuotas();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeReaderQuotas : unit -&gt; bool" Usage="basicHttpBinding.ShouldSerializeReaderQuotas " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ca425-232">SOAP 메시지 구조의 복잡성에 대해 적용된 제약 조건 값을 serialize해야 하는지 여부를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-232">Returns whether the constraint values placed on the complexity of SOAP message structure should be serialized.</span></span></summary>
        <returns><span data-ttu-id="ca425-233">판독기 할당량을 serialize해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-233"><see langword="true" /> if reader quotas should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeSecurity">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeSecurity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeSecurity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.BasicHttpBinding.ShouldSerializeSecurity" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeSecurity () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeSecurity();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeSecurity : unit -&gt; bool" Usage="basicHttpBinding.ShouldSerializeSecurity " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ca425-234">메시지 또는 전송 수준 등에서 serialization이 이미 발생했는지 여부에 따라 보안 설정을 serialize해야 하는지 여부를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-234">Returns whether security settings should be serialized based upon whether serialization already occurs, for example at the message or transport level.</span></span></summary>
        <returns><span data-ttu-id="ca425-235">보안을 serialize해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-235"><see langword="true" /> if security should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeTextEncoding">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeTextEncoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeTextEncoding() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.BasicHttpBinding.ShouldSerializeTextEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeTextEncoding () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeTextEncoding();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeTextEncoding : unit -&gt; bool" Usage="basicHttpBinding.ShouldSerializeTextEncoding " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ca425-236">텍스트 인코딩에 대한 설정을 serialize해야 하는지 여부를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-236">Returns whether settings for text encoding should be serialized.</span></span></summary>
        <returns><span data-ttu-id="ca425-237">텍스트 인코딩을 serialize해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-237"><see langword="true" /> if text encoding should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously">
      <MemberSignature Language="C#" Value="bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ReceiveSynchronously As Boolean Implements IBindingRuntimePreferences.ReceiveSynchronously" />
      <MemberSignature Language="C++ CLI" Value="property bool System::ServiceModel::Channels::IBindingRuntimePreferences::ReceiveSynchronously { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ca425-238">들어오는 요청이 동기적으로 처리되는지 또는 비동기적으로 처리되는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-238">Gets a value that indicates whether incoming requests are handled synchronously or asynchronously.</span></span></summary>
        <value><span data-ttu-id="ca425-239">항상 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-239">Always <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples

<span data-ttu-id="ca425-240">이 예제에서는 ReceiveSynchronously 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-240">This example gets the ReceiveSynchronously value.</span></span>

```csharp
BasicHttpBinding binding = new BasicHttpBinding();
IBindingRuntimePreferences s = (binding as IBindingRuntimePreferences);
bool receiveSynchronously = s.ReceiveSynchronously;
```

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextEncoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding TextEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding TextEncoding" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.TextEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Property TextEncoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ TextEncoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TextEncoding : System.Text.Encoding with get, set" Usage="System.ServiceModel.BasicHttpBinding.TextEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ServiceModel.Configuration.EncodingConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ca425-241">메시지 텍스트에 사용되는 문자 인코딩을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-241">Gets or sets the character encoding that is used for the message text.</span></span></summary>
        <value><span data-ttu-id="ca425-242">사용되는 문자 인코딩을 나타내는 <see cref="T:System.Text.Encoding" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-242">The <see cref="T:System.Text.Encoding" /> that indicates the character encoding that is used.</span></span> <span data-ttu-id="ca425-243">기본값은 <see cref="T:System.Text.UTF8Encoding" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-243">The default is <see cref="T:System.Text.UTF8Encoding" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples

<span data-ttu-id="ca425-244">다음 예제에서는 설정 TextEncoding <xref:System.Text.Encoding.Unicode?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-244">The following example sets TextEncoding to <xref:System.Text.Encoding.Unicode?displayProperty=nameWithType>.</span></span>

```csharp
BasicHttpBinding binding = new BasicHttpBinding();
binding.TextEncoding = System.Text.Encoding.Unicode;
```

<span data-ttu-id="ca425-245">이 속성의 값은 구성 파일에서 설정할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-245">The value of this property can also be set in the configuration file.</span></span>

```xml
<configuration>
  <system.serviceModel>

    <bindings>
      <basicHttpBinding>
        <binding name="Binding1"
          textEncoding = "UnicodeFffeTextEncoding">

          <security mode="None" />
        </binding>
      </basicHttpBinding>
    </bindings>
  </system.serviceModel>

</configuration>
```

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransferMode">
      <MemberSignature Language="C#" Value="public System.ServiceModel.TransferMode TransferMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceModel.TransferMode TransferMode" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.TransferMode" />
      <MemberSignature Language="VB.NET" Value="Public Property TransferMode As TransferMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::TransferMode TransferMode { System::ServiceModel::TransferMode get(); void set(System::ServiceModel::TransferMode value); };" />
      <MemberSignature Language="F#" Value="member this.TransferMode : System.ServiceModel.TransferMode with get, set" Usage="System.ServiceModel.BasicHttpBinding.TransferMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.TransferMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ca425-246">메시지를 버퍼링 방식으로 보내는지 아니면 스트리밍 방식으로 보내는지를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-246">Gets or sets a value that indicates whether messages are sent buffered or streamed.</span></span></summary>
        <value><span data-ttu-id="ca425-247">메시지를 버퍼링 방식으로 보내는지 아니면 스트리밍 방식으로 보내는지를 나타내는 <see cref="T:System.ServiceModel.TransferMode" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-247">The <see cref="T:System.ServiceModel.TransferMode" /> that indicates whether messages are sent buffered or streamed.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples

<span data-ttu-id="ca425-248">다음 예제에서는 설정 TransferMode <xref:System.ServiceModel.TransferMode.Streamed>합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-248">The following example sets TransferMode to <xref:System.ServiceModel.TransferMode.Streamed>.</span></span>

```csharp
BasicHttpBinding binding = new BasicHttpBinding();
binding.TransferMode = TransferMode.Streamed;
```

<span data-ttu-id="ca425-249">이 속성의 값은 구성 파일에서 설정할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-249">The value of this property can also be set in the configuration file.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseDefaultWebProxy">
      <MemberSignature Language="C#" Value="public bool UseDefaultWebProxy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDefaultWebProxy" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.UseDefaultWebProxy" />
      <MemberSignature Language="VB.NET" Value="Public Property UseDefaultWebProxy As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseDefaultWebProxy { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseDefaultWebProxy : bool with get, set" Usage="System.ServiceModel.BasicHttpBinding.UseDefaultWebProxy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ca425-250">시스템의 자동 구성된 HTTP 프록시가 있는 경우 이를 사용하는지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-250">Gets or sets a value that indicates whether the auto-configured HTTP proxy of the system should be used, if available.</span></span></summary>
        <value><span data-ttu-id="ca425-251">시스템의 자동 구성된 HTTP 프록시를 사용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-251"><see langword="true" /> if the auto-configured HTTP proxy of the system should be used, if available; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="ca425-252">기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-252">The default value is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="ca425-253">이 대 한 오류가 발생 `true` 및 <xref:System.ServiceModel.BasicHttpBinding.ProxyAddress> 에 null이 아니어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-253">It is an error for this to be `true` and <xref:System.ServiceModel.BasicHttpBinding.ProxyAddress> to be non-null.</span></span>

## Examples

<span data-ttu-id="ca425-254">UseDefaultWebProxy에 값을 설정 하는이 예제 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-254">This example sets the value of UseDefaultWebProxy to `false`.</span></span>

```csharp
BasicHttpBinding binding = new BasicHttpBinding();
binding.UseDefaultWebProxy = false;
```

<span data-ttu-id="ca425-255">이 속성의 값은 구성 파일에서 설정할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ca425-255">The value of this property can also be set in the configuration file.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>