<Type Name="OperationContractAttribute" FullName="System.ServiceModel.OperationContractAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e20f293e7e3fba77c9a12b2233e16f5ab92633a5" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56773846" /></Metadata><TypeSignature Language="C#" Value="public sealed class OperationContractAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OperationContractAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.OperationContractAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OperationContractAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class OperationContractAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type OperationContractAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-uwp-10.0;dotnet-plat-ext-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="4508b-101">메서드가 WCF(Windows Communication Foundation) 애플리케이션에서 서비스 계약의 일부인 작업을 정의함을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-101">Indicates that a method defines an operation that is part of a service contract in a Windows Communication Foundation (WCF) application.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4508b-102">메서드에서 서비스 작업을 <xref:System.ServiceModel.OperationContractAttribute> 특성에서 지정한 서비스 계약의 일부로 구현함을 나타내려면 메서드에 <xref:System.ServiceModel.ServiceContractAttribute>를 적용합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-102">Apply the <xref:System.ServiceModel.OperationContractAttribute> to a method to indicate that the method implements a service operation as part of a service contract (specified by a <xref:System.ServiceModel.ServiceContractAttribute> attribute).</span></span>  
  
 <span data-ttu-id="4508b-103">작업의 구조 및 메타데이터로 표현된 값을 제어하려면 <xref:System.ServiceModel.OperationContractAttribute> 속성을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-103">Use the <xref:System.ServiceModel.OperationContractAttribute> properties to control the structure of the operation and the values expressed in metadata:</span></span>  
  
-   <span data-ttu-id="4508b-104"><xref:System.ServiceModel.OperationContractAttribute.Action%2A> 속성은 이 작업을 고유하게 식별하는 동작을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-104">The <xref:System.ServiceModel.OperationContractAttribute.Action%2A> property specifies the action that uniquely identifies this operation.</span></span> <span data-ttu-id="4508b-105">WCF 요청 메시지를를 해당 동작에 따라 메서드에 디스패치합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-105">WCF dispatches request messages to methods based on their action.</span></span>  
  
-   <span data-ttu-id="4508b-106"><xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> 속성은 작업이 구현되어 있거나 Begin/End 메서드 쌍을 사용하여 비동기적으로 호출될 수 있음을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-106">The <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> property indicates that the operation is implemented or can be called asynchronously using a Begin/End method pair.</span></span>  
  
-   <span data-ttu-id="4508b-107"><xref:System.ServiceModel.OperationContractAttribute.HasProtectionLevel%2A> 속성은 <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> 속성이 명시적으로 설정되어 있는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-107">The <xref:System.ServiceModel.OperationContractAttribute.HasProtectionLevel%2A> property indicates whether the <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> property has been explicitly set.</span></span>  
  
-   <span data-ttu-id="4508b-108"><xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> 속성은 작업이 단일 입력 메시지로만 구성되어 있음을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-108">The <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> property indicates that the operation only consists of a single input message.</span></span> <span data-ttu-id="4508b-109">작업에 관련된 출력 메시지가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-109">The operation has no associated output message.</span></span>  
  
-   <span data-ttu-id="4508b-110"><xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> 속성은 이 작업이 세션의 초기 작업이 될 수 있는지 여부를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-110">The <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> property specifies whether this operation can be the initial operation in a session.</span></span>  
  
-   <span data-ttu-id="4508b-111"><xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A> 속성 WCF는 작업이 완료 된 후 현재 세션을 종료 하려고 하는지 여부를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-111">The <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A> property specifies whether WCF attempts to terminate the current session after the operation completes.</span></span>  
  
-   <span data-ttu-id="4508b-112"><xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> 속성은 런타임에 작업에 필요한 메시지 수준 보안을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-112">The <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> property specifies the message-level security that an operation requires at run time.</span></span>  
  
-   <span data-ttu-id="4508b-113"><xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> 속성은 작업에 대한 회신 메시지의 동작을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-113">The <xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> property specifies the action of the reply message for the operation.</span></span>  
  
 <span data-ttu-id="4508b-114"><xref:System.ServiceModel.OperationContractAttribute> 특성은 메서드가 서비스 계약의 작업임을 선언합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-114">The <xref:System.ServiceModel.OperationContractAttribute> attribute declares that a method is an operation in a service contract.</span></span> <span data-ttu-id="4508b-115"><xref:System.ServiceModel.OperationContractAttribute>로 특성이 지정된 메서드만 서비스 작업으로 노출됩니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-115">Only methods attributed with the <xref:System.ServiceModel.OperationContractAttribute> are exposed as service operations.</span></span> <span data-ttu-id="4508b-116"><xref:System.ServiceModel.OperationContractAttribute>로 표시된 메서드가 없는 서비스 계약은 작업을 노출하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-116">A service contract without any methods marked with the <xref:System.ServiceModel.OperationContractAttribute> exposes no operations.</span></span>  
  
 <span data-ttu-id="4508b-117">합니다 <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> 나타내는 속성 쌍 `Begin` \< *methodName*> 및 `End` \< *methodName*> 메서드는 단일 구성 작업이 비동기적으로 구현 (클라이언트 또는 서비스에서 여부).</span><span class="sxs-lookup"><span data-stu-id="4508b-117">The <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> property indicates that a pair of `Begin`\<*methodName*> and `End`\<*methodName*> methods form a single operation implemented asynchronously (whether on the client or the service).</span></span> <span data-ttu-id="4508b-118">작업을 비동기적으로 구현하는 서비스의 기능은 서비스 구현 정보이며 WSDL(웹 서비스 기술 언어)과 같은 메타데이터로 노출되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-118">The ability of a service to implement operations asynchronously is a service implementation detail and is not exposed in metadata (such as Web Services Description Language (WSDL)).</span></span>  
  
 <span data-ttu-id="4508b-119">마찬가지로 클라이언트에서 서비스 메서드 구현 방법과 상관없이 작업을 비동기적으로 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-119">Similarly, clients can choose to invoke operations asynchronously independent of how the service method is implemented.</span></span> <span data-ttu-id="4508b-120">서비스 메서드를 구현하는 데 약간 시간이 걸리지만 클라이언트로 직접 정보를 반환해야 하는 경우 클라이언트에서 서비스 작업을 비동기적으로 호출하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-120">Calling service operations asynchronously in the client is recommended when a service method takes some time but must return information directly to the client.</span></span> <span data-ttu-id="4508b-121">자세한 내용은 <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="4508b-121">For details, see <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A>.</span></span>  
  
 <span data-ttu-id="4508b-122"><xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> 속성은 메서드에서 빈 기본 응답 메시지를 비롯하여 어떠한 값도 반환하지 않음을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-122">The <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> property indicates that a method does not return any value at all, including an empty underlying response message.</span></span> <span data-ttu-id="4508b-123">이 형식의 메서드는 알림 또는 이벤트 스타일 통신에 유용합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-123">This type of method is useful for notifications or event-style communication.</span></span> <span data-ttu-id="4508b-124">이러한 종류의 메서드는 회신 메시지를 반환할 수 없으므로 메서드의 선언에서 `void`를 반환해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-124">Methods of this kind cannot return a reply message so the method's declaration must return `void`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4508b-125">이 특성에서 정보 저장소를 프로그래밍 방식으로 검색할 때 사용 된 <xref:System.ServiceModel.Description.ContractDescription> 리플렉션 대신 클래스.</span><span class="sxs-lookup"><span data-stu-id="4508b-125">When programmatically retrieving the information store in this attribute, use the <xref:System.ServiceModel.Description.ContractDescription> class instead of reflection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4508b-126"><xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> 속성을 `false`(기본값)로 설정하는 경우 `void`를 반환하는 메서드도 기본 메시지 수준의 양방향 메서드가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-126">If the <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> property is set to `false`, (the default), even methods that return `void` are two-way methods at the underlying message level.</span></span> <span data-ttu-id="4508b-127">이 경우 인프라에서 빈 메시지를 만들어 보내 메서드가 반환되었음을 호출자에게 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-127">In this case, the infrastructure creates and sends an empty message to indicate to the caller that the method has returned.</span></span> <span data-ttu-id="4508b-128">이 방법을 사용하면 애플리케이션 및 인프라에서 SOAP 오류와 같은 오류 정보를 다시 클라이언트로 보낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-128">Using this approach enables the application and the infrastructure to send error information (such as a SOAP fault) back to the client.</span></span> <span data-ttu-id="4508b-129">회신 메시지를 만들어 디스패치하지 않도록 하려면 유일한 방법은 <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A>를 `true`로 설정하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-129">Setting <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> to `true` is the only way to prevent the creation and dispatch of a reply message.</span></span> <span data-ttu-id="4508b-130">자세한 내용은 [단방향 서비스](~/docs/framework/wcf/feature-details/one-way-services.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-130">For more information, see [One-Way Services](~/docs/framework/wcf/feature-details/one-way-services.md).</span></span>  
  
 <span data-ttu-id="4508b-131"><xref:System.ServiceModel.OperationContractAttribute.Action%2A> 및 <xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> 속성을 사용하여 SOAP 메시지의 기본 동작을 수정할 수 있을 뿐만 아니라 직접 메시지 프로그래밍을 위해 동작을 추가할 수 없도록 하거나 인식할 수 없는 메시지의 처리기를 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-131">The <xref:System.ServiceModel.OperationContractAttribute.Action%2A> and <xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> properties can be used not only to modify the default action of SOAP messages but also to create handlers for unrecognized messages or to disable adding actions for direct message programming.</span></span> <span data-ttu-id="4508b-132">클라이언트가 다른 작업 이전에 특정 서비스 작업을 호출할 수 없도록 하려면 <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> 속성을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-132">Use the <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> property to prevent clients from calling a particular service operation prior to other operations.</span></span> <span data-ttu-id="4508b-133">사용 하 여는 <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A> 속성 WCF 클라이언트는 특정 서비스 작업 호출 후 채널을 닫아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-133">Use the <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A> property to have WCF close the channel after clients call a particular service operation.</span></span> <span data-ttu-id="4508b-134">자세한 내용은 [를 사용 하 여 세션](~/docs/framework/wcf/using-sessions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-134">For more information, see [Using Sessions](~/docs/framework/wcf/using-sessions.md).</span></span>  
  
 <span data-ttu-id="4508b-135"><xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> 속성을 사용하면 작업 계약에서 작업 메시지에 대해 서명, 암호화 또는 둘 모두를 수행할지 여부를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-135">The <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> property enables you to specify on the operation contract whether the operation messages are signed, encrypted, or signed and encrypted.</span></span> <span data-ttu-id="4508b-136">바인딩이 계약에 필요한 보안 수준을 제공할 수 없는 경우 런타임에 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-136">If a binding cannot provide the security level required by the contract, an exception is thrown at run time.</span></span> <span data-ttu-id="4508b-137">자세한 내용은 <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> 하 고 [이해 보호 수준을](~/docs/framework/wcf/understanding-protection-level.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-137">For more information, see <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> and [Understanding Protection Level](~/docs/framework/wcf/understanding-protection-level.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4508b-138">다음 코드 예제에서는 하나의 작업이 있는 간단한 서비스 계약을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-138">The following code example shows a simple service contract with one operation.</span></span>  
  
 [!code-csharp[OperationContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontractattribute/cs/services.cs#1)]
 [!code-vb[OperationContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontractattribute/vb/services.vb#1)]  
  
 <span data-ttu-id="4508b-139">다음은 세 가지 작업을 지정하는 암시적 서비스 계약을 구현하는 서비스에 대한 예제입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-139">The following example is a service that implements an implicit service contract that specifies three operations.</span></span> <span data-ttu-id="4508b-140">두 작업은 반환 값에 관계없이 기본 응답 메시지를 호출자에게 반환하는 양방향 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-140">Two of the operations are two-way operations, which return underlying response messages to the caller no matter what the return value is.</span></span> <span data-ttu-id="4508b-141">세 번째 작업은 호출, 기본 인바운드 메시지를 수신하지만 기본 응답 메시지를 반환하지는 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-141">The third operation receives a call, an underlying inbound message, but returns no underlying response message.</span></span>  
  
```csharp  
[ServiceContractAttribute]  
public class OneAndTwoWay  
{  
  // The client waits until a response message appears.  
  [OperationContractAttribute]  
  public int MethodOne (int x, out int y)  
  {  
    y = 34;  
    return 0;  
  }  
  
  // The client waits until an empty response message appears.  
  [OperationContractAttribute]  
  public void MethodTwo (int x)  
  {  
    return;  
  }  
  
  // The client returns as soon as an outbound message  
  // is dispatched to the service; no response  
  // message is generated or sent from the service.  
  [OperationContractAttribute(IsOneWay=true)]  
  public void MethodThree (int x)  
  {  
    return;  
  }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OperationContractAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.OperationContractAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OperationContractAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4508b-142"><see cref="T:System.ServiceModel.OperationContractAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-142">Initializes a new instance of the <see cref="T:System.ServiceModel.OperationContractAttribute" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Action">
      <MemberSignature Language="C#" Value="public string Action { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Action" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.Action" />
      <MemberSignature Language="VB.NET" Value="Public Property Action As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Action { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Action : string with get, set" Usage="System.ServiceModel.OperationContractAttribute.Action" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4508b-143">요청 메시지의 WS-Addressing 동작을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-143">Gets or sets the WS-Addressing action of the request message.</span></span></summary>
        <value><span data-ttu-id="4508b-144">WS-Addressing 동작 헤더를 생성하는 데 사용할 동작입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-144">The action to use in generating the WS-Addressing Action header.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4508b-145">사용 된 <xref:System.ServiceModel.OperationContractAttribute.Action%2A> 메서드의 동작을 제어 하려면 속성의 메시지를 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-145">Use the <xref:System.ServiceModel.OperationContractAttribute.Action%2A> property to control the action of the method's input message.</span></span> <span data-ttu-id="4508b-146">WCF는 적절 한 메서드는 들어오는 메시지를 발송 하는 데이 작업을 사용 하므로 계약 작업 내에서 사용 되는 메시지에 고유한 동작이 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-146">Because WCF uses this action to dispatch an incoming message to the appropriate method, messages used within a contract operation must have unique actions.</span></span> <span data-ttu-id="4508b-147">기본 작업 값은 계약 네임 스페이스의 조합 (기본값은 "http://tempuri.org/"), 계약 이름 (인터페이스 이름 또는 클래스 이름을 사용 하는 명시적 서비스 인터페이스가 없는 경우), 작업 이름 및 추가 문자열 ("Response") 하는 경우 메시지 상관 관계가 지정 된 응답입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-147">The default action value is a combination of the contract namespace (the default value is "http://tempuri.org/"), the contract name (interface name or the class name, if no explicit service interface is used), the operation name, and an additional string ("Response") if the message is a correlated response.</span></span> <span data-ttu-id="4508b-148">이 기본값을 <xref:System.ServiceModel.OperationContractAttribute.Action%2A> 속성으로 덮어쓸 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-148">You can override this default with the <xref:System.ServiceModel.OperationContractAttribute.Action%2A> property.</span></span>  
  
 <span data-ttu-id="4508b-149">서비스 작업이 해당 서비스에서 받은 모든 메시지를 처리하지만 서비스 작업으로 보낼 수 없음을 나타내려면 "\*"(별표) 값을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-149">To indicate that a service operation handles all messages that the service receives but cannot be directed to a service operation, specify the value "\*" (an asterisk).</span></span> <span data-ttu-id="4508b-150">일치하지 않는 메시지 처리기라고 하는 이 작업 형식에는 다음 메서드 서명 중 하나가 있어야 합니다. 그렇지 않으면 <xref:System.InvalidOperationException>이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-150">This type of operation, called an unmatched message handler, must have one of following method signatures, or a <xref:System.InvalidOperationException> is thrown:</span></span>  
  
-   <span data-ttu-id="4508b-151">서비스 작업은 <xref:System.ServiceModel.Channels.Message> 개체만 가져오고 <xref:System.ServiceModel.Channels.Message> 개체를 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-151">The service operation can take only a <xref:System.ServiceModel.Channels.Message> object and return a <xref:System.ServiceModel.Channels.Message> object.</span></span>  
  
-   <span data-ttu-id="4508b-152">서비스 작업은 <xref:System.ServiceModel.Channels.Message> 개체만 가져오고 아무 것도 반환할 수 없습니다. 즉 `void`를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-152">The service operation can take only a <xref:System.ServiceModel.Channels.Message> object and return nothing (that is, return `void`).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4508b-153">서비스 계약에는 <xref:System.ServiceModel.OperationContractAttribute.Action%2A> 속성이 "\*"로 설정된 서비스 작업만 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-153">A service contract can have only one service operation with the <xref:System.ServiceModel.OperationContractAttribute.Action%2A> property set to "\*".</span></span> <span data-ttu-id="4508b-154">서비스 클래스가 구현 하는 동일한 수신 대기 Uri에서 호스팅되는 서비스 계약의 모든 그룹에는 여러 개의 서비스 작업이 있을 수 있습니다는 <xref:System.ServiceModel.OperationContractAttribute.Action%2A> 속성이로 설정 "\*" 때 합니다 <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> 속성이 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-154">Any group of service contracts hosted at the same listenUri that a service class implements can have many service operations with the <xref:System.ServiceModel.OperationContractAttribute.Action%2A> property set to "\*" when the <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> property is set to `false`.</span></span> <span data-ttu-id="4508b-155">그러나 해당 서비스 작업 중 하나만 있을 수 있습니다 합니다 <xref:System.ServiceModel.OperationContractAttribute.Action%2A> 속성으로 설정 "\*" 및 <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> 속성이 true로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-155">However, only one of those service operations can have the <xref:System.ServiceModel.OperationContractAttribute.Action%2A> property set to "\*" and the <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> property set to true.</span></span> <span data-ttu-id="4508b-156">자세한 내용은 <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4508b-156">For more details, see <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4508b-157">다음은 <xref:System.ServiceModel.OperationContractAttribute.Action%2A> 및 <xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> 속성을 사용하여 입력 메시지 및 출력(또는 회신) 메시지 모두의 SOAP 동작을 명시적으로 제어하고 <xref:System.ServiceModel.OperationContractAttribute.Name%2A> 속성을 사용하여 메타데이터로 작업 이름을 제어하는 서비스에 대한 예제입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-157">The following example is a service that uses the <xref:System.ServiceModel.OperationContractAttribute.Action%2A> and <xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> properties to explicitly control the SOAP actions of both the input and output (or reply) messages, and the <xref:System.ServiceModel.OperationContractAttribute.Name%2A> property to control the name of the operation in metadata.</span></span> <span data-ttu-id="4508b-158">또한 애플리케이션에서는 <xref:System.ServiceModel.OperationContractAttribute.Action%2A> 값으로 "\*"를 사용하여 인식할 수 없는 메시지를 처리하는 메서드를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-158">Finally, the application also uses an <xref:System.ServiceModel.OperationContractAttribute.Action%2A> value of "\*" to indicate a method that handles unrecognized messages.</span></span>  
  
 [!code-csharp[OperationContractAttribute_Properties#1](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontractattribute_properties/cs/services.cs#1)]
 [!code-vb[OperationContractAttribute_Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontractattribute_properties/vb/services.vb#1)]  
  
 <span data-ttu-id="4508b-159">이 계약을 구현하는 서비스는 다음 예제와 비슷한 메시지를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-159">A service that implements this contract sends messages that look like the following example:</span></span>  
  
 [!code-csharp[OperationContractAttribute_Properties#2](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontractattribute_properties/cs/services.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4508b-160">값이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="4508b-160">The value is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsyncPattern">
      <MemberSignature Language="C#" Value="public bool AsyncPattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AsyncPattern" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.AsyncPattern" />
      <MemberSignature Language="VB.NET" Value="Public Property AsyncPattern As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AsyncPattern { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AsyncPattern : bool with get, set" Usage="System.ServiceModel.OperationContractAttribute.AsyncPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4508b-161">서비스 계약의 <see langword="Begin" />&lt;*methodName*&gt; 및 <see langword="End" />&lt;*methodName*&gt; 메서드 쌍을 사용하여 작업이 비동기적으로 구현됨을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-161">Indicates that an operation is implemented asynchronously using a <see langword="Begin" />&lt;*methodName*&gt; and <see langword="End" />&lt;*methodName*&gt; method pair in a service contract.</span></span></summary>
        <value><span data-ttu-id="4508b-162"><see langword="true" /> 경우는 <see langword="Begin" /> &lt; *methodName*&gt;메서드는 일치 하는 <see langword="End" /> &lt; *methodName* &gt; 메서드에서 처리 될 수 있습니다는 서비스 인터페이스;에서 비동기 메서드 쌍으로 구현 되는 작업으로 인프라 그렇지 않으면 <see langword="false" />합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-162"><see langword="true" /> if the <see langword="Begin" />&lt;*methodName*&gt;method is matched by an <see langword="End" />&lt;*methodName*&gt; method and can be treated by the infrastructure as an operation that is implemented as an asynchronous method pair on the service interface; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="4508b-163">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-163">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4508b-164">서버, 클라이언트 또는 둘 모두에서 비동기적으로 호출할 수 있는 서비스 작업을 작성하려면 <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> 속성을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-164">Use the <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> property to build service operations that can be called asynchronously on the server, the client, or both.</span></span> <span data-ttu-id="4508b-165"><xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> 속성은 `Begin` 메서드에 .NET Framework 비동기 메서드 디자인 패턴과 일치하는 `End` 메서드가 있음을 런타임에 알립니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-165">The <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> property informs the runtime that a `Begin` method has a matched `End` method that conforms to the .NET Framework asynchronous method design pattern.</span></span> <span data-ttu-id="4508b-166">서비스 작업을 구현하는 서버 비동기 메서드를 작성하면 서비스의 클라이언트에는 영향을 주지 않고 서버 확장성 및 성능이 향상됩니다. 이 방식은 비동기로 수행할 수 있는 긴 작업을 수행한 후 서비스 작업에서 클라이언트에 결과를 반환해야 하는 경우에 권장됩니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-166">Building server asynchronous methods that implement a service operation increases server scalability and performance without affecting the clients of the service, and is recommended when a service operation must return something to the client after performing a lengthy operation that can be performed asynchronously.</span></span>  
  
 <span data-ttu-id="4508b-167">서버의 비동기 메서드 쌍은 작업의 기본 WSDL(Web Services Description Language) 설명에 영향을 주지 않는 구현 정보이므로 클라이언트는 영향을 받지 않은 상태로 유지됩니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-167">Clients remain unaffected because the asynchronous method pair on the server is an implementation detail that does not affect the underlying Web Services Description Language (WSDL) description of the operation.</span></span> <span data-ttu-id="4508b-168">이러한 메서드는 단일 작업으로 클라이언트에 표시 `<input>` 및 관련 된 `<output>` 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-168">Such methods appear to clients as a single operation with `<input>` and correlated `<output>` messages.</span></span> <span data-ttu-id="4508b-169">WCF는 자동으로 인바운드 메시지를 라우트하는 `Begin` \< *methodName*> 메서드 결과 라우팅합니다 합니다 `End` \< *methodName*> 호출 아웃 바운드 메시지.</span><span class="sxs-lookup"><span data-stu-id="4508b-169">WCF automatically routes inbound messages to the `Begin`\<*methodName*> method and routes the results of the `End`\<*methodName*> call to the outbound message.</span></span> <span data-ttu-id="4508b-170">그러므로 클라이언트 채널에서 메서드 쌍을 단일 비동기 작업이나 비동기 작업 쌍으로 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-170">Client channels, therefore, can represent the method pair as either a single synchronous operation or as an asynchronous operation pair.</span></span> <span data-ttu-id="4508b-171">어떠한 방식으로든 클라이언트 표시는 서버에서 비동기 구현에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-171">In no case does the client representation affect the asynchronous implementation on the server in any way.</span></span>  
  
 <span data-ttu-id="4508b-172">클라이언트 계약은 <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> 속성을 사용하여 클라이언트에서 작업을 비동기적으로 호출하는 데 사용할 수 있는 비동기 메서드 쌍을 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-172">Client contracts can use the <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> property to indicate an asynchronous method pair that the client can use to invoke the operation asynchronously.</span></span> <span data-ttu-id="4508b-173">일반적으로 클라이언트 애플리케이션을 사용 합니다 [ServiceModel Metadata 유틸리티 도구 (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) 도구와 `/async` 생성 하는 옵션을 `Begin`\<*methodName*&gt; 및 `End`\<*methodName*&gt; 메서드 쌍을 클라이언트는 작업을 비동기적으로 호출을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-173">Typically, client applications use the [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) tool and the `/async` option to generate a `Begin`\<*methodName*> and `End`\<*methodName*> method pair that the client can use to invoke the operation asynchronously.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4508b-174">서비스 작업에 비동기 버전과 동기 버전이 모두 있는 경우 서비스의 기본 동작은 동기 버전을 호출하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-174">If a service operation has both an asynchronous and a synchronous version, the default behavior on the service is to invoke the synchronous version.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4508b-175">다음 코드 예제에서는 `Add`의 동기 버전과 비동기 버전이 모두 포함된 서비스 계약에 대한 클라이언트 채널을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-175">The following code example shows a client channel to a service contract that includes both a synchronous version of `Add` and an asynchronous version.</span></span> <span data-ttu-id="4508b-176">클라이언트에서 계약 인터페이스를 사용하는 경우 `BeginAdd` 작업과 `Add` 작업 모두 동기적이거나 비동기적일 수 있는 서버에서 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-176">If the contract interface is used on the client, both the `BeginAdd` and the `Add` operation invoke a method on the server that may or may not be synchronous.</span></span> <span data-ttu-id="4508b-177">서비스를 구현하는 데 계약을 사용하는 경우 기본값은 동기 메서드로 디스패치되는 들어오는 요청입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-177">If the contract is used to implement the service, the default is that incoming requests are dispatched to the synchronous method.</span></span>  
  
```csharp  
[ServiceContract]  
public interface IAddTwoNumbers  
{  
    // If the asynchronous method pair  
    // appears on the client channel, the client can call   
    // them asynchronously to prevent blocking.  
    [OperationContract (AsyncPattern=true)]  
    IAsyncResult BeginAdd(int a, int b, AsyncCallback cb, AsyncState s);  
  
    [OperationContract]  
    int EndAdd(IAsyncResult r);  
  
    // This is a synchronous version of the BeginAdd/EndAdd pair.  
    // It appears in the client channel code by default.   
    [OperationContract]  
    int Add(int a, int b);  
   }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasProtectionLevel">
      <MemberSignature Language="C#" Value="public bool HasProtectionLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.HasProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasProtectionLevel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasProtectionLevel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasProtectionLevel : bool" Usage="System.ServiceModel.OperationContractAttribute.HasProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4508b-178">이 작업의 메시지에 대해 암호화, 서명 또는 둘 모두를 수행해야 할지 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-178">Gets a value that indicates whether the messages for this operation must be encrypted, signed, or both.</span></span></summary>
        <value><span data-ttu-id="4508b-179"><see langword="true" /> 속성이 <see cref="P:System.ServiceModel.OperationContractAttribute.ProtectionLevel" /> 이외의 값으로 설정되면 <see cref="F:System.Net.Security.ProtectionLevel.None" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-179"><see langword="true" /> if the <see cref="P:System.ServiceModel.OperationContractAttribute.ProtectionLevel" /> property is set to a value other than <see cref="F:System.Net.Security.ProtectionLevel.None" />; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="4508b-180">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-180">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4508b-181">이 작업의 메시지에 특정 보호 수준이 필요한지 여부를 결정하려면 <xref:System.ServiceModel.OperationContractAttribute.HasProtectionLevel%2A> 속성을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-181">Use the <xref:System.ServiceModel.OperationContractAttribute.HasProtectionLevel%2A> property to determine whether a specific protection level is required by the messages of this operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitiating">
      <MemberSignature Language="C#" Value="public bool IsInitiating { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitiating" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.IsInitiating" />
      <MemberSignature Language="VB.NET" Value="Public Property IsInitiating As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitiating { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsInitiating : bool with get, set" Usage="System.ServiceModel.OperationContractAttribute.IsInitiating" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4508b-182">메서드가 서버의 세션(있는 경우)을 시작할 수 있는 작업을 구현할지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-182">Gets or sets a value that indicates whether the method implements an operation that can initiate a session on the server (if such a session exists).</span></span></summary>
        <value><span data-ttu-id="4508b-183">작업에서 서버의 세션을 시작할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-183"><see langword="true" /> if the operation is permitted to initiate a session on the server, otherwise, <see langword="false" />.</span></span> <span data-ttu-id="4508b-184">기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-184">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4508b-185"><xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> 속성은 세션을 만들 때 작업이 첫 번째로 호출되는 작업이 될 수 있는지 여부를 제어합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-185">The <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> property controls whether an operation can be the first operation called when a session is created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4508b-186"><xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A?displayProperty=nameWithType>의 값은 <xref:System.ServiceModel.SessionMode.Allowed> 또는 <xref:System.ServiceModel.SessionMode.Required>여야 하고, <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> 속성이 제대로 작동하려면 사용되는 바인딩에서 세션을 요구하거나 허용해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-186">The value of <xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A?displayProperty=nameWithType> must be either <xref:System.ServiceModel.SessionMode.Allowed> or <xref:System.ServiceModel.SessionMode.Required> and the binding used must require or allow sessions for the <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> property to work properly.</span></span>  
  
 <span data-ttu-id="4508b-187">기본값은 `true`로, 작업이 채널에서 첫 번째로 호출되는 작업이 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-187">The default is `true`, which means that an operation can be the first one called on a channel.</span></span> <span data-ttu-id="4508b-188">이후에는 시작 메서드를 호출해도 메서드를 호출하는 것 외에는 아무런 효과가 없으며,</span><span class="sxs-lookup"><span data-stu-id="4508b-188">Subsequent calls to the initiating method have no effect, other than to call the method.</span></span> <span data-ttu-id="4508b-189">다른 세션이 만들어지지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-189">No other sessions are created.</span></span> <span data-ttu-id="4508b-190">계약에서 세션을 사용하지 않는 경우 <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A>을 `false`로 설정하면 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-190">If the contract does not make use of a session, setting <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> to `false` is ignored.</span></span>  
  
 <span data-ttu-id="4508b-191">일반적으로 <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A>을 `false`로 설정하여 클라이언트에서 이 메서드를 호출하기 전에 서비스의 다른 메서드를 호출하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-191">Typically, you set <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> to `false` to force clients to call another method on the service before they can invoke this one.</span></span> <span data-ttu-id="4508b-192">예를 들어 서비스에 주문 ID 번호에 종속되는 일련의 작업이 있는 경우 <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> 서비스 작업에 대해 `true`을 `GetOrderId`로 설정하고 나머지 모든 서비스 작업을 `false`로 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-192">For example, if your service has a series of operations that depend on an order ID number, you can set <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> to `true` for a `GetOrderId` service operation and set all remaining service operations to `false`.</span></span> <span data-ttu-id="4508b-193">이렇게 설정하면 각 새 클라이언트에서는 서비스가 노출하는 다른 메서드를 사용하기 전에 주문 ID를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-193">This ensures that each new client obtains an order ID prior to using the other methods exposed by the service.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4508b-194"><xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A>과 <xref:System.ServiceModel.OperationContractAttribute.Action%2A> 속성 사이의 상호 작용이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-194">There is an interaction between <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> and the <xref:System.ServiceModel.OperationContractAttribute.Action%2A> property.</span></span> <span data-ttu-id="4508b-195">서비스 계약에는 <xref:System.ServiceModel.OperationContractAttribute.Action%2A> 속성이 "\*"로 설정된 서비스 작업만 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-195">A service contract can have only one service operation with the <xref:System.ServiceModel.OperationContractAttribute.Action%2A> property set to "\*".</span></span> <span data-ttu-id="4508b-196">동일한 수신 대기 서비스 클래스가 구현 하는 URI에서 호스팅되는 서비스 계약 그룹에 여러 개의 서비스 작업이 있을 수 있습니다는 <xref:System.ServiceModel.OperationContractAttribute.Action%2A> 속성이로 설정 "\*" 때 합니다 <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> 속성이 `false`.</span><span class="sxs-lookup"><span data-stu-id="4508b-196">Any group of service contracts hosted at the same listen URI that a service class implements can have many service operations with the <xref:System.ServiceModel.OperationContractAttribute.Action%2A> property set to "\*" when the <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> property is set to `false`.</span></span> <span data-ttu-id="4508b-197">그러나 해당 서비스 메서드 중 하나만 있을 수 있습니다 합니다 <xref:System.ServiceModel.OperationContractAttribute.Action%2A> 속성으로 설정 "\*" 및 <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> 속성이로 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-197">However, only one of those service methods can have the <xref:System.ServiceModel.OperationContractAttribute.Action%2A> property set to "\*" and the <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> property set to `true`.</span></span>  
  
 <span data-ttu-id="4508b-198">서비스에서 초기화 작업이 아닌 작업에 대한 메시지를 수신하면 ActionNotSupported SOAP 오류를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-198">If a service receives a message for a non-initiating operation, the service returns an ActionNotSupported SOAP fault.</span></span> <span data-ttu-id="4508b-199">클라이언트에는 이 오류가 <xref:System.ServiceModel.FaultException>으로 표시됩니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-199">The client experiences this as an <xref:System.ServiceModel.FaultException>.</span></span> <span data-ttu-id="4508b-200">클라이언트에서 초기화 작업이 아닌 작업을 먼저 호출하면 런타임에 <xref:System.InvalidOperationException?displayProperty=nameWithType>을 throw합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-200">If a client calls a non-initiating operation first, the client runtime throws an <xref:System.InvalidOperationException?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="4508b-201">자세한 내용은 [를 사용 하 여 세션](~/docs/framework/wcf/using-sessions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-201">For more information, see [Using Sessions](~/docs/framework/wcf/using-sessions.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4508b-202">다음은 세 가지 메서드를 지정하는 서비스 계약을 구현하는 서비스에 대한 예제입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-202">The following example is a service that implements a service contract that specifies three methods.</span></span> <span data-ttu-id="4508b-203">이 서비스에는 세션이 필요합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-203">The service requires a session.</span></span> <span data-ttu-id="4508b-204">호출자의 첫 번째 호출이 `MethodOne` 이외의 작업에 대한 호출이면 채널이 거부되고 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-204">If a caller's first call is to any operation other than `MethodOne`, the channel is refused and an exception is thrown.</span></span> <span data-ttu-id="4508b-205">호출자가 `MethodOne`을 호출하여 세션을 초기화하면 해당 호출자가 `MethodThree`를 호출하여 언제든지 통신 세션을 종료할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-205">When a caller initiates a session by calling `MethodOne`, that caller can terminate the communication session at any time by calling `MethodThree`.</span></span> <span data-ttu-id="4508b-206">`MethodTwo`는 세션 중에 여러 번 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-206">`MethodTwo` can be called any number of times during a session.</span></span>  
  
```csharp  
[ServiceContract(SessionMode=SessionMode.Required)]  
public class InitializeAndTerminateService  
{  
  [OperationContract(  
    IsOneWay=true,  
    IsInitiating=true,  
    IsTerminating=false  
  )]  
  public void MethodOne()  
  {  
    return;  
  }  
  
  [OperationContract(  
    IsInitiating=false,  
    IsTerminating=false  
  )]  
  public int MethodTwo(int x, out int y)  
  {  
    y = 34;  
    return 0;  
  }  
  
  [OperationContract(  
    IsOneWay=true,  
    IsInitiating=false,  
    IsTerminating=true  
  )]  
  public void MethodThree()  
  {  
    return;  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOneWay">
      <MemberSignature Language="C#" Value="public bool IsOneWay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOneWay" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.IsOneWay" />
      <MemberSignature Language="VB.NET" Value="Public Property IsOneWay As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOneWay { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsOneWay : bool with get, set" Usage="System.ServiceModel.OperationContractAttribute.IsOneWay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4508b-207">작업이 회신 메시지를 반환할지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-207">Gets or sets a value that indicates whether an operation returns a reply message.</span></span></summary>
        <value><span data-ttu-id="4508b-208">이 메서드가 요청 메시지를 수신하고 회신 메시지를 반환하지 않으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-208"><see langword="true" /> if this method receives a request message and returns no reply message; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="4508b-209">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-209">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4508b-210">작업에서 회신 메시지를 반환하지 않음을 나타내려면 <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> 속성을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-210">Use the <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> property to indicate that an operation does not return a reply message.</span></span> <span data-ttu-id="4508b-211">이 작업 형식은 알림 또는 이벤트 스타일 통신, 특히 양방향 통신에 유용합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-211">This type of operation is useful for notifications or event-style communication, especially in two-way communication.</span></span> <span data-ttu-id="4508b-212">단방향 작업의 호출자가 기본 응답 메시지를 기다리지 않고 요청 메시지 처리 오류를 직접 검색할 수 있는 방법은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-212">Without waiting for an underlying response message, callers of one-way operations have no direct way to detect a failure in processing the request message.</span></span> <span data-ttu-id="4508b-213">신뢰할 수 있는 채널을 사용하는 서비스 애플리케이션 및 단방향 작업으로 채널 수준에서 메시지 배달 오류를 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-213">(Service applications that use reliable channels and one-way operations can detect a message delivery failure at the channel level.</span></span> <span data-ttu-id="4508b-214">자세한 내용은 참조 하세요 [신뢰할 수 있는 세션 개요](~/docs/framework/wcf/feature-details/reliable-sessions-overview.md).)</span><span class="sxs-lookup"><span data-stu-id="4508b-214">For details, see [Reliable Sessions Overview](~/docs/framework/wcf/feature-details/reliable-sessions-overview.md).)</span></span>  
  
 <span data-ttu-id="4508b-215">클라이언트와 서버가 서로 독립적으로 통신하는 이중(양방향) 서비스 기반 애플리케이션에서 클라이언트 채널은 해당 메서드에 <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> 속성을 사용하여 서비스에서 클라이언트에 대하여 클라이언트가 이벤트로 처리할 수 있는 단방향 호출을 클라이언트에 대해 만들 수 있음을 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-215">In duplex (or two-way) service-oriented applications in which the client and server communicate with each other independently, a client channel can use the <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> property on its methods to indicate that the service can make one-way calls to the client that the client can treat as events.</span></span> <span data-ttu-id="4508b-216">서비스는 응답 메시지를 예상하지 않으므로 반환 호출이나 메시지가 생성되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-216">No return call or message is generated because the service does not expect any response message.</span></span>  
  
 <span data-ttu-id="4508b-217"><xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> 속성을 `false`(기본값)로 설정하는 경우 `void`를 반환하는 메서드도 회신 메시지를 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-217">If the <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> property is set to `false` (the default), even methods that return `void` result in a reply message.</span></span> <span data-ttu-id="4508b-218">이 경우 인프라에서 빈 메시지를 만들어 보내 메서드가 반환되었음을 호출자에게 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-218">In this case, the infrastructure creates and sends an empty message to indicate to the caller that the method has returned.</span></span> <span data-ttu-id="4508b-219">이 방법을 사용하면 인프라에서 SOAP 오류를 다시 클라이언트로 보낼 수 있습니다. 응답 메시지를 만들어 디스패치하는 작업을 취소하려면 유일한 방법은 <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A>를 `true`로 설정하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-219">(Using this approach enables the infrastructure to send SOAP faults back to the client.) Setting <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> to `true` is the only way to cancel the creation and dispatch of a response message.</span></span>  
  
 <span data-ttu-id="4508b-220">단방향 메서드는 값을 반환하지 않아야 하거나 `ref` 또는 `out` 매개 변수가 있어야 합니다. 그렇지 않으면 <xref:System.InvalidOperationException?displayProperty=nameWithType> 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-220">One-way methods must not return a value or have `ref` or `out` parameters; otherwise a <xref:System.InvalidOperationException?displayProperty=nameWithType> exception is thrown.</span></span>  
  
 <span data-ttu-id="4508b-221">작업을 단방향 작업이라고 지정하면 응답 메시지가 없다는 것만 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-221">Specifying that an operation is a one-way operation means only that there is no response message.</span></span> <span data-ttu-id="4508b-222">연결할 수 없거나, 아웃바운드 메시지가 매우 크거나, 서비스에서 인바운드 정보를 충분히 빠르게 읽을 수 없는 경우에는 차단할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-222">It is possible to block if a connection cannot be made, or the outbound message is very large, or if the service cannot read inbound information fast enough.</span></span> <span data-ttu-id="4508b-223">클라이언트에서 비블로킹 호출을 요구하는 경우 <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> 작업을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-223">If a client requires a non-blocking call, generate <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> operations.</span></span> <span data-ttu-id="4508b-224">자세한 내용은 [단방향 서비스](~/docs/framework/wcf/feature-details/one-way-services.md) 하 고 [WCF 클라이언트를 사용 하 여 액세스 서비스](~/docs/framework/wcf/feature-details/accessing-services-using-a-client.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-224">For more information, see [One-Way Services](~/docs/framework/wcf/feature-details/one-way-services.md) and [Accessing Services Using a WCF Client](~/docs/framework/wcf/feature-details/accessing-services-using-a-client.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4508b-225">다음은 세 가지 작업을 지정하는 서비스 계약을 구현하는 서비스에 대한 예제입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-225">The following example is a service that implements a service contract that specifies three operations.</span></span> <span data-ttu-id="4508b-226">두 메서드는 반환 값에 관계없이 기본 응답 메시지를 호출자에게 반환하는 양방향 작업을 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-226">Two of the methods implement two-way operations, which return underlying response messages to the caller no matter what the return value is.</span></span> <span data-ttu-id="4508b-227">세 번째 메서드는 호출(기본 인바운드 메시지)을 수신하지만 기본 응답 메시지를 반환하지는 않는 작업을 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-227">The third method implements an operation that receives a call (an underlying inbound message) but returns no underlying response message.</span></span>  
  
```csharp  
[ServiceContract]  
public class OneAndTwoWay  
{  
  // The client waits until a response message appears.  
  [OperationContract]  
  public int MethodOne (int x, out int y)  
  {  
    y = 34;  
    return 0;  
  }  
  
  // The client waits until an empty response message appears.  
  [OperationContract]  
  public void MethodTwo (int x)  
  {  
    return;  
  }  
  
  // The client returns as soon as an outbound message  
  // is queued for dispatch to the service; no response  
  // message is generated or sent.  
  [OperationContract(IsOneWay=true)]  
  public void MethodThree (int x)  
  {  
    return;  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTerminating">
      <MemberSignature Language="C#" Value="public bool IsTerminating { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTerminating" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.IsTerminating" />
      <MemberSignature Language="VB.NET" Value="Public Property IsTerminating As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTerminating { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsTerminating : bool with get, set" Usage="System.ServiceModel.OperationContractAttribute.IsTerminating" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4508b-228">회신 메시지(있는 경우)를 보낸 후 서비스 작업의 결과로 서버에서 세션을 종료할지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-228">Gets or sets a value that indicates whether the service operation causes the server to close the session after the reply message, if any, is sent.</span></span></summary>
        <value><span data-ttu-id="4508b-229">작업의 결과로 서버에서 세션을 종료하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-229"><see langword="true" /> if the operation causes the server to close the session, otherwise, <see langword="false" />.</span></span> <span data-ttu-id="4508b-230">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-230">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4508b-231">서비스 작업을 호출하면 통신 세션이 종료됨을 나타내려면 <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A> 속성을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-231">Use the <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A> property to indicate that calling a service operation terminates the communication session.</span></span>  
  
 <span data-ttu-id="4508b-232">클라이언트 애플리케이션에서 값이 <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A> 로 `true` 하도록 WCF에 하면 회신이 도착 한 후에 채널을 닫도록 지시 합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-232">In a client application, a value of <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A> set to `true` instructs WCF to close the channel after the reply arrives.</span></span>  
  
 <span data-ttu-id="4508b-233">서비스에서는 클라이언트가 해당 기간 내에 채널을 닫지 않으면 타이머가 설정되고 채널이 중단됩니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-233">In a service, a timer is set and the channel aborts if the client does not close the channel within that period.</span></span>  
  
 <span data-ttu-id="4508b-234">세션을 사용 하 여이 속성을 사용 하는 방법에 대 한 자세한 내용은 참조 하세요. [를 사용 하 여 세션](~/docs/framework/wcf/using-sessions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-234">For more information about using this property with sessions, see [Using Sessions](~/docs/framework/wcf/using-sessions.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4508b-235">호출자가 <xref:System.ServiceModel.OperationContext.OperationCompleted?displayProperty=nameWithType> 작업에 대한 <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A?displayProperty=nameWithType> 이벤트를 수신 대기하고 있는 경우 응답을 수신할 때 차단할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-235">If a caller is listening for the <xref:System.ServiceModel.OperationContext.OperationCompleted?displayProperty=nameWithType> event for an <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A?displayProperty=nameWithType> operation, it is possible to block when the response is received.</span></span> <span data-ttu-id="4508b-236">이 차단 작업을 처리하는 올바른 방법은 <xref:System.ServiceModel.OperationContext.OperationCompleted>가 발생하면 다른 스레드에서 작업을 예약한 다음 해당 이벤트 처리기에서 이 이벤트를 즉시 반환하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-236">The proper way to handle this is to schedule work on another thread when <xref:System.ServiceModel.OperationContext.OperationCompleted> is raised and then immediately return from that event handler.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4508b-237">다음은 세 가지 작업을 지정하는 서비스 계약을 구현하는 서비스에 대한 예제입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-237">The following example is a service that implements a service contract that specifies three operations.</span></span> <span data-ttu-id="4508b-238">이 서비스에는 상태 저장 연결이 필요합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-238">The service requires a stateful connection.</span></span> <span data-ttu-id="4508b-239">호출자의 첫 번째 호출이 `MethodOne` 이외의 작업에 대한 호출이면 채널이 거부되고 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-239">If a caller's first call is to any operation other than `MethodOne`, the channel is refused and an exception is thrown.</span></span> <span data-ttu-id="4508b-240">호출자가 `MethodOne`을 호출하여 세션을 초기화하면 해당 호출자가 `MethodThree`를 호출하여 언제든지 통신 세션을 종료할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-240">When a caller initiates a session by calling `MethodOne`, that caller can terminate the communication session at any time by calling `MethodThree`.</span></span> <span data-ttu-id="4508b-241">`MethodTwo`는 세션 중에 여러 번 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-241">`MethodTwo` can be called any number of times during a session.</span></span>  
  
```csharp  
[ServiceContractAttribute(SessionMode=SessionMode.Required)]  
public class InitializeAndTerminateService  
{  
  [OperationContract(  
    IsOneWay=true,  
    IsInitiating=true,  
    IsTerminating=false  
  )]  
  public void MethodOne()  
  {  
    return;  
  }  
  
  [OperationContract(  
    IsInitiating=false,  
    IsTerminating=false  
  )]  
  public int MethodTwo(int x, out int y)  
  {  
    y = 34;  
    return 0;  
  }  
  
  [OperationContract(  
    IsOneWay=true,  
    IsInitiating=false  
    IsTerminating=true  
  )]  
  public void MethodThree()  
  {  
    return;  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.ServiceModel.OperationContractAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4508b-242">작업의 이름을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-242">Gets or sets the name of the operation.</span></span></summary>
        <value><span data-ttu-id="4508b-243">작업의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-243">The name of the operation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4508b-244">사용 하 여는 <xref:System.ServiceModel.OperationContractAttribute.Name%2A> 속성을 재정의 하는 <`operation`> 요소 이름을 WSDL에서.</span><span class="sxs-lookup"><span data-stu-id="4508b-244">Use the <xref:System.ServiceModel.OperationContractAttribute.Name%2A> property to override the <`operation`> element name in WSDL.</span></span> <span data-ttu-id="4508b-245">기본 작업 이름은 구현 메서드의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-245">The default operation name is the name of the implementing method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4508b-246">다음 코드 예제에서는 <xref:System.ServiceModel.OperationContractAttribute.Name%2A> 속성을 사용하여 메타데이터로 노출되는 작업 이름을 선언합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-246">The following code example uses the <xref:System.ServiceModel.OperationContractAttribute.Name%2A> property to declare the name of the operation as exposed in metadata.</span></span>  
  
 [!code-csharp[OperationContractAttribute_Properties#1](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontractattribute_properties/cs/services.cs#1)]
 [!code-vb[OperationContractAttribute_Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontractattribute_properties/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4508b-247"><see cref="P:System.ServiceModel.OperationContractAttribute.Name" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="4508b-247"><see cref="P:System.ServiceModel.OperationContractAttribute.Name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="4508b-248">값이 빈 문자열인 경우</span><span class="sxs-lookup"><span data-stu-id="4508b-248">The value is an empty string.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ProtectionLevel">
      <MemberSignature Language="C#" Value="public System.Net.Security.ProtectionLevel ProtectionLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Security.ProtectionLevel ProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.ProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ProtectionLevel As ProtectionLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::ProtectionLevel ProtectionLevel { System::Net::Security::ProtectionLevel get(); void set(System::Net::Security::ProtectionLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ProtectionLevel : System.Net.Security.ProtectionLevel with get, set" Usage="System.ServiceModel.OperationContractAttribute.ProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Security.ProtectionLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4508b-249">작업의 메시지에 대해 암호화, 서명 또는 둘 모두를 수행해야 할지 지정하는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-249">Gets or sets a value that specifies whether the messages of an operation must be encrypted, signed, or both.</span></span></summary>
        <value><span data-ttu-id="4508b-250"><see cref="T:System.Net.Security.ProtectionLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-250">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values.</span></span> <span data-ttu-id="4508b-251">기본값은 <see cref="F:System.Net.Security.ProtectionLevel.None" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-251">The default is <see cref="F:System.Net.Security.ProtectionLevel.None" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4508b-252">작업의 메시지에 대해 암호화, 서명 또는 둘 모두를 수행해야 할지 제어하려면 <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> 속성을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-252">Use the <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> property to control whether the messages of an operation must be encrypted, signed, or both.</span></span> <span data-ttu-id="4508b-253">이 값이 더 좁은 범위로 재정의되지 않는 한 여기서 설정한 값은 이 작업에 지정된 모든 메시지의 기본값입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-253">The value set here is the default value for all messages specified for this operation unless a narrower scope overrides this value.</span></span>  
  
 <span data-ttu-id="4508b-254">런타임의 보호 동작은 다음 속성에서 설정한 보호 수준 값의 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-254">It is important to remember that the protection behavior at runtime is the combination of the protection-level values set on the following properties.</span></span> <span data-ttu-id="4508b-255">이러한 속성은 계층 구조로 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-255">These properties have a hierarchical structure.</span></span> <span data-ttu-id="4508b-256">가장 바깥쪽 값을 설정하면 더 좁은 범위에 명시적으로 다른 값을 설정하지 않는 한 모든 더 좁은 범위에 이 값이 기본 설정으로 지정됩니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-256">Setting the outermost value establishes the default setting for all narrower scopes unless a different value for a narrower scope is explicitly set.</span></span> <span data-ttu-id="4508b-257">이 경우 특별히 설정된 범위를 제외하고 바깥쪽 값은 모든 더 좁은 범위의 기본값으로 유지됩니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-257">In this case, the outer value remains the default for all narrower scopes with the exception of that specifically set.</span></span>  
  
 <span data-ttu-id="4508b-258">예를 들어 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>을 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>으로 설정한 경우 더 좁은 다른 범위에는 보호 수준 설정이 없다면 작업 계약의 모든 메시지에 대해 암호화 및 서명이 수행됩니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-258">For example, if <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType> is set to <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType> and no other narrower scopes have protection level settings, all messages in an operation contract are encrypted and signed.</span></span> <span data-ttu-id="4508b-259">이러한 작업 중 하나에 <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A>으로 설정된 <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType>이 있으면 해당 작업의 메시지에 대해서는 서명이 수행되지만, 계약의 다른 모든 메시지의 경우 암호화 및 서명이 수행됩니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-259">If, however, one of those operations has the <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> set to <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType>, then the messages for that operation are signed but all other messages in the contract are encrypted and signed.</span></span>  
  
 <span data-ttu-id="4508b-260">보호 수준의 가정 및 범위에 대 한 자세한 내용은 참조 하세요 [보호 수준을 이해](~/docs/framework/wcf/understanding-protection-level.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-260">For details about protection levels and their assumptions and scopes, see [Understanding Protection Level](~/docs/framework/wcf/understanding-protection-level.md).</span></span>  
  
 <span data-ttu-id="4508b-261">이러한 값이 설정된 범위는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-261">The scopes at which these values are set are:</span></span>  
  
 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="4508b-262"><xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType>의 <xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType> 속성</span><span class="sxs-lookup"><span data-stu-id="4508b-262">The <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> property on <xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="4508b-263"><xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType>의 <xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType> 속성</span><span class="sxs-lookup"><span data-stu-id="4508b-263">The <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> property on <xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="4508b-264">계약에 명시적으로 지정된 보호 수준이 없고 기본 바인딩이 전송 수준이나 메시지 수준에서 보안을 지원하는 경우 전체 계약에서 유효한 보호 수준은 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-264">When there is no protection level explicitly specified on the contract and the underlying binding supports security (whether at the transport or message level), the effective protection level for the whole contract is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>.</span></span> <span data-ttu-id="4508b-265">바인딩에서 보안을 지원하지 않는 경우(예: <xref:System.ServiceModel.BasicHttpBinding>) 전체 계약에서 유효한 <xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType>은 <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-265">If the binding does not support security (such as <xref:System.ServiceModel.BasicHttpBinding>), the effective <xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType> is <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType> for the whole contract.</span></span> <span data-ttu-id="4508b-266">결과는 엔드포인트 바인딩에 따라 다르며, 계약에서 <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>을 지정하더라도 클라이언트가 다른 메시지 수준이나 전송 수준의 보안 보호를 요청할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-266">The result is that depending upon the endpoint binding, clients can require different message or transport level security protection even when the contract specifies <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="4508b-267">값이 <see cref="T:System.Net.Security.ProtectionLevel" /> 값 중 하나가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="4508b-267">The value is not one of the <see cref="T:System.Net.Security.ProtectionLevel" /> values.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReplyAction">
      <MemberSignature Language="C#" Value="public string ReplyAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ReplyAction" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.ReplyAction" />
      <MemberSignature Language="VB.NET" Value="Public Property ReplyAction As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ReplyAction { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ReplyAction : string with get, set" Usage="System.ServiceModel.OperationContractAttribute.ReplyAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4508b-268">작업의 회신 메시지에 대한 SOAP 동작 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-268">Gets or sets the value of the SOAP action for the reply message of the operation.</span></span></summary>
        <value><span data-ttu-id="4508b-269">회신 메시지의 SOAP 동작 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-269">The value of the SOAP action for the reply message.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4508b-270">회신 메시지의 동작 헤더에 대한 특정 값을 지정할 수 있을 뿐 아니라 "\*"(별표) 문자열도 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-270">In addition to specifying a particular value for the action header of the reply message, you can also specify the string "\*" (an asterisk).</span></span> <span data-ttu-id="4508b-271">서비스에서 별표를 지정 하면 WCF 메시지에 대해 직접 프로그래밍 하는 경우에 유용 하는 메시지에 회신 동작을 추가할 필요가 하도록 지시 합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-271">Specifying an asterisk in the service instructs WCF not to add a reply action to the message, which is useful if you are programming against messages directly.</span></span> <span data-ttu-id="4508b-272">클라이언트 애플리케이션에서 별표를 지정 하면 WCF 회신 동작을 확인 하도록 지시 합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-272">Specifying an asterisk in a client application instructs WCF not to validate the reply action.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4508b-273">다음은 <xref:System.ServiceModel.OperationContractAttribute.Action%2A> 및 <xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> 속성을 사용하여 입력 메시지 및 출력(또는 회신) 메시지 모두의 SOAP 동작을 명시적으로 제어하는 서비스에 대한 예제입니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-273">The following example is a service that uses the <xref:System.ServiceModel.OperationContractAttribute.Action%2A> and <xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> properties to explicitly control the SOAP actions of both the input and output (or reply) messages.</span></span> <span data-ttu-id="4508b-274">또한 <xref:System.ServiceModel.OperationContractAttribute.Name%2A> 속성을 사용하여 메타데이터로 노출되는 작업 이름을 선언합니다.</span><span class="sxs-lookup"><span data-stu-id="4508b-274">It also uses the <xref:System.ServiceModel.OperationContractAttribute.Name%2A> property to declare the name of the operation as exposed in metadata.</span></span>  
  
 [!code-csharp[OperationContractAttribute_Properties#1](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontractattribute_properties/cs/services.cs#1)]
 [!code-vb[OperationContractAttribute_Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontractattribute_properties/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4508b-275"><see cref="P:System.ServiceModel.OperationContractAttribute.ReplyAction" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="4508b-275"><see cref="P:System.ServiceModel.OperationContractAttribute.ReplyAction" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>