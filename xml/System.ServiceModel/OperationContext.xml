<Type Name="OperationContext" FullName="System.ServiceModel.OperationContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="670ba4c65aea9218d8c73b56858ca4cef693273a" /><Meta Name="ms.sourcegitcommit" Value="7461f9e28c2f184bd1596e6f07c25a3f34984516" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/28/2019" /><Meta Name="ms.locfileid" Value="58552673" /></Metadata><TypeSignature Language="C#" Value="public sealed class OperationContext : System.ServiceModel.IExtensibleObject&lt;System.ServiceModel.OperationContext&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OperationContext extends System.Object implements class System.ServiceModel.IExtensibleObject`1&lt;class System.ServiceModel.OperationContext&gt;" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.OperationContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OperationContext&#xA;Implements IExtensibleObject(Of OperationContext)" />
  <TypeSignature Language="C++ CLI" Value="public ref class OperationContext sealed : System::ServiceModel::IExtensibleObject&lt;System::ServiceModel::OperationContext ^&gt;" />
  <TypeSignature Language="F#" Value="type OperationContext = class&#xA;    interface IExtensibleObject&lt;OperationContext&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.IExtensibleObject&lt;System.ServiceModel.OperationContext&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="e8955-101">서비스 메서드의 실행 컨텍스트에 대한 액세스를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-101">Provides access to the execution context of a service method.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8955-102">현재 작업 실행 환경에 액세스하려면 서비스 작업에서 <xref:System.ServiceModel.OperationContext>를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-102">Use the <xref:System.ServiceModel.OperationContext> from within a service operation to access the current operation execution environment.</span></span> <span data-ttu-id="e8955-103">특히 작업 컨텍스트는 보내는 메시지 헤더와 속성을 추가하는 데 사용될 뿐만 아니라 이중 서비스에서 콜백 채널에 액세스하고, 작업 전체의 추가 상태 데이터를 저장하며, 들어오는 메시지 헤더와 속성에 액세스하는 데 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-103">In particular, the operation context is used to access callback channels in duplex services, to store extra state data across portions of the operations, and to access incoming message headers and properties as well as add outgoing message headers and properties.</span></span>  
  
 <span data-ttu-id="e8955-104">확장을 사용 하 여 상태 데이터를 저장 하는 방법에 대 한 자세한 내용은 참조 하세요. [확장 가능한 개체](~/docs/framework/wcf/extending/extensible-objects.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-104">For more information about using extensions to store state data, see [Extensible Objects](~/docs/framework/wcf/extending/extensible-objects.md).</span></span>  
  
 <span data-ttu-id="e8955-105"><xref:System.ServiceModel.OperationContext>에는 다음과 같은 속성 및 메서드가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-105">The <xref:System.ServiceModel.OperationContext> has the following properties and methods.</span></span>  
  
-   <span data-ttu-id="e8955-106"><xref:System.ServiceModel.OperationContext.Current%2A> 속성은 현재 실행 컨텍스트를 나타내는 <xref:System.ServiceModel.OperationContext> 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-106">The <xref:System.ServiceModel.OperationContext.Current%2A> property returns the <xref:System.ServiceModel.OperationContext> object representing the current execution context.</span></span>  
  
-   <span data-ttu-id="e8955-107"><xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> 속성은 메서드가 실행되는 보안 환경을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-107">The <xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> property returns the security environment under which the method executes.</span></span>  
  
-   <span data-ttu-id="e8955-108"><xref:System.ServiceModel.OperationContext.EndpointDispatcher%2A> 속성은 작업의 <xref:System.ServiceModel.Dispatcher.EndpointDispatcher?displayProperty=nameWithType>를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-108">The <xref:System.ServiceModel.OperationContext.EndpointDispatcher%2A> property gets the operation's <xref:System.ServiceModel.Dispatcher.EndpointDispatcher?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="e8955-109"><xref:System.ServiceModel.OperationContext.Extensions%2A> 속성은 현재 <xref:System.ServiceModel.OperationContext>의 확장 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-109">The <xref:System.ServiceModel.OperationContext.Extensions%2A> property returns an extension collection for the current <xref:System.ServiceModel.OperationContext>.</span></span>  
  
-   <span data-ttu-id="e8955-110"><xref:System.ServiceModel.OperationContext.Host%2A> 속성은 서비스를 관리하는 <xref:System.ServiceModel.ServiceHostBase> 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-110">The <xref:System.ServiceModel.OperationContext.Host%2A> property returns the <xref:System.ServiceModel.ServiceHostBase> object that manages the service.</span></span>  
  
-   <span data-ttu-id="e8955-111"><xref:System.ServiceModel.OperationContext.HasSupportingTokens%2A> 속성은 메서드에 지원 토큰이 있는지 여부를 나타내는 값을 반환하며, 지원 토큰이 있는 경우 <xref:System.ServiceModel.OperationContext.SupportingTokens%2A> 속성은 해당 토큰을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-111">The <xref:System.ServiceModel.OperationContext.HasSupportingTokens%2A> property returns a value that indicates whether the method has supporting tokens, if so, the <xref:System.ServiceModel.OperationContext.SupportingTokens%2A> property gets them.</span></span>  
  
-   <span data-ttu-id="e8955-112"><xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A>, <xref:System.ServiceModel.OperationContext.IncomingMessageProperties%2A> 및 <xref:System.ServiceModel.OperationContext.IncomingMessageVersion%2A> 속성은 들어오는 메시지에서 이러한 항목을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-112">The <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A>, <xref:System.ServiceModel.OperationContext.IncomingMessageProperties%2A>, and <xref:System.ServiceModel.OperationContext.IncomingMessageVersion%2A> properties get these items from the incoming message.</span></span>  
  
-   <span data-ttu-id="e8955-113">작업이 완료되면 <xref:System.ServiceModel.OperationContext.OperationCompleted> 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-113">The <xref:System.ServiceModel.OperationContext.OperationCompleted> event is fired when the operation has completed.</span></span>  
  
-   <span data-ttu-id="e8955-114"><xref:System.ServiceModel.OperationContext.OutgoingMessageHeaders%2A> 및 <xref:System.ServiceModel.OperationContext.OutgoingMessageProperties%2A> 속성은 아웃바운드 메시지의 이러한 항목을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-114">The <xref:System.ServiceModel.OperationContext.OutgoingMessageHeaders%2A> and <xref:System.ServiceModel.OperationContext.OutgoingMessageProperties%2A> properties get these items for the outbound message.</span></span>  
  
-   <span data-ttu-id="e8955-115"><xref:System.ServiceModel.OperationContext.RequestContext%2A> 속성은 메서드에 대한 <xref:System.ServiceModel.Channels.RequestContext> 구현을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-115">The <xref:System.ServiceModel.OperationContext.RequestContext%2A> property returns the <xref:System.ServiceModel.Channels.RequestContext> implementation for the method.</span></span>  
  
-   <span data-ttu-id="e8955-116"><xref:System.ServiceModel.OperationContext.InstanceContext%2A> 속성은 작업과 연결된 <xref:System.ServiceModel.InstanceContext>를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-116">The <xref:System.ServiceModel.OperationContext.InstanceContext%2A> property returns the <xref:System.ServiceModel.InstanceContext> associated with the operation.</span></span>  
  
-   <span data-ttu-id="e8955-117"><xref:System.ServiceModel.OperationContext.SessionId%2A> 속성은 현재 채널 및 개체의 세션 식별자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-117">The <xref:System.ServiceModel.OperationContext.SessionId%2A> property returns the session identifier for the current channel and object.</span></span>  
  
-   <span data-ttu-id="e8955-118"><xref:System.ServiceModel.OperationContext.GetCallbackChannel%2A> 메서드는 이중 통신의 경우 콜백 채널을 호출자에게 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-118">The <xref:System.ServiceModel.OperationContext.GetCallbackChannel%2A> method returns a callback channel to the caller in the case of duplex communication.</span></span>  
  
-   <span data-ttu-id="e8955-119"><xref:System.ServiceModel.OperationContext.SetTransactionComplete%2A> 메서드는 현재 트랜잭션을 커밋합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-119">The <xref:System.ServiceModel.OperationContext.SetTransactionComplete%2A> method commits the current transaction.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8955-120">다음 코드 예제에서는 <xref:System.ServiceModel.OperationContext.Current%2A> 속성 및 <xref:System.ServiceModel.OperationContext.GetCallbackChannel%2A> 메서드를 사용하여 메서드 내에서 호출자로 반환되는 채널을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-120">The following code example uses the <xref:System.ServiceModel.OperationContext.Current%2A> property and <xref:System.ServiceModel.OperationContext.GetCallbackChannel%2A> method to obtain the channel back to the caller from within a method.</span></span> <span data-ttu-id="e8955-121">이 예제의 모든 메서드는 단방향 메서드이므로 서비스와 클라이언트의 각 방향에서 독립적으로 통신할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-121">All methods in this example are one-way methods, enabling the service and the client to communicate in both directions independently.</span></span> <span data-ttu-id="e8955-122">이 경우 예제 클라이언트 애플리케이션은 종료되기 전에 하나의 반환 호출만 예상하지만 Windows Forms 클라이언트와 같은 다른 클라이언트는 서비스에서 여러 개의 호출을 받을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-122">In this case, the example client application expects only one return call before it exits, but another client, for example a Windows Forms client, can receive any number of calls from the service.</span></span>  
  
 [!code-csharp[SCA.CallbackContract#1](~/samples/snippets/csharp/VS_Snippets_CFX/sca.callbackcontract/cs/services.cs#1)]
 [!code-vb[SCA.CallbackContract#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/sca.callbackcontract/vb/services.vb#1)]  
  
 <span data-ttu-id="e8955-123">다음 클라이언트는 `SampleDuplexHelloCallback`을 구현하여 콜백 메시지를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-123">The following client implements the `SampleDuplexHelloCallback` to receive the callback message.</span></span> <span data-ttu-id="e8955-124">앞의 예제에서는 <xref:System.ServiceModel.ServiceContractAttribute.Name%2A> 속성을 사용하므로 가져온 콜백 계약의 이름이 서비스의 콜백 계약과 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-124">The imported callback contract is not the same name as the one in the service, due to the use of the <xref:System.ServiceModel.ServiceContractAttribute.Name%2A> property in the preceding example.</span></span> <span data-ttu-id="e8955-125">클라이언트에서는 콜백 수신 여부 및 시기에 대해 어떠한 가정도 하지 않으므로 서버 콜백은 클라이언트 아웃바운드 호출로부터 완전히 독립적입니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-125">Note that the client makes no assumptions about whether or when it might receive a callback; the server callback is entirely independent of the client's outbound call.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e8955-126">클라이언트 시나리오에서 <xref:System.ServiceModel.OperationContext> 클래스를 사용하는 예제의 경우 <xref:System.ServiceModel.OperationContextScope>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="e8955-126">For an example that uses the <xref:System.ServiceModel.OperationContext> class in a client scenario, see <xref:System.ServiceModel.OperationContextScope>.</span></span>  
  
 [!code-csharp[SCA.CallbackContract#3](~/samples/snippets/csharp/VS_Snippets_CFX/sca.callbackcontract/cs/client.cs#3)]
 [!code-vb[SCA.CallbackContract#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/sca.callbackcontract/vb/client.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OperationContext (System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.OperationContext.#ctor(System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (channel As IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OperationContext(System::ServiceModel::IContextChannel ^ channel);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.OperationContext : System.ServiceModel.IContextChannel -&gt; System.ServiceModel.OperationContext" Usage="new System.ServiceModel.OperationContext channel" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="channel"><span data-ttu-id="e8955-127">새 클라이언트 <see cref="T:System.ServiceModel.IContextChannel" />를 만드는 데 사용되는 <see cref="T:System.ServiceModel.OperationContext" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-127">The <see cref="T:System.ServiceModel.IContextChannel" /> used to create a new client <see cref="T:System.ServiceModel.OperationContext" />.</span></span></param>
        <summary><span data-ttu-id="e8955-128">클라이언트 애플리케이션에서 지정된 <see cref="T:System.ServiceModel.OperationContext" />을 사용하는 <see cref="T:System.ServiceModel.IContextChannel" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-128">Initializes a new instance of the <see cref="T:System.ServiceModel.OperationContext" /> class that uses the specified <see cref="T:System.ServiceModel.IContextChannel" /> in a client application.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8955-129">헤더 같은 인바운드 항목을 수정하기 위해 프록시가 연결된 범위 내에서 새 작업 컨텍스트를 만들려면 <xref:System.ServiceModel.OperationContext.%23ctor%2A> 생성자를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-129">Use the <xref:System.ServiceModel.OperationContext.%23ctor%2A> constructor to create a new operation context within the scope of which the proxy is associated in order to modify outbound items such as headers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8955-130">다음 예제에서는 보내는 메시지에 사용자 지정 헤더를 추가하기 위해 <xref:System.ServiceModel.OperationContextScope>를 사용하여 클라이언트 애플리케이션에서 새 컨텍스트를 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-130">The following example shows how to use the <xref:System.ServiceModel.OperationContextScope> to create a new context in a client application in order to add a custom header to the outgoing message.</span></span>  
  
 [!code-csharp[OperationContextScope#4](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontextscope/cs/client.cs#4)]
 [!code-vb[OperationContextScope#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontextscope/vb/client.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e8955-131">채널이 null인 경우</span><span class="sxs-lookup"><span data-stu-id="e8955-131">The channel is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Channel">
      <MemberSignature Language="C#" Value="public System.ServiceModel.IContextChannel Channel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.IContextChannel Channel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContext.Channel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Channel As IContextChannel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::IContextChannel ^ Channel { System::ServiceModel::IContextChannel ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Channel : System.ServiceModel.IContextChannel" Usage="System.ServiceModel.OperationContext.Channel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.IContextChannel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8955-132">현재 <see cref="T:System.ServiceModel.OperationContext" /> 개체와 연결된 채널을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-132">Gets the channel associated with the current <see cref="T:System.ServiceModel.OperationContext" /> object.</span></span></summary>
        <value><span data-ttu-id="e8955-133">현재 <see cref="T:System.ServiceModel.IContextChannel" />와 연결된 <see cref="T:System.ServiceModel.OperationContext" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-133">An <see cref="T:System.ServiceModel.IContextChannel" /> associated with the current <see cref="T:System.ServiceModel.OperationContext" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClaimsPrincipal">
      <MemberSignature Language="C#" Value="public System.Security.Claims.ClaimsPrincipal ClaimsPrincipal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Claims.ClaimsPrincipal ClaimsPrincipal" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContext.ClaimsPrincipal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClaimsPrincipal As ClaimsPrincipal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Claims::ClaimsPrincipal ^ ClaimsPrincipal { System::Security::Claims::ClaimsPrincipal ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ClaimsPrincipal : System.Security.Claims.ClaimsPrincipal" Usage="System.ServiceModel.OperationContext.ClaimsPrincipal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Claims.ClaimsPrincipal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8955-134">작업에 연결된 클레임 기반 보안 주체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-134">Gets the claims-based principal associated with the operation.</span></span></summary>
        <value><span data-ttu-id="e8955-135">클레임 보안 주체입니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-135">The claims principal.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.OperationContext Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.OperationContext Current" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContext.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As OperationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::OperationContext ^ Current { System::ServiceModel::OperationContext ^ get(); void set(System::ServiceModel::OperationContext ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.ServiceModel.OperationContext with get, set" Usage="System.ServiceModel.OperationContext.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.OperationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8955-136">현재 스레드의 실행 컨텍스트를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-136">Gets or sets the execution context for the current thread.</span></span></summary>
        <value><span data-ttu-id="e8955-137">현재 메서드의 메시징 및 실행 컨텍스트를 나타내는 <see cref="T:System.ServiceModel.OperationContext" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-137">The <see cref="T:System.ServiceModel.OperationContext" /> that represents the messaging and execution context of the current method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8955-138">현재 메서드의 실행 및 메시지 컨텍스트를 가져오려면 <xref:System.ServiceModel.OperationContext.Current%2A> 속성을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-138">Use the <xref:System.ServiceModel.OperationContext.Current%2A> property to obtain the execution and message context for the current method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8955-139">다음 코드 예제에서는 <xref:System.ServiceModel.OperationContext.Current%2A> 속성 및 <xref:System.ServiceModel.OperationContext.GetCallbackChannel%2A> 메서드를 사용하여 메서드 내에서 호출자로 반환되는 채널을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-139">The following code example uses the <xref:System.ServiceModel.OperationContext.Current%2A> property and <xref:System.ServiceModel.OperationContext.GetCallbackChannel%2A> method to create a channel back to the caller from within a method.</span></span> <span data-ttu-id="e8955-140">이 예제의 모든 메서드는 단방향 메서드이므로 서비스와 클라이언트의 각 방향에서 독립적으로 통신할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-140">All methods in this example are one-way methods, enabling the service and the client to communicate in both directions independently.</span></span> <span data-ttu-id="e8955-141">이 경우 예제 클라이언트 애플리케이션은 종료되기 전에 하나의 반환 호출만 예상하지만 Windows Forms 클라이언트와 같은 다른 클라이언트는 서비스에서 여러 개의 호출을 받을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-141">In this case, the example client application expects only one return call before it exits, but another client, for example a Windows Forms client, can receive any number of calls from the service.</span></span>  
  
 [!code-csharp[SCA.CallbackContract#1](~/samples/snippets/csharp/VS_Snippets_CFX/sca.callbackcontract/cs/services.cs#1)]
 [!code-vb[SCA.CallbackContract#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/sca.callbackcontract/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndpointDispatcher">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Dispatcher.EndpointDispatcher EndpointDispatcher { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Dispatcher.EndpointDispatcher EndpointDispatcher" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContext.EndpointDispatcher" />
      <MemberSignature Language="VB.NET" Value="Public Property EndpointDispatcher As EndpointDispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Dispatcher::EndpointDispatcher ^ EndpointDispatcher { System::ServiceModel::Dispatcher::EndpointDispatcher ^ get(); void set(System::ServiceModel::Dispatcher::EndpointDispatcher ^ value); };" />
      <MemberSignature Language="F#" Value="member this.EndpointDispatcher : System.ServiceModel.Dispatcher.EndpointDispatcher with get, set" Usage="System.ServiceModel.OperationContext.EndpointDispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.EndpointDispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8955-142">검사하거나 수정할 엔드포인트의 엔드포인트 디스패처를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-142">Gets or sets the endpoint dispatcher for the endpoint to inspect or modify.</span></span></summary>
        <value><span data-ttu-id="e8955-143">검사하거나 수정할 엔드포인트의 엔드포인트 디스패처입니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-143">The endpoint dispatcher for the endpoint to inspect or modify.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Extensions">
      <MemberSignature Language="C#" Value="public System.ServiceModel.IExtensionCollection&lt;System.ServiceModel.OperationContext&gt; Extensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.IExtensionCollection`1&lt;class System.ServiceModel.OperationContext&gt; Extensions" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContext.Extensions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Extensions As IExtensionCollection(Of OperationContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::IExtensionCollection&lt;System::ServiceModel::OperationContext ^&gt; ^ Extensions { System::ServiceModel::IExtensionCollection&lt;System::ServiceModel::OperationContext ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Extensions : System.ServiceModel.IExtensionCollection&lt;System.ServiceModel.OperationContext&gt;" Usage="System.ServiceModel.OperationContext.Extensions" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ServiceModel.IExtensibleObject`1.Extensions</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.IExtensionCollection&lt;System.ServiceModel.OperationContext&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8955-144">현재 메시지 컨텍스트에서 서비스 확장명의 컬렉션을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-144">Gets the collection of service extensions from the current message context.</span></span></summary>
        <value><span data-ttu-id="e8955-145"><see cref="T:System.ServiceModel.OperationContext" /> 확장의 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-145">A collection of extensions of <see cref="T:System.ServiceModel.OperationContext" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8955-146">컨텍스트를 수정하거나 사용자 지정 상태를 추가하는 데 사용되는 모든 <xref:System.ServiceModel.OperationContext.Extensions%2A> 확장의 컬렉션을 가져오려면 <xref:System.ServiceModel.OperationContext> 속성을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-146">Use the <xref:System.ServiceModel.OperationContext.Extensions%2A> property to obtain a collection of all extensions of the <xref:System.ServiceModel.OperationContext> used to modify the context or add custom state.</span></span> <span data-ttu-id="e8955-147">확장에 대 한 자세한 내용은 참조 하세요. [확장 가능한 개체](~/docs/framework/wcf/extending/extensible-objects.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-147">For more information about extensions, see [Extensible Objects](~/docs/framework/wcf/extending/extensible-objects.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCallbackChannel&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetCallbackChannel&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetCallbackChannel&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.OperationContext.GetCallbackChannel``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCallbackChannel(Of T) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetCallbackChannel();" />
      <MemberSignature Language="F#" Value="member this.GetCallbackChannel : unit -&gt; 'T" Usage="operationContext.GetCallbackChannel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T"><span data-ttu-id="e8955-148">클라이언트로 콜백하는 데 사용되는 채널 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-148">The type of channel used to call back to the client.</span></span></typeparam>
        <summary><span data-ttu-id="e8955-149">현재 작업을 호출한 클라이언트 인스턴스로 채널을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-149">Gets a channel to the client instance that called the current operation.</span></span></summary>
        <returns><span data-ttu-id="e8955-150"><see cref="P:System.ServiceModel.ServiceContractAttribute.CallbackContract" /> 속성에 지정된 형식의 작업을 호출한 클라이언트 인스턴스에 대한 채널입니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-150">A channel to the client instance that called the operation of the type specified in the <see cref="P:System.ServiceModel.ServiceContractAttribute.CallbackContract" /> property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8955-151">서비스를 호출한 클라이언트 인스턴스에서 작업을 호출하는 데 사용할 수 있는 채널을 가져오려면 <xref:System.ServiceModel.OperationContext.GetCallbackChannel%2A> 속성을 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-151">Call the <xref:System.ServiceModel.OperationContext.GetCallbackChannel%2A> property to obtain a channel that you can use to call operations on the client instance that called the service.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8955-152">다음 코드 예제에서는 <xref:System.ServiceModel.OperationContext.Current%2A> 속성 및 <xref:System.ServiceModel.OperationContext.GetCallbackChannel%2A> 메서드를 사용하여 작업 내에서 호출자로 반환되는 채널을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-152">The following code example uses the <xref:System.ServiceModel.OperationContext.Current%2A> property and <xref:System.ServiceModel.OperationContext.GetCallbackChannel%2A> method to create a channel back to the caller from within a operation.</span></span> <span data-ttu-id="e8955-153">이 예제의 모든 작업은 단방향 작업이므로 서비스와 클라이언트의 각 방향에서 독립적으로 통신할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-153">All operations in this example are one-way operations, enabling the service and the client to communicate in both directions independently.</span></span> <span data-ttu-id="e8955-154">이 경우 예제 클라이언트 애플리케이션은 종료되기 전에 하나의 반환 호출만 예상하지만 Windows Forms 클라이언트와 같은 다른 클라이언트는 서비스에서 여러 개의 호출을 받을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-154">In this case, the example client application expects only one return call before it exits, but another client, for example a Windows Forms client, can receive any number of calls from the service.</span></span>  
  
 [!code-csharp[SCA.CallbackContract#1](~/samples/snippets/csharp/VS_Snippets_CFX/sca.callbackcontract/cs/services.cs#1)]
 [!code-vb[SCA.CallbackContract#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/sca.callbackcontract/vb/services.vb#1)]  
  
 <span data-ttu-id="e8955-155">다음 클라이언트는 `SampleDuplexHelloCallback`을 구현하여 콜백 메시지를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-155">The following client implements the `SampleDuplexHelloCallback` to receive the callback message.</span></span> <span data-ttu-id="e8955-156">앞의 예제에서는 <xref:System.ServiceModel.ServiceContractAttribute.Name%2A> 속성을 사용하므로 가져온 콜백 계약의 이름이 서비스의 콜백 계약과 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-156">The imported callback contract is not the same name as the one in the service, due to the use of the <xref:System.ServiceModel.ServiceContractAttribute.Name%2A> property in the preceding example.</span></span> <span data-ttu-id="e8955-157">클라이언트에서는 콜백 수신 여부 및 시기에 대해 어떠한 가정도 하지 않으므로 서버 콜백은 클라이언트 아웃바운드 호출로부터 완전히 독립적입니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-157">Note that the client makes no assumptions about whether or when it might receive a callback; the server callback is entirely independent of the client's outbound call.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e8955-158">클라이언트 시나리오에서 <xref:System.ServiceModel.OperationContext> 클래스를 사용하는 예제의 경우 <xref:System.ServiceModel.OperationContextScope>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="e8955-158">For an example that uses the <xref:System.ServiceModel.OperationContext> class in a client scenario, see <xref:System.ServiceModel.OperationContextScope>.</span></span>  
  
 [!code-csharp[SCA.CallbackContract#3](~/samples/snippets/csharp/VS_Snippets_CFX/sca.callbackcontract/cs/client.cs#3)]
 [!code-vb[SCA.CallbackContract#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/sca.callbackcontract/vb/client.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSupportingTokens">
      <MemberSignature Language="C#" Value="public bool HasSupportingTokens { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasSupportingTokens" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContext.HasSupportingTokens" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasSupportingTokens As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasSupportingTokens { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasSupportingTokens : bool" Usage="System.ServiceModel.OperationContext.HasSupportingTokens" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8955-159">들어오는 메시지에서 토큰을 지원하는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-159">Gets a value that indicates whether the incoming message has supporting tokens.</span></span></summary>
        <value><span data-ttu-id="e8955-160">들어오는 메시지에서 토큰을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-160"><see langword="true" /> if the incoming message has supporting tokens; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Host">
      <MemberSignature Language="C#" Value="public System.ServiceModel.ServiceHostBase Host { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.ServiceHostBase Host" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContext.Host" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Host As ServiceHostBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::ServiceHostBase ^ Host { System::ServiceModel::ServiceHostBase ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Host : System.ServiceModel.ServiceHostBase" Usage="System.ServiceModel.OperationContext.Host" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ServiceHostBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8955-161">현재 서비스 개체에 대한 <see cref="T:System.ServiceModel.ServiceHost" />를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-161">Gets the <see cref="T:System.ServiceModel.ServiceHost" /> for the current service object.</span></span></summary>
        <value><span data-ttu-id="e8955-162"><see cref="T:System.ServiceModel.ServiceHost" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-162">A <see cref="T:System.ServiceModel.ServiceHost" /> object.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncomingMessageHeaders">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.MessageHeaders IncomingMessageHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Channels.MessageHeaders IncomingMessageHeaders" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContext.IncomingMessageHeaders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IncomingMessageHeaders As MessageHeaders" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Channels::MessageHeaders ^ IncomingMessageHeaders { System::ServiceModel::Channels::MessageHeaders ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IncomingMessageHeaders : System.ServiceModel.Channels.MessageHeaders" Usage="System.ServiceModel.OperationContext.IncomingMessageHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.MessageHeaders</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8955-163"><see cref="T:System.ServiceModel.OperationContext" />의 들어오는 메시지 헤더를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-163">Gets the incoming message headers for the <see cref="T:System.ServiceModel.OperationContext" />.</span></span></summary>
        <value><span data-ttu-id="e8955-164">들어오는 메시지 헤더가 포함된 <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-164">A <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> object that contains the incoming message headers.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8955-165">서비스 작업에 도착하는 요청 헤더나 클라이언트 프록시에 도착하는 회신 헤더를 검사하거나 수정하려면 이 속성을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-165">Use this property to inspect or modify the request headers that arrive at a service operation or reply headers that arrive at a client proxy.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8955-166">다음 코드 예제에서는 서비스 작업에서 들어오는 메시지 헤더를 읽는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-166">The following code example shows how to read the incoming message headers in a service operation.</span></span>  
  
 [!code-csharp[OperationContextScope#2](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontextscope/cs/services.cs#2)]
 [!code-vb[OperationContextScope#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontextscope/vb/services.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IncomingMessageProperties">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.MessageProperties IncomingMessageProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Channels.MessageProperties IncomingMessageProperties" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContext.IncomingMessageProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IncomingMessageProperties As MessageProperties" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Channels::MessageProperties ^ IncomingMessageProperties { System::ServiceModel::Channels::MessageProperties ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IncomingMessageProperties : System.ServiceModel.Channels.MessageProperties" Usage="System.ServiceModel.OperationContext.IncomingMessageProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.MessageProperties</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8955-167"><see cref="T:System.ServiceModel.OperationContext" />에서 들어오는 메시지의 메시지 속성을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-167">Gets the message properties for the incoming message in the <see cref="T:System.ServiceModel.OperationContext" />.</span></span></summary>
        <value><span data-ttu-id="e8955-168">들어오는 메시지의 메시지 속성이 포함된 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-168">A <see cref="T:System.ServiceModel.Channels.MessageProperties" /> object that contains the message properties on the incoming message.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8955-169">서비스 작업의 요청 메시지나 클라이언트 프록시의 회신 메시지에 대한 메시지 속성을 검사하거나 수정하려면 이 속성을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-169">Use this property to inspect or modify the message properties for a request message in a service operation or a reply message in a client proxy.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IncomingMessageVersion">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.MessageVersion IncomingMessageVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Channels.MessageVersion IncomingMessageVersion" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContext.IncomingMessageVersion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IncomingMessageVersion As MessageVersion" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Channels::MessageVersion ^ IncomingMessageVersion { System::ServiceModel::Channels::MessageVersion ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IncomingMessageVersion : System.ServiceModel.Channels.MessageVersion" Usage="System.ServiceModel.OperationContext.IncomingMessageVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.MessageVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8955-170"><see cref="T:System.ServiceModel.OperationContext" />의 들어오는 SOAP 메시지 버전을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-170">Gets the incoming SOAP message version for the <see cref="T:System.ServiceModel.OperationContext" />.</span></span></summary>
        <value><span data-ttu-id="e8955-171">들어오는 메시지의 SOAP 버전입니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-171">The SOAP version of the incoming message.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8955-172">서비스 작업에 도착하는 요청 메시지의 SOAP 버전이나 클라이언트 프록시에 도착하는 회신 메시지의 SOAP 버전을 검사하거나 수정하려면 이 속성을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-172">Use this property to inspect the SOAP version of the request message that arrives at a service operation or the SOAP version of the reply message that arrives at a client proxy.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InstanceContext">
      <MemberSignature Language="C#" Value="public System.ServiceModel.InstanceContext InstanceContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.InstanceContext InstanceContext" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContext.InstanceContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InstanceContext As InstanceContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::InstanceContext ^ InstanceContext { System::ServiceModel::InstanceContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InstanceContext : System.ServiceModel.InstanceContext" Usage="System.ServiceModel.OperationContext.InstanceContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.InstanceContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8955-173">현재 서비스 인스턴스를 관리하는 <see cref="T:System.ServiceModel.InstanceContext" /> 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-173">Gets the <see cref="T:System.ServiceModel.InstanceContext" /> object that manages the current service instance.</span></span></summary>
        <value><span data-ttu-id="e8955-174">현재 서비스의 <see cref="T:System.ServiceModel.InstanceContext" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-174">The <see cref="T:System.ServiceModel.InstanceContext" /> object for the current service.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8955-175">현재 서비스 개체를 관리하는 런타임 개체에 액세스하려면 <xref:System.ServiceModel.OperationContext.InstanceContext%2A> 속성을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-175">Use the <xref:System.ServiceModel.OperationContext.InstanceContext%2A> property to access the run-time object that manages the current service object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUserContext">
      <MemberSignature Language="C#" Value="public bool IsUserContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUserContext" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContext.IsUserContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUserContext As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUserContext { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUserContext : bool" Usage="System.ServiceModel.OperationContext.IsUserContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8955-176">이 속성은 시스템에서만 사용할 수 있으며 사용자는 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-176">This property is intended for system use and should not be called by users.</span></span></summary>
        <value><span data-ttu-id="e8955-177"><see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="e8955-177"><see langword="true" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperationCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler OperationCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler OperationCompleted" />
      <MemberSignature Language="DocId" Value="E:System.ServiceModel.OperationContext.OperationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event OperationCompleted As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ OperationCompleted;" />
      <MemberSignature Language="F#" Value="member this.OperationCompleted : EventHandler " Usage="member this.OperationCompleted : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8955-178">작업이 완료되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-178">Occurs when the operation has completed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8955-179"><xref:System.ServiceModel.OperationContext.OperationCompleted>를 <xref:System.ServiceModel.OperationBehaviorAttribute.AutoDisposeParameters%2A?displayProperty=nameWithType>로 설정한 경우 매개 변수를 삭제하거나 값을 반환하려면 `false` 이벤트를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-179">Use the <xref:System.ServiceModel.OperationContext.OperationCompleted> event to dispose parameters or a return value if you set <xref:System.ServiceModel.OperationBehaviorAttribute.AutoDisposeParameters%2A?displayProperty=nameWithType> to `false`.</span></span> <span data-ttu-id="e8955-180">일반적으로 설정한 <xref:System.ServiceModel.OperationBehaviorAttribute.AutoDisposeParameters%2A?displayProperty=nameWithType> 하 `false` 호출에서 WCF를 방지 하기 위해 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 매개 변수 및 반환 값 개체에 합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-180">Normally you set <xref:System.ServiceModel.OperationBehaviorAttribute.AutoDisposeParameters%2A?displayProperty=nameWithType> to `false` to prevent WCF from calling <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> on the parameter and return value objects.</span></span>  <span data-ttu-id="e8955-181">그러나 일부 매개 변수는 유지해야 하고 일부 매개 변수는 삭제해야 할 경우 이 이벤트가 해당 매개 변수를 삭제할 가장 좋은 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-181">However, if some parameters need to be preserved while others need to be disposed, this event is the best place to dispose those parameters.</span></span>  
  
 <span data-ttu-id="e8955-182">또한 이중 바인딩을 사용하여 현재 작업에 대한 회신을 보낸 후 콜백 채널에 대한 요청을 보내는 데 이 이벤트를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-182">Also, with duplex bindings, this event can be used to send a request on the callback channel after the reply for the current operation is sent.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e8955-183">호출자가 <xref:System.ServiceModel.OperationContext.OperationCompleted?displayProperty=nameWithType> 작업에 대한 <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A?displayProperty=nameWithType> 이벤트를 수신 대기하고 있는 경우 응답을 수신할 때 차단할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-183">If a caller is listening for the <xref:System.ServiceModel.OperationContext.OperationCompleted?displayProperty=nameWithType> event for an <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A?displayProperty=nameWithType> operation, it is possible to block when the response is received.</span></span> <span data-ttu-id="e8955-184">이 차단 작업을 처리하는 올바른 방법은 <xref:System.ServiceModel.OperationContext.OperationCompleted>가 발생하면 다른 스레드에서 작업을 예약한 다음 해당 이벤트 처리기에서 이 이벤트를 즉시 반환하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-184">The proper way to handle this is to schedule work on another thread when <xref:System.ServiceModel.OperationContext.OperationCompleted> is raised and then immediately return from that event handler.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutgoingMessageHeaders">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.MessageHeaders OutgoingMessageHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Channels.MessageHeaders OutgoingMessageHeaders" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContext.OutgoingMessageHeaders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutgoingMessageHeaders As MessageHeaders" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Channels::MessageHeaders ^ OutgoingMessageHeaders { System::ServiceModel::Channels::MessageHeaders ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OutgoingMessageHeaders : System.ServiceModel.Channels.MessageHeaders" Usage="System.ServiceModel.OperationContext.OutgoingMessageHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.MessageHeaders</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8955-185">활성 <see cref="T:System.ServiceModel.OperationContext" />의 보내는 메시지 헤더를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-185">Gets the outgoing message headers for the active <see cref="T:System.ServiceModel.OperationContext" />.</span></span></summary>
        <value><span data-ttu-id="e8955-186">활성 <see cref="T:System.ServiceModel.Channels.MessageHeaders" />의 아웃바운드 메시지 헤더가 포함된 <see cref="T:System.ServiceModel.OperationContext" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-186">A <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> object that contains outbound message headers for the active <see cref="T:System.ServiceModel.OperationContext" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8955-187">이 속성을 사용 하 여 서비스 작업에 의해 전송 되는 회신 헤더 또는 WCF 클라이언트 개체에 의해 전송 되는 요청 헤더를 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-187">Use this property to add reply headers that are sent by a service operation or request headers that are sent by a WCF client object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8955-188">다음 예제에서는 보내는 메시지에 사용자 지정 헤더를 추가하기 위해 <xref:System.ServiceModel.OperationContextScope>를 사용하여 클라이언트 애플리케이션에서 새 컨텍스트를 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-188">The following example shows how to use the <xref:System.ServiceModel.OperationContextScope> to create a new context in a client application in order to add a custom header to the outgoing message.</span></span>  
  
 [!code-csharp[OperationContextScope#4](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontextscope/cs/client.cs#4)]
 [!code-vb[OperationContextScope#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontextscope/vb/client.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutgoingMessageProperties">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.MessageProperties OutgoingMessageProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Channels.MessageProperties OutgoingMessageProperties" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContext.OutgoingMessageProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutgoingMessageProperties As MessageProperties" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Channels::MessageProperties ^ OutgoingMessageProperties { System::ServiceModel::Channels::MessageProperties ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OutgoingMessageProperties : System.ServiceModel.Channels.MessageProperties" Usage="System.ServiceModel.OperationContext.OutgoingMessageProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.MessageProperties</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8955-189">활성 <see cref="T:System.ServiceModel.OperationContext" />에서 아웃바운드 메시지의 메시지 속성을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-189">Gets the message properties for the outbound message in the active <see cref="T:System.ServiceModel.OperationContext" />.</span></span></summary>
        <value><span data-ttu-id="e8955-190">아웃바운드 메시지의 메시지 속성이 포함된 <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-190">A <see cref="T:System.ServiceModel.Channels.MessageProperties" /> object that contains the message properties on the outbound message.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8955-191">서비스 작업의 회신 메시지 또는 클라이언트 프록시의 요청 메시지에 대한 메시지 속성을 추가하려면 이 속성을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-191">Use this property to add message properties for a reply message from a service operation or message properties for a request message from a client proxy.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestContext">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.RequestContext RequestContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Channels.RequestContext RequestContext" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContext.RequestContext" />
      <MemberSignature Language="VB.NET" Value="Public Property RequestContext As RequestContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Channels::RequestContext ^ RequestContext { System::ServiceModel::Channels::RequestContext ^ get(); void set(System::ServiceModel::Channels::RequestContext ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RequestContext : System.ServiceModel.Channels.RequestContext with get, set" Usage="System.ServiceModel.OperationContext.RequestContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.RequestContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8955-192">이 메서드에 대한 <see cref="T:System.ServiceModel.Channels.RequestContext" /> 구현을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-192">Gets or sets the <see cref="T:System.ServiceModel.Channels.RequestContext" /> implementation for this method.</span></span></summary>
        <value><span data-ttu-id="e8955-193">요청 컨텍스트가 없으면 null이고, 그렇지 않으면 <see cref="T:System.ServiceModel.Channels.RequestContext" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-193">An <see cref="T:System.ServiceModel.Channels.RequestContext" /> implementation, or null if there is no request context.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8955-194">단방향 작업에는 요청 컨텍스트가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-194">One-way operations are do not have a request context.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceSecurityContext">
      <MemberSignature Language="C#" Value="public System.ServiceModel.ServiceSecurityContext ServiceSecurityContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.ServiceSecurityContext ServiceSecurityContext" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContext.ServiceSecurityContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ServiceSecurityContext As ServiceSecurityContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::ServiceSecurityContext ^ ServiceSecurityContext { System::ServiceModel::ServiceSecurityContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ServiceSecurityContext : System.ServiceModel.ServiceSecurityContext" Usage="System.ServiceModel.OperationContext.ServiceSecurityContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ServiceSecurityContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8955-195">이 메서드를 실행할 <see cref="T:System.ServiceModel.ServiceSecurityContext" />를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-195">Gets or sets the <see cref="T:System.ServiceModel.ServiceSecurityContext" /> within which this method executes.</span></span></summary>
        <value><span data-ttu-id="e8955-196"><see cref="T:System.ServiceModel.ServiceSecurityContext" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-196">A <see cref="T:System.ServiceModel.ServiceSecurityContext" /> object.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionId">
      <MemberSignature Language="C#" Value="public string SessionId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SessionId" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContext.SessionId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SessionId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SessionId { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SessionId : string" Usage="System.ServiceModel.OperationContext.SessionId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8955-197">현재 세션을 확인하는 데 사용되는 <see cref="T:System.String" />을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-197">Gets the <see cref="T:System.String" /> used to identify the current session.</span></span></summary>
        <value><span data-ttu-id="e8955-198">세션 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-198">The session identifier.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTransactionComplete">
      <MemberSignature Language="C#" Value="public void SetTransactionComplete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetTransactionComplete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.OperationContext.SetTransactionComplete" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetTransactionComplete ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetTransactionComplete();" />
      <MemberSignature Language="F#" Value="member this.SetTransactionComplete : unit -&gt; unit" Usage="operationContext.SetTransactionComplete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e8955-199">현재 실행 중인 트랜잭션을 커밋합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-199">Commits the currently executing transaction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8955-200">이 방법은 <xref:System.ServiceModel.OperationBehaviorAttribute.TransactionAutoComplete%2A?displayProperty=nameWithType>를 `false`로 설정하는 작업에만 유용합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-200">This is only useful in operations that set <xref:System.ServiceModel.OperationBehaviorAttribute.TransactionAutoComplete%2A?displayProperty=nameWithType> to `false`.</span></span> <span data-ttu-id="e8955-201">일반적으로 서비스는 모든 작업이 아닌 일부 작업에서 이를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-201">Typically, services do this on some but not all operations.</span></span> <span data-ttu-id="e8955-202"><xref:System.ServiceModel.OperationBehaviorAttribute.TransactionAutoComplete%2A?displayProperty=nameWithType>가 false이면 트랜잭션이 자동으로 완료됩니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-202">When <xref:System.ServiceModel.OperationBehaviorAttribute.TransactionAutoComplete%2A?displayProperty=nameWithType> is false the transaction completes automatically.</span></span> <span data-ttu-id="e8955-203">작업이 트랜잭션을 완료해야 하는지 여부를 디자인 타임에서 결정할 수 없는 경우 <xref:System.ServiceModel.OperationContext.SetTransactionComplete%2A>를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-203">Use <xref:System.ServiceModel.OperationContext.SetTransactionComplete%2A> in cases where it is not possible to determine at design-time whether an operation needs to complete the transaction.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e8955-204">컨텍스트에 트랜잭션이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="e8955-204">There is no transaction in the context.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SupportingTokens">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;System.ServiceModel.Security.SupportingTokenSpecification&gt; SupportingTokens { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;class System.ServiceModel.Security.SupportingTokenSpecification&gt; SupportingTokens" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContext.SupportingTokens" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportingTokens As ICollection(Of SupportingTokenSpecification)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::ICollection&lt;System::ServiceModel::Security::SupportingTokenSpecification ^&gt; ^ SupportingTokens { System::Collections::Generic::ICollection&lt;System::ServiceModel::Security::SupportingTokenSpecification ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportingTokens : System.Collections.Generic.ICollection&lt;System.ServiceModel.Security.SupportingTokenSpecification&gt;" Usage="System.ServiceModel.OperationContext.SupportingTokens" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.ServiceModel.Security.SupportingTokenSpecification&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8955-205"><see cref="T:System.Collections.Generic.ICollection`1" /> 형식의 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-205">Gets a <see cref="T:System.Collections.Generic.ICollection`1" /> of type <see cref="T:System.IdentityModel.Tokens.SecurityToken" />.</span></span></summary>
        <value><span data-ttu-id="e8955-206">보안 토큰의 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="e8955-206">A collection of security tokens.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>