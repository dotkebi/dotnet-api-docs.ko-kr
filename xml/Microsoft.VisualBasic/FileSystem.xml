<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <Metadata><Meta Name="ms.openlocfilehash" Value="934f06896ded78a1be250bb2062ad8017ce8cb49" /><Meta Name="ms.sourcegitcommit" Value="4ee26ac79338b0bf99fa1e0913e8a06b21994d8e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/26/2019" /><Meta Name="ms.locfileid" Value="58462101" /></Metadata><TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="4e181-101"><see langword="FileSystem" /> 모듈에는 파일, 디렉터리 또는 폴더 및 시스템 작업을 수행하는 데 사용되는 프로시저가 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span></span> <span data-ttu-id="4e181-102"><see langword="My" /> 기능을 사용하면 <see langword="FileSystem" /> 모듈을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span></span> <span data-ttu-id="4e181-103">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-104">이 모듈에는 Visual Basic 언어 키워드 및 파일 및 폴더에 액세스 하는 런타임 라이브러리 멤버를 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-105">이 예제에서는 `GetAttr` 파일 및 디렉터리 또는 폴더의 특성을 결정 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/directories-and-files-summary.md"><span data-ttu-id="4e181-106">디렉터리 및 파일 요약</span><span class="sxs-lookup"><span data-stu-id="4e181-106">Directories and Files Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/input-and-output-summary.md"><span data-ttu-id="4e181-107">입력 및 출력 요약</span><span class="sxs-lookup"><span data-stu-id="4e181-107">Input and Output Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="4e181-108">키워드(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4e181-108">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="4e181-109">Visual Basic 런타임 라이브러리 멤버</span><span class="sxs-lookup"><span data-stu-id="4e181-109">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member ChDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="4e181-110">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-110">Required.</span></span> <span data-ttu-id="4e181-111">새 기본 디렉터리 또는 폴더가 될 대상을 식별하는 문자열 식입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-111">A string expression that identifies which directory or folder becomes the new default directory or folder.</span></span> <span data-ttu-id="4e181-112"><paramref name="Path" />에는 드라이브가 포함될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-112"><paramref name="Path" /> may include the drive.</span></span> <span data-ttu-id="4e181-113">드라이브를 지정하지 않은 경우 <see langword="ChDir" />을 사용하면 현재 드라이브의 기본 디렉터리나 폴더를 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-113">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span></span></param>
        <summary><span data-ttu-id="4e181-114">현재 디렉터리나 폴더를 변경합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-114">Changes the current directory or folder.</span></span> <span data-ttu-id="4e181-115"><see langword="My" /> 기능을 사용하면 <see langword="ChDir" /> 함수를 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-115">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span></span> <span data-ttu-id="4e181-116">자세한 내용은 <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-116">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-117">`ChDir` 함수의 기본 드라이브는 기본 디렉터리를 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-117">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="4e181-118">예를 들어 기본 드라이브는 C 이며, 다음 문을 D 드라이브의 기본 디렉터리 변경 되지만 C의 기본 드라이브 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-118">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="4e181-119">상대 가능 마침표 두 개를 다음과 같이 입력 하 여 디렉터리 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-119">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-120">`ChDir` 함수에 비관리 코드 권한이 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-120">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="4e181-121">자세한 내용은 참조 하세요. <xref:System.Security.Permissions.SecurityPermission> 및 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-121">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-122">이 예제에서는 `ChDir` 함수는 현재 디렉터리 또는 폴더를 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-122">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-123"><paramref name="Path" />가 비어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-123"><paramref name="Path" /> is empty.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="4e181-124">드라이브를 잘못 지정했거나 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-124">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md"><span data-ttu-id="4e181-125">방법: Visual Basic에서 파일 경로의 구문 분석</span><span class="sxs-lookup"><span data-stu-id="4e181-125">How to: Parse File Paths in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md"><span data-ttu-id="4e181-126">Visual Basic에서 파일/디렉터리 만들기, 삭제 및 이동</span><span class="sxs-lookup"><span data-stu-id="4e181-126">Creating, Deleting, and Moving Files and Directories in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4e181-127">현재 드라이브를 변경합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-127">Changes the current drive.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="4e181-128">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-128">Required.</span></span> <span data-ttu-id="4e181-129">기존 드라이브를 지정하는 문자열 식입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-129">String expression that specifies an existing drive.</span></span> <span data-ttu-id="4e181-130">길이가 0인 문자열("")을 지정하면 현재 드라이브가 변경되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-130">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="4e181-131"><paramref name="Drive" /> 인수가 여러 문자로 된 문자열인 경우 <see langword="ChDrive" />는 첫 글자만 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-131">If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="4e181-132">현재 드라이브를 변경합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-132">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-133">`ChDrive` 함수에 비관리 코드 권한이 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-133">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="4e181-134">자세한 내용은 <xref:System.Security.Permissions.SecurityPermission> 하 고 [코드 액세스 권한](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-134">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-135">이 예제에서는 `ChDrive` 함수가 현재 드라이브를 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-135">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="4e181-136">드라이브가 없는 경우 예외를 throw 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-136">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-137">드라이브를 잘못 지정했거나 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-137">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4e181-138">Visual Basic을 사용한 파일 액세스</span><span class="sxs-lookup"><span data-stu-id="4e181-138">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="4e181-139">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-139">Required.</span></span> <span data-ttu-id="4e181-140">기존 드라이브를 지정하는 문자열 식입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-140">String expression that specifies an existing drive.</span></span> <span data-ttu-id="4e181-141">길이가 0인 문자열("")을 지정하면 현재 드라이브가 변경되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-141">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="4e181-142"><paramref name="Drive" /> 인수가 여러 문자로 된 문자열인 경우 <see langword="ChDrive" />는 첫 글자만 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-142">If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="4e181-143">현재 드라이브를 변경합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-143">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-144">`ChDrive` 함수에 비관리 코드 권한이 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-144">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="4e181-145">자세한 내용은 <xref:System.Security.Permissions.SecurityPermission> 하 고 [코드 액세스 권한](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-145">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-146">이 예제에서는 `ChDrive` 함수가 현재 드라이브를 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-146">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="4e181-147">드라이브가 없는 경우 예외를 throw 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-147">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-148">드라이브를 잘못 지정했거나 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-148">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4e181-149">Visual Basic을 사용한 파일 액세스</span><span class="sxs-lookup"><span data-stu-id="4e181-149">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4e181-150">현재 경로를 나타내는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-150">Returns a string representing the current path.</span></span> <span data-ttu-id="4e181-151"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 사용하면 <see langword="CurDir" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-151">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="4e181-152">자세한 내용은 <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-152">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberSignature Language="F#" Value="static member CurDir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4e181-153">현재 경로를 나타내는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-153">Returns a string representing the current path.</span></span> <span data-ttu-id="4e181-154"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 사용하면 <see langword="CurDir" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="4e181-155">자세한 내용은 <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="4e181-156">현재 경로를 나타내는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-156">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4e181-157">이 예제에서는 `CurDir` 현재 경로 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberSignature Language="F#" Value="static member CurDir : char -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="4e181-158">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-158">Optional.</span></span> <span data-ttu-id="4e181-159">기존 드라이브를 지정하는 <see langword="Char" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-159"><see langword="Char" /> expression that specifies an existing drive.</span></span> <span data-ttu-id="4e181-160">드라이브를 지정하지 않거나 <paramref name="Drive" />가 길이가 0인 문자열("")인 경우 <see langword="CurDir" />은 현재 드라이브에 대한 경로를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-160">If no drive is specified, or if <paramref name="Drive" /> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span></span></param>
        <summary><span data-ttu-id="4e181-161">현재 경로를 나타내는 문자열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-161">Returns a string representing the current path.</span></span> <span data-ttu-id="4e181-162"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 사용하면 <see langword="CurDir" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="4e181-163">자세한 내용은 <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-163">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="4e181-164">현재 경로를 나타내는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-164">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4e181-165">이 예제에서는 `CurDir` 현재 경로 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-165">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4e181-166">지정한 패턴이나 파일 특성과 일치하는 파일, 디렉터리 또는 폴더의 이름을 나타내는 문자열 또는 드라이브의 볼륨 레이블을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-166">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="4e181-167"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 사용하면 <see langword="Dir" /> 함수를 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-167">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="4e181-168">자세한 내용은 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="4e181-168">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberSignature Language="F#" Value="static member Dir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4e181-169">지정한 패턴이나 파일 특성과 일치하는 파일, 디렉터리 또는 폴더의 이름을 나타내는 문자열 또는 드라이브의 볼륨 레이블을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-169">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="4e181-170"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 사용하면 <see langword="Dir" /> 함수를 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-170">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="4e181-171">자세한 내용은 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="4e181-171">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="4e181-172">지정된 패턴이나 파일 특성과 일치하는 파일, 디렉터리 또는 폴더의 이름을 나타내는 문자열 또는 드라이브의 볼륨 레이블입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-172">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-173">합니다 `Dir` 함수에서 여러 문자를 사용할 수 (`*`) 및 단일 문자 (`?`) 와일드 카드를 여러 파일을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-173">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="4e181-174">`VbVolume` 특정 파일 이름 대신 드라이브 볼륨 레이블을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-174">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="4e181-175">제공 해야 합니다는 `PathName` 호출 하는 처음으로 `Dir` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-175">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="4e181-176">다음 항목을 검색 하려면 후속 호출을 수행할 수는 `Dir` 함수 매개 변수 없이 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-176">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-177">올바르게 실행 하려면를 `Dir` 함수에 필요 합니다 <xref:System.Security.Permissions.FileIOPermissionAccess.Read> 및 <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> 의 플래그 <xref:System.Security.Permissions.FileIOPermission> 실행 코드에 부여할.</span><span class="sxs-lookup"><span data-stu-id="4e181-177">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="4e181-178">자세한 내용은 <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, 및 [코드 액세스 권한](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-178">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="4e181-179">`Attributes` 인수 열거형 값은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-179">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="4e181-180">값</span><span class="sxs-lookup"><span data-stu-id="4e181-180">Value</span></span>|<span data-ttu-id="4e181-181">상수</span><span class="sxs-lookup"><span data-stu-id="4e181-181">Constant</span></span>|<span data-ttu-id="4e181-182">설명</span><span class="sxs-lookup"><span data-stu-id="4e181-182">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="4e181-183">기본.</span><span class="sxs-lookup"><span data-stu-id="4e181-183">Default.</span></span> <span data-ttu-id="4e181-184">특성이 없는 파일을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-184">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="4e181-185">읽기 전용 파일, 그리고 특성이 없는 파일을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-185">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="4e181-186">숨겨진된 파일 및 특성이 없는 파일을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-186">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="4e181-187">시스템 파일 및 특성이 없는 파일을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-187">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="4e181-188">볼륨 레이블이 지정 다른 특성을 지정 하는 경우 `vbVolume` 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-188">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="4e181-189">디렉터리 또는 폴더 및 특성이 없는 파일을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-189">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="4e181-190">마지막 백업 이후에 파일이 변경되었습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-190">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="4e181-191">파일에 다른 이름이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-191">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="4e181-192">이러한 열거형은 Visual Basic 언어로 지정 되며 실제 값 대신 코드에서 어디서 나 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-192">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-193">이 예제에서는 `Dir` 특정 파일 및 디렉터리가 존재 하는지 확인 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-193">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string Pathname, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir(string Pathname, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (Pathname As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" FrameworkAlternate="netframework-2.0;netframework-1.1" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" FrameworkAlternate="netframework-2.0;netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" Index="1" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="4e181-194">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-194">Optional.</span></span> <span data-ttu-id="4e181-195">파일 이름, 디렉터리나 폴더 이름 또는 드라이브 볼륨 레이블을 지정하는 문자열 식입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-195">A string expression that specifies a file name, directory or folder name, or drive volume label.</span></span> <span data-ttu-id="4e181-196"><paramref name="PathName" />이 없으면 길이가 0인 문자열(<see langword="&quot;&quot;" />)이 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-196">A zero-length string (<see langword="&quot;&quot;" />) is returned if <paramref name="PathName" /> is not found.</span></span></param>
        <param name="Pathname"><span data-ttu-id="4e181-197">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-197">Optional.</span></span> <span data-ttu-id="4e181-198">파일 이름, 디렉터리나 폴더 이름 또는 드라이브 볼륨 레이블을 지정하는 문자열 식입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-198">A string expression that specifies a file name, directory or folder name, or drive volume label.</span></span> <span data-ttu-id="4e181-199"><paramref name="Pathname" />이 없으면 길이가 0인 문자열(<see langword="&quot;&quot;" />)이 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-199">A zero-length string (<see langword="&quot;&quot;" />) is returned if <paramref name="Pathname" /> is not found.</span></span></param>
        <param name="Attributes"><span data-ttu-id="4e181-200">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-200">Optional.</span></span> <span data-ttu-id="4e181-201">파일 특성을 지정하는 값을 가진 열거형 또는 숫자 식입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-201">Enumeration or numeric expression whose value specifies file attributes.</span></span> <span data-ttu-id="4e181-202">이 매개 변수를 생략하면 <see langword="Dir" />는 <paramref name="Pathname" />과 일치하지만 특성이 없는 파일을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-202">If omitted, <see langword="Dir" /> returns files that match <paramref name="Pathname" /> but have no attributes.</span></span></param>
        <summary><span data-ttu-id="4e181-203">지정한 패턴이나 파일 특성과 일치하는 파일, 디렉터리 또는 폴더의 이름을 나타내는 문자열 또는 드라이브의 볼륨 레이블을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-203">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="4e181-204"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 사용하면 <see langword="Dir" /> 함수를 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-204">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="4e181-205">자세한 내용은 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="4e181-205">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="4e181-206">지정된 패턴이나 파일 특성과 일치하는 파일, 디렉터리 또는 폴더의 이름을 나타내는 문자열 또는 드라이브의 볼륨 레이블입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-206">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-207">합니다 `Dir` 함수에서 여러 문자를 사용할 수 (`*`) 및 단일 문자 (`?`) 와일드 카드를 여러 파일을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-207">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="4e181-208">`VbVolume` 특정 파일 이름 대신 드라이브 볼륨 레이블을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-208">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="4e181-209">제공 해야 합니다는 `PathName` 호출 하는 처음으로 `Dir` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-209">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="4e181-210">다음 항목을 검색 하려면 후속 호출을 수행할 수는 `Dir` 함수 매개 변수 없이 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-210">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-211">올바르게 실행 하려면를 `Dir` 함수에 필요 합니다 <xref:System.Security.Permissions.FileIOPermissionAccess.Read> 및 <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> 의 플래그 <xref:System.Security.Permissions.FileIOPermission> 실행 코드에 부여할.</span><span class="sxs-lookup"><span data-stu-id="4e181-211">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="4e181-212">자세한 내용은 <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, 및 [코드 액세스 권한](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-212">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="4e181-213">`Attributes` 인수 열거형 값은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-213">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="4e181-214">값</span><span class="sxs-lookup"><span data-stu-id="4e181-214">Value</span></span>|<span data-ttu-id="4e181-215">상수</span><span class="sxs-lookup"><span data-stu-id="4e181-215">Constant</span></span>|<span data-ttu-id="4e181-216">설명</span><span class="sxs-lookup"><span data-stu-id="4e181-216">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="4e181-217">기본.</span><span class="sxs-lookup"><span data-stu-id="4e181-217">Default.</span></span> <span data-ttu-id="4e181-218">특성이 없는 파일을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-218">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="4e181-219">특성이 없는 파일 외에도 읽기 전용 파일을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-219">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="4e181-220">특성이 없는 파일 외에도 숨겨진된 파일을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-220">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="4e181-221">특성이 없는 파일 외에도 시스템 파일을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-221">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="4e181-222">볼륨 레이블이 지정 다른 특성을 지정 하는 경우 `vbVolume` 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-222">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="4e181-223">디렉터리 또는 특성이 없는 파일 뿐 아니라 폴더를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-223">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="4e181-224">마지막 백업 이후에 파일이 변경되었습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-224">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="4e181-225">파일에 다른 이름이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-225">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="4e181-226">이러한 열거형은 Visual Basic 언어로 지정 되며 실제 값 대신 코드에서 어디서 나 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-226">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-227">이 예제에서는 `Dir` 특정 파일 및 디렉터리가 존재 하는지 확인 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-227">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member EOF : int -&gt; bool" Usage="Microsoft.VisualBasic.FileSystem.EOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-228">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-228">Required.</span></span> <span data-ttu-id="4e181-229">유효한 파일 번호가 포함된 <see langword="Integer" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-229">An <see langword="Integer" /> that contains any valid file number.</span></span></param>
        <summary><span data-ttu-id="4e181-230"><see langword="True" /> 또는 순차적인 <see langword="Random" />용으로 연 파일의 끝에 도달하면 부울 값 <see langword="Input" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-230">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></summary>
        <returns><span data-ttu-id="4e181-231"><see langword="Random" /> 또는 순차적인 <see langword="Input" />용으로 연 파일의 끝에 도달하면 부울 값 <see langword="True" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-231">A Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-232">사용 하 여 `EOF` 파일의 끝을 지난 위치 입력 하 여 생성 된 오류를 방지 하려면.</span><span class="sxs-lookup"><span data-stu-id="4e181-232">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="4e181-233">합니다 `EOF` 함수에서 반환 `False` 파일의 끝에 도달할 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-233">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="4e181-234">열려 있는 파일을 사용 하 여 `Random` 또는 `Binary` 액세스 `EOF` 반환 `False` 마지막으로 실행 될 때까지 `FileGet` 함수는 전체 레코드를 읽을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-234">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="4e181-235">열려 있는 파일을 사용 하 여 `Binary` 를 사용 하 여 파일을 통해 읽으려는 시도가 액세스 합니다 `Input` 될 때까지 함수 `EOF` 반환 `True` 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-235">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="4e181-236">사용 합니다 `LOF` 및 `Loc` 대신 함수 `EOF` 사용 하 여 이진 파일을 읽을 때 `Input`, 사용할지 `Get` 사용 하는 경우는 `EOF` 함수.</span><span class="sxs-lookup"><span data-stu-id="4e181-236">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="4e181-237">열려 있는 파일을 사용 하 여 `Output`하십시오 `EOF` 항상 반환 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-237">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-238">이 예제에서는 `EOF` 함수는 파일의 끝을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-238">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="4e181-239">이 예에서는 가정 `Testfile` 은 여러 줄의 텍스트를 포함 하는 텍스트 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-239">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-240">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-240">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member FileAttr : int -&gt; Microsoft.VisualBasic.OpenMode" Usage="Microsoft.VisualBasic.FileSystem.FileAttr FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-241">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-241">Required.</span></span> <span data-ttu-id="4e181-242"><see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="4e181-242"><see langword="Integer" />.</span></span> <span data-ttu-id="4e181-243">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-243">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="4e181-244"><see langword="FileOpen" /> 함수를 사용하여 연 파일의 파일 모드를 나타내는 열거형을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-244">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="4e181-245"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 사용하면 <see langword="FileAttr" /> 함수를 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-245">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span></span> <span data-ttu-id="4e181-246">자세한 내용은 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="4e181-246">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="4e181-247">다음 열거형 값은 파일 액세스 모드를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-247">The following enumeration values indicate the file access mode:</span></span> 
 <list type="table"><item><term> <span data-ttu-id="4e181-248">값</span><span class="sxs-lookup"><span data-stu-id="4e181-248">Value</span></span> 
 </term><description> <span data-ttu-id="4e181-249">모드</span><span class="sxs-lookup"><span data-stu-id="4e181-249">Mode</span></span> 
 </description></item><item><term> <span data-ttu-id="4e181-250">1</span><span class="sxs-lookup"><span data-stu-id="4e181-250">1</span></span> 
 </term><description><see langword="OpenMode.Input" /></description></item><item><term> <span data-ttu-id="4e181-251">2</span><span class="sxs-lookup"><span data-stu-id="4e181-251">2</span></span> 
 </term><description><see langword="OpenMode.Output" /></description></item><item><term> <span data-ttu-id="4e181-252">4</span><span class="sxs-lookup"><span data-stu-id="4e181-252">4</span></span> 
 </term><description><see langword="OpenMode.Random" /></description></item><item><term> <span data-ttu-id="4e181-253">8</span><span class="sxs-lookup"><span data-stu-id="4e181-253">8</span></span> 
 </term><description><see langword="OpenMode.Append" /></description></item><item><term> <span data-ttu-id="4e181-254">32</span><span class="sxs-lookup"><span data-stu-id="4e181-254">32</span></span> 
 </term><description><see langword="OpenMode.Binary" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-255">이 함수를 사용 하 여 연 파일의 파일 모드를 나타내는 열거형을 반환 합니다 `FileOpen` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-255">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-256">이 예제에서는 `FileAttr` 함수는 열려 있는 파일의 파일 모드를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-256">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4e181-257">Visual Basic을 사용한 파일 액세스</span><span class="sxs-lookup"><span data-stu-id="4e181-257">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberSignature Language="F#" Value="static member FileClose : int[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileClose FileNumbers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers"><span data-ttu-id="4e181-258">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-258">Optional.</span></span> <span data-ttu-id="4e181-259">닫을 0개 이상의 채널에 대한 매개 변수 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-259">Parameter array of 0 or more channels to be closed.</span></span></param>
        <summary><span data-ttu-id="4e181-260"><see langword="FileOpen" /> 함수를 사용하여 연 파일에 대한 입출력(I/O)을 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-260">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="4e181-261"><see langword="My" />를 사용하면 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-261"><see langword="My" /> gives you better productivity and performance in file I/O operations.</span></span> <span data-ttu-id="4e181-262">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="4e181-262">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-263">`FileClose` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-263">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4e181-264">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-264">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4e181-265">자세한 내용은 [방법: StreamReader 사용 하 여 파일에서 텍스트를 읽는](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md), [방법: StreamWriter 사용 하 여 파일에 텍스트 쓰기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), 및 [연습: Visual Basic에서 파일과 디렉터리 조작](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-265">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md), [How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="4e181-266">생략 하면 `FileNumbers`, 모든 활성 파일을 열어는 `FileOpen` 함수 닫힙니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-266">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="4e181-267">에 대해 시작 된 파일을 닫으면 `Output` 또는 `Append`, 출력의 마지막 버퍼 해당 파일에 대 한 운영 체제 버퍼에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-267">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="4e181-268">닫힌와 연결 된 공간 버퍼 모든 파일을 배포 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-268">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="4e181-269">경우는 `FileClose` 함수 실행 되 고, 해당 파일을 사용 하 여 파일의 연결 끝 번호.</span><span class="sxs-lookup"><span data-stu-id="4e181-269">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-270">이 예제에서는 합니다 `FileClose` 파일을 닫으려면 함수에 대 한 열 `Input`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-270">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-271"><paramref name="FileNumber" />가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-271"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md"><span data-ttu-id="4e181-272">End 문</span><span class="sxs-lookup"><span data-stu-id="4e181-272">End Statement</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/stop-statement.md"><span data-ttu-id="4e181-273">Stop 문(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4e181-273">Stop Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4e181-274">Visual Basic을 사용한 파일 액세스</span><span class="sxs-lookup"><span data-stu-id="4e181-274">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberSignature Language="F#" Value="static member FileCopy : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileCopy (Source, Destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="4e181-275">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-275">Required.</span></span> <span data-ttu-id="4e181-276">복사할 파일의 이름을 지정하는 문자열 식입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-276">A string expression that specifies the name of the file to be copied.</span></span> <span data-ttu-id="4e181-277"><paramref name="Source" />에는 소스 파일의 디렉터리나 폴더 및 드라이브가 포함될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-277"><paramref name="Source" /> may include the directory or folder, and drive, of the source file.</span></span></param>
        <param name="Destination"><span data-ttu-id="4e181-278">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-278">Required.</span></span> <span data-ttu-id="4e181-279">대상 파일 이름을 지정하는 문자열 식입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-279">A string expression that specifies the destination file name.</span></span> <span data-ttu-id="4e181-280"><paramref name="Destination" />에는 대상 파일의 디렉터리나 폴더 및 드라이브가 포함될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-280"><paramref name="Destination" /> may include the directory or folder, and drive, of the destination file.</span></span></param>
        <summary><span data-ttu-id="4e181-281">파일을 복사합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-281">Copies a file.</span></span> <span data-ttu-id="4e181-282"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 사용하면 <see langword="FileCopy" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-282">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span></span> <span data-ttu-id="4e181-283">자세한 내용은 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="4e181-283">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-284">사용 하려는 경우는 `FileCopy` 오류가 발생 하는 현재 열려 있는 파일에서 작동 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-284">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="4e181-285">`FileCopy` 로컬 드라이브에서 작동 하려면 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-285">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-286">이 예제에서는 `FileCopy` 다른 하나의 파일을 복사 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-286">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="4e181-287">이 예제의 목적에 대 한 가정 `SrcFile` 는 데이터가 포함 된 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-287">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-288"><paramref name="Source" /> 또는 <paramref name="Destination" />이 잘못되었거나 지정되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-288"><paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-289">파일이 이미 열려 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-289">File is already open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="4e181-290">파일이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-290">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md"><span data-ttu-id="4e181-291">방법: Visual Basic에서 다른 디렉터리에 파일의 복사본 만들기</span><span class="sxs-lookup"><span data-stu-id="4e181-291">How to: Create a Copy of a File in a Different Directory in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md"><span data-ttu-id="4e181-292">방법: Visual Basic에서 동일한 디렉터리에 파일의 복사본 만들기</span><span class="sxs-lookup"><span data-stu-id="4e181-292">How to: Create a Copy of a File in the Same Directory in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md"><span data-ttu-id="4e181-293">방법: Visual Basic에서 디렉터리를 다른 디렉터리에 복사</span><span class="sxs-lookup"><span data-stu-id="4e181-293">How to: Copy a Directory to Another Directory in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileDateTime : string -&gt; DateTime" Usage="Microsoft.VisualBasic.FileSystem.FileDateTime PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="4e181-294">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-294">Required.</span></span> <span data-ttu-id="4e181-295">파일 이름을 지정하는 문자열 식입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-295">A string expression that specifies a file name.</span></span> <span data-ttu-id="4e181-296"><paramref name="PathName" />은 디렉터리 또는 폴더와 드라이브를 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-296"><paramref name="PathName" /> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="4e181-297">파일을 기록한 날짜와 시간을 나타내는 <see langword="Date" /> 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-297">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span></span> <span data-ttu-id="4e181-298"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileDateTime" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-298">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span></span> <span data-ttu-id="4e181-299">자세한 내용은 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="4e181-299">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span></span></summary>
        <returns><span data-ttu-id="4e181-300">파일을 만들거나 마지막으로 수정한 날짜와 시간을 나타내는 <see langword="Date" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-300"><see langword="Date" /> value that indicates the date and time a file was created or last modified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4e181-301">이 예제에서는 `FileDateTime` 함수는 날짜를 확인 하 고 파일 시간를 만들었거나 마지막으로 수정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-301">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="4e181-302">형식의 날짜 및 시간 표시는 시스템의 로캘 설정을 기반으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-302">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-303"><paramref name="PathName" />이 잘못되었거나 와일드카드를 포함하고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-303"><paramref name="PathName" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="4e181-304">대상 파일이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-304">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4e181-305">Visual Basic을 사용한 파일 액세스</span><span class="sxs-lookup"><span data-stu-id="4e181-305">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4e181-306">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-306">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="4e181-307"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-307">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="4e181-308">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-308">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-309">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-309">Required.</span></span> <span data-ttu-id="4e181-310">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-310">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-311">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-311">Required.</span></span> <span data-ttu-id="4e181-312">데이터를 읽어오는 올바른 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-312">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4e181-313">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-313">Optional.</span></span> <span data-ttu-id="4e181-314">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-314">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="4e181-315">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-315">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="4e181-316"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-316">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="4e181-317">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="4e181-317">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-318">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-318">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4e181-319">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-319">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="4e181-320">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-320">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4e181-321">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-321">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-322">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-322">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="4e181-323">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-323">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4e181-324">임의 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-324">Random Mode</span></span>  
 <span data-ttu-id="4e181-325">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-325">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4e181-326">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-326">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4e181-327">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-327">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4e181-328">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-328">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4e181-329">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-329">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="4e181-330">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-330">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4e181-331">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-331">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="4e181-332">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="4e181-332">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4e181-333">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-333">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="4e181-334">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-334">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4e181-335">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-335">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="4e181-336">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-336">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="4e181-337">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-337">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="4e181-338">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-338">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4e181-339">길이가 2 + 8 시간 차원 수를 같습니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-339">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-340">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-340">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4e181-341">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-341">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="4e181-342">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-342">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="4e181-343">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="4e181-343">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="4e181-344">데이터에 대해 200 바이트. (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="4e181-344">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="4e181-345">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-345">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="4e181-346">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-346">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4e181-347">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-347">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="4e181-348">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`)는 설명자가 2 + 8 시간 차원 수가 옵니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-348">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-349">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-349">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="4e181-350">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-350">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="4e181-351">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-351">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4e181-352">이진 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-352">Binary Mode</span></span>  
 <span data-ttu-id="4e181-353">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-353">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4e181-354">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="4e181-354">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4e181-355">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-355">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4e181-356">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-356">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4e181-357">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-357">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="4e181-358">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-358">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="4e181-359">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-359">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="4e181-360">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-360">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="4e181-361">사용 하 여 파일에서 읽기를`FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-361">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-362"><paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-362"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-363">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-363">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4e181-364">Visual Basic에서 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="4e181-364">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-365">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-365">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-366">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-366">Required.</span></span> <span data-ttu-id="4e181-367">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-367">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-368">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-368">Required.</span></span> <span data-ttu-id="4e181-369">데이터를 읽어오는 올바른 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-369">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4e181-370">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-370">Optional.</span></span> <span data-ttu-id="4e181-371">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-371">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="4e181-372">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-372">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="4e181-373"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-373">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="4e181-374">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-374">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-375">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-375">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4e181-376">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-376">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="4e181-377">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-377">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4e181-378">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-378">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-379">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-379">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="4e181-380">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-380">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4e181-381">임의 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-381">Random Mode</span></span>  
 <span data-ttu-id="4e181-382">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-382">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4e181-383">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-383">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4e181-384">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-384">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4e181-385">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-385">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4e181-386">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-386">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="4e181-387">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-387">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4e181-388">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-388">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="4e181-389">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="4e181-389">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4e181-390">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-390">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="4e181-391">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-391">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4e181-392">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-392">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="4e181-393">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-393">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="4e181-394">설명자를 사용 하지 않으면.</span><span class="sxs-lookup"><span data-stu-id="4e181-394">If the descriptor is not used.</span></span> <span data-ttu-id="4e181-395">에 전달 된 크기와 배열 범위를 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-395">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="4e181-396">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-396">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4e181-397">길이가 2 + 8 시간 차원 수를 같습니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-397">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-398">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-398">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4e181-399">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-399">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="4e181-400">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-400">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="4e181-401">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="4e181-401">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="4e181-402">데이터에 대해 200 바이트. (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="4e181-402">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="4e181-403">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-403">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="4e181-404">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-404">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4e181-405">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-405">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="4e181-406">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`)는 설명자가 2 + 8 시간 차원 수가 옵니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-406">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-407">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-407">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="4e181-408">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-408">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="4e181-409">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-409">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4e181-410">이진 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-410">Binary Mode</span></span>  
 <span data-ttu-id="4e181-411">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-411">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4e181-412">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="4e181-412">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4e181-413">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-413">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4e181-414">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-414">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4e181-415">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-415">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="4e181-416">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-416">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="4e181-417">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-417">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="4e181-418">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-418">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="4e181-419">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-419">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-420"><paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-420"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-421">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-421">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4e181-422">Visual Basic에서 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="4e181-422">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-423">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-423">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-424">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-424">Required.</span></span> <span data-ttu-id="4e181-425">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-425">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-426">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-426">Required.</span></span> <span data-ttu-id="4e181-427">데이터를 읽어오는 올바른 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-427">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4e181-428">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-428">Optional.</span></span> <span data-ttu-id="4e181-429">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-429">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="4e181-430">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-430">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="4e181-431"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-431">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="4e181-432">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-432">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-433">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-433">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4e181-434">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-434">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="4e181-435">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-435">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4e181-436">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-436">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-437">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-437">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="4e181-438">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-438">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4e181-439">임의 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-439">Random Mode</span></span>  
 <span data-ttu-id="4e181-440">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-440">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4e181-441">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-441">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4e181-442">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-442">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4e181-443">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-443">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4e181-444">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-444">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="4e181-445">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-445">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4e181-446">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-446">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="4e181-447">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="4e181-447">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4e181-448">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-448">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="4e181-449">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-449">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4e181-450">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-450">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="4e181-451">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-451">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="4e181-452">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-452">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="4e181-453">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-453">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4e181-454">길이가 2 + 8 시간 차원 수를 같습니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-454">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-455">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-455">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4e181-456">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-456">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="4e181-457">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-457">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="4e181-458">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="4e181-458">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="4e181-459">데이터에 대해 200 바이트. (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="4e181-459">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="4e181-460">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-460">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="4e181-461">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-461">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4e181-462">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-462">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="4e181-463">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`)는 설명자가 2 + 8 시간 차원 수가 옵니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-463">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-464">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-464">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="4e181-465">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-465">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="4e181-466">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-466">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4e181-467">이진 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-467">Binary Mode</span></span>  
 <span data-ttu-id="4e181-468">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-468">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4e181-469">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="4e181-469">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4e181-470">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-470">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4e181-471">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-471">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4e181-472">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-472">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="4e181-473">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-473">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="4e181-474">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-474">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="4e181-475">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-475">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="4e181-476">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-476">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-477"><paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-477"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-478">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-478">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4e181-479">Visual Basic에서 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="4e181-479">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-480">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-480">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-481">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-481">Required.</span></span> <span data-ttu-id="4e181-482">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-482">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-483">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-483">Required.</span></span> <span data-ttu-id="4e181-484">데이터를 읽어오는 올바른 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-484">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4e181-485">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-485">Optional.</span></span> <span data-ttu-id="4e181-486">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-486">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="4e181-487">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-487">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="4e181-488"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-488">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="4e181-489">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-489">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-490">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-490">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4e181-491">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-491">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="4e181-492">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-492">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4e181-493">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-493">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-494">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-494">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="4e181-495">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-495">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4e181-496">임의 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-496">Random Mode</span></span>  
 <span data-ttu-id="4e181-497">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-497">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4e181-498">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를`FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-498">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4e181-499">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-499">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4e181-500">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-500">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4e181-501">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-501">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="4e181-502">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-502">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4e181-503">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-503">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="4e181-504">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="4e181-504">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4e181-505">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-505">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="4e181-506">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-506">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4e181-507">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-507">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="4e181-508">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-508">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="4e181-509">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-509">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="4e181-510">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-510">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4e181-511">길이가 2 + 8 시간 차원 수를 같습니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-511">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-512">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-512">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4e181-513">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-513">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="4e181-514">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-514">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="4e181-515">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="4e181-515">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="4e181-516">데이터에 대해 200 바이트. (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="4e181-516">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="4e181-517">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-517">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="4e181-518">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-518">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4e181-519">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-519">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="4e181-520">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`)는 설명자가 2 + 8 시간 차원 수가 옵니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-520">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-521">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-521">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="4e181-522">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-522">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="4e181-523">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-523">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4e181-524">이진 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-524">Binary Mode</span></span>  
 <span data-ttu-id="4e181-525">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-525">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4e181-526">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="4e181-526">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4e181-527">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-527">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4e181-528">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-528">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4e181-529">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-529">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="4e181-530">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-530">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="4e181-531">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-531">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="4e181-532">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-532">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="4e181-533">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-533">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-534"><paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-534"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-535">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-535">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4e181-536">Visual Basic에서 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="4e181-536">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-537">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-537">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-538">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-538">Required.</span></span> <span data-ttu-id="4e181-539">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-539">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-540">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-540">Required.</span></span> <span data-ttu-id="4e181-541">데이터를 읽어오는 올바른 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-541">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4e181-542">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-542">Optional.</span></span> <span data-ttu-id="4e181-543">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-543">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="4e181-544">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-544">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="4e181-545"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-545">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="4e181-546">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-546">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-547">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-547">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4e181-548">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-548">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="4e181-549">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-549">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4e181-550">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-550">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-551">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-551">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="4e181-552">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-552">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4e181-553">임의 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-553">Random Mode</span></span>  
 <span data-ttu-id="4e181-554">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-554">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4e181-555">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-555">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4e181-556">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-556">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4e181-557">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-557">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4e181-558">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-558">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="4e181-559">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-559">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4e181-560">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-560">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="4e181-561">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="4e181-561">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4e181-562">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-562">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="4e181-563">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-563">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4e181-564">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-564">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="4e181-565">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-565">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="4e181-566">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-566">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="4e181-567">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-567">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4e181-568">길이가 2 + 8 시간 차원 수를 같습니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-568">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-569">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-569">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4e181-570">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-570">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="4e181-571">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-571">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="4e181-572">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="4e181-572">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="4e181-573">데이터에 대해 200 바이트. (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="4e181-573">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="4e181-574">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-574">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="4e181-575">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-575">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4e181-576">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-576">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="4e181-577">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`)는 설명자가 2 + 8 시간 차원 수가 옵니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-577">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-578">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-578">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="4e181-579">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-579">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="4e181-580">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-580">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4e181-581">이진 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-581">Binary Mode</span></span>  
 <span data-ttu-id="4e181-582">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-582">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4e181-583">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="4e181-583">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4e181-584">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-584">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4e181-585">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-585">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4e181-586">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-586">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="4e181-587">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-587">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="4e181-588">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-588">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="4e181-589">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-589">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="4e181-590">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-590">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-591"><paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-591"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-592">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-592">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4e181-593">Visual Basic에서 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="4e181-593">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-594">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-594">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-595">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-595">Required.</span></span> <span data-ttu-id="4e181-596">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-596">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-597">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-597">Required.</span></span> <span data-ttu-id="4e181-598">데이터를 읽어오는 올바른 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-598">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4e181-599">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-599">Optional.</span></span> <span data-ttu-id="4e181-600">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-600">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="4e181-601">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-601">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="4e181-602"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-602">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="4e181-603">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-603">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-604">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-604">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4e181-605">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-605">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="4e181-606">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-606">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4e181-607">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-607">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-608">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-608">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="4e181-609">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-609">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4e181-610">임의 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-610">Random Mode</span></span>  
 <span data-ttu-id="4e181-611">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-611">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4e181-612">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-612">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4e181-613">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-613">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4e181-614">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-614">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4e181-615">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-615">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="4e181-616">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-616">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4e181-617">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-617">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="4e181-618">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="4e181-618">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4e181-619">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-619">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="4e181-620">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-620">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4e181-621">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-621">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="4e181-622">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-622">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="4e181-623">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-623">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="4e181-624">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-624">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4e181-625">길이가 2 + 8 시간 차원 수를 같습니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-625">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-626">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-626">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4e181-627">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-627">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="4e181-628">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-628">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="4e181-629">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="4e181-629">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="4e181-630">데이터에 대해 200 바이트. (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="4e181-630">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="4e181-631">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-631">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="4e181-632">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-632">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4e181-633">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-633">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="4e181-634">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`)는 설명자가 2 + 8 시간 차원 수가 옵니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-634">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-635">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-635">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="4e181-636">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-636">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="4e181-637">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-637">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4e181-638">이진 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-638">Binary Mode</span></span>  
 <span data-ttu-id="4e181-639">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-639">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4e181-640">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="4e181-640">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4e181-641">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-641">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4e181-642">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-642">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4e181-643">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-643">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="4e181-644">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-644">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="4e181-645">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-645">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="4e181-646">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-646">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="4e181-647">사용 하 여 파일에서 읽기를`FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-647">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-648"><paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-648"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-649">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-649">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4e181-650">Visual Basic에서 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="4e181-650">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-651">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-651">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-652">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-652">Required.</span></span> <span data-ttu-id="4e181-653">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-653">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-654">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-654">Required.</span></span> <span data-ttu-id="4e181-655">데이터를 읽어오는 올바른 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-655">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4e181-656">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-656">Optional.</span></span> <span data-ttu-id="4e181-657">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-657">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="4e181-658">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-658">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="4e181-659"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-659">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="4e181-660">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-660">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-661">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-661">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4e181-662">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-662">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="4e181-663">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-663">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4e181-664">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-664">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-665">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-665">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="4e181-666">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-666">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4e181-667">임의 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-667">Random Mode</span></span>  
 <span data-ttu-id="4e181-668">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-668">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4e181-669">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-669">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4e181-670">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-670">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4e181-671">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-671">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4e181-672">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-672">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="4e181-673">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-673">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4e181-674">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-674">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="4e181-675">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="4e181-675">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4e181-676">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-676">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="4e181-677">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-677">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4e181-678">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-678">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="4e181-679">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-679">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="4e181-680">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-680">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="4e181-681">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-681">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4e181-682">길이가 2 + 8 시간 차원 수를 같습니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-682">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-683">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-683">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4e181-684">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-684">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="4e181-685">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-685">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="4e181-686">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="4e181-686">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="4e181-687">데이터에 대해 200 바이트. (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="4e181-687">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="4e181-688">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-688">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="4e181-689">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4e181-690">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-690">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="4e181-691">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`)는 설명자가 2 + 8 시간 차원 수가 옵니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-691">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-692">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-692">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="4e181-693">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-693">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="4e181-694">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-694">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4e181-695">이진 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-695">Binary Mode</span></span>  
 <span data-ttu-id="4e181-696">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-696">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4e181-697">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="4e181-697">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4e181-698">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-698">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4e181-699">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-699">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4e181-700">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-700">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="4e181-701">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-701">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="4e181-702">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-702">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="4e181-703">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-703">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="4e181-704">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-704">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-705"><paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-705"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-706">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-706">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4e181-707">Visual Basic에서 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="4e181-707">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-708">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-708">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-709">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-709">Required.</span></span> <span data-ttu-id="4e181-710">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-710">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-711">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-711">Required.</span></span> <span data-ttu-id="4e181-712">데이터를 읽어오는 올바른 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-712">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4e181-713">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-713">Optional.</span></span> <span data-ttu-id="4e181-714">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-714">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="4e181-715">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-715">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="4e181-716"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-716">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="4e181-717">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-717">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-718">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-718">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4e181-719">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-719">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="4e181-720">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-720">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4e181-721">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-721">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-722">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-722">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="4e181-723">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-723">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4e181-724">임의 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-724">Random Mode</span></span>  
 <span data-ttu-id="4e181-725">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-725">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4e181-726">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-726">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4e181-727">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-727">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4e181-728">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-728">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4e181-729">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-729">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="4e181-730">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-730">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4e181-731">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-731">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="4e181-732">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="4e181-732">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4e181-733">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-733">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="4e181-734">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-734">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4e181-735">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-735">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="4e181-736">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-736">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="4e181-737">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-737">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="4e181-738">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-738">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4e181-739">길이가 2 + 8 시간 차원 수를 같습니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-739">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-740">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-740">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4e181-741">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-741">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="4e181-742">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-742">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="4e181-743">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="4e181-743">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="4e181-744">데이터에 대해 200 바이트. (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="4e181-744">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="4e181-745">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-745">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="4e181-746">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4e181-747">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-747">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="4e181-748">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`)는 설명자가 2 + 8 시간 차원 수가 옵니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-748">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-749">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="4e181-750">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-750">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="4e181-751">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-751">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4e181-752">이진 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-752">Binary Mode</span></span>  
 <span data-ttu-id="4e181-753">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-753">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4e181-754">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="4e181-754">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4e181-755">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-755">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4e181-756">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-756">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4e181-757">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-757">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="4e181-758">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-758">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="4e181-759">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-759">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="4e181-760">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-760">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="4e181-761">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-761">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-762"><paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-762"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-763">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-763">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4e181-764">Visual Basic에서 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="4e181-764">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-765">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-765">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-766">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-766">Required.</span></span> <span data-ttu-id="4e181-767">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-767">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-768">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-768">Required.</span></span> <span data-ttu-id="4e181-769">데이터를 읽어오는 올바른 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-769">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4e181-770">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-770">Optional.</span></span> <span data-ttu-id="4e181-771">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-771">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="4e181-772">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-772">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="4e181-773"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-773">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="4e181-774">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-774">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-775">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-775">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4e181-776">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-776">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="4e181-777">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-777">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4e181-778">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-778">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-779">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-779">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="4e181-780">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-780">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4e181-781">임의 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-781">Random Mode</span></span>  
 <span data-ttu-id="4e181-782">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-782">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4e181-783">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-783">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4e181-784">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-784">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4e181-785">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-785">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4e181-786">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-786">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="4e181-787">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-787">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4e181-788">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-788">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="4e181-789">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="4e181-789">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4e181-790">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-790">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="4e181-791">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-791">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4e181-792">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-792">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="4e181-793">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-793">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="4e181-794">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-794">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="4e181-795">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-795">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4e181-796">길이가 2 + 8 시간 차원 수를 같습니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-796">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-797">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-797">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4e181-798">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-798">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="4e181-799">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-799">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="4e181-800">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="4e181-800">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="4e181-801">데이터에 대해 200 바이트. (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="4e181-801">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="4e181-802">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-802">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="4e181-803">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-803">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4e181-804">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-804">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="4e181-805">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`)는 설명자가 2 + 8 시간 차원 수가 옵니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-805">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-806">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-806">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="4e181-807">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-807">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="4e181-808">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-808">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4e181-809">이진 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-809">Binary Mode</span></span>  
 <span data-ttu-id="4e181-810">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-810">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4e181-811">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="4e181-811">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4e181-812">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-812">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4e181-813">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-813">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4e181-814">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-814">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="4e181-815">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-815">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="4e181-816">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-816">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="4e181-817">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-817">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="4e181-818">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-818">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-819"><paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-819"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-820">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-820">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4e181-821">Visual Basic에서 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="4e181-821">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-822">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-822">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-823">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-823">Required.</span></span> <span data-ttu-id="4e181-824">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-824">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-825">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-825">Required.</span></span> <span data-ttu-id="4e181-826">데이터를 읽어오는 올바른 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-826">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4e181-827">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-827">Optional.</span></span> <span data-ttu-id="4e181-828">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-828">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="4e181-829">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-829">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="4e181-830"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-830">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="4e181-831">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-831">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-832">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-832">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4e181-833">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-833">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="4e181-834">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-834">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4e181-835">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-835">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-836">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-836">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="4e181-837">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-837">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4e181-838">임의 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-838">Random Mode</span></span>  
 <span data-ttu-id="4e181-839">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-839">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4e181-840">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-840">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4e181-841">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-841">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4e181-842">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-842">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4e181-843">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-843">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="4e181-844">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-844">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4e181-845">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-845">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="4e181-846">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="4e181-846">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4e181-847">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-847">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="4e181-848">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-848">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4e181-849">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-849">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="4e181-850">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-850">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="4e181-851">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-851">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="4e181-852">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-852">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4e181-853">길이가 2 + 8 시간 차원 수를 같습니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-853">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-854">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-854">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4e181-855">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-855">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="4e181-856">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-856">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="4e181-857">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="4e181-857">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="4e181-858">데이터에 대해 200 바이트. (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="4e181-858">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="4e181-859">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-859">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="4e181-860">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-860">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4e181-861">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-861">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="4e181-862">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`)는 설명자가 2 + 8 시간 차원 수가 옵니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-862">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-863">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-863">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="4e181-864">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-864">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="4e181-865">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-865">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4e181-866">이진 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-866">Binary Mode</span></span>  
 <span data-ttu-id="4e181-867">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-867">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4e181-868">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="4e181-868">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4e181-869">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-869">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4e181-870">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-870">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4e181-871">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-871">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="4e181-872">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-872">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="4e181-873">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-873">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="4e181-874">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-874">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="4e181-875">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-875">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-876"><paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-876"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-877">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-877">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4e181-878">Visual Basic에서 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="4e181-878">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-879">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-879">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-880">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-880">Required.</span></span> <span data-ttu-id="4e181-881">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-881">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-882">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-882">Required.</span></span> <span data-ttu-id="4e181-883">데이터를 읽어오는 올바른 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-883">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4e181-884">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-884">Optional.</span></span> <span data-ttu-id="4e181-885">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-885">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="4e181-886">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-886">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="4e181-887"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-887">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="4e181-888">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-888">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-889">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-889">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4e181-890">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-890">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="4e181-891">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-891">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4e181-892">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-892">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-893">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-893">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="4e181-894">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-894">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4e181-895">임의 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-895">Random Mode</span></span>  
 <span data-ttu-id="4e181-896">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-896">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4e181-897">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-897">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4e181-898">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-898">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4e181-899">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-899">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4e181-900">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-900">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="4e181-901">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-901">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4e181-902">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-902">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="4e181-903">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="4e181-903">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4e181-904">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-904">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="4e181-905">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-905">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4e181-906">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-906">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="4e181-907">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-907">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="4e181-908">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-908">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="4e181-909">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-909">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4e181-910">길이가 2 + 8 시간 차원 수를 같습니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-910">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-911">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-911">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4e181-912">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-912">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="4e181-913">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-913">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="4e181-914">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="4e181-914">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="4e181-915">데이터에 대해 200 바이트. (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="4e181-915">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="4e181-916">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-916">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="4e181-917">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-917">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4e181-918">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-918">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="4e181-919">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`)는 설명자가 2 + 8 시간 차원 수가 옵니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-919">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-920">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-920">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="4e181-921">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-921">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="4e181-922">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-922">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4e181-923">이진 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-923">Binary Mode</span></span>  
 <span data-ttu-id="4e181-924">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-924">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4e181-925">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="4e181-925">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4e181-926">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-926">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4e181-927">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-927">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4e181-928">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-928">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="4e181-929">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-929">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="4e181-930">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-930">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="4e181-931">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-931">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="4e181-932">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-932">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-933"><paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-933"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-934">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-934">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4e181-935">Visual Basic에서 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="4e181-935">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-936">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-936">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-937">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-937">Required.</span></span> <span data-ttu-id="4e181-938">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-938">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-939">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-939">Required.</span></span> <span data-ttu-id="4e181-940">데이터를 읽어오는 올바른 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-940">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4e181-941">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-941">Optional.</span></span> <span data-ttu-id="4e181-942">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-942">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="4e181-943">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-943">Optional.</span></span> <span data-ttu-id="4e181-944">문자열을 쓰는 경우에만 적용됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-944">Applies only when writing a string.</span></span> <span data-ttu-id="4e181-945">길이를 설명하는 문자열에 대해 2바이트 설명자를 쓸 것인지 여부를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-945">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="4e181-946">기본값은 <see langword="False" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-946">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="4e181-947">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-947">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="4e181-948"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-948">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="4e181-949">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-949">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-950">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-950">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4e181-951">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-951">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="4e181-952">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-952">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4e181-953">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-953">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-954">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-954">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="4e181-955">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-955">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4e181-956">임의 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-956">Random Mode</span></span>  
 <span data-ttu-id="4e181-957">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-957">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4e181-958">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-958">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4e181-959">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-959">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4e181-960">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-960">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4e181-961">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-961">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="4e181-962">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-962">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4e181-963">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-963">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="4e181-964">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="4e181-964">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4e181-965">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-965">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="4e181-966">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-966">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4e181-967">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-967">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="4e181-968">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-968">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="4e181-969">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-969">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="4e181-970">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-970">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4e181-971">길이가 2 + 8 시간 차원 수를 같습니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-971">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-972">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-972">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4e181-973">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-973">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="4e181-974">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-974">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="4e181-975">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="4e181-975">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="4e181-976">데이터에 대해 200 바이트. (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="4e181-976">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="4e181-977">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-977">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="4e181-978">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-978">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4e181-979">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-979">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="4e181-980">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`)는 설명자가 2 + 8 시간 차원 수가 옵니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-980">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-981">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-981">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="4e181-982">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-982">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="4e181-983">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-983">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4e181-984">이진 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-984">Binary Mode</span></span>  
 <span data-ttu-id="4e181-985">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-985">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4e181-986">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="4e181-986">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4e181-987">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-987">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4e181-988">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-988">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4e181-989">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-989">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="4e181-990">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-990">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="4e181-991">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-991">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="4e181-992">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-992">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="4e181-993">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-993">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-994"><paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-994"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-995">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-995">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4e181-996">Visual Basic에서 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="4e181-996">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-997">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-997">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-998">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-998">Required.</span></span> <span data-ttu-id="4e181-999">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-999">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-1000">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1000">Required.</span></span> <span data-ttu-id="4e181-1001">데이터를 읽어오는 올바른 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1001">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4e181-1002">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1002">Optional.</span></span> <span data-ttu-id="4e181-1003">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1003">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="4e181-1004">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1004">Optional.</span></span> <span data-ttu-id="4e181-1005">배열을 쓰는 경우에만 적용됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1005">Applies only when writing an array.</span></span> <span data-ttu-id="4e181-1006">배열을 동적으로 처리할 것인지의 여부와 배열의 크기와 범위를 설명하는 배열 설명자가 필요한지의 여부를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1006">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="4e181-1007">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1007">Optional.</span></span> <span data-ttu-id="4e181-1008">문자열을 쓰는 경우에만 적용됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1008">Applies only when writing a string.</span></span> <span data-ttu-id="4e181-1009">길이를 설명하는 문자열에 대해 2바이트 설명자를 쓸 것인지 여부를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1009">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="4e181-1010">기본값은 <see langword="False" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1010">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="4e181-1011">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1011">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="4e181-1012"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGet" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1012">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="4e181-1013">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-1013">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-1014">`FileGet` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1014">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4e181-1015">데이터를 읽을 `FileGet` 일반적으로 사용 하 여 파일에 기록 됩니다 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1015">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="4e181-1016">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1016">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4e181-1017">생략 하면 `RecordNumber`, 다음 레코드 또는 바이트 마지막 `FileGet` 또는 `FilePut` 함수 (또는 마지막 가리키는 `Seek` 함수) 읽힙니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1017">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-1018">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1018">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="4e181-1019">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1019">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4e181-1020">임의 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-1020">Random Mode</span></span>  
 <span data-ttu-id="4e181-1021">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1021">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4e181-1022">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGet` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1022">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4e181-1023">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1023">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4e181-1024">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 읽을 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1024">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4e181-1025">기본적으로 변수를 읽고, 문자열인 경우 `FileGet` 문자열 길이 포함 된 변수로 전달 되는 데이터를 읽고 다음 2 바이트 설명자를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1025">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="4e181-1026">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1026">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4e181-1027">Visual Basic 6.0 및 이전 버전 고정 길이의 문자열을 지원합니다. 파일에 삽입 했을 때, 길이 설명자 기록 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1027">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="4e181-1028">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="4e181-1028">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4e181-1029">읽어 들일 변수가 배열 크기와 차원 배열에 대 한 설명자를 읽을 지 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1029">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="4e181-1030">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1030">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4e181-1031">배열을 읽을 때 배열의 쓰여진 방법과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1031">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="4e181-1032">설명자를 사용 하 여 작성 된, 경우 읽기 설명자를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1032">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="4e181-1033">설명자를 사용 하지 않는 경우 크기와 배열 범위를 전달할 `FileGet` 읽기을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1033">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="4e181-1034">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1034">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4e181-1035">길이가 2 + 8 시간 차원 수를 같습니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-1035">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-1036">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1036">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4e181-1037">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1037">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="4e181-1038">218 바이트는 다음과 같이 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1038">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="4e181-1039">설명자에 대해 18 바이트: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="4e181-1039">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="4e181-1040">데이터에 대해 200 바이트. (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="4e181-1040">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="4e181-1041">다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체)를 읽고 인지 `FileGet` 변수 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1041">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="4e181-1042">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 읽을 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1042">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4e181-1043">`FileGet` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1043">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="4e181-1044">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePut`)는 설명자가 2 + 8 시간 차원 수가 옵니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-1044">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-1045">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1045">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="4e181-1046">모든 배열 및 설명자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1046">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="4e181-1047">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1047">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4e181-1048">이진 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-1048">Binary Mode</span></span>  
 <span data-ttu-id="4e181-1049">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1049">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4e181-1050">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="4e181-1050">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4e181-1051">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1051">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4e181-1052">`FileGet` 디스크에서 연속적으로; 모든 변수를 읽으십시오 즉, 없이 안쪽 여백 레코드 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1052">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4e181-1053">구조에 포함 되지 않은 모든 배열에 대 한 `FileGet` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1053">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="4e181-1054">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1054">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="4e181-1055">`FileGet` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1055">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="4e181-1056">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1056">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="4e181-1057">사용 하 여 파일에서 읽기를 `FileGet` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1057">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-1058"><paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-1058"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-1059">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-1059">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4e181-1060">Visual Basic에서 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="4e181-1060">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-1061">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-1061">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGetObject : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGetObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-1062">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1062">Required.</span></span> <span data-ttu-id="4e181-1063">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1063">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-1064">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1064">Required.</span></span> <span data-ttu-id="4e181-1065">데이터를 읽어오는 올바른 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1065">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4e181-1066">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1066">Optional.</span></span> <span data-ttu-id="4e181-1067">읽기가 시작되는 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 번호(<see langword="Binary" /> 모드 파일)입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1067">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="4e181-1068">열린 디스크 파일의 데이터를 변수로 읽어옵니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1068">Reads data from an open disk file into a variable.</span></span>  <span data-ttu-id="4e181-1069"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileGetObject" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1069">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span></span> <span data-ttu-id="4e181-1070">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-1070">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-1071">합니다 `FileGetObject` 함수 대신 사용 됩니다 `FileGet` 경우 컴파일할 때 모호성을 피할 수 형식 `Object` 와 같은 다른 형식 대신 반환 됩니다 `Integer`를 `Long`, `Short`등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1071">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="4e181-1072">작성 하려는 경우는 `Variant` 형식 `FileGetObject` 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1072">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="4e181-1073">의문이 있으면 두 번째 매개 변수에 대 한 개체를 사용 하는 경우에 것이 항상 좋습니다를 사용 하는 `FilePutObject` 고 `FileGetObject`입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1073">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="4e181-1074">`FileGetObject` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1074">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4e181-1075">데이터를 읽을 `FileGetObject` 일반적으로 작성 된 `FilePutObject`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1075">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="4e181-1076">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1076">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4e181-1077">생략 하면 `RecordNumber`, `FileGetObject` 마지막 레코드 또는 바이트를 읽고 `FileGetObject` 또는 `FilePutObject` 함수 (또는 마지막 가리키는 `Seek` 함수).</span><span class="sxs-lookup"><span data-stu-id="4e181-1077">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4e181-1078">임의 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-1078">Random Mode</span></span>  
 <span data-ttu-id="4e181-1079">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1079">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4e181-1080">읽을 데이터의 길이에 지정 된 길이 보다 적은 경우는 `RecordLength` 절을 `FileOpen` 함수를 `FileGetObject` 레코드 길이가 경계에서 후속 레코드를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1080">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4e181-1081">끝 하나의 레코드와 다음 레코드의 시작 부분 사이의 공간 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1081">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4e181-1082">데이터의 안쪽 여백을 정확 하 게 확인할 수 없으므로 레코드 길이 읽을 데이터의 길이 일치 하도록 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1082">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4e181-1083">읽어 들일 변수가 기본적으로 문자열 인지 `FileGetObject` 문자열 길이 포함 하는 2 바이트 설명자를 읽고 다음 변수에 전달 되는 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1083">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="4e181-1084">따라서 레코드 길이 지정 하 여는 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1084">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4e181-1085">Visual Basic 6.0 및 이전 버전에는 고정 길이 문자열 및 파일을 읽을 때, 길이 설명자를 쓰지을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1085">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="4e181-1086">전달 해야 설명자 없이 문자열을 읽고 싶다면 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="4e181-1086">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4e181-1087">읽어 들일 변수의 배열을 인 레코드 길이으로 지정 하는 경우는 `RecordLength` 의 매개 변수는 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1087">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4e181-1088">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1088">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4e181-1089">길이가 2 + 8 시간 차원 수를 같습니다. 2 + 8 \* 더한 것입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1089">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="4e181-1090">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어 디스크:</span><span class="sxs-lookup"><span data-stu-id="4e181-1090">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="4e181-1091">218 바이트는 다음과 같이 배포 됩니다. (2 + 8 \* 2), 설명자에 대 한 18 바이트 및 (4 \* 5 \* 10) 데이터에 대 한 100 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1091">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="4e181-1092">`FileGetObject` 요소 간의 채우지는 없다는 점을 제외 하면 각각 개별적으로 읽는 것 처럼 구조의 요소를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1092">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="4e181-1093">디스크에서 사용자 정의 형식에서 동적 배열 (로 작성 된 `FilePutObject`)는 설명자가 2 + 8 시간 차원 수가 옵니다. 2 + 8 \* 더한 것입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1093">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="4e181-1094">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 모든 배열 및 해당 설명자를 포함 하 여 개별 요소를 읽는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1094">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="4e181-1095"><xref:Microsoft.VisualBasic.VBFixedStringAttribute> 클래스를 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 있습니다 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1095">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4e181-1096">이진 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-1096">Binary Mode</span></span>  
 <span data-ttu-id="4e181-1097">파일에서 열에 대 한 `Binary` 모드의 모든는 `Random` 이러한 예외를 사용 하 여 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1097">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="4e181-1098">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1098">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4e181-1099">`FileGetObject` 변수를 읽고 모든 디스크에서 연속적으로 즉, 레코드 간에 패딩 없이 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1099">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="4e181-1100">구조에 포함 되지 않은 모든 배열에 대 한 `FileGetObject` 만 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1100">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="4e181-1101">설명자는 읽지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1101">No descriptor is read.</span></span>  
  
 <span data-ttu-id="4e181-1102">`FileGetObject` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1102">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="4e181-1103">읽은 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1103">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-1104">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1104">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="4e181-1105">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1105">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-1106">다음 예제에서는 레코드를 읽고 테스트 파일에 다음이 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1106">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4e181-1107">Visual Basic에서 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="4e181-1107">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-1108">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-1108">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileLen : string -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.FileLen PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="4e181-1109">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1109">Required.</span></span> <span data-ttu-id="4e181-1110">파일을 지정하는 문자열 식입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1110">A string expression that specifies a file.</span></span> <span data-ttu-id="4e181-1111"><paramref name="PathName" />은 디렉터리 또는 폴더와 드라이브를 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1111"><paramref name="PathName" /> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="4e181-1112">파일 길이를 바이트로 지정하는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1112">Returns a value that specifies the length of a file in bytes.</span></span> <span data-ttu-id="4e181-1113"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileLen" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1113">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span></span> <span data-ttu-id="4e181-1114">자세한 내용은 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-1114">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="4e181-1115">파일의 길이(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1115">The length of a file in bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-1116">지정한 파일이 열려 있으면 시기는 `FileLen` 함수 호출 되 면 반환 된 값으로 열었을 때 파일의 크기를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1116">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4e181-1117">열려 있는 파일의 현재 길이 가져오려면는 `LOF` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1117">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-1118">이 예제에서는 `FileLen` 파일의 길이 바이트 단위로 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1118">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="4e181-1119">이 예제의 목적에 대 한 가정 `TestFile` 은 일부 데이터를 포함 하는 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1119">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="4e181-1120">파일이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1120">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4e181-1121">Visual Basic을 사용한 파일 액세스</span><span class="sxs-lookup"><span data-stu-id="4e181-1121">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberSignature Language="F#" Value="static member FileOpen : int * string * Microsoft.VisualBasic.OpenMode * Microsoft.VisualBasic.OpenAccess * Microsoft.VisualBasic.OpenShare * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileOpen (FileNumber, FileName, Mode, Access, Share, RecordLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-1122">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1122">Required.</span></span> <span data-ttu-id="4e181-1123">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1123">Any valid file number.</span></span> <span data-ttu-id="4e181-1124">다음으로 사용 가능한 파일 번호를 가져오려면 <see langword="FreeFile" /> 함수를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1124">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span></span></param>
        <param name="FileName"><span data-ttu-id="4e181-1125">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1125">Required.</span></span> <span data-ttu-id="4e181-1126">파일 이름을 지정하는 문자열 식으로, 디렉터리나 폴더 및 드라이브가 포함될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1126">A string expression that specifies a file name - may include directory or folder, and drive.</span></span></param>
        <param name="Mode"><span data-ttu-id="4e181-1127">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1127">Required.</span></span> <span data-ttu-id="4e181-1128"><see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, <see langword="Random" /> 등의 파일 모드를 지정하는 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1128">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span></span> <span data-ttu-id="4e181-1129">자세한 내용은 <see cref="T:Microsoft.VisualBasic.OpenMode" />을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-1129">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span></span></param>
        <param name="Access"><span data-ttu-id="4e181-1130">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1130">Optional.</span></span> <span data-ttu-id="4e181-1131"><see langword="Read" />, <see langword="Write" />, <see langword="ReadWrite" /> 등 열려 있는 파일에 허용되는 작업을 지정하는 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1131">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span></span> <span data-ttu-id="4e181-1132">기본값은 <see langword="ReadWrite" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1132">Defaults to <see langword="ReadWrite" />.</span></span> <span data-ttu-id="4e181-1133">자세한 내용은 <see cref="T:Microsoft.VisualBasic.OpenAccess" />을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-1133">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span></span></param>
        <param name="Share"><span data-ttu-id="4e181-1134">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1134">Optional.</span></span> <span data-ttu-id="4e181-1135"><see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, <see langword="Lock Read Write" /> 등 열려 있는 파일에 대해 다른 프로세스에 허용되지 않는 작업을 지정하는 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1135">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="4e181-1136">기본값은 <see langword="Lock Read Write" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1136">Defaults to <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="4e181-1137">자세한 내용은 <see cref="T:Microsoft.VisualBasic.OpenShare" />을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-1137">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span></span></param>
        <param name="RecordLength"><span data-ttu-id="4e181-1138">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1138">Optional.</span></span> <span data-ttu-id="4e181-1139">32,767(바이트)보다 작거나 같은 수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1139">Number less than or equal to 32,767 (bytes).</span></span> <span data-ttu-id="4e181-1140">임의 액세스용으로 연 파일의 경우 이 값은 레코드 길이가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1140">For files opened for random access, this value is the record length.</span></span> <span data-ttu-id="4e181-1141">순차 파일의 경우 이 값은 버퍼링된 문자의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1141">For sequential files, this value is the number of characters buffered.</span></span></param>
        <summary><span data-ttu-id="4e181-1142">입력 또는 출력할 파일을 엽니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1142">Opens a file for input or output.</span></span> <span data-ttu-id="4e181-1143"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileOpen" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1143">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span></span> <span data-ttu-id="4e181-1144">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-1144">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-1145">`FileOpen` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1145">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4e181-1146">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1146">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4e181-1147">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1147">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4e181-1148">모든 I/O 작업을 수행 하려면 파일을 열어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1148">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="4e181-1149">`FileOpen` 파일 I/O에 대 한 버퍼를 할당 하 고 버퍼를 사용 하는 액세스 모드를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1149">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-1150">파일에 쓸 때 응용 프로그램 할 파일을 만듭니다. 작성 하려는 파일에 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="4e181-1150">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="4e181-1151">이렇게 하려면 파일을 만들 디렉터리에 대 한 권한이 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1151">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="4e181-1152">그러나 파일을 지정 하 여 `FileName` 존재 하면 응용 프로그램 `Write` 파일 자체에 권한이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1152">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="4e181-1153">보안을 강화 하려면 가능한 한, 배포 및 권한 부여 하는 동안 파일을 만들고 하는 아무 곳에 나 `Write` 해당 파일에 대 한 전체 디렉터리 대신만 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1153">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="4e181-1154">보안을 강화 하려면 대신 루트 디렉터리 또는 Program Files 디렉터리에 사용자를 디렉터리에 데이터를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1154">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="4e181-1155">열에 대 한 채널을 사용 하 여 찾을 수 있습니다는 `FreeFile()` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1155">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-1156">`FileOpen` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형 부분 신뢰 상황에서는 해당 실행에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1156">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="4e181-1157">자세한 내용은 참조 하세요. <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1157">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-1158">다양 한 용도 보여 주는이 예제는 `FileOpen` 함수 입력 및 출력 파일을 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1158">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="4e181-1159">다음 코드 파일을 엽니다 `TestFile` 에서 `Input` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1159">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="4e181-1160">이 예제에서 파일을 엽니다 `Binary` 쓰기 작업용 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1160">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="4e181-1161">다음 예제에서 파일을 엽니다 `Random` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1161">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="4e181-1162">구조체의 레코드를 포함 하는 파일 `Person`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1162">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="4e181-1163">이 코드 예제에서 파일을 엽니다 `Output` 모드; 읽거나 파일에 쓸 모든 프로세스 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1163">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="4e181-1164">이 코드 예제에서 파일을 엽니다 `Binary` 읽기에 대 한 모드 다른 프로세스가 파일을 읽을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1164">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-1165">레코드 길이가 음수입니다(–1은 아님).</span><span class="sxs-lookup"><span data-stu-id="4e181-1165">Record length is negative (and not equal to -1).</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-1166"><paramref name="FileName" />이 이미 열려 있거나 <paramref name="FileName" />이 잘못되었습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1166"><paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4e181-1167">Visual Basic에서 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="4e181-1167">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-1168">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-1168">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4e181-1169">변수의 데이터를 디스크 파일에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1169">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="4e181-1170"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1170">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="4e181-1171">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-1171">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-1172">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1172">Required.</span></span> <span data-ttu-id="4e181-1173">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1173">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-1174">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1174">Required.</span></span> <span data-ttu-id="4e181-1175">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1175">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4e181-1176">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1176">Optional.</span></span> <span data-ttu-id="4e181-1177">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1177">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="4e181-1178">변수의 데이터를 디스크 파일에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1178">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="4e181-1179"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1179">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="4e181-1180">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-1180">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-1181">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1181">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4e181-1182">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1182">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="4e181-1183">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1183">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4e181-1184">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1184">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="4e181-1185">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1185">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="4e181-1186">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1186">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="4e181-1187">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1187">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4e181-1188">임의 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-1188">Random Mode</span></span>  
 <span data-ttu-id="4e181-1189">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1189">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4e181-1190">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1190">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4e181-1191">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1191">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4e181-1192">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1192">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="4e181-1193">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1193">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="4e181-1194">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1194">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="4e181-1195">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1195">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="4e181-1196">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1196">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="4e181-1197">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1197">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="4e181-1198">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1198">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="4e181-1199">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1199">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="4e181-1200">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1200">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4e181-1201">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1201">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4e181-1202">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1202">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="4e181-1203">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1203">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="4e181-1204">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1204">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="4e181-1205">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1205">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4e181-1206">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1206">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="4e181-1207">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1207">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4e181-1208">길이가 2 + 8 시간 차원 수를 같습니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-1208">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-1209">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1209">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4e181-1210">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1210">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="4e181-1211">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1211">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="4e181-1212">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1212">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="4e181-1213">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1213">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="4e181-1214">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1214">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4e181-1215">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="4e181-1215">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4e181-1216">이진 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-1216">Binary Mode</span></span>  
 <span data-ttu-id="4e181-1217">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1217">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4e181-1218">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="4e181-1218">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4e181-1219">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1219">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4e181-1220">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1220">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4e181-1221">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1221">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="4e181-1222">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1222">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="4e181-1223">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1223">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="4e181-1224">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1224">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="4e181-1225">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1225">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="4e181-1226">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1226">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-1227">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1227">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="4e181-1228">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1228">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-1229"><paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-1229"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-1230">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-1230">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-1231">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-1231">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-1232">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1232">Required.</span></span> <span data-ttu-id="4e181-1233">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1233">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-1234">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1234">Required.</span></span> <span data-ttu-id="4e181-1235">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1235">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4e181-1236">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1236">Optional.</span></span> <span data-ttu-id="4e181-1237">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1237">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="4e181-1238">변수의 데이터를 디스크 파일에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1238">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="4e181-1239"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1239">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="4e181-1240">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-1240">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-1241">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1241">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4e181-1242">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1242">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="4e181-1243">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1243">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4e181-1244">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1244">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="4e181-1245">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1245">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="4e181-1246">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1246">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="4e181-1247">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1247">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4e181-1248">임의 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-1248">Random Mode</span></span>  
 <span data-ttu-id="4e181-1249">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1249">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4e181-1250">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1250">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4e181-1251">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1251">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4e181-1252">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1252">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="4e181-1253">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1253">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="4e181-1254">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1254">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="4e181-1255">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1255">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="4e181-1256">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1256">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="4e181-1257">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1257">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="4e181-1258">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1258">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="4e181-1259">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1259">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="4e181-1260">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1260">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4e181-1261">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1261">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4e181-1262">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1262">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="4e181-1263">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1263">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="4e181-1264">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1264">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="4e181-1265">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1265">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4e181-1266">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1266">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="4e181-1267">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1267">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4e181-1268">길이가 2 + 8 시간 차원 수를 같습니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-1268">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-1269">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1269">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4e181-1270">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1270">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="4e181-1271">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1271">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="4e181-1272">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1272">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="4e181-1273">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1273">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="4e181-1274">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1274">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4e181-1275">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="4e181-1275">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4e181-1276">이진 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-1276">Binary Mode</span></span>  
 <span data-ttu-id="4e181-1277">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1277">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4e181-1278">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="4e181-1278">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4e181-1279">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1279">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4e181-1280">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1280">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4e181-1281">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1281">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="4e181-1282">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1282">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="4e181-1283">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1283">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="4e181-1284">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1284">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="4e181-1285">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1285">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="4e181-1286">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1286">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-1287">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1287">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="4e181-1288">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1288">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-1289"><paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-1289"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-1290">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-1290">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-1291">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-1291">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-1292">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1292">Required.</span></span> <span data-ttu-id="4e181-1293">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1293">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-1294">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1294">Required.</span></span> <span data-ttu-id="4e181-1295">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1295">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4e181-1296">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1296">Optional.</span></span> <span data-ttu-id="4e181-1297">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1297">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="4e181-1298">변수의 데이터를 디스크 파일에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1298">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="4e181-1299"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1299">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="4e181-1300">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-1300">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-1301">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1301">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4e181-1302">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1302">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="4e181-1303">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1303">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4e181-1304">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1304">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="4e181-1305">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1305">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="4e181-1306">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1306">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="4e181-1307">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1307">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4e181-1308">임의 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-1308">Random Mode</span></span>  
 <span data-ttu-id="4e181-1309">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1309">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4e181-1310">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1310">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4e181-1311">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1311">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4e181-1312">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1312">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="4e181-1313">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1313">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="4e181-1314">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1314">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="4e181-1315">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1315">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="4e181-1316">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1316">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="4e181-1317">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1317">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="4e181-1318">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1318">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="4e181-1319">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1319">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="4e181-1320">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1320">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4e181-1321">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1321">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4e181-1322">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1322">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="4e181-1323">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1323">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="4e181-1324">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1324">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="4e181-1325">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1325">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4e181-1326">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1326">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="4e181-1327">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1327">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4e181-1328">길이가 2 + 8 시간 차원 수를 같습니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-1328">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-1329">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1329">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4e181-1330">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1330">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="4e181-1331">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1331">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="4e181-1332">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1332">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="4e181-1333">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1333">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="4e181-1334">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1334">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4e181-1335">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="4e181-1335">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4e181-1336">이진 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-1336">Binary Mode</span></span>  
 <span data-ttu-id="4e181-1337">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1337">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4e181-1338">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="4e181-1338">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4e181-1339">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1339">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4e181-1340">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1340">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4e181-1341">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1341">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="4e181-1342">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1342">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="4e181-1343">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1343">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="4e181-1344">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1344">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="4e181-1345">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1345">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="4e181-1346">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1346">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-1347">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1347">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="4e181-1348">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1348">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-1349"><paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-1349"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-1350">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-1350">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-1351">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-1351">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-1352">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1352">Required.</span></span> <span data-ttu-id="4e181-1353">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1353">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-1354">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1354">Required.</span></span> <span data-ttu-id="4e181-1355">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1355">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4e181-1356">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1356">Optional.</span></span> <span data-ttu-id="4e181-1357">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1357">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="4e181-1358">변수의 데이터를 디스크 파일에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1358">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="4e181-1359"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1359">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="4e181-1360">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-1360">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-1361">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1361">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4e181-1362">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1362">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="4e181-1363">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1363">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4e181-1364">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1364">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="4e181-1365">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1365">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="4e181-1366">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1366">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="4e181-1367">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1367">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4e181-1368">임의 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-1368">Random Mode</span></span>  
 <span data-ttu-id="4e181-1369">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1369">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4e181-1370">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1370">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4e181-1371">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1371">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4e181-1372">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1372">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="4e181-1373">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1373">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="4e181-1374">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1374">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="4e181-1375">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1375">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="4e181-1376">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1376">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="4e181-1377">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1377">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="4e181-1378">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1378">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="4e181-1379">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1379">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="4e181-1380">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1380">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4e181-1381">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1381">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4e181-1382">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1382">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="4e181-1383">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1383">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="4e181-1384">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1384">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="4e181-1385">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1385">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4e181-1386">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1386">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="4e181-1387">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1387">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4e181-1388">길이가 2 + 8 시간 차원 수를 같습니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-1388">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-1389">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1389">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4e181-1390">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1390">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="4e181-1391">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1391">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="4e181-1392">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1392">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="4e181-1393">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1393">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="4e181-1394">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1394">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4e181-1395">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="4e181-1395">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4e181-1396">이진 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-1396">Binary Mode</span></span>  
 <span data-ttu-id="4e181-1397">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1397">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4e181-1398">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="4e181-1398">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4e181-1399">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1399">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4e181-1400">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1400">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4e181-1401">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1401">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="4e181-1402">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1402">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="4e181-1403">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1403">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="4e181-1404">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1404">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="4e181-1405">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1405">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="4e181-1406">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1406">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-1407">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1407">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="4e181-1408">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1408">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-1409"><paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-1409"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-1410">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-1410">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-1411">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-1411">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-1412">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1412">Required.</span></span> <span data-ttu-id="4e181-1413">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1413">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-1414">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1414">Required.</span></span> <span data-ttu-id="4e181-1415">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1415">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4e181-1416">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1416">Optional.</span></span> <span data-ttu-id="4e181-1417">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1417">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="4e181-1418">변수의 데이터를 디스크 파일에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1418">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="4e181-1419"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1419">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="4e181-1420">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-1420">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-1421">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1421">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4e181-1422">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1422">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="4e181-1423">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1423">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4e181-1424">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1424">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="4e181-1425">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1425">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="4e181-1426">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1426">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="4e181-1427">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1427">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4e181-1428">임의 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-1428">Random Mode</span></span>  
 <span data-ttu-id="4e181-1429">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1429">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4e181-1430">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1430">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4e181-1431">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1431">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4e181-1432">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1432">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="4e181-1433">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1433">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="4e181-1434">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1434">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="4e181-1435">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1435">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="4e181-1436">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1436">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="4e181-1437">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1437">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="4e181-1438">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1438">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="4e181-1439">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1439">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="4e181-1440">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1440">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4e181-1441">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1441">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4e181-1442">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1442">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="4e181-1443">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1443">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="4e181-1444">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1444">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="4e181-1445">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1445">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4e181-1446">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1446">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="4e181-1447">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1447">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4e181-1448">길이가 2 + 8 시간 차원 수를 같습니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-1448">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-1449">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1449">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4e181-1450">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1450">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="4e181-1451">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1451">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="4e181-1452">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1452">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="4e181-1453">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1453">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="4e181-1454">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1454">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4e181-1455">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="4e181-1455">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4e181-1456">이진 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-1456">Binary Mode</span></span>  
 <span data-ttu-id="4e181-1457">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1457">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4e181-1458">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="4e181-1458">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4e181-1459">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1459">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4e181-1460">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1460">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4e181-1461">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1461">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="4e181-1462">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1462">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="4e181-1463">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1463">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="4e181-1464">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1464">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="4e181-1465">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1465">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="4e181-1466">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1466">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-1467">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1467">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="4e181-1468">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1468">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-1469"><paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-1469"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-1470">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-1470">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-1471">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-1471">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-1472">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1472">Required.</span></span> <span data-ttu-id="4e181-1473">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1473">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-1474">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1474">Required.</span></span> <span data-ttu-id="4e181-1475">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1475">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4e181-1476">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1476">Optional.</span></span> <span data-ttu-id="4e181-1477">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1477">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="4e181-1478">변수의 데이터를 디스크 파일에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1478">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="4e181-1479"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1479">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="4e181-1480">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-1480">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-1481">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1481">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4e181-1482">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1482">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="4e181-1483">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1483">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4e181-1484">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1484">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="4e181-1485">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1485">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="4e181-1486">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1486">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="4e181-1487">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1487">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4e181-1488">임의 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-1488">Random Mode</span></span>  
 <span data-ttu-id="4e181-1489">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1489">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4e181-1490">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1490">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4e181-1491">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1491">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4e181-1492">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1492">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="4e181-1493">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1493">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="4e181-1494">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1494">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="4e181-1495">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1495">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="4e181-1496">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1496">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="4e181-1497">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1497">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="4e181-1498">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1498">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="4e181-1499">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1499">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="4e181-1500">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1500">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4e181-1501">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1501">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4e181-1502">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1502">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="4e181-1503">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1503">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="4e181-1504">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1504">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="4e181-1505">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1505">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4e181-1506">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1506">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="4e181-1507">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1507">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4e181-1508">길이가 2 + 8 시간 차원 수를 같습니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-1508">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-1509">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1509">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4e181-1510">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1510">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="4e181-1511">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1511">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="4e181-1512">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1512">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="4e181-1513">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1513">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="4e181-1514">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1514">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4e181-1515">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="4e181-1515">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4e181-1516">이진 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-1516">Binary Mode</span></span>  
 <span data-ttu-id="4e181-1517">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1517">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4e181-1518">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="4e181-1518">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4e181-1519">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1519">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4e181-1520">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1520">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4e181-1521">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1521">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="4e181-1522">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1522">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="4e181-1523">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1523">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="4e181-1524">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1524">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="4e181-1525">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1525">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="4e181-1526">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1526">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-1527">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1527">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="4e181-1528">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1528">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-1529"><paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-1529"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-1530">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-1530">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-1531">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-1531">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-1532">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1532">Required.</span></span> <span data-ttu-id="4e181-1533">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1533">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-1534">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1534">Required.</span></span> <span data-ttu-id="4e181-1535">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1535">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4e181-1536">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1536">Optional.</span></span> <span data-ttu-id="4e181-1537">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1537">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="4e181-1538">변수의 데이터를 디스크 파일에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1538">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="4e181-1539"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1539">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="4e181-1540">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-1540">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-1541">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1541">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4e181-1542">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1542">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="4e181-1543">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1543">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4e181-1544">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1544">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="4e181-1545">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1545">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="4e181-1546">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1546">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="4e181-1547">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1547">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4e181-1548">임의 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-1548">Random Mode</span></span>  
 <span data-ttu-id="4e181-1549">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1549">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4e181-1550">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1550">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4e181-1551">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1551">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4e181-1552">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1552">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="4e181-1553">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1553">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="4e181-1554">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1554">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="4e181-1555">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1555">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="4e181-1556">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1556">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="4e181-1557">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1557">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="4e181-1558">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1558">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="4e181-1559">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를`VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1559">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="4e181-1560">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1560">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4e181-1561">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1561">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4e181-1562">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1562">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="4e181-1563">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1563">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="4e181-1564">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1564">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="4e181-1565">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1565">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4e181-1566">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1566">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="4e181-1567">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1567">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4e181-1568">길이가 2 + 8 시간 차원 수를 같습니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-1568">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-1569">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1569">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4e181-1570">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1570">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="4e181-1571">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1571">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="4e181-1572">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1572">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="4e181-1573">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1573">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="4e181-1574">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1574">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4e181-1575">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="4e181-1575">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4e181-1576">이진 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-1576">Binary Mode</span></span>  
 <span data-ttu-id="4e181-1577">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1577">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4e181-1578">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="4e181-1578">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4e181-1579">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1579">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4e181-1580">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1580">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4e181-1581">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1581">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="4e181-1582">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1582">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="4e181-1583">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1583">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="4e181-1584">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1584">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="4e181-1585">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1585">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="4e181-1586">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1586">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-1587">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1587">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="4e181-1588">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1588">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-1589"><paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-1589"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-1590">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-1590">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-1591">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-1591">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-1592">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1592">Required.</span></span> <span data-ttu-id="4e181-1593">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1593">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-1594">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1594">Required.</span></span> <span data-ttu-id="4e181-1595">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1595">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4e181-1596">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1596">Optional.</span></span> <span data-ttu-id="4e181-1597">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1597">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="4e181-1598">변수의 데이터를 디스크 파일에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1598">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="4e181-1599"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1599">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="4e181-1600">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-1600">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-1601">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1601">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4e181-1602">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1602">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="4e181-1603">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1603">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4e181-1604">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1604">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="4e181-1605">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1605">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="4e181-1606">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1606">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="4e181-1607">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1607">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4e181-1608">임의 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-1608">Random Mode</span></span>  
 <span data-ttu-id="4e181-1609">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1609">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4e181-1610">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1610">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4e181-1611">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1611">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4e181-1612">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1612">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="4e181-1613">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1613">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="4e181-1614">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1614">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="4e181-1615">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1615">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="4e181-1616">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1616">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="4e181-1617">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1617">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="4e181-1618">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1618">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="4e181-1619">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1619">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="4e181-1620">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1620">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4e181-1621">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1621">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4e181-1622">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1622">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="4e181-1623">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1623">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="4e181-1624">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1624">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="4e181-1625">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1625">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4e181-1626">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1626">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="4e181-1627">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1627">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4e181-1628">길이가 2 + 8 시간 차원 수를 같습니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-1628">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-1629">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1629">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4e181-1630">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1630">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="4e181-1631">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1631">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="4e181-1632">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1632">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="4e181-1633">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1633">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="4e181-1634">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1634">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4e181-1635">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="4e181-1635">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4e181-1636">이진 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-1636">Binary Mode</span></span>  
 <span data-ttu-id="4e181-1637">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1637">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4e181-1638">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="4e181-1638">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4e181-1639">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1639">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4e181-1640">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1640">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4e181-1641">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1641">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="4e181-1642">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1642">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="4e181-1643">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1643">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="4e181-1644">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1644">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="4e181-1645">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1645">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="4e181-1646">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1646">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-1647">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1647">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="4e181-1648">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1648">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-1649"><paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-1649"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-1650">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-1650">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-1651">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-1651">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-1652">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1652">Required.</span></span> <span data-ttu-id="4e181-1653">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1653">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-1654">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1654">Required.</span></span> <span data-ttu-id="4e181-1655">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1655">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4e181-1656">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1656">Optional.</span></span> <span data-ttu-id="4e181-1657">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1657">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="4e181-1658">변수의 데이터를 디스크 파일에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1658">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="4e181-1659"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1659">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="4e181-1660">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-1660">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-1661">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1661">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4e181-1662">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1662">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="4e181-1663">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1663">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4e181-1664">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1664">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="4e181-1665">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1665">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="4e181-1666">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1666">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="4e181-1667">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1667">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4e181-1668">임의 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-1668">Random Mode</span></span>  
 <span data-ttu-id="4e181-1669">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1669">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4e181-1670">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1670">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4e181-1671">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1671">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4e181-1672">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1672">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="4e181-1673">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1673">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="4e181-1674">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1674">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="4e181-1675">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1675">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="4e181-1676">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1676">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="4e181-1677">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1677">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="4e181-1678">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1678">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="4e181-1679">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1679">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="4e181-1680">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1680">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4e181-1681">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1681">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4e181-1682">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1682">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="4e181-1683">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1683">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="4e181-1684">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1684">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="4e181-1685">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1685">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4e181-1686">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1686">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="4e181-1687">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1687">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4e181-1688">길이가 2 + 8 시간 차원 수를 같습니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-1688">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-1689">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4e181-1690">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1690">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="4e181-1691">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1691">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="4e181-1692">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1692">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="4e181-1693">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1693">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="4e181-1694">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1694">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4e181-1695">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="4e181-1695">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4e181-1696">이진 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-1696">Binary Mode</span></span>  
 <span data-ttu-id="4e181-1697">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1697">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4e181-1698">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="4e181-1698">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4e181-1699">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1699">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4e181-1700">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1700">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4e181-1701">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1701">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="4e181-1702">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1702">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="4e181-1703">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1703">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="4e181-1704">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1704">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="4e181-1705">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1705">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="4e181-1706">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1706">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-1707">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1707">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="4e181-1708">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1708">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-1709"><paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-1709"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-1710">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-1710">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-1711">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-1711">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-1712">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1712">Required.</span></span> <span data-ttu-id="4e181-1713">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1713">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-1714">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1714">Required.</span></span> <span data-ttu-id="4e181-1715">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1715">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4e181-1716">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1716">Optional.</span></span> <span data-ttu-id="4e181-1717">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1717">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="4e181-1718">변수의 데이터를 디스크 파일에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1718">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="4e181-1719"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1719">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="4e181-1720">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-1720">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-1721">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1721">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4e181-1722">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1722">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="4e181-1723">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1723">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4e181-1724">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1724">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="4e181-1725">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1725">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="4e181-1726">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1726">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="4e181-1727">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1727">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4e181-1728">임의 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-1728">Random Mode</span></span>  
 <span data-ttu-id="4e181-1729">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1729">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4e181-1730">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1730">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4e181-1731">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1731">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4e181-1732">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1732">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="4e181-1733">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1733">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="4e181-1734">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1734">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="4e181-1735">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1735">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="4e181-1736">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1736">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="4e181-1737">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1737">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="4e181-1738">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1738">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="4e181-1739">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1739">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="4e181-1740">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1740">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4e181-1741">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1741">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4e181-1742">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1742">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="4e181-1743">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1743">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="4e181-1744">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1744">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="4e181-1745">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1745">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4e181-1746">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1746">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="4e181-1747">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1747">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4e181-1748">길이가 2 + 8 시간 차원 수를 같습니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-1748">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-1749">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4e181-1750">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1750">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="4e181-1751">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1751">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="4e181-1752">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1752">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="4e181-1753">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1753">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="4e181-1754">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1754">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4e181-1755">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="4e181-1755">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4e181-1756">이진 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-1756">Binary Mode</span></span>  
 <span data-ttu-id="4e181-1757">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1757">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4e181-1758">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="4e181-1758">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4e181-1759">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1759">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4e181-1760">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1760">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4e181-1761">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1761">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="4e181-1762">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1762">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="4e181-1763">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1763">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="4e181-1764">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1764">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="4e181-1765">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1765">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="4e181-1766">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1766">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-1767">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1767">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="4e181-1768">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1768">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-1769"><paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-1769"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-1770">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-1770">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-1771">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-1771">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-1772">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1772">Required.</span></span> <span data-ttu-id="4e181-1773">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1773">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-1774">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1774">Required.</span></span> <span data-ttu-id="4e181-1775">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1775">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4e181-1776">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1776">Optional.</span></span> <span data-ttu-id="4e181-1777">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1777">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="4e181-1778">변수의 데이터를 디스크 파일에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1778">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="4e181-1779"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1779">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="4e181-1780">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-1780">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-1781">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1781">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4e181-1782">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1782">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="4e181-1783">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1783">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4e181-1784">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1784">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="4e181-1785">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1785">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="4e181-1786">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1786">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="4e181-1787">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1787">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4e181-1788">임의 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-1788">Random Mode</span></span>  
 <span data-ttu-id="4e181-1789">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1789">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4e181-1790">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를`RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1790">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4e181-1791">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1791">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4e181-1792">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1792">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="4e181-1793">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1793">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="4e181-1794">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1794">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="4e181-1795">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1795">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="4e181-1796">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1796">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="4e181-1797">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1797">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="4e181-1798">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1798">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="4e181-1799">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1799">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="4e181-1800">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1800">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4e181-1801">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1801">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4e181-1802">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1802">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="4e181-1803">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1803">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="4e181-1804">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1804">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="4e181-1805">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1805">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4e181-1806">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1806">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="4e181-1807">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1807">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4e181-1808">길이가 2 + 8 시간 차원 수를 같습니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-1808">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-1809">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1809">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4e181-1810">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1810">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="4e181-1811">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1811">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="4e181-1812">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1812">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="4e181-1813">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1813">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="4e181-1814">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1814">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4e181-1815">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="4e181-1815">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4e181-1816">이진 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-1816">Binary Mode</span></span>  
 <span data-ttu-id="4e181-1817">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1817">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4e181-1818">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="4e181-1818">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4e181-1819">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1819">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4e181-1820">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1820">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4e181-1821">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1821">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="4e181-1822">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1822">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="4e181-1823">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1823">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="4e181-1824">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1824">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="4e181-1825">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1825">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="4e181-1826">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1826">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-1827">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1827">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="4e181-1828">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1828">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-1829"><paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-1829"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-1830">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-1830">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-1831">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-1831">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : obj * obj * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("Use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-1832">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1832">Required.</span></span> <span data-ttu-id="4e181-1833">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1833">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-1834">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1834">Required.</span></span> <span data-ttu-id="4e181-1835">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1835">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4e181-1836">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1836">Optional.</span></span> <span data-ttu-id="4e181-1837">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1837">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="4e181-1838">변수의 데이터를 디스크 파일에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1838">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="4e181-1839"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1839">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="4e181-1840">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-1840">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-1841">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1841">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4e181-1842">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1842">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="4e181-1843">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1843">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4e181-1844">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1844">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="4e181-1845">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1845">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="4e181-1846">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1846">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="4e181-1847">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1847">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4e181-1848">임의 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-1848">Random Mode</span></span>  
 <span data-ttu-id="4e181-1849">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1849">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4e181-1850">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1850">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4e181-1851">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1851">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4e181-1852">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1852">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="4e181-1853">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1853">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="4e181-1854">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1854">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="4e181-1855">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1855">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="4e181-1856">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1856">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="4e181-1857">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1857">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="4e181-1858">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1858">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="4e181-1859">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1859">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="4e181-1860">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1860">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4e181-1861">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1861">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4e181-1862">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1862">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="4e181-1863">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1863">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="4e181-1864">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1864">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="4e181-1865">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1865">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4e181-1866">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1866">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="4e181-1867">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1867">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4e181-1868">길이가 2 + 8 시간 차원 수를 같습니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-1868">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-1869">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1869">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4e181-1870">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1870">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="4e181-1871">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1871">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="4e181-1872">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1872">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="4e181-1873">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1873">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="4e181-1874">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1874">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4e181-1875">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="4e181-1875">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4e181-1876">이진 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-1876">Binary Mode</span></span>  
 <span data-ttu-id="4e181-1877">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1877">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4e181-1878">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="4e181-1878">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4e181-1879">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1879">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4e181-1880">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1880">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4e181-1881">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1881">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="4e181-1882">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1882">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="4e181-1883">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1883">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="4e181-1884">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1884">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="4e181-1885">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1885">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="4e181-1886">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1886">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-1887">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1887">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="4e181-1888">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1888">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-1889"><paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-1889"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-1890">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-1890">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-1891">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-1891">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-1892">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1892">Required.</span></span> <span data-ttu-id="4e181-1893">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1893">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-1894">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1894">Required.</span></span> <span data-ttu-id="4e181-1895">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1895">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4e181-1896">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1896">Optional.</span></span> <span data-ttu-id="4e181-1897">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1897">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="4e181-1898">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1898">Optional.</span></span> <span data-ttu-id="4e181-1899">문자열을 쓰는 경우에만 적용됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1899">Applies only when writing a string.</span></span> <span data-ttu-id="4e181-1900">문자열에 대한 2바이트의 문자열 길이 설명자를 파일에 쓸지 여부를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1900">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="4e181-1901">기본값은 <see langword="False" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1901">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="4e181-1902">변수의 데이터를 디스크 파일에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1902">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="4e181-1903"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1903">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="4e181-1904">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-1904">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-1905">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1905">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4e181-1906">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1906">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="4e181-1907">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1907">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4e181-1908">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1908">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="4e181-1909">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1909">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="4e181-1910">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1910">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="4e181-1911">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1911">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4e181-1912">임의 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-1912">Random Mode</span></span>  
 <span data-ttu-id="4e181-1913">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1913">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4e181-1914">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1914">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4e181-1915">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1915">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4e181-1916">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1916">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="4e181-1917">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1917">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="4e181-1918">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1918">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="4e181-1919">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1919">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="4e181-1920">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1920">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="4e181-1921">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1921">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="4e181-1922">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1922">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="4e181-1923">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1923">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="4e181-1924">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1924">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4e181-1925">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1925">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4e181-1926">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1926">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="4e181-1927">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1927">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="4e181-1928">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1928">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="4e181-1929">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1929">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4e181-1930">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1930">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="4e181-1931">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1931">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4e181-1932">길이가 2 + 8 시간 차원 수를 같습니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-1932">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-1933">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4e181-1934">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1934">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="4e181-1935">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1935">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="4e181-1936">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1936">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="4e181-1937">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1937">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="4e181-1938">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1938">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4e181-1939">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="4e181-1939">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4e181-1940">이진 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-1940">Binary Mode</span></span>  
 <span data-ttu-id="4e181-1941">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1941">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4e181-1942">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="4e181-1942">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4e181-1943">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1943">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4e181-1944">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1944">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4e181-1945">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1945">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="4e181-1946">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1946">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="4e181-1947">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1947">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="4e181-1948">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1948">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="4e181-1949">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1949">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="4e181-1950">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1950">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-1951">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1951">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="4e181-1952">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1952">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-1953"><paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-1953"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-1954">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-1954">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-1955">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-1955">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-1956">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1956">Required.</span></span> <span data-ttu-id="4e181-1957">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1957">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-1958">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-1958">Required.</span></span> <span data-ttu-id="4e181-1959">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1959">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4e181-1960">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1960">Optional.</span></span> <span data-ttu-id="4e181-1961">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1961">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="4e181-1962">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1962">Optional.</span></span> <span data-ttu-id="4e181-1963">배열을 쓰는 경우에만 적용됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1963">Applies only when writing an array.</span></span> <span data-ttu-id="4e181-1964">배열을 동적으로 처리할 것인지의 여부와 길이를 설명하는 문자열에 대한 배열 설명자를 쓸 것인지의 여부를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1964">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="4e181-1965">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1965">Optional.</span></span> <span data-ttu-id="4e181-1966">문자열을 쓰는 경우에만 적용됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1966">Applies only when writing a string.</span></span> <span data-ttu-id="4e181-1967">문자열에 대한 2바이트의 문자열 길이 설명자를 파일에 쓸지 여부를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1967">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="4e181-1968">기본값은 <see langword="False" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1968">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="4e181-1969">변수의 데이터를 디스크 파일에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1969">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="4e181-1970"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePut" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1970">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="4e181-1971">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-1971">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-1972">`FilePut` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1972">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4e181-1973">`FilePut`로 작성된 데이터는 일반적으로 `FileGet`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1973">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="4e181-1974">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1974">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4e181-1975">생략 하면 `RecordNumber`, 다음 레코드 또는 마지막 바이트 `FileGet` 하거나 `FilePut` 함수 또는 마지막 가리키는 `Seek` 함수를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1975">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="4e181-1976">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1976">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="4e181-1977">`FilePut` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1977">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="4e181-1978">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePut`를 동일한 작업을 수행 해야 `FileGet`, 예상 된 길이로 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1978">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4e181-1979">임의 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-1979">Random Mode</span></span>  
 <span data-ttu-id="4e181-1980">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1980">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4e181-1981">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePut` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1981">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4e181-1982">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1982">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4e181-1983">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1983">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="4e181-1984">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1984">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="4e181-1985">문자열 변수를 쓰는 경우 `FilePut` 문자열 길이 포함 한 다음 변수에 전달 되는 데이터를 기록 하는 2 바이트 설명자를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1985">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="4e181-1986">따라서 레코드 길이 지정 된 된 `RecordLength` 절을 `FileOpen` 함수 문자열의 실제 길이 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1986">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="4e181-1987">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1987">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="4e181-1988">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePut` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1988">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="4e181-1989">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1989">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="4e181-1990">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePut` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1990">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="4e181-1991">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1991">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4e181-1992">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1992">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4e181-1993">배열 변수를 쓰는 경우 크기와 배열 차원에 대 한 설명자를 쓸 것인지 여부를 선택할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1993">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="4e181-1994">Visual Basic 6.0 및 이전 버전에는 고정 크기 배열이 아니라 동적 배열에 대 한 파일 설명자를 작성합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1994">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="4e181-1995">Visual Basic 2005의 설명자를 작성 하지 기본값으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1995">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="4e181-1996">설명자를 설정 합니다 `ArrayIsDynamic` 매개 변수를 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1996">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4e181-1997">읽을 배열; 방법과 일치 해야 하는 배열을 쓰는 경우 설명자를 사용 하 여 읽을 수는 경우 설명자를 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1997">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="4e181-1998">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-1998">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4e181-1999">길이가 2 + 8 시간 차원 수를 같습니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-1999">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4e181-2000">지정한 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2000">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4e181-2001">배열에 기록 되는 경우 다음 배열 선언을 218 바이트를 필요로 하는 예를 들어, 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2001">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="4e181-2002">변수를 쓰는 다른 유형의 변수 (없습니다 가변 길이 문자열 또는 개체) 이면 `FilePut` 변수 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2002">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="4e181-2003">지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 쓰여지는 데이터의 길이 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2003">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="4e181-2004">`FilePut` 요소 간의 채우지는 않습니다 점을 제외 하 고 구조의 요소를 개별적으로 작성 된 각 처럼 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2004">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="4e181-2005">`VBFixedString` 특성을 쓸 때 문자열의 크기를 나타내는 구조체의 문자열 필드에 적용할 수 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2005">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4e181-2006">문자열에서 지정한 것 보다 많은 바이트에 있는 필드는 `VBFixedString` 특성 기록 될 때 잘립니다 디스크</span><span class="sxs-lookup"><span data-stu-id="4e181-2006">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4e181-2007">이진 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-2007">Binary Mode</span></span>  
 <span data-ttu-id="4e181-2008">파일에서 열에 대 한 `Binary` 모드에서는 대부분의는 `Random` 모드 규칙이 몇 가지 예외가 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2008">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4e181-2009">파일에 대해 다음 규칙에서 열린 `Binary` 모드에 대 한 규칙에서 다른 `Random` 모드:</span><span class="sxs-lookup"><span data-stu-id="4e181-2009">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4e181-2010">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2010">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4e181-2011">`FilePut` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2011">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4e181-2012">구조에 포함 되지 않은 모든 배열에 대 한 `FilePut` 데이터만 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2012">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="4e181-2013">설명자가 없는 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2013">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="4e181-2014">`FilePut` 2 바이트 길이 설명자 없이 구조체의 요소가 없는 가변 길이 문자열을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2014">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="4e181-2015">쓴 바이트 수를는 문자열의 문자 수를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2015">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="4e181-2016">예를 들어 다음 문은 파일 번호 1 11 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2016">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="4e181-2017">사용 하 여 파일에 쓸 합니다 `FilePut` 함수에는 필요 `Write` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2017">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2018">이 예제에서는 `FilePut` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2018">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="4e181-2019">구조체의 5 개 레코드가 `Person` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2019">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-2020"><paramref name="RecordNumber" /> &lt; 1이고 -1과 같지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-2020"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-2021">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-2021">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-2022">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2022">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePutObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePutObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-2023">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2023">Required.</span></span> <span data-ttu-id="4e181-2024">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2024">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-2025">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2025">Required.</span></span> <span data-ttu-id="4e181-2026">디스크에 쓴 데이터를 포함하는 유효한 변수 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2026">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4e181-2027">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2027">Optional.</span></span> <span data-ttu-id="4e181-2028">쓰기를 시작할 레코드 번호(<see langword="Random" /> 모드 파일) 또는 바이트 숫자(<see langword="Binary" /> 모드 파일)입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2028">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="4e181-2029">변수의 데이터를 디스크 파일에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2029">Writes data from a variable to a disk file.</span></span>  <span data-ttu-id="4e181-2030"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FilePutObject" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2030">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span></span> <span data-ttu-id="4e181-2031">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2031">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2032">합니다 `FilePutObject` 함수 대신 사용 됩니다 `FilePut` 경우 컴파일할 때 모호성을 피할 수 형식 `Object` 와 같은 다른 형식 대신 전달 됩니다 `Integer`를 `Long`, `Short`등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2032">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="4e181-2033">`FilePutObject` 개체를 설명 하는 설명자를 읽고 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2033">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="4e181-2034">작성 하려는 경우는 `Variant` 형식 `FilePutObject` 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2034">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="4e181-2035">의문이 있으면 두 번째 매개 변수에 대 한 개체를 사용 하는 경우, 항상 사용 하는 권장 `FilePutObject` 고 `FileGetObject`입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2035">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="4e181-2036">`FilePutObject` 에서만 유효 `Random` 고 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2036">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4e181-2037">`FilePutObject`로 작성된 데이터는 일반적으로 `FileGetObject`을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2037">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="4e181-2038">첫 번째 레코드 또는 바이트를 파일에는 위치 1, 두 번째 레코드 또는 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2038">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4e181-2039">생략 하면 `RecordNumber`, `FilePutObject` 마지막 뒤에 다음 레코드 또는 바이트를 씁니다 `FileGetObject` 하거나 `FilePutObject` 함수 (마지막 가리키는 레코드 또는 바이트 또는 `Seek` 함수).</span><span class="sxs-lookup"><span data-stu-id="4e181-2039">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="4e181-2040">`StringIsFixedLength` 인수 함수는 변수 또는 고정 된 길이로 문자열을 해석 하는 여부를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2040">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="4e181-2041">`FilePutObject` 인수가 길이 설명자를 쓰지 않습니다 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2041">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="4e181-2042">사용 하는 경우 `StringIsFixedLength`  =  `True` 사용 하 여 `FilePutObject`를 사용 하 여 동일한 작업을 수행 해야 `FileGetObject`, 예상 길이 문자열 초기화 되는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2042">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4e181-2043">임의 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-2043">Random Mode</span></span>  
 <span data-ttu-id="4e181-2044">파일에서 열에 대 한 `Random` 모드는 다음 규칙이 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2044">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4e181-2045">쓰여지는 데이터의 길이에 지정 된 길이 보다 작으면를 `RecordLength` 절 합니다 `FileOpen` 함수를 `FilePutObject` 레코드 길이가 경계에서 다음 레코드를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2045">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4e181-2046">끝 하나의 레코드와 다음 레코드의 시작 사이의 간격을 파일 버퍼의 기존 내용으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2046">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4e181-2047">데이터의 안쪽 여백을 정확히 결정할 수 없으므로, 일반적으로 레코드 길이 쓰고 있는 데이터의 길이 일치 시키는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2047">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="4e181-2048">쓰여지는 데이터의 길이에 지정 된 길이 보다 크면 합니다 `RecordLength` 절을 `FileOpen` 함수에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2048">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="4e181-2049">숫자 형식을 포함 하는 개체인 변수를 쓰는 경우 `FilePutObject` 식별 하는 2 바이트를 쓴는 `VarType` 개체의 다음 변수를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2049">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="4e181-2050">예를 들어 개체를 작성 하는 경우 포함 하는 정수 `FilePutObject` 6 바이트를 씁니다: 개체를 식별 하는 2 바이트 `VarType(3)` (`Integer`) 및 데이터를 포함 하는 4 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2050">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="4e181-2051">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수에 변수를 저장 하는 데 필요한 바이트의 실제 개수 보다 큰 2 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2051">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="4e181-2052">문자열을 포함 하는 개체인 변수를 쓰는 경우 `FilePutObject` 식별 하는 2 바이트 설명자를 `VarType(8)` 개체, 문자열 및 다음 쓰기 문자열 데이터의 길이 나타내는 2 바이트 설명자의 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2052">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="4e181-2053">지정 된 레코드 길이 `RecordLength` 에서 매개 변수는 `FileOpen` 함수 문자열의 실제 길이 보다 큰 4 바이트 이상 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2053">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4e181-2054">전달 해야 설명자 없이 문자열을 저장 하려는 경우 `True` 에 `StringIsFixedLength` 정확한 길이 해야로 읽어 문자열과 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2054">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4e181-2055">경우 변수를 쓰는 배열에서 지정 된 레코드 길이 `RecordLength` 절을 `FileOpen` 배열 데이터와 배열 설명자를 작성 하는 데 필요한 모든 바이트의 합계 보다 크거나 함수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2055">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4e181-2056">설명자에는 배열, 크기 및 각 순위에 대 한 하한값의 차수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2056">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4e181-2057">길이가 2 + 8 시간 차원 수를 같습니다. (2 + 8 \* 더한 것).</span><span class="sxs-lookup"><span data-stu-id="4e181-2057">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4e181-2058">이진 모드</span><span class="sxs-lookup"><span data-stu-id="4e181-2058">Binary Mode</span></span>  
 <span data-ttu-id="4e181-2059">파일에서 열에 대 한 `Binary` 모드에서는 모든를 `Random` 모드 규칙 적용을 제외 하 고:</span><span class="sxs-lookup"><span data-stu-id="4e181-2059">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="4e181-2060">합니다 `RecordLength` 절을 `FileOpen` 함수에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2060">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4e181-2061">`FilePutObject` 모든 변수를 연속적으로 레코드 사이 안쪽 여백을 없이 즉, 디스크를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2061">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2062">이 예제에서는 `FilePutObject` 함수 파일에 쓸 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2062">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-2063">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2063">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberSignature Language="F#" Value="static member FileWidth : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileWidth (FileNumber, RecordWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-2064">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2064">Required.</span></span> <span data-ttu-id="4e181-2065">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2065">Any valid file number.</span></span></param>
        <param name="RecordWidth"><span data-ttu-id="4e181-2066">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2066">Required.</span></span> <span data-ttu-id="4e181-2067">0~255 사이의 숫자 식으로, 새 줄이 시작되기 전에 줄에 표시되는 문자의 수를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2067">Numeric expression in the range 0-255, inclusive, which indicates how many characters appear on a line before a new line is started.</span></span> <span data-ttu-id="4e181-2068"><paramref name="RecordWidth" />가 0이면 줄 길이에 제한이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2068">If <paramref name="RecordWidth" /> equals 0, there is no limit to the length of a line.</span></span> <span data-ttu-id="4e181-2069"><paramref name="RecordWidth" />의 기본값은 0입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2069">The default value for <paramref name="RecordWidth" /> is 0.</span></span></param>
        <summary><span data-ttu-id="4e181-2070"><see langword="FileOpen" /> 함수를 사용하여 연 파일에 출력 줄 너비를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2070">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4e181-2071">이 예제에서는 `FileWidth` 파일에 대 한 출력 줄 너비를 설정 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2071">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-2072">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-2072">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4e181-2073">Visual Basic을 사용한 파일 액세스</span><span class="sxs-lookup"><span data-stu-id="4e181-2073">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberSignature Language="F#" Value="static member FreeFile : unit -&gt; int" Usage="Microsoft.VisualBasic.FileSystem.FreeFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4e181-2074"><see langword="Integer" /> 함수에서 사용할 수 있는 다음 파일 번호를 나타내는 <see langword="FileOpen" /> 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2074">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></summary>
        <returns><span data-ttu-id="4e181-2075"><see langword="FileOpen" /> 함수에서 사용할 수 있는 다음 파일 번호를 나타내는 정수 값입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2075">An integer value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2076">사용 하 여 `FreeFile` 이미 사용 되지 않는 파일 번호를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2076">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2077">이 예제에서는 `FreeFile` 다음 사용 가능한 파일 수를 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2077">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="4e181-2078">루프 내에서 출력에 대 한 5 개의 파일이 열리고 몇 가지 샘플 데이터는 각각에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2078">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-2079">사용 중인 파일 수가 255개를 초과합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2079">More than 255 files are in use.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-2080">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2080">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member GetAttr : string -&gt; Microsoft.VisualBasic.FileAttribute" Usage="Microsoft.VisualBasic.FileSystem.GetAttr PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="4e181-2081">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2081">Required.</span></span> <span data-ttu-id="4e181-2082">파일, 디렉터리 또는 폴더 이름을 지정하는 문자열 식입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2082">A string expression that specifies a file, directory, or folder name.</span></span> <span data-ttu-id="4e181-2083"><paramref name="PathName" />에는 디렉터리나 폴더 및 드라이브가 포함될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2083"><paramref name="PathName" /> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="4e181-2084">파일, 디렉터리 또는 폴더의 특성을 나타내는 <see langword="FileAttribute" /> 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2084">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span></span> <span data-ttu-id="4e181-2085"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="FileAttribute" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2085">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span></span> <span data-ttu-id="4e181-2086">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2086">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="4e181-2087"><see langword="GetAttr" /> 함수에서 반환되는 값은 다음 열거형 값의 합입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2087">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:</span></span> 
 <list type="table"><item><term> <span data-ttu-id="4e181-2088">값</span><span class="sxs-lookup"><span data-stu-id="4e181-2088">Value</span></span> 
 </term><description> <span data-ttu-id="4e181-2089">상수</span><span class="sxs-lookup"><span data-stu-id="4e181-2089">Constant</span></span> 
 </description><description> <span data-ttu-id="4e181-2090">설명</span><span class="sxs-lookup"><span data-stu-id="4e181-2090">Description</span></span> 
 </description></item><item><term><see langword="Normal" /></term><description><see langword="vbNormal" /></description><description> <span data-ttu-id="4e181-2091">일반 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2091">Normal.</span></span>  
  
 </description></item><item><term><see langword="ReadOnly" /></term><description><see langword="vbReadOnly" /></description><description> <span data-ttu-id="4e181-2092">읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2092">Read-only.</span></span>  
  
 </description></item><item><term><see langword="Hidden" /></term><description><see langword="vbHidden" /></description><description> <span data-ttu-id="4e181-2093">숨겨져 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2093">Hidden.</span></span>  
  
 </description></item><item><term><see langword="System" /></term><description><see langword="vbSystem" /></description><description> <span data-ttu-id="4e181-2094">시스템 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2094">System file.</span></span>  
  
 </description></item><item><term><see langword="Directory" /></term><description><see langword="vbDirectory" /></description><description> <span data-ttu-id="4e181-2095">디렉터리 또는 폴더입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2095">Directory or folder.</span></span>  
  
 </description></item><item><term><see langword="Archive" /></term><description><see langword="vbArchive" /></description><description> <span data-ttu-id="4e181-2096">마지막 백업 이후에 파일이 변경되었습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2096">File has changed since last backup.</span></span>  
  
 </description></item><item><term><see langword="Alias" /></term><description><see langword="vbAlias" /></description><description> <span data-ttu-id="4e181-2097">파일에 다른 이름이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2097">File has a different name.</span></span>  
  
 </description></item></list><block subset="none" type="note"><para>  
 <span data-ttu-id="4e181-2098">이러한 열거형은 Visual Basic 언어로 지정되며</span><span class="sxs-lookup"><span data-stu-id="4e181-2098">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="4e181-2099">코드의 모든 위치에서 실제 값 대신 사용될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2099">The names can be used anywhere in your code in place of the actual values.</span></span>  
  
</para></block></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2100">설정 된 특성을 확인 하려면 사용 합니다 `And` 반환한 값의 비트 비교를 수행 하는 연산자를 `GetAttr` 함수 및 개별 파일 특성의 값.</span><span class="sxs-lookup"><span data-stu-id="4e181-2100">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="4e181-2101">결과 0이 없는 경우 해당 특성은 명명된 된 파일에 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2101">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="4e181-2102">예를 들어, 다음의 반환 값 `And` 식은 0 인 경우에는 `Archive` 특성이 설정 되지 않은:</span><span class="sxs-lookup"><span data-stu-id="4e181-2102">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="4e181-2103">0이 아닌 값을 반환 합니다 `Archive` 특성이 설정 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2103">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2104">이 예제에서는 `GetAttr` 파일 및 디렉터리 또는 폴더의 특성을 결정 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2104">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-2105"><paramref name="Pathname" />이 잘못되었거나 와일드카드를 포함하고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2105"><paramref name="Pathname" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="4e181-2106">대상 파일이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2106">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/and-operator.md"><span data-ttu-id="4e181-2107">And 연산자(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4e181-2107">And Operator (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4e181-2108">Visual Basic을 사용한 파일 액세스</span><span class="sxs-lookup"><span data-stu-id="4e181-2108">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4e181-2109">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2109">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-2110">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2110">Required.</span></span> <span data-ttu-id="4e181-2111">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2111">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-2112">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2112">Required.</span></span> <span data-ttu-id="4e181-2113">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2113">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="4e181-2114">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2114">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2115">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2115">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4e181-2116">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2116">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4e181-2117">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2117">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4e181-2118">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2118">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="4e181-2119">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2119">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-2120">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2120">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="4e181-2121">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2121">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="4e181-2122">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2122">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="4e181-2123">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2123">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="4e181-2124">데이터</span><span class="sxs-lookup"><span data-stu-id="4e181-2124">Data</span></span>|<span data-ttu-id="4e181-2125">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="4e181-2125">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="4e181-2126">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="4e181-2126">Delimiting comma or blank line</span></span>|<span data-ttu-id="4e181-2127">Empty</span><span class="sxs-lookup"><span data-stu-id="4e181-2127">Empty</span></span>|  
|<span data-ttu-id="4e181-2128">#NULL#</span><span class="sxs-lookup"><span data-stu-id="4e181-2128">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="4e181-2129"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="4e181-2129">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="4e181-2130">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="4e181-2130">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="4e181-2131">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="4e181-2131">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="4e181-2132">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="4e181-2132">#ERROR `errornumber`#</span></span>|<span data-ttu-id="4e181-2133">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="4e181-2133">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="4e181-2134">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2134">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4e181-2135">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2135">The `Input` function is not localized.</span></span> <span data-ttu-id="4e181-2136">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2136">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-2137">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2137">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="4e181-2138">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2138">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2139">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2139">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="4e181-2140">이 예에서는 가정 `TestFile` 파일을 사용 하 여 기록 된 데이터의 일부 줄은는 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="4e181-2140">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-2141">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-2141">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4e181-2142">방법: Visual Basic에서 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2142">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4e181-2143">Visual Basic을 사용한 파일 액세스</span><span class="sxs-lookup"><span data-stu-id="4e181-2143">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4e181-2144">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2144">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-2145">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2145">Required.</span></span> <span data-ttu-id="4e181-2146">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2146">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-2147">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2147">Required.</span></span> <span data-ttu-id="4e181-2148">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2148">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="4e181-2149">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2149">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2150">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2150">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4e181-2151">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2151">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4e181-2152">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2152">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4e181-2153">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2153">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="4e181-2154">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2154">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-2155">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2155">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="4e181-2156">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2156">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="4e181-2157">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2157">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="4e181-2158">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2158">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="4e181-2159">데이터</span><span class="sxs-lookup"><span data-stu-id="4e181-2159">Data</span></span>|<span data-ttu-id="4e181-2160">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="4e181-2160">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="4e181-2161">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="4e181-2161">Delimiting comma or blank line</span></span>|<span data-ttu-id="4e181-2162">Empty</span><span class="sxs-lookup"><span data-stu-id="4e181-2162">Empty</span></span>|  
|<span data-ttu-id="4e181-2163">#NULL#</span><span class="sxs-lookup"><span data-stu-id="4e181-2163">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="4e181-2164"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="4e181-2164">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="4e181-2165">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="4e181-2165">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="4e181-2166">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="4e181-2166">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="4e181-2167">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="4e181-2167">#ERROR `errornumber`#</span></span>|<span data-ttu-id="4e181-2168">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="4e181-2168">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="4e181-2169">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2169">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4e181-2170">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2170">The `Input` function is not localized.</span></span> <span data-ttu-id="4e181-2171">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2171">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-2172">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2172">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="4e181-2173">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2173">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2174">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2174">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="4e181-2175">이 예에서는 가정 `TestFile` 파일을 사용 하 여 기록 된 데이터의 일부 줄은는 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="4e181-2175">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-2176">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-2176">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4e181-2177">방법: Visual Basic에서 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2177">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4e181-2178">Visual Basic을 사용한 파일 액세스</span><span class="sxs-lookup"><span data-stu-id="4e181-2178">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4e181-2179">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2179">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-2180">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2180">Required.</span></span> <span data-ttu-id="4e181-2181">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2181">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-2182">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2182">Required.</span></span> <span data-ttu-id="4e181-2183">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2183">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="4e181-2184">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2184">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2185">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2185">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4e181-2186">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2186">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4e181-2187">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2187">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4e181-2188">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2188">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="4e181-2189">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2189">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-2190">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2190">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="4e181-2191">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2191">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="4e181-2192">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2192">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="4e181-2193">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2193">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="4e181-2194">데이터</span><span class="sxs-lookup"><span data-stu-id="4e181-2194">Data</span></span>|<span data-ttu-id="4e181-2195">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="4e181-2195">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="4e181-2196">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="4e181-2196">Delimiting comma or blank line</span></span>|<span data-ttu-id="4e181-2197">Empty</span><span class="sxs-lookup"><span data-stu-id="4e181-2197">Empty</span></span>|  
|<span data-ttu-id="4e181-2198">#NULL#</span><span class="sxs-lookup"><span data-stu-id="4e181-2198">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="4e181-2199"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="4e181-2199">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="4e181-2200">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="4e181-2200">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="4e181-2201">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="4e181-2201">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="4e181-2202">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="4e181-2202">#ERROR `errornumber`#</span></span>|<span data-ttu-id="4e181-2203">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="4e181-2203">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="4e181-2204">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2204">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4e181-2205">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2205">The `Input` function is not localized.</span></span> <span data-ttu-id="4e181-2206">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2206">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-2207">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2207">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="4e181-2208">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2208">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2209">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2209">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="4e181-2210">이 예에서는 가정 `TestFile` 사용 하 여 기록 된 데이터의 여러 줄에 있는 파일이 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="4e181-2210">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-2211">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-2211">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4e181-2212">방법: Visual Basic에서 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2212">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4e181-2213">Visual Basic을 사용한 파일 액세스</span><span class="sxs-lookup"><span data-stu-id="4e181-2213">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4e181-2214">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2214">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-2215">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2215">Required.</span></span> <span data-ttu-id="4e181-2216">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2216">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-2217">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2217">Required.</span></span> <span data-ttu-id="4e181-2218">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2218">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="4e181-2219">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2219">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2220">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2220">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4e181-2221">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2221">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4e181-2222">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2222">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4e181-2223">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2223">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="4e181-2224">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2224">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-2225">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2225">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="4e181-2226">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2226">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="4e181-2227">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2227">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="4e181-2228">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2228">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="4e181-2229">데이터</span><span class="sxs-lookup"><span data-stu-id="4e181-2229">Data</span></span>|<span data-ttu-id="4e181-2230">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="4e181-2230">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="4e181-2231">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="4e181-2231">Delimiting comma or blank line</span></span>|<span data-ttu-id="4e181-2232">Empty</span><span class="sxs-lookup"><span data-stu-id="4e181-2232">Empty</span></span>|  
|<span data-ttu-id="4e181-2233">#NULL#</span><span class="sxs-lookup"><span data-stu-id="4e181-2233">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="4e181-2234"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="4e181-2234">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="4e181-2235">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="4e181-2235">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="4e181-2236">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="4e181-2236">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="4e181-2237">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="4e181-2237">#ERROR `errornumber`#</span></span>|<span data-ttu-id="4e181-2238">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="4e181-2238">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="4e181-2239">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2239">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4e181-2240">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2240">The `Input` function is not localized.</span></span> <span data-ttu-id="4e181-2241">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2241">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-2242">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2242">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="4e181-2243">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2243">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2244">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2244">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="4e181-2245">이 예에서는 가정 `TestFile` 사용 하 여 기록 된 데이터의 여러 줄에 있는 파일이 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="4e181-2245">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-2246">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-2246">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4e181-2247">방법: Visual Basic에서 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2247">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4e181-2248">Visual Basic을 사용한 파일 액세스</span><span class="sxs-lookup"><span data-stu-id="4e181-2248">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4e181-2249">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2249">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-2250">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2250">Required.</span></span> <span data-ttu-id="4e181-2251">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2251">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-2252">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2252">Required.</span></span> <span data-ttu-id="4e181-2253">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2253">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="4e181-2254">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2254">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2255">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2255">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4e181-2256">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2256">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4e181-2257">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2257">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4e181-2258">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2258">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="4e181-2259">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2259">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-2260">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2260">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="4e181-2261">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2261">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="4e181-2262">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2262">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="4e181-2263">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2263">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="4e181-2264">데이터</span><span class="sxs-lookup"><span data-stu-id="4e181-2264">Data</span></span>|<span data-ttu-id="4e181-2265">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="4e181-2265">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="4e181-2266">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="4e181-2266">Delimiting comma or blank line</span></span>|<span data-ttu-id="4e181-2267">Empty</span><span class="sxs-lookup"><span data-stu-id="4e181-2267">Empty</span></span>|  
|<span data-ttu-id="4e181-2268">#NULL#</span><span class="sxs-lookup"><span data-stu-id="4e181-2268">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="4e181-2269"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="4e181-2269">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="4e181-2270">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="4e181-2270">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="4e181-2271">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="4e181-2271">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="4e181-2272">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="4e181-2272">#ERROR `errornumber`#</span></span>|<span data-ttu-id="4e181-2273">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="4e181-2273">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="4e181-2274">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2274">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4e181-2275">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2275">The `Input` function is not localized.</span></span> <span data-ttu-id="4e181-2276">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2276">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-2277">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2277">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="4e181-2278">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2278">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2279">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2279">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="4e181-2280">이 예에서는 가정 `TestFile` 사용 하 여 기록 된 데이터의 여러 줄에 있는 파일이 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="4e181-2280">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-2281">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-2281">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4e181-2282">방법: Visual Basic에서 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2282">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4e181-2283">Visual Basic을 사용한 파일 액세스</span><span class="sxs-lookup"><span data-stu-id="4e181-2283">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4e181-2284">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2284">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-2285">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2285">Required.</span></span> <span data-ttu-id="4e181-2286">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2286">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-2287">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2287">Required.</span></span> <span data-ttu-id="4e181-2288">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2288">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="4e181-2289">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2289">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2290">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2290">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4e181-2291">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2291">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4e181-2292">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2292">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4e181-2293">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2293">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="4e181-2294">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2294">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-2295">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2295">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="4e181-2296">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2296">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="4e181-2297">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2297">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="4e181-2298">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2298">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="4e181-2299">데이터</span><span class="sxs-lookup"><span data-stu-id="4e181-2299">Data</span></span>|<span data-ttu-id="4e181-2300">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="4e181-2300">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="4e181-2301">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="4e181-2301">Delimiting comma or blank line</span></span>|<span data-ttu-id="4e181-2302">Empty</span><span class="sxs-lookup"><span data-stu-id="4e181-2302">Empty</span></span>|  
|<span data-ttu-id="4e181-2303">#NULL#</span><span class="sxs-lookup"><span data-stu-id="4e181-2303">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="4e181-2304"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="4e181-2304">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="4e181-2305">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="4e181-2305">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="4e181-2306">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="4e181-2306">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="4e181-2307">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="4e181-2307">#ERROR `errornumber`#</span></span>|<span data-ttu-id="4e181-2308">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="4e181-2308">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="4e181-2309">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2309">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4e181-2310">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2310">The `Input` function is not localized.</span></span> <span data-ttu-id="4e181-2311">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2311">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-2312">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2312">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="4e181-2313">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2313">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2314">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2314">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="4e181-2315">이 예에서는 가정 `TestFile` 사용 하 여 기록 된 데이터의 여러 줄에 있는 파일이 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="4e181-2315">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-2316">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-2316">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4e181-2317">방법: Visual Basic에서 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2317">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4e181-2318">Visual Basic을 사용한 파일 액세스</span><span class="sxs-lookup"><span data-stu-id="4e181-2318">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4e181-2319">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2319">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-2320">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2320">Required.</span></span> <span data-ttu-id="4e181-2321">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2321">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-2322">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2322">Required.</span></span> <span data-ttu-id="4e181-2323">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2323">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="4e181-2324">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2324">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2325">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2325">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4e181-2326">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2326">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4e181-2327">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2327">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4e181-2328">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2328">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="4e181-2329">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2329">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-2330">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2330">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="4e181-2331">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2331">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="4e181-2332">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2332">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="4e181-2333">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2333">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="4e181-2334">데이터</span><span class="sxs-lookup"><span data-stu-id="4e181-2334">Data</span></span>|<span data-ttu-id="4e181-2335">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="4e181-2335">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="4e181-2336">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="4e181-2336">Delimiting comma or blank line</span></span>|<span data-ttu-id="4e181-2337">Empty</span><span class="sxs-lookup"><span data-stu-id="4e181-2337">Empty</span></span>|  
|<span data-ttu-id="4e181-2338">#NULL#</span><span class="sxs-lookup"><span data-stu-id="4e181-2338">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="4e181-2339"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="4e181-2339">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="4e181-2340">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="4e181-2340">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="4e181-2341">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="4e181-2341">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="4e181-2342">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="4e181-2342">#ERROR `errornumber`#</span></span>|<span data-ttu-id="4e181-2343">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="4e181-2343">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="4e181-2344">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2344">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4e181-2345">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2345">The `Input` function is not localized.</span></span> <span data-ttu-id="4e181-2346">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2346">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-2347">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2347">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="4e181-2348">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2348">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2349">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2349">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="4e181-2350">이 예에서는 가정 `TestFile` 사용 하 여 기록 된 데이터의 여러 줄에 있는 파일이 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="4e181-2350">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-2351">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-2351">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4e181-2352">방법: Visual Basic에서 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2352">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4e181-2353">Visual Basic을 사용한 파일 액세스</span><span class="sxs-lookup"><span data-stu-id="4e181-2353">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4e181-2354">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2354">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-2355">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2355">Required.</span></span> <span data-ttu-id="4e181-2356">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2356">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-2357">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2357">Required.</span></span> <span data-ttu-id="4e181-2358">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2358">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="4e181-2359">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2359">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2360">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2360">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4e181-2361">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2361">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4e181-2362">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2362">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4e181-2363">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2363">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="4e181-2364">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2364">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-2365">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2365">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="4e181-2366">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2366">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="4e181-2367">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2367">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="4e181-2368">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2368">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="4e181-2369">데이터</span><span class="sxs-lookup"><span data-stu-id="4e181-2369">Data</span></span>|<span data-ttu-id="4e181-2370">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="4e181-2370">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="4e181-2371">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="4e181-2371">Delimiting comma or blank line</span></span>|<span data-ttu-id="4e181-2372">Empty</span><span class="sxs-lookup"><span data-stu-id="4e181-2372">Empty</span></span>|  
|<span data-ttu-id="4e181-2373">#NULL#</span><span class="sxs-lookup"><span data-stu-id="4e181-2373">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="4e181-2374"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="4e181-2374">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="4e181-2375">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="4e181-2375">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="4e181-2376">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="4e181-2376">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="4e181-2377">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="4e181-2377">#ERROR `errornumber`#</span></span>|<span data-ttu-id="4e181-2378">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="4e181-2378">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="4e181-2379">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2379">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4e181-2380">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2380">The `Input` function is not localized.</span></span> <span data-ttu-id="4e181-2381">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2381">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-2382">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2382">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="4e181-2383">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2383">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2384">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2384">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="4e181-2385">이 예에서는 가정 `TestFile` 사용 하 여 기록 된 데이터의 여러 줄에 있는 파일이 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="4e181-2385">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-2386">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-2386">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4e181-2387">방법: Visual Basic에서 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2387">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4e181-2388">Visual Basic을 사용한 파일 액세스</span><span class="sxs-lookup"><span data-stu-id="4e181-2388">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4e181-2389">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2389">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-2390">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2390">Required.</span></span> <span data-ttu-id="4e181-2391">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2391">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-2392">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2392">Required.</span></span> <span data-ttu-id="4e181-2393">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2393">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="4e181-2394">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2394">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2395">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2395">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4e181-2396">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2396">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4e181-2397">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2397">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4e181-2398">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2398">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="4e181-2399">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2399">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-2400">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2400">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="4e181-2401">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2401">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="4e181-2402">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2402">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="4e181-2403">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2403">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="4e181-2404">데이터</span><span class="sxs-lookup"><span data-stu-id="4e181-2404">Data</span></span>|<span data-ttu-id="4e181-2405">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="4e181-2405">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="4e181-2406">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="4e181-2406">Delimiting comma or blank line</span></span>|<span data-ttu-id="4e181-2407">Empty</span><span class="sxs-lookup"><span data-stu-id="4e181-2407">Empty</span></span>|  
|<span data-ttu-id="4e181-2408">#NULL#</span><span class="sxs-lookup"><span data-stu-id="4e181-2408">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="4e181-2409"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="4e181-2409">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="4e181-2410">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="4e181-2410">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="4e181-2411">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="4e181-2411">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="4e181-2412">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="4e181-2412">#ERROR `errornumber`#</span></span>|<span data-ttu-id="4e181-2413">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="4e181-2413">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="4e181-2414">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2414">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4e181-2415">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2415">The `Input` function is not localized.</span></span> <span data-ttu-id="4e181-2416">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2416">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-2417">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2417">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="4e181-2418">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2418">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2419">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2419">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="4e181-2420">이 예에서는 가정 `TestFile` 사용 하 여 기록 된 데이터의 여러 줄에 있는 파일이 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="4e181-2420">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-2421">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-2421">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4e181-2422">방법: Visual Basic에서 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2422">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4e181-2423">Visual Basic을 사용한 파일 액세스</span><span class="sxs-lookup"><span data-stu-id="4e181-2423">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4e181-2424">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2424">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-2425">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2425">Required.</span></span> <span data-ttu-id="4e181-2426">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2426">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-2427">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2427">Required.</span></span> <span data-ttu-id="4e181-2428">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2428">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="4e181-2429">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2429">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2430">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2430">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4e181-2431">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2431">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4e181-2432">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2432">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4e181-2433">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2433">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="4e181-2434">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2434">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-2435">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2435">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="4e181-2436">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2436">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="4e181-2437">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2437">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="4e181-2438">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2438">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="4e181-2439">데이터</span><span class="sxs-lookup"><span data-stu-id="4e181-2439">Data</span></span>|<span data-ttu-id="4e181-2440">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="4e181-2440">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="4e181-2441">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="4e181-2441">Delimiting comma or blank line</span></span>|<span data-ttu-id="4e181-2442">Empty</span><span class="sxs-lookup"><span data-stu-id="4e181-2442">Empty</span></span>|  
|<span data-ttu-id="4e181-2443">#NULL#</span><span class="sxs-lookup"><span data-stu-id="4e181-2443">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="4e181-2444"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="4e181-2444">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="4e181-2445">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="4e181-2445">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="4e181-2446">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="4e181-2446">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="4e181-2447">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="4e181-2447">#ERROR `errornumber`#</span></span>|<span data-ttu-id="4e181-2448">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="4e181-2448">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="4e181-2449">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2449">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4e181-2450">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2450">The `Input` function is not localized.</span></span> <span data-ttu-id="4e181-2451">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2451">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-2452">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2452">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="4e181-2453">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2453">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2454">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2454">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="4e181-2455">이 예에서는 가정 `TestFile` 사용 하 여 기록 된 데이터의 여러 줄에 있는 파일이 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="4e181-2455">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-2456">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-2456">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4e181-2457">방법: Visual Basic에서 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2457">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4e181-2458">Visual Basic을 사용한 파일 액세스</span><span class="sxs-lookup"><span data-stu-id="4e181-2458">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4e181-2459">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2459">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-2460">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2460">Required.</span></span> <span data-ttu-id="4e181-2461">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2461">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-2462">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2462">Required.</span></span> <span data-ttu-id="4e181-2463">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2463">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="4e181-2464">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2464">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2465">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2465">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4e181-2466">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2466">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4e181-2467">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2467">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4e181-2468">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2468">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="4e181-2469">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2469">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-2470">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2470">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="4e181-2471">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2471">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="4e181-2472">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2472">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="4e181-2473">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2473">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="4e181-2474">데이터</span><span class="sxs-lookup"><span data-stu-id="4e181-2474">Data</span></span>|<span data-ttu-id="4e181-2475">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="4e181-2475">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="4e181-2476">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="4e181-2476">Delimiting comma or blank line</span></span>|<span data-ttu-id="4e181-2477">Empty</span><span class="sxs-lookup"><span data-stu-id="4e181-2477">Empty</span></span>|  
|<span data-ttu-id="4e181-2478">#NULL#</span><span class="sxs-lookup"><span data-stu-id="4e181-2478">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="4e181-2479"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="4e181-2479">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="4e181-2480">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="4e181-2480">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="4e181-2481">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="4e181-2481">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="4e181-2482">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="4e181-2482">#ERROR `errornumber`#</span></span>|<span data-ttu-id="4e181-2483">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="4e181-2483">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="4e181-2484">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2484">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4e181-2485">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2485">The `Input` function is not localized.</span></span> <span data-ttu-id="4e181-2486">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2486">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-2487">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2487">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="4e181-2488">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2488">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2489">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2489">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="4e181-2490">이 예에서는 가정 `TestFile` 사용 하 여 기록 된 데이터의 여러 줄에 있는 파일이 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="4e181-2490">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-2491">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-2491">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4e181-2492">방법: Visual Basic에서 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2492">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4e181-2493">Visual Basic을 사용한 파일 액세스</span><span class="sxs-lookup"><span data-stu-id="4e181-2493">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4e181-2494">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2494">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-2495">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2495">Required.</span></span> <span data-ttu-id="4e181-2496">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2496">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4e181-2497">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2497">Required.</span></span> <span data-ttu-id="4e181-2498">파일에서 읽은 값이 할당된 변수로, 배열이나 개체 변수가 될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2498">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="4e181-2499">열린 순차 파일에서 데이터를 읽어 변수에 할당합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2499">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2500">`Input` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2500">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4e181-2501">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2501">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4e181-2502">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2502">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4e181-2503">데이터를 읽을 `Input` 일반적으로 사용 하 여 파일에 기록 됩니다 `Write`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2503">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="4e181-2504">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2504">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-2505">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2505">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="4e181-2506">예를 들어, Form1.vb 라는 파일을 Visual Basic 2005 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2506">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="4e181-2507">읽을 때 표준 문자열 또는 숫자 데이터를 수정 하지 않고 변수에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2507">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="4e181-2508">다음 표에서 다른 입력된 데이터를 처리 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2508">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="4e181-2509">데이터</span><span class="sxs-lookup"><span data-stu-id="4e181-2509">Data</span></span>|<span data-ttu-id="4e181-2510">변수에 할당 된 값</span><span class="sxs-lookup"><span data-stu-id="4e181-2510">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="4e181-2511">구분 기호 쉼표 또는 빈 줄</span><span class="sxs-lookup"><span data-stu-id="4e181-2511">Delimiting comma or blank line</span></span>|<span data-ttu-id="4e181-2512">Empty</span><span class="sxs-lookup"><span data-stu-id="4e181-2512">Empty</span></span>|  
|<span data-ttu-id="4e181-2513">#NULL#</span><span class="sxs-lookup"><span data-stu-id="4e181-2513">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="4e181-2514"># # TRUE 또는 FALSE # #</span><span class="sxs-lookup"><span data-stu-id="4e181-2514">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="4e181-2515">`True` 또는 `False`</span><span class="sxs-lookup"><span data-stu-id="4e181-2515">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="4e181-2516">날짜 및/또는 식으로 표현 하는 시간</span><span class="sxs-lookup"><span data-stu-id="4e181-2516">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="4e181-2517">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="4e181-2517">#ERROR `errornumber`#</span></span>|<span data-ttu-id="4e181-2518">`errornumber` (변수가 오류로 태그가 지정 된 개체)</span><span class="sxs-lookup"><span data-stu-id="4e181-2518">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="4e181-2519">데이터 항목을 입력 하는 동안 파일 끝에 도달 하면 입력이 중지 되 고 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2519">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4e181-2520">`Input` 함수 현지화 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2520">The `Input` function is not localized.</span></span> <span data-ttu-id="4e181-2521">예를 들어 독일어 버전의 3,14159를 입력 하는 경우만 3, 반환 쉼표 대신 소수점으로 변수 구분 기호로 처리 되기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2521">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-2522">사용 하 여 파일에서 읽기를 `Input` 함수에는 필요 `Read` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2522">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="4e181-2523">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2523">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2524">이 예제에서는 `Input` 를 두 변수에 파일에서 데이터를 읽는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2524">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="4e181-2525">이 예에서는 가정 `TestFile` 사용 하 여 기록 된 데이터의 여러 줄에 있는 파일이 `Write` 함수를 인용 및 예를 들어, 쉼표로 구분 된 숫자의 문자열을 포함 하는 각 줄: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="4e181-2525">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-2526">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-2526">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4e181-2527">방법: Visual Basic에서 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2527">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4e181-2528">Visual Basic을 사용한 파일 액세스</span><span class="sxs-lookup"><span data-stu-id="4e181-2528">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4e181-2529">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2529">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberSignature Language="F#" Value="static member InputString : int * int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.InputString (FileNumber, CharCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-2530">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2530">Required.</span></span> <span data-ttu-id="4e181-2531">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2531">Any valid file number.</span></span></param>
        <param name="CharCount"><span data-ttu-id="4e181-2532">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2532">Required.</span></span> <span data-ttu-id="4e181-2533">읽을 문자의 수를 지정하는 임의의 유효한 숫자 식입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2533">Any valid numeric expression specifying the number of characters to read.</span></span></param>
        <summary><span data-ttu-id="4e181-2534"><see langword="String" /> 또는 <see langword="Input" /> 모드로 연 파일의 문자가 포함된 <see langword="Binary" /> 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2534">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="4e181-2535"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="InputString" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span> <span data-ttu-id="4e181-2536">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2536">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="4e181-2537"><see langword="Input" /> 또는 <see langword="Binary" /> 모드로 연 파일의 문자가 포함된 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2537">A string that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="4e181-2538"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="InputString" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2538">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2539">`InputString` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2539">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4e181-2540">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2540">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4e181-2541">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2541">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4e181-2542">읽을 데이터를 `InputString` 함수는 일반적으로 사용 하 여 파일에 기록 됩니다 `Print` 또는 `FilePut`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2542">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="4e181-2543">이 함수를 사용 하 여 파일에서 열에 대해서만 `Input` 또는 `Binary` 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2543">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="4e181-2544">달리 합니다 `Input` 함수는 `InputString` 읽은 모든 문자를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2544">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="4e181-2545">쉼표, 캐리지 리턴, 줄 바꿈, 인용 부호 및 선행 공백을 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2545">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="4e181-2546">열려 있는 파일을 사용 하 여 `Binary` 에 액세스를 사용 하 여 파일을 통해 읽으려는 시도가 합니다 `InputString` 까지 함수 `EOF` 반환 `True` 오류를 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2546">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="4e181-2547">사용 하 여는 `LOF` 및 `Loc` 대신 함수 `EOF` 사용 하 여 이진 파일을 읽을 때 `InputString`, 사용할지 `FileGet` 사용 하는 경우는 `EOF` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2547">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4e181-2548">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 보안 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2548">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="4e181-2549">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2549">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2550">이 예제에서는 합니다 `InputString` 파일에서 한 번에 하나의 문자를 읽고 인쇄 하는 함수는 `Output` 창입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2550">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="4e181-2551">이 예에서는 가정 `MyFile` 샘플 데이터의 여러 줄 텍스트 파일이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2551">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-2552"><paramref name="FileNumber" />가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-2552"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-2553"><paramref name="CharCount" /> &lt; 0 또는 &gt; 214입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2553"><paramref name="CharCount" /> &lt; 0 or &gt; 214.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4e181-2554">Visual Basic을 사용한 파일 액세스</span><span class="sxs-lookup"><span data-stu-id="4e181-2554">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4e181-2555">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2555">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4e181-2556">방법: Visual Basic에서 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2556">How to: Write Text to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member Kill : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Kill PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="4e181-2557">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2557">Required.</span></span> <span data-ttu-id="4e181-2558">삭제할 하나 이상의 파일 이름을 지정하는 문자열 식입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2558">A string expression that specifies one or more file names to be deleted.</span></span> <span data-ttu-id="4e181-2559"><paramref name="PathName" />에는 디렉터리나 폴더 및 드라이브가 포함될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2559"><paramref name="PathName" /> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="4e181-2560">디스크에서 파일을 삭제합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2560">Deletes files from a disk.</span></span> <span data-ttu-id="4e181-2561"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="Kill" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2561">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span></span> <span data-ttu-id="4e181-2562">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2562">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2563">`Kill` 여러 문자 사용을 지원 (`*`) 및 단일 문자 (`?`) 와일드 카드를 여러 파일을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2563">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="4e181-2564">**보안 정보** 를 실행 하려면 합니다 `Kill` 함수에는 필요 `Read` 및 `PathDiscovery` 의 플래그 <xref:System.Security.Permissions.FileIOPermission> 실행 코드에 부여 될 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2564">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="4e181-2565">자세한 내용은 <xref:System.Security.SecurityException> [코드 액세스 권한](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="4e181-2565">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2566">이 예제에서는 `Kill` 디스크에서 파일을 삭제 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2566">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-2567">대상 파일이 열려 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2567">Target file(s) open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="4e181-2568">대상 파일을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2568">Target file(s) not found.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="4e181-2569">사용 권한이 거부되었습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2569">Permission denied.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LineInput : int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.LineInput FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-2570">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2570">Required.</span></span> <span data-ttu-id="4e181-2571">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2571">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="4e181-2572">열려 있는 순차 파일에서 한 줄을 읽은 다음 <see langword="String" /> 변수에 할당합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2572">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></summary>
        <returns><span data-ttu-id="4e181-2573">열려 있는 순차 파일에서 한 줄을 읽은 다음 <see langword="String" /> 변수에 할당합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2573">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2574">`LineInput` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2574">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4e181-2575">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2575">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4e181-2576">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2576">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4e181-2577">데이터를 읽을 `LineInput` 일반적으로 사용 하 여 파일에 기록 됩니다 `Print`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2577">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-2578">파일을 읽을 때 파일 이름 확장명에 따라 파일의 콘텐츠에 대 한 판단 하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2578">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="4e181-2579">예를 들어, Form1.vb 라는 파일을 Visual Basic 원본 파일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2579">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="4e181-2580">합니다 `LineInput` 캐리지 리턴를 발견할 때까지 한 번에 파일 하나 문자에서 함수를 읽습니다 (`Chr(13)`) 또는 캐리지 리턴/줄 바꿈 (`Chr(13) + Chr(10)`) 시퀀스입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2580">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="4e181-2581">캐리지 리턴/줄 바꿈된 시퀀스 문자 문자열에 추가 하는 대신 생략 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2581">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-2582">사용 하 여 파일에서 읽기를 `LineInput` 함수에는 필요 `Read` 에서 액세스를 <xref:System.Security.Permissions.FileIOPermissionAccess> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2582">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2583">이 예제에서는 `LineInput` 함수 순차 파일에서 줄을 읽고 변수에 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2583">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="4e181-2584">이 예에서는 가정 `TestFile` 샘플 데이터의 여러 줄 텍스트 파일이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2584">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="4e181-2585">파일의 끝에 도달했습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2585">End of file reached.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-2586"><paramref name="FileNumber" />가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-2586"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4e181-2587">Visual Basic을 사용한 파일 액세스</span><span class="sxs-lookup"><span data-stu-id="4e181-2587">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4e181-2588">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2588">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4e181-2589">방법: Visual Basic에서 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2589">How to: Write Text to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Loc : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Loc FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-2590">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2590">Required.</span></span> <span data-ttu-id="4e181-2591">임의의 유효한 <see langword="Integer" /> 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2591">Any valid <see langword="Integer" /> file number.</span></span></param>
        <summary><span data-ttu-id="4e181-2592">열려 있는 파일에서 현재의 읽기/쓰기 위치를 지정하는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2592">Returns a value that specifies the current read/write position in an open file.</span></span></summary>
        <returns><span data-ttu-id="4e181-2593">열린 파일 내의 현재 읽기/쓰기 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2593">The current read/write position in an open file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2594">`Loc` 함수는 0, 0을 반환 하는 사용 하 여 파일의 첫 번째 바이트를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2594">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="4e181-2595">`Loc` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2595">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4e181-2596">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2596">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4e181-2597">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2597">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4e181-2598">다음은 각 파일 액세스 모드에 대 한 반환 값에 대 한 설명입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2598">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="4e181-2599">모드</span><span class="sxs-lookup"><span data-stu-id="4e181-2599">Mode</span></span>|<span data-ttu-id="4e181-2600">반환 값</span><span class="sxs-lookup"><span data-stu-id="4e181-2600">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="4e181-2601">읽거나 파일에 쓴 마지막 레코드의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2601">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="4e181-2602">128로 구분 된 파일로 현재 바이트 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2602">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="4e181-2603">그러나 정보를 반환할 `Loc` 순차 파일 사용 아니고 필요에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2603">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="4e181-2604">마지막 바이트를 읽거나 쓸 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2604">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2605">이 예제에서는 `Loc` 열려 있는 파일에서 현재 읽기/쓰기 위치를 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2605">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="4e181-2606">이 예에서는 가정 `MyFile` 샘플 데이터의 여러 줄 텍스트 파일이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2606">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-2607">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-2607">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4e181-2608"><see langword="Open" /> 함수를 사용하여 연 파일의 일부 또는 전부에 대한 다른 프로세스의 액세스를 제어합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2608">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="4e181-2609"><see langword="My" /> 기능을 사용하면 <see langword="Lock" /> 및 <see langword="Unlock" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2609">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="4e181-2610">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2610">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Lock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-2611">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2611">Required.</span></span> <span data-ttu-id="4e181-2612">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2612">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="4e181-2613"><see langword="Open" /> 함수를 사용하여 연 파일의 일부 또는 전부에 대한 다른 프로세스의 액세스를 제어합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2613">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="4e181-2614"><see langword="My" /> 기능을 사용하면 <see langword="Lock" /> 및 <see langword="Unlock" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2614">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="4e181-2615">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2615">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2616">합니다 `Lock` 및 `Unlock` 함수 환경에서 사용 되는 여러 프로세스가 동일한 파일에 대 한 액세스를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2616">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="4e181-2617">`Lock` 및 `Unlock` 함수 쌍에서 항상 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2617">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="4e181-2618">에 대 한 인수 `Lock` 고 `Unlock` 동일 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2618">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="4e181-2619">하는 경우 `Record`, 또는 `FromRecord` 및 `ToRecord` 는 제공 되지 않으면 전체 파일에 대 한 잠금 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2619">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="4e181-2620">경우 `Record` 단독으로 지정 된 단일 레코드를 잠그거나 잠금 해제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2620">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="4e181-2621">순차 입력 또는 출력에 대 한 파일을 연 경우 `Lock` 하 고 `Unlock` 지정 된 범위에 관계 없이 전체 파일에 영향을 줄 `FromRecord` 및`ToRecord`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2621">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2622">이 예제에서는 사용 합니다 `Lock` 및 `Unlock` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2622">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="4e181-2623">이 예에서는 가정 `People.txt` 구조체의 레코드가 포함 된 파일은 `Person`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2623">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-2624">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-2624">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4e181-2625">Visual Basic을 사용한 파일 액세스</span><span class="sxs-lookup"><span data-stu-id="4e181-2625">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-2626">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2626">Required.</span></span> <span data-ttu-id="4e181-2627">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2627">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="4e181-2628">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2628">Optional.</span></span> <span data-ttu-id="4e181-2629">잠그거나 잠금을 해제할 레코드 또는 바이트 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2629">Number of the only record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="4e181-2630"><see langword="Open" /> 함수를 사용하여 연 파일의 일부 또는 전부에 대한 다른 프로세스의 액세스를 제어합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2630">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="4e181-2631"><see langword="My" /> 기능을 사용하면 <see langword="Lock" /> 및 <see langword="Unlock" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2631">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="4e181-2632">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2632">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2633">합니다 `Lock` 및 `Unlock` 함수 환경에서 사용 되는 여러 프로세스가 동일한 파일에 대 한 액세스를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2633">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="4e181-2634">`Lock` 및 `Unlock` 함수 쌍에서 항상 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2634">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="4e181-2635">에 대 한 인수 `Lock` 고 `Unlock` 동일 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2635">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="4e181-2636">하는 경우 `Record`, 또는 `FromRecord` 및 `ToRecord` 는 제공 되지 않으면 전체 파일에 대 한 잠금 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2636">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="4e181-2637">경우 `Record` 단독으로 지정 된 단일 레코드를 잠그거나 잠금 해제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2637">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="4e181-2638">순차 입력 또는 출력에 대 한 파일을 연 경우 `Lock` 하 고 `Unlock` 지정 된 범위에 관계 없이 전체 파일에 영향을 줄 `FromRecord` 및`ToRecord`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2638">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2639">이 예제에서는 사용 합니다 `Lock` 및 `Unlock` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2639">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="4e181-2640">이 예에서는 가정 `People.txt` 구조체의 레코드가 포함 된 파일은 `Person`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2640">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-2641">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-2641">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4e181-2642">Visual Basic을 사용한 파일 액세스</span><span class="sxs-lookup"><span data-stu-id="4e181-2642">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-2643">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2643">Required.</span></span> <span data-ttu-id="4e181-2644">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2644">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="4e181-2645">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2645">Optional.</span></span> <span data-ttu-id="4e181-2646">잠그거나 잠금을 해제할 첫째 레코드 또는 바이트 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2646">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="4e181-2647">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2647">Optional.</span></span> <span data-ttu-id="4e181-2648">잠그거나 잠금을 해제할 마지막 레코드 또는 바이트 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2648">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="4e181-2649"><see langword="Open" /> 함수를 사용하여 연 파일의 일부 또는 전부에 대한 다른 프로세스의 액세스를 제어합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2649">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="4e181-2650"><see langword="My" /> 기능을 사용하면 <see langword="Lock" /> 및 <see langword="Unlock" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2650">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="4e181-2651">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2651">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2652">합니다 `Lock` 및 `Unlock` 함수 환경에서 사용 되는 여러 프로세스가 동일한 파일에 대 한 액세스를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2652">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="4e181-2653">`Lock` 및 `Unlock` 함수 쌍에서 항상 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2653">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="4e181-2654">에 대 한 인수 `Lock` 고 `Unlock` 동일 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2654">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="4e181-2655">하는 경우 `Record`, 또는 `FromRecord` 및 `ToRecord` 는 제공 되지 않으면 전체 파일에 대 한 잠금 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2655">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="4e181-2656">경우 `Record` 단독으로 지정 된 단일 레코드를 잠그거나 잠금 해제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2656">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="4e181-2657">순차 입력 또는 출력에 대 한 파일을 연 경우 `Lock` 하 고 `Unlock` 지정 된 범위에 관계 없이 전체 파일에 영향을 줄 `FromRecord` 및`ToRecord`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2657">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2658">이 예제에서는 사용 합니다 `Lock` 및 `Unlock` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2658">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="4e181-2659">이 예에서는 가정 `People.txt` 구조체의 레코드가 포함 된 파일은 `Person`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2659">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-2660">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-2660">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4e181-2661">Visual Basic을 사용한 파일 액세스</span><span class="sxs-lookup"><span data-stu-id="4e181-2661">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LOF : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.LOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-2662">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2662">Required.</span></span> <span data-ttu-id="4e181-2663">유효한 파일 번호가 포함된 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2663">An integer that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="4e181-2664"><see langword="FileOpen" /> 함수를 사용하여 연 파일의 크기(바이트)를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2664">Returns the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="4e181-2665"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="LOF" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2665">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span> <span data-ttu-id="4e181-2666">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2666">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="4e181-2667"><see langword="FileOpen" /> 함수를 사용하여 연 파일의 크기(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2667">The size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="4e181-2668"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="LOF" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2668">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2669">사용 된 `FileLen` 열려 있지 않은 파일의 길이를 가져오는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2669">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2670">이 예제에서는 `LOF` 열려 있는 파일의 크기를 결정 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2670">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="4e181-2671">이 예에서는 가정 `TestFile` 은 샘플 데이터가 포함 된 텍스트 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2671">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-2672">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-2672">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4e181-2673">Visual Basic에서 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="4e181-2673">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-2674">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2674">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member MkDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.MkDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="4e181-2675">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2675">Required.</span></span> <span data-ttu-id="4e181-2676">만들어질 디렉터리를 식별하는 문자열 식입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2676">A string expression that identifies the directory to be created.</span></span> <span data-ttu-id="4e181-2677"><paramref name="Path" />에는 드라이브가 포함될 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2677">The <paramref name="Path" /> may include the drive.</span></span> <span data-ttu-id="4e181-2678">드라이브를 지정하지 않은 경우 <see langword="MkDir" />을 사용하면 현재 드라이브에서 새 디렉터리를 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2678">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="4e181-2679">새 디렉터리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2679">Creates a new directory.</span></span> <span data-ttu-id="4e181-2680"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="MkDir" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2680">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span></span> <span data-ttu-id="4e181-2681">자세한 내용은 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2681">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2682">이 함수는 새 디렉터리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2682">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2683">이 예제에서는 `MkDir` 함수 디렉터리를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2683">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="4e181-2684">드라이브를 지정 하지 않으면 현재 드라이브에서 새 디렉터리가 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2684">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-2685"><paramref name="Path" />가 지정되지 않았거나 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2685"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="4e181-2686">사용 권한이 거부되었습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2686">Permission denied.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-2687">디렉터리가 이미 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2687">Directory already exists.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory.md"><span data-ttu-id="4e181-2688">방법: Visual Basic에서 디렉터리 만들기</span><span class="sxs-lookup"><span data-stu-id="4e181-2688">How to: Create a Directory in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Print : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Print (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-2689">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2689">Required.</span></span> <span data-ttu-id="4e181-2690">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2690">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="4e181-2691">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2691">Optional.</span></span> <span data-ttu-id="4e181-2692">파일에 쓸 쉼표로 구분된 0개 이상의 식입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2692">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
<span data-ttu-id="4e181-2693"><paramref name="Output" /> 인수 설정은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2693">The <paramref name="Output" /> argument settings are:</span></span> 
 <span data-ttu-id="4e181-2694"><see langword="T:System.IO.IOException" />: 파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-2694"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="4e181-2695"><paramref name="FileNumber" />가 없는 경우(<see langword="T:System.IO.IOException" />)</span><span class="sxs-lookup"><span data-stu-id="4e181-2695"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</span></span></param>
        <summary><span data-ttu-id="4e181-2696">표시 형식 데이터를 순차 파일에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2696">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2697">합니다 `Print` 및 `PrintLine` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2697">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4e181-2698">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2698">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4e181-2699">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2699">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4e181-2700">`Print` 줄 바꿈으로 줄의 끝에 포함 되지 않습니다. 그러나 `PrintLine` 줄 바꿈에 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2700">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="4e181-2701">사용 하 여 기록 된 데이터 `Print` 를 사용 하 여 일반적으로 파일에서 읽은 `LineInput` 또는 `Input`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2701">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="4e181-2702">생략 하면 `Output` 에 대 한 `PrintLine`에 빈 줄이 파일에 출력 `Print`, 아무것도 출력 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2702">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="4e181-2703">쉼표로 구분 된 여러 개의 식을 혼합 쉼표 탭 경계에 정렬 됩니다 및 `TAB` 일관 되지 않은 결과가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2703">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="4e181-2704">에 대 한 `Boolean` 데이터를 `True` 또는 `False` 출력 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2704">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="4e181-2705">합니다 `True` 고 `False` 로캘에 관계 없이 키워드는 번역 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2705">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="4e181-2706">날짜 데이터는 시스템에서 인식 표준 짧은 날짜 형식을 사용 하 여 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2706">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="4e181-2707">경우 날짜 또는 시간 구성 요소가 누락 되었거나 0 부분만 제공 된 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2707">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="4e181-2708">아무 것도 쓰지 파일로 경우 `Output` 데이터가 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2708">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="4e181-2709">그러나 경우 `Output` 목록 데이터가 `DBNull`, `Null` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2709">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="4e181-2710">에 대 한 `Error` 으로 표시 되는 데이터를 출력 `Error errorcode`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2710">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="4e181-2711">`Error` 키워드 로캘에 관계 없이 변환 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2711">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="4e181-2712">사용 하 여 파일에 쓴 모든 데이터 `Print` 국제적으로 인식 합니다; 즉, 데이터 형식이 올바로 적절 한 소수 구분 기호를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2712">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="4e181-2713">사용자가 여러 로캘에서 사용에 대 한 데이터를 출력 하려는 경우 `Write` 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2713">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="4e181-2714">사용 하 여 파일에 쓸 합니다 `Print` 또는 `PrintLine` 함수에 필요 `Write` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2714">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="4e181-2715">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2715">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2716">이 예제에서는 합니다 `Print` 및 `PrintLine` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2716">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4e181-2717">Visual Basic을 사용한 파일 액세스</span><span class="sxs-lookup"><span data-stu-id="4e181-2717">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4e181-2718">방법: Visual Basic에서 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2718">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4e181-2719">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2719">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member PrintLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.PrintLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-2720">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2720">Required.</span></span> <span data-ttu-id="4e181-2721">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2721">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="4e181-2722">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2722">Optional.</span></span> <span data-ttu-id="4e181-2723">파일에 쓸 쉼표로 구분된 0개 이상의 식입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2723">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
<span data-ttu-id="4e181-2724"><paramref name="Output" /> 인수 설정은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2724">The <paramref name="Output" /> argument settings are:</span></span> 
 <span data-ttu-id="4e181-2725"><see langword="T:System.IO.IOException" />: 파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-2725"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="4e181-2726"><paramref name="FileNumber" />가 없는 경우(<see langword="T:System.IO.IOException" />)</span><span class="sxs-lookup"><span data-stu-id="4e181-2726"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</span></span></param>
        <summary><span data-ttu-id="4e181-2727">표시 형식 데이터를 순차 파일에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2727">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2728">합니다 `Print` 및 `PrintLine` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2728">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4e181-2729">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2729">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4e181-2730">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2730">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4e181-2731">`Print` 줄 바꿈으로 줄의 끝에 포함 되지 않습니다. 그러나`PrintLine` 줄 바꿈에 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2731">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="4e181-2732">사용 하 여 기록 된 데이터 `Print` 를 사용 하 여 일반적으로 파일에서 읽은 `LineInput` 또는 `Input`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2732">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="4e181-2733">생략 하면 `Output` 에 대 한 `PrintLine`에 빈 줄이 파일에 출력 `Print`, 아무것도 출력 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2733">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="4e181-2734">쉼표로 구분 된 여러 개의 식을 혼합 쉼표 탭 경계에 정렬 됩니다 및 `TAB` 일관 되지 않은 결과가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2734">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="4e181-2735">에 대 한 `Boolean` 데이터를 `True` 또는 `False` 출력 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2735">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="4e181-2736">합니다 `True` 고 `False` 로캘에 관계 없이 키워드는 번역 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2736">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="4e181-2737">날짜 데이터는 시스템에서 인식 표준 짧은 날짜 형식을 사용 하 여 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2737">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="4e181-2738">경우 날짜 또는 시간 구성 요소가 누락 되었거나 0 부분만 제공 된 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2738">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="4e181-2739">아무 것도 쓰지 파일로 경우 `Output` 데이터가 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2739">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="4e181-2740">그러나 경우 `Output` 목록 데이터가 `DBNull`, `Null` 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2740">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="4e181-2741">에 대 한 `Error` 으로 표시 되는 데이터를 출력 `Error errorcode`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2741">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="4e181-2742">`Error` 키워드 로캘에 관계 없이 변환 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2742">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="4e181-2743">사용 하 여 파일에 쓴 모든 데이터 `Print` 국제적으로 인식 합니다; 즉, 데이터 형식이 올바로 적절 한 소수 구분 기호를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2743">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="4e181-2744">사용자가 여러 로캘에서 사용에 대 한 데이터를 출력 하려는 경우 `Write` 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2744">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="4e181-2745">사용 하 여 파일에 쓸 합니다 `Print` 또는 `PrintLine` 함수에 필요 `Write` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2745">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="4e181-2746">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2746">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2747">이 예제에서는 합니다 `Print` 및 `PrintLine` 파일로 데이터를 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2747">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4e181-2748">Visual Basic을 사용한 파일 액세스</span><span class="sxs-lookup"><span data-stu-id="4e181-2748">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4e181-2749">방법: Visual Basic에서 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2749">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4e181-2750">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2750">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberSignature Language="F#" Value="static member Rename : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Rename (OldPath, NewPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath"><span data-ttu-id="4e181-2751">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2751">Required.</span></span> <span data-ttu-id="4e181-2752">기존 파일 이름과 위치를 지정하는 문자열 식입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2752">A string expression that specifies the existing file name and location.</span></span> <span data-ttu-id="4e181-2753"><paramref name="OldPath" />에는 파일의 디렉터리와 드라이브가 포함될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2753"><paramref name="OldPath" /> may include the directory, and drive, of the file.</span></span></param>
        <param name="NewPath"><span data-ttu-id="4e181-2754">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2754">Required.</span></span> <span data-ttu-id="4e181-2755">새 파일 이름과 위치를 지정하는 문자열 식입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2755">A string expression that specifies the new file name and location.</span></span> <span data-ttu-id="4e181-2756"><paramref name="NewPath" />에는 대상 위치의 디렉터리와 드라이브가 포함될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2756"><paramref name="NewPath" /> may include directory and drive of the destination location.</span></span> <span data-ttu-id="4e181-2757"><paramref name="NewPath" />에는 이미 있는 파일 이름을 지정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2757">The file name specified by <paramref name="NewPath" /> cannot already exist.</span></span></param>
        <summary><span data-ttu-id="4e181-2758">디스크 파일 또는 디렉터리의 이름을 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2758">Renames a disk file or directory.</span></span> <span data-ttu-id="4e181-2759"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="Rename" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2759">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span></span> <span data-ttu-id="4e181-2760">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2760">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2761">`Rename` 함수 파일 이름을 바꿉니다 하 고 필요한 경우 다른 디렉터리로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2761">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="4e181-2762">`Rename` 함수 드라이브 간에 파일을 이동할 수 있지만 기존 디렉터리만 이름을 바꿀 수 때 둘 다 `NewPath` 및 `OldPath` 동일한 드라이브에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2762">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="4e181-2763">`Rename` 새 파일 또는 디렉터리를 만들 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2763">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="4e181-2764">사용 하는 `Rename` 열린 파일에 대 한 함수에서 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2764">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="4e181-2765">이름을 바꾸기 전에 열려 있는 파일을 닫아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2765">You must close an open file before renaming it.</span></span> <span data-ttu-id="4e181-2766">`Rename` 인수가 여러 문자 (\*) 및 단일 (?) 문자 와일드 카드를 포함할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2766">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4e181-2767">사용 하는 경우 `Rename` 복사할 파일을 보호 되지 않은 위치에서 보호 되는 위치를 파일에 덜 제한적인된 권한을 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2767">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="4e181-2768">보안상 위험을 소개 하지는 않았는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2768">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2769">이 예제에서는 `Rename` 함수 파일 이름을 바꾸려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2769">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="4e181-2770">이 예제에서는 이미 지정 된 디렉터리가 존재 하는지 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2770">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-2771">경로가 잘못되었습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2771">Path is invalid.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="4e181-2772"><paramref name="OldPath" /> 파일이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2772"><paramref name="OldPath" /> file does not exist.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-2773">다른 장치로 이름을 바꿀 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2773">Cannot rename to different device.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md"><span data-ttu-id="4e181-2774">방법: Visual Basic에서 파일 이름 바꾸기</span><span class="sxs-lookup"><span data-stu-id="4e181-2774">How to: Rename a File in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberSignature Language="F#" Value="static member Reset : unit -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4e181-2775"><see langword="FileOpen" /> 함수를 사용하여 연 디스크 파일을 모두 닫습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2775">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="4e181-2776"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="Reset" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2776">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span></span> <span data-ttu-id="4e181-2777">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2777">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2778">합니다 `Reset` 함수에 의해 열린 모든 활성 파일을 닫습니다 합니다 `FileOpen` 함수 및 동일한 기능 `FileClose()` 매개 변수 없이 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2778">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2779">이 예제에서는 `Reset` 함수를 열려 있는 모든 파일을 닫고 모든 파일 버퍼의 내용을 디스크에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2779">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="4e181-2780">사용 된 `Object` 변수 `FileNumber` 문자열 및 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2780">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md"><span data-ttu-id="4e181-2781">End 문</span><span class="sxs-lookup"><span data-stu-id="4e181-2781">End Statement</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member RmDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.RmDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="4e181-2782">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2782">Required.</span></span> <span data-ttu-id="4e181-2783">제거할 디렉터리나 폴더를 식별하는 문자열 식입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2783">A string expression that identifies the directory or folder to be removed.</span></span> <span data-ttu-id="4e181-2784"><paramref name="Path" />에는 드라이브가 포함될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2784"><paramref name="Path" /> can include the drive.</span></span> <span data-ttu-id="4e181-2785">드라이브를 지정하지 않은 경우 <see langword="RmDir" />을 사용하면 현재 드라이브에서 디렉터리를 제거할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2785">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="4e181-2786">기존 디렉터리를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2786">Removes an existing directory.</span></span> <span data-ttu-id="4e181-2787"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="RmDir" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2787">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span></span> <span data-ttu-id="4e181-2788">자세한 내용은 <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2788">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2789">사용 하려는 경우 오류가 발생 `RmDir` 파일이 포함 된 디렉터리에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2789">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="4e181-2790">사용 된 `Kill` 디렉터리를 제거 하기 전에 모든 파일을 삭제 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2790">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2791">이 예제에서는 `RmDir` 기존 디렉터리를 제거 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2791">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-2792"><paramref name="Path" />가 지정되지 않았거나 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2792"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-2793">대상 디렉터리에 파일이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2793">Target directory contains files.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="4e181-2794">디렉터리가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2794">Directory does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4e181-2795"><see langword="Long" /> 함수를 사용하여 연 파일에서 현재 읽기/쓰기 위치를 지정하는 <see langword="FileOpen" />을 반환하거나, <see langword="FileOpen" /> 함수를 사용하여 연 파일에서 다음 읽기/쓰기 작업 위치를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2795">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="4e181-2796"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="Seek" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2796">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="4e181-2797">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2797">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Seek : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Seek FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-2798">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2798">Required.</span></span> <span data-ttu-id="4e181-2799">유효한 파일 번호가 포함된 <see langword="Integer" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2799">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="4e181-2800"><see langword="Long" /> 함수를 사용하여 연 파일에서 현재 읽기/쓰기 위치를 지정하는 <see langword="FileOpen" />을 반환하거나, <see langword="FileOpen" /> 함수를 사용하여 연 파일에서 다음 읽기/쓰기 작업 위치를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2800">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="4e181-2801"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="Seek" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2801">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="4e181-2802">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2802">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="4e181-2803"><see langword="FileOpen" /> 함수를 사용하여 연 파일에서 현재 읽기/쓰기 위치를 지정하는 <see langword="Long" />이거나, <see langword="FileOpen" /> 함수를 사용하여 연 파일에서 다음 읽기/쓰기 작업 위치를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2803">A <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2804">`Seek` 1에서 2,147,483,647 사이의 값을 반환 합니다 (2 ^31-1).</span><span class="sxs-lookup"><span data-stu-id="4e181-2804">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 - 1), inclusive.</span></span>  
  
 <span data-ttu-id="4e181-2805">다음은 각 파일 액세스 모드에 대 한 반환 값에 대 한 설명입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2805">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="4e181-2806">모드</span><span class="sxs-lookup"><span data-stu-id="4e181-2806">Mode</span></span>|<span data-ttu-id="4e181-2807">반환 값</span><span class="sxs-lookup"><span data-stu-id="4e181-2807">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="4e181-2808">읽거나 쓴 다음 레코드의 수</span><span class="sxs-lookup"><span data-stu-id="4e181-2808">Number of the next record read or written</span></span>|  
|<span data-ttu-id="4e181-2809">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="4e181-2809">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="4e181-2810">다음 작업이 발생 하는 바이트 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2810">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="4e181-2811">파일의 첫 번째 바이트는 위치 1, 두 번째 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2811">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2812">이 예제에서는 `Seek` 현재 파일 위치를 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2812">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="4e181-2813">이 예제에서는 가정 `TestFile` 구조체의 레코드가 포함 된 파일은 `Record`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2813">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="4e181-2814">파일에서 열에 대 한 `Random` 모드에서는 `Seek` 다음 레코드의 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2814">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="4e181-2815">이외의 다른 모드로 연 파일에 대 한 `Random` 모드에서는 `Seek` 다음 작업이 발생 하는 바이트 위치를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2815">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="4e181-2816">가정 `TestFile` 몇 줄의 텍스트를 포함 하는 파일이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2816">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="4e181-2817">이 예제에서는 `Seek` 다음 읽기에 대 한 위치를 설정 하거나 파일을 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2817">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="4e181-2818">이외의 다른 모드로 연 파일에 대 한 `Random` 모드에서는 `Seek` 다음 작업이 발생 하는 바이트 위치를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2818">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="4e181-2819">가정 `TestFile` 몇 줄의 텍스트를 포함 하는 파일이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2819">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-2820">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-2820">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4e181-2821">Visual Basic에서 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="4e181-2821">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-2822">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2822">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberSignature Language="F#" Value="static member Seek : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Seek (FileNumber, Position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-2823">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2823">Required.</span></span> <span data-ttu-id="4e181-2824">유효한 파일 번호가 포함된 <see langword="Integer" />입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2824">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <param name="Position"><span data-ttu-id="4e181-2825">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2825">Required.</span></span> <span data-ttu-id="4e181-2826">1~2,147,483,647 사이의 수로, 다음 읽기/쓰기 작업이 발생할 위치를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2826">Number in the range 1-2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span></span></param>
        <summary><span data-ttu-id="4e181-2827"><see langword="Long" /> 함수를 사용하여 연 파일에서 현재 읽기/쓰기 위치를 지정하는 <see langword="FileOpen" />을 반환하거나, <see langword="FileOpen" /> 함수를 사용하여 연 파일에서 다음 읽기/쓰기 작업 위치를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2827">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="4e181-2828"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="Seek" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2828">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="4e181-2829">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2829">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2830">`Seek` 1에서 2,147,483,647 사이의 값을 반환 합니다 (2 ^31-1).</span><span class="sxs-lookup"><span data-stu-id="4e181-2830">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 - 1), inclusive.</span></span>  
  
 <span data-ttu-id="4e181-2831">다음은 각 파일 액세스 모드에 대 한 반환 값에 대 한 설명입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2831">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="4e181-2832">모드</span><span class="sxs-lookup"><span data-stu-id="4e181-2832">Mode</span></span>|<span data-ttu-id="4e181-2833">반환 값</span><span class="sxs-lookup"><span data-stu-id="4e181-2833">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="4e181-2834">읽거나 쓴 다음 레코드의 수</span><span class="sxs-lookup"><span data-stu-id="4e181-2834">Number of the next record read or written</span></span>|  
|<span data-ttu-id="4e181-2835">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="4e181-2835">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="4e181-2836">다음 작업이 발생 하는 바이트 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2836">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="4e181-2837">파일의 첫 번째 바이트는 위치 1, 두 번째 바이트는 위치 2, 등입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2837">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2838">이 예제에서는 `Seek` 현재 파일 위치를 반환 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2838">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="4e181-2839">이 예제에서는 가정 `TestFile` 구조체의 레코드가 포함 된 파일은 `Record`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2839">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="4e181-2840">파일에서 열에 대 한 `Random` 모드에서는 `Seek` 다음 레코드의 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2840">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="4e181-2841">이외의 다른 모드로 연 파일에 대 한 `Random` 모드에서는 `Seek` 다음 작업이 발생 하는 바이트 위치를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2841">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="4e181-2842">가정 `TestFile` 몇 줄의 텍스트를 포함 하는 파일이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2842">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="4e181-2843">이 예제에서는 `Seek` 다음 읽기에 대 한 위치를 설정 하거나 파일을 작성 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2843">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="4e181-2844">이외의 다른 모드로 연 파일에 대 한 `Random` 모드에서는 `Seek` 다음 작업이 발생 하는 바이트 위치를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2844">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="4e181-2845">가정 `TestFile` 몇 줄의 텍스트를 포함 하는 파일이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2845">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-2846">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-2846">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4e181-2847">Visual Basic에서 파일 읽기</span><span class="sxs-lookup"><span data-stu-id="4e181-2847">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4e181-2848">Visual Basic에서 파일에 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-2848">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberSignature Language="F#" Value="static member SetAttr : string * Microsoft.VisualBasic.FileAttribute -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.SetAttr (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="4e181-2849">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2849">Required.</span></span> <span data-ttu-id="4e181-2850">파일 이름을 지정하는 문자열 식입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2850">A string expression that specifies a file name.</span></span> <span data-ttu-id="4e181-2851"><paramref name="PathName" />에는 디렉터리나 폴더 및 드라이브가 포함될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2851"><paramref name="PathName" /> can include directory or folder, and drive.</span></span></param>
        <param name="Attributes"><span data-ttu-id="4e181-2852">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2852">Required.</span></span> <span data-ttu-id="4e181-2853">파일 특성을 지정하는 합계를 가진 상수 또는 숫자 식입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2853">Constant or numeric expression, whose sum specifies file attributes.</span></span></param>
        <summary><span data-ttu-id="4e181-2854">파일의 특성 정보를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2854">Sets attribute information for a file.</span></span> <span data-ttu-id="4e181-2855"><see langword="My" /> 기능은 파일 I/O 작업에서 <see langword="SetAttr" />보다 더 나은 생산성 및 성능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2855">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span></span> <span data-ttu-id="4e181-2856">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2856">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2857">열려 있는 파일의 특성을 설정 하려고 하면 런타임 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2857">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="4e181-2858">`Attributes` 인수 열거형 값은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2858">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="4e181-2859">값</span><span class="sxs-lookup"><span data-stu-id="4e181-2859">Value</span></span>|<span data-ttu-id="4e181-2860">상수</span><span class="sxs-lookup"><span data-stu-id="4e181-2860">Constant</span></span>|<span data-ttu-id="4e181-2861">설명</span><span class="sxs-lookup"><span data-stu-id="4e181-2861">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="4e181-2862">보통 (기본값)입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2862">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="4e181-2863">읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2863">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="4e181-2864">숨겨져 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2864">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="4e181-2865">시스템 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2865">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="4e181-2866">볼륨 레이블</span><span class="sxs-lookup"><span data-stu-id="4e181-2866">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="4e181-2867">디렉터리 또는 폴더입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2867">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="4e181-2868">마지막 백업 이후에 파일이 변경되었습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2868">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="4e181-2869">파일에 다른 이름이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2869">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="4e181-2870">이러한 열거형은 Visual Basic 언어로 지정되며</span><span class="sxs-lookup"><span data-stu-id="4e181-2870">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="4e181-2871">이름은 실제 값 대신 코드에서 아무 곳 이나 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2871">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2872">이 예제에서는 `SetAttr` 파일의 특성을 설정 하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2872">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4e181-2873"><paramref name="Attribute" /> 형식이 잘못되었습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2873"><paramref name="Attribute" /> type is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberSignature Language="F#" Value="static member SPC : int16 -&gt; Microsoft.VisualBasic.SpcInfo" Usage="Microsoft.VisualBasic.FileSystem.SPC Count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count"><span data-ttu-id="4e181-2874">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2874">Required.</span></span> <span data-ttu-id="4e181-2875">목록에서 다음 식을 표시하거나 출력하기 전에 삽입할 공백의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2875">The number of spaces to insert before displaying or printing the next expression in a list.</span></span></param>
        <summary><span data-ttu-id="4e181-2876"><see langword="Print" /> 또는 <see langword="PrintLine" /> 함수와 함께 사용되어 출력의 위치를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2876">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></summary>
        <returns><span data-ttu-id="4e181-2877"><see langword="Print" /> 또는 <see langword="PrintLine" /> 함수와 함께 사용되어 출력의 위치를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2877">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2878">경우 `Count` 출력 줄 너비의 다음 출력 위치를 즉시 인쇄 되는 공백 수 뒤에 보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2878">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="4e181-2879">하는 경우`Count` 출력 줄 너비 보다 큰 `SPC` 수식을 사용 하 여 다음 출력 위치를 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2879">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="4e181-2880">`currentprintposition`(+(`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="4e181-2880">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="4e181-2881">예를 들어, 현재 출력 위치가 24 인 경우 출력 줄 너비 80 이며 지정할 `SPC(90)`, 다음 인쇄 34 (현재 출력 위치가 + 90과 80 나머지) 위치에서 시작 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2881">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="4e181-2882">현재 출력 위치와 출력 줄 너비 차이 보다 작거나 `Count` (또는 `Count` `Mod` *너비*), `SPC` 다음 줄의 시작 부분으로 건너뛰고 생성 함수 공간 같음 `Count` -(*너비* - *currentprintposition*).</span><span class="sxs-lookup"><span data-stu-id="4e181-2882">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` - (*width* - *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4e181-2883">테이블 열이 와이드 문자 수 있도록 충분히 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2883">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2884">이 예제에서는 합니다 `SPC` 함수는 파일 및 출력의 위치를 **출력** 창.</span><span class="sxs-lookup"><span data-stu-id="4e181-2884">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="4e181-2885">Mod 연산자(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4e181-2885">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4e181-2886"><see langword="Print" /> 또는 <see langword="PrintLine" /> 함수와 함께 사용되어 출력의 위치를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2886">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberSignature Language="F#" Value="static member TAB : unit -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4e181-2887"><see langword="Print" /> 또는 <see langword="PrintLine" /> 함수와 함께 사용되어 출력의 위치를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2887">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="4e181-2888"><see langword="Print" /> 또는 <see langword="PrintLine" /> 함수와 함께 사용되어 출력의 위치를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2888">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2889">현재 줄의 현재 출력 위치가 보다 크면 `Column`, `TAB` 같음 열 값으로 건너뜁니다 `Column` 다음 출력 줄.</span><span class="sxs-lookup"><span data-stu-id="4e181-2889">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="4e181-2890">하는 경우 `Column` 가 1 보다 작은 `TAB` 열 1의 출력 위치를 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2890">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="4e181-2891">하는 경우 `Column` 출력 줄 너비 보다 큰 `TAB` 수식을 사용 하 여 다음 출력 위치를 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2891">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="4e181-2892">Mod 열 너비</span><span class="sxs-lookup"><span data-stu-id="4e181-2892">Column Mod width</span></span>  
  
 <span data-ttu-id="4e181-2893">예를 들어 경우 *너비* 80 이며 지정할 `TAB(90)`, 다음 출력 열 10 (나머지 90과 80)에서 시작 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2893">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="4e181-2894">경우 `Column` 현재 출력 위치가 계산된 된 출력 위치에 다음 줄에 인쇄 시작 보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2894">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="4e181-2895">계산된 된 출력 위치 현재 출력 위치가 보다 큰 경우 인쇄부터 계산된 된 출력 같은 줄에 위치 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2895">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="4e181-2896">출력 줄에서 가장 왼쪽의 출력 위치는 항상 1입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2896">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="4e181-2897">사용 하는 경우는 `Print` 또는 `PrintLine` 함수를 파일에 오른쪽에 있는 인쇄 위치는 사용 하 여 설정할 수 있는 출력 파일의 현재 너비를 `FileWidth` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2897">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="4e181-2898">합니다 `TAB` 함수를 사용할 수도 있습니다는 `WriteLine` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2898">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="4e181-2899">함께 사용할 수 없습니다 <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> 또는 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2899">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4e181-2900">테이블 열이 와이드 문자를 포함 하도록 충분히 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2900">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2901">이 예제에서는 합니다 `TAB` 함수는 파일 및 출력의 위치를 **출력** 창.</span><span class="sxs-lookup"><span data-stu-id="4e181-2901">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="4e181-2902">Mod 연산자(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4e181-2902">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberSignature Language="F#" Value="static member TAB : int16 -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB Column" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column"><span data-ttu-id="4e181-2903">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2903">Optional.</span></span> <span data-ttu-id="4e181-2904">목록에서 다음 식을 표시하거나 출력하기 전에 이동하는 열 수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2904">The column number moved to before displaying or printing the next expression in a list.</span></span> <span data-ttu-id="4e181-2905">생략할 경우 <see langword="TAB" />은 다음 출력 영역의 시작 부분으로 삽입 지점을 이동합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2905">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span></span></param>
        <summary><span data-ttu-id="4e181-2906"><see langword="Print" /> 또는 <see langword="PrintLine" /> 함수와 함께 사용되어 출력의 위치를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2906">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="4e181-2907"><see langword="Print" /> 또는 <see langword="PrintLine" /> 함수와 함께 사용되어 출력의 위치를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2907">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2908">현재 줄의 현재 출력 위치가 보다 크면 `Column`, `TAB` 같음 열 값으로 건너뜁니다 `Column` 다음 출력 줄.</span><span class="sxs-lookup"><span data-stu-id="4e181-2908">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="4e181-2909">하는 경우 `Column` 가 1 보다 작은 `TAB` 열 1의 출력 위치를 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2909">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="4e181-2910">하는 경우 `Column` 출력 줄 너비 보다 큰 `TAB` 수식을 사용 하 여 다음 출력 위치를 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2910">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="4e181-2911">Mod 열 너비</span><span class="sxs-lookup"><span data-stu-id="4e181-2911">Column Mod width</span></span>  
  
 <span data-ttu-id="4e181-2912">예를 들어 경우 *너비* 80 이며 지정할 `TAB(90)`, 다음 출력 열 10 (나머지 90과 80)에서 시작 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2912">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="4e181-2913">경우 `Column` 현재 출력 위치가 계산된 된 출력 위치에 다음 줄에 인쇄 시작 보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2913">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="4e181-2914">계산된 된 출력 위치 현재 출력 위치가 보다 큰 경우 인쇄부터 계산된 된 출력 같은 줄에 위치 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2914">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="4e181-2915">출력 줄에서 가장 왼쪽의 출력 위치는 항상 1입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2915">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="4e181-2916">사용 하는 경우는 `Print` 또는 `PrintLine` 함수를 파일에 오른쪽에 있는 인쇄 위치는 사용 하 여 설정할 수 있는 출력 파일의 현재 너비를 `FileWidth` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2916">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="4e181-2917">합니다 `TAB` 함수를 사용할 수도 있습니다는 `WriteLine` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2917">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="4e181-2918">함께 사용할 수 없습니다 <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> 또는 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2918">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4e181-2919">테이블 열이 와이드 문자를 포함 하도록 충분히 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2919">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2920">이 예제에서는 합니다 `TAB` 함수는 파일 및 출력의 위치를 **출력** 창.</span><span class="sxs-lookup"><span data-stu-id="4e181-2920">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="4e181-2921">Mod 연산자(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4e181-2921">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4e181-2922"><see langword="Open" /> 함수를 사용하여 연 파일의 일부 또는 전부에 대한 다른 프로세스의 액세스를 제어합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2922">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="4e181-2923"><see langword="My" /> 기능을 사용하면 <see langword="Lock" /> 및 <see langword="Unlock" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2923">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="4e181-2924">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2924">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Unlock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-2925">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2925">Required.</span></span> <span data-ttu-id="4e181-2926">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2926">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="4e181-2927"><see langword="Open" /> 함수를 사용하여 연 파일의 일부 또는 전부에 대한 다른 프로세스의 액세스를 제어합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2927">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="4e181-2928"><see langword="My" /> 기능을 사용하면 <see langword="Lock" /> 및 <see langword="Unlock" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2928">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="4e181-2929">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2929">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2930">합니다 `Lock` 및 `Unlock` 함수 환경에서 사용 되는 여러 프로세스가 동일한 파일에 대 한 액세스를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2930">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="4e181-2931">`Lock` 및 `Unlock` 함수 쌍에서 항상 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2931">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="4e181-2932">에 대 한 인수 `Lock` 고 `Unlock` 동일 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2932">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="4e181-2933">하는 경우 `Record`, 또는 `FromRecord` 및 `ToRecord` 는 제공 되지 않으면 전체 파일에 대 한 잠금 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2933">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="4e181-2934">경우 `Record` 단독으로 지정 된 단일 레코드를 잠그거나 잠금 해제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2934">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="4e181-2935">순차 입력 또는 출력에 대 한 파일을 연 경우 `Lock` 하 고 `Unlock` 지정 된 범위에 관계 없이 전체 파일에 영향을 줄 `FromRecord` 및`ToRecord`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2935">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2936">이 예제에서는 사용 합니다 `Lock` 및 `Unlock` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2936">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="4e181-2937">이 예에서는 가정 `People.txt` 구조체의 레코드가 포함 된 파일은 `Person`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2937">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-2938">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-2938">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4e181-2939">Visual Basic을 사용한 파일 액세스</span><span class="sxs-lookup"><span data-stu-id="4e181-2939">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-2940">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2940">Required.</span></span> <span data-ttu-id="4e181-2941">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2941">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="4e181-2942">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2942">Optional.</span></span> <span data-ttu-id="4e181-2943">잠그거나 잠금을 해제할 레코드 또는 바이트 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2943">Number of the only record or byte to lock or unlock</span></span></param>
        <summary><span data-ttu-id="4e181-2944"><see langword="Open" /> 함수를 사용하여 연 파일의 일부 또는 전부에 대한 다른 프로세스의 액세스를 제어합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2944">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="4e181-2945"><see langword="My" /> 기능을 사용하면 <see langword="Lock" /> 및 <see langword="Unlock" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2945">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="4e181-2946">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2946">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2947">합니다 `Lock` 및 `Unlock` 함수 환경에서 사용 되는 여러 프로세스가 동일한 파일에 대 한 액세스를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2947">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="4e181-2948">`Lock` 및 `Unlock` 함수 쌍에서 항상 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2948">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="4e181-2949">에 대 한 인수 `Lock` 고 `Unlock` 동일 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2949">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="4e181-2950">하는 경우 `Record`, 또는 `FromRecord` 및 `ToRecord` 는 제공 되지 않으면 전체 파일에 대 한 잠금 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2950">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="4e181-2951">경우 `Record` 단독으로 지정 된 단일 레코드를 잠그거나 잠금 해제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2951">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="4e181-2952">순차 입력 또는 출력에 대 한 파일을 연 경우 `Lock` 하 고 `Unlock` 지정 된 범위에 관계 없이 전체 파일에 영향을 줄 `FromRecord` 및`ToRecord`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2952">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2953">이 예제에서는 사용 합니다 `Lock` 및 `Unlock` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2953">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="4e181-2954">이 예에서는 가정 `People.txt` 구조체의 레코드가 포함 된 파일은 `Person`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2954">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-2955">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-2955">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4e181-2956">Visual Basic을 사용한 파일 액세스</span><span class="sxs-lookup"><span data-stu-id="4e181-2956">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-2957">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2957">Required.</span></span> <span data-ttu-id="4e181-2958">유효한 파일 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2958">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="4e181-2959">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2959">Optional.</span></span> <span data-ttu-id="4e181-2960">잠그거나 잠금을 해제할 첫째 레코드 또는 바이트 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2960">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="4e181-2961">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2961">Optional.</span></span> <span data-ttu-id="4e181-2962">잠그거나 잠금을 해제할 마지막 레코드 또는 바이트 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2962">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="4e181-2963"><see langword="Open" /> 함수를 사용하여 연 파일의 일부 또는 전부에 대한 다른 프로세스의 액세스를 제어합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2963">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="4e181-2964"><see langword="My" /> 기능을 사용하면 <see langword="Lock" /> 및 <see langword="Unlock" />을 사용할 때보다 파일 I/O 작업의 생산성 및 성능이 향상됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2964">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="4e181-2965">자세한 내용은 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-2965">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2966">합니다 `Lock` 및 `Unlock` 함수 환경에서 사용 되는 여러 프로세스가 동일한 파일에 대 한 액세스를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2966">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="4e181-2967">`Lock` 및 `Unlock` 함수 쌍에서 항상 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2967">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="4e181-2968">에 대 한 인수 `Lock` 고 `Unlock` 동일 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2968">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="4e181-2969">하는 경우 `Record`, 또는 `FromRecord` 및 `ToRecord` 는 제공 되지 않으면 전체 파일에 대 한 잠금 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2969">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="4e181-2970">경우 `Record` 단독으로 지정 된 단일 레코드를 잠그거나 잠금 해제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2970">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="4e181-2971">순차 입력 또는 출력에 대 한 파일을 연 경우 `Lock` 하 고 `Unlock` 지정 된 범위에 관계 없이 전체 파일에 영향을 줄 `FromRecord` 및`ToRecord`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2971">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-2972">이 예제에서는 사용 합니다 `Lock` 및 `Unlock` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2972">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="4e181-2973">이 예에서는 가정 `People.txt` 구조체의 레코드가 포함 된 파일은 `Person`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2973">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-2974">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-2974">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4e181-2975">Visual Basic을 사용한 파일 액세스</span><span class="sxs-lookup"><span data-stu-id="4e181-2975">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Write : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Write (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-2976">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-2976">Required.</span></span> <span data-ttu-id="4e181-2977">유효한 파일 번호가 포함된 <see langword="Integer" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2977">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="4e181-2978">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2978">Optional.</span></span> <span data-ttu-id="4e181-2979">파일에 쓸 쉼표로 구분된 하나 이상의 식입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2979">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="4e181-2980">순차 파일에 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2980">Writes data to a sequential file.</span></span> <span data-ttu-id="4e181-2981"><see langword="Write" />로 작성된 데이터는 일반적으로 <see langword="Input" />을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2981">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-2982">합니다 `Write` 및 `WriteLine` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2982">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4e181-2983">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2983">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4e181-2984">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2984">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4e181-2985">생략 하면 `Output`, 빈 줄을 파일에 출력 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2985">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="4e181-2986">여러 식에 쉼표를 사용 하 여 구분할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2986">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="4e181-2987">달리 합니다 `Print` 함수는 `Write` 함수는 파일에 기록 될 때 해당 항목 및 문자열 주위에 따옴표 사이 쉼표를 삽입 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2987">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="4e181-2988">명시적 구분 기호 목록에 배치할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2988">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="4e181-2989">때 `Write` 파일에 숫자 데이터를 쓰는 데 사용 되 `Boolean`, 날짜, null 및 `Error` 데이터 형식이 지원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2989">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="4e181-2990">데이터를 항상 읽을 수 있습니다 하 고 사용 하 여 올바르게 해석 뒤에 다음과 같은 유니버설 가정을 `Input`로캘에 관계 없이:</span><span class="sxs-lookup"><span data-stu-id="4e181-2990">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="4e181-2991">숫자 데이터 소수 구분 기호로 마침표를 사용 하 여 항상 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2991">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="4e181-2992">에 대 한 `Boolean` 데이터를 `#TRUE#` 또는 `#FALSE#` 출력 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2992">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="4e181-2993">합니다 `True` 고 `False` 로캘에 관계 없이 키워드는 번역 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2993">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="4e181-2994">날짜 데이터 유니버설 날짜 형식을 사용 하 여 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2994">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="4e181-2995">경우 날짜 또는 시간 구성 요소가 누락 되었거나 0 부분만 제공 된 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2995">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="4e181-2996">아무 것도 쓰지 파일로 경우 `Output` 데이터가 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2996">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="4e181-2997">그러나 null 데이터에 대 한 `#NULL#` 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2997">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="4e181-2998">에 대 한 `Error` 으로 표시 되는 데이터를 출력 `#ERROR errorcode#`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2998">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="4e181-2999">`Error` 로캘에 관계 없이 키워드는 번역 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-2999">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="4e181-3000">`WriteLine` 줄 바꿈 문자를 삽입 합니다 (즉, 캐리지 리턴/줄 바꿈, 또는 `Chr(13) + Chr(10)`) 마지막 문자에 쓴 후 `Output` 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3000">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="4e181-3001">큰따옴표를 사용 하 여 문자열에 따옴표를 포함할 수 있습니다 또는 ""입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3001">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="4e181-3002">예를 들면 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3002">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="4e181-3003">값을 사용 하 여 문자열을 반환 합니다 `Double quotation marks aren't "difficult" to handle`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3003">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="4e181-3004">사용 하 여 파일에 쓸 합니다 `Write` 또는 `WriteLine` 함수에 필요 `Append` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3004">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="4e181-3005">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-3005">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-3006">이 예제에서는 `Write` 순차 파일에 원시 데이터를 쓸 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3006">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4e181-3007">파일 모드가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="4e181-3007">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4e181-3008">Visual Basic을 사용한 파일 액세스</span><span class="sxs-lookup"><span data-stu-id="4e181-3008">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4e181-3009">방법: Visual Basic에서 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-3009">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4e181-3010">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-3010">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.WriteLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4e181-3011">필수 요소.</span><span class="sxs-lookup"><span data-stu-id="4e181-3011">Required.</span></span> <span data-ttu-id="4e181-3012">유효한 파일 번호가 포함된 <see langword="Integer" /> 식입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3012">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="4e181-3013">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3013">Optional.</span></span> <span data-ttu-id="4e181-3014">파일에 쓸 쉼표로 구분된 하나 이상의 식입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3014">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="4e181-3015">순차 파일에 데이터를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3015">Writes data to a sequential file.</span></span> <span data-ttu-id="4e181-3016"><see langword="Write" />로 작성된 데이터는 일반적으로 <see langword="Input" />을 사용하여 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3016">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4e181-3017">합니다 `Write` 및 `WriteLine` 함수는 이전 버전과 호환성을 위해 제공 되며 성능에 영향을 줄 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3017">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4e181-3018">비 레거시 응용 프로그램의 경우는 `My.Computer.FileSystem` 개체는 더 나은 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3018">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4e181-3019">자세한 내용은 [Visual Basic을 사용한 파일 액세스](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3019">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4e181-3020">생략 하면 `Output`, 빈 줄을 파일에 출력 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3020">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="4e181-3021">여러 식에 쉼표를 사용 하 여 구분할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3021">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="4e181-3022">달리 합니다 `Print` 함수는 `Write` 함수는 파일에 기록 될 때 해당 항목 및 문자열 주위에 따옴표 사이 쉼표를 삽입 합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3022">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="4e181-3023">명시적 구분 기호 목록에 배치할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3023">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="4e181-3024">때 `Write` 파일에 숫자 데이터를 쓰는 데 사용 되 `Boolean`, 날짜, null 및 `Error` 데이터 형식이 지원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3024">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="4e181-3025">데이터를 항상 읽을 수 있습니다 하 고 사용 하 여 올바르게 해석 뒤에 다음과 같은 유니버설 가정을 `Input`로캘에 관계 없이:</span><span class="sxs-lookup"><span data-stu-id="4e181-3025">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="4e181-3026">숫자 데이터 소수 구분 기호로 마침표를 사용 하 여 항상 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3026">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="4e181-3027">에 대 한 `Boolean` 데이터를 `#TRUE#` 또는 `#FALSE#` 출력 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3027">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="4e181-3028">합니다 `True` 고 `False` 로캘에 관계 없이 키워드는 번역 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3028">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="4e181-3029">날짜 데이터 유니버설 날짜 형식을 사용 하 여 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3029">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="4e181-3030">경우 날짜 또는 시간 구성 요소가 누락 되었거나 0 부분만 제공 된 파일에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3030">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="4e181-3031">아무 것도 쓰지 파일로 경우 `Output` 데이터가 비어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3031">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="4e181-3032">그러나 null 데이터에 대 한 `#NULL#` 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3032">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="4e181-3033">에 대 한 `Error` 으로 표시 되는 데이터를 출력 `#ERROR errorcode#`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3033">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="4e181-3034">`Error` 로캘에 관계 없이 키워드는 번역 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3034">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="4e181-3035">`WriteLine` 줄 바꿈 문자를 삽입 합니다 (즉, 캐리지 리턴/줄 바꿈, 또는 `Chr(13) + Chr(10)`) 마지막 문자에 쓴 후 `Output` 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3035">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="4e181-3036">큰따옴표를 사용 하 여 문자열에 따옴표를 포함할 수 있습니다 또는 ""입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3036">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="4e181-3037">예를 들면 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3037">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="4e181-3038">값을 사용 하 여 문자열을 반환 합니다 `Double quotation marks aren't "difficult" to handle`합니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3038">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="4e181-3039">사용 하 여 파일에 쓸 합니다 `Write` 또는 `WriteLine` 함수에 필요 `Append` 에서 액세스를 `FileIOPermissionAccess` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3039">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="4e181-3040">자세한 내용은 <xref:System.Security.Permissions.FileIOPermissionAccess>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="4e181-3040">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4e181-3041">이 예제에서는 `Write` 순차 파일에 원시 데이터를 쓸 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="4e181-3041">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4e181-3042">Visual Basic을 사용한 파일 액세스</span><span class="sxs-lookup"><span data-stu-id="4e181-3042">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4e181-3043">방법: Visual Basic에서 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-3043">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4e181-3044">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="4e181-3044">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>